{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FayreMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20UpgradeableExtended.sol\\\";\\nimport \\\"./interfaces/IFayreSharedCollection721.sol\\\";\\nimport \\\"./interfaces/IFayreSharedCollection1155.sol\\\";\\nimport \\\"./interfaces/IFayreMembershipCard721.sol\\\";\\nimport \\\"./interfaces/IFayreTokenLocker.sol\\\";\\n\\n\\ncontract FayreMarketplace is OwnableUpgradeable {\\n    /**\\n        E#1: ERC721 has no nft amount\\n        E#2: ERC1155 needs nft amount\\n        E#3: must send liquidity\\n        E#4: insufficient funds for minting\\n        E#5: unable to refund extra liquidity\\n        E#6: unable to send liquidity to treasury\\n        E#7: not the owner\\n        E#8: invalid trade type\\n        E#9: sale amount not specified\\n        E#10: sale expiration must be greater than start\\n        E#11: invalid network id\\n        E#12: cannot finalize your sale, cancel?\\n        E#13: you must own the nft\\n        E#14: salelist expired\\n        E#15: asset type not supported\\n        E#16: unable to send liquidity to sale owner\\n        E#17: not enough liquidity\\n        E#18: unable to send liquidity to creator\\n        E#19: membership card address already present\\n        E#20: membership card address not found\\n        E#21: not enough free mints\\n        E#22: a sale already active\\n        E#23: a bid already active\\n        E#24: only marketplace manager\\n        E#25: cannot finalize unexpired auction\\n        E#26: you must specify token address\\n        E#27: error sending ERC20 tokens\\n        E#28: cannot accept your offer\\n        E#29: free offer expired\\n        E#30: liquidity not needed\\n        E#31: wrong base amount\\n        E#32: not collection owner\\n        E#33: empty collection name\\n        E#34: token locker address already present\\n        E#35: token locker address not found\\n        E#36: only a valid free minter can mint\\n    */\\n\\n    enum AssetType {\\n        LIQUIDITY,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    enum TradeType {\\n        SALE_FIXEDPRICE,\\n        SALE_ENGLISHAUCTION,\\n        SALE_DUTCHAUCTION,\\n        BID\\n    }\\n\\n    struct TradeRequest {\\n        uint256 networkId;\\n        address collectionAddress;\\n        uint256 tokenId;\\n        address owner;\\n        TradeType tradeType;\\n        AssetType assetType;\\n        uint256 nftAmount;\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 start;\\n        uint256 expiration;\\n        uint256 saleId;\\n        uint256 baseAmount;\\n    }\\n\\n    struct TokenData {\\n        address creator;\\n        AssetType assetType;\\n        uint256 royaltiesPct;\\n        uint256[] salesIds;\\n        mapping(uint256 => uint256[]) bidsIds;\\n    }\\n\\n    struct MintTokenData {\\n        AssetType assetType;\\n        string tokenURI;\\n        uint256 amount;\\n        uint256 royaltiesPct;\\n        string collectionName;\\n    }\\n\\n    struct FreeMinterData {\\n        address freeMinter;\\n        uint256 amount;\\n    }\\n\\n    event Mint(address indexed owner, AssetType indexed assetType, uint256 indexed tokenId, uint256 amount, uint256 royaltiesPct, string tokenURI, string collectionName);\\n    event PutOnSale(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed saleId, TradeRequest tradeRequest);\\n    event CancelSale(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed saleId, TradeRequest tradeRequest);\\n    event FinalizeSale(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed saleId, TradeRequest tradeRequest, address buyer);\\n    event PlaceBid(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed bidId, TradeRequest tradeRequest);\\n    event CancelBid(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed bidId, TradeRequest tradeRequest);\\n    event AcceptFreeOffer(address indexed collectionAddress, uint256 indexed tokenId, uint256 indexed bidId, TradeRequest tradeRequest, address nftOwner);\\n    event LiquidityTransfer(address indexed to, uint256 amount);\\n    event ERC20Transfer(address indexed tokenAddress, address indexed from, address indexed to, uint256 amount);\\n    event ERC721Transfer(address indexed collectionAddress, address indexed from, address indexed to, uint256 tokenId);\\n    event ERC1155Transfer(address indexed collectionAddress, address indexed from, address indexed to, uint256 tokenId, uint256 amount);\\n    event SetFreeMinter(address indexed caller, uint256 indexed eventIndex, FreeMinterData freeMinterData);\\n    event RenameMintedCollection(string indexed collectionName, string indexed newCollectionName);\\n    event TransferMintedCollectionOwnership(string indexed collectionName, address from, address to);\\n\\n    address public fayreSharedCollection721;\\n    address public fayreSharedCollection1155;\\n    address public oracleDataFeed;\\n    uint256 public mintFeeUSD;\\n    uint256 public tradeFeePct;\\n    address public treasuryAddress;\\n    address[] public membershipCardsAddresses;\\n    address[] public tokenLockersAddresses;  \\n    mapping(uint256 => TradeRequest) public sales;\\n    mapping(uint256 => mapping(address => mapping(uint256 => mapping(address => bool)))) public hasActiveSale;\\n    mapping(uint256 => TradeRequest) public bids;\\n    mapping(uint256 => mapping(address => mapping(uint256 => mapping(address => bool)))) public hasActiveBid;\\n    mapping(address => bool) public isMarketplaceManager;\\n    mapping(address => uint256) public remainingFreeMints;\\n    mapping(string => address) public mintedCollectionsOwners;\\n    mapping(address => uint256) public tokenLockersRequiredAmounts;\\n    bool public onlyFreeMintersCanMint;\\n\\n\\n    uint256 private _networkId;\\n    mapping(uint256 => mapping(address => mapping(uint256 => TokenData))) private _tokensData;\\n    uint256 private _currentSaleId;\\n    uint256 private _currentBidId;\\n    uint256 private _currentEventsIndex;\\n\\n    modifier onlyMarketplaceManager() {\\n        require(isMarketplaceManager[msg.sender], \\\"E#24\\\");\\n        _;\\n    }\\n\\n    function setFayreSharedCollection721(address newFayreSharedCollection721) external onlyOwner {\\n        fayreSharedCollection721 = newFayreSharedCollection721;\\n    }\\n\\n    function setFayreSharedCollection1155(address newFayreSharedCollection1155) external onlyOwner {\\n        fayreSharedCollection1155 = newFayreSharedCollection1155;\\n    }\\n\\n    function setOracleDataFeedAddress(address newOracleDataFeed) external onlyOwner {\\n        oracleDataFeed = newOracleDataFeed;\\n    }\\n\\n    function setMintFee(uint256 newMintFeeUSD) external onlyOwner {\\n        mintFeeUSD = newMintFeeUSD;\\n    }\\n\\n    function setTradeFee(uint256 newTradeFeePct) external onlyOwner {\\n        tradeFeePct = newTradeFeePct;\\n    }\\n\\n    function setTreasury(address newTreasuryAddress) external onlyOwner {\\n        treasuryAddress = newTreasuryAddress;\\n    }\\n\\n    function setOnlyFreeMintersCanMint(bool newOnlyFreeMintersCanMint) external onlyOwner {\\n        onlyFreeMintersCanMint = newOnlyFreeMintersCanMint;\\n    }\\n\\n    function addMembershipCardAddress(address membershipCardsAddress) external onlyOwner {\\n        for (uint256 i = 0; i < membershipCardsAddresses.length; i++)\\n            if (membershipCardsAddresses[i] == membershipCardsAddress)\\n                revert(\\\"E#19\\\");\\n\\n        membershipCardsAddresses.push(membershipCardsAddress);\\n    }\\n\\n    function removeMembershipCardAddress(address membershipCardsAddress) external onlyOwner {\\n        uint256 indexToDelete = type(uint256).max;\\n\\n        for (uint256 i = 0; i < membershipCardsAddresses.length; i++)\\n            if (membershipCardsAddresses[i] == membershipCardsAddress)\\n                indexToDelete = i;\\n\\n        require(indexToDelete != type(uint256).max, \\\"E#20\\\");\\n\\n        membershipCardsAddresses[indexToDelete] = membershipCardsAddresses[membershipCardsAddresses.length - 1];\\n\\n        membershipCardsAddresses.pop();\\n    }\\n\\n    function addTokenLockerAddress(address tokenLockerAddress) external onlyOwner {\\n        for (uint256 i = 0; i < tokenLockersAddresses.length; i++)\\n            if (tokenLockersAddresses[i] == tokenLockerAddress)\\n                revert(\\\"E#34\\\");\\n\\n        tokenLockersAddresses.push(tokenLockerAddress);\\n    }\\n\\n    function removeTokenLockerAddress(address tokenLockerAddress) external onlyOwner {\\n        uint256 indexToDelete = type(uint256).max;\\n\\n        for (uint256 i = 0; i < tokenLockersAddresses.length; i++)\\n            if (tokenLockersAddresses[i] == tokenLockerAddress)\\n                indexToDelete = i;\\n\\n        require(indexToDelete != type(uint256).max, \\\"E#35\\\");\\n\\n        tokenLockersAddresses[indexToDelete] = tokenLockersAddresses[tokenLockersAddresses.length - 1];\\n\\n        tokenLockersAddresses.pop();\\n    }\\n\\n    function setTokenLockerRequiredAmount(address tokenLockerAddress, uint256 amount) external onlyOwner {\\n        tokenLockersRequiredAmounts[tokenLockerAddress] = amount;\\n    }\\n\\n    function setAddressAsMarketplaceManager(address marketplaceManagerAddress) external onlyOwner {\\n        isMarketplaceManager[marketplaceManagerAddress] = true;\\n    }\\n\\n    function unsetAddressAsMarketplaceManager(address marketplaceManagerAddress) external onlyOwner {\\n        isMarketplaceManager[marketplaceManagerAddress] = false;\\n    }\\n\\n    function setFreeMinters(FreeMinterData[] calldata freeMintersData) external onlyMarketplaceManager {\\n        for (uint256 i = 0; i < freeMintersData.length; i++) {\\n            remainingFreeMints[freeMintersData[i].freeMinter] = freeMintersData[i].amount;\\n\\n            emit SetFreeMinter(msg.sender, _currentEventsIndex, freeMintersData[i]);\\n\\n            _currentEventsIndex++;\\n        } \\n    }\\n\\n    function batchMint(MintTokenData[] calldata mintTokensData) external {\\n        require(remainingFreeMints[msg.sender] >= mintTokensData.length, \\\"E#21\\\");\\n\\n        for (uint256 i = 0; i < mintTokensData.length; i++) {\\n            remainingFreeMints[msg.sender]--;\\n\\n            _mint(mintTokensData[i]); \\n        }\\n    }\\n\\n    function mint(AssetType assetType, string memory tokenURI, uint256 amount, uint256 royaltiesPct, string memory collectionName) external payable returns(uint256) {\\n        if (bytes(collectionName).length > 0)\\n            if (mintedCollectionsOwners[collectionName] != address(0))\\n                require(mintedCollectionsOwners[collectionName] == msg.sender, \\\"E#32\\\");\\n            else\\n                mintedCollectionsOwners[collectionName] = msg.sender;\\n        \\n        if (onlyFreeMintersCanMint)\\n            require(remainingFreeMints[msg.sender] > 0, \\\"E#36\\\");\\n\\n        if (remainingFreeMints[msg.sender] > 0) {\\n            require(msg.value == 0, \\\"E#30\\\");\\n\\n            remainingFreeMints[msg.sender]--;  \\n        } else {\\n            uint256 remaningMintFeeUSD = _processFee(msg.sender, mintFeeUSD, 0);\\n\\n            uint256 remaningMintFee = 0;\\n\\n            if (remaningMintFeeUSD > 0) {\\n                require(msg.value > 0, \\\"E#3\\\");\\n\\n                remaningMintFee = _convertUSDToLiquidity(remaningMintFeeUSD);\\n\\n                require(msg.value >= remaningMintFee, \\\"E#4\\\");\\n\\n                _transferAsset(AssetType.LIQUIDITY, address(0), address(0), treasuryAddress, 0, remaningMintFee, \\\"E#6\\\");\\n            }\\n\\n            uint256 valueToRefund = msg.value - remaningMintFee;\\n\\n            if (valueToRefund > 0)\\n                _transferAsset(AssetType.LIQUIDITY, address(0), address(0), msg.sender, 0, valueToRefund, \\\"E#5\\\");\\n        }\\n\\n        MintTokenData memory mintTokenData = MintTokenData(assetType, tokenURI, amount, royaltiesPct, collectionName);\\n\\n        uint256 tokenId = _mint(mintTokenData);\\n\\n        return tokenId;\\n    }\\n\\n    function putOnSale(TradeRequest memory tradeRequest) external { \\n        require(tradeRequest.owner == msg.sender, \\\"E#7\\\");\\n        require(tradeRequest.networkId > 0, \\\"E#11\\\");\\n        require(tradeRequest.assetType == AssetType.ERC721 || tradeRequest.assetType == AssetType.ERC1155, \\\"E#15\\\");\\n\\n        if (tradeRequest.assetType == AssetType.ERC721) {\\n            require(IERC721Upgradeable(tradeRequest.collectionAddress).ownerOf(tradeRequest.tokenId) == msg.sender, \\\"E#13\\\");\\n            require(tradeRequest.nftAmount == 0, \\\"E#1\\\");\\n        } \\n        else if (tradeRequest.assetType == AssetType.ERC1155) {\\n            require(IERC1155Upgradeable(tradeRequest.collectionAddress).balanceOf(msg.sender, tradeRequest.tokenId) > 0, \\\"E#13\\\");\\n            require(tradeRequest.nftAmount > 0, \\\"E#2\\\");\\n        }\\n\\n        require(tradeRequest.amount > 0, \\\"E#9\\\");\\n        require(tradeRequest.expiration > block.timestamp, \\\"E#10\\\");\\n        require(tradeRequest.tradeType == TradeType.SALE_FIXEDPRICE || tradeRequest.tradeType == TradeType.SALE_ENGLISHAUCTION || tradeRequest.tradeType == TradeType.SALE_DUTCHAUCTION, \\\"E#8\\\");\\n        \\n        if (tradeRequest.tradeType == TradeType.SALE_DUTCHAUCTION)\\n            require(tradeRequest.baseAmount > 0 && tradeRequest.baseAmount < tradeRequest.amount, \\\"E#31\\\");\\n\\n        require(!hasActiveSale[tradeRequest.networkId][tradeRequest.collectionAddress][tradeRequest.tokenId][msg.sender], \\\"E#22\\\");\\n\\n        tradeRequest.collectionAddress = tradeRequest.collectionAddress;\\n        tradeRequest.start = block.timestamp;\\n\\n        if (tradeRequest.tradeType == TradeType.SALE_ENGLISHAUCTION)\\n            _clearSaleIdBids(tradeRequest.networkId, tradeRequest.collectionAddress, tradeRequest.tokenId, _currentSaleId);\\n            \\n        hasActiveSale[tradeRequest.networkId][tradeRequest.collectionAddress][tradeRequest.tokenId][msg.sender] = true;\\n\\n        _tokensData[tradeRequest.networkId][tradeRequest.collectionAddress][tradeRequest.tokenId].salesIds.push(_currentSaleId);\\n\\n        sales[_currentSaleId] = tradeRequest;\\n\\n        emit PutOnSale(tradeRequest.collectionAddress, tradeRequest.tokenId, _currentSaleId, tradeRequest);\\n\\n        _currentSaleId++;\\n    }\\n\\n    function cancelSale(uint256 saleId) external {\\n        require(sales[saleId].owner == msg.sender, \\\"E#7\\\");\\n\\n        sales[saleId].start = 0;\\n        sales[saleId].expiration = 0;\\n\\n        _clearSaleData(saleId);\\n\\n        emit CancelSale(sales[saleId].collectionAddress, sales[saleId].tokenId, saleId, sales[saleId]);\\n    }\\n\\n    function finalizeSale(uint256 saleId) external payable {\\n        TradeRequest storage saleTradeRequest = sales[saleId];\\n\\n        address buyer = address(0);\\n\\n        if (saleTradeRequest.tradeType == TradeType.SALE_FIXEDPRICE) {\\n            require(msg.value >= saleTradeRequest.amount, \\\"E#17\\\");\\n            require(saleTradeRequest.owner != msg.sender, \\\"E#12\\\");\\n            require(saleTradeRequest.expiration > block.timestamp, \\\"E#14\\\");\\n\\n            saleTradeRequest.expiration = 0;\\n\\n            buyer = msg.sender;\\n\\n            _clearSaleData(saleId);\\n\\n            _sendAmountToSeller(AssetType.LIQUIDITY, saleTradeRequest.networkId, saleTradeRequest.collectionAddress, saleTradeRequest.tokenId, saleTradeRequest.amount, address(0), saleTradeRequest.owner, buyer);\\n        } else if (saleTradeRequest.tradeType == TradeType.SALE_ENGLISHAUCTION) {\\n            require(saleTradeRequest.expiration <= block.timestamp, \\\"E#25\\\");\\n\\n            uint256[] storage bidsIds = _tokensData[saleTradeRequest.networkId][saleTradeRequest.collectionAddress][saleTradeRequest.tokenId].bidsIds[saleId];\\n\\n            uint256 highestBidId = 0;\\n            uint256 highestBidAmount = 0;\\n\\n            for (uint256 i = 0; i < bidsIds.length; i++)\\n                if (bids[bidsIds[i]].amount >= saleTradeRequest.amount)\\n                    if (bids[bidsIds[i]].amount > highestBidAmount) {\\n                        highestBidId = bidsIds[i];\\n                        highestBidAmount = bids[bidsIds[i]].amount;\\n                    }\\n                    \\n            buyer = bids[highestBidId].owner;\\n\\n            _clearSaleData(saleId);\\n\\n            _sendAmountToSeller(AssetType.ERC20, saleTradeRequest.networkId, saleTradeRequest.collectionAddress, saleTradeRequest.tokenId, highestBidAmount, saleTradeRequest.tokenAddress, saleTradeRequest.owner, buyer);\\n        } else if (saleTradeRequest.tradeType == TradeType.SALE_DUTCHAUCTION) {\\n            require(saleTradeRequest.owner != msg.sender, \\\"E#12\\\");\\n            require(saleTradeRequest.expiration > block.timestamp, \\\"E#14\\\");\\n\\n            uint256 amountsDiff = saleTradeRequest.amount - saleTradeRequest.baseAmount;\\n\\n            uint256 priceDelta = amountsDiff - ((amountsDiff * (block.timestamp - saleTradeRequest.start)) / (saleTradeRequest.expiration - saleTradeRequest.start));\\n\\n            uint256 currentPrice = saleTradeRequest.baseAmount + priceDelta;\\n            \\n            require(msg.value >= currentPrice, \\\"E#17\\\");\\n\\n            saleTradeRequest.expiration = 0;\\n\\n            buyer = msg.sender;\\n\\n            _clearSaleData(saleId);\\n\\n            _sendAmountToSeller(AssetType.LIQUIDITY, saleTradeRequest.networkId, saleTradeRequest.collectionAddress, saleTradeRequest.tokenId, currentPrice, address(0), saleTradeRequest.owner, buyer);\\n        }\\n\\n        if (buyer != address(0))\\n            _transferAsset(saleTradeRequest.assetType, saleTradeRequest.collectionAddress, saleTradeRequest.owner, buyer, saleTradeRequest.tokenId, saleTradeRequest.nftAmount, \\\"\\\");\\n\\n        emit FinalizeSale(saleTradeRequest.collectionAddress, saleTradeRequest.tokenId, saleId, saleTradeRequest, buyer);\\n    }\\n\\n    function placeBid(TradeRequest memory tradeRequest) external {\\n        require(tradeRequest.owner == msg.sender, \\\"E#7\\\");\\n        require(tradeRequest.networkId > 0, \\\"E#11\\\");\\n        require(tradeRequest.assetType == AssetType.ERC721 || tradeRequest.assetType == AssetType.ERC1155, \\\"E#15\\\");\\n\\n        if (tradeRequest.assetType == AssetType.ERC721) {\\n            require(tradeRequest.nftAmount == 0, \\\"E#1\\\");\\n        } \\n        else if (tradeRequest.assetType == AssetType.ERC1155) {\\n            require(tradeRequest.nftAmount > 0, \\\"E#2\\\");\\n        }\\n\\n        require(tradeRequest.amount > 0, \\\"E#9\\\");\\n        require(tradeRequest.tradeType == TradeType.BID, \\\"E#8\\\");\\n        require(!hasActiveBid[tradeRequest.networkId][tradeRequest.collectionAddress][tradeRequest.tokenId][msg.sender], \\\"E#23\\\");\\n\\n        tradeRequest.start = block.timestamp;\\n\\n        bids[_currentBidId] = tradeRequest;\\n\\n        hasActiveBid[tradeRequest.networkId][tradeRequest.collectionAddress][tradeRequest.tokenId][msg.sender] = true;\\n\\n        _tokensData[bids[_currentBidId].networkId][bids[_currentBidId].collectionAddress][bids[_currentBidId].tokenId].bidsIds[tradeRequest.saleId].push(_currentBidId);\\n\\n        emit PlaceBid(tradeRequest.collectionAddress, tradeRequest.tokenId, _currentBidId, tradeRequest);\\n\\n        _currentBidId++;\\n    }\\n\\n    function cancelBid(uint256 bidId) external {\\n        require(bids[bidId].owner == msg.sender, \\\"E#7\\\");\\n\\n        bids[bidId].start = 0;\\n        bids[bidId].expiration = 0;\\n\\n        hasActiveBid[bids[bidId].networkId][bids[bidId].collectionAddress][bids[bidId].tokenId][msg.sender] = false;\\n\\n        uint256[] storage bidsIds = _tokensData[bids[bidId].networkId][bids[bidId].collectionAddress][bids[bidId].tokenId].bidsIds[bids[bidId].saleId];\\n\\n        uint256 indexToDelete = 0;\\n\\n        for (uint256 i = 0; i < bidsIds.length; i++)\\n            if (bidsIds[i] == bidId)\\n                indexToDelete = i;\\n\\n        bidsIds[indexToDelete] = bidsIds[bidsIds.length - 1];\\n\\n        bidsIds.pop();\\n\\n        emit CancelBid(bids[bidId].collectionAddress, bids[bidId].tokenId, bidId, bids[bidId]);\\n    }\\n\\n    function acceptFreeOffer(uint256 bidId) external {\\n        require(bids[bidId].owner != msg.sender, \\\"E#28\\\");\\n        require(bids[bidId].start > 0 && bids[bidId].expiration > block.timestamp, \\\"E#29\\\");\\n\\n        bids[bidId].start = 0;\\n        bids[bidId].expiration = 0;\\n\\n        hasActiveBid[bids[bidId].networkId][bids[bidId].collectionAddress][bids[bidId].tokenId][bids[bidId].owner] = false;\\n\\n        _sendAmountToSeller(AssetType.ERC20, bids[bidId].networkId, bids[bidId].collectionAddress, bids[bidId].tokenId, bids[bidId].amount, bids[bidId].tokenAddress, msg.sender, bids[bidId].owner);\\n\\n        _transferAsset(bids[bidId].assetType, bids[bidId].collectionAddress, msg.sender, bids[bidId].owner, bids[bidId].tokenId, bids[bidId].nftAmount, \\\"\\\");\\n    \\n        emit AcceptFreeOffer(bids[bidId].collectionAddress, bids[bidId].tokenId, bidId, bids[bidId], msg.sender);\\n    }\\n\\n    function transferMintedCollectionOwnership(string calldata collectionName, address to) external {\\n        require(mintedCollectionsOwners[collectionName] == msg.sender, \\\"E#32\\\");\\n\\n        mintedCollectionsOwners[collectionName] = to;\\n\\n        emit TransferMintedCollectionOwnership(collectionName, msg.sender, to);\\n    }\\n\\n    function renameMintedCollection(string calldata collectionName, string calldata newCollectionName) external onlyMarketplaceManager {\\n        require(bytes(newCollectionName).length > 0, \\\"E#33\\\");\\n\\n        mintedCollectionsOwners[newCollectionName] = mintedCollectionsOwners[collectionName];\\n        \\n        mintedCollectionsOwners[collectionName] = address(0);\\n\\n        emit RenameMintedCollection(collectionName, newCollectionName);\\n    }\\n\\n    function initialize(uint256 networkId) public initializer {\\n        __Ownable_init();\\n\\n        _networkId = networkId;\\n    }\\n\\n    function _mint(MintTokenData memory mintTokenData) private returns(uint256) {\\n        require(mintTokenData.assetType == AssetType.ERC721 || mintTokenData.assetType == AssetType.ERC1155, \\\"E#15\\\");\\n\\n        uint256 tokenId = 0;\\n\\n        if (mintTokenData.assetType == AssetType.ERC721) {\\n            require(mintTokenData.amount == 0, \\\"E#1\\\");\\n\\n            tokenId = IFayreSharedCollection721(fayreSharedCollection721).mint(msg.sender, mintTokenData.tokenURI);\\n\\n            _tokensData[_networkId][fayreSharedCollection721][tokenId].creator = msg.sender;\\n            _tokensData[_networkId][fayreSharedCollection721][tokenId].royaltiesPct = mintTokenData.royaltiesPct;\\n        } else {\\n            require(mintTokenData.amount > 0, \\\"E#2\\\");\\n\\n            tokenId = IFayreSharedCollection1155(fayreSharedCollection1155).mint(msg.sender, mintTokenData.tokenURI, mintTokenData.amount);\\n\\n            _tokensData[_networkId][fayreSharedCollection1155][tokenId].creator = msg.sender;\\n            _tokensData[_networkId][fayreSharedCollection1155][tokenId].royaltiesPct = mintTokenData.royaltiesPct;\\n        }\\n\\n        emit Mint(msg.sender, mintTokenData.assetType, tokenId, mintTokenData.amount, mintTokenData.royaltiesPct, mintTokenData.tokenURI, mintTokenData.collectionName);\\n\\n        return tokenId;\\n    }\\n\\n    function _clearSaleData(uint256 saleId) private {\\n        if (sales[saleId].tradeType == TradeType.SALE_ENGLISHAUCTION)\\n            _clearSaleIdBids(sales[saleId].networkId, sales[saleId].collectionAddress, sales[saleId].tokenId, 0);\\n            \\n        hasActiveSale[sales[saleId].networkId][sales[saleId].collectionAddress][sales[saleId].tokenId][sales[saleId].owner] = false;\\n\\n        uint256[] storage salesIds = _tokensData[sales[saleId].networkId][sales[saleId].collectionAddress][sales[saleId].tokenId].salesIds;\\n\\n        uint256 indexToDelete = 0;\\n\\n        for (uint256 i = 0; i < salesIds.length; i++)\\n            if (salesIds[i] == saleId)\\n                indexToDelete = i;\\n\\n        salesIds[indexToDelete] = salesIds[salesIds.length - 1];\\n\\n        salesIds.pop();\\n    }\\n\\n    function _sendAmountToSeller(AssetType assetType, uint256 networkId, address collectionAddress, uint256 tokenId, uint256 amount, address tokenAddress, address seller, address buyer) private {\\n        uint256 creatorRoyalties = 0;\\n\\n        if (_tokensData[networkId][collectionAddress][tokenId].royaltiesPct > 0)\\n            creatorRoyalties = (amount * _tokensData[networkId][collectionAddress][tokenId].royaltiesPct) / 10 ** 20;\\n\\n        uint256 saleFee = (amount * tradeFeePct) / 10 ** 20;\\n\\n        uint256 ownerRemainingSaleFee = 0;\\n\\n        address from;\\n        \\n        if (assetType == AssetType.LIQUIDITY) {\\n            from = address(0);\\n\\n            ownerRemainingSaleFee = _convertUSDToLiquidity(_processFee(seller, _convertLiquidityToUSD(saleFee), _convertLiquidityToUSD(amount)));\\n        }\\n        else {\\n            from = buyer;\\n\\n            ownerRemainingSaleFee = _processFee(seller, saleFee * 10 ** (18 - IERC20UpgradeableExtended(tokenAddress).decimals()), amount * 10 ** (18 - IERC20UpgradeableExtended(tokenAddress).decimals())) / 10 ** (18 - IERC20UpgradeableExtended(tokenAddress).decimals());\\n        }\\n\\n        _transferAsset(assetType, tokenAddress, from, seller, 0, amount - ownerRemainingSaleFee - creatorRoyalties, \\\"E#16\\\");\\n\\n        if (ownerRemainingSaleFee > 0)\\n            _transferAsset(assetType, tokenAddress, from, treasuryAddress, 0, ownerRemainingSaleFee, \\\"E#6\\\");\\n\\n        address creator = _tokensData[networkId][collectionAddress][tokenId].creator;\\n\\n        if (creatorRoyalties > 0)\\n            _transferAsset(assetType, tokenAddress, from, creator, 0, creatorRoyalties, \\\"E#18\\\");\\n\\n        if (assetType == AssetType.LIQUIDITY)\\n            if (msg.value > amount)\\n                _transferAsset(AssetType.LIQUIDITY, address(0), address(0), msg.sender, 0, msg.value - amount, \\\"E#5\\\");\\n    }\\n\\n    function _transferAsset(AssetType assetType, address contractAddress, address from, address to, uint256 tokenId, uint256 amount, string memory errorCode) private {\\n        if (assetType == AssetType.LIQUIDITY) {\\n            (bool liquiditySendSuccess, ) = to.call{value: amount }(\\\"\\\");\\n\\n            require(liquiditySendSuccess, errorCode);\\n\\n            emit LiquidityTransfer(to, amount);\\n        }\\n        else if (assetType == AssetType.ERC20) {\\n            if (!IERC20UpgradeableExtended(contractAddress).transferFrom(from, to, amount))\\n                revert(\\\"E#27\\\");\\n\\n            emit ERC20Transfer(contractAddress, from, to, amount);\\n        }\\n        else if (assetType == AssetType.ERC721) {\\n            IERC721Upgradeable(contractAddress).safeTransferFrom(from, to, tokenId);\\n\\n            emit ERC721Transfer(contractAddress, from, to, tokenId);\\n        } \\n        else if (assetType == AssetType.ERC1155) {\\n            IERC1155Upgradeable(contractAddress).safeTransferFrom(from, to, tokenId, amount, '');\\n\\n            emit ERC1155Transfer(contractAddress, from, to, tokenId, amount);\\n        }      \\n    }\\n\\n    function _processFee(address owner, uint256 fee, uint256 nftPrice) private returns(uint256) { \\n        //Process locked tokens\\n        for (uint256 i = 0; i < tokenLockersAddresses.length; i++) {\\n            IFayreTokenLocker.LockData memory lockData = IFayreTokenLocker(tokenLockersAddresses[i]).usersLockData(owner);\\n\\n            if (lockData.amount > 0)\\n                if (lockData.amount >= tokenLockersRequiredAmounts[tokenLockersAddresses[i]] && lockData.expiration > block.timestamp)\\n                    fee = 0;\\n        }\\n\\n        //Process membership cards\\n        if (fee > 0)\\n            for (uint256 i = 0; i < membershipCardsAddresses.length; i++) {\\n                uint256 membershipCardsAmount = IFayreMembershipCard721(membershipCardsAddresses[i]).balanceOf(owner);\\n\\n                if (membershipCardsAmount <= 0)\\n                    continue;\\n\\n                for (uint256 j = 0; j < membershipCardsAmount; j++) {\\n                    uint256 currentTokenId = IFayreMembershipCard721(membershipCardsAddresses[i]).tokenOfOwnerByIndex(owner, j);\\n\\n                    (uint256 volume, uint256 nftPriceCap,) = IFayreMembershipCard721(membershipCardsAddresses[i]).membershipCardsData(currentTokenId);\\n\\n                    if (nftPriceCap > 0)\\n                        if (nftPriceCap < nftPrice)\\n                            continue;\\n\\n                    if (volume > 0) {\\n                        uint256 amountToDeduct = fee;\\n\\n                        if (volume < amountToDeduct)\\n                            amountToDeduct = volume;\\n\\n                        IFayreMembershipCard721(membershipCardsAddresses[i]).decreaseMembershipCardVolume(currentTokenId, amountToDeduct);\\n\\n                        fee -= amountToDeduct;\\n\\n                        if (fee == 0)\\n                            break;\\n                    }\\n                }\\n            }\\n\\n        return fee;\\n    }\\n\\n    function _convertUSDToLiquidity(uint256 usdAmount) private view returns(uint256) {\\n        (, int256 ethUSDPrice, , , ) = AggregatorV3Interface(oracleDataFeed).latestRoundData();\\n\\n        uint8 oracleDataDecimals = AggregatorV3Interface(oracleDataFeed).decimals();\\n\\n        return (usdAmount * (10 ** oracleDataDecimals)) / uint256(ethUSDPrice);\\n    }\\n\\n    function _convertLiquidityToUSD(uint256 liquidityAmount) private view returns(uint256) {\\n        (, int256 ethUSDPrice, , , ) = AggregatorV3Interface(oracleDataFeed).latestRoundData();\\n\\n        uint8 oracleDataDecimals = AggregatorV3Interface(oracleDataFeed).decimals();\\n\\n        return (liquidityAmount * uint256(ethUSDPrice)) / (10 ** oracleDataDecimals);\\n    }\\n\\n    function _clearSaleIdBids(uint256 networkId, address collectionAddress, uint256 tokenId, uint256 saleId) private {\\n        uint256[] storage bidsIds = _tokensData[networkId][collectionAddress][tokenId].bidsIds[saleId];\\n\\n        for (uint256 i = 0; i < bidsIds.length; i++) {\\n            bids[bidsIds[i]].start = 0;\\n            bids[bidsIds[i]].expiration = 0;\\n\\n            hasActiveBid[networkId][collectionAddress][tokenId][bids[bidsIds[i]].owner] = false;\\n        }\\n        \\n        delete _tokensData[networkId][collectionAddress][tokenId].bidsIds[saleId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20UpgradeableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20UpgradeableExtended is IERC20Upgradeable {\\n    function decimals() external view returns(uint8);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFayreSharedCollection721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IFayreSharedCollection721 {\\n    function mint(address recipient, string memory tokenURI) external returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFayreSharedCollection1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IFayreSharedCollection1155 {\\n    function mint(address recipient, string memory tokenURI, uint256 amount) external returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFayreMembershipCard721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IFayreMembershipCard721 is IERC721EnumerableUpgradeable {\\n    function membershipCardsData(uint256 tokenId) external view returns(uint256 volume, uint256 nftPriceCap, uint256 freeMultiAssetSwapCount);\\n\\n    function decreaseMembershipCardVolume(uint256 tokenId, uint256 amount) external;\\n\\n    function decreaseMembershipCardFreeMultiAssetSwapCount(uint256 tokenId, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFayreTokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IFayreTokenLocker {\\n    struct LockData {\\n        uint256 lockId;\\n        address owner;\\n        uint256 amount;\\n        uint256 start;\\n        uint256 expiration;\\n    }\\n\\n    function usersLockData(address owner) external returns(LockData calldata);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"AcceptFreeOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"CancelSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"FinalizeSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltiesPct\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"PlaceBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"PutOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newCollectionName\",\"type\":\"string\"}],\"name\":\"RenameMintedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"freeMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FayreMarketplace.FreeMinterData\",\"name\":\"freeMinterData\",\"type\":\"tuple\"}],\"name\":\"SetFreeMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferMintedCollectionOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"acceptFreeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"membershipCardsAddress\",\"type\":\"address\"}],\"name\":\"addMembershipCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLockerAddress\",\"type\":\"address\"}],\"name\":\"addTokenLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPct\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"internalType\":\"struct FayreMarketplace.MintTokenData[]\",\"name\":\"mintTokensData\",\"type\":\"tuple[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fayreSharedCollection1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fayreSharedCollection721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"finalizeSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasActiveBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasActiveSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketplaceManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipCardsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesPct\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mintedCollectionsOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyFreeMintersCanMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDataFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FayreMarketplace.TradeRequest\",\"name\":\"tradeRequest\",\"type\":\"tuple\"}],\"name\":\"putOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainingFreeMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"membershipCardsAddress\",\"type\":\"address\"}],\"name\":\"removeMembershipCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLockerAddress\",\"type\":\"address\"}],\"name\":\"removeTokenLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newCollectionName\",\"type\":\"string\"}],\"name\":\"renameMintedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum FayreMarketplace.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"},{\"internalType\":\"enum FayreMarketplace.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplaceManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddressAsMarketplaceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFayreSharedCollection1155\",\"type\":\"address\"}],\"name\":\"setFayreSharedCollection1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFayreSharedCollection721\",\"type\":\"address\"}],\"name\":\"setFayreSharedCollection721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"freeMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FayreMarketplace.FreeMinterData[]\",\"name\":\"freeMintersData\",\"type\":\"tuple[]\"}],\"name\":\"setFreeMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintFeeUSD\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newOnlyFreeMintersCanMint\",\"type\":\"bool\"}],\"name\":\"setOnlyFreeMintersCanMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleDataFeed\",\"type\":\"address\"}],\"name\":\"setOracleDataFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLockerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenLockerRequiredAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTradeFeePct\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLockersRequiredAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferMintedCollectionOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplaceManagerAddress\",\"type\":\"address\"}],\"name\":\"unsetAddressAsMarketplaceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FayreMarketplace", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}