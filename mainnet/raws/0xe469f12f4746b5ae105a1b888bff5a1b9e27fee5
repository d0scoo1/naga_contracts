{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/CUPERTO/DATACRUNCH/IT/solidity/datacrunch/contracts/CrunchMultiVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Crunch Multi Vesting\\r\\n * @author Enzo CACERES <enzo.caceres@crunchdao.com>\\r\\n * @notice Allow the vesting of multiple users using only one contract.\\r\\n */\\r\\ncontract CrunchMultiVesting is Ownable {\\r\\n    event TokensReleased(\\r\\n        address indexed beneficiary,\\r\\n        uint256 index,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event CrunchTokenUpdated(\\r\\n        address indexed previousCrunchToken,\\r\\n        address indexed newCrunchToken\\r\\n    );\\r\\n\\r\\n    event CreatorChanged(\\r\\n        address indexed previousAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event VestingCreated(\\r\\n        address indexed beneficiary,\\r\\n        uint256 amount,\\r\\n        uint256 start,\\r\\n        uint256 cliff,\\r\\n        uint256 duration,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    struct Vesting {\\r\\n        /* beneficiary of tokens after they are released. */\\r\\n        address beneficiary;\\r\\n        /** the amount of token to vest. */\\r\\n        uint256 amount;\\r\\n        /** the start time of the token vesting. */\\r\\n        uint256 start;\\r\\n        /** the cliff time of the token vesting. */\\r\\n        uint256 cliff;\\r\\n        /** the duration of the token vesting. */\\r\\n        uint256 duration;\\r\\n        /** the amount of the token released. */\\r\\n        uint256 released;\\r\\n    }\\r\\n\\r\\n    /* CRUNCH erc20 address. */\\r\\n    IERC20Metadata public crunch;\\r\\n\\r\\n    /** secondary address that is only allowed to call the `create()` method */\\r\\n    address public creator;\\r\\n\\r\\n    /** currently locked tokens that are being used by all of the vestings */\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /** mapping to vesting list */\\r\\n    mapping(address => Vesting[]) public vestings;\\r\\n\\r\\n    /** mapping to a list of the currently active vestings index */\\r\\n    mapping(address => uint256[]) _actives;\\r\\n\\r\\n    /**\\r\\n     * @notice Instanciate a new contract.\\r\\n     * @dev the creator will be set as the deployer's address.\\r\\n     * @param _crunch CRUNCH token address.\\r\\n     */\\r\\n    constructor(address _crunch) {\\r\\n        _setCrunch(_crunch);\\r\\n        _setCreator(owner());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fake an ERC20-like contract allowing it to be displayed from wallets.\\r\\n     * @return the contract 'fake' token name.\\r\\n     */\\r\\n    function name() external pure returns (string memory) {\\r\\n        return \\\"Vested CRUNCH Token (multi)\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fake an ERC20-like contract allowing it to be displayed from wallets.\\r\\n     * @return the contract 'fake' token symbol.\\r\\n     */\\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return \\\"mvCRUNCH\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fake an ERC20-like contract allowing it to be displayed from wallets.\\r\\n     * @return the crunch's decimals value.\\r\\n     */\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return crunch.decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new vesting.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner or the creator\\r\\n     * - `amount` must not be zero\\r\\n     * - `beneficiary` must not be the null address\\r\\n     * - `cliffDuration` must be less than the duration\\r\\n     * - `duration` must not be zero\\r\\n     * - there must be enough available reserve to accept the amount\\r\\n     *\\r\\n     * @dev A `VestingCreated` event will be emitted.\\r\\n     * @param beneficiary Address that will receive CRUNCH tokens.\\r\\n     * @param amount Amount of CRUNCH to vest.\\r\\n     * @param cliffDuration Cliff duration in seconds.\\r\\n     * @param duration Vesting duration in seconds.\\r\\n     */\\r\\n    function create(\\r\\n        address beneficiary,\\r\\n        uint256 amount,\\r\\n        uint256 cliffDuration,\\r\\n        uint256 duration\\r\\n    ) external onlyCreatorOrOwner {\\r\\n        require(\\r\\n            beneficiary != address(0),\\r\\n            \\\"MultiVesting: beneficiary is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(amount > 0, \\\"MultiVesting: amount is 0\\\");\\r\\n\\r\\n        require(duration > 0, \\\"MultiVesting: duration is 0\\\");\\r\\n\\r\\n        require(\\r\\n            cliffDuration <= duration,\\r\\n            \\\"MultiVesting: cliff is longer than duration\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            availableReserve() >= amount,\\r\\n            \\\"MultiVesting: available reserve is not enough\\\"\\r\\n        );\\r\\n\\r\\n        uint256 start = block.timestamp;\\r\\n        uint256 cliff = start + cliffDuration;\\r\\n\\r\\n        vestings[beneficiary].push(\\r\\n            Vesting({\\r\\n                beneficiary: beneficiary,\\r\\n                amount: amount,\\r\\n                start: start,\\r\\n                cliff: cliff,\\r\\n                duration: duration,\\r\\n                released: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        uint256 index = vestings[beneficiary].length - 1;\\r\\n        _actives[beneficiary].push(index);\\r\\n\\r\\n        totalSupply += amount;\\r\\n\\r\\n        emit VestingCreated(beneficiary, amount, start, cliff, duration, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current reserve (or balance) of the contract in CRUNCH.\\r\\n     * @return The balance of CRUNCH this contract has.\\r\\n     */\\r\\n    function reserve() public view returns (uint256) {\\r\\n        return crunch.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the available reserve.\\r\\n     * @return The number of CRUNCH that can be used to create another vesting.\\r\\n     */\\r\\n    function availableReserve() public view returns (uint256) {\\r\\n        return reserve() - totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release a vesting of the current caller by its `index`.\\r\\n     * @dev A `TokensReleased` event will be emitted.\\r\\n     * @dev The transaction will fail if no token are due.\\r\\n     * @param index The vesting index to release.\\r\\n     */\\r\\n    function release(uint256 index) external {\\r\\n        _release(_msgSender(), index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release a vesting of a specified address by its `index`.\\r\\n     * @dev The caller must be the owner.\\r\\n     * @param beneficiary Address to release.\\r\\n     * @param index The vesting index to release.\\r\\n     */\\r\\n    function releaseFor(address beneficiary, uint256 index) external onlyOwner {\\r\\n        _release(beneficiary, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release all of active vesting of the current caller.\\r\\n     * @dev Multiple `TokensReleased` event might be emitted.\\r\\n     * @dev The transaction will fail if no token are due.\\r\\n     */\\r\\n    function releaseAll() external {\\r\\n        _releaseAll(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release all of active vesting of a specified address.\\r\\n     * @dev Multiple `TokensReleased` event might be emitted.\\r\\n     * @dev The transaction will fail if no token are due.\\r\\n     */\\r\\n    function releaseAllFor(address beneficiary) external onlyOwner {\\r\\n        _releaseAll(beneficiary);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total of releasable amount of tokens by doing the sum of all of the currently active vestings.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return total The sum of releasable amounts.\\r\\n     */\\r\\n    function releasableAmount(address beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 total)\\r\\n    {\\r\\n        uint256 size = vestingsCount(beneficiary);\\r\\n\\r\\n        for (uint256 index = 0; index < size; index++) {\\r\\n            Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n            total += _releasableAmount(vesting);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the releasable amount of tokens of a vesting by its `index`.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @param index Vesting index to check.\\r\\n     * @return The releasable amount of tokens of the found vesting.\\r\\n     */\\r\\n    function releasableAmountAt(address beneficiary, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n        return _releasableAmount(vesting);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the sum of all vested amount of tokens.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return total The sum of vested amount of all of the vestings.\\r\\n     */\\r\\n    function vestedAmount(address beneficiary) public view returns (uint256 total) {\\r\\n        uint256 size = vestingsCount(beneficiary);\\r\\n\\r\\n        for (uint256 index = 0; index < size; index++) {\\r\\n            Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n            total += _vestedAmount(vesting);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the vested amount of tokens of a vesting by its `index`.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @param index Address to check.\\r\\n     * @return The vested amount of the found vesting.\\r\\n     */\\r\\n    function vestedAmountAt(address beneficiary, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n        return _vestedAmount(vesting);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the sum of all remaining amount of tokens of each vesting of a beneficiary.\\r\\n     * @dev This function is to make wallets able to display the amount in their UI.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return total The sum of all remaining amount of tokens.\\r\\n     */\\r\\n    function balanceOf(address beneficiary) external view returns (uint256 total) {\\r\\n        uint256 size = vestingsCount(beneficiary);\\r\\n\\r\\n        for (uint256 index = 0; index < size; index++) {\\r\\n            Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n            total += vesting.amount - vesting.released;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the CRUNCH token address.\\r\\n     * @dev The caller must be the owner.\\r\\n     * @dev A `CrunchTokenUpdated` event will be emitted.\\r\\n     * @param newCrunch New CRUNCH token address.\\r\\n     */\\r\\n    function setCrunch(address newCrunch) external onlyOwner {\\r\\n        _setCrunch(newCrunch);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the creator address. The old address will no longer be able to access the `create(...)` method.\\r\\n     * @dev The caller must be the owner.\\r\\n     * @dev A `CreatorChanged` event will be emitted.\\r\\n     * @param newCreator New creator address.\\r\\n     */\\r\\n    function setCreator(address newCreator) external onlyOwner {\\r\\n        _setCreator(newCreator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of vesting of an address.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return Number of vesting.\\r\\n     */\\r\\n    function vestingsCount(address beneficiary) public view returns (uint256) {\\r\\n        return vestings[beneficiary].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of active vesting of an address.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return Number of active vesting.\\r\\n     */\\r\\n    function activeVestingsCount(address beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _actives[beneficiary].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the active vestings index.\\r\\n     * @param beneficiary Address to check.\\r\\n     * @return An array of currently active vestings index.\\r\\n     */\\r\\n    function activeVestingsIndex(address beneficiary)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        return _actives[beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal implementation of the release() method.\\r\\n     * @dev The methods will fail if there is no tokens due.\\r\\n     * @dev A `TokensReleased` event will be emitted.\\r\\n     * @dev If the vesting's released tokens is the same of the vesting's amount, the vesting is considered as finished, and will be removed from the active list.\\r\\n     * @param beneficiary Address to release.\\r\\n     * @param index Vesting index to release.\\r\\n     */\\r\\n    function _release(address beneficiary, uint256 index) internal {\\r\\n        Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n        uint256 unreleased = _releasableAmount(vesting);\\r\\n        require(unreleased > 0, \\\"MultiVesting: no tokens are due\\\");\\r\\n\\r\\n        vesting.released += unreleased;\\r\\n\\r\\n        crunch.transfer(vesting.beneficiary, unreleased);\\r\\n\\r\\n        totalSupply -= unreleased;\\r\\n\\r\\n        emit TokensReleased(vesting.beneficiary, index, unreleased);\\r\\n\\r\\n        if (vesting.released == vesting.amount) {\\r\\n            _removeActive(beneficiary, index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal implementation of the releaseAll() method.\\r\\n     * @dev The methods will fail if there is no tokens due for all of the vestings.\\r\\n     * @dev Multiple `TokensReleased` event may be emitted.\\r\\n     * @dev If some vesting's released tokens is the same of their amount, they will considered as finished, and will be removed from the active list.\\r\\n     * @param beneficiary Address to release.\\r\\n     */\\r\\n    function _releaseAll(address beneficiary) internal {\\r\\n        uint256 totalReleased;\\r\\n\\r\\n        uint256[] storage actives = _actives[beneficiary];\\r\\n        for (uint256 activeIndex = 0; activeIndex < actives.length; ) {\\r\\n            uint256 index = actives[activeIndex];\\r\\n            Vesting storage vesting = _getVesting(beneficiary, index);\\r\\n\\r\\n            uint256 unreleased = _releasableAmount(vesting);\\r\\n            if (unreleased == 0) {\\r\\n                activeIndex++;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            vesting.released += unreleased;\\r\\n            totalSupply -= unreleased;\\r\\n\\r\\n            crunch.transfer(vesting.beneficiary, unreleased);\\r\\n\\r\\n            emit TokensReleased(vesting.beneficiary, index, unreleased);\\r\\n\\r\\n            if (vesting.released == vesting.amount) {\\r\\n                _removeActiveAt(beneficiary, activeIndex);\\r\\n            } else {\\r\\n                activeIndex++;\\r\\n            }\\r\\n\\r\\n            totalReleased += unreleased;\\r\\n        }\\r\\n\\r\\n        require(totalReleased > 0, \\\"MultiVesting: no tokens are due\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pop from the active list at a specified index.\\r\\n     * @param beneficiary Address to get the active list from.\\r\\n     * @param activeIndex Active list's index to pop.\\r\\n     */\\r\\n    function _removeActiveAt(address beneficiary, uint256 activeIndex) internal {\\r\\n        uint256[] storage actives = _actives[beneficiary];\\r\\n\\r\\n        actives[activeIndex] = actives[actives.length - 1];\\r\\n\\r\\n        actives.pop();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Find the active index of a vesting index, and pop it with `_removeActiveAt(address, uint256)`.\\r\\n     * @dev The method will fail if the active index is not found.\\r\\n     * @param beneficiary Address to get the active list from.\\r\\n     * @param index Vesting index to find and pop.\\r\\n     */\\r\\n    function _removeActive(address beneficiary, uint256 index) internal {\\r\\n        uint256[] storage actives = _actives[beneficiary];\\r\\n\\r\\n        for (\\r\\n            uint256 activeIndex = 0;\\r\\n            activeIndex < actives.length;\\r\\n            activeIndex++\\r\\n        ) {\\r\\n            if (actives[activeIndex] == index) {\\r\\n                _removeActiveAt(beneficiary, activeIndex);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"MultiVesting: active index not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute the releasable amount.\\r\\n     * @param vesting Vesting instance.\\r\\n     */\\r\\n    function _releasableAmount(Vesting memory vesting)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _vestedAmount(vesting) - vesting.released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute the vested amount.\\r\\n     * @param vesting Vesting instance.\\r\\n     */\\r\\n    function _vestedAmount(Vesting memory vesting)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 amount = vesting.amount;\\r\\n\\r\\n        if (block.timestamp < vesting.cliff) {\\r\\n            return 0;\\r\\n        } else if ((block.timestamp >= vesting.start + vesting.duration)) {\\r\\n            return amount;\\r\\n        } else {\\r\\n            return\\r\\n                (amount * (block.timestamp - vesting.start)) / vesting.duration;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get a vesting.\\r\\n     * @param beneficiary Address to get it from.\\r\\n     * @param index Index to get it from.\\r\\n     * @return A vesting struct stored in the storage.\\r\\n     */\\r\\n    function _getVesting(address beneficiary, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (Vesting storage)\\r\\n    {\\r\\n        return vestings[beneficiary][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the CRUNCH token address.\\r\\n     * @dev A `CrunchTokenUpdated` event will be emitted.\\r\\n     * @param newCrunch New CRUNCH token address.\\r\\n     */\\r\\n    function _setCrunch(address newCrunch) internal {\\r\\n        address previousCrunch = address(crunch);\\r\\n\\r\\n        crunch = IERC20Metadata(newCrunch);\\r\\n\\r\\n        emit CrunchTokenUpdated(previousCrunch, address(newCrunch));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the creator address.\\r\\n     * @dev A `CreatorChanged` event will be emitted.\\r\\n     * @param newCreator New creator address.\\r\\n     */\\r\\n    function _setCreator(address newCreator) internal {\\r\\n        address previous = creator;\\r\\n\\r\\n        creator = newCreator;\\r\\n\\r\\n        emit CreatorChanged(previous, newCreator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensure that the caller is the creator or the owner.\\r\\n     */\\r\\n    modifier onlyCreatorOrOwner() {\\r\\n        require(\\r\\n            _msgSender() == creator || _msgSender() == owner(),\\r\\n            \\\"MultiVesting: only creator or owner can do this\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crunch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CreatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousCrunchToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCrunchToken\",\"type\":\"address\"}],\"name\":\"CrunchTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"activeVestingsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"activeVestingsIndex\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crunch\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"releasableAmountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releaseAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCrunch\",\"type\":\"address\"}],\"name\":\"setCrunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"vestedAmountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestingsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrunchMultiVesting", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000074451d2240ef9e86b3cea815378af61566b81856", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}