{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nlibrary Strings {\r\n\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\r\n     */\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\r\n\r\n        if (value == 0) {\r\n\r\n            return \"0\";\r\n\r\n        }\r\n\r\n        uint256 temp = value;\r\n\r\n        uint256 digits;\r\n\r\n        while (temp != 0) {\r\n\r\n            digits++;\r\n\r\n            temp /= 10;\r\n\r\n        }\r\n\r\n        bytes memory buffer = new bytes(digits);\r\n\r\n        while (value != 0) {\r\n\r\n            digits -= 1;\r\n\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\r\n            value /= 10;\r\n\r\n        }\r\n\r\n        return string(buffer);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\r\n     */\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n\r\n            return \"0x00\";\r\n\r\n        }\r\n\r\n        uint256 temp = value;\r\n\r\n        uint256 length = 0;\r\n\r\n        while (temp != 0) {\r\n\r\n            length++;\r\n\r\n            temp >>= 8;\r\n\r\n        }\r\n\r\n        return toHexString(value, length);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\r\n     */\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n\r\n        buffer[0] = \"0\";\r\n\r\n        buffer[1] = \"x\";\r\n\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\r\n            value >>= 4;\r\n\r\n        }\r\n\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n\r\n        return string(buffer);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Provides information about the current execution context, including the\r\n\r\n * sender of the transaction and its data. While these are generally available\r\n\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n\r\n * manner, since when dealing with meta-transactions the account sending and\r\n\r\n * paying for execution may not be the actual sender (as far as an application\r\n\r\n * is concerned).\r\n\r\n *\r\n\r\n * This contract is only required for intermediate, library-like contracts.\r\n\r\n */\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor() {\r\n\r\n        _transferOwnership(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view virtual returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        _transferOwnership(address(0));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Internal function without access restriction.\r\n\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n\r\n        address oldOwner = _owner;\r\n\r\n        _owner = newOwner;\r\n\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n}\r\n\r\nlibrary Counters {\r\n\r\n    struct Counter {\r\n\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n\r\n        uint256 _value; // default: 0\r\n\r\n    }\r\n\r\n\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n\r\n        return counter._value;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increment(Counter storage counter) internal {\r\n\r\n        unchecked {\r\n\r\n            counter._value += 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function decrement(Counter storage counter) internal {\r\n\r\n        uint256 value = counter._value;\r\n\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n\r\n        unchecked {\r\n\r\n            counter._value = value - 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function reset(Counter storage counter) internal {\r\n\r\n        counter._value = 0;\r\n\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Collection of functions related to the address type\r\n\r\n */\r\n\r\nlibrary Address {\r\n\r\n    /**\r\n\r\n     * @dev Returns true if `account` is a contract.\r\n\r\n     *\r\n\r\n     * [IMPORTANT]\r\n\r\n     * ====\r\n\r\n     * It is unsafe to assume that an address for which this function returns\r\n\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n\r\n     *\r\n\r\n     * Among others, `isContract` will return false for the following\r\n\r\n     * types of addresses:\r\n\r\n     *\r\n\r\n     *  - an externally-owned account\r\n\r\n     *  - a contract in construction\r\n\r\n     *  - an address where a contract will be created\r\n\r\n     *  - an address where a contract lived, but was destroyed\r\n\r\n     * ====\r\n\r\n     *\r\n\r\n     * [IMPORTANT]\r\n\r\n     * ====\r\n\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n\r\n     *\r\n\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n\r\n     * constructor.\r\n\r\n     * ====\r\n\r\n     */\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n\r\n        // for contracts in construction, since the code is only stored at the end\r\n\r\n        // of the constructor execution.\r\n\r\n\r\n\r\n        return account.code.length > 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n\r\n     *\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n\r\n     * `transfer`. {sendValue} removes this limitation.\r\n\r\n     *\r\n\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\r\n     *\r\n\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n\r\n     * {ReentrancyGuard} or the\r\n\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\r\n     */\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n\r\n     * function instead.\r\n\r\n     *\r\n\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n\r\n     * function (like regular Solidity function calls).\r\n\r\n     *\r\n\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `target` must be a contract.\r\n\r\n     * - calling `target` with `data` must not revert.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCall(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\r\n     * but also transferring `value` wei to `target`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n\r\n     * - the called Solidity function must be `payable`.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCallWithValue(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        uint256 value\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCallWithValue(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        uint256 value,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\r\n     * but performing a static call.\r\n\r\n     *\r\n\r\n     * _Available since v3.3._\r\n\r\n     */\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\r\n     * but performing a static call.\r\n\r\n     *\r\n\r\n     * _Available since v3.3._\r\n\r\n     */\r\n\r\n    function functionStaticCall(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal view returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\r\n     * but performing a delegate call.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\r\n     * but performing a delegate call.\r\n\r\n     *\r\n\r\n     * _Available since v3.4._\r\n\r\n     */\r\n\r\n    function functionDelegateCall(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\r\n     * revert reason using the provided one.\r\n\r\n     *\r\n\r\n     * _Available since v4.3._\r\n\r\n     */\r\n\r\n    function verifyCallResult(\r\n\r\n        bool success,\r\n\r\n        bytes memory returndata,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal pure returns (bytes memory) {\r\n\r\n        if (success) {\r\n\r\n            return returndata;\r\n\r\n        } else {\r\n\r\n            // Look for revert reason and bubble it up if present\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\r\n\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n\r\n *\r\n\r\n * Implementers can declare support of contract interfaces, which can then be\r\n\r\n * queried by others ({ERC165Checker}).\r\n\r\n *\r\n\r\n * For an implementation, see {ERC165}.\r\n\r\n */\r\n\r\ninterface IERC165 {\r\n\r\n    /**\r\n\r\n     * @dev Returns true if this contract implements the interface defined by\r\n\r\n     * `interfaceId`. See the corresponding\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n\r\n     * to learn more about how these ids are created.\r\n\r\n     *\r\n\r\n     * This function call must use less than 30 000 gas.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Implementation of the {IERC165} interface.\r\n\r\n *\r\n\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n\r\n * for the additional interface id that will be supported. For example:\r\n\r\n *\r\n\r\n * ```solidity\r\n\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n\r\n * }\r\n\r\n * ```\r\n\r\n *\r\n\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n\r\n */\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    /**\r\n\r\n     * @dev See {IERC165-supportsInterface}.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n\r\n        return interfaceId == type(IERC165).interfaceId;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev _Available since v3.1._\r\n\r\n */\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n\r\n     *\r\n\r\n     * NOTE: To accept the transfer, this must return\r\n\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n\r\n     *\r\n\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n\r\n     * @param from The address which previously owned the token\r\n\r\n     * @param id The ID of the token being transferred\r\n\r\n     * @param value The amount of tokens being transferred\r\n\r\n     * @param data Additional data with no specified format\r\n\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n\r\n     */\r\n\r\n    function onERC1155Received(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        uint256 id,\r\n\r\n        uint256 value,\r\n\r\n        bytes calldata data\r\n\r\n    ) external returns (bytes4);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n\r\n     * been updated.\r\n\r\n     *\r\n\r\n     * NOTE: To accept the transfer(s), this must return\r\n\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n\r\n     *\r\n\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n\r\n     * @param from The address which previously owned the token\r\n\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n\r\n     * @param data Additional data with no specified format\r\n\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n\r\n     */\r\n\r\n    function onERC1155BatchReceived(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        uint256[] calldata ids,\r\n\r\n        uint256[] calldata values,\r\n\r\n        bytes calldata data\r\n\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n\r\n *\r\n\r\n * _Available since v3.1._\r\n\r\n */\r\n\r\ninterface IERC1155 is IERC165 {\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n\r\n     */\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n\r\n     * transfers.\r\n\r\n     */\r\n\r\n    event TransferBatch(\r\n\r\n        address indexed operator,\r\n\r\n        address indexed from,\r\n\r\n        address indexed to,\r\n\r\n        uint256[] ids,\r\n\r\n        uint256[] values\r\n\r\n    );\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n\r\n     * `approved`.\r\n\r\n     */\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n\r\n     *\r\n\r\n     * If an {URI} event was emitted for `id`, the standard\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n\r\n     */\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `account` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `accounts` and `ids` must have the same length.\r\n\r\n     */\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256[] memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n\r\n     *\r\n\r\n     * Emits an {ApprovalForAll} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `operator` cannot be the caller.\r\n\r\n     */\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n\r\n     *\r\n\r\n     * See {setApprovalForAll}.\r\n\r\n     */\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n\r\n     *\r\n\r\n     * Emits a {TransferSingle} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function safeTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount,\r\n\r\n        bytes calldata data\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n\r\n     *\r\n\r\n     * Emits a {TransferBatch} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `ids` and `amounts` must have the same length.\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function safeBatchTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] calldata ids,\r\n\r\n        uint256[] calldata amounts,\r\n\r\n        bytes calldata data\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n\r\n *\r\n\r\n * _Available since v3.1._\r\n\r\n */\r\n\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the URI for token type `id`.\r\n\r\n     *\r\n\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n\r\n     * clients with the actual token type ID.\r\n\r\n     */\r\n\r\n    function uri(uint256 id) external view returns (string memory);\r\n\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Implementation of the basic standard multi-token.\r\n\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n\r\n *\r\n\r\n * _Available since v3.1._\r\n\r\n */\r\n\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n\r\n    using Address for address;\r\n\r\n\r\n\r\n    // Mapping from token ID to account balances\r\n\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n\r\n\r\n    // Mapping from account to operator approvals\r\n\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n\r\n    string private _uri;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {_setURI}.\r\n\r\n     */\r\n\r\n    constructor(string memory uri_) {\r\n\r\n        _setURI(uri_);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC165-supportsInterface}.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\r\n        return\r\n\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n\r\n            super.supportsInterface(interfaceId);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n\r\n     *\r\n\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n\r\n     * on the token type ID substitution mechanism\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n\r\n     *\r\n\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n\r\n     * actual token type ID.\r\n\r\n     */\r\n\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n\r\n        return _uri;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-balanceOf}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `account` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n\r\n        return _balances[id][account];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `accounts` and `ids` must have the same length.\r\n\r\n     */\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        virtual\r\n\r\n        override\r\n\r\n        returns (uint256[] memory)\r\n\r\n    {\r\n\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n\r\n        }\r\n\r\n\r\n\r\n        return batchBalances;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n\r\n     */\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n\r\n     */\r\n\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n\r\n        return _operatorApprovals[account][operator];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n\r\n     */\r\n\r\n    function safeTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount,\r\n\r\n        bytes memory data\r\n\r\n    ) public virtual override {\r\n\r\n        require(\r\n\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n\r\n            \"ERC1155: caller is not owner nor approved\"\r\n\r\n        );\r\n\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n\r\n     */\r\n\r\n    function safeBatchTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) public virtual override {\r\n\r\n        require(\r\n\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n\r\n        );\r\n\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n\r\n     *\r\n\r\n     * Emits a {TransferSingle} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function _safeTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {\r\n\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n\r\n        unchecked {\r\n\r\n            _balances[id][from] = fromBalance - amount;\r\n\r\n        }\r\n\r\n        _balances[id][to] += amount;\r\n\r\n\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n\r\n     *\r\n\r\n     * Emits a {TransferBatch} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function _safeBatchTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {\r\n\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n\r\n            uint256 id = ids[i];\r\n\r\n            uint256 amount = amounts[i];\r\n\r\n\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n\r\n            unchecked {\r\n\r\n                _balances[id][from] = fromBalance - amount;\r\n\r\n            }\r\n\r\n            _balances[id][to] += amount;\r\n\r\n        }\r\n\r\n\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n\r\n     * substitution mechanism\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n\r\n     *\r\n\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n\r\n     * clients with the token type ID.\r\n\r\n     *\r\n\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n\r\n     * interpreted by clients as\r\n\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n\r\n     * for token type ID 0x4cce0.\r\n\r\n     *\r\n\r\n     * See {uri}.\r\n\r\n     *\r\n\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n\r\n     * this function emits no events.\r\n\r\n     */\r\n\r\n    function _setURI(string memory newuri) internal virtual {\r\n\r\n        _uri = newuri;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n\r\n     *\r\n\r\n     * Emits a {TransferSingle} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function _mint(\r\n\r\n        address to,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {\r\n\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n\r\n\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `ids` and `amounts` must have the same length.\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n\r\n     * acceptance magic value.\r\n\r\n     */\r\n\r\n    function _mintBatch(\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {\r\n\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n\r\n            _balances[ids[i]][to] += amounts[i];\r\n\r\n        }\r\n\r\n\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `from` cannot be the zero address.\r\n\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n\r\n     */\r\n\r\n    function _burn(\r\n\r\n        address from,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[id][from] = fromBalance - amount;\r\n\r\n        }\r\n\r\n\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `ids` and `amounts` must have the same length.\r\n\r\n     */\r\n\r\n    function _burnBatch(\r\n\r\n        address from,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts\r\n\r\n    ) internal virtual {\r\n\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n\r\n\r\n        address operator = _msgSender();\r\n\r\n\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n\r\n            uint256 id = ids[i];\r\n\r\n            uint256 amount = amounts[i];\r\n\r\n\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n\r\n            unchecked {\r\n\r\n                _balances[id][from] = fromBalance - amount;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n\r\n     *\r\n\r\n     * Emits a {ApprovalForAll} event.\r\n\r\n     */\r\n\r\n    function _setApprovalForAll(\r\n\r\n        address owner,\r\n\r\n        address operator,\r\n\r\n        bool approved\r\n\r\n    ) internal virtual {\r\n\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[owner][operator] = approved;\r\n\r\n        emit ApprovalForAll(owner, operator, approved);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n\r\n     * and burning, as well as batched variants.\r\n\r\n     *\r\n\r\n     * The same hook is called on both single and batched variants. For single\r\n\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n\r\n     *\r\n\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n\r\n     *\r\n\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * of token type `id` will be  transferred to `to`.\r\n\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n\r\n     * for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n\r\n     * will be burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _beforeTokenTransfer(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n\r\n     * and burning, as well as batched variants.\r\n\r\n     *\r\n\r\n     * The same hook is called on both single and batched variants. For single\r\n\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n\r\n     *\r\n\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n\r\n     *\r\n\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * of token type `id` will be  transferred to `to`.\r\n\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n\r\n     * for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n\r\n     * will be burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _afterTokenTransfer(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 id,\r\n\r\n        uint256 amount,\r\n\r\n        bytes memory data\r\n\r\n    ) private {\r\n\r\n        if (to.isContract()) {\r\n\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n\r\n                }\r\n\r\n            } catch Error(string memory reason) {\r\n\r\n                revert(reason);\r\n\r\n            } catch {\r\n\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n\r\n        address operator,\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256[] memory ids,\r\n\r\n        uint256[] memory amounts,\r\n\r\n        bytes memory data\r\n\r\n    ) private {\r\n\r\n        if (to.isContract()) {\r\n\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n\r\n                bytes4 response\r\n\r\n            ) {\r\n\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n\r\n                }\r\n\r\n            } catch Error(string memory reason) {\r\n\r\n                revert(reason);\r\n\r\n            } catch {\r\n\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n\r\n        uint256[] memory array = new uint256[](1);\r\n\r\n        array[0] = element;\r\n\r\n\r\n\r\n        return array;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// File: ceva.sol\r\n\r\n\r\n\r\n\r\n\r\ncontract QPTMETACARD is ERC1155, Ownable {\r\n\r\n    using Strings for uint256;\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n    string private baseURI;\r\n\r\n    bool public paused = true;\r\n\r\n    // token ids\r\n\r\n    uint256 public constant Black = 1;\r\n\r\n    uint256 public constant Bronze = 2;\r\n\r\n    uint256 public constant Silver = 3;\r\n\r\n    uint256 public constant Gold = 4;\r\n\r\n    //\r\n\r\n    // cost of tokens\r\n\r\n    uint256 public costGold = 1 ether;\r\n\r\n    uint256 public costSilver = 0.7 ether;\r\n\r\n    uint256 public costBronze = 0.3 ether;\r\n\r\n    uint256 public costBlack = 0.2 ether;\r\n\r\n    //\r\n\r\n    // supplies of each token\r\n\r\n    Counters.Counter private supplyBlack;\r\n\r\n    Counters.Counter private supplyBronze;\r\n\r\n    Counters.Counter private supplySilver;\r\n\r\n    Counters.Counter private supplyGold;\r\n\r\n    //\r\n\r\n    // max supplies for each token\r\n\r\n    uint256 public maxSupplyBlack = 9090;\r\n\r\n    uint256 public maxSupplyBronze = 800;\r\n\r\n    uint256 public maxSupplySilver = 100;\r\n\r\n    uint256 public maxSupplyGold = 10;\r\n\r\n    //\r\n\r\n    //whitelist variables\r\n\r\n    mapping(address => bool) private whitelistedAddresses;\r\n\r\n    bool public onlyWhitelisted = true;\r\n\r\n\r\n\r\n    constructor() ERC1155(\"\") {\r\n\r\n        setBaseURI(\" ipfs://QmPDyGbgfvVVuvTUSZo9EWzeiTTun53jVW9pwAULUoZMde/\");\r\n\r\n    }\r\n\r\n    modifier mintCompliance(uint256 _mintAmount,uint256 _nftType) {\r\n\r\n        require(1 <= _nftType && _nftType <= 4, \"Wrong NFT. Choose between 1-4.\");\r\n\r\n        require(_mintAmount > 0, \"Can't mint 0 nfts\");\r\n\r\n        require(!paused, \"The contract is paused!\");\r\n\r\n        if(onlyWhitelisted== true) {\r\n\r\n            require(isWhitelisted(msg.sender), \"User is not whitelisted\");\r\n\r\n        }\r\n\r\n        (uint256 maxSupply, Counters.Counter storage supply, uint256 cost) = getInfoAboutToken(_nftType);\r\n\r\n        require(supply.current() + _mintAmount <= maxSupply, \"Max supply exceeded!\");\r\n\r\n        require(msg.value >= cost * _mintAmount, \"Insufficient funds!\");\r\n\r\n        for(uint256 i = 0; i < _mintAmount ; i ++)\r\n\r\n            supply.increment();\r\n\r\n    _;\r\n\r\n   }\r\n\r\n    function mint(uint256 _mintAmount, uint256 _nftType) public payable mintCompliance(_mintAmount, _nftType) {\r\n\r\n        _mint(msg.sender, _nftType, _mintAmount, \"\");\r\n\r\n    }\r\n\r\n      function AirDropTo(address _user, uint256 tokenName) public onlyOwner\r\n\r\n    {\r\n\r\n        require(tokenName >= 1 && tokenName <= 4, \"Wrong NFT. Choose between 1-4\");\r\n\r\n        (uint256 maxSupply, Counters.Counter storage supply,) = getInfoAboutToken(tokenName);\r\n\r\n        require(supply.current() + 1 <= maxSupply); \r\n\r\n        supply.increment();\r\n\r\n        _mint(_user, tokenName, 1, \"\");\r\n\r\n      \r\n\r\n    } \r\n\r\n \r\n\r\n    function getInfoAboutToken(uint256 tokenType) internal view returns(uint256 maxSupply, Counters.Counter storage supply, uint256 cost)\r\n\r\n    {\r\n\r\n        supply = supplyBlack;\r\n\r\n        //black case\r\n\r\n        if(tokenType == 1)\r\n\r\n        {\r\n\r\n            maxSupply = maxSupplyBlack;\r\n\r\n            supply = supplyBlack;\r\n\r\n            cost = costBlack;\r\n\r\n        }\r\n\r\n        if(tokenType == 2)\r\n\r\n        {\r\n\r\n            maxSupply = maxSupplyBronze;\r\n\r\n            supply = supplyBronze;\r\n\r\n            cost = costBronze;\r\n\r\n        }\r\n\r\n        if(tokenType == 3)\r\n\r\n        {\r\n\r\n            maxSupply = maxSupplySilver;\r\n\r\n            supply = supplySilver;\r\n\r\n            cost = costSilver;\r\n\r\n        }\r\n\r\n        if(tokenType == 4)\r\n\r\n        {\r\n\r\n            maxSupply = maxSupplyGold;\r\n\r\n            supply = supplyGold;\r\n\r\n            cost = costGold;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // whitelist section \r\n\r\n    function addUserToWhitelist(address _user) public onlyOwner {\r\n\r\n        whitelistedAddresses[_user] = true;\r\n\r\n    }\r\n\r\n    function addListOfUsersToWhitelist(address[] memory _users) public onlyOwner{\r\n\r\n      for(uint i = 0; i < _users.length; i ++){\r\n\r\n          whitelistedAddresses[_users[i]] = true;\r\n\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    function setWhitelistStatus (bool _state) public onlyOwner {\r\n\r\n      onlyWhitelisted=_state;\r\n\r\n    }\r\n\r\n    function isWhitelisted(address _user) public view returns (bool) {\r\n\r\n        return whitelistedAddresses[_user];\r\n\r\n    }\r\n\r\n    //\r\n\r\n    // contract info section \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n    return supplyBlack.current() + supplyBronze.current() + supplySilver.current() + supplyGold.current();\r\n\r\n    }\r\n\r\n    function BlackSupply() public view returns (uint256) {\r\n\r\n      return supplyBlack.current();\r\n\r\n    }\r\n\r\n    function BronzeSupply() public view returns (uint256) {\r\n\r\n      return supplyBronze.current();\r\n\r\n    }\r\n\r\n    function SilverSupply() public view returns (uint256) {\r\n\r\n      return supplySilver.current();\r\n\r\n    }  \r\n\r\n    function GoldSupply() public view returns (uint256){\r\n\r\n      return supplyGold.current();\r\n\r\n    } \r\n\r\n    /* owner functions */\r\n\r\n    function setCost(uint256 _cost, uint256 _nftType) public onlyOwner {\r\n\r\n      if(_nftType == 1)\r\n\r\n          costBlack = _cost;\r\n\r\n      if(_nftType == 2)\r\n\r\n          costBronze = _cost;\r\n\r\n      if(_nftType == 3)\r\n\r\n          costSilver = _cost;\r\n\r\n      if(_nftType == 4)\r\n\r\n          costGold = _cost;\r\n\r\n    }\r\n\r\n    function setPaused(bool _state) public onlyOwner {\r\n\r\n      paused = _state;\r\n\r\n    }\r\n\r\n      function withdraw() public onlyOwner {\r\n\r\n    // Do not remove this otherwise you will not be able to withdraw the funds.\r\n\r\n    // =============================================================================\r\n\r\n    (bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n\r\n    require(os);\r\n\r\n    // =============================================================================\r\n\r\n  }\r\n\r\n  //ipfs://bafybeihjjkwdrxxjnuwevlqtqmh3iegcadc32sio4wmo7bv2gbf34qs34a/\r\n\r\n     function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n\r\n    baseURI = _newBaseURI;\r\n\r\n  }\r\n\r\n   function uri(uint256 _tokenid) override public view returns (string memory) {\r\n\r\n        return string(\r\n\r\n            abi.encodePacked(\r\n\r\n                baseURI,\r\n\r\n                Strings.toString(_tokenid),\".json\"\r\n\r\n            )\r\n\r\n        );\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenName\",\"type\":\"uint256\"}],\"name\":\"AirDropTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Black\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BlackSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Bronze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BronzeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Gold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GoldSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Silver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SilverSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addListOfUsersToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addUserToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costBlack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costBronze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costSilver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyBlack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyBronze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplySilver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QPTMETACARD", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://819d00f1b6d659f5bc20d47a55c938d84b81171502c12fbca02257b1026e5b5e"}]}