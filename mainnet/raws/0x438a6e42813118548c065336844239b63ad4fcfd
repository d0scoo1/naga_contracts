{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n// ooooooooooooo oooo                                                                               \r\n// 8'   888   `8 `888                                                                               \r\n//      888       888 .oo.    .ooooo.                                                               \r\n//      888       888P\"Y88b  d88' `88b                                                              \r\n//      888       888   888  888ooo888                                                              \r\n//      888       888   888  888    .o                                                              \r\n//     o888o     o888o o888o `Y8bod8P'                                                              \r\n//                                                                                                  \r\n//   .oooooo.                .o8                                                                    \r\n//  d8P'  `Y8b              \"888                                                                    \r\n// 888          oooo    ooo  888oooo.   .ooooo.  oooo d8b                                           \r\n// 888           `88.  .8'   d88' `88b d88' `88b `888\"\"8P                                           \r\n// 888            `88..8'    888   888 888ooo888  888                                               \r\n// `88b    ooo     `888'     888   888 888    .o  888                                               \r\n//  `Y8bood8P'      .8'      `Y8bod8P' `Y8bod8P' d888b                                              \r\n//              .o..P'                                                                              \r\n//              `Y8P'                                                                               \r\n//                                                                                                  \r\n// oooooooooooo                 .                                           o8o                     \r\n// `888'     `8               .o8                                           `\"'                     \r\n//  888         ooo. .oo.   .o888oo  .ooooo.  oooo d8b oo.ooooo.  oooo d8b oooo   .oooo.o  .ooooo.  \r\n//  888oooo8    `888P\"Y88b    888   d88' `88b `888\"\"8P  888' `88b `888\"\"8P `888  d88(  \"8 d88' `88b \r\n//  888    \"     888   888    888   888ooo888  888      888   888  888      888  `\"Y88b.  888ooo888 \r\n//  888       o  888   888    888 . 888    .o  888      888   888  888      888  o.  )88b 888    .o \r\n// o888ooooood8 o888o o888o   \"888\" `Y8bod8P' d888b     888bod8P' d888b    o888o 8\"\"888P' `Y8bod8P' \r\n//                                                      888                                         \r\n//                                                     o888o                                        \r\n//      .ooooo.   .ooooo.  ooo. .oo.  .oo.                                                          \r\n//     d88' `\"Y8 d88' `88b `888P\"Y88bP\"Y88b                                                         \r\n//     888       888   888  888   888   888                                                         \r\n// .o. 888   .o8 888   888  888   888   888                                                         \r\n// Y8P `Y8bod8P' `Y8bod8P' o888o o888o o888o\r\n\r\n\r\n/**\r\n    Created by: Cyber Enterprise\r\n    Website: www.TheCyberEnterprise.com\r\n    Launched March 1st, 2022\r\n */\r\n\r\n\r\n/**\r\n    TERMS OF USE\r\n\r\n    Please read the contract before interacting with it. We have added many features so that the contract \r\n    does not allow any malicious attacks. Specifically bot attacks, for example front-run and sandwich-attack\r\n    bots or contracts. If our contract detects the use of a unapproved bot, by its smart contract, it will\r\n    result in a blacklist and consequently a loss of funds. If your address has been falsely blacklisted,\r\n    please contact the team within 7 days. Depending on the specific situation, the revision to unblacklist\r\n    may occur, in which case the funds will be returned. However we do charge a fee for processing this and\r\n    interacting with the smart contract. You can check and see if your contract is supported by using the\r\n    checkProtectedAddress or showProtectedAdresses function.\r\n */\r\n\r\n/**\r\n    The Cyber Enterprise is a decentralised entity that introduced the Cyber token (CYBR), a multipurpose \r\n    crypto currency and foundation of the Cyber Enterprise Ecosystem. A series of decentralised applications\r\n    (DApps), all falling under the same banner will enable the enterprise to be a one-stop-shop in the realm\r\n    of decentralised finances (DeFi). Quality, simplicity, and user experience are always of the utmost\r\n    priority for the Cyber Team. \r\n\r\n    Keeping utility in mind, every step of the way during development, Cyber (CYBR) is not only the native \r\n    currency in our ever-growing and developing decentralised ecosystem, but also acts as a launchpad token. \r\n    Any and all future first round presales for symbiotic projects, will be done via the Cyber Token.\r\n\r\n    We want to thank the CYBR community who have helped us embark on this journey. \r\n\r\n    A special thanks is also necessary for individuals that rose above our expectations and contributed more\r\n    than anything we could have imagined to make this odyssey of a lifetime possible:\r\n\r\n    $CYBR_mdking \r\n    0xbmedia\r\n    Cuzzy_bro\r\n    CYBR 203 - DanielD\r\n    Darthwhite\r\n    Hermit\r\n    I Love Gas\r\n    Karim\r\n    KingQuokka\r\n    Marzopiens\r\n    Odysseus\r\n    call_of_oni\r\n    Plums\r\n    Ryose\r\n    Stixil\r\n    TEASE\r\n    Villspor\r\n    VitoLuciano\r\n    WNx_Phate\r\n */\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract CYBR is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply = 1000000000000000 * 10 ** 18; // 1,000,000,000,000,000 supply + 18 decimals\r\n\r\n    string private _name = \"Cyber\";\r\n    string private _symbol = \"CYBR\";\r\n\r\n    string private _contractAuditURL;\r\n    string private _contractWebsiteURL;\r\n    string private _contractExplanationURL;\r\n\r\n    // Flags\r\n    bool private _allowedTrading;\r\n    bool private _defenseSmartContractSystem;\r\n    bool private _defenseBotSystem;\r\n\r\n    uint256 private _antiBotTime;\r\n    uint256 private _robinHoodProtectionTime = 604800;            // 7 days\r\n\r\n    // Wallet addresses\r\n    address private _burnWallet = 0xFeEddeAD01000011010110010100001001010010;\r\n    address private _userDonationWallet;\r\n    address private _botDonationWallet;\r\n\r\n    // Pool Mapping\r\n    mapping (address => bool) private _poolAddress;\r\n\r\n    // Pool Array\r\n    address[] private _pools;\r\n    mapping(address => uint256) private _poolIndex;\r\n\r\n    address private _polygonBridgeAddress;\r\n    \r\n    mapping (address => uint256) private _latestTransaction;\r\n\r\n    mapping (address => bool) private _protectedAddress;\r\n    address[] private _protectedAddresses;\r\n\r\n    mapping (address => bool) private _blacklisted;\r\n    mapping (address => uint256) private _blacklistedAt;\r\n\r\n    address[] private _blacklist;\r\n    mapping(address => uint256) private _blacklistIndex;\r\n\r\n    uint256 private _tokensReceivedFromCommunity;\r\n    uint256 private _tokensReceivedFromBots;\r\n\r\n    mapping (address => uint256) private _userDonation;\r\n    mapping (address => uint256) private _userBurned;\r\n    address[] private _donors;\r\n    address[] private _burners;\r\n\r\n    uint256 private _totalTaxPaid;\r\n    mapping(address => uint256) private _taxPaid;\r\n\r\n    // Fees\r\n    uint256 private _taxPercent = 2;                             // 2%\r\n    bool    private _taxStatus;\r\n\r\n    // Events\r\n    event AllowedTrading();\r\n    event EnabledTax();\r\n    event DisabledTax();\r\n    event SetDefenseBotSystemOn();\r\n    event SetDefenseBotSystemOff();\r\n    event SetDefenseSmartContractSystemOn();\r\n    event SetDefenseSmartContractSystemOff();\r\n    event AddedAddressToPool(address _address);\r\n    event RemovedAddressFromPool(address _address);\r\n    event AddedAddressToBlacklist(address _address, uint256 _timestamp);\r\n    event RemovedAddressFromBlacklist(address _address);\r\n    event AddedProtectedAddress(address _address);\r\n    event RemovedProtectedAddress(address _address);\r\n    event SetAntiBotTime(uint256 _time);\r\n    event SetBotDonationWallet(address _address);\r\n    event SetUserDonationWallet(address _address);\r\n    event SetBurnWallet(address _address);\r\n    event SetWebsiteURL(string _url);\r\n    event SetContractAuditURL(string _url);\r\n    event SetContractExplanationURL(string _url);\r\n    event PunishedBot(address _address, uint256 _amount);\r\n    event PunishedContract(address _address, uint256 _amount);\r\n    event RobinHood(uint256 _amount);\r\n    event Donated(address _address, uint256 _amount);\r\n    event Burned(address _address, uint256 _amount);\r\n    event BurnedTax(address _address, uint256 _amount);\r\n    event AddedPolygonBridgeAddress(address _address);\r\n\r\n    constructor(\r\n        bool allowedTrading_,\r\n        bool defenseSmartContractSystem_,\r\n        bool defenseBotSystem_,\r\n        bool taxStatus_,\r\n        uint256 antiBotTime_,\r\n        address userDonationWallet_,\r\n        address botDonationWallet_,\r\n        string memory contractWebsiteURL_) {\r\n\r\n        _protectedAddress[_msgSender()] = true;\r\n        _protectedAddresses.push(_msgSender());\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        _allowedTrading = allowedTrading_;\r\n        _defenseSmartContractSystem = defenseSmartContractSystem_;\r\n        _defenseBotSystem = defenseBotSystem_;\r\n        _taxStatus = taxStatus_;\r\n        _antiBotTime = antiBotTime_;\r\n        _userDonationWallet = userDonationWallet_;\r\n        _botDonationWallet = botDonationWallet_;\r\n        _contractWebsiteURL = contractWebsiteURL_;\r\n\r\n        emit SetDefenseSmartContractSystemOn();\r\n        emit SetDefenseBotSystemOn();\r\n        emit EnabledTax();\r\n        emit SetAntiBotTime(_antiBotTime);\r\n        emit SetUserDonationWallet(_userDonationWallet);\r\n        emit SetBotDonationWallet(_botDonationWallet);\r\n        emit SetWebsiteURL(contractWebsiteURL_);\r\n        emit AddedProtectedAddress(_msgSender());\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    // Read functions                                                                \r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function showCirculatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(_burnWallet);\r\n    }\r\n\r\n    function showPooledTokens() public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        for (uint i = 0; i < _pools.length; i++) {\r\n            amount = amount + balanceOf(_pools[i]);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function showTokensBridgedOnPolygon() public view returns(uint256) {\r\n        return balanceOf(_polygonBridgeAddress);\r\n    }\r\n\r\n    function checkRobinHoodProtectionTimeRemaining(address account) public view returns(uint256) {\r\n        uint256 time = 0;\r\n        if (_blacklistedAt[account] + _robinHoodProtectionTime > block.timestamp ) {\r\n            time = _blacklistedAt[account] + _robinHoodProtectionTime - block.timestamp;\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    function showBlacklist() public view returns (address[] memory) {\r\n        return _blacklist;\r\n    }\r\n\r\n    function showTokensReceivedTotal() public view returns (uint256) {\r\n        return _tokensReceivedFromBots + _tokensReceivedFromCommunity;\r\n    }\r\n\r\n    function showTokensInsideUserDonationWallet() public view returns (uint256) {\r\n        return balanceOf(_userDonationWallet);\r\n    }\r\n\r\n    function showTokensInsideBotDonationWallet() public view returns (uint256) {\r\n        return balanceOf(_botDonationWallet);\r\n    }\r\n    \r\n    function showTokensInsideDonationWallets() public view returns (uint256) {\r\n        return balanceOf(_botDonationWallet) + balanceOf(_userDonationWallet);\r\n    }\r\n\r\n    function showSpentUserDonations() public view returns (uint256) {\r\n        return _tokensReceivedFromCommunity - balanceOf(_userDonationWallet);\r\n    }\r\n\r\n    function showSpentBotDonations() public view returns (uint256) {\r\n        return _tokensReceivedFromBots - balanceOf(_botDonationWallet);\r\n    }    \r\n\r\n    function showSpentDonations() public view returns (uint256) {\r\n        return _tokensReceivedFromBots + _tokensReceivedFromCommunity - balanceOf(_botDonationWallet) - balanceOf(_userDonationWallet);\r\n    }\r\n\r\n    function showCyberNationDonors() external view returns (address[] memory) {\r\n        return _donors;\r\n    }\r\n\r\n    function showCyberNationBurners() external view returns (address[] memory) {\r\n        return _burners;\r\n    }\r\n\r\n    function showBurnAmount() public view returns (uint256) {\r\n        return balanceOf(_burnWallet);\r\n    }\r\n\r\n    function showContractAuditURL() external view returns (string memory) {\r\n        return _contractAuditURL;\r\n    }\r\n\r\n    function showContractWebsiteURL() external view returns (string memory) {\r\n        return _contractWebsiteURL;\r\n    }\r\n\r\n    function showContractExplanationURL() external view returns (string memory) {\r\n        return _contractExplanationURL;\r\n    }\r\n\r\n    function showAllowedTrading() external view returns (bool) {\r\n        return _allowedTrading;\r\n    }\r\n\r\n    function showTaxStatus() external view returns (bool) {\r\n        return _taxStatus;\r\n    }\r\n\r\n    function showDefenseSmartContractSystem() external view returns (bool) {\r\n        return _defenseSmartContractSystem;\r\n    }\r\n\r\n    function showDefenseBotSystem() external view returns (bool) {\r\n        return _defenseBotSystem;\r\n    }\r\n\r\n    function showAntiBotTime() external view returns (uint256) {\r\n        return _antiBotTime;\r\n    }\r\n\r\n    function showRobinHoodProtectionTime() external view returns (uint256) {\r\n        return _robinHoodProtectionTime;\r\n    }\r\n    \r\n    function showBurnWallet() external view returns (address) {\r\n        return _burnWallet;\r\n    }\r\n\r\n    function showUserDonationWallet() external view returns (address) {\r\n        return _userDonationWallet;\r\n    }\r\n\r\n    function showBotDonationWallet() external view returns (address) {\r\n        return _botDonationWallet;\r\n    }\r\n\r\n    function checkPoolAddress(address _address) external view returns (bool) {\r\n        return _poolAddress[_address];\r\n    }\r\n\r\n    function showPoolAddresses() external view returns (address[] memory) {\r\n        return _pools;\r\n    }\r\n\r\n    function showPolygonBridgeAddress() external view returns (address) {\r\n        return _polygonBridgeAddress;\r\n    }\r\n\r\n    function checkLatestTransaction(address _address) external view returns (uint256) {\r\n        return _latestTransaction[_address];\r\n    }\r\n\r\n    function checkProtectedAddress(address _address) external view returns (bool) {\r\n        return _protectedAddress[_address];\r\n    }\r\n\r\n    function showProtectedAddresses() external view returns (address[] memory) {\r\n        return _protectedAddresses;\r\n    }\r\n\r\n    function checkBlacklisted(address _address) external view returns (bool) {\r\n        return _blacklisted[_address];\r\n    }\r\n\r\n    function checkBlacklistedTime(address _address) external view returns (uint256) {\r\n        return _blacklistedAt[_address];\r\n    }\r\n\r\n    function showTokensReceivedFromCommunity() external view returns (uint256) {\r\n        return _tokensReceivedFromCommunity;\r\n    }\r\n\r\n    function showTokensReceivedFromBots() external view returns (uint256) {\r\n        return _tokensReceivedFromBots;\r\n    }\r\n\r\n    function checkUserDonation(address _address) external view returns (uint256) {\r\n        return _userDonation[_address];\r\n    }\r\n\r\n    function checkUserBurned(address _address) external view returns (uint256) {\r\n        return _userBurned[_address];\r\n    }\r\n\r\n    function showTotalTaxPaid() external view returns (uint256) {\r\n        return _totalTaxPaid;\r\n    }\r\n\r\n    function checkTaxPaid(address _address) external view returns (uint256) {\r\n        return _taxPaid[_address];\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    // Write functions\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function donate(uint256 amount) external {\r\n        require(_botDonationWallet != address(0));\r\n        uint256 _userDonation_ = _userDonation[msg.sender];\r\n        _transfer_(_msgSender(), _userDonationWallet, amount);\r\n        if (_userDonation_ == 0) {\r\n            _donors.push(msg.sender);\r\n        }\r\n        _userDonation[msg.sender] = _userDonation[msg.sender] + amount;\r\n        _tokensReceivedFromCommunity = _tokensReceivedFromCommunity + amount;\r\n        emit Donated(msg.sender, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        uint256 _userBurned_ = _userBurned[msg.sender];\r\n        _transfer_(_msgSender(), _burnWallet, amount);\r\n        if (_userBurned_ == 0) {\r\n            _burners.push(msg.sender);\r\n        }\r\n        _userBurned[msg.sender] = _userBurned[msg.sender] + amount;\r\n        emit Burned(msg.sender, amount);\r\n    }\r\n\r\n    function allowTrading() external onlyOwner {\r\n        _allowedTrading = true;\r\n        emit AllowedTrading();\r\n    }\r\n\r\n    function setTaxStatusOn() external onlyOwner {\r\n        _taxStatus = true;\r\n        emit EnabledTax();\r\n    }\r\n\r\n    function setTaxStatusOff() external onlyOwner {\r\n        _taxStatus = false;\r\n        emit DisabledTax();\r\n    }\r\n\r\n    function setDefenseBotSystemOn() external onlyOwner {\r\n        _defenseBotSystem = true;\r\n        emit SetDefenseBotSystemOn();\r\n    }\r\n\r\n    function setDefenseBotSystemOff() external onlyOwner {\r\n        _defenseBotSystem = false;\r\n        emit SetDefenseBotSystemOff();\r\n    }\r\n\r\n    function setDefenseSmartContractSystemOn() external onlyOwner {\r\n        _defenseSmartContractSystem = true;\r\n        emit SetDefenseSmartContractSystemOn();\r\n    }\r\n\r\n    function setDefenseSmartContractSystemOff() external onlyOwner {\r\n        _defenseSmartContractSystem = false;\r\n        emit SetDefenseSmartContractSystemOff();\r\n    }\r\n\r\n    function addAddressToPool(address _address) external onlyOwner {\r\n        require(!_poolAddress[_address], \"ERC20: address is in pool\");\r\n        _setPoolAddress(_address, true);\r\n        _addAddressToPoolEnumeration(_address);\r\n        emit AddedAddressToPool(_address);\r\n    }\r\n\r\n    function _addAddressToPoolEnumeration(address _address) private {\r\n        _poolIndex[_address] = _pools.length;\r\n        _pools.push(_address);\r\n    }\r\n\r\n    function removeAddressFromPool(address _address) external onlyOwner {\r\n        require(_poolAddress[_address], \"ERC20: address is not in pool\");\r\n        _setPoolAddress(_address, false);\r\n        _removeAddressFromPoolEnumeration(_address);\r\n        emit RemovedAddressFromPool(_address);\r\n    }\r\n\r\n    function _removeAddressFromPoolEnumeration(address _address) private {\r\n        uint256 lastPoolIndex = _pools.length - 1;\r\n        uint256 poolIndex = _poolIndex[_address];\r\n        address lastPool = _pools[lastPoolIndex];\r\n        _pools[poolIndex] = lastPool;\r\n        _poolIndex[lastPool] = poolIndex; // Update the moved token's index\r\n        // This also deletes the contents at the last position of the array\r\n        delete _poolIndex[_address];\r\n        _pools.pop();\r\n    }\r\n\r\n    function _setPoolAddress(address _address, bool value) private {\r\n        require(_poolAddress[_address] != value, \"ERC20: pool is set to that value\");\r\n        _poolAddress[_address] = value;\r\n    }\r\n\r\n    function setPolygonBridgeAddress(address _address) external onlyOwner {\r\n        _polygonBridgeAddress = _address;\r\n        emit AddedPolygonBridgeAddress(_address);\r\n    }\r\n\r\n    function addProtectedAddress(address _address) external onlyOwner {\r\n        removeAddressFromBlacklist(_address);\r\n        _setProtectedAddress(_address, true);\r\n        _protectedAddresses.push(_address);\r\n        emit AddedProtectedAddress(_address);\r\n    }\r\n\r\n    function removeProtectedAddress(address _address) external onlyOwner {\r\n        _setProtectedAddress(_address, false);\r\n        emit RemovedProtectedAddress(_address);\r\n    }\r\n\r\n    function _setProtectedAddress(address _address, bool value) private {\r\n        require(_protectedAddress[_address] != value, \"ERC20: address is protected\");\r\n        _protectedAddress[_address] = value;\r\n    }\r\n\r\n    function _addAddressToBlacklist(address _address) private {\r\n        if(!_protectedAddress[_address] && _address != _userDonationWallet && _address != _botDonationWallet && _blacklisted[_address] != true) {\r\n            _blacklisted[_address] = true;\r\n            _blacklistedAt[_address] = block.timestamp;\r\n            _addAddressToBlacklistEnumeration(_address);\r\n            emit AddedAddressToBlacklist(_address, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function _addAddressToBlacklistEnumeration(address _address) private {\r\n        _blacklistIndex[_address] = _blacklist.length;\r\n        _blacklist.push(_address);\r\n    }\r\n\r\n    function removeAddressFromBlacklist(address _address) public onlyOwner {\r\n        if (_blacklisted[_address]) {\r\n            _blacklisted[_address] = false;\r\n            _blacklistedAt[_address] = 0;\r\n            _removeAddressFromBlacklistEnumeration(_address);\r\n            emit RemovedAddressFromBlacklist(_address);\r\n        }\r\n    }\r\n\r\n    function _removeAddressFromBlacklistEnumeration(address _address) private {\r\n        uint256 lastBlacklistIndex = _blacklist.length - 1;\r\n        uint256 blacklistIndex = _blacklistIndex[_address];\r\n        address lastBlacklistAddress = _blacklist[lastBlacklistIndex];\r\n        _blacklist[blacklistIndex] = lastBlacklistAddress;\r\n        _blacklistIndex[lastBlacklistAddress] = blacklistIndex; // Update the moved token's index\r\n        delete _blacklistIndex[_address];\r\n        _blacklist.pop();\r\n    }\r\n\r\n    function changeAntiBotTime(uint256 _time) external onlyOwner {\r\n        require(_antiBotTime != _time, \"ERC20: `_time` is set to that value\");\r\n        require(_time <= 45, \"ERC20: `_time` cannot exceed the value of 45\");\r\n        _antiBotTime = _time;\r\n        emit SetAntiBotTime(_time);\r\n    }\r\n\r\n    function punishBot(address botAddress, uint256 amount) external onlyOwner {\r\n        require(_blacklisted[botAddress], \"ERC20: address is not blacklisted\");\r\n        uint256 botBalance = balanceOf(botAddress);\r\n        require(botBalance > 10**18 && amount < botBalance.sub(10**18), \"ERC20: transfer amount exceeds balance\");\r\n        _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n        _transfer_(botAddress, _botDonationWallet, amount);\r\n        emit PunishedBot(botAddress, amount);\r\n    }\r\n\r\n    function punishSmartContract(address contractAddress, uint256 amount) external onlyOwner {\r\n        require(contractAddress.isContract(), \"ERC20: address not a contract\");\r\n        require(!_poolAddress[contractAddress], \"ERC20: contract is a pool\");\r\n        require(!_protectedAddress[contractAddress], \"ERC20: address is protected\");\r\n        uint256 contractBalance = balanceOf(contractAddress);\r\n        require(contractBalance > 10**18 && amount < contractBalance.sub(10**18), \"ERC20: punish amount exceeds balance\");\r\n        _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n        _transfer_(contractAddress, _botDonationWallet, amount);\r\n        emit PunishedContract(contractAddress, amount);\r\n    }\r\n\r\n    function takeAllFromBot(address botAddress) external onlyOwner {\r\n        require(_blacklisted[botAddress], \"ERC20: address is not blacklisted\");\r\n        uint256 botBalance = balanceOf(botAddress);\r\n        require(botBalance > 10**18, \"ERC20: punish amount exceeds balance\");\r\n        uint256 amount = botBalance.sub(10**18);\r\n        _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n        _transfer_(botAddress, _botDonationWallet, amount);\r\n        emit PunishedBot(botAddress, amount);\r\n    }\r\n\r\n    function takeAllFromSmartContract(address contractAddress) external onlyOwner {\r\n        require(contractAddress.isContract(), \"ERC20: address not a contract\");\r\n        require(!_poolAddress[contractAddress], \"ERC20: contract is a pool\");\r\n        require(!_protectedAddress[contractAddress], \"ERC20: address is protected\");\r\n        uint256 contractBalance = balanceOf(contractAddress);\r\n        require(contractBalance > 10**18, \"ERC20: punish amount exceeds balance\");\r\n        uint256 amount = contractBalance.sub(10**18);\r\n        _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n        _transfer_(contractAddress, _botDonationWallet, amount);\r\n        emit PunishedContract(contractAddress, amount);\r\n    }\r\n\r\n    function setRobinHoodProtectionTime(uint256 _time) external onlyOwner {\r\n        require(_time <= 604800, \"ERC20: `_time` cannot be set to less than 7 days (604800 seconds)\");\r\n        _robinHoodProtectionTime = _time;\r\n    }\r\n\r\n    function robinHood() external onlyOwner {\r\n        uint256 amount = 0;\r\n        for (uint i = 0; i < _blacklist.length; i++) {\r\n            address blacklistAddress = _blacklist[i];\r\n            // Check if blacklisted time passed over robinHoodProtectionTime (default 7 days)\r\n            if ((block.timestamp - _blacklistedAt[blacklistAddress]) > _robinHoodProtectionTime) {\r\n                uint256 tokenAmount = balanceOf(blacklistAddress);\r\n                if (tokenAmount > 10**18) {\r\n                    tokenAmount = tokenAmount.sub(10**18);\r\n                    _transfer_(blacklistAddress, _botDonationWallet, tokenAmount);\r\n                    amount = amount + tokenAmount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (amount > 0) {\r\n            _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n            emit RobinHood(amount);    \r\n        }\r\n    }\r\n\r\n    function setWebsiteURL(string memory _url) external onlyOwner {\r\n        _contractWebsiteURL = _url;\r\n        emit SetWebsiteURL(_url);\r\n    }\r\n\r\n    function setContractAuditURL(string memory _url) external onlyOwner {\r\n        _contractAuditURL = _url;\r\n        emit SetContractAuditURL(_url);\r\n    }\r\n\r\n    function setContractExplanationURL(string memory _url) external onlyOwner {\r\n        _contractExplanationURL = _url;\r\n        emit SetContractExplanationURL(_url);\r\n    }\r\n\r\n    function setUserDonationWallet(address _address) external onlyOwner {\r\n        require(_userDonationWallet != _address, \"ERC20: same address is set\");\r\n        _userDonationWallet = _address;\r\n        emit SetUserDonationWallet(_address);\r\n    }\r\n\r\n    function setBotDonationWallet(address _address) external onlyOwner {\r\n        require(_botDonationWallet != _address, \"ERC20: same address is set\");\r\n        _botDonationWallet = _address;\r\n        emit SetBotDonationWallet(_address);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n        ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: transfer amount must be greater than zero\");\r\n\r\n        // BurnWallet can't sell or send\r\n        require(from != _burnWallet, \"ERC20: `_burnWallet` not allowed to transfer\");\r\n        // Blacklist can't sell or send.\r\n        require(!_blacklisted[from], \"ERC20: address is blacklisted\");\r\n        // Smart contract can't sell or send if it's not in protected addresses.\r\n        require(_poolAddress[from] || _protectedAddress[from] || !_defenseSmartContractSystem || !from.isContract(), \"Smart contract can not sell or send\");\r\n\r\n        bool addedBlacklist = false;\r\n        address addedBlacklistAddress;\r\n\r\n        if (_allowedTrading) {\r\n            // check defense status\r\n            // sale transaction\r\n            if (_poolAddress[to]) {\r\n                // Check antibot time\r\n                if (!_protectedAddress[from] && _defenseBotSystem && (block.timestamp - _latestTransaction[from]) <= _antiBotTime) {\r\n                    addedBlacklistAddress = from;\r\n                    addedBlacklist = true;\r\n                }\r\n\r\n                _latestTransaction[from] = block.timestamp;                    \r\n            }\r\n            // buy transaction\r\n            else if (_poolAddress[from]) {\r\n                _latestTransaction[to] = block.timestamp;\r\n            }\r\n            else if (_defenseBotSystem && (block.timestamp - _latestTransaction[from]) <= _antiBotTime) {\r\n                addedBlacklistAddress = from;\r\n                addedBlacklist = true;\r\n                _latestTransaction[from] = block.timestamp;\r\n                _addAddressToBlacklist(to);\r\n            }\r\n            else {\r\n                _latestTransaction[from] = block.timestamp;\r\n            }\r\n        }\r\n        else {\r\n            require(!_poolAddress[to], \"ERC20: not allowed to sell\");\r\n            \r\n            addedBlacklist = true;            \r\n            addedBlacklistAddress = from;\r\n\r\n            if (_poolAddress[from]) {\r\n                addedBlacklistAddress = to;\r\n                _latestTransaction[to] = block.timestamp;\r\n            }\r\n        }\r\n\r\n        // Take buy tax fee 2%\r\n        if (_poolAddress[from] && _taxStatus) {\r\n            uint256 fees = amount.mul(_taxPercent).div(100);\r\n            amount = amount.sub(fees);\r\n            _taxPaid[to] = _taxPaid[to] + fees;\r\n            _totalTaxPaid = _totalTaxPaid + fees;\r\n            _transfer_(from, _burnWallet, fees);\r\n            emit BurnedTax(to, fees);\r\n        }\r\n\r\n        _transfer_(from, to, amount);\r\n\r\n        if (addedBlacklist) {\r\n            _addAddressToBlacklist(addedBlacklistAddress);            \r\n        }\r\n\r\n        if (to == _userDonationWallet) {\r\n            if (_userDonation[from] == 0) {\r\n                _donors.push(from);\r\n            }\r\n            _userDonation[from] = _userDonation[from].add(amount);\r\n            _tokensReceivedFromCommunity = _tokensReceivedFromCommunity.add(amount);\r\n            emit Donated(from, amount);\r\n        }\r\n\r\n        if (to == _botDonationWallet) {\r\n            _tokensReceivedFromBots = _tokensReceivedFromBots.add(amount);\r\n        }\r\n\r\n        if (to == _burnWallet) {\r\n            if (_userBurned[from] == 0) {\r\n                _burners.push(from);\r\n            }\r\n            _userBurned[from] = _userBurned[from] + amount;\r\n            emit Burned(from, amount);\r\n        }\r\n    }\r\n\r\n    function _transfer_(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(from != _burnWallet, \"ERC20: `_burnWallet` not allowed to transfer\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowedTrading_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"defenseSmartContractSystem_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"defenseBotSystem_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taxStatus_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"antiBotTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userDonationWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"botDonationWallet_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractWebsiteURL_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AddedAddressToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedAddressToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedPolygonBridgeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedProtectedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowedTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurnedTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisabledTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PunishedBot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PunishedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedAddressFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedAddressFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedProtectedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RobinHood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SetAntiBotTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetBotDonationWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetBurnWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"SetContractAuditURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"SetContractExplanationURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetDefenseBotSystemOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetDefenseBotSystemOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetDefenseSmartContractSystemOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetDefenseSmartContractSystemOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetUserDonationWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"SetWebsiteURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddressToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addProtectedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeAntiBotTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkBlacklistedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkLatestTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkProtectedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkRobinHoodProtectionTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkTaxPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUserBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUserDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"punishBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"punishSmartContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeProtectedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"robinHood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBotDonationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setContractAuditURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setContractExplanationURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefenseBotSystemOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefenseBotSystemOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefenseSmartContractSystemOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefenseSmartContractSystemOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPolygonBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setRobinHoodProtectionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTaxStatusOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTaxStatusOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUserDonationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setWebsiteURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAllowedTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAntiBotTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBlacklist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBotDonationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showContractAuditURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showContractExplanationURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showContractWebsiteURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showCyberNationBurners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showCyberNationDonors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showDefenseBotSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showDefenseSmartContractSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPolygonBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPooledTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showProtectedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showRobinHoodProtectionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSpentBotDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSpentDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSpentUserDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTaxStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensBridgedOnPolygon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensInsideBotDonationWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensInsideDonationWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensInsideUserDonationWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensReceivedFromBots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensReceivedFromCommunity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTokensReceivedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTotalTaxPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showUserDonationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"takeAllFromBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"takeAllFromSmartContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CYBR", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "2026", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001400000000000000000000000064a6d1ac7c5d9a4511d4c41dffd2b74ada24dfb50000000000000000000000006d6b0c340d7eda8130a4ca1142d5dfdba61e7b950000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001a7777772e5468654379626572456e74657270726973652e636f6d000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4f199c78fa758b18c3cf7350442d8bf53a6f063264927dff6d03ee28c79fde4"}]}