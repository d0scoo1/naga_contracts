{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.5.16;\r\n\t\r\n\r\n\tinterface IBEP20 {\r\n\t  /**\r\n\t   * @dev Returns the amount of tokens in existence.\r\n\t   */\r\n\t  function totalSupply() external view returns (uint256);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the token decimals.\r\n\t   */\r\n\t  function decimals() external view returns (uint8);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the token symbol.\r\n\t   */\r\n\t  function symbol() external view returns (string memory);\r\n\t\r\n\r\n\t  /**\r\n\t  * @dev Returns the token name.\r\n\t  */\r\n\t  function name() external view returns (string memory);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the bep token owner.\r\n\t   */\r\n\t  function getOwner() external view returns (address);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the amount of tokens owned by `account`.\r\n\t   */\r\n\t  function balanceOf(address account) external view returns (uint256);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t   *\r\n\t   * Returns a boolean value indicating whether the operation succeeded.\r\n\t   *\r\n\t   * Emits a {Transfer} event.\r\n\t   */\r\n\t  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the remaining number of tokens that `spender` will be\r\n\t   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t   * zero by default.\r\n\t   *\r\n\t   * This value changes when {approve} or {transferFrom} are called.\r\n\t   */\r\n\t  function allowance(address _owner, address spender) external view returns (uint256);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t   *\r\n\t   * Returns a boolean value indicating whether the operation succeeded.\r\n\t   *\r\n\t   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t   * that someone may use both the old and the new allowance by unfortunate\r\n\t   * transaction ordering. One possible solution to mitigate this race\r\n\t   * condition is to first reduce the spender's allowance to 0 and set the\r\n\t   * desired value afterwards:\r\n\t   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t   *\r\n\t   * Emits an {Approval} event.\r\n\t   */\r\n\t  function approve(address spender, uint256 amount) external returns (bool);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t   * allowance mechanism. `amount` is then deducted from the caller's\r\n\t   * allowance.\r\n\t   *\r\n\t   * Returns a boolean value indicating whether the operation succeeded.\r\n\t   *\r\n\t   * Emits a {Transfer} event.\r\n\t   */\r\n\t  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t   * another (`to`).\r\n\t   *\r\n\t   * Note that `value` may be zero.\r\n\t   */\r\n\t  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t   * a call to {approve}. `value` is the new allowance.\r\n\t   */\r\n\t  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\t}\r\n\t\r\n\r\n\t/*\r\n\t * @dev Provides information about the current execution context, including the\r\n\t * sender of the transaction and its data. While these are generally available\r\n\t * via msg.sender and msg.data, they should not be accessed in such a direct\r\n\t * manner, since when dealing with GSN meta-transactions the account sending and\r\n\t * paying for execution may not be the actual sender (as far as an application\r\n\t * is concerned).\r\n\t *\r\n\t * This contract is only required for intermediate, library-like contracts.\r\n\t */\r\n\tcontract Context {\r\n\t  // Empty internal constructor, to prevent people from mistakenly deploying\r\n\t  // an instance of this contract, which should be used via inheritance.\r\n\t  constructor () internal { }\r\n\t\r\n\r\n\t  function _msgSender() internal view returns (address payable) {\r\n\t    return msg.sender;\r\n\t  }\r\n\t\r\n\r\n\t  function _msgData() internal view returns (bytes memory) {\r\n\t    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t    return msg.data;\r\n\t  }\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\t * checks.\r\n\t *\r\n\t * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n\t * in bugs, because programmers usually assume that an overflow raises an\r\n\t * error, which is the standard behavior in high level programming languages.\r\n\t * `SafeMath` restores this intuition by reverting the transaction when an\r\n\t * operation overflows.\r\n\t *\r\n\t * Using this library instead of the unchecked operations eliminates an entire\r\n\t * class of bugs, so it's recommended to use it always.\r\n\t */\r\n\tlibrary SafeMath {\r\n\t  /**\r\n\t   * @dev Returns the addition of two unsigned integers, reverting on\r\n\t   * overflow.\r\n\t   *\r\n\t   * Counterpart to Solidity's `+` operator.\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - Addition cannot overflow.\r\n\t   */\r\n\t  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    uint256 c = a + b;\r\n\t    require(c >= a, \"SafeMath: addition overflow\");\r\n\t\r\n\r\n\t    return c;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t   * overflow (when the result is negative).\r\n\t   *\r\n\t   * Counterpart to Solidity's `-` operator.\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - Subtraction cannot overflow.\r\n\t   */\r\n\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t   * overflow (when the result is negative).\r\n\t   *\r\n\t   * Counterpart to Solidity's `-` operator.\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - Subtraction cannot overflow.\r\n\t   */\r\n\t  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t    require(b <= a, errorMessage);\r\n\t    uint256 c = a - b;\r\n\t\r\n\r\n\t    return c;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t   * overflow.\r\n\t   *\r\n\t   * Counterpart to Solidity's `*` operator.\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - Multiplication cannot overflow.\r\n\t   */\r\n\t  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t    // benefit is lost if 'b' is also tested.\r\n\t    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t    if (a == 0) {\r\n\t      return 0;\r\n\t    }\r\n\t\r\n\r\n\t    uint256 c = a * b;\r\n\t    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\r\n\r\n\t    return c;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t   * division by zero. The result is rounded towards zero.\r\n\t   *\r\n\t   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t   * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - The divisor cannot be zero.\r\n\t   */\r\n\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    return div(a, b, \"SafeMath: division by zero\");\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t   * division by zero. The result is rounded towards zero.\r\n\t   *\r\n\t   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t   * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - The divisor cannot be zero.\r\n\t   */\r\n\t  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t    // Solidity only automatically asserts when dividing by 0\r\n\t    require(b > 0, errorMessage);\r\n\t    uint256 c = a / b;\r\n\t    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\r\n\r\n\t    return c;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t   * Reverts when dividing by zero.\r\n\t   *\r\n\t   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t   * invalid opcode to revert (consuming all remaining gas).\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - The divisor cannot be zero.\r\n\t   */\r\n\t  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t    return mod(a, b, \"SafeMath: modulo by zero\");\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t   * Reverts with custom message when dividing by zero.\r\n\t   *\r\n\t   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t   * invalid opcode to revert (consuming all remaining gas).\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - The divisor cannot be zero.\r\n\t   */\r\n\t  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t    require(b != 0, errorMessage);\r\n\t    return a % b;\r\n\t  }\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @dev Contract module which provides a basic access control mechanism, where\r\n\t * there is an account (an owner) that can be granted exclusive access to\r\n\t * specific functions.\r\n\t *\r\n\t * By default, the owner account will be the one that deploys the contract. This\r\n\t * can later be changed with {transferOwnership}.\r\n\t *\r\n\t * This module is used through inheritance. It will make available the modifier\r\n\t * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n\t * the owner.\r\n\t */\r\n\tcontract Ownable is Context {\r\n\t  address private _owner;\r\n\t\r\n\r\n\t  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t   */\r\n\t  constructor () internal {\r\n\t    address msgSender = _msgSender();\r\n\t    _owner = msgSender;\r\n\t    emit OwnershipTransferred(address(0), msgSender);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the address of the current owner.\r\n\t   */\r\n\t  function owner() public view returns (address) {\r\n\t    return _owner;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Throws if called by any account other than the owner.\r\n\t   */\r\n\t  modifier onlyOwner() {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t    _;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Leaves the contract without owner. It will not be possible to call\r\n\t   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t   *\r\n\t   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t   * thereby removing any functionality that is only available to the owner.\r\n\t   */\r\n\t  function renounceOwnership() public onlyOwner {\r\n\t    emit OwnershipTransferred(_owner, address(0));\r\n\t    _owner = address(0);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t   * Can only be called by the current owner.\r\n\t   */\r\n\t  function transferOwnership(address newOwner) public onlyOwner {\r\n\t    _transferOwnership(newOwner);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t   */\r\n\t  function _transferOwnership(address newOwner) internal {\r\n\t    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t    emit OwnershipTransferred(_owner, newOwner);\r\n\t    _owner = newOwner;\r\n\t  }\r\n\t}\r\n\t\r\n\r\n\tcontract BEP20Token is Context, IBEP20, Ownable {\r\n\t  using SafeMath for uint256;\r\n\t\r\n\r\n\t  mapping (address => uint256) private _balances;\r\n\t\r\n\r\n\t  mapping (address => mapping (address => uint256)) private _allowances;\r\n\t\r\n\r\n\t  uint256 private _totalSupply;\r\n\t  uint8 private _decimals;\r\n\t  string private _symbol;\r\n\t  string private _name;\r\n\t\r\n\r\n\t  constructor() public {\r\n\t    _name = \"Notredame\";\r\n\t    _symbol = \"CHR\";\r\n\t    _decimals = 18;\r\n\t    _totalSupply = 100000000000000000000;\r\n\t    _balances[msg.sender] = _totalSupply;\r\n\t\r\n\r\n\t    emit Transfer(address(0), msg.sender, _totalSupply);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the bep token owner.\r\n\t   */\r\n\t  function getOwner() external view returns (address) {\r\n\t    return owner();\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the token decimals.\r\n\t   */\r\n\t  function decimals() external view returns (uint8) {\r\n\t    return _decimals;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Returns the token symbol.\r\n\t   */\r\n\t  function symbol() external view returns (string memory) {\r\n\t    return _symbol;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t  * @dev Returns the token name.\r\n\t  */\r\n\t  function name() external view returns (string memory) {\r\n\t    return _name;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-totalSupply}.\r\n\t   */\r\n\t  function totalSupply() external view returns (uint256) {\r\n\t    return _totalSupply;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-balanceOf}.\r\n\t   */\r\n\t  function balanceOf(address account) external view returns (uint256) {\r\n\t    return _balances[account];\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-transfer}.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `recipient` cannot be the zero address.\r\n\t   * - the caller must have a balance of at least `amount`.\r\n\t   */\r\n\t  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n\t    _transfer(_msgSender(), recipient, amount);\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-allowance}.\r\n\t   */\r\n\t  function allowance(address owner, address spender) external view returns (uint256) {\r\n\t    return _allowances[owner][spender];\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-approve}.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `spender` cannot be the zero address.\r\n\t   */\r\n\t  function approve(address spender, uint256 amount) external returns (bool) {\r\n\t    _approve(_msgSender(), spender, amount);\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev See {BEP20-transferFrom}.\r\n\t   *\r\n\t   * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t   * required by the EIP. See the note at the beginning of {BEP20};\r\n\t   *\r\n\t   * Requirements:\r\n\t   * - `sender` and `recipient` cannot be the zero address.\r\n\t   * - `sender` must have a balance of at least `amount`.\r\n\t   * - the caller must have allowance for `sender`'s tokens of at least\r\n\t   * `amount`.\r\n\t   */\r\n\t  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n\t    _transfer(sender, recipient, amount);\r\n\t    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t   *\r\n\t   * This is an alternative to {approve} that can be used as a mitigation for\r\n\t   * problems described in {BEP20-approve}.\r\n\t   *\r\n\t   * Emits an {Approval} event indicating the updated allowance.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `spender` cannot be the zero address.\r\n\t   */\r\n\t  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t   *\r\n\t   * This is an alternative to {approve} that can be used as a mitigation for\r\n\t   * problems described in {BEP20-approve}.\r\n\t   *\r\n\t   * Emits an {Approval} event indicating the updated allowance.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `spender` cannot be the zero address.\r\n\t   * - `spender` must have allowance for the caller of at least\r\n\t   * `subtractedValue`.\r\n\t   */\r\n\t  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n\t   * the total supply.\r\n\t   *\r\n\t   * Requirements\r\n\t   *\r\n\t   * - `msg.sender` must be the token owner\r\n\t   */\r\n\t  function mint(uint256 amount) public onlyOwner returns (bool) {\r\n\t    _mint(_msgSender(), amount);\r\n\t    return true;\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t   *\r\n\t   * This is internal function is equivalent to {transfer}, and can be used to\r\n\t   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t   *\r\n\t   * Emits a {Transfer} event.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `sender` cannot be the zero address.\r\n\t   * - `recipient` cannot be the zero address.\r\n\t   * - `sender` must have a balance of at least `amount`.\r\n\t   */\r\n\t  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n\t    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\t\r\n\r\n\t    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n\t    _balances[recipient] = _balances[recipient].add(amount);\r\n\t    emit Transfer(sender, recipient, amount);\r\n\t  }\r\n\t\r\n\r\n\t  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t   * the total supply.\r\n\t   *\r\n\t   * Emits a {Transfer} event with `from` set to the zero address.\r\n\t   *\r\n\t   * Requirements\r\n\t   *\r\n\t   * - `to` cannot be the zero address.\r\n\t   */\r\n\t  function _mint(address account, uint256 amount) internal {\r\n\t    require(account != address(0), \"BEP20: mint to the zero address\");\r\n\t\r\n\r\n\t    _totalSupply = _totalSupply.add(amount);\r\n\t    _balances[account] = _balances[account].add(amount);\r\n\t    emit Transfer(address(0), account, amount);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t   * total supply.\r\n\t   *\r\n\t   * Emits a {Transfer} event with `to` set to the zero address.\r\n\t   *\r\n\t   * Requirements\r\n\t   *\r\n\t   * - `account` cannot be the zero address.\r\n\t   * - `account` must have at least `amount` tokens.\r\n\t   */\r\n\t  function _burn(address account, uint256 amount) internal {\r\n\t    require(account != address(0), \"BEP20: burn from the zero address\");\r\n\t\r\n\r\n\t    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n\t    _totalSupply = _totalSupply.sub(amount);\r\n\t    emit Transfer(account, address(0), amount);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n\t   *\r\n\t   * This is internal function is equivalent to `approve`, and can be used to\r\n\t   * e.g. set automatic allowances for certain subsystems, etc.\r\n\t   *\r\n\t   * Emits an {Approval} event.\r\n\t   *\r\n\t   * Requirements:\r\n\t   *\r\n\t   * - `owner` cannot be the zero address.\r\n\t   * - `spender` cannot be the zero address.\r\n\t   */\r\n\t  function _approve(address owner, address spender, uint256 amount) internal {\r\n\t    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n\t    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\t\r\n\r\n\t    _allowances[owner][spender] = amount;\r\n\t    emit Approval(owner, spender, amount);\r\n\t  }\r\n\t\r\n\r\n\t  /**\r\n\t   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n\t   * from the caller's allowance.\r\n\t   *\r\n\t   * See {_burn} and {_approve}.\r\n\t   */\r\n\t  function _burnFrom(address account, uint256 amount) internal {\r\n\t    _burn(account, amount);\r\n\t    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n\t  }\r\n\t}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0c9afdad382242c8d9794dd50ed853fc31f6cee1bf5d37d786794de0546a8eab"}]}