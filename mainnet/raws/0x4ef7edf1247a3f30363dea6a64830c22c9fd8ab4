{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\nabstract contract Ownable {\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"O: onlyOwner function!\");\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @notice Initializes owner variable with msg.sender address.\r\n     */\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the desired address.\r\n     * The function is callable only by the owner.\r\n     */\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"O: new owner is the zero address!\");\r\n        emit OwnershipTransferred(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n\r\n\r\nstruct Pool {\r\n    address poolAddress;\r\n    address stakingToken;\r\n    address rewardToken;\r\n}\r\n\r\n\r\n/**\r\n * @dev StakingRewards contract interface.\r\n * Only the functions required for YearnStakingV1Adapter contract are added.\r\n * The StakingRewards contract is available here\r\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\r\n */\r\ninterface StakingRewards {\r\n    function earned(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Adapter for Harvest protocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract HarvestStakingAdapter is ProtocolAdapter, Ownable {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    // Returns if the pool is enabled\r\n    mapping(address => bool) internal isEnabledPool_;\r\n    // Returns the list of pools where the given token is a staking token\r\n    mapping(address => address[]) internal stakingPools_;\r\n    // Returns the list of pools where the given token is a reward token\r\n    mapping(address => address[]) internal rewardPools_;\r\n\r\n    event PoolAdded(\r\n        address indexed poolAddress,\r\n        address indexed stakingToken,\r\n        address indexed rewardToken\r\n    );\r\n\r\n    function addPools(Pool[] calldata pools) external onlyOwner {\r\n        uint256 length = pools.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            addPool(pools[i]);\r\n        }\r\n    }\r\n\r\n    function setIsEnabledPools(\r\n        address[] calldata poolAddresses,\r\n        bool[] calldata isEnabledPools\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 length = poolAddresses.length;\r\n        require(isEnabledPools.length == length, \"HSA: inconsistent arrays\");\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            setIsEnabledPool(poolAddresses[i], isEnabledPools[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Amount of staked tokens / rewards earned after staking for a given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        address[] memory stakingPools = stakingPools_[token];\r\n        address[] memory rewardPools = rewardPools_[token];\r\n\r\n        uint256 length;\r\n        uint256 totalBalance = 0;\r\n\r\n        length = stakingPools.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            totalBalance += getStakingBalance(stakingPools[i], account);\r\n        }\r\n\r\n        length = rewardPools.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            totalBalance += getRewardBalance(rewardPools[i], account);\r\n        }\r\n\r\n        return totalBalance;\r\n    }\r\n\r\n    function getRewardPools(address token) external view returns (address[] memory) {\r\n        return rewardPools_[token];\r\n    }\r\n\r\n    function getStakingPools(address token) external view returns (address[] memory) {\r\n        return stakingPools_[token];\r\n    }\r\n\r\n    function addPool(Pool memory pool) internal {\r\n        stakingPools_[pool.stakingToken].push(pool.poolAddress);\r\n        rewardPools_[pool.rewardToken].push(pool.poolAddress);\r\n        setIsEnabledPool(pool.poolAddress, true);\r\n\r\n        emit PoolAdded(pool.poolAddress, pool.stakingToken, pool.rewardToken);\r\n    }\r\n\r\n    function setIsEnabledPool(address poolAddress, bool isEnabledPool) internal {\r\n        isEnabledPool_[poolAddress] = isEnabledPool;\r\n    }\r\n\r\n    function getRewardBalance(\r\n        address poolAddress,\r\n        address account\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return isEnabledPool_[poolAddress] ? StakingRewards(poolAddress).earned(account) : 0;\r\n    }\r\n\r\n    function getStakingBalance(\r\n        address poolAddress,\r\n        address account\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return isEnabledPool_[poolAddress] ? ERC20(poolAddress).balanceOf(account) : 0;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRewardPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStakingPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isEnabledPools\",\"type\":\"bool[]\"}],\"name\":\"setIsEnabledPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HarvestStakingAdapter", "CompilerVersion": "v0.6.5+commit.f956cc89", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8b49d162e70ca9042baf30ec49b730e19ecd3b80e49e9a775588adcc5093af9"}]}