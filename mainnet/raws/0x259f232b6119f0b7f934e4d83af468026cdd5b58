{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.6;\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// 'unqtToken' token contract\r\n\r\n//\r\n\r\n// Deployed to : 0x124729C425C24d7912BcAa54227bB30194734301\r\n\r\n// Symbol : unqt\r\n// Name : unqt\r\n\r\n// Total supply: 100000000\r\n\r\n// Decimals : 1\r\n\r\n//\r\n\r\n// Enjoy.\r\n\r\n//\r\n\r\n// (c) by Ahiwe Onyebuchi Valentine.\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n \r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe maths\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint a, uint b) public pure returns (uint c) {\r\n\r\nc = a + b;\r\n\r\nrequire(c >= a);\r\n\r\n}\r\n\r\nfunction safeSub(uint a, uint b) public pure returns (uint c) {\r\n\r\nrequire(b <= a);\r\n\r\nc = a - b;\r\n\r\n}\r\n\r\nfunction safeMul(uint a, uint b) public pure returns (uint c) {\r\n\r\nc = a * b;\r\n\r\nrequire(a == 0 || c / a == b);\r\n\r\n}\r\n\r\nfunction safeDiv(uint a, uint b) public pure returns (uint c) {\r\n\r\nrequire(b > 0);\r\n\r\nc = a / b;\r\n\r\n}\r\n\r\n}\r\n\r\n \r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nabstract contract ERC20Interface {\r\n\r\nfunction totalSupply() virtual public view returns (uint);\r\n\r\nfunction balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n\r\nfunction allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n\r\nfunction transfer(address to, uint tokens) virtual public returns (bool success);\r\n\r\nfunction approve(address spender, uint tokens) virtual public returns (bool success);\r\n\r\nfunction transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n \r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Contract function to receive approval and execute function in one call\r\n\r\n//\r\n\r\n// Borrowed from MiniMeToken\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nabstract contract ApproveAndCallFallBack {\r\n\r\nfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\r\n\r\n}\r\n\r\n \r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Owned contract\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\naddress public owner;\r\n\r\naddress public newOwner;\r\n\r\nevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\nconstructor() public {\r\n\r\nowner = msg.sender;\r\n\r\n}\r\n\r\nmodifier onlyOwner {\r\n\r\nrequire(msg.sender == owner);\r\n\r\n_;\r\n\r\n}\r\n\r\nfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\r\nnewOwner = _newOwner;\r\n\r\n}\r\n\r\nfunction acceptOwnership() public {\r\n\r\nrequire(msg.sender == newOwner);\r\n\r\nemit OwnershipTransferred(owner, newOwner);\r\n\r\nowner = newOwner;\r\n\r\nnewOwner = address(0);\r\n\r\n}\r\n\r\n}\r\n\r\n \r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n\r\n// token transfers\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract unqt is ERC20Interface, Owned, SafeMath {\r\n\r\nstring public symbol;\r\n\r\nstring public name;\r\n\r\nuint8 public decimals;\r\n\r\nuint public _totalSupply;\r\n\r\nmapping(address => uint) balances;\r\n\r\nmapping(address => mapping(address => uint)) allowed;\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Constructor\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nconstructor() public {\r\n\r\nsymbol = \"unqt\";\r\n\r\nname = \"unqt\";\r\n\r\ndecimals = 0;\r\n\r\n_totalSupply = 10000;\r\n\r\nbalances[0x124729C425C24d7912BcAa54227bB30194734301] = _totalSupply;\r\n\r\nemit Transfer(address(0), 0x124729C425C24d7912BcAa54227bB30194734301, _totalSupply);\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Total supply\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction totalSupply() public override view returns (uint) {\r\n\r\nreturn _totalSupply - balances[address(0)];\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Get the token balance for account tokenOwner\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction balanceOf(address tokenOwner) public override view returns (uint balance) {\r\n\r\nreturn balances[tokenOwner];\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Transfer the balance from token owner's account to to account\r\n\r\n// - Owner's account must have sufficient balance to transfer\r\n\r\n// - 0 value transfers are allowed\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction transfer(address to, uint tokens) public override returns (bool success) {\r\n\r\nbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n\r\nbalances[to] = safeAdd(balances[to], tokens);\r\n\r\nemit Transfer(msg.sender, to, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Token owner can approve for spender to transferFrom(...) tokens\r\n\r\n// from the token owner's account\r\n\r\n//\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n// recommends that there are no checks for the approval double-spend attack\r\n\r\n// as this should be implemented in user interfaces\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction approve(address spender, uint tokens) public override returns (bool success) {\r\n\r\nallowed[msg.sender][spender] = tokens;\r\n\r\nemit Approval(msg.sender, spender, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Transfer tokens from the from account to the to account\r\n\r\n//\r\n\r\n// The calling account must already have sufficient tokens approve(...)-d\r\n\r\n// for spending from the from account and\r\n\r\n// - From account must have sufficient balance to transfer\r\n\r\n// - Spender must have sufficient allowance to transfer\r\n\r\n// - 0 value transfers are allowed\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction transferFrom(address from, address to, uint tokens) public override returns (bool success) {\r\n\r\nbalances[from] = safeSub(balances[from], tokens);\r\n\r\nallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n\r\nbalances[to] = safeAdd(balances[to], tokens);\r\n\r\nemit Transfer(from, to, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Returns the amount of tokens approved by the owner that can be\r\n\r\n// transferred to the spender's account\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction allowance(address tokenOwner, address spender) public override view returns (uint remaining) {\r\n\r\nreturn allowed[tokenOwner][spender];\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Token owner can approve for spender to transferFrom(...) tokens\r\n\r\n// from the token owner's account. The spender contract function\r\n\r\n// receiveApproval(...) is then executed\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n\r\nallowed[msg.sender][spender] = tokens;\r\n\r\nemit Approval(msg.sender, spender, tokens);\r\n\r\nApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Don't accept ETH\r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// function () external payable {\r\n\r\n// revert();\r\n\r\n// }\r\n\r\n \r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// Owner can transfer out any accidentally sent ERC20 tokens\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\r\nreturn ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "unqt", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e1c55d5790a14ec8efd040eabbf5440ab267ce8ba55031549c36ba50dd027a2"}]}