{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**** \r\n***** this code and any deployments of this code are strictly provided as-is; no guarantee, representation or warranty is being made, express or implied, as to the safety or correctness of the code \r\n***** or any smart contracts or other software deployed from these files, in accordance with the disclosures and licenses found here: https://github.com/V4R14/firm_utils/blob/main/LICENSE\r\n***** this code is not audited, and users, developers, or adapters of these files should proceed with caution and use at their own risk.\r\n****/\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/// @title Address Verifier\r\n/// @notice on-chain address verification for client onboarding or third party request by requesting a specific amount of wei along with an on-chain reference or sig\r\n/// @dev auto-transfers wei to firm (deployer) and returns provided amount of wei (msg.value), boolean signature confirmation and _sig hash\r\n\r\ncontract AddressVerifier {\r\n\r\n    address payable firm;\r\n    \r\n    error SubmitWeiAmount(); \r\n\r\n    constructor() payable {\r\n        firm = payable(msg.sender);\r\n    }\r\n\r\n    /// @param _sig client signature or instructed reference from firm\r\n    /// @notice submit precise amount of wei to this contract address as directed by firm, along with name or other reference as _sig\r\n    /// @return msg.value in wei as requested by firm, bool if verification submitted, and bytes4 hash of the sig\r\n    function submitVerification(string calldata _sig) external payable returns (uint256, bool, bytes4) {\r\n        if (msg.value == 0) revert SubmitWeiAmount(); // revert if zero wei sent - firm will request nonzero amount for verification\r\n        (bool _signed, ) = firm.call{ value: address(this).balance }(\"\"); // send dust to firm address instead of accumulating in this contract, also sending any ETH accumulated from receive()\r\n        return(msg.value, _signed, bytes4(keccak256(bytes(_sig))));\r\n    }\r\n\r\n    receive() external payable {} // in case ETH is sent without data/without calling submitVerification\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SubmitWeiAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sig\",\"type\":\"string\"}],\"name\":\"submitVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AddressVerifier", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d820462dd24c587b05ca0cfcb169991422e02da24f4f328bc1cd708f49d627b"}]}