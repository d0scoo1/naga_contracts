{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tier/VerifyTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ReadOnlyTier.sol\\\";\\nimport \\\"../verify/libraries/VerifyConstants.sol\\\";\\nimport {State, Verify} from \\\"../verify/Verify.sol\\\";\\nimport \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title VerifyTier\\n///\\n/// @dev A contract that is `VerifyTier` expects to derive tiers from the time\\n/// the account was approved by the underlying `Verify` contract. The approval\\n/// block numbers defer to `State.since` returned from `Verify.state`.\\ncontract VerifyTier is ReadOnlyTier, Initializable {\\n    /// Result of initializing.\\n    /// @param sender `msg.sender` that initialized the contract.\\n    /// @param verify The `Verify` contract checked for reports.ww\\n    event Initialize(address sender, address verify);\\n    /// The contract to check to produce reports.\\n    Verify private verify;\\n\\n    /// Sets the `verify` contract.\\n    /// @param verify_ The contract to check to produce reports.\\n    function initialize(address verify_) external initializer {\\n        require(verify_ != address(0), \\\"0_ADDRESS\\\");\\n        verify = Verify(verify_);\\n        emit Initialize(msg.sender, verify_);\\n    }\\n\\n    /// Every tier will be the `State.since` block if `account_` is approved\\n    /// otherwise every tier will be uninitialized.\\n    /// @inheritdoc ITier\\n    function report(address account_) public view override returns (uint256) {\\n        State memory state_ = verify.state(account_);\\n        if (\\n            // This is comparing an enum variant so it must be equal.\\n            // slither-disable-next-line incorrect-equality\\n            verify.statusAtBlock(state_, block.number) ==\\n            VerifyConstants.STATUS_APPROVED\\n        ) {\\n            return\\n                TierReport.updateBlocksForTierRange(\\n                    TierConstants.NEVER_REPORT,\\n                    TierConstants.TIER_ZERO,\\n                    TierConstants.TIER_EIGHT,\\n                    state_.approvedSince\\n                );\\n        } else {\\n            return TierConstants.NEVER_REPORT;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/ReadOnlyTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"./ITier.sol\\\";\\nimport {TierReport} from \\\"./libraries/TierReport.sol\\\";\\n\\n/// @title ReadOnlyTier\\n/// @notice `ReadOnlyTier` is a base contract that other contracts\\n/// are expected to inherit.\\n///\\n/// It does not allow `setStatus` and expects `report` to derive from\\n/// some existing onchain data.\\n///\\n/// @dev A contract inheriting `ReadOnlyTier` cannot call `setTier`.\\n///\\n/// `ReadOnlyTier` is abstract because it does not implement `report`.\\n/// The expectation is that `report` will derive tiers from some\\n/// external data source.\\nabstract contract ReadOnlyTier is ITier {\\n    /// Always reverts because it is not possible to set a read only tier.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override {\\n        revert(\\\"SET_TIER\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/ITier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\n/// @title ITier\\n/// @notice `ITier` is a simple interface that contracts can\\n/// implement to provide membership lists for other contracts.\\n///\\n/// There are many use-cases for a time-preserving conditional membership list.\\n///\\n/// Some examples include:\\n///\\n/// - Self-serve whitelist to participate in fundraising\\n/// - Lists of users who can claim airdrops and perks\\n/// - Pooling resources with implied governance/reward tiers\\n/// - POAP style attendance proofs allowing access to future exclusive events\\n///\\n/// @dev Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing `ITier`:\\n/// - MUST represent held tiers as a `uint`.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has\\n///     been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at `1`; Tier `0` is implied if no tier has ever\\n///     been held.\\n///   - Tier `0` is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be\\n///     set if/when the tier is regained to the new block.\\n///   - If a tier is held but the historical block information is not available\\n///     the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\\n///     meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by\\n///     reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\\n///     if tier 0 is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\n///\\n/// So the four possible states and report values are:\\n/// - Tier is held and block is known: Block is in the report\\n/// - Tier is held but block is NOT known: `0` is in the report\\n/// - Tier is NOT held: `0xFF..` is in the report\\n/// - Tier is unknown: `0xFF..` is in the report\\ninterface ITier {\\n    /// Every time a tier changes we log start and end tier against the\\n    /// account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an\\n    /// external contract.\\n    /// The start tier MAY be lower than the current tier as at the block this\\n    /// event is emitted in.\\n    /// @param sender The `msg.sender` that authorized the tier change.\\n    /// @param account The account changing tier.\\n    /// @param startTier The previous tier the account held.\\n    /// @param endTier The newly acquired tier the account now holds.\\n    /// @param data The associated data for the tier change.\\n    event TierChange(\\n        address sender,\\n        address account,\\n        uint256 startTier,\\n        uint256 endTier,\\n        bytes data\\n    );\\n\\n    /// @notice Users can set their own tier by calling `setTier`.\\n    ///\\n    /// The contract that implements `ITier` is responsible for checking\\n    /// eligibility and/or taking actions required to set the tier.\\n    ///\\n    /// For example, the contract must take/refund any tokens relevant to\\n    /// changing the tier.\\n    ///\\n    /// Obviously the user is responsible for any approvals for this action\\n    /// prior to calling `setTier`.\\n    ///\\n    /// When the tier is changed a `TierChange` event will be emmited as:\\n    /// ```\\n    /// event TierChange(address account, uint startTier, uint endTier);\\n    /// ```\\n    ///\\n    /// The `setTier` function includes arbitrary data as the third\\n    /// parameter. This can be used to disambiguate in the case that\\n    /// there may be many possible options for a user to achieve some tier.\\n    ///\\n    /// For example, consider the case where tier 3 can be achieved\\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\\n    /// could use `data` to explicitly state their intent.\\n    ///\\n    /// NOTE however that _any_ address can call `setTier` for any other\\n    /// address.\\n    ///\\n    /// If you implement `data` or anything that changes state then be very\\n    /// careful to avoid griefing attacks.\\n    ///\\n    /// The `data` parameter can also be ignored by the contract implementing\\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\\n    /// approved by the user is relevant to a tier change.\\n    ///\\n    /// The `setTier` function SHOULD prevent users from reassigning\\n    /// tier 0 to themselves.\\n    ///\\n    /// The tier 0 status represents never having any status.\\n    /// @dev Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state\\n    /// changes required to set the tier. For example, taking/refunding\\n    /// funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive\\n    /// reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership\\n    /// (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        uint256 endTier,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice A tier report is a `uint256` that contains each of the block\\n    /// numbers each tier has been held continously since as a `uint32`.\\n    /// There are 9 possible tier, starting with tier 0 for `0` offset or\\n    /// \\\"never held any tier\\\" then working up through 8x 4 byte offsets to the\\n    /// full 256 bits.\\n    ///\\n    /// Low bits = Lower tier.\\n    ///\\n    /// In hexadecimal every 8 characters = one tier, starting at tier 8\\n    /// from high bits and working down to tier 1.\\n    ///\\n    /// `uint32` should be plenty for any blockchain that measures block times\\n    /// in seconds, but reconsider if deploying to an environment with\\n    /// significantly sub-second block times.\\n    ///\\n    /// ~135 years of 1 second blocks fit into `uint32`.\\n    ///\\n    /// `2^8 / (365 * 24 * 60 * 60)`\\n    ///\\n    /// When a user INCREASES their tier they keep all the block numbers they\\n    /// already had, and get new block times for each increased tiers they have\\n    /// earned.\\n    ///\\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\\n    /// for every tier level they remove, but keep their block numbers for the\\n    /// remaining tiers.\\n    ///\\n    /// GUIs are encouraged to make this dynamic very clear for users as\\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\\n    /// for block times.\\n    ///\\n    /// The intent is that downstream code can provide additional benefits for\\n    /// members who have maintained a certain tier for/since a long time.\\n    /// These benefits can be provided by inspecting the report, and by\\n    /// on-chain contracts directly,\\n    /// rather than needing to work with snapshots etc.\\n    /// @dev Returns the earliest block the account has held each tier for\\n    /// continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x\\n    /// concatenated uint32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost and\\n    /// never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tier/libraries/TierReport.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport {ITier} from \\\"../ITier.sol\\\";\\nimport \\\"./TierConstants.sol\\\";\\n\\n/// @title TierReport\\n/// @notice `TierReport` implements several pure functions that can be\\n/// used to interface with reports.\\n/// - `tierAtBlockFromReport`: Returns the highest status achieved relative to\\n/// a block number and report. Statuses gained after that block are ignored.\\n/// - `tierBlock`: Returns the block that a given tier has been held\\n/// since according to a report.\\n/// - `truncateTiersAbove`: Resets all the tiers above the reference tier.\\n/// - `updateBlocksForTierRange`: Updates a report with a block\\n/// number for every tier in a range.\\n/// - `updateReportWithTierAtBlock`: Updates a report to a new tier.\\n/// @dev Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this\\n/// factors that out.\\nlibrary TierReport {\\n    /// Enforce upper limit on tiers so we can do unchecked math.\\n    /// @param tier_ The tier to enforce bounds on.\\n    modifier maxTier(uint256 tier_) {\\n        require(tier_ <= TierConstants.MAX_TIER, \\\"MAX_TIER\\\");\\n        _;\\n    }\\n\\n    /// Returns the highest tier achieved relative to a block number\\n    /// and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract\\n    /// state, i.e. `block.number` but not always. Tiers gained after the\\n    /// reference block are ignored.\\n    ///\\n    /// When the `report` comes from a later block than the `blockNumber` this\\n    /// means the user must have held the tier continuously from `blockNumber`\\n    /// _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    ///\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` as per `report`.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < 8; i_++) {\\n                if (uint32(uint256(report_ >> (i_ * 32))) > blockNumber_) {\\n                    return i_;\\n                }\\n            }\\n            return TierConstants.MAX_TIER;\\n        }\\n    }\\n\\n    /// Returns the block that a given tier has been held since from a report.\\n    ///\\n    /// The report MUST encode \\\"never\\\" as 0xFFFFFFFF. This ensures\\n    /// compatibility with `tierAtBlockFromReport`.\\n    ///\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // ZERO is a special case. Everyone has always been at least ZERO,\\n            // since block 0.\\n            if (tier_ == 0) {\\n                return 0;\\n            }\\n\\n            uint256 offset_ = (tier_ - 1) * 32;\\n            return uint256(uint32(uint256(report_ >> offset_)));\\n        }\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, uint256 tier_)\\n        internal\\n        pure\\n        maxTier(tier_)\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            uint256 mask_ = (TierConstants.NEVER_REPORT >> offset_) << offset_;\\n            return report_ | mask_;\\n        }\\n    }\\n\\n    /// Updates a report with a block number for a given tier.\\n    /// More gas efficient than `updateBlocksForTierRange` if only a single\\n    /// tier is being modified.\\n    /// The tier at/above the given tier is updated. E.g. tier `0` will update\\n    /// the block for tier `1`.\\n    /// @param report_ Report to use as the baseline for the updated report.\\n    /// @param tier_ The tier level to update.\\n    /// @param blockNumber_ The new block number for `tier_`.\\n    function updateBlockAtTier(\\n        uint256 report_,\\n        uint256 tier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(tier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_ = tier_ * 32;\\n            return\\n                (report_ &\\n                    ~uint256(uint256(TierConstants.NEVER_TIER) << offset_)) |\\n                uint256(blockNumber_ << offset_);\\n        }\\n    }\\n\\n    /// Updates a report with a block number for every tier in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start tier.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier at the start of the range (exclusive).\\n    /// @param endTier_ The tier at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every tier in the\\n    /// range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure maxTier(endTier_) returns (uint256) {\\n        unchecked {\\n            uint256 offset_;\\n            for (uint256 i_ = startTier_; i_ < endTier_; i_++) {\\n                offset_ = i_ * 32;\\n                report_ =\\n                    (report_ &\\n                        ~uint256(\\n                            uint256(TierConstants.NEVER_TIER) << offset_\\n                        )) |\\n                    uint256(blockNumber_ << offset_);\\n            }\\n            return report_;\\n        }\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and\\n    /// `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the\\n    /// current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when\\n    /// calling this function and need to do other things in the calling scope\\n    /// with it.\\n    ///\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tier to start updating relative to. Data above\\n    /// this tier WILL BE LOST so probably should be the current tier.\\n    /// @param endTier_ The new highest tier held, at the given block number.\\n    /// @param blockNumber_ The block number to update the highest tier to, and\\n    /// intermediate tiers from `startTier_`.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        uint256 startTier_,\\n        uint256 endTier_,\\n        uint256 blockNumber_\\n    ) internal pure returns (uint256) {\\n        return\\n            endTier_ < startTier_\\n                ? truncateTiersAbove(report_, endTier_)\\n                : updateBlocksForTierRange(\\n                    report_,\\n                    startTier_,\\n                    endTier_,\\n                    blockNumber_\\n                );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/libraries/TierConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// @title TierConstants\\n/// @notice Constants for use with tier logic.\\nlibrary TierConstants {\\n    /// NEVER is 0xFF.. as it is infinitely in the future.\\n    /// NEVER for an entire report.\\n    uint256 internal constant NEVER_REPORT = type(uint256).max;\\n    /// NEVER for a single tier.\\n    uint32 internal constant NEVER_TIER = type(uint32).max;\\n\\n    /// Always is 0 as it is the genesis block.\\n    /// Tiers can't predate the chain but they can predate an `ITier` contract.\\n    uint256 internal constant ALWAYS = 0;\\n\\n    /// Account has never held a tier.\\n    uint256 internal constant TIER_ZERO = 0;\\n\\n    /// Magic number for tier one.\\n    uint256 internal constant TIER_ONE = 1;\\n    /// Magic number for tier two.\\n    uint256 internal constant TIER_TWO = 2;\\n    /// Magic number for tier three.\\n    uint256 internal constant TIER_THREE = 3;\\n    /// Magic number for tier four.\\n    uint256 internal constant TIER_FOUR = 4;\\n    /// Magic number for tier five.\\n    uint256 internal constant TIER_FIVE = 5;\\n    /// Magic number for tier six.\\n    uint256 internal constant TIER_SIX = 6;\\n    /// Magic number for tier seven.\\n    uint256 internal constant TIER_SEVEN = 7;\\n    /// Magic number for tier eight.\\n    uint256 internal constant TIER_EIGHT = 8;\\n    /// Maximum tier is `TIER_EIGHT`.\\n    uint256 internal constant MAX_TIER = TIER_EIGHT;\\n}\\n\"\r\n    },\r\n    \"contracts/verify/libraries/VerifyConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\n/// Summary statuses derived from a `State` by comparing the `Since` times\\n/// against a specific block number.\\nlibrary VerifyConstants {\\n    /// Account has not interacted with the system yet or was removed.\\n    uint256 internal constant STATUS_NIL = 0;\\n    /// Account has added evidence for themselves.\\n    uint256 internal constant STATUS_ADDED = 1;\\n    /// Approver has reviewed added/approve evidence and approved the account.\\n    uint256 internal constant STATUS_APPROVED = 2;\\n    /// Banner has reviewed a request to ban an account and banned it.\\n    uint256 internal constant STATUS_BANNED = 3;\\n}\\n\"\r\n    },\r\n    \"contracts/verify/Verify.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity =0.8.10;\\n\\nimport \\\"./IVerifyCallback.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libraries/VerifyConstants.sol\\\";\\n\\n/// Records the block a verify session reaches each status.\\n/// If a status is not reached it is left as UNINITIALIZED, i.e. 0xFFFFFFFF.\\n/// Most accounts will never be banned so most accounts will never reach every\\n/// status, which is a good thing.\\n/// @param addedSince Block the address was added else 0xFFFFFFFF.\\n/// @param approvedSince Block the address was approved else 0xFFFFFFFF.\\n/// @param bannedSince Block the address was banned else 0xFFFFFFFF.\\nstruct State {\\n    uint32 addedSince;\\n    uint32 approvedSince;\\n    uint32 bannedSince;\\n}\\n\\n/// Structure of arbitrary evidence to support any action taken.\\n/// Priviledged roles are expected to provide evidence just as applicants as an\\n/// audit trail will be preserved permanently in the logs.\\n/// @param account The account this evidence is relevant to.\\n/// @param data Arbitrary bytes representing evidence. MAY be e.g. a reference\\n/// to a sufficiently decentralised external system such as an IPFS hash.\\nstruct Evidence {\\n    address account;\\n    bytes data;\\n}\\n\\n/// Config to initialize a Verify contract with.\\n/// @param admin The address to ASSIGN ALL ADMIN ROLES to initially. This\\n/// address is free and encouraged to delegate fine grained permissions to\\n/// many other sub-admin addresses, then revoke it's own \\\"root\\\" access.\\n/// @param callback The address of the `IVerifyCallback` contract if it exists.\\n/// MAY be `address(0)` to signify that callbacks should NOT run.\\nstruct VerifyConfig {\\n    address admin;\\n    address callback;\\n}\\n\\n/// @title Verify\\n/// Trust-minimised contract to record the state of some verification process.\\n/// When some off-chain identity is to be reified on chain there is inherently\\n/// some multi-party, multi-faceted trust relationship. For example, the DID\\n/// (Decentralized Identifiers) specification from W3C outlines that the\\n/// controller and the subject of an identity are two different entities.\\n///\\n/// This is because self-identification is always problematic to the point of\\n/// being uselessly unbelievable.\\n///\\n/// For example, I can simply say \\\"I am the queen of England\\\" and what\\n/// onchain mechanism could possibly check, let alone stop me?\\n/// The same problem exists in any situation where some priviledge or right is\\n/// associated with identity. Consider passports, driver's licenses,\\n/// celebrity status, age, health, accredited investor, social media account,\\n/// etc. etc.\\n///\\n/// Typically crypto can't and doesn't want to deal with this issue. The usual\\n/// scenario is that some system demands personal information, which leads to:\\n///\\n/// - Data breaches that put individual's safety at risk. Consider the December\\n///   2020 leak from Ledger that dumped 270 000 home addresses and phone\\n///   numbers, and another million emails, of hardware wallet owners on a\\n///   public forum.\\n/// - Discriminatory access, undermining an individual's self-sovereign right\\n///   to run a full node, self-host a GUI and broadcast transactions onchain.\\n///   Consider the dydx airdrop of 2021 where metadata about a user's access\\n///   patterns logged on a server were used to deny access to presumed\\n///   Americans over regulatory fears.\\n/// - An entrenched supply chain of centralized actors from regulators, to\\n///   government databases, through KYC corporations, platforms, etc. each of\\n///   which holds an effective monopoly over, and ability to manipulate user's\\n///   \\\"own\\\" identity.\\n///\\n/// These examples and others are completely antithetical to and undermine the\\n/// safety of an opt-in, permissionless system based on pseudonomous actors\\n/// self-signing actions into a shared space.\\n///\\n/// That said, one can hardly expect a permissionless pseudonomous system\\n/// founded on asynchronous value transfers to succeed without at least some\\n/// concept of curation and reputation.\\n///\\n/// Anon, will you invest YOUR money in anon's project?\\n///\\n/// Clearly for every defi blue chip there are 10 000 scams and nothing onchain\\n/// can stop a scam, this MUST happen at the social layer.\\n///\\n/// Rain protocol is agnostic to how this verification happens. A government\\n/// regulator is going to want a government issued ID cross-referenced against\\n/// international sanctions. A fan of some social media influencer wants to\\n/// see a verified account on that platform. An open source software project\\n/// should show a github profile. A security token may need evidence from an\\n/// accountant showing accredited investor status. There are so many ways in\\n/// which BOTH sides of a fundraise may need to verify something about\\n/// themselves to each other via a THIRD PARTY that Rain cannot assume much.\\n///\\n/// The trust model and process for Rain verification is:\\n///\\n/// - There are many `Verify` contracts, each represents a specific\\n///   verification method with a (hopefully large) set of possible reviewers.\\n/// - The verifyee compiles some evidence that can be referenced in some\\n///   relevant system. It could be a session ID in a KYC provider's database or\\n///   a tweet from a verified account, etc. The evidence is passed to the\\n///   `Verify` contract as raw bytes so it is opaque onchain, but visible as an\\n///   event to verifiers.\\n/// - The verifyee calls `add` _for themselves_ to initialize their state and\\n///   emit the evidence for their account, after which they _cannot change_\\n///   their submission without appealing to someone who can remove. This costs\\n///   gas, so why don't we simply ask the user to sign something and have an\\n///   approver verify the signed data? Because we want to leverage both the\\n///   censorship resistance and asynchronous nature of the underlying\\n///   blockchain. Assuming there are N possible approvers, we want ANY 1 of\\n///   those N approvers to be able to review and approve an application. If the\\n///   user is forced to submit their application directly to one SPECIFIC\\n///   approver we lose this property. In the gasless model the user must then\\n///   rely on their specific approver both being online and not to censor the\\n///   request. It's also possible that many accounts add the same evidence,\\n///   after all it will be public in the event logs, so it is important for\\n///   approvers to verify the PAIRING between account and evidence.\\n/// - ANY account with the `APPROVER` role can review the evidence by\\n///   inspecting the event logs. IF the evidence is valid then the `approve`\\n///   function should be called by the approver. Approvers MAY also approve and\\n///   implicitly add any account atomically if the account did not previously\\n///   add itself.\\n/// - ANY account with the `BANNER` role can veto either an add OR a prior\\n///   approval. In the case of a false positive, i.e. where an account was\\n///   mistakenly approved, an appeal can be made to a banner to update the\\n///   status. Bad accounts SHOULD BE BANNED NOT REMOVED. When an account is\\n///   removed, its onchain state is once again open for the attacker to\\n///   resubmit new fraudulent evidence and potentially be reapproved.\\n///   Once an account is banned, any attempt by the account holder to change\\n///   their status, or an approver to approve will be rejected. Downstream\\n///   consumers of a `State` MUST check for an existing ban. Banners MAY ban\\n///   and implicity add any account atomically if the account did not\\n///   previously add itself.\\n///   - ANY account with the `REMOVER` role can scrub the `State` from an\\n///   account. Of course, this is a blockchain so the state changes are all\\n///   still visible to full nodes and indexers in historical data, in both the\\n///   onchain history and the event logs for each state change. This allows an\\n///   account to appeal to a remover in the case of a MISTAKEN BAN or also in\\n///   the case of a MISTAKEN ADD (e.g. mistake in evidence), effecting a\\n///   \\\"hard reset\\\" at the contract storage level.\\n///\\n/// Banning some account with an invalid session is NOT required. It is\\n/// harmless for an added session to remain as `Status.Added` indefinitely.\\n/// For as long as no approver decides to approve some invalid added session it\\n/// MUST be treated as equivalent to a ban by downstream contracts. This is\\n/// important so that admins are only required to spend gas on useful actions.\\n///\\n/// In addition to `Approve`, `Ban`, `Remove` there are corresponding events\\n/// `RequestApprove`, `RequestBan`, `RequestRemove` that allow for admins to be\\n/// notified that some new evidence must be considered that may lead to each\\n/// action. `RequestApprove` is automatically submitted as part of the `add`\\n/// call, but `RequestBan` and `RequestRemove` must be manually called\\n///\\n/// Rain uses standard Open Zeppelin `AccessControl` and is agnostic to how the\\n/// approver/remover/banner roles and associated admin roles are managed.\\n/// Ideally the more credibly neutral qualified parties assigend to each role\\n/// for each `Verify` contract the better. This improves the censorship\\n/// resistance of the verification process and the responsiveness of the\\n/// end-user experience.\\n///\\n/// Ideally the admin account assigned at deployment would renounce their admin\\n/// rights after establishing a more granular and appropriate set of accounts\\n/// with each specific role.\\n///\\n/// There is no requirement that any of the priviledged accounts with roles are\\n/// a single-key EOA, they may be multisig accounts or even a DAO with formal\\n/// governance processes mediated by a smart contract.\\n///\\n/// Every action emits an associated event and optionally calls an onchain\\n/// callback on a `IVerifyCallback` contract set during initialize. As each\\n/// action my be performed in bulk dupes are not rolled back, instead the\\n/// events are emitted for every time the action is called and the callbacks\\n/// and onchain state changes are deduped. For example, an approve may be\\n/// called twice for a single account, but by different approvers, potentially\\n/// submitting different evidence for each approval. In this case the block of\\n/// the first approve will be used and the onchain callback will be called for\\n/// the first transaction only, but BOTH approvals will emit an event. This\\n/// logic is applied per-account, per-action across a batch of evidences.\\ncontract Verify is AccessControl, Initializable {\\n    /// Any state never held is UNINITIALIZED.\\n    /// Note that as per default evm an unset state is 0 so always check the\\n    /// `addedSince` block on a `State` before trusting an equality check on\\n    /// any other block number.\\n    /// (i.e. removed or never added)\\n    uint32 private constant UNINITIALIZED = type(uint32).max;\\n\\n    /// Emitted when the `Verify` contract is initialized.\\n    event Initialize(address sender, VerifyConfig config);\\n\\n    /// Emitted when evidence is first submitted to approve an account.\\n    /// The requestor is always the `msg.sender` of the user calling `add`.\\n    /// @param sender The `msg.sender` that submitted its own evidence.\\n    /// @param evidence The evidence to support an approval.\\n    /// NOT written to contract storage.\\n    event RequestApprove(address sender, Evidence evidence);\\n    /// Emitted when a previously added account is approved.\\n    /// @param sender The `msg.sender` that approved `account`.\\n    /// @param evidence The approval data.\\n    event Approve(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be banned.\\n    /// The requestor is expected to provide supporting data for the ban.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a ban of `account`.\\n    /// @param evidence Account + data the `requestor` feels will strengthen\\n    /// its case for the ban. NOT written to contract storage.\\n    event RequestBan(address sender, Evidence evidence);\\n    /// Emitted when an added or approved account is banned.\\n    /// @param sender The `msg.sender` that banned `account`.\\n    /// @param evidence Account + the evidence to support a ban.\\n    /// NOT written to contract storage.\\n    event Ban(address sender, Evidence evidence);\\n\\n    /// Currently approved accounts can request that any account be removed.\\n    /// The requestor is expected to provide supporting data for the removal.\\n    /// The requestor MAY themselves be banned if vexatious.\\n    /// @param sender The `msg.sender` requesting a removal of `account`.\\n    /// @param evidence `Evidence` to justify a removal.\\n    event RequestRemove(address sender, Evidence evidence);\\n    /// Emitted when an account is scrubbed from blockchain state.\\n    /// Historical logs still visible offchain of course.\\n    /// @param sender The `msg.sender` that removed `account`.\\n    /// @param evidence `Evidence` to justify the removal.\\n    event Remove(address sender, Evidence evidence);\\n\\n    /// Admin role for `APPROVER`.\\n    bytes32 public constant APPROVER_ADMIN = keccak256(\\\"APPROVER_ADMIN\\\");\\n    /// Role for `APPROVER`.\\n    bytes32 public constant APPROVER = keccak256(\\\"APPROVER\\\");\\n\\n    /// Admin role for `REMOVER`.\\n    bytes32 public constant REMOVER_ADMIN = keccak256(\\\"REMOVER_ADMIN\\\");\\n    /// Role for `REMOVER`.\\n    bytes32 public constant REMOVER = keccak256(\\\"REMOVER\\\");\\n\\n    /// Admin role for `BANNER`.\\n    bytes32 public constant BANNER_ADMIN = keccak256(\\\"BANNER_ADMIN\\\");\\n    /// Role for `BANNER`.\\n    bytes32 public constant BANNER = keccak256(\\\"BANNER\\\");\\n\\n    /// Account => State\\n    mapping(address => State) private states;\\n\\n    /// Optional IVerifyCallback contract.\\n    /// MAY be address 0.\\n    IVerifyCallback public callback;\\n\\n    /// Initializes the `Verify` contract e.g. as cloned by a factory.\\n    /// @param config_ The config required to initialize the contract.\\n    function initialize(VerifyConfig calldata config_) external initializer {\\n        require(config_.admin != address(0), \\\"0_ACCOUNT\\\");\\n\\n        // `APPROVER_ADMIN` can admin each other in addition to\\n        // `APPROVER` addresses underneath.\\n        _setRoleAdmin(APPROVER_ADMIN, APPROVER_ADMIN);\\n        _setRoleAdmin(APPROVER, APPROVER_ADMIN);\\n\\n        // `REMOVER_ADMIN` can admin each other in addition to\\n        // `REMOVER` addresses underneath.\\n        _setRoleAdmin(REMOVER_ADMIN, REMOVER_ADMIN);\\n        _setRoleAdmin(REMOVER, REMOVER_ADMIN);\\n\\n        // `BANNER_ADMIN` can admin each other in addition to\\n        // `BANNER` addresses underneath.\\n        _setRoleAdmin(BANNER_ADMIN, BANNER_ADMIN);\\n        _setRoleAdmin(BANNER, BANNER_ADMIN);\\n\\n        // It is STRONGLY RECOMMENDED that the `admin_` delegates specific\\n        // admin roles then revokes the `X_ADMIN` roles. From themselves.\\n        // It is ALSO RECOMMENDED that each of the sub-`X_ADMIN` roles revokes\\n        // their admin rights once sufficient approvers/removers/banners have\\n        // been assigned, if possible. Admins can instantly/atomically assign\\n        // and revoke admin priviledges from each other, so a compromised key\\n        // can irreperably damage a `Verify` contract instance.\\n        _grantRole(APPROVER_ADMIN, config_.admin);\\n        _grantRole(REMOVER_ADMIN, config_.admin);\\n        _grantRole(BANNER_ADMIN, config_.admin);\\n\\n        callback = IVerifyCallback(config_.callback);\\n\\n        emit Initialize(msg.sender, config_);\\n    }\\n\\n    function _updateEvidenceRef(\\n        uint256[] memory refs_,\\n        Evidence memory evidence_,\\n        uint256 refsIndex_\\n    ) private pure {\\n        uint256 ptr_;\\n        assembly {\\n            ptr_ := evidence_\\n        }\\n        refs_[refsIndex_] = ptr_;\\n    }\\n\\n    function _resizeRefs(uint256[] memory refs_, uint256 newLength_)\\n        private\\n        pure\\n    {\\n        require(newLength_ <= refs_.length, \\\"BAD_RESIZE\\\");\\n        assembly {\\n            mstore(refs_, newLength_)\\n        }\\n    }\\n\\n    function _refsAsEvidences(uint256[] memory refs_)\\n        private\\n        pure\\n        returns (Evidence[] memory)\\n    {\\n        Evidence[] memory evidences_;\\n        assembly {\\n            evidences_ := refs_\\n        }\\n        return evidences_;\\n    }\\n\\n    /// Typed accessor into states.\\n    /// @param account_ The account to return the current `State` for.\\n    function state(address account_) external view returns (State memory) {\\n        return states[account_];\\n    }\\n\\n    /// Derives a single `Status` from a `State` and a reference block number.\\n    /// @param state_ The raw `State` to reduce into a `Status`.\\n    /// @param blockNumber_ The block number to compare `State` against.\\n    function statusAtBlock(State memory state_, uint256 blockNumber_)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // The state hasn't even been added so is picking up block zero as the\\n        // evm fallback value. In this case if we checked other blocks using\\n        // a `<=` equality they would incorrectly return `true` always due to\\n        // also having a `0` fallback value.\\n        // Using `< 1` here to silence slither.\\n        if (state_.addedSince < 1) {\\n            return VerifyConstants.STATUS_NIL;\\n        }\\n        // Banned takes priority over everything.\\n        else if (state_.bannedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_BANNED;\\n        }\\n        // Approved takes priority over added.\\n        else if (state_.approvedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_APPROVED;\\n        }\\n        // Added is lowest priority.\\n        else if (state_.addedSince <= blockNumber_) {\\n            return VerifyConstants.STATUS_ADDED;\\n        }\\n        // The `addedSince` block is after `blockNumber_` so `Status` is nil\\n        // relative to `blockNumber_`.\\n        else {\\n            return VerifyConstants.STATUS_NIL;\\n        }\\n    }\\n\\n    /// Requires that `msg.sender` is approved as at the current block.\\n    modifier onlyApproved() {\\n        require(\\n            statusAtBlock(states[msg.sender], block.number) ==\\n                VerifyConstants.STATUS_APPROVED,\\n            \\\"ONLY_APPROVED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Builds a new `State` for use by `add` and `approve`.\\n    function newState() private view returns (State memory) {\\n        return State(uint32(block.number), UNINITIALIZED, UNINITIALIZED);\\n    }\\n\\n    /// An account adds their own verification evidence.\\n    /// Internally `msg.sender` is used; delegated `add` is not supported.\\n    /// @param data_ The evidence to support approving the `msg.sender`.\\n    function add(bytes calldata data_) external {\\n        State memory state_ = states[msg.sender];\\n        uint256 currentStatus_ = statusAtBlock(state_, block.number);\\n        require(\\n            currentStatus_ != VerifyConstants.STATUS_APPROVED &&\\n                currentStatus_ != VerifyConstants.STATUS_BANNED,\\n            \\\"ALREADY_EXISTS\\\"\\n        );\\n        // An account that hasn't already been added need a new state.\\n        // If an account has already been added but not approved or banned\\n        // they can emit many `RequestApprove` events without changing\\n        // their state. This facilitates multi-step workflows for the KYC\\n        // provider, e.g. to implement a commit+reveal scheme or simply\\n        // request additional evidence from the applicant before final\\n        // verdict.\\n        if (currentStatus_ == VerifyConstants.STATUS_NIL) {\\n            states[msg.sender] = newState();\\n        }\\n        Evidence memory evidence_ = Evidence(msg.sender, data_);\\n        emit RequestApprove(msg.sender, evidence_);\\n\\n        // Call the `afterAdd_` hook to allow inheriting contracts to enforce\\n        // requirements.\\n        // The inheriting contract MUST `require` or otherwise enforce its\\n        // needs to rollback a bad add.\\n        IVerifyCallback callback_ = callback;\\n        if (address(callback_) != address(0)) {\\n            Evidence[] memory evidences_ = new Evidence[](1);\\n            evidences_[0] = evidence_;\\n            callback_.afterAdd(msg.sender, evidences_);\\n        }\\n    }\\n\\n    /// An `APPROVER` can review added evidence and approve accounts.\\n    /// Typically many approvals would be submitted in a single call which is\\n    /// more convenient and gas efficient than sending individual transactions\\n    /// for every approval. However, as there are many individual agents\\n    /// acting concurrently and independently this requires that the approval\\n    /// process be infallible so that no individual approval can rollback the\\n    /// entire batch due to the actions of some other approver/banner. It is\\n    /// possible to approve an already approved or banned account. The\\n    /// `Approve` event will always emit but the approved block will only be\\n    /// set if it was previously uninitialized. A banned account will always\\n    /// be seen as banned when calling `statusAtBlock` regardless of the\\n    /// approval block, even if the approval is more recent than the ban. The\\n    /// only way to reset a ban is to remove and reapprove the account.\\n    /// @param evidences_ All evidence for all approvals.\\n    function approve(Evidence[] memory evidences_) external onlyRole(APPROVER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory addedRefs_ = new uint256[](evidences_.length);\\n            uint256[] memory approvedRefs_ = new uint256[](evidences_.length);\\n            uint256 additions_ = 0;\\n            uint256 approvals_ = 0;\\n\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidence_.account];\\n                // If the account hasn't been added an approver can still add\\n                // and approve it on their behalf.\\n                if (state_.addedSince < 1) {\\n                    state_ = newState();\\n\\n                    _updateEvidenceRef(addedRefs_, evidence_, additions_);\\n                    additions_++;\\n                }\\n                // If the account hasn't been approved we approve it. As there\\n                // are many approvers operating independently and concurrently\\n                // we do NOT `require` the approval be unique, but we also do\\n                // NOT change the block as the oldest approval is most\\n                // important. However we emit an event for every approval even\\n                // if the state does not change.\\n                // It is possible to approve a banned account but\\n                // `statusAtBlock` will ignore the approval time for any banned\\n                // account and use the banned block only.\\n                if (state_.approvedSince == UNINITIALIZED) {\\n                    state_.approvedSince = uint32(block.number);\\n                    states[evidence_.account] = state_;\\n\\n                    _updateEvidenceRef(approvedRefs_, evidence_, approvals_);\\n                    approvals_++;\\n                }\\n\\n                // Always emit an `Approve` event even if we didn't write to\\n                // storage. This ensures that supporting evidence hits the logs\\n                // for offchain review.\\n                emit Approve(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (additions_ > 0) {\\n                    _resizeRefs(addedRefs_, additions_);\\n                    callback_.afterAdd(\\n                        msg.sender,\\n                        _refsAsEvidences(addedRefs_)\\n                    );\\n                }\\n                if (approvals_ > 0) {\\n                    _resizeRefs(approvedRefs_, approvals_);\\n                    callback_.afterApprove(\\n                        msg.sender,\\n                        _refsAsEvidences(approvedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be approved.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request approvals for.\\n    function requestApprove(Evidence[] calldata evidences_)\\n        external\\n        onlyApproved\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestApprove(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n\\n    /// A `BANNER` can ban an added OR approved account.\\n    /// @param evidences_ All evidence appropriate for all bans.\\n    function ban(Evidence[] calldata evidences_) external onlyRole(BANNER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory addedRefs_ = new uint256[](evidences_.length);\\n            uint256[] memory bannedRefs_ = new uint256[](evidences_.length);\\n            uint256 additions_ = 0;\\n            uint256 bans_ = 0;\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidence_.account];\\n\\n                // There is no requirement that an account be formerly added\\n                // before it is banned. For example some fraud may be detected\\n                // in an affiliated `Verify` contract and the evidence can be\\n                // used to ban the same address in the current contract. In\\n                // this case the account will be added and banned in this call.\\n                if (state_.addedSince < 1) {\\n                    state_ = newState();\\n\\n                    _updateEvidenceRef(addedRefs_, evidence_, additions_);\\n                    additions_++;\\n                }\\n                // Respect prior bans by leaving onchain storage as-is.\\n                if (state_.bannedSince == UNINITIALIZED) {\\n                    state_.bannedSince = uint32(block.number);\\n                    states[evidence_.account] = state_;\\n\\n                    _updateEvidenceRef(bannedRefs_, evidence_, bans_);\\n                    bans_++;\\n                }\\n\\n                // Always emit a `Ban` event even if we didn't write state. This\\n                // ensures that supporting evidence hits the logs for offchain\\n                // review.\\n                emit Ban(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (additions_ > 0) {\\n                    _resizeRefs(addedRefs_, additions_);\\n                    callback_.afterAdd(\\n                        msg.sender,\\n                        _refsAsEvidences(addedRefs_)\\n                    );\\n                }\\n                if (bans_ > 0) {\\n                    _resizeRefs(bannedRefs_, bans_);\\n                    callback_.afterBan(\\n                        msg.sender,\\n                        _refsAsEvidences(bannedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be banned.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request banning for.\\n    function requestBan(Evidence[] calldata evidences_) external onlyApproved {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestBan(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n\\n    /// A `REMOVER` can scrub state mapping from an account.\\n    /// A malicious account MUST be banned rather than removed.\\n    /// Removal is useful to reset the whole process in case of some mistake.\\n    /// @param evidences_ All evidence to suppor the removal.\\n    function remove(Evidence[] memory evidences_) external onlyRole(REMOVER) {\\n        unchecked {\\n            State memory state_;\\n            uint256[] memory removedRefs_ = new uint256[](evidences_.length);\\n            uint256 removals_ = 0;\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                Evidence memory evidence_ = evidences_[i_];\\n                state_ = states[evidences_[i_].account];\\n                if (state_.addedSince > 0) {\\n                    delete (states[evidence_.account]);\\n                    _updateEvidenceRef(removedRefs_, evidence_, removals_);\\n                    removals_++;\\n                }\\n                emit Remove(msg.sender, evidence_);\\n            }\\n            IVerifyCallback callback_ = callback;\\n            if (address(callback_) != address(0)) {\\n                if (removals_ > 0) {\\n                    _resizeRefs(removedRefs_, removals_);\\n                    callback_.afterRemove(\\n                        msg.sender,\\n                        _refsAsEvidences(removedRefs_)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Any approved address can request some address be removed.\\n    /// Frivolous requestors SHOULD expect to find themselves banned.\\n    /// @param evidences_ Array of evidences to request removal of.\\n    function requestRemove(Evidence[] calldata evidences_)\\n        external\\n        onlyApproved\\n    {\\n        unchecked {\\n            for (uint256 i_ = 0; i_ < evidences_.length; i_++) {\\n                emit RequestRemove(msg.sender, evidences_[i_]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/verify/IVerifyCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity ^0.8.0;\\n\\nimport {Evidence} from \\\"./Verify.sol\\\";\\n\\n/// Deployers of `Verify` contracts (e.g. via `VerifyFactory`) may want to\\n/// apply additional processing and/or restrictions to each of the basic\\n/// verification actions. Examples may be reading from onchain state or\\n/// requiring token transfers to complete before allowing an add/approve to\\n/// complete successfully. The reason this is an interface rather than\\n/// implementors extending `Verify` directly is that it allows for more\\n/// implementations to sit under a single `VerifyFactory` which in turn allows\\n/// a more readily composed ecosystem of verified accounts.\\n///\\n/// There's no reentrancy concerns for external calls from the `Verify`\\n/// contract to the `IVerifyCallback` contract because:\\n/// - All the callbacks happen after state changes in `Verify`\\n/// - All `Verify` actions are bound to the authority of the `msg.sender`\\n/// The `IVerifyCallback` contract can and should rollback transactions if\\n/// their restrictions/processing requirements are not met, but otherwise have\\n/// no more authority over the `Verify` state than anon users.\\n///\\n/// The security model for platforms consuming `Verify` contracts is that they\\n/// should index or otherwise filter children from the `VerifyFactory` down to\\n/// those that also set a supported `IVerifyCallback` contract. The factory is\\n/// completely agnostic to callback concerns and doesn't even require that a\\n/// callback contract be set at all.\\ninterface IVerifyCallback {\\n    /// Additional processing after a batch of additions.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param adder_ The `msg.sender` that authorized the additions.\\n    /// MAY be the addee without any specific role.\\n    /// @param evidences_ All evidences associated with the additions.\\n    function afterAdd(address adder_, Evidence[] calldata evidences_) external;\\n\\n    /// Additional processing after a batch of approvals.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param approver_ The `msg.sender` that authorized the approvals.\\n    /// @param evidences_ All evidences associated with the approvals.\\n    function afterApprove(address approver_, Evidence[] calldata evidences_)\\n        external;\\n\\n    /// Additional processing after a batch of bannings.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param banner_ The `msg.sender` that authorized the bannings.\\n    /// @param evidences_ All evidences associated with the bannings.\\n    function afterBan(address banner_, Evidence[] calldata evidences_) external;\\n\\n    /// Additional processing after a batch of removals.\\n    /// SHOULD revert/rollback transactions if processing fails.\\n    /// @param remover_ The `msg.sender` that authorized the removals.\\n    /// @param evidences_ All evidences associated with the removals.\\n    function afterRemove(address remover_, Evidence[] calldata evidences_)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verify\",\"type\":\"address\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verify_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "VerifyTier", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://113bff9ac919f55f19b525dc42e478a9a92d8bc1bea59c6275bcccfcad2756ec"}]}