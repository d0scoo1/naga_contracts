{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/basic/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./helpers.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\ncontract Rebalancer is InstaFlashReceiver {\\n    constructor(\\n        address _flashloan,\\n        address _oneInchRouter,\\n        address _uniswapV3Router,\\n        address _nftManagerAddress\\n    )\\n        InstaFlashReceiver(\\n            _flashloan,\\n            _oneInchRouter,\\n            _uniswapV3Router,\\n            _nftManagerAddress\\n        )\\n    {}\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        bool simulate;\\n        uint256 tokenId;\\n        uint256 route;\\n        address owner;\\n        uint256[] memory _amount;\\n        address[] memory _tokens;\\n        bytes memory _callData;\\n        MintParams memory params;\\n        (\\n            simulate,\\n            tokenId,\\n            route,\\n            owner,\\n            _amount,\\n            _tokens,\\n            _callData,\\n            params\\n        ) = abi.decode(\\n            data,\\n            (\\n                bool,\\n                uint256,\\n                uint256,\\n                address,\\n                uint256[],\\n                address[],\\n                bytes,\\n                MintParams\\n            )\\n        );\\n\\n        this.basicRebalancer(\\n            simulate,\\n            tokenId,\\n            route,\\n            owner,\\n            _amount,\\n            _tokens,\\n            _callData,\\n            params\\n        );\\n\\n        return 0x150b7a02;\\n    }\\n\\n    function basicRebalancer(\\n        bool simulate,\\n        uint256 tokenId,\\n        uint256 route,\\n        address owner,\\n        uint256[] memory _amount,\\n        address[] memory _tokens,\\n        bytes memory _callData,\\n        MintParams memory params\\n    ) public {\\n        bytes memory callData = abi.encode(\\n            simulate,\\n            tokenId,\\n            owner,\\n            _callData,\\n            params\\n        );\\n\\n        this.flashBorrow(_tokens, _amount, route, callData);\\n    }\\n}\\n\\ncontract InstaBasicRebalancer is Rebalancer {\\n    constructor(\\n        address _flashloan,\\n        address _oneInchRouter,\\n        address _uniswapV3Router,\\n        address _nftManagerAddress\\n    )\\n        Rebalancer(\\n            _flashloan,\\n            _oneInchRouter,\\n            _uniswapV3Router,\\n            _nftManagerAddress\\n        )\\n    {}\\n\\n    string public name = \\\"InstaBasicRebalancer-v1.0\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/basic/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interface.sol\\\";\\n\\ncontract InstaFlashReceiver {\\n    using SafeERC20 for IERC20;\\n    address chainToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address oneInchRouter_;\\n    address uniswapV3Router_;\\n    address nftManagerAddress_;\\n\\n    IFlashLoan internal immutable flashloan;\\n    NonfungiblePositionManager internal nftManager;\\n\\n    MintParams internal param;\\n\\n    error flashloanRevert(bool zeroForOne, uint256 amount);\\n\\n    struct nftParam {\\n        uint256 loan0;\\n        uint256 loan1;\\n        uint256 fee0;\\n        uint256 fee1;\\n        uint256 tokenId;\\n        bytes _callData;\\n    }\\n\\n    constructor(\\n        address _flashloan,\\n        address _oneInchRouter,\\n        address _uniswapV3Router,\\n        address _nftManagerAddress\\n    ) {\\n        oneInchRouter_ = _oneInchRouter;\\n        uniswapV3Router_ = _uniswapV3Router;\\n        nftManagerAddress_ = _nftManagerAddress;\\n        flashloan = IFlashLoan(_flashloan);\\n        nftManager = NonfungiblePositionManager(nftManagerAddress_);\\n    }\\n\\n    function flashBorrow(\\n        address[] memory _tokens,\\n        uint256[] memory _amts,\\n        uint256 _route,\\n        bytes memory _data\\n    ) public {\\n        bytes memory instaData;\\n        flashloan.flashLoan(_tokens, _amts, _route, _data, instaData);\\n    }\\n\\n    function executeOperation(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool) {\\n        nftParam memory args;\\n        bool simulate;\\n        address owner;\\n        (args.loan0, args.loan1) = (amounts[0], amounts[1]);\\n        (args.fee0, args.fee1) = (premiums[0], premiums[1]);\\n\\n        (simulate, args.tokenId, owner, args._callData, param) = abi.decode(\\n            params,\\n            (bool, uint256, address, bytes, MintParams)\\n        );\\n\\n        _approve(param.token0, param.amount0Desired, nftManagerAddress_);\\n        _approve(param.token1, param.amount1Desired, nftManagerAddress_);\\n\\n        uint256 oldTokenId = args.tokenId;\\n        (uint256 newTokenId, uint128 liquidityX, , ) = nftManager.mint(param);\\n\\n        (, , , , uint24 fee, , , uint128 liquidity, , , , ) = nftManager\\n            .positions(oldTokenId);\\n\\n        _decreaseLiquidity(oldTokenId, liquidity);\\n        _collect(oldTokenId);\\n\\n        uint256 totalFee0 = args.loan0 + args.fee0;\\n        uint256 totalFee1 = args.loan1 + args.fee1;\\n\\n        if (simulate) {\\n            _simulateSwapWithOneInch(\\n                args._callData,\\n                totalFee0,\\n                totalFee1,\\n                param.token0,\\n                param.token1\\n            );\\n        }\\n        bool success = _swapWithOneInch(\\n            args._callData,\\n            totalFee0,\\n            totalFee1,\\n            param.token0,\\n            param.token1\\n        );\\n\\n        if (!success) {\\n            //To swap using uniswap v3 pool:\\n            _swapWithUniswap(\\n                totalFee0,\\n                totalFee1,\\n                param.token0,\\n                param.token1,\\n                fee\\n            );\\n        }\\n\\n        _repay(param.token0, _balance(param.token0), owner);\\n        _repay(param.token1, _balance(param.token1), owner);\\n    }\\n\\n    function _swapWithOneInch(\\n        bytes memory _callData,\\n        uint256 totalFee0,\\n        uint256 totalFee1,\\n        address token0,\\n        address token1\\n    ) internal returns (bool success) {\\n        (uint256 amount0, uint256 amount1) = (\\n            _balance(token0),\\n            _balance(token1)\\n        );\\n        if (amount0 > totalFee0) {\\n            _approve(token0, amount0 - totalFee0, oneInchRouter_);\\n        } else if (amount1 > totalFee1) {\\n            _approve(token1, amount1 - totalFee1, oneInchRouter_);\\n        }\\n        (success, ) = address(oneInchRouter_).call(_callData);\\n\\n        if (success) {\\n            _repay(token0, totalFee0, address(flashloan));\\n            _repay(token1, totalFee1, address(flashloan));\\n        }\\n    }\\n\\n    function _simulateSwapWithOneInch(\\n        bytes memory _callData,\\n        uint256 totalFee0,\\n        uint256 totalFee1,\\n        address token0,\\n        address token1\\n    ) internal view returns (bool success) {\\n        bool zeroForOne;\\n        uint256 amount;\\n        (uint256 amount0, uint256 amount1) = (\\n            _balance(token0),\\n            _balance(token1)\\n        );\\n\\n        if (amount0 > totalFee0) {\\n            zeroForOne = true;\\n            amount = amount0 - totalFee0;\\n        } else {\\n            zeroForOne = false;\\n            amount = amount1 - totalFee1;\\n        }\\n        revert flashloanRevert({zeroForOne: zeroForOne, amount: amount});\\n    }\\n\\n    function _swapWithUniswap(\\n        uint256 totalFee0,\\n        uint256 totalFee1,\\n        address token0,\\n        address token1,\\n        uint24 fee\\n    ) internal {\\n        uint256 amt;\\n        IUniswapV2Router routerv2 = IUniswapV2Router(uniswapV3Router_);\\n        (uint256 amount0, uint256 amount1) = (\\n            _balance(token0),\\n            _balance(token1)\\n        );\\n\\n        if (amount0 > totalFee0) {\\n            amt = amount0 - totalFee0;\\n            _approve(token0, amt, uniswapV3Router_);\\n\\n            ExactInputSingleParams memory singleParam = ExactInputSingleParams(\\n                token0,\\n                token1,\\n                fee,\\n                address(this),\\n                amt,\\n                0,\\n                0\\n            );\\n            routerv2.exactInputSingle(singleParam);\\n        } else {\\n            amt = amount1 - totalFee1;\\n            _approve(token1, amt, uniswapV3Router_);\\n\\n            ExactInputSingleParams memory singleParam = ExactInputSingleParams(\\n                token1,\\n                token0,\\n                fee,\\n                address(this),\\n                amt,\\n                0,\\n                0\\n            );\\n\\n            routerv2.exactInputSingle(singleParam);\\n        }\\n        _repay(token1, totalFee1, address(flashloan));\\n        _repay(token0, totalFee0, address(flashloan));\\n    }\\n\\n    function _approve(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        IERC20(token).approve(recipient, amount);\\n    }\\n\\n    function _repay(\\n        address token,\\n        uint256 amount,\\n        address recepient\\n    ) internal {\\n        require(_balance(token) >= amount, \\\"Repay failed!\\\");\\n        IERC20(token).safeTransfer(recepient, amount);\\n    }\\n\\n    function _collect(uint256 oldTokenId)\\n        public\\n        payable\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        CollectParams memory collectParam = CollectParams(\\n            oldTokenId,\\n            address(this),\\n            type(uint128).max,\\n            type(uint128).max\\n        );\\n\\n        (amount0, amount1) = nftManager.collect(collectParam);\\n    }\\n\\n    function _decreaseLiquidity(uint256 oldTokenId, uint128 liquidity)\\n        public\\n        payable\\n    {\\n        DecreaseLiquidityParams memory decreaseParam = DecreaseLiquidityParams(\\n            oldTokenId,\\n            liquidity,\\n            0,\\n            0,\\n            block.timestamp + 1\\n        );\\n\\n        nftManager.decreaseLiquidity(decreaseParam);\\n    }\\n\\n    function _balance(address token) internal view returns (uint256 balance) {\\n        balance = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/basic/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nstruct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n}\\n\\nstruct DecreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n}\\n\\nstruct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n}\\n\\nstruct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n}\\n\\ninterface IFlashLoan {\\n    function flashLoan(\\n        address[] memory tokens_,\\n        uint256[] memory amts_,\\n        uint256 route,\\n        bytes calldata data_,\\n        bytes calldata instaData_\\n    ) external;\\n}\\n\\ninterface NonfungiblePositionManager {\\n    function mint(MintParams calldata params)\\n        external\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function collect(CollectParams calldata params)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashloan\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInchRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashloanRevert\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"}],\"name\":\"_collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"_decreaseLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"simulate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"basicRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InstaBasicRebalancer", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000619ad2d02dbee6eba3cdbda3f98430410e8928820000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}