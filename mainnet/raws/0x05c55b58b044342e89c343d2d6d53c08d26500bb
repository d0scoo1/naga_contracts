{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2020-09-09\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IComp {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IGovernorAlpha {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, bool support) external;\r\n}\r\n\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice COMP token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorAlpha` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param comp_ `COMP` token contract address\r\n    * @param governor_ Compound protocol `GovernorAlpha` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address comp_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Compound contracts data\r\n        comp = comp_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IComp(comp_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IGovernorAlpha(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n\r\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\r\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\r\n\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        IGovernorAlpha(governor).castVote(govProposalId, true);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}\r\n\r\n\r\ncontract CrowdProposalFactory {\r\n    /// @notice `COMP` token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorAlpha` contract address\r\n    address public immutable governor;\r\n    /// @notice Minimum Comp tokens required to create a crowd proposal\r\n    uint public immutable compStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n     /**\r\n     * @notice Construct a proposal factory for crowd proposals\r\n     * @param comp_ `COMP` token contract address\r\n     * @param governor_ Compound protocol `GovernorAlpha` contract address\r\n     * @param compStakeAmount_ The minimum amount of Comp tokes required for creation of a crowd proposal\r\n     */\r\n    constructor(address comp_,\r\n                address governor_,\r\n                uint compStakeAmount_) public {\r\n        comp = comp_;\r\n        governor = governor_;\r\n        compStakeAmount = compStakeAmount_;\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new crowd proposal\r\n    * @notice Call `Comp.approve(factory_address, compStakeAmount)` before calling this method\r\n    * @param targets The ordered list of target addresses for calls to be made\r\n    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures The ordered list of function signatures to be called\r\n    * @param calldatas The ordered list of calldata to be passed to each call\r\n    * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n    */\r\n    function createCrowdProposal(address[] memory targets,\r\n                                 uint[] memory values,\r\n                                 string[] memory signatures,\r\n                                 bytes[] memory calldatas,\r\n                                 string memory description) external {\r\n        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, comp, governor);\r\n        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n        // Stake COMP and force proposal to delegate votes to itself\r\n        IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009b68c14e936104e9a7a24c712beecdc220002984000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c0da01a04c3f3e0be433606045bb7017a7323e3800000000000000000000000000000000000000000000000000000000000000010000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000255f736574436f6c6c61746572616c466163746f7228616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f40000000000000000000000000000000000000000000000000a688906bd8b000000000000000000000000000000000000000000000000000000000000000004262320536574205742544320436f6c6c61746572616c20466163746f7220746f203735250a54686973206368616e676520696e637265617365732074686520436f6c6c61746572616c20466163746f72206f6620574254432066726f6d2036302520746f203735252e200a0a4f6e204f63746f626572203173742c2050726f706f73616c203234207761732070617373656420746f2072616973652057425443e280997320436f6c6c61746572616c20466163746f722066726f6d2034302520746f203630252e204163636f7264696e6720746f20446566692050756c73652c206f6e204f63746f626572203173742c2074686572652077657265207e243142206f66205742544320696e2063697263756c6174696f6e2e20546f646179207468657265206172652024342e333842206f66205742544320696e2063697263756c6174696f6e2e20496e206164646974696f6e20746f20686176696e672061206d756368206c617267657220737570706c7920746f6461792c2057425443206c697175696469747920686173207369676e69666963616e746c792067726f776e2073696e63652050726f706f73616c20323420776173207061737365642e0a0a556e69737761703a20243135304d0a5375736869737761703a20243235364d0a42616c616e6365723a20243230304d0a31696e63683a20243136304d0a0a496e206164646974696f6e20746f2067726f77696e67206c6971756964697479206f6e20646563656e7472616c697a65642065786368616e6765732c2063656e7472616c697a65642065786368616e6765732061726520636f6e74696e75696e6720746f2061646f707420574254432e2053686f72746c792061667465722050726f706f73616c203234207061737365642c20436f696e626173652061646465642057425443206d61726b6574732e2041732077656c6c2c2042696e616e636520636f6e74696e75657320746f20626520612067726f77696e672068756220666f7220574254432f4254432074726164696e672e200a0a5769746820746865207369676e69666963616e7420696e63726561736520696e20574254432063697263756c6174696f6e2c206c69717569646974792c20616e6420696e6672617374727563747572652c206974206973207361666520666f7220436f6d706f756e6420746f20696e63726561736520436f6c6c61746572616c20466163746f7220746f203735252e2046726f6d20612067726f7774682f627573696e657373207374616e64706f696e742c20414156452063757272656e746c79206861732069747320436f6c6c61746572616c20466163746f722073657420746f203735252e20436f6d706f756e642046696e616e6365206e6565647320746f2072656d61696e20636f6d706574697469766520746f2061766f6964206c6f73696e67206d61726b65742073686172652e0000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4949303609d8028a829949122056b9a200c4932c29d75e33f1267b68d0833693"}]}