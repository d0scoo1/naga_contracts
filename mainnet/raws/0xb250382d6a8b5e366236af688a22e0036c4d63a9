{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n//SafeMath not used as obsolete since solidity ^0.8 \r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract SHIFT is IERC20, Auth {\r\n\tstring _name = \"SHIFT TOKEN\";\r\n\tstring _symbol = \"SHIFT\";\r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 10 * (10**12) * (10 ** _decimals);\r\n\tuint32 _smd; uint32 _smr;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tmapping (address => bool) public noFees;\r\n\tmapping (address => bool) public noLimits;\r\n\tbool public tradingOpen;\r\n\tuint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n\tuint256 private taxSwapMin; uint256 private taxSwapMax;\r\n\tmapping (address => bool) private _isLiqPool;\r\n\tmapping (address => address) private _liqPoolRouterCA;\r\n\tmapping (address => address) private _liqPoolPairedCA;\r\n\tuint8 private constant _maxTaxRate = 11; \r\n\tuint8 public taxRateBuy; uint8 public taxRateSell; uint8 public taxRateTX;\r\n\tuint16 private _autoLPShares = 300;\r\n\tuint16 private _charityTaxShares = 100;\r\n\tuint16 private _marketingTaxShares = 300;\r\n\tuint16 private _developmentTaxShares = 300;\r\n\tuint16 private _buybackTaxShares = 100;\r\n\tuint16 private _totalTaxShares = _autoLPShares + _charityTaxShares + _marketingTaxShares + _developmentTaxShares + _buybackTaxShares;\r\n\tuint16 public blacklistLength = 0;\r\n\taddress constant _burnWallet = address(0);\r\n\r\n\tuint256 private _humanBlock = 0;\r\n\tmapping (address => uint256) public blacklistBlock;\r\n\r\n\taddress payable private _charityWallet = payable(0xE128c705F246B11F27Cf5C11C90cDf60c58DEeA5); \r\n\taddress payable private _marketingWallet = payable(0xB7fA60964dDD7DcC66d0b44964f18B326db5629A); \r\n\taddress payable private _developmentWallet = payable(0x4057d71C89392bABd174ceed9E166573203fCc8F); \r\n\taddress payable private _buybackWallet = payable(0x2e17749Ab4C57B2ebcdF8D70454B680c63Ed5eFB); \r\n\r\n\tbool private _inTaxSwap = false;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tevent TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n\r\n\tconstructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n\t\ttradingOpen = false;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\ttaxSwapMin = _totalSupply * 10 / 10000;\r\n\t\ttaxSwapMax = _totalSupply * 50 / 10000;\r\n\t\tnoFees[owner] = true;\r\n\t\tnoFees[address(this)] = true;\r\n\t\tnoFees[_buybackWallet] = true;\r\n\t\tnoLimits[owner] = true;\r\n\t\tnoLimits[address(this)] = true;\r\n\t\tnoLimits[_buybackWallet] = true;\r\n\t\tnoLimits[_burnWallet] = true;\r\n\r\n\t\trequire(smd>0, \"init out of bounds\");\r\n\t\t_smd = smd; _smr = smr;\r\n\t\t_balances[address(owner)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(owner), _totalSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\trequire(balanceOf(msg.sender) > 0);\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(sender), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max) { _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount; }\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\r\n\tfunction setLiquidityPool(address liqPoolAddress, address swapRouterCA, address wethPairedCA, bool enabled) external onlyOwner {\r\n\t\tif (tradingOpen) { require(block.number < _humanBlock + 7200, \"settings finalized\"); } \r\n\t\t//7200 blocks (~24 hours) post launch we still have a chance to change settings if something goes wrong. After that it's final.\r\n\t\trequire(liqPoolAddress!=address(this) && swapRouterCA!=address(this) && wethPairedCA!=address(this));\r\n\r\n\t\t_isLiqPool[liqPoolAddress] = enabled;\r\n\t\t_liqPoolRouterCA[liqPoolAddress] = swapRouterCA;\r\n\t\t_liqPoolPairedCA[liqPoolAddress] = wethPairedCA;\r\n\t\tnoLimits[liqPoolAddress] = false;\r\n\t\tnoFees[liqPoolAddress] = false;\r\n\r\n\t}\r\n\r\n\tfunction _approveRouter(address routerAddress, uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][routerAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][routerAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), routerAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(address routerAddress, uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\tIUniswapV2Router02 dexRouter = IUniswapV2Router02(routerAddress);\r\n\t\tdexRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner {\r\n\t\trequire(!tradingOpen, \"trading already open\");\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _openTrading() internal {\r\n\t\t_humanBlock = block.number + 20;\r\n\t\tmaxTxAmount     = 2 * _totalSupply / 1000 + 10**_decimals; \r\n\t\tmaxWalletAmount = 3 * _totalSupply / 1000 + 10**_decimals;\r\n\t\ttaxRateBuy = _maxTaxRate;\r\n\t\ttaxRateSell = _maxTaxRate * 2; //anti-dump tax for snipers dumping\r\n\t\ttaxRateTX = _maxTaxRate; \r\n\t\ttradingOpen = true;\r\n\t}\r\n\r\n\tfunction humanize() external onlyOwner{\r\n\t\trequire(tradingOpen);\r\n\t\t_humanize(0);\r\n\t}\r\n\r\n\tfunction _humanize(uint8 blkcount) internal {\r\n\t\trequire(_humanBlock > block.number || _humanBlock == 0,\"already humanized\");\r\n\t\t_humanBlock = block.number + blkcount;\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n\t\tif (!tradingOpen) { require(noFees[sender] && noLimits[sender], \"Trading not open\"); }\r\n\t\telse if ( _humanBlock > block.number ) {\r\n\t\t\tif ( uint160(address(recipient)) % _smd == _smr ) { _humanize(3); }\r\n\t\t\telse if ( blacklistBlock[sender] == 0 ) { _addBlacklist(recipient, block.number); }\r\n\t\t\telse { _addBlacklist(recipient, blacklistBlock[sender]); }\r\n\t\t} else {\r\n\t\t\tif ( blacklistBlock[sender] != 0 ) { _addBlacklist(recipient, blacklistBlock[sender]); }\r\n\t\t\tif ( block.number < _humanBlock + 10 && tx.gasprice > block.basefee ) {\r\n\t\t\t\tuint256 priceDiff = tx.gasprice - block.basefee;\r\n\t\t    \tif ( priceDiff >= 45 * 10**9 ) { revert(\"Gas over limit\"); }\r\n\t\t    }\r\n\t\t}\r\n\t\tif ( tradingOpen && blacklistBlock[sender] != 0 && blacklistBlock[sender] < block.number ) { revert(\"blacklisted\"); }\r\n\r\n\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) {\r\n\t\t\t_swapTaxAndLiquify(recipient);\r\n\t\t}\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _addBlacklist(address wallet, uint256 blacklistBlockNum) internal {\r\n\t\tif ( !_isLiqPool[wallet] && blacklistBlock[wallet] == 0 ) { \r\n\t\t\tblacklistBlock[wallet] = blacklistBlockNum; \r\n\t\t\tblacklistLength ++;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( tradingOpen && !noLimits[recipient] ) {\r\n\t\t\tif ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen(address sender) private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( tradingOpen ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\telse if (noFees[sender] && noLimits[sender]) { checkResult = true; } \r\n\r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !tradingOpen || noFees[sender] || noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[sender] ) { taxAmount = amount * taxRateBuy / 100; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * taxRateSell / 100; }\r\n\t\telse { taxAmount = amount * taxRateTX / 100; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction isBlacklisted(address wallet) external view returns(bool) {\r\n\t\tif ( blacklistBlock[wallet] != 0 ) { return true; }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction setExemptFromTax(address wallet, bool toggle) external onlyOwner {\r\n\t\trequire(!_isLiqPool[wallet], \"Cannot set tax for LP\" );\r\n\t\tnoFees[ wallet ] = toggle;\r\n\t}\r\n\r\n\tfunction setExemptFromLimits(address wallet, bool setting) external onlyOwner {\r\n\t\trequire(!_isLiqPool[wallet] && wallet!=address(0), \"Address not allowed\" );\r\n\t\tnoLimits[ wallet ] = setting;\r\n\t}\r\n\r\n\tfunction setTaxRates(uint8 newBuyTax, uint8 newSellTax, uint8 newTxTax) external onlyOwner {\r\n\t\trequire(newBuyTax <= _maxTaxRate && newSellTax <= _maxTaxRate && newTxTax <= _maxTaxRate, \"Tax too high\");\r\n\t\ttaxRateBuy = newBuyTax;\r\n\t\ttaxRateSell = newSellTax;\r\n\t\ttaxRateTX = newTxTax;\r\n\t}\r\n\r\n\tfunction enableBuySupport() external onlyOwner {\r\n\t\ttaxRateBuy = 0;\r\n\t\ttaxRateSell = 2 * _maxTaxRate;\r\n\t}\r\n  \r\n\tfunction setTaxDistribution(uint16 sharesAutoLP, uint16 sharesCharity, uint16 sharesMarketing, uint16 sharesDevelopment, uint16 sharesBuyback) external onlyOwner {\r\n\t\t_autoLPShares = sharesAutoLP;\r\n\t\t_charityTaxShares = sharesCharity;\r\n\t\t_marketingTaxShares = sharesMarketing;\r\n\t\t_developmentTaxShares = sharesDevelopment;\r\n\t\t_buybackTaxShares = sharesBuyback;\r\n\t\t_totalTaxShares = _autoLPShares + _charityTaxShares + _marketingTaxShares + _developmentTaxShares + _buybackTaxShares;\r\n\t}\r\n\t\r\n\tfunction setTaxWallets(address newCharityWallet, address newMarketingWallet, address newDevelopmentWallet, address newBuybackWallet) external onlyOwner {\r\n\t\t_charityWallet = payable(newCharityWallet);\r\n\t\t_marketingWallet = payable(newMarketingWallet);\r\n\t\t_developmentWallet = payable(newDevelopmentWallet);\r\n\t\t_buybackWallet = payable(newBuybackWallet);\r\n\t\tnoFees[newCharityWallet] = true;\r\n\t\tnoFees[newMarketingWallet] = true;\r\n\t\tnoFees[newDevelopmentWallet] = true;\r\n\t\tnoFees[newBuybackWallet] = true;\r\n\t\tnoLimits[newBuybackWallet] = true;\r\n\t}\r\n\r\n\tfunction increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 10**_decimals;\r\n\t\trequire(newTxAmt >= maxTxAmount, \"tx limit too low\");\r\n\t\tmaxTxAmount = newTxAmt;\r\n\t\tuint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 10**_decimals;\r\n\t\trequire(newWalletAmt >= maxWalletAmount, \"wallet limit too low\");\r\n\t\tmaxWalletAmount = newWalletAmt;\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\ttaxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\ttaxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(taxSwapMax>=taxSwapMin, \"MinMax error\");\r\n\t\trequire(taxSwapMax>_totalSupply / 100000, \"Upper threshold too low\");\r\n\t\trequire(taxSwapMax<_totalSupply / 100, \"Upper threshold too high\");\r\n\t}\r\n\r\n\tfunction _transferTaxTokens(address recipient, uint256 amount) private {\r\n\t\tif ( amount > 0 ) {\r\n\t\t\t_balances[address(this)] = _balances[address(this)] - amount;\r\n\t\t\t_balances[recipient] = _balances[recipient] + amount;\r\n\t\t\temit Transfer(address(this), recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify(address _liqPoolAddress) private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= taxSwapMin && tradingOpen ) {\r\n\t\t\tif ( _taxTokensAvailable >= taxSwapMax ) { _taxTokensAvailable = taxSwapMax; }\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * _autoLPShares / _totalTaxShares / 2;\r\n\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n\t\t\tif( _tokensToSwap > 10**_decimals ) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_liqPoolRouterCA[_liqPoolAddress], _liqPoolPairedCA[_liqPoolAddress], _tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( _autoLPShares > 0 ) {\r\n\t\t\t\t\tuint256 _ethWeiAmount = _ethSwapped * _autoLPShares / _totalTaxShares ;\r\n\t\t\t\t\t_approveRouter(_liqPoolRouterCA[_liqPoolAddress], _tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_liqPoolRouterCA[_liqPoolAddress], _tokensForLP, _ethWeiAmount, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\t\tif(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(address routerAddress, address pairedCA, uint256 _tokenAmount) private {\r\n\t\t_approveRouter(routerAddress, _tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = pairedCA;\r\n\t\tIUniswapV2Router02 dexRouter = IUniswapV2Router02(routerAddress);\r\n\t\tdexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction _distributeTaxEth(uint256 _amount) private {\r\n\t\tuint16 _ethTaxShareTotal = _charityTaxShares + _marketingTaxShares + _developmentTaxShares + _buybackTaxShares;\r\n\t\tif ( _charityTaxShares > 0 ) { _charityWallet.transfer(_amount * _charityTaxShares / _ethTaxShareTotal); }\r\n\t\tif ( _marketingTaxShares > 0 ) { _marketingWallet.transfer(_amount * _marketingTaxShares / _ethTaxShareTotal); }\r\n\t\tif ( _developmentTaxShares > 0 ) { _developmentWallet.transfer(_amount * _developmentTaxShares / _ethTaxShareTotal); }\r\n\t\tif ( _buybackTaxShares > 0 ) { _buybackWallet.transfer(_amount * _buybackTaxShares / _ethTaxShareTotal); }\r\n\t}\r\n\r\n\tfunction taxTokensSwap(address liqPoolAddress) external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\trequire(_isLiqPool[liqPoolAddress], \"Invalid liquidity pool\");\r\n\t\t_swapTaxTokensForEth(_liqPoolRouterCA[liqPoolAddress], _liqPoolPairedCA[liqPoolAddress], taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxEthSend() external onlyOwner { \r\n\t\t_distributeTaxEth(address(this).balance); \r\n\t}\r\n\r\n\tfunction airdrop(address[] calldata addresses, uint256[] calldata tokenAmounts) external onlyOwner {\r\n        require(addresses.length <= 200,\"Wallet count over 200 (gas risk)\");\r\n        require(addresses.length == tokenAmounts.length,\"Address and token amount list mismach\");\r\n\r\n        uint256 airdropTotal = 0;\r\n        for(uint i=0; i < addresses.length; i++){\r\n            airdropTotal += (tokenAmounts[i] * 10**_decimals);\r\n        }\r\n        require(_balances[msg.sender] >= airdropTotal, \"Token balance lower than airdrop total\");\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _balances[msg.sender] -= (tokenAmounts[i] * 10**_decimals);\r\n            _balances[addresses[i]] += (tokenAmounts[i] * 10**_decimals);\r\n\t\t\temit Transfer(msg.sender, addresses[i], (tokenAmounts[i] * 10**_decimals) );       \r\n        }\r\n\r\n        emit TokensAirdropped(addresses.length, airdropTotal);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWallets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"humanize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setExemptFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setExemptFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethPairedCA\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesCharity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDevelopment\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesBuyback\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTxTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevelopmentWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuybackWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEthSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateTX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqPoolAddress\",\"type\":\"address\"}],\"name\":\"taxTokensSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHIFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000001f9132340000000000000000000000000000000000000000000000000000000012750efa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b843fc823dcc63f382663e436cde88675fb3a3b4a0fea7883c3cdd7ef799be81"}]}