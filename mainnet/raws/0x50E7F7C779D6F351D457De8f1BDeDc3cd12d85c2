{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BrightBundles.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n */\\npragma solidity 0.8.14;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BrightBundles is Ownable, ReentrancyGuard\\n{\\n    /***************************/\\n    /********** STRUCT *********/\\n    /***************************/\\n\\n    struct Bundle\\n    {\\n        string Name; \\n        uint PriceBrightList; \\n        uint PricePublic; \\n        uint[] StartingIndexes; \\n        uint[] EndingIndexes; \\n        uint PurchaseableAmount; \\n        uint PurchaseableAmountBrightList; \\n        uint PurchaseableAmountPublic; \\n        address[] ContractAddresses; \\n        address Operator; \\n        bytes32 Root; \\n        bool ActivePublic; \\n        bool ActiveBrightList; \\n        bool AllowMultiplePurchases; \\n    }\\n\\n    /***************************/\\n    /********* MAPPINGS ********/\\n    /***************************/\\n\\n    mapping(uint => Bundle) public Bundles;\\n    mapping(uint => uint) public BundleProceeds;\\n    mapping(address => bytes32) public BRTOperators;\\n    mapping(uint => mapping(address => bool)) public BundlePurchased;\\n    mapping(uint => mapping(address => uint)) public PurchasedAmountBrightList;\\n    mapping(uint => mapping(address => uint)) public PurchasedAmountPublic;\\n\\n    /***************************/\\n    /********** EVENTS *********/\\n    /***************************/\\n\\n    /**\\n     * @dev Emitted When A BrightList Purchase Occurs\\n     */\\n    event BundlePurchaseEventBrightList(\\n        address indexed recipientAddress, \\n        uint indexed BundleIndex, \\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted When A Public Purchase Occurs\\n     */\\n    event BundlePurchaseEvent(\\n        address indexed recipientAddress, \\n        uint indexed BundleIndex, \\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted When A Bundle Has Started\\n     */\\n    event BundleStarted(\\n        string Name,\\n        address[] ContractAddresses, \\n        bytes32 RootHash, \\n        address Operator, \\n        bool ActivePublic,\\n        bool ActiveBrightList,\\n        bool AllowMultiplePurchases\\n    );\\n\\n    /**\\n     * @dev Emitted When A Batch Of Bundles Have Been Initialized\\n     */\\n    event BundlesStarted(Bundle BundleInstance);\\n\\n    /**\\n     * @dev Emitted When Various State Variables Are Modified\\n     */\\n    event BundlesEnded(uint[] BundleIndexes);\\n    event BundleChangedNames(uint[] BundleIndexes, string[] NewNames);\\n    event BundleChangedStartingIndexes(uint indexed BundleIndex, uint[] OldStartingIndexes, uint[] NewStartingIndexes);\\n    event BundleChangedEndingIndexes(uint indexed BundleIndex, uint[] OldEndingIndexes, uint[] NewEndingIndexes);\\n    event BundleChangedAllocationsPublic(uint[] BundleIndexes, uint[] NewAllocations);\\n    event BundleChangedAllocationsBrightList(uint[] BundleIndexes, uint[] NewAllocations);\\n    event BundleChangedPricesBrightList(uint[] BundleIndexes, uint[] NewPrices);\\n    event BundleChangedPricesPublic(uint[] BundleIndexes, uint[] NewPrices); \\n    event BundleChangedERC_TYPE(uint indexed BundleIndex, uint OLD_ERC_TYPE, uint NEW_ERC_TYPE);\\n    event BundleChangedContracts(uint indexed BundleIndex, address[] OldContracts, address[] NewContracts);\\n    event BundleChangedRoots(uint[] BundleIndexes, bytes32[] NewRoots);\\n    event BundleChangedOperators(uint[] indexed BundleIndexes, address[] NewOperators);\\n    event BundleChangedActiveStatesPublic(uint[] BundleIndexes, bool[] States);\\n    event BundleChangedActiveStatesBrightList(uint[] BundleIndexes, bool[] States);\\n    event BundleChangedPurchaseableAmounts(uint[] BundleIndexes, uint[] Amounts);\\n    event BundleChangedAllowMultiplePurchases(uint[] BundleIndexes, bool[] States);\\n\\n    /**\\n     * @dev Emitted When BRT Multisig Adds Or Removes An Operator\\n     */\\n    event OperatorAdded(address Operator);\\n    event OperatorRemoved(address Operator);\\n\\n    /**\\n     * @dev Amount Of Unique Bundle Bundles\\n     */\\n    uint public UniqueBundleIndex;\\n\\n    /**\\n     * @dev BRT Operator Roles\\n     */\\n    bytes32 private immutable _OPERATOR = keccak256(\\\"OPERATOR\\\");\\n    bytes32 private immutable _DEACTIVATED = 0x0;\\n    address public immutable _BRTMULTISIG = 0xB96E81f80b3AEEf65CB6d0E280b15FD5DBE71937;\\n\\n    /**\\n     * @dev Constructor\\n     */\\n    constructor() \\n    { \\n        BRTOperators[0x5778B0B140Fa7a62B96c193cC8621e6E96c088A5] = _OPERATOR; //brougkr\\n        BRTOperators[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = _OPERATOR; //phil.brightmoments.eth\\n        BRTOperators[0xbf001FF749b7E793bbb1A612d09124470b9179A7] = _OPERATOR; //future\\n        _transferOwnership(_BRTMULTISIG);\\n    } \\n\\n    /***************************/\\n    /***** PUBLIC FUNCTIONS ****/\\n    /***************************/\\n\\n    /**\\n     * @dev Public Bundle Purchase \\n     */\\n    function BundlePurchase(uint BundleIndex, uint Amount) public payable nonReentrant\\n    { \\n        require(Bundles[BundleIndex].ActivePublic, \\\"BrightBundles: Requested Bundle Is Not Available For Public Purchases\\\");\\n        require(\\n            PurchasedAmountPublic[BundleIndex][msg.sender] + Amount <= Bundles[BundleIndex].PurchaseableAmountPublic,\\n            \\\"BrightBundles: User Has Used Up All Of Public Allocation For This Bundle Index\\\"\\n        );\\n        if(!Bundles[BundleIndex].AllowMultiplePurchases) { require(!BundlePurchased[BundleIndex][msg.sender], \\\"BrightBundles: User Has Already Purchased This Bundle Index\\\"); }\\n        require(msg.value == Bundles[BundleIndex].PricePublic * Amount && Amount > 0, \\\"BrightBundles: Incorrect Ether Amount Or Token Amount Sent For Purchase\\\");\\n        if(!BundlePurchased[BundleIndex][msg.sender]) { BundlePurchased[BundleIndex][msg.sender] = true; }\\n        PurchasedAmountPublic[BundleIndex][msg.sender] += Amount;\\n        for(uint x; x < Amount; x++)\\n        {\\n            for(uint y; y < Bundles[BundleIndex].ContractAddresses.length; y++)\\n            {\\n                IERC721(Bundles[BundleIndex].ContractAddresses[y]).transferFrom(\\n                    Bundles[BundleIndex].Operator, \\n                    msg.sender, \\n                    Bundles[BundleIndex].StartingIndexes[y]\\n                );\\n                Bundles[BundleIndex].StartingIndexes[y]++;\\n            }\\n        }\\n        BundleProceeds[BundleIndex] += msg.value;\\n        emit BundlePurchaseEvent(msg.sender, BundleIndex, Amount);\\n    }\\n\\n    /**\\n     * @dev Bundle Purchase BrightList Bundle\\n     */\\n    function BundlePurchaseBrightList(uint BundleIndex, uint Amount, bytes32[] calldata Proof) public payable nonReentrant\\n    {\\n        require(Bundles[BundleIndex].ActiveBrightList, \\\"BrightBundles: Requested Bundle Is Not Available For BrightList Purchases\\\");\\n        require(msg.value == Bundles[BundleIndex].PriceBrightList * Amount && Amount > 0, \\\"BrightBundles: Incorrect Ether Amount Or Token Amount Sent For Purchase\\\");\\n        require(viewBrightListAllocation(msg.sender, BundleIndex, Proof), \\\"BrightBundles: User Is Not On BrightList\\\");\\n        require(\\n            PurchasedAmountBrightList[BundleIndex][msg.sender] + Amount <= Bundles[BundleIndex].PurchaseableAmountBrightList,\\n            \\\"BrightBundles: User Has Used Up All BrightList Allocation For This Bundle Index\\\"\\n        );\\n        if(!Bundles[BundleIndex].AllowMultiplePurchases) { require(!BundlePurchased[BundleIndex][msg.sender], \\\"BrightBundles: User Has Already Purchased This Bundle Index\\\"); }\\n        if(!BundlePurchased[BundleIndex][msg.sender]) { BundlePurchased[BundleIndex][msg.sender] = true; }\\n        PurchasedAmountBrightList[BundleIndex][msg.sender] += Amount;    \\n        for(uint x; x < Amount; x++)\\n        {\\n            for(uint y; y < Bundles[BundleIndex].ContractAddresses.length; y++)\\n            {\\n                IERC721(Bundles[BundleIndex].ContractAddresses[y]).transferFrom(\\n                    Bundles[BundleIndex].Operator, \\n                    msg.sender, \\n                    Bundles[BundleIndex].StartingIndexes[y]\\n                );\\n                Bundles[BundleIndex].StartingIndexes[y]++;\\n            }\\n        }\\n        BundleProceeds[BundleIndex] += msg.value;\\n        emit BundlePurchaseEventBrightList(msg.sender, BundleIndex, Amount);\\n    }\\n\\n    /***************************/\\n    /**** OPERATOR COMMANDS ****/\\n    /***************************/\\n\\n    /**\\n     * @dev Sets Up A New Bundle\\n     * note: `Price` Is Input In WEI Due To Ethereum EVM. For Example, 1 ETH = 1000000000000000000 WEI\\n     * note: `ERC_TYPE` Is (`721` for ERC721) || (`1155` for ERC1155)\\n     * note: `ContractAddress` Is The NFT Contract Address\\n     * note: `RootHash` Is Merkle Root Hash\\n     * note: `Operator` Is The Wallet Providing The NFTs For Bundle. They Will Have To setApprovalForAll() On This Contract\\n     * note: `Public` & `AllowMultiplePurchases` Are Either `true` or `false`\\n     */\\n    function _StartBundle(Bundle memory NewBundleInstance) external onlyBRTOperator\\n    {\\n        //Auto-Increments The Unique Bundle Index\\n        UniqueBundleIndex++; \\n\\n        //Assigns State Variables To The New Bundle Instance\\n        Bundles[UniqueBundleIndex].Name = NewBundleInstance.Name;\\n        Bundles[UniqueBundleIndex].PriceBrightList = NewBundleInstance.PriceBrightList;\\n        Bundles[UniqueBundleIndex].PricePublic = NewBundleInstance.PricePublic;\\n        Bundles[UniqueBundleIndex].StartingIndexes = NewBundleInstance.StartingIndexes;\\n        Bundles[UniqueBundleIndex].EndingIndexes = NewBundleInstance.EndingIndexes;\\n        Bundles[UniqueBundleIndex].PurchaseableAmount = NewBundleInstance.PurchaseableAmount;\\n        Bundles[UniqueBundleIndex].PurchaseableAmountBrightList = NewBundleInstance.PurchaseableAmountBrightList;\\n        Bundles[UniqueBundleIndex].PurchaseableAmountPublic = NewBundleInstance.PurchaseableAmountPublic;\\n        Bundles[UniqueBundleIndex].ContractAddresses = NewBundleInstance.ContractAddresses;\\n        Bundles[UniqueBundleIndex].Operator = NewBundleInstance.Operator;\\n        Bundles[UniqueBundleIndex].Root = NewBundleInstance.Root;\\n        Bundles[UniqueBundleIndex].ActivePublic = NewBundleInstance.ActivePublic;\\n        Bundles[UniqueBundleIndex].ActiveBrightList = NewBundleInstance.ActiveBrightList;\\n        Bundles[UniqueBundleIndex].AllowMultiplePurchases = NewBundleInstance.AllowMultiplePurchases;\\n        \\n        //Emits Base Data Of The New Bundle Instance\\n        emit BundleStarted(\\n            Bundles[UniqueBundleIndex].Name,\\n            Bundles[UniqueBundleIndex].ContractAddresses, \\n            Bundles[UniqueBundleIndex].Root, \\n            Bundles[UniqueBundleIndex].Operator, \\n            Bundles[UniqueBundleIndex].ActivePublic,\\n            Bundles[UniqueBundleIndex].ActiveBrightList,\\n            Bundles[UniqueBundleIndex].AllowMultiplePurchases\\n        );\\n    }\\n\\n    /**\\n     * @dev Batch Startes Multiple Bundles\\n     * note: INDEX\\n     * [0] = Name\\n     * [1] = PriceBrightList\\n     * [2] = PricePublic\\n     * [3] = StartingIndexes\\n     * [4] = EndingIndexes\\n     * [5] = PurchaseableAmount\\n     * [6] = PurchaseableAmountBrightList\\n     * [7] = PurchaseableAmountPublic\\n     * [8] = ContractAddresses\\n     * [9] = Operator\\n     * [10] = Root\\n     * [11] = ActivePublic\\n     * [12] = ActiveBrightList\\n     * [13] = AllowMultiplePurchases\\n     */\\n    function _StartBundles(Bundle[] memory NewBundleInstances) external onlyBRTOperator   \\n    {\\n        for(uint BundleIndex; BundleIndex < NewBundleInstances.length; BundleIndex++)\\n        {  \\n            //Auto Increments Index    \\n            UniqueBundleIndex++; \\n\\n            //Assigns State Variables To The New Bundle Instance\\n            Bundles[UniqueBundleIndex].Name = NewBundleInstances[BundleIndex].Name;\\n            Bundles[UniqueBundleIndex].PriceBrightList = NewBundleInstances[BundleIndex].PriceBrightList;\\n            Bundles[UniqueBundleIndex].PricePublic = NewBundleInstances[BundleIndex].PricePublic;\\n            Bundles[UniqueBundleIndex].PurchaseableAmount = NewBundleInstances[BundleIndex].PurchaseableAmount;\\n            Bundles[UniqueBundleIndex].PurchaseableAmountBrightList = NewBundleInstances[BundleIndex].PurchaseableAmountBrightList;\\n            Bundles[UniqueBundleIndex].PurchaseableAmountPublic = NewBundleInstances[BundleIndex].PurchaseableAmountPublic;\\n            Bundles[UniqueBundleIndex].ContractAddresses = NewBundleInstances[BundleIndex].ContractAddresses;\\n            Bundles[UniqueBundleIndex].Operator = NewBundleInstances[BundleIndex].Operator;\\n            Bundles[UniqueBundleIndex].Root = NewBundleInstances[BundleIndex].Root;\\n            Bundles[UniqueBundleIndex].StartingIndexes = NewBundleInstances[BundleIndex].StartingIndexes;\\n            Bundles[UniqueBundleIndex].EndingIndexes = NewBundleInstances[BundleIndex].EndingIndexes;\\n            Bundles[UniqueBundleIndex].ActivePublic = NewBundleInstances[BundleIndex].ActivePublic;\\n            Bundles[UniqueBundleIndex].ActiveBrightList = NewBundleInstances[BundleIndex].ActiveBrightList;\\n            Bundles[UniqueBundleIndex].AllowMultiplePurchases = NewBundleInstances[BundleIndex].AllowMultiplePurchases;\\n        }\\n        emit BundlesStarted(Bundles[UniqueBundleIndex]);\\n    }\\n\\n    /**\\n     * @dev Changes BrightList Bundle Name `Name` At Index `BundleIndex`\\n     * note: This Is The Name Of The Bundle\\n     */\\n    function _ChangeBundleNames(uint[] calldata BundleIndexes, string[] memory Names) external onlyBRTOperator \\n    { \\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].Name = Names[i];  \\n        }\\n        emit BundleChangedNames(BundleIndexes, Names);\\n    }\\n    \\n    /**\\n     * @dev Changes BrightList StartingIndexes `Index` At Index `BundleIndex`\\n     * note: This Is The Starting Token ID\\n     */\\n    function _ChangeBundleStartingIndexes(uint BundleIndex, uint[] calldata Indexes) external onlyBRTOperator \\n    { \\n        uint[] memory OldStartingIndexes = Bundles[BundleIndex].StartingIndexes;\\n        Bundles[BundleIndex].StartingIndexes = Indexes; \\n        emit BundleChangedStartingIndexes(BundleIndex, OldStartingIndexes, Indexes);\\n    }\\n\\n    /**\\n     * @dev Changes BrightList EndingIndexes `Index` At Index `BundleIndex`\\n     * note: This Is The Ending Token ID\\n     */\\n    function _ChangeBundleEndingIndexes(uint BundleIndex, uint[] calldata Indexes) external onlyBRTOperator \\n    { \\n        uint[] memory OldEndingIndexes = Bundles[BundleIndex].EndingIndexes;\\n        Bundles[BundleIndex].EndingIndexes = Indexes; \\n        emit BundleChangedEndingIndexes(BundleIndex, OldEndingIndexes, Indexes);\\n    }\\n\\n    /**\\n     * @dev Changes Brightlist Public Purchasable Amount `Amount` At Index `BundleIndex`\\n     * note: This Is The Public Allocation\\n     */\\n    function _ChangeBundleAllocationsPublic(uint[] calldata BundleIndexes, uint[] calldata Amounts) external onlyBRTOperator \\n    {\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].PurchaseableAmountPublic = Amounts[i]; \\n        }\\n        emit BundleChangedAllocationsPublic(BundleIndexes, Amounts);\\n    }\\n    \\n    /**\\n     * @dev Changes Brightlist Purchasable Amount `Amount` At Index `BundleIndex`\\n     * note: This Is The BrightList Allocation\\n     */\\n    function _ChangeBundleAllocationsBrightList(uint[] calldata BundleIndexes, uint[] calldata Amounts) external onlyBRTOperator \\n    {\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].PurchaseableAmountBrightList = Amounts[i]; \\n        }\\n        emit BundleChangedAllocationsBrightList(BundleIndexes, Amounts);\\n    }\\n\\n    /**\\n     * @dev Changes Bundle Price Public Amount `Price` At Index `BundleIndex`\\n     * note: This Is Input In WEI Not In Ether. 1 ETH = 1000000000000000000 WEI\\n     */\\n    function _ChangeBundlePricesPublic(uint[] calldata BundleIndexes, uint[] calldata Prices) external onlyBRTOperator \\n    { \\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].PricePublic = Prices[i];\\n        }\\n        emit BundleChangedPricesPublic(BundleIndexes, Prices);\\n    }\\n\\n    /**\\n     * @dev Changes Bundle Price BrightList Amount `Price` At Index `BundleIndex`\\n     * note: This Is Input In WEI Not In Ether. 1 ETH = 1000000000000000000 WEI\\n     */\\n    function _ChangeBundlePricesBrightList(uint[] calldata BundleIndexes, uint[] calldata Prices) external onlyBRTOperator \\n    {\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].PriceBrightList = Prices[i]; \\n        }\\n        emit BundleChangedPricesBrightList(BundleIndexes, Prices);\\n    }\\n\\n    /**\\n     * @dev Changes Bundle Price BrightList Amount `Price` At Index `BundleIndex`\\n     * note: This Is Input In WEI Not In Ether. 1 ETH = 1000000000000000000 WEI\\n     */\\n    function _ChangeBundlePurchaseableAmounts(uint[] calldata BundleIndexes, uint[] calldata Amounts) external onlyBRTOperator \\n    {\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].PurchaseableAmount = Amounts[i]; \\n        }\\n        emit BundleChangedPurchaseableAmounts(BundleIndexes, Amounts);\\n    }\\n\\n    /**\\n     * @dev Changes BrightList Contract Address `Contract` At Index `BundleIndex`\\n     * note: Contracts Are The NFT Addresses That Is Being Claimed\\n     */\\n    function _ChangeBundleContracts(uint BundleIndex, address[] calldata Contracts) external onlyBRTOperator \\n    { \\n        address[] memory OldContracts = Bundles[BundleIndex].ContractAddresses;\\n        Bundles[BundleIndex].ContractAddresses = Contracts; \\n        emit BundleChangedContracts(BundleIndex, OldContracts, Contracts);\\n    }\\n\\n    /**\\n     * @dev Changes BrightList Operator `operator` At Index `BundleIndex`\\n     * note: This Is The Wallet / Address / EOA That The NFTs Are Pulling From\\n     */\\n    function _ChangeBundleOperators(uint[] calldata BundleIndexes, address[] calldata Operators) external onlyBRTOperator \\n    { \\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].Operator = Operators[i]; \\n            emit BundleChangedOperators(BundleIndexes, Operators);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes BrightList Root `RootHash` At Index `BundleIndex`\\n     * note: This Is The Merkle Root\\n     */\\n    function _ChangeBundleRoots(uint[] calldata BundleIndexes, bytes32[] calldata RootHashes) external onlyBRTOperator \\n    { \\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].Root = RootHashes[i]; \\n        }\\n        emit BundleChangedRoots(BundleIndexes, RootHashes);\\n    }\\n\\n    /**\\n     * @dev Changes BrightList Bundle States `States` At Index `BundleIndex`\\n     * note: Possible Inputs are array of `true` or `false`\\n     */\\n    function _ChangeBundleActiveStatesBrightList(uint[] calldata BundleIndexes, bool[] calldata States) external onlyBRTOperator \\n    { \\n        require(BundleIndexes.length == States.length, \\\"Arrays Must Be Equal Length\\\");\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].ActiveBrightList = States[i];\\n        }\\n        emit BundleChangedActiveStatesBrightList(BundleIndexes, States);\\n    }\\n\\n    /**\\n     * @dev Changes Public Bundle State `State` At Index `BundleIndex`\\n     * note: Possible Inputs are array of `true` or `false`\\n     */\\n    function _ChangeBundleActiveStatesPublic(uint[] calldata BundleIndexes, bool[] calldata States) external onlyBRTOperator \\n    { \\n        require(BundleIndexes.length == States.length, \\\"Arrays Must Be Equal Length\\\");\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].ActivePublic = States[i];\\n        }\\n        emit BundleChangedActiveStatesPublic(BundleIndexes, States);\\n    }\\n\\n    /**\\n     * @dev Changes Public Bundle State `State` At Index `BundleIndex`\\n     * note: Possible Inputs are array of `true` or `false`\\n     */\\n    function _ChangeBundleAllowMultiplePurchases(uint[] calldata BundleIndexes, bool[] calldata States) external onlyBRTOperator \\n    { \\n        require(BundleIndexes.length == States.length, \\\"Arrays Must Be Equal Length\\\");\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].AllowMultiplePurchases = States[i];\\n        }\\n        emit BundleChangedAllowMultiplePurchases(BundleIndexes, States);\\n    }\\n\\n    /**\\n     * @dev Ends Bundles\\n     */\\n    function _EndBundles(uint[] calldata BundleIndexes) external onlyBRTOperator \\n    {\\n        for(uint i; i < BundleIndexes.length; i++)\\n        {\\n            Bundles[BundleIndexes[i]].ActivePublic = false; \\n            Bundles[BundleIndexes[i]].ActiveBrightList = false;\\n        }\\n        emit BundlesEnded(BundleIndexes);\\n    }\\n\\n    /***************************/\\n    /****** ADMIN COMMANDS *****/\\n    /***************************/\\n\\n    /**\\n     * @dev Adds Bright Moments Operator\\n     * note: OnlyOwner\\n     */\\n    function __OperatorAdd(address Operator) external onlyOwner \\n    { \\n        BRTOperators[Operator] = _OPERATOR; \\n        emit OperatorAdded(Operator);\\n    }\\n\\n    /**\\n     * @dev Removes Bright Moments Operator\\n     * note: OnlyOwner\\n     */\\n    function __OperatorRemove(address Operator) external onlyOwner \\n    { \\n        BRTOperators[Operator] = _DEACTIVATED; \\n        emit OperatorRemoved(Operator);    \\n    }\\n\\n    /**\\n     * @dev Withdraws All Ether From Contract To Owner\\n     * note: OnlyOwner\\n     */\\n    function __Withdraw() external onlyOwner \\n    {\\n        uint balance = address(this).balance;\\n        require(balance > 0, \\\"Insufficient Balance\\\"); \\n        payable(owner()).transfer(balance); \\n    }\\n\\n    /**\\n     * @dev Withdraws Ether From Contract To Address\\n     * note: OnlyOwner\\n     */\\n    function __WithdrawToAddress(address payable Recipient) external onlyOwner \\n    {\\n        uint balance = address(this).balance;\\n        require(balance > 0, \\\"Insufficient Ether To Withdraw\\\");\\n        (bool Success, ) = Recipient.call{value: balance}(\\\"\\\");\\n        require(Success, \\\"Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraws Ether From Contract To Address With An Amount\\n     * note: OnlyOwner\\n     * note: `Amount` is Denoted In WEI ()\\n     */\\n    function __WithdrawAmountToAddress(address payable Recipient, uint Amount) external onlyOwner\\n    {\\n        require(Amount > 0 && Amount <= address(this).balance, \\\"Invalid Amount\\\");\\n        (bool Success, ) = Recipient.call{value: Amount}(\\\"\\\");\\n        require(Success, \\\"Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraws Ether From Bundle Instance To Owner\\n     * note: OnlyOwner\\n     */\\n    function __WithdrawBundleProceeds(uint BundleIndex) external onlyOwner\\n    {\\n        uint Amount = BundleProceeds[BundleIndex];\\n        require(Amount > 0 && Amount <= address(this).balance, \\\"Insufficient Balance\\\");\\n        BundleProceeds[BundleIndex] = 0;\\n        (bool Success, ) = owner().call{value: Amount}(\\\"\\\");\\n        require(Success, \\\"Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraws Ether From Bundle Instance To Address\\n     * note: OnlyOwner\\n     */\\n    function __WithdrawBundleProceedsToAddress(address payable Recipient, uint BundleIndex) external onlyOwner\\n    {\\n        uint Amount = BundleProceeds[BundleIndex];\\n        require(Amount > 0 && Amount <= address(this).balance, \\\"Insufficient Balance\\\");\\n        BundleProceeds[BundleIndex] = 0;\\n        (bool Success, ) = Recipient.call{value: Amount}(\\\"\\\");\\n        require(Success, \\\"Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n    \\n    /**\\n     * @dev Withdraws ERC20 From Contract To Address\\n     * note: OnlyOwner\\n     */\\n    function __WithdrawERC20ToAddress(address Recipient, address ContractAddress) external onlyOwner\\n    {\\n        IERC20 ERC20 = IERC20(ContractAddress);\\n        ERC20.transferFrom(address(this), Recipient, ERC20.balanceOf(address(this)));\\n    }\\n\\n    /***************************/\\n    /******* PUBLIC VIEW *******/\\n    /***************************/\\n    \\n    /**\\n     * @dev Checks BrightList Allocation\\n     */\\n    function viewBrightListAllocation(address Recipient, uint BundleIndex, bytes32[] memory Proof) public view returns(bool)\\n    { \\n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\\n        return MerkleProof.verify(Proof, Bundles[BundleIndex].Root, Leaf);\\n    }\\n\\n    /**\\n     * @dev Returns State Variables Of `BundleIndex`\\n     * note: `0. Name`\\n     * note: `1. Price BrightList`\\n     * note: `2. Price Public`\\n     * note: `3. StartingIndexes`\\n     * note: `4. EndingIndexes`\\n     * note: `5. PurchaseableAmount`\\n     * note: `6. Purchaseable Amount BrightList`\\n     * note: `7. Purchaseable Amount Public`\\n     * note: `8. ContractAddresses` Of NFT\\n     * note: `9. Operators`\\n     * note: `10. Merkle Root` \\n     * note: `11. Is Bundle Public Active`\\n     * note: `12. Is Bundle BrightList Active`\\n     * note: `13. Allow Multiple Purchases`\\n     */\\n    function viewBundleState(uint BundleIndex) public view returns(Bundle memory) { return Bundles[BundleIndex]; }\\n\\n    /**\\n     * @dev Returns State Variables Of `BundleIndex`\\n     * note: `0. Name`\\n     * note: `1. Price BrightList`\\n     * note: `2. Price Public`\\n     * note: `3. StartingIndexes`\\n     * note: `4. EndingIndexes`\\n     * note: `5. PurchaseableAmount`\\n     * note: `6. Purchaseable Amount BrightList`\\n     * note: `7. Purchaseable Amount Public`\\n     * note: `8. ContractAddresses` Of NFT\\n     * note: `9. Operators`\\n     * note: `10. Merkle Root` \\n     * note: `11. Is Bundle Public Active`\\n     * note: `12. Is Bundle BrightList Active`\\n     * note: `13. Allow Multiple Purchases`\\n     */\\n    function viewBundleStates(uint[] calldata BundleIndexes) public view returns(Bundle[] memory) \\n    {\\n        Bundle[] memory BundleStates = new Bundle[](BundleIndexes.length);\\n        for (uint i; i < BundleIndexes.length; i++) \\n        {\\n            Bundle storage saleInstance = Bundles[BundleIndexes[i]];\\n            BundleStates[i] = saleInstance;\\n        }\\n        return BundleStates;\\n    }\\n\\n    /***************************/\\n    /******** MODIFIER *********/\\n    /***************************/\\n\\n    /**\\n     * @dev Restricts Certain Functions To Bright Moments Operators Only\\n     */\\n    modifier onlyBRTOperator\\n    {\\n        require(BRTOperators[msg.sender] == _OPERATOR, \\\"User Is Not A Valid BRT Operator\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"BundleChangedActiveStatesBrightList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"BundleChangedActiveStatesPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewAllocations\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedAllocationsBrightList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewAllocations\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedAllocationsPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"BundleChangedAllowMultiplePurchases\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"OldContracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"NewContracts\",\"type\":\"address[]\"}],\"name\":\"BundleChangedContracts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OLD_ERC_TYPE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NEW_ERC_TYPE\",\"type\":\"uint256\"}],\"name\":\"BundleChangedERC_TYPE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"OldEndingIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewEndingIndexes\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedEndingIndexes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"NewNames\",\"type\":\"string[]\"}],\"name\":\"BundleChangedNames\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"NewOperators\",\"type\":\"address[]\"}],\"name\":\"BundleChangedOperators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewPrices\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedPricesBrightList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewPrices\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedPricesPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedPurchaseableAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"NewRoots\",\"type\":\"bytes32[]\"}],\"name\":\"BundleChangedRoots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"OldStartingIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"NewStartingIndexes\",\"type\":\"uint256[]\"}],\"name\":\"BundleChangedStartingIndexes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BundlePurchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BundlePurchaseEventBrightList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"RootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"name\":\"BundleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"}],\"name\":\"BundlesEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"StartingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"EndingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct BrightBundles.Bundle\",\"name\":\"BundleInstance\",\"type\":\"tuple\"}],\"name\":\"BundlesStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BRTOperators\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BundleProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"BundlePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"BundlePurchaseBrightList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BundlePurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bundles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PurchasedAmountBrightList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PurchasedAmountPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniqueBundleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BRTMULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"_ChangeBundleActiveStatesBrightList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"_ChangeBundleActiveStatesPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundleAllocationsBrightList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundleAllocationsPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"States\",\"type\":\"bool[]\"}],\"name\":\"_ChangeBundleAllowMultiplePurchases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"Contracts\",\"type\":\"address[]\"}],\"name\":\"_ChangeBundleContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"Indexes\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundleEndingIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"Names\",\"type\":\"string[]\"}],\"name\":\"_ChangeBundleNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"Operators\",\"type\":\"address[]\"}],\"name\":\"_ChangeBundleOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Prices\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundlePricesBrightList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Prices\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundlePricesPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundlePurchaseableAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"RootHashes\",\"type\":\"bytes32[]\"}],\"name\":\"_ChangeBundleRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"Indexes\",\"type\":\"uint256[]\"}],\"name\":\"_ChangeBundleStartingIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"}],\"name\":\"_EndBundles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"StartingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"EndingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"internalType\":\"struct BrightBundles.Bundle\",\"name\":\"NewBundleInstance\",\"type\":\"tuple\"}],\"name\":\"_StartBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"StartingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"EndingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"internalType\":\"struct BrightBundles.Bundle[]\",\"name\":\"NewBundleInstances\",\"type\":\"tuple[]\"}],\"name\":\"_StartBundles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"__OperatorAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"__OperatorRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__WithdrawAmountToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"}],\"name\":\"__WithdrawBundleProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"}],\"name\":\"__WithdrawBundleProceedsToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"}],\"name\":\"__WithdrawERC20ToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Recipient\",\"type\":\"address\"}],\"name\":\"__WithdrawToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"viewBrightListAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BundleIndex\",\"type\":\"uint256\"}],\"name\":\"viewBundleState\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"StartingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"EndingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"internalType\":\"struct BrightBundles.Bundle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BundleIndexes\",\"type\":\"uint256[]\"}],\"name\":\"viewBundleStates\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PriceBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PricePublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"StartingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"EndingIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountBrightList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmountPublic\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"ActivePublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ActiveBrightList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"AllowMultiplePurchases\",\"type\":\"bool\"}],\"internalType\":\"struct BrightBundles.Bundle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BrightBundles", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}