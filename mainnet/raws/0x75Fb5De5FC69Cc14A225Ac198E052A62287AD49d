{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gemies.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n      _____                   _______                   _____                    _____                    _____                    _____          \\r\\n     |\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\         \\r\\n     |:\\\\____\\\\               /::::\\\\    \\\\               /::\\\\    \\\\                /::\\\\    \\\\                /::\\\\    \\\\                /::\\\\    \\\\        \\r\\n     |::|   |              /::::::\\\\    \\\\             /::::\\\\    \\\\               \\\\:::\\\\    \\\\              /::::\\\\    \\\\              /::::\\\\    \\\\       \\r\\n     |::|   |             /::::::::\\\\    \\\\           /::::::\\\\    \\\\               \\\\:::\\\\    \\\\            /::::::\\\\    \\\\            /::::::\\\\    \\\\      \\r\\n     |::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/\\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\     \\r\\n     |::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/  \\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\    \\r\\n     |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    \\\\:::\\\\    \\\\              /::::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\   \\r\\n     |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    / \\\\:::\\\\    \\\\    ____    /::::::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\    ___\\\\:::\\\\   \\\\:::\\\\    \\\\  \\r\\n     /::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /   \\\\:::\\\\ ___\\\\  /\\\\   \\\\  /:::/\\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\ \\r\\n    /::::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/  ___\\\\:::|    |/::\\\\   \\\\/:::/  \\\\:::\\\\____\\\\/:::/__\\\\:::\\\\   \\\\:::\\\\____\\\\/::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\\\r\\n   /:::/~~~~/~~       \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\ /\\\\  /:::|____|\\\\:::\\\\  /:::/    \\\\::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\r\\n  /:::/    /           \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    /::\\\\ \\\\::/    /  \\\\:::\\\\/:::/    / \\\\/____/  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/ \\r\\n /:::/    /             \\\\:::\\\\    /:::/    /     \\\\:::\\\\   \\\\:::\\\\ \\\\/____/    \\\\::::::/    /            \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\     \\r\\n/:::/    /               \\\\:::\\\\__/:::/    /       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/____/              \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\    \\r\\n\\\\::/    /                 \\\\::::::::/    /         \\\\:::\\\\  /:::/    /        \\\\:::\\\\    \\\\               \\\\:::\\\\   \\\\::/    /        \\\\:::\\\\  /:::/    /    \\r\\n \\\\/____/                   \\\\::::::/    /           \\\\:::\\\\/:::/    /          \\\\:::\\\\    \\\\               \\\\:::\\\\   \\\\/____/          \\\\:::\\\\/:::/    /     \\r\\n                            \\\\::::/    /             \\\\::::::/    /            \\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\               \\\\::::::/    /      \\r\\n                             \\\\::/____/               \\\\::::/    /              \\\\:::\\\\____\\\\               \\\\:::\\\\____\\\\               \\\\::::/    /       \\r\\n                              ~~                      \\\\::/____/                \\\\::/    /                \\\\::/    /                \\\\::/    /        \\r\\n                                                                                \\\\/____/                  \\\\/____/                  \\\\/____/                                                                                                                                                                 \\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract IStakingProvider {\\r\\n    function getAccumulatedGemies(address user) external view returns (uint256) {}\\r\\n}\\r\\n\\r\\ncontract IAttackProvider {\\r\\n    function userToStolen(address user) external view returns(uint256) {}\\r\\n}\\r\\n\\r\\ncontract IBank {\\r\\n    function isAllowedToTransfer(address user, address recipient, uint256 amount) external view returns (bool) {}\\r\\n    function isAllowedToSpend(address user, uint256 amount) external view returns (bool) {}\\r\\n    function isAllowedToWithdraw(address user, uint256 amount) external view returns (bool) {}\\r\\n    function isAllowedToDeposit(address , uint256 amount) external view returns (bool) {}\\r\\n}\\r\\n\\r\\ncontract Gemies is ERC20, Ownable {\\r\\n    bool public withdrawalsEnabled;\\r\\n    bool public depositsEnabled;\\r\\n    bool public spendingEnabled;\\r\\n    bool public transfersEnabled;\\r\\n    bool public useBank;\\r\\n\\r\\n    mapping(address => bool) public yogiesOperator;\\r\\n    mapping(address => bool) public yogiesApprovalBypasser;\\r\\n\\r\\n    /// @dev track users ecosystem deposits and spendings\\r\\n    /// - first 128 bits are deposited balance\\r\\n    /// - last 128 bits are spent balance\\r\\n    mapping(address => uint256) public ecoSystemBalance;\\r\\n    mapping(address => uint256) public attackRewards;\\r\\n\\r\\n    IStakingProvider public stakingProvider;\\r\\n    IAttackProvider public attackProvider;\\r\\n    IBank public bank;\\r\\n\\r\\n    address public communityWallet;\\r\\n    uint256 public communityWalletAllocation;\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(yogiesOperator[msg.sender] || msg.sender == owner(), \\\"Sender not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _wallets,\\r\\n        uint256[] memory _amounts\\r\\n    ) ERC20(\\\"Gemies\\\", \\\"$Gemies\\\") {\\r\\n    }\\r\\n\\r\\n    function _getEcoSystemBalance(address user) \\r\\n        internal\\r\\n        view \\r\\n        returns (uint256) {\\r\\n            uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n            uint256 deposit = _getDepositBalance(ecoSystemData);\\r\\n            uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n            uint256 positiveBalance = stakingProvider.getAccumulatedGemies(user) + attackProvider.userToStolen(user) + deposit;\\r\\n\\r\\n            if (spent > positiveBalance)\\r\\n                return 0;\\r\\n            \\r\\n            return positiveBalance - spent;\\r\\n        }\\r\\n\\r\\n    function depositInEcosystem(uint256 amount) external {\\r\\n        require(depositsEnabled, \\\"Deposits disabled\\\");\\r\\n        if (useBank)\\r\\n            require(bank.isAllowedToDeposit(msg.sender, amount), \\\"Deposit not allowed by bank\\\");\\r\\n\\r\\n        require(balanceOf(msg.sender) >= amount, \\\"Sender has not enough balance for deposit\\\");\\r\\n\\r\\n        _burn(msg.sender, amount);\\r\\n        \\r\\n        uint256 ecoSystemData = ecoSystemBalance[msg.sender];\\r\\n        uint256 deposited = _getDepositBalance(ecoSystemData);\\r\\n        uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n        ecoSystemBalance[msg.sender] = _getUpdatedEcoSystemBalance(deposited + amount, spent);\\r\\n    }\\r\\n\\r\\n    function withdrawFromEcosystem(uint256 amount) external {\\r\\n        require(withdrawalsEnabled, \\\"Withdrawals disabled\\\");\\r\\n        if (useBank)\\r\\n            require(bank.isAllowedToWithdraw(msg.sender, amount), \\\"Withdraw not allowed by bank\\\");\\r\\n\\r\\n        require(_getEcoSystemBalance(msg.sender) >= amount, \\\"Cannot withdraw more than available\\\");\\r\\n\\r\\n        _mint(msg.sender, amount);\\r\\n\\r\\n        uint256 ecoSystemData = ecoSystemBalance[msg.sender];\\r\\n        uint256 deposited = _getDepositBalance(ecoSystemData);\\r\\n        uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n        ecoSystemBalance[msg.sender] = _getUpdatedEcoSystemBalance(deposited, spent + amount);\\r\\n    }\\r\\n\\r\\n    function transferEcosystemBalance(uint256 amount, address to) external {\\r\\n        require(transfersEnabled, \\\"Transfers disabled\\\");\\r\\n        if (useBank)\\r\\n            require(bank.isAllowedToTransfer(msg.sender, to, amount), \\\"Transfer not allowed by bank\\\");\\r\\n\\r\\n        require(_getEcoSystemBalance(msg.sender) >= amount, \\\"Cannot transfer more than available\\\");\\r\\n\\r\\n        uint256 ecoSystemDataSender = ecoSystemBalance[msg.sender];\\r\\n        uint256 ecoSystemDataReceiver = ecoSystemBalance[to];\\r\\n\\r\\n        uint256 depositedSender = _getDepositBalance(ecoSystemDataSender);\\r\\n        uint256 spentSender = _getSpentBalance(ecoSystemDataSender);\\r\\n        \\r\\n        uint256 depositedReceiver = _getDepositBalance(ecoSystemDataReceiver);\\r\\n        uint256 spentReceiver = _getSpentBalance(ecoSystemDataReceiver);\\r\\n\\r\\n        ecoSystemBalance[msg.sender] = _getUpdatedEcoSystemBalance(depositedSender, spentSender + amount);\\r\\n        ecoSystemBalance[to] = _getUpdatedEcoSystemBalance(depositedReceiver + amount, spentReceiver);\\r\\n    }\\r\\n\\r\\n    function spendEcosystemBalance(uint256 amount, address user) external onlyOperator {\\r\\n        require(spendingEnabled, \\\"Spending disabled\\\");\\r\\n        if (useBank)\\r\\n            require(bank.isAllowedToSpend(msg.sender, amount), \\\"Spending not allowed by bank\\\");\\r\\n\\r\\n        require(_getEcoSystemBalance(user) >= amount, \\\"Cannot spend more than available\\\");\\r\\n\\r\\n        uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n        uint256 deposited = _getDepositBalance(ecoSystemData);\\r\\n        uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n        ecoSystemBalance[user] = _getUpdatedEcoSystemBalance(deposited, spent + amount);\\r\\n        ecoSystemBalance[communityWallet] += amount * communityWalletAllocation / 1000;\\r\\n    }\\r\\n\\r\\n    function registerAttack(address victim, uint256 amount) external onlyOperator {        \\r\\n        uint256 ecoSystemDataReceiver = ecoSystemBalance[victim];\\r\\n        \\r\\n        uint256 depositedReceiver = _getDepositBalance(ecoSystemDataReceiver);\\r\\n        uint256 spentReceiver = _getSpentBalance(ecoSystemDataReceiver);\\r\\n\\r\\n        ecoSystemBalance[victim] = _getUpdatedEcoSystemBalance(depositedReceiver, spentReceiver + amount);\\r\\n    }\\r\\n\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        if (!yogiesApprovalBypasser[spender]) {\\r\\n            super._spendAllowance(owner, spender, amount);\\r\\n        }       \\r\\n    }\\r\\n\\r\\n    /** === Getters === */\\r\\n    function _getDepositBalance(uint256 ecoSystemData) \\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256) {\\r\\n            return uint256(uint128(ecoSystemData));\\r\\n        }\\r\\n    \\r\\n    function _getSpentBalance(uint256 ecoSystemData) \\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256) {\\r\\n            return uint256(uint128(ecoSystemData >> 128));\\r\\n        }\\r\\n\\r\\n    function _getUpdatedEcoSystemBalance(uint256 deposited, uint256 spent)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256) {\\r\\n            uint256 data = deposited;\\r\\n            data |= spent << 128;\\r\\n            return data;\\r\\n        }\\r\\n\\r\\n    /** === View === */\\r\\n    function getEcoSystemBalance(address user) \\r\\n        external\\r\\n        view \\r\\n        returns (uint256) {\\r\\n            return _getEcoSystemBalance(user);\\r\\n        } \\r\\n\\r\\n    function getDeposited(address user)\\r\\n        external\\r\\n        view \\r\\n        returns (uint256) {\\r\\n            uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n            return _getDepositBalance(ecoSystemData);\\r\\n        }\\r\\n\\r\\n    function getSpent(address user)\\r\\n        external\\r\\n        view \\r\\n        returns (uint256) {\\r\\n            uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n            return _getSpentBalance(ecoSystemData);\\r\\n        }\\r\\n\\r\\n    function hasDebt(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (bool) {\\r\\n            uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n            uint256 deposit = _getDepositBalance(ecoSystemData);\\r\\n            uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n            uint256 positiveBalance = stakingProvider.getAccumulatedGemies(user) + attackProvider.userToStolen(user) + deposit;\\r\\n\\r\\n            return spent > positiveBalance;\\r\\n        }\\r\\n\\r\\n    function debtOfUser(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256) {\\r\\n            uint256 ecoSystemData = ecoSystemBalance[user];\\r\\n            uint256 deposit = _getDepositBalance(ecoSystemData);\\r\\n            uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n            uint256 positiveBalance = stakingProvider.getAccumulatedGemies(user) + attackProvider.userToStolen(user) + deposit;\\r\\n\\r\\n            if (spent > positiveBalance)\\r\\n                return spent - positiveBalance;\\r\\n\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n    /** === Only Owner === */\\r\\n\\r\\n    function airdropGemies(address to, uint256 amount) external onlyOwner {\\r\\n        uint256 ecoSystemData = ecoSystemBalance[to];\\r\\n        uint256 deposited = _getDepositBalance(ecoSystemData);\\r\\n        uint256 spent = _getSpentBalance(ecoSystemData);\\r\\n\\r\\n        ecoSystemBalance[to] = _getUpdatedEcoSystemBalance(deposited + amount, spent);\\r\\n    }\\r\\n\\r\\n    function setYogiesOperator(address _operator, bool isOperator)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            yogiesOperator[_operator] = isOperator;\\r\\n        }\\r\\n\\r\\n    function setYogiesApprovalBypasser(address _bypasser, bool isOperator)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            yogiesApprovalBypasser[_bypasser] = isOperator;\\r\\n        }\\r\\n\\r\\n    function setStakingProvider(address provider)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            stakingProvider = IStakingProvider(provider);\\r\\n        }\\r\\n    \\r\\n    function setAttackProvider(address provider)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            attackProvider = IAttackProvider(provider);\\r\\n        }\\r\\n\\r\\n    function setFlags(bool _withdrawals, bool _deposits, bool _spending, bool _transfers, bool _useBank, bool killSwitch)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            if (killSwitch) {\\r\\n                withdrawalsEnabled = false;\\r\\n                depositsEnabled = false;\\r\\n                spendingEnabled = false;\\r\\n                transfersEnabled = false;\\r\\n                useBank = false;\\r\\n            } else {\\r\\n                withdrawalsEnabled = _withdrawals;\\r\\n                depositsEnabled = _deposits;\\r\\n                spendingEnabled = _spending;\\r\\n                transfersEnabled = _transfers;\\r\\n                useBank = _useBank;\\r\\n            }\\r\\n        }\\r\\n\\r\\n    function setBank(address _bank) external onlyOwner {\\r\\n        bank = IBank(_bank);\\r\\n    }\\r\\n\\r\\n    function setCommunityWallet(address _wallet, uint256 allocation) external onlyOwner {\\r\\n        require(allocation <= 1000, \\\"Cannot have a higher allocation than 1000\\\");\\r\\n\\r\\n        communityWallet = _wallet;\\r\\n        communityWalletAllocation = allocation;\\r\\n    }\\r\\n\\r\\n    function withdrawEth(uint256 percentage, address _to)\\r\\n        external\\r\\n        onlyOwner {\\r\\n            payable(_to).transfer((address(this).balance * percentage) / 100);\\r\\n        }\\r\\n\\r\\n    function withdrawERC20(\\r\\n        uint256 percentage,\\r\\n        address _erc20Address,\\r\\n        address _to\\r\\n    ) external onlyOwner {\\r\\n        uint256 amountERC20 = ERC20(_erc20Address).balanceOf(address(this));\\r\\n        ERC20(_erc20Address).transfer(_to, (amountERC20 * percentage) / 100);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdropGemies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackProvider\",\"outputs\":[{\"internalType\":\"contract IAttackProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"attackRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWalletAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"debtOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositInEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ecoSystemBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEcoSystemBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasDebt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setAttackProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawals\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_deposits\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_spending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transfers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useBank\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"killSwitch\",\"type\":\"bool\"}],\"name\":\"setFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"setStakingProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bypasser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setYogiesApprovalBypasser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setYogiesOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"spendEcosystemBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingProvider\",\"outputs\":[{\"internalType\":\"contract IStakingProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferEcosystemBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yogiesApprovalBypasser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yogiesOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Gemies", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007826f257375846f4eee6e041d61e1874bbd5c584000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000d3c21bcecceda1000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}