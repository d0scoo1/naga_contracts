{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/NftMarketResaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libs/NftTokenHandler.sol\\\";\\nimport \\\"./libs/RoalityHandler.sol\\\";\\nimport \\\"./NftMarket.sol\\\";\\n\\ncontract NftMarketResaller is AccessControl {\\n  using SafeMath for uint256;\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n  enum SellMethod { NOT_FOR_SELL, FIXED_PRICE, SELL_TO_HIGHEST_BIDDER, SELL_WITH_DECLINING_PRICE, ACCEPT_OFFER }\\n  enum SellState { NONE, ON_SALE, PAUSED, SOLD, FAILED, CANCELED }\\n\\n  NftMarket market;\\n  uint256 public comission;\\n  uint256 public maxBookDuration;\\n  uint256 public minBookDuration;\\n\\n  constructor(NftMarket mainMarket) {\\n    market = mainMarket;\\n    comission = 25; // 25 / 1000 = 2.5%\\n    maxBookDuration = 86400 * 30 * 6; // six month\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(ADMIN_ROLE, msg.sender);\\n  }\\n  \\n  struct Book {\\n    bytes32 bookId;\\n    address erc20Contract;\\n    address nftContract;\\n    uint256 tokenId;\\n    uint256 price; // dealed price\\n    uint256[] priceOptions;\\n    SellMethod method;\\n    SellState state; // 0: NONE, 2: ON_SALE, 3: PAUSED\\n    address seller;\\n    address buyer;\\n    uint256 payableAmount;\\n  }\\n\\n  struct BookTiming {\\n    uint256 timestamp;\\n    uint256 beginTime;\\n    uint256 endTime;\\n  }\\n\\n  struct BookSummary {\\n    uint256 topAmount;\\n    address topBidder;\\n  }\\n\\n  struct BookShare {\\n    uint256 comission;\\n    uint256 roality;\\n  }\\n\\n  struct Bid {\\n    bytes32 bookId;\\n    address buyer;\\n    uint256 price;\\n    uint256 timestamp;\\n  }\\n\\n  mapping(bytes32 => Book) public books;\\n  mapping(bytes32 => BookTiming) public booktimes;\\n  mapping(bytes32 => BookSummary) public booksums;\\n  mapping(bytes32 => BookShare) public bookshares;\\n  mapping(bytes32 => Bid) public biddings;\\n\\n  event Booked(\\n    bytes32 bookId,\\n    address erc20Contract,\\n    address indexed nftContract,\\n    uint256 tokenId,\\n    address seller, \\n    SellMethod method,\\n    uint256[] priceOptions,\\n    uint256 beginTime,\\n    uint256 bookedTime,\\n    bytes32 indexed tokenIndex\\n  );\\n\\n  event Bidded(\\n    bytes32 bookId, \\n    address indexed nftContract,\\n    uint256 tokenId,\\n    address seller, \\n    address buyer, \\n    uint256 price,\\n    uint256 timestamp,\\n    bytes32 indexed tokenIndex\\n  );\\n\\n  event Dealed(\\n    address erc20Contract,\\n    address indexed nftContract,\\n    uint256 tokenId,\\n    address seller, \\n    address buyer, \\n    SellMethod method,\\n    uint256 price,\\n    uint256 comission,\\n    uint256 roality,\\n    uint256 dealedTime,\\n    bytes32 referenceId,\\n    bytes32 indexed tokenIndex\\n  );\\n\\n  event Failed(\\n    address indexed nftContract,\\n    uint256 tokenId,\\n    address seller, \\n    address buyer, \\n    SellMethod method,\\n    uint256 price,\\n    uint256 timestamp,\\n    bytes32 referenceId,\\n    bytes32 indexed tokenIndex\\n  );\\n\\n  modifier isBiddable(bytes32 bookId) {\\n    require(books[bookId].state == SellState.ON_SALE, \\\"Not on sale.\\\");\\n    require(books[bookId].method == SellMethod.SELL_TO_HIGHEST_BIDDER, \\\"This sale didn't accept bidding.\\\");\\n    require(booktimes[bookId].beginTime <= block.timestamp, \\\"Auction not start yet.\\\");\\n    require(booktimes[bookId].endTime > block.timestamp, \\\"Auction finished.\\\");\\n    _;\\n  }\\n\\n  modifier isBuyable(bytes32 bookId) {\\n    require(books[bookId].state == SellState.ON_SALE, \\\"Not on sale.\\\");\\n    require(\\n      books[bookId].method == SellMethod.FIXED_PRICE || \\n      books[bookId].method == SellMethod.SELL_WITH_DECLINING_PRICE, \\n      \\\"Sale not allow direct purchase.\\\");\\n    require(booktimes[bookId].beginTime <= block.timestamp, \\\"This sale is not availble yet.\\\");\\n    require(booktimes[bookId].endTime > block.timestamp, \\\"This sale has expired.\\\");\\n    _;\\n  }\\n\\n  modifier isValidBook(bytes32 bookId) {\\n    _validateBook(bookId);\\n    _;\\n  }\\n\\n  modifier onlySeller(bytes32 bookId) {\\n    require(books[bookId].seller == msg.sender, \\\"Only seller may modify the sale\\\");\\n    _;\\n  }\\n\\n  function _validateBook(bytes32 bookId) private view {\\n    \\n    require(\\n      address(books[bookId].nftContract) != address(0), \\n      \\\"NFT Contract unavailable\\\");\\n\\n    require(\\n      market.isNftApproved(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId, \\n        books[bookId].seller), \\n      \\\"Owner hasn't grant permission for sell\\\");\\n\\n    require(booktimes[bookId].endTime > booktimes[bookId].beginTime, \\n      \\\"Duration setting incorrect\\\");\\n    \\n    if(books[bookId].method == SellMethod.FIXED_PRICE) {\\n      require(books[bookId].priceOptions.length == 1, \\\"Price format incorrect.\\\");\\n      require(books[bookId].priceOptions[0] > 0, \\\"Price must greater than zero.\\\");\\n    }\\n\\n    if(books[bookId].method == SellMethod.SELL_TO_HIGHEST_BIDDER) {\\n      require(books[bookId].priceOptions.length == 2, \\\"Price format incorrect.\\\");\\n      require(books[bookId].priceOptions[1] >= books[bookId].priceOptions[0], \\\"Reserve price must not less then starting price.\\\");\\n    }\\n\\n    if(books[bookId].method == SellMethod.SELL_WITH_DECLINING_PRICE) {\\n      require(books[bookId].priceOptions.length == 2, \\\"Price format incorrect.\\\");\\n      require(books[bookId].priceOptions[0] > books[bookId].priceOptions[1], \\\"Ending price must less then starting price.\\\");\\n    }\\n  }\\n\\n  function index(address nftContract, uint256 tokenId) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(nftContract, tokenId));\\n  }\\n\\n  // this index ensure each book won't repeat\\n  function bookIndex(address nftContract, uint256 tokenId, uint256 timestamp) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(nftContract, tokenId, timestamp));\\n  }\\n\\n  function bidIndex(bytes32 bookId, uint256 beginTime, address buyer) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(bookId, beginTime, buyer));\\n  }\\n\\n  function decliningPrice(\\n    uint256 beginTime,\\n    uint256 endTime,\\n    uint256 startingPrice,\\n    uint256 endingPrice,\\n    uint256 targetTime\\n  ) public pure returns (uint256) {\\n      return startingPrice.sub(\\n        targetTime.sub(beginTime)\\n        .mul(startingPrice.sub(endingPrice))\\n        .div(endTime.sub(beginTime)));\\n  }\\n\\n\\n  function book(\\n    address erc20Contract,\\n    address nftContract, \\n    uint256 tokenId, \\n    uint256 beginTime,\\n    uint256 endTime,\\n    SellMethod method, \\n    uint256[] memory priceOptions \\n    ) public payable returns (bytes32) {\\n    // todo: add list fee\\n    require(NftTokenHandler.isOwner(nftContract, tokenId, msg.sender), \\\"Callee doesn't own this token\\\");\\n    require(market.isNftApproved(nftContract, tokenId, msg.sender), \\\"Not having approval of this token.\\\");\\n    require(beginTime > block.timestamp.sub(3600), \\\"Sell must not start 1 hour earilar than book time.\\\");\\n    require(endTime > block.timestamp.add(minBookDuration), \\\"Sell ending in less than 5 minute will be revert.\\\");\\n    require(endTime.sub(beginTime) < maxBookDuration, \\\"Exceed maximum selling duration.\\\");\\n\\n    bytes32 bookId = bookIndex(nftContract, tokenId, block.timestamp);\\n    \\n    books[bookId].bookId = bookId;\\n    books[bookId].erc20Contract = erc20Contract;\\n    books[bookId].nftContract = nftContract;\\n    books[bookId].tokenId = tokenId;\\n    books[bookId].priceOptions = priceOptions;\\n    books[bookId].method = method;\\n    books[bookId].state = SellState.ON_SALE;\\n    books[bookId].seller = msg.sender;\\n    booktimes[bookId].timestamp = block.timestamp;\\n    booktimes[bookId].beginTime = beginTime;\\n    booktimes[bookId].endTime = endTime;\\n    bookshares[bookId].comission = comission;\\n    bookshares[bookId].roality = RoalityHandler.roality(nftContract);\\n    \\n    _validateBook(bookId);\\n\\n    emit Booked(\\n      books[bookId].bookId, \\n      books[bookId].erc20Contract,\\n      books[bookId].nftContract,\\n      books[bookId].tokenId,\\n      books[bookId].seller,\\n      books[bookId].method,\\n      books[bookId].priceOptions,\\n      booktimes[bookId].beginTime,\\n      block.timestamp,\\n      index(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId)\\n      );\\n\\n    return bookId;\\n  }\\n\\n  function priceOf(bytes32 bookId) public view returns (uint256) {\\n    \\n    if(books[bookId].method == SellMethod.FIXED_PRICE) {\\n      return books[bookId].priceOptions[0];\\n    }\\n\\n    if(books[bookId].method == SellMethod.SELL_WITH_DECLINING_PRICE) {\\n      return decliningPrice(\\n        booktimes[bookId].beginTime,\\n        booktimes[bookId].endTime,\\n        books[bookId].priceOptions[0],\\n        books[bookId].priceOptions[1],\\n        block.timestamp\\n      );\\n    }\\n\\n    if(books[bookId].method == SellMethod.SELL_TO_HIGHEST_BIDDER) {\\n      return booksums[bookId].topAmount;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function priceOptionsOf(bytes32 bookId) public view returns (uint256[] memory) {\\n    return books[bookId].priceOptions;\\n  }\\n\\n  function pauseBook(bytes32 bookId) public onlySeller(bookId) {\\n    require(books[bookId].state == SellState.ON_SALE, \\\"Sale not available.\\\");\\n    books[bookId].state = SellState.PAUSED;\\n  }\\n\\n  function resumeBook(bytes32 bookId, uint256 endTime) public onlySeller(bookId) {\\n    require(books[bookId].state == SellState.PAUSED, \\\"Sale not paused.\\\");\\n    books[bookId].state = SellState.ON_SALE;\\n    booktimes[bookId].endTime = endTime;\\n  }\\n\\n  function _cancelBook(bytes32 bookId) private {\\n    require(\\n      books[bookId].state != SellState.SOLD &&\\n      books[bookId].state != SellState.FAILED &&\\n      books[bookId].state != SellState.CANCELED, \\n      \\\"Sale ended.\\\"\\n    );\\n    \\n    books[bookId].buyer = address(0);\\n    booktimes[bookId].endTime = block.timestamp;\\n    books[bookId].state = SellState.CANCELED;\\n\\n    emit Failed(\\n      books[bookId].nftContract, \\n      books[bookId].tokenId,\\n      books[bookId].seller, \\n      books[bookId].buyer,\\n      books[bookId].method, \\n      books[bookId].price,\\n      block.timestamp,\\n      bookId,\\n      index(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId)\\n    );\\n  }\\n\\n  function forceCancelBook(bytes32 bookId) public onlyRole(ADMIN_ROLE) {\\n    _cancelBook(bookId);\\n  }\\n\\n  function cancelBook(bytes32 bookId) public onlySeller(bookId) {\\n    _cancelBook(bookId);\\n  }\\n\\n  function bid(bytes32 bookId, uint256 price) public payable isValidBook(bookId) isBiddable(bookId) returns (bytes32) {\\n    require(market.isMoneyApproved(IERC20(books[bookId].erc20Contract), msg.sender, price), \\\"Allowance or balance not enough for this bid\\\");\\n    require(price >= books[bookId].priceOptions[0], \\\"Bid amount too low.\\\");\\n    require(price > booksums[bookId].topAmount, \\\"Given offer lower than top offer.\\\");\\n    \\n    bytes32 bidId = bidIndex(bookId, booktimes[bookId].beginTime, msg.sender);\\n    \\n    biddings[bidId].bookId = bookId;\\n    biddings[bidId].buyer = msg.sender;\\n    biddings[bidId].price = price;\\n    biddings[bidId].timestamp = block.timestamp;\\n\\n    if(biddings[bidId].price > booksums[bookId].topAmount) {\\n      booksums[bookId].topAmount = biddings[bidId].price;\\n      booksums[bookId].topBidder = biddings[bidId].buyer;\\n    }\\n\\n    emit Bidded(\\n      bookId,\\n      books[bookId].nftContract,\\n      books[bookId].tokenId,\\n      books[bookId].seller,\\n      biddings[bidId].buyer,\\n      biddings[bidId].price,\\n      biddings[bidId].timestamp,\\n      index(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId)\\n    );\\n\\n    return bidId;\\n  }\\n\\n  function endBid(bytes32 bookId) public isValidBook(bookId) {\\n    require(\\n      books[bookId].state != SellState.SOLD &&\\n      books[bookId].state != SellState.FAILED &&\\n      books[bookId].state != SellState.CANCELED, \\n      \\\"Sale ended.\\\"\\n    );\\n    require(books[bookId].method == SellMethod.SELL_TO_HIGHEST_BIDDER, \\\"Not an auction.\\\");\\n    require(block.timestamp > booktimes[bookId].endTime, \\\"Must end after auction finish.\\\");\\n\\n    uint256 topAmount = booksums[bookId].topAmount;\\n    address buyer = booksums[bookId].topBidder;\\n    \\n    books[bookId].price = topAmount;\\n    books[bookId].buyer = buyer;\\n    \\n    if(\\n      buyer == address(0) ||\\n      topAmount < books[bookId].priceOptions[1] || // low than reserved price\\n      market.isMoneyApproved(IERC20(books[bookId].erc20Contract), buyer, topAmount) == false ||\\n      IERC20(books[bookId].erc20Contract).balanceOf(buyer) < topAmount // buy money not enough\\n      ) {\\n        \\n      books[bookId].state = SellState.FAILED;\\n\\n      emit Failed(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId,\\n        books[bookId].seller, \\n        books[bookId].buyer,\\n        books[bookId].method, \\n        books[bookId].price,\\n        block.timestamp,\\n        bookId,\\n        index(\\n          books[bookId].nftContract, \\n          books[bookId].tokenId)\\n      );\\n      \\n      return;\\n    }\\n\\n    _deal(bookId);\\n\\n    books[bookId].state = SellState.SOLD;\\n  }\\n\\n  function buy(bytes32 bookId) public \\n    isValidBook(bookId) \\n    isBuyable(bookId) \\n    payable {\\n\\n    uint256 priceNow = priceOf(bookId);\\n\\n    if(books[bookId].erc20Contract == address(0)) {\\n\\n      require(msg.value >= priceNow, \\\"Incorrect payment value.\\\");\\n\\n      // return exchanges\\n      if(msg.value > priceNow) {\\n        payable(msg.sender).transfer(msg.value - priceNow);\\n      }\\n      \\n      books[bookId].payableAmount = priceNow;\\n\\n    }\\n\\n    books[bookId].price = priceNow;\\n    books[bookId].buyer = msg.sender;\\n    booktimes[bookId].endTime = block.timestamp;\\n\\n    _deal(bookId);\\n\\n    books[bookId].state = SellState.SOLD;\\n  }\\n\\n  function _deal(bytes32 bookId) private {\\n\\n    market.deal{value:books[bookId].payableAmount}(\\n      books[bookId].erc20Contract, \\n      books[bookId].nftContract, \\n      books[bookId].tokenId, \\n      books[bookId].seller, \\n      books[bookId].buyer, \\n      books[bookId].price, \\n      bookshares[bookId].comission, \\n      bookshares[bookId].roality, \\n      RoalityHandler.roalityAccount(books[bookId].nftContract),\\n      bookId\\n    );\\n\\n    emit Dealed(\\n      books[bookId].erc20Contract,\\n      books[bookId].nftContract,\\n      books[bookId].tokenId,\\n      books[bookId].seller,\\n      books[bookId].buyer,\\n      books[bookId].method,\\n      books[bookId].price,\\n      bookshares[bookId].comission,\\n      bookshares[bookId].roality,\\n      booktimes[bookId].endTime,\\n      bookId,\\n      index(\\n        books[bookId].nftContract, \\n        books[bookId].tokenId)\\n    );\\n  }\\n\\n  function alterFormula(\\n    uint256 _comission,\\n    uint256 _maxBookDuration,\\n    uint256 _minBookDuration\\n  ) public onlyRole(ADMIN_ROLE) {\\n    comission = _comission;\\n    maxBookDuration = _maxBookDuration;\\n    minBookDuration = _minBookDuration;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/libs/RoalityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"../libs/IRoality.sol\\\";\\n\\nlibrary RoalityHandler {\\n\\n  modifier hasRoality(address nftContract) {\\n    require(isSupportRoality(nftContract));\\n    _;\\n  }\\n\\n  function isSupportRoality(address nftContract) \\n    internal \\n    view \\n    returns (bool) {\\n    \\n      return IERC165(nftContract)\\n        .supportsInterface(\\n          type(IRoality).interfaceId\\n        );\\n\\n    }\\n\\n  function roalityAccount(address nftContract) \\n    internal \\n    view \\n    hasRoality(nftContract) \\n    returns (address) {\\n\\n      return IRoality(nftContract).roalityAccount();\\n\\n    }\\n\\n  function roality(address nftContract)\\n    internal\\n    view\\n    hasRoality(nftContract) \\n    returns (uint256) {\\n\\n      return IRoality(nftContract).roality();\\n\\n    }\\n\\n  function setRoalityAccount(address nftContract, address account)\\n    internal\\n    hasRoality(nftContract) {\\n\\n      IRoality(nftContract).setRoalityAccount(account);\\n\\n    }\\n\\n  function setRoality(address nftContract, uint256 thousandths)\\n    internal\\n    hasRoality(nftContract) {\\n\\n      IRoality(nftContract).setRoality(thousandths);\\n      \\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/libs/NftTokenHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\nlibrary NftTokenHandler {\\n  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n  bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n  function isOwner(\\n      address nftContract, \\n      uint256 tokenId, \\n      address account \\n  ) internal view returns (bool) {\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC721)) {\\n        return IERC721(nftContract).ownerOf(tokenId) == account;\\n      }\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC1155)) {\\n        return IERC1155(nftContract).balanceOf(account, tokenId) > 0;\\n      }\\n\\n      return false;\\n\\n  }\\n\\n  function isApproved(\\n      address nftContract, \\n      uint256 tokenId, \\n      address owner, \\n      address operator\\n    ) internal view returns (bool) {\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC721)) {\\n        return IERC721(nftContract).getApproved(tokenId) == operator;\\n      }\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC1155)) {\\n        return IERC1155(nftContract).isApprovedForAll(owner, operator);\\n      }\\n\\n      return false;\\n    }\\n\\n  function transfer(\\n      address nftContract, \\n      uint256 tokenId, \\n      address from, \\n      address to, \\n      bytes memory data \\n    ) internal {\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC721)) {\\n        return IERC721(nftContract).safeTransferFrom(from, to, tokenId);\\n      }\\n\\n      if(IERC165(nftContract).supportsInterface(_INTERFACE_ID_ERC1155)) {\\n        return IERC1155(nftContract).safeTransferFrom(from, to, tokenId, 1, data);\\n      }\\n\\n      revert(\\\"Unidentified NFT contract.\\\");\\n    }\\n}\"\r\n    },\r\n    \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/libs/IRoality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0;\\n\\ninterface IRoality {\\n  function roalityAccount() external view returns (address);\\n  function roality() external view returns (uint256);\\n  function setRoalityAccount(address account) external;\\n  function setRoality(uint256 thousandths) external;\\n}\"\r\n    },\r\n    \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/NftMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./libs/NftTokenHandler.sol\\\";\\n\\ncontract NftMarket is AccessControl, ReentrancyGuard, Pausable {\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n  using SafeMath for uint256;\\n  address private serviceAccount;\\n  address private dealerOneTimeOperator;\\n  address public dealerContract;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(ADMIN_ROLE, msg.sender);\\n    serviceAccount = msg.sender;\\n    dealerOneTimeOperator = msg.sender;\\n  }\\n\\n  function alterServiceAccount(address account) public onlyRole(ADMIN_ROLE) {\\n    serviceAccount = account;\\n  }\\n\\n  function alterDealerContract(address _dealerContract) public {\\n    require(msg.sender == dealerOneTimeOperator, \\\"Permission Denied.\\\");\\n    dealerOneTimeOperator = address(0);\\n    dealerContract = _dealerContract;\\n  }\\n\\n  event Deal (\\n    address currency,\\n    address indexed nftContract,\\n    uint256 tokenId,\\n    address seller,\\n    address buyer,\\n    uint256 price,\\n    uint256 comission,\\n    uint256 roality,\\n    uint256 dealTime,\\n    bytes32 indexed tokenIndex,\\n    bytes32 indexed dealIndex\\n  );\\n\\n  function pause() public onlyRole(ADMIN_ROLE) {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyRole(ADMIN_ROLE) {\\n    _unpause();\\n  }\\n  \\n  function indexToken(address nftContract, uint256 tokenId) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(nftContract, tokenId));\\n  }\\n\\n  function indexDeal(bytes32 tokenIndex, address seller, address buyer, uint256 dealTime) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(tokenIndex, seller, buyer, dealTime));\\n  }\\n\\n  function isMoneyApproved(IERC20 money, address account, uint256 amount) public view returns (bool) {\\n    if (money.allowance(account, address(this)) >= amount) return true;\\n    if (money.balanceOf(account) >= amount) return true;\\n    return false;\\n  }\\n\\n  function isNftApproved(address nftContract, uint256 tokenId, address owner) public view returns (bool) {\\n    return NftTokenHandler.isApproved(nftContract, tokenId, owner, address(this));\\n  }\\n\\n  function _dealPayments(\\n    uint256 price,\\n    uint256 comission,\\n    uint256 roality\\n  ) private pure returns (uint256[3] memory) {\\n\\n    uint256 serviceFee = price\\n      .mul(comission).div(1000);\\n\\n    uint256 roalityFee = roality > 0 ? \\n      price.mul(roality).div(1000) : 0;\\n\\n    uint256 sellerEarned = price\\n      .sub(serviceFee)\\n      .sub(roalityFee);\\n\\n    return [sellerEarned, serviceFee, roalityFee];\\n  }\\n\\n  function _payByPayable(address[3] memory receivers, uint256[3] memory payments) private {\\n      \\n    if(payments[0] > 0) payable(receivers[0]).transfer(payments[0]); // seller : sellerEarned\\n    if(payments[1] > 0) payable(receivers[1]).transfer(payments[1]); // serviceAccount : serviceFee\\n    if(payments[2] > 0) payable(receivers[2]).transfer(payments[2]); // roalityAccount : roalityFee\\n      \\n  }\\n\\n  function _payByERC20(\\n    address erc20Contract, \\n    address buyer,\\n    uint256 price,\\n    address[3] memory receivers, \\n    uint256[3] memory payments) private {\\n    \\n    IERC20 money = IERC20(erc20Contract);\\n    require(money.balanceOf(buyer) >= price, \\\"Buyer doesn't have enough money to pay.\\\");\\n    require(money.allowance(buyer, address(this)) >= price, \\\"Buyer allowance isn't enough.\\\");\\n\\n    money.transferFrom(buyer, address(this), price);\\n    if(payments[0] > 0) money.transfer(receivers[0], payments[0]); // seller : sellerEarned\\n    if(payments[0] > 0) money.transfer(receivers[1], payments[1]); // serviceAccount : serviceFee\\n    if(payments[0] > 0) money.transfer(receivers[2], payments[2]); // roalityAccount : roalityFee\\n\\n  }\\n\\n  function deal(\\n    address erc20Contract,\\n    address nftContract,\\n    uint256 tokenId,\\n    address seller,\\n    address buyer,\\n    uint256 price,\\n    uint256 comission,\\n    uint256 roality,\\n    address roalityAccount,\\n    bytes32 dealIndex\\n  ) \\n    public \\n    nonReentrant \\n    whenNotPaused\\n    payable\\n  {\\n    require(msg.sender == dealerContract, \\\"Permission Denied.\\\");\\n    require(isNftApproved(nftContract, tokenId, seller), \\\"Doesn't have approval of this token.\\\");\\n    \\n    uint256[3] memory payments = _dealPayments(price, comission, roality);\\n    \\n    if(erc20Contract == address(0) && msg.value > 0) {\\n      require(msg.value == price, \\\"Payment amount incorrect.\\\");\\n      _payByPayable([seller, serviceAccount, roalityAccount], payments);\\n    } else {\\n      _payByERC20(erc20Contract, buyer, price, [seller, serviceAccount, roalityAccount], payments);\\n    }\\n\\n    NftTokenHandler.transfer(nftContract, tokenId, seller, buyer, abi.encodePacked(dealIndex));\\n    \\n    emit Deal(\\n      erc20Contract,\\n      nftContract,\\n      tokenId,\\n      seller,\\n      buyer,\\n      price,\\n      payments[1],\\n      payments[2],\\n      block.timestamp,\\n      indexToken(nftContract, tokenId),\\n      dealIndex\\n    );\\n  }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/libs/NftTokenHandler.sol\": {\r\n        \"NftTokenHandler\": \"0xCf77B85fCcAc5fb0C9293948ED1F34cE9870F551\"\r\n      },\r\n      \"/Users/johnson/Documents/02.Projects/nft-market/contracts/contracts/libs/RoalityHandler.sol\": {\r\n        \"RoalityHandler\": \"0x0d0242D03e5920f4e0bF9Bb799e85B01c4c650Bc\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract NftMarket\",\"name\":\"mainMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenIndex\",\"type\":\"bytes32\"}],\"name\":\"Bidded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NftMarketResaller.SellMethod\",\"name\":\"method\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"priceOptions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bookedTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenIndex\",\"type\":\"bytes32\"}],\"name\":\"Booked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NftMarketResaller.SellMethod\",\"name\":\"method\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roality\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenIndex\",\"type\":\"bytes32\"}],\"name\":\"Dealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NftMarketResaller.SellMethod\",\"name\":\"method\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenIndex\",\"type\":\"bytes32\"}],\"name\":\"Failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_comission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBookDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBookDuration\",\"type\":\"uint256\"}],\"name\":\"alterFormula\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"bidIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"biddings\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enum NftMarketResaller.SellMethod\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"priceOptions\",\"type\":\"uint256[]\"}],\"name\":\"book\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"bookIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"books\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum NftMarketResaller.SellMethod\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"enum NftMarketResaller.SellState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bookshares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roality\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"booksums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"booktimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"cancelBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTime\",\"type\":\"uint256\"}],\"name\":\"decliningPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"endBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"forceCancelBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"index\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBookDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBookDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"pauseBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"}],\"name\":\"priceOptionsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bookId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"resumeBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NftMarketResaller", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d86fd4ccfc1ca277d8c6c20f232542cf5714b06", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}