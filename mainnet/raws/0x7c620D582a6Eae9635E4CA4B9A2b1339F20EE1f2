{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n}\r\n\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override payable{\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override payable{\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override payable{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n       // emit Transfer(address(0), to, tokenId); // tady povolit\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ninterface ITOKEN {\r\n    function firstOwnner(address owner) external view returns (uint balance);\r\n}\r\n\r\n\r\ncontract VAR is ITOKEN {\r\n    address owner;\r\n    uint mainGoalAmount = 20000000000000000;\r\n\r\n    uint8 actualPhase = 0;\r\n    uint totalMintedTokens = 0;\r\n    \r\n    address[] public hodlers;\r\n    mapping(address => uint) public hodlersIndex;\r\n    \r\n    uint[] VIPIndexes;\r\n    mapping(uint256 => uint) sellingPrice;\r\n    mapping(address => uint) firstOwnners;\r\n    \r\n    struct Phase {\r\n        uint tokensAmount;\r\n        uint prizesAmount;\r\n        uint price;\r\n        uint prize;\r\n        address[] buyers;\r\n        uint[] winners;\r\n        uint toGoalWallet;\r\n    }\r\n    \r\n    uint nonce = 0;\r\n    function random(uint participants, address salt) internal returns(uint) {\r\n        nonce++;\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, salt, nonce))) % participants;\r\n    }\r\n    \r\n    Phase[] phases;\r\n    \r\n    constructor() {\r\n        address[] memory emptyAddressesArray;\r\n        uint[] memory emptyWinners;\r\n        phases.push(Phase(1, 1, 1000000000000000, 1500000000000000, emptyAddressesArray, emptyWinners, 19705000000000000));//1\r\n        phases.push(Phase(1, 1, 1000000000000000, 20000000000000000, emptyAddressesArray, emptyWinners, 8790000000000000));//2\r\n        phases.push(Phase(2, 1, 23600000000000000, 40000000000000000, emptyAddressesArray, emptyWinners, 22124000000000000));//3\r\n        phases.push(Phase(3, 1, 38200000000000000, 100000000000000000, emptyAddressesArray, emptyWinners, 22871333333333300));//4\r\n        phases.push(Phase(5, 1, 50000000000000000, 200000000000000000, emptyAddressesArray, emptyWinners, 25900000000000000));//5\r\n        phases.push(Phase(8, 1, 61800000000000000, 400000000000000000, emptyAddressesArray, emptyWinners, 26962000000000000));//6\r\n        phases.push(Phase(13, 1, 78600000000000000, 786000000000000000, emptyAddressesArray, emptyWinners, 30701692307692300));//7\r\n        phases.push(Phase(21, 1, 161800000000000000, 1618000000000000000, emptyAddressesArray, emptyWinners, 70003904761904800));//8\r\n        phases.push(Phase(34, 1, 218000000000000000, 2180000000000000000, emptyAddressesArray, emptyWinners, 110790588235294000));//9\r\n        phases.push(Phase(55, 1, 236000000000000000, 2360000000000000000, emptyAddressesArray, emptyWinners, 133923636363636000));//10\r\n        phases.push(Phase(89, 2, 382000000000000000, 3820000000000000000, emptyAddressesArray, emptyWinners, 194732808988764000));//11\r\n        phases.push(Phase(144, 3, 500000000000000000, 5000000000000000000, emptyAddressesArray, emptyWinners, 253541666666667000));//12\r\n        phases.push(Phase(233, 5, 618000000000000000, 6180000000000000000, emptyAddressesArray, emptyWinners, 306375364806867000));//13\r\n        phases.push(Phase(377, 8, 786000000000000000, 7860000000000000000, emptyAddressesArray, emptyWinners, 385333633952255000));//14\r\n        phases.push(Phase(610, 13, 1618000000000000000, 16180000000000000000, emptyAddressesArray, emptyWinners, 771176393442623000));//15\r\n        phases.push(Phase(987, 21, 2618000000000000000, 26180000000000000000, emptyAddressesArray, emptyWinners, 1235977446808510000));//16\r\n        phases.push(Phase(1579, 34, 3618000000000000000, 36180000000000000000, emptyAddressesArray, emptyWinners, 1694980481317290000));//17\r\n        phases.push(Phase(2584, 55, 4236000000000000000, 42360000000000000000, emptyAddressesArray, emptyWinners, 1987281021671830000));//18\r\n        phases.push(Phase(4181, 89, 6872300000000000000, 68723000000000000000, emptyAddressesArray, emptyWinners, 3211551348242050000));//19\r\n    }\r\n    \r\n    function info() public view returns(uint ActualPhase, uint TotalMintedTokens, uint MainGoalWei, uint TotalWei){\r\n        return (actualPhase, totalMintedTokens, mainGoalAmount, address(this).balance);\r\n    }\r\n    \r\n    function firstOwnner(address ownerAddress) external view  override returns (uint balance){\r\n        require(ownerAddress != address(0), \"ITOKEN: balance query for the zero address\");\r\n        return firstOwnners[ownerAddress];\r\n    }\r\n}\r\n\r\n\r\ncontract DRAW is VAR {\r\n    event DrawLots (uint8 phase, address[] winners, uint amount, uint[] winnerIndexes);\r\n\r\n    function drawLots() public {\r\n        require(phases[actualPhase].tokensAmount == 0, \"Not all tokens were sold in the actual phase\");\r\n        uint[] memory winnerIndexes = new uint[](phases[actualPhase].prizesAmount);\r\n        address[] memory winners = new address[](phases[actualPhase].prizesAmount);\r\n        \r\n        for(uint16 i = 0; i < phases[actualPhase].prizesAmount; i++){\r\n            winnerIndexes[i] = random( phases[actualPhase].buyers.length, phases[actualPhase].buyers[i]);\r\n            winners[i] = phases[actualPhase].buyers[winnerIndexes[i]];\r\n            phases[actualPhase].winners.push(winnerIndexes[i]);\r\n            payable(winners[i]).transfer(phases[actualPhase].prize);\r\n        }\r\n        emit DrawLots(actualPhase, winners, phases[actualPhase].prize, winnerIndexes);\r\n        actualPhase++;\r\n    }\r\n    \r\n}\r\n\r\n\r\nabstract contract GOALS is VAR, ERC721 {\r\n    \r\n    event GoalReached (uint16 owningTokens, address winner, uint amount);\r\n    event WinHodlers (uint8 index, address[] winners, uint amount);\r\n    \r\n    uint goalsReached = 0;\r\n    uint16[12] goalsInTokens = [54, 109, 218, 327, 546, 874, 1420, 2294, 3715, 6009, 9725, 10927];\r\n    uint16[11] goalPrizes = [890, 550, 340, 210, 130, 80, 50, 30, 20, 10, 10];\r\n    \r\n    uint8[19] VIPsInPhases = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];\r\n    \r\n    \r\n    uint8 public actualHolderPriceIndex = 0;\r\n    uint[10] holdersPrices = [10, 20, 22, 23, 24, 25, 26, 27, 28, 29];\r\n\r\n\r\n    function checkGoalReached(address payable testedAddress) internal {\r\n        uint256 amount = balanceOf(testedAddress);\r\n        if(goalsReached < 11 && amount >= goalsInTokens[goalsReached]){\r\n            uint prize = mainGoalAmount * goalPrizes[goalsReached] / 1000;\r\n            testedAddress.transfer(prize);\r\n            mainGoalAmount -= prize;\r\n            emit GoalReached(goalsInTokens[goalsReached], testedAddress, prize);\r\n            goalsReached++;\r\n        } else if(goalsReached == 11 && amount >= goalsInTokens[goalsReached]){\r\n            testedAddress.transfer(mainGoalAmount);\r\n            emit GoalReached(10927, testedAddress, mainGoalAmount);\r\n            mainGoalAmount -= mainGoalAmount;\r\n            goalsReached++;\r\n        }\r\n    }\r\n    \r\n    mapping(address => uint8) isWinner;\r\n    \r\n    function drawHodlers() public {\r\n        require(actualHolderPriceIndex < holdersPrices.length, \"No prizes for hodlers\");\r\n        require(owner == msg.sender, \"Function is only for owner\");\r\n        uint countOfWinners = hodlers.length < 100 ? hodlers.length : 100;\r\n        address[] memory winners = new address[](countOfWinners);\r\n        uint prize = mainGoalAmount * holdersPrices[actualHolderPriceIndex] / 100000;\r\n        uint index;\r\n        address winner;\r\n        uint8 maxRandoms;\r\n        \r\n        for(uint8 p = 0; p < countOfWinners; p++){\r\n            maxRandoms = 10;\r\n            do {\r\n                index = random( countOfWinners, hodlers[hodlers.length/2] );\r\n                winner = hodlers[index];\r\n            } while (isWinner[winner] == actualHolderPriceIndex + 1 && maxRandoms-- > 1);\r\n            isWinner[winner] = actualHolderPriceIndex+1;\r\n            winners[p] = hodlers[index];\r\n            payable(winner).transfer(prize);\r\n            mainGoalAmount -= prize;\r\n        }\r\n        \r\n        emit WinHodlers(actualHolderPriceIndex, winners, prize);\r\n        actualHolderPriceIndex++;\r\n    }\r\n}\r\n\r\n\r\nabstract contract BUYPIX is VAR, ERC721, DRAW, GOALS {\r\n    \r\n    constructor() {\r\n    \r\n    }\r\n    \r\n    event TokenPurchased (uint8 oldPhase, uint8 actualPhase, uint256 first, uint256 count, address newOwner, uint price);\r\n    event VIPFounded (uint[] tokenIds, uint returnAmount, address owner, uint8 phase);\r\n    \r\n    receive() external payable { }\r\n    \r\n    function beforeBuyTokens (uint weiAmount) public view returns(bool, string memory, uint){\r\n        uint tokens = weiAmount / phases[actualPhase].price;\r\n        uint rest = weiAmount % phases[actualPhase].price;\r\n        if(0 == tokens)\r\n            return( true, \"Not enough wei to buy a token\",tokens);\r\n        if(rest > 0)\r\n            return( true, \"Please send exact amount of wei\",tokens);\r\n        if(phases[actualPhase].tokensAmount < tokens)\r\n            return( true, \"Not enough tokens in actual phase\",tokens);\r\n        if(totalMintedTokens >= 10927)\r\n            return( true, \"All tokens purchased\",tokens);\r\n\r\n        return(false, \"ok\",tokens);\r\n    }\r\n    \r\n    \r\n    \r\n    function buyTokens() public payable {\r\n        (bool error, , uint tokens) = beforeBuyTokens(msg.value);\r\n        \r\n        require(!error, \"Error, use method beforeBuyTokens(uint weiAmount)\");\r\n\r\n\r\n        uint oldTokenIndex = totalMintedTokens;\r\n        uint returnAmount = 0;\r\n        \r\n        if(_balances[msg.sender] == 0){\r\n            hodlersIndex[msg.sender] = hodlers.length;\r\n            hodlers.push(msg.sender);\r\n        }\r\n        \r\n        for(uint i = 0; i < tokens; i++){\r\n            _safeMint(msg.sender , totalMintedTokens+i); \r\n            mainGoalAmount = mainGoalAmount + phases[actualPhase].toGoalWallet - 20000000000000000;\r\n            phases[actualPhase].buyers.push(msg.sender);\r\n\r\n            checkGoalReached(payable(msg.sender));\r\n\r\n            if(VIPsInPhases[actualPhase] > 0){ \r\n                uint8 isWin = phases[actualPhase].tokensAmount <= VIPsInPhases[actualPhase]? 1 : randomVIP(msg.sender, actualPhase, totalMintedTokens);\r\n                if(isWin == 1){\r\n                    VIPsInPhases[actualPhase]--;\r\n                    VIPIndexes.push(totalMintedTokens+i);\r\n                    returnAmount += phases[actualPhase].price / 2;\r\n                }\r\n            }\r\n            phases[actualPhase].tokensAmount--;\r\n        }\r\n        \r\n        if(returnAmount > 0){\r\n            payable(msg.sender).transfer(returnAmount);\r\n            emit VIPFounded(VIPIndexes, returnAmount, msg.sender, actualPhase);\r\n            delete VIPIndexes;\r\n        }\r\n        \r\n        totalMintedTokens += tokens;\r\n        firstOwnners[msg.sender] += tokens;\r\n\r\n        uint8 oldPhase = actualPhase;\r\n\r\n\r\n        if(phases[actualPhase].tokensAmount == 0){\r\n            drawLots();\r\n        }\r\n        \r\n        emit TokenPurchased(oldPhase, actualPhase, oldTokenIndex, tokens, msg.sender, phases[actualPhase].price);\r\n    }\r\n    \r\n    function randomVIP(address salt, uint8 phase, uint lastToken) view internal returns(uint8) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, salt, phase, lastToken))) % 2);\r\n    }\r\n}\r\n\r\n\r\ncontract VOTING is VAR {\r\n\r\n    event Vote(ActionType actionType, uint proposalIndex, address addr, uint8 vote);\r\n    event FinishVoting(ActionType actionType, bool result, uint proposalIndex);\r\n    event ProposalCreated(uint endTime, ActionType actionType, address actionAddress, uint8[] percents, address[] addresses, uint amount, uint proposalIndex);\r\n    \r\n    enum ActionType {add_voter, remove_voter, set_percent, eth_emission}\r\n\r\n    struct VoteStatus {\r\n        address participant;\r\n        uint8 vote; // 0 no 1 yes 2 resignation\r\n    }\r\n    \r\n    struct Proposal {\r\n        uint endTime;\r\n        uint8 result; // 0 no 1 yes 2 notFinished\r\n        ActionType actionType; // 0 add 1 remove participant 2 transfer ETH\r\n        address actionAddress; // Add/Remove participant or transfer address\r\n        uint8[] percents;\r\n        address[] addresses;\r\n        uint amount; // amount of transfered Wei\r\n        address[] voters;\r\n        uint8[] votes;\r\n    }\r\n\r\n    struct ParticipantVote {\r\n        address addr;\r\n        uint8 vote;\r\n    }\r\n    \r\n    address[] public participants;\r\n    mapping(address => uint8) participantPercent;\r\n    Proposal[] proposals;\r\n    \r\n    VoteStatus[] status;\r\n    \r\n    constructor() {\r\n        address one = 0xdD5775D8F839bDEEc91a0f7E47f3423752Ed6e4F;\r\n        address two = 0x9d269611ae44bB242416Ed78Dc070Bf5449385Ae;\r\n        participants.push(one);\r\n        participants.push(two);\r\n        participantPercent[one] = 50;\r\n        participantPercent[two] = 50;\r\n    }\r\n    \r\n    //receive() external payable { }\r\n\r\n    function beforeCreateProposal(ActionType _actionType, address _actionAddress, uint8[] memory _percents, address[] memory _addresses, address _senderAddress) public view returns(bool, string memory) {\r\n\r\n        if(findParticipantIndex(_senderAddress) == 0)\r\n            return(true, \"You are not in participant\");\r\n            \r\n        if(uint(_actionType) < 2) {\r\n            uint index = findParticipantIndex(_actionAddress);\r\n            if(_actionType == ActionType.add_voter && index != 0)\r\n                return(true, \"This participant already exist\");\r\n            if(_actionType == ActionType.remove_voter){\r\n                if(participantPercent[_actionAddress] > 0)\r\n                    return(true, \"The participant to delete must have zero percent\");\r\n                if(index == 0)\r\n                    return(true, \"This is not participant address\");\r\n                if(participants.length <= 2)\r\n                    return(true, \"Minimal count of participants is 2\");\r\n            }\r\n        }\r\n        if(_actionType == ActionType.set_percent){\r\n            if(_percents.length != participants.length)\r\n                return(true, \"Wrong percents length\");\r\n            if(_addresses.length != participants.length)\r\n                return(true, \"Wrong addresses length\");\r\n            uint8 total = 0;\r\n            for(uint i = 0; _percents.length > i; i++){\r\n                total += _percents[i];\r\n            }\r\n            if(total != 100)\r\n                return(true, \"The sum of the percentages must be 100\");\r\n        }\r\n        return(false, \"ok\");\r\n    }\r\n    \r\n    function createProposal( ActionType _actionType, address _actionAddress, uint8[] memory _percents, address[] memory _addresses, uint _amount) public {\r\n        (bool error, string memory message) = beforeCreateProposal(_actionType, _actionAddress, _percents, _addresses, msg.sender);\r\n        require (!error, message);\r\n\r\n        uint time = block.timestamp + (3 * 24 hours); // Three days\r\n        address[] memory emptyVoters;\r\n        uint8[] memory emptyVotes;\r\n        proposals.push(\r\n            Proposal(time, 2,  _actionType, _actionAddress, _percents, _addresses, _amount, emptyVoters, emptyVotes)\r\n        );\r\n        emit ProposalCreated(time, _actionType, _actionAddress, _percents, _addresses, _amount, proposals.length-1);\r\n    }\r\n    \r\n    function beforeVoteInProposal (uint proposalIndex, address senderAddress) public view returns(bool error, string memory description) {\r\n        uint index = findParticipantIndex(senderAddress);\r\n        if(index == 0)\r\n            return(true, \"You are not in participant\");\r\n        if(proposals.length <= proposalIndex)\r\n            return(true, \"Proposal not exist\");\r\n        if(proposals[proposalIndex].result != 2)\r\n            return(true, \"Proposal finished\");\r\n        if(block.timestamp >= proposals[proposalIndex].endTime)\r\n            return(true, \"Time for voting is out\");\r\n\r\n        for(uint i = 0; proposals[proposalIndex].voters.length > i; i++){\r\n            if(proposals[proposalIndex].voters[i] == senderAddress){\r\n                return(true, \"You are already voted\");\r\n            }\r\n        }\r\n        return(false, \"ok\");\r\n    }\r\n\r\n    function voteInProposal (uint proposalIndex, uint8 vote) public{\r\n        (bool error, string memory message) = beforeVoteInProposal(proposalIndex, msg.sender);\r\n        require (!error, message);\r\n        proposals[proposalIndex].voters.push(msg.sender);\r\n        proposals[proposalIndex].votes.push(vote);\r\n        emit Vote(proposals[proposalIndex].actionType, proposalIndex, msg.sender, vote);\r\n    }\r\n\r\n    function beforeFinishProposal (uint proposalIndex, address senderAddress) public view \r\n    returns(bool error, string memory message, uint votedYes, uint votedNo) {\r\n        uint index = findParticipantIndex(senderAddress);\r\n        uint _votedYes = 0;\r\n        uint _votedNo = 0;\r\n        \r\n        for(uint i = 0; proposals[proposalIndex].voters.length > i; i++){\r\n            if(proposals[proposalIndex].votes[i] == 1)\r\n                _votedYes++;\r\n            if(proposals[proposalIndex].votes[i] == 0)\r\n                _votedNo++;\r\n        }\r\n\r\n        if(index == 0)\r\n            return(true, \"You are not in participant\", _votedYes, _votedNo);\r\n        if(proposals[proposalIndex].actionType == ActionType.add_voter && findParticipantIndex(proposals[proposalIndex].actionAddress) > 0)\r\n            return(true, \"This participant already exist\", _votedYes, _votedNo);\r\n        if(proposals[proposalIndex].actionType == ActionType.remove_voter && participants.length == 2)\r\n            return(true, \"Minimal count of voted participants is 2\", _votedYes, _votedNo);\r\n        if(proposals[proposalIndex].actionType == ActionType.remove_voter && participantPercent[proposals[proposalIndex].actionAddress] > 0)\r\n            return(true, \"The participant to delete must have zero percent\", _votedYes, _votedNo);\r\n        if(proposals.length <= proposalIndex)\r\n            return(true, \"Proposal does not exist\", _votedYes, _votedNo);\r\n        if(proposals[proposalIndex].result != 2)\r\n            return(true, \"Voting has finished\", _votedYes, _votedNo);\r\n        if(block.timestamp <= proposals[proposalIndex].endTime && proposals[proposalIndex].voters.length != participants.length)\r\n            return(true, \"Voting is not finished\", _votedYes, _votedNo);\r\n            // Tady zm\u011bnit balance na konkr\u00e9tn\u00ed \u00fa\u010det\r\n        if(proposals[proposalIndex].actionType == ActionType.eth_emission && address(this).balance < proposals[proposalIndex].amount)\r\n            return(true, \"Low ETH balance\", _votedYes, _votedNo);    \r\n        \r\n        if(proposals[proposalIndex].voters.length <= participants.length - proposals[proposalIndex].voters.length) // Minimum participants on proposal\r\n            return(true, \"Count of voted participants must be more than 50%\", _votedYes, _votedNo);\r\n        return(false, \"ok\", _votedYes, _votedNo);\r\n    }\r\n    \r\n    function finishProposal(uint proposalIndex) public {\r\n        (bool error, string memory message, uint votedYes, uint votedNo) = beforeFinishProposal(proposalIndex, msg.sender);\r\n        require (!error, message);\r\n\r\n        proposals[proposalIndex].result = votedYes > votedNo? 1 : 0;\r\n\r\n        if(votedYes > votedNo){\r\n            if(proposals[proposalIndex].actionType == ActionType.add_voter){ // Add participant\r\n                participants.push(proposals[proposalIndex].actionAddress);\r\n            } \r\n            else if (proposals[proposalIndex].actionType == ActionType.remove_voter) { // Remove participant\r\n                uint index = findParticipantIndex(proposals[proposalIndex].actionAddress) - 1;\r\n                participants[index] = participants[participants.length-1]; // Copy last item on removed position and\r\n                participants.pop(); // remove last\r\n            }\r\n            else if (proposals[proposalIndex].actionType == ActionType.set_percent){\r\n                for(uint i = 0; proposals[proposalIndex].addresses.length > i; i++){\r\n                    participantPercent[proposals[proposalIndex].addresses[i]] = proposals[proposalIndex].percents[i];\r\n                }\r\n            }\r\n            else if (proposals[proposalIndex].actionType == ActionType.eth_emission) { // Transfer ETH\r\n                uint totalSend = proposals[proposalIndex].amount;\r\n                uint remains = totalSend;\r\n                for(uint i = 0; participants.length > i; i++){\r\n                    if(i < participants.length-1){\r\n                        payable(participants[i]).transfer(totalSend/100*participantPercent[participants[i]]);\r\n                        remains -= totalSend/100*participantPercent[participants[i]];\r\n                    }\r\n                    else\r\n                        payable(participants[i]).transfer(remains);\r\n                }\r\n               \r\n            }\r\n        }\r\n        emit FinishVoting(proposals[proposalIndex].actionType, votedYes > votedNo, proposalIndex);\r\n    }\r\n\r\n    function statusOfProposal (uint index) public view returns (address[] memory, uint8[] memory) {\r\n        require(proposals.length > index, \"Proposal at index not exist\");\r\n        return (proposals[index].voters, proposals[index].votes);\r\n    }\r\n    \r\n    function getProposal(uint index) public view returns( uint endTime, uint8 result, ActionType actionType, address actionAddress, \r\n    uint8[] memory percents, address[] memory addresses, uint amount, address[] memory voters, uint8[] memory votes) {\r\n        require(proposals.length > index, \"Proposal at index not exist\");\r\n        Proposal memory p = proposals[index];\r\n        return (p.endTime, p.result, p.actionType, p.actionAddress, p.percents, p.addresses, p.amount, p.voters, p.votes);\r\n    }\r\n\r\n    function proposalsLength () public view returns (uint) {\r\n        return proposals.length;\r\n    }\r\n\r\n    function participantsLength () public view returns (uint) {\r\n        return participants.length;\r\n    }\r\n    \r\n    function percentagePayouts () public view returns (address[] memory participantsAdresses, uint8[] memory percents) {\r\n        uint8[] memory pom = new uint8[](participants.length);\r\n        for(uint i = 0; participants.length > i; i++){\r\n            pom[i] = participantPercent[participants[i]];\r\n        }\r\n        return (participants, pom);\r\n    }\r\n    \r\n    function findParticipantIndex(address addr) private view returns (uint) {\r\n        for(uint i = 0; participants.length > i; i++){\r\n            if(participants[i] == addr)\r\n            return i+1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\ncontract DECENTRAL_ART is VAR, ERC721, DRAW, BUYPIX, VOTING {\r\n    \r\n    event PricesUpdated (uint256[] tokenIds, uint[] prices, address owner);\r\n    event TokensSold (uint[] tokenIds, uint[] tokenPrices, uint fee, address newOwner);\r\n    event ContractCreated (uint TransferFee, Phase[] Phases);\r\n    \r\n    uint transferFee = 15000;\r\n    \r\n    constructor() ERC721(\"Decentral ART\", \"ART\"){\r\n        owner = msg.sender;\r\n        \r\n        emit ContractCreated(transferFee, phases);\r\n    }\r\n    \r\n    function setTransferFee(uint fee) public {\r\n        require(owner == msg.sender, \"Function is only for owner\");\r\n        transferFee = fee;\r\n    }\r\n    \r\n    function getTransferFee() public view  returns (uint fee){\r\n        return transferFee;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public  override payable{\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        require(msg.value == transferFee, \"ART: not payed transfer fee. Please use method getTransferFee()\");\r\n        require(sellingPrice[tokenId] == 0, \"ART: token is set to sell. Please use method setSellingPrices() and set price to zero.\");\r\n        _transfer(from, to, tokenId);\r\n\r\n        uint[] memory tokens = new uint[](1);\r\n        uint[] memory prices = new uint[](1);\r\n        tokens[0] = tokenId;\r\n        prices[0] = 0;\r\n        emit TokensSold(tokens, prices, transferFee, to);\r\n        \r\n        if(_balances[to] == 0){\r\n            hodlersIndex[to] = hodlers.length;\r\n            hodlers.push(to);\r\n        }\r\n\r\n        checkGoalReached(payable(msg.sender));\r\n        checkHodler(msg.sender);\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override payable{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        require(msg.value == transferFee, \"ART: not payed transfer fee. Please use method getTransferFee()\");\r\n        require(sellingPrice[tokenId] == 0, \"ART: token is set to sell. Please use method setSellingPrices() and set price to zero.\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n\r\n        uint[] memory tokens = new uint[](1);\r\n        uint[] memory prices = new uint[](1);\r\n        tokens[0] = tokenId;\r\n        prices[0] = 0;\r\n        emit TokensSold(tokens, prices, transferFee, to);\r\n\r\n        if(_balances[to] == 0){\r\n            hodlersIndex[to] = hodlers.length;\r\n            hodlers.push(to);\r\n        }\r\n\r\n        checkGoalReached(payable(msg.sender));\r\n        checkHodler(msg.sender);\r\n    }\r\n    \r\n    function beforeSetSellingPrices(uint256[] memory tokenIds, uint[] memory prices) public view returns (bool error, string memory description){\r\n        if(tokenIds.length != prices.length)\r\n            return( true, \"Not same size of arrays\");\r\n        \r\n        for(uint256 i = 0; i < tokenIds.length; i++){\r\n            if(_owners[tokenIds[i]] != msg.sender){\r\n                return( true, \"You are not owner of selected tokens\");\r\n            }\r\n        }\r\n\r\n        return(false, \"ok\");\r\n    }\r\n    \r\n    function setSellingPrices(uint256[] memory tokenIds, uint[] memory prices) public {\r\n        (bool error,  ) = beforeSetSellingPrices(tokenIds, prices);\r\n        \r\n        require(!error, \"Error, use method beforeSetSellingPrices(uint256[] memory tokenIds, uint[] memory prices)\");\r\n        \r\n        for(uint256 i = 0; i < tokenIds.length; i++){\r\n            sellingPrice[tokenIds[i]] = prices[i];\r\n        }\r\n        emit PricesUpdated(tokenIds, prices, msg.sender);\r\n    }\r\n    \r\n    function beforeBuyOfferedTokens(uint256[] memory tokenIds, uint sendingETH) public view returns (bool error, string memory description, uint fee){\r\n        uint _price = 0;\r\n        uint _fee = 0;\r\n        for(uint256 i = 0; i < tokenIds.length; i++){\r\n            if(sellingPrice[tokenIds[i]] == 0){\r\n                return( true, \"One of the selected tokens is not for sale.\", _fee);\r\n            }\r\n            _price += sellingPrice[tokenIds[i]];\r\n        }\r\n        _fee = _price * 45;\r\n        _fee = _fee / 1000;\r\n        \r\n        if(sendingETH != _price + _fee)\r\n            return( true, \"You are sending wrong amount of ETH.\", _fee);\r\n            \r\n        return(false, \"ok\", _fee);\r\n    }\r\n    \r\n    function buyOfferedTokens(uint256[] memory tokenIds) payable public {\r\n        (bool error, ,uint256 fee) = beforeBuyOfferedTokens(tokenIds, msg.value);\r\n        require(!error, \"Error, use method beforeBuyOfferedTokens(uint256[] memory tokenIds, uint sendingETH)\");\r\n        \r\n        if(_balances[msg.sender] == 0){\r\n            hodlersIndex[msg.sender] = hodlers.length;\r\n            hodlers.push(msg.sender);\r\n        }\r\n        \r\n        uint[] memory tokenPrices = new uint[](tokenIds.length);\r\n        for(uint256 i = 0; i < tokenIds.length; i++){\r\n            address payable oldOwner = payable(_owners[tokenIds[i]]);\r\n             oldOwner.transfer(sellingPrice[tokenIds[i]]);\r\n             _transfer(oldOwner, msg.sender, tokenIds[i]);\r\n             \r\n             checkHodler(oldOwner);\r\n             \r\n             tokenPrices[i] = sellingPrice[tokenIds[i]];\r\n             sellingPrice[tokenIds[i]] = 0;\r\n        }\r\n        emit TokensSold(tokenIds, tokenPrices, fee, msg.sender);\r\n        mainGoalAmount += fee * 100 / 225;\r\n    }\r\n    \r\n    function checkHodler(address hodler) internal {\r\n        if(_balances[hodler] == 0){\r\n            uint index = hodlersIndex[hodler];\r\n            if(hodlers.length > 0 && hodlers[index] == hodler){\r\n                if(index < hodlers.length-1){\r\n                    hodlers[index] = hodlers[hodlers.length-1];\r\n                    hodlersIndex[hodlers[hodlers.length-1]] = index;\r\n                }\r\n                hodlers.pop();\r\n            }\r\n        }\r\n    }\r\n    \r\n    struct Owner {\r\n        address owner;\r\n        uint256[] winners;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TransferFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winners\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"toGoalWallet\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct VAR.Phase[]\",\"name\":\"Phases\",\"type\":\"tuple[]\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"phase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winnerIndexes\",\"type\":\"uint256[]\"}],\"name\":\"DrawLots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum VOTING.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"FinishVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"owningTokens\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PricesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VOTING.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"percents\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldPhase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"actualPhase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenPrices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"VIPFounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum VOTING.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinHodlers\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actualHolderPriceIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"sendingETH\",\"type\":\"uint256\"}],\"name\":\"beforeBuyOfferedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"beforeBuyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VOTING.ActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_actionAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_percents\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"beforeCreateProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"}],\"name\":\"beforeFinishProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votedYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votedNo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"beforeSetSellingPrices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"}],\"name\":\"beforeVoteInProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"buyOfferedTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VOTING.ActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_actionAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_percents\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawHodlers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawLots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"finishProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"firstOwnner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"enum VOTING.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actionAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"percents\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"votes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hodlers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ActualPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalMintedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MainGoalWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participantsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentagePayouts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"participantsAdresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"percents\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setSellingPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"statusOfProposal\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteInProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DECENTRAL_ART", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "220", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3bd8912cc7d192ab7ee7110988a1dbb2581040ba94a2db423281cd2e6505f45f"}]}