{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/market/client/nft/SeenHausNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/ISeenHausNFT.sol\\\";\\nimport \\\"../../../interfaces/IERC2981.sol\\\";\\nimport \\\"../MarketClientBase.sol\\\";\\nimport \\\"./SeenHausNFTStorage.sol\\\";\\n\\n/**\\n * @title SeenHausNFT\\n * @notice This is the Seen.Haus ERC-1155 NFT contract.\\n *\\n * Key features:\\n * - Supports the ERC-2981 NFT Royalty Standard\\n * - Tracks the original creator of each token.\\n * - Tracks which tokens have a physical part\\n * - Logically capped token supplies; a token's supply cannot be increased after minting.\\n * - Only ESCROW_AGENT-roled addresses can mint physical NFTs.\\n * - Only MINTER-roled addresses can mint digital NFTs, e.g., Seen.Haus staff, approved artists.\\n * - Newly minted NFTs are automatically transferred to the MarketController and consigned\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ncontract SeenHausNFT is SeenHausNFTStorage, ISeenHausNFT, MarketClientBase, ERC1155Upgradeable {\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Initializer\\n     */\\n    function initialize(address _initOwner)\\n    public {\\n        __ERC1155_init(\\\"\\\");\\n        _transferOwnership(_initOwner);\\n    }\\n\\n    /**\\n     * @notice The nextToken getter\\n     * @dev does not increment counter\\n     */\\n    function getNextToken()\\n    external view override\\n    returns (uint256)\\n    {\\n        return nextToken;\\n    }\\n\\n    /**\\n     * @notice Get the info about a given token.\\n     *\\n     * @param _tokenId - the id of the token to check\\n     * @return tokenInfo - the info about the token. See: {SeenTypes.Token}\\n     */\\n    function getTokenInfo(uint256 _tokenId)\\n    external view override\\n    returns (Token memory tokenInfo)\\n    {\\n        return tokens[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Check if a given token id corresponds to a physical lot.\\n     *\\n     * @param _tokenId - the id of the token to check\\n     */\\n    function isPhysical(uint256 _tokenId)\\n    public view override\\n    returns (bool) {\\n        Token memory token = tokens[_tokenId];\\n        return token.isPhysical;\\n    }\\n\\n    /**\\n     * @notice Mint a given supply of a token, optionally flagging as physical.\\n     *\\n     * Token supply is sent to the MarketController.\\n     *\\n     * @param _supply - the supply of the token\\n     * @param _creator - the creator of the NFT (where the royalties will go)\\n     * @param _tokenURI - the URI of the token metadata\\n     * @param _royaltyPercentage - the percentage of royalty expected on secondary market sales\\n     * @param _isPhysical - whether the NFT should be flagged as physical or not\\n     */\\n    function mint(uint256 _supply, address payable _creator, string memory _tokenURI, uint16 _royaltyPercentage, bool _isPhysical)\\n    internal\\n    returns(Consignment memory consignment)\\n    {\\n        // Get the MarketController\\n        IMarketController marketController = getMarketController();\\n\\n        // Make sure royalty percentage is acceptable\\n        require(_royaltyPercentage <= marketController.getMaxRoyaltyPercentage(), \\\"Royalty percentage exceeds marketplace maximum\\\");\\n\\n        // Get the next token id\\n        uint256 tokenId = nextToken++;\\n\\n        // Store the token info\\n        Token storage token = tokens[tokenId];\\n        token.id = tokenId;\\n        token.uri = _tokenURI;\\n        token.supply = _supply;\\n        token.creator = _creator;\\n        token.isPhysical = _isPhysical;\\n        token.royaltyPercentage = _royaltyPercentage;\\n\\n        // Mint the token, sending it to the MarketController\\n        _mint(address(marketController), tokenId, _supply, new bytes(0x0));\\n\\n        // Consign the token for the primary market\\n        consignment = marketController.registerConsignment(Market.Primary, msg.sender, _creator, address(this), tokenId, _supply);\\n    }\\n\\n    /**\\n     * @notice Mint a given supply of a token, marking it as physical.\\n     *\\n     * Entire supply must be minted at once.\\n     * More cannot be minted later for the same token id.\\n     * Can only be called by an address with the ESCROW_AGENT role.\\n     * Token supply is sent to the MarketController.\\n     *\\n     * @param _supply - the supply of the token\\n     * @param _creator - the creator of the NFT (where the royalties will go)\\n     * @param _tokenURI - the URI of the token metadata\\n     * @param _royaltyPercentage - the percentage of royalty expected on secondary market sales\\n     *\\n     * N.B. Represent percentage value as an unsigned int by multiplying the percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     *\\n     * @return consignment - the registered primary market consignment of the newly minted token\\n     */\\n    function mintPhysical(uint256 _supply, address payable _creator, string memory _tokenURI, uint16 _royaltyPercentage)\\n    external override\\n    onlyRole(ESCROW_AGENT)\\n    returns(Consignment memory consignment)\\n    {\\n        // Mint the token, flagging it as physical, consigning to the MarketController\\n        return mint(_supply, _creator, _tokenURI, _royaltyPercentage, true);\\n    }\\n\\n    /**\\n     * @notice Mint a given supply of a token.\\n     *\\n     * Entire supply must be minted at once.\\n     * More cannot be minted later for the same token id.\\n     * Can only be called by an address with the MINTER role.\\n     * Token supply is sent to the caller's address.\\n     *\\n     * @param _supply - the supply of the token\\n     * @param _creator - the creator of the NFT (where the royalties will go)\\n     * @param _tokenURI - the URI of the token metadata\\n     * @param _royaltyPercentage - the percentage of royalty expected on secondary market sales\\n     *\\n     * N.B. Represent percentage value as an unsigned int by multiplying the percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     *\\n     * @return consignment - the registered primary market consignment of the newly minted token\\n     */\\n    function mintDigital(uint256 _supply, address payable _creator, string memory _tokenURI, uint16 _royaltyPercentage)\\n    external override\\n    onlyRole(MINTER)\\n    returns(Consignment memory consignment)\\n    {\\n        // Mint the token, consigning to the MarketController\\n        return mint(_supply, _creator, _tokenURI, _royaltyPercentage, false);\\n    }\\n\\n    /**\\n     * @notice Get royalty info for a token\\n     *\\n     * For a given token id and sale price, how much should be sent to whom as royalty\\n     *\\n     * @param _tokenId - the NFT asset queried for royalty information\\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n     *\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for _value sale price\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external view override\\n    returns (address receiver, uint256 royaltyAmount)\\n    {\\n        Token storage token = tokens[_tokenId];\\n        receiver = token.creator;\\n        royaltyAmount = getPercentageOf(_salePrice, token.royaltyPercentage);\\n    }\\n\\n    /**\\n     * @notice Implementation of the {IERC165} interface.\\n     *\\n     * N.B. This method is inherited from several parents and\\n     * the compiler cannot decide which to use. Thus, they must\\n     * be overridden here.\\n     *\\n     * if you just call super.supportsInterface, it chooses\\n     * 'the most derived contract'. But that's not good for this\\n     * particular function because you may inherit from several\\n     * IERC165 contracts, and all concrete ones need to be allowed\\n     * to respond.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC1155Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n    {\\n        return (\\n            interfaceId == type(ISeenHausNFT).interfaceId ||\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId)\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the token URI\\n     *\\n     * This method is overrides the Open Zeppelin version, returning\\n     * a unique stored metadata URI for each token rather than a\\n     * replaceable baseURI template, since the latter is not compatible\\n     * with IPFS hashes.\\n     *\\n     * @param _tokenId - id of the token to get the URI for\\n     */\\n    function uri(uint256 _tokenId)\\n    public view override\\n    returns (string memory)\\n    {\\n        Token storage token = tokens[_tokenId];\\n        return token.uri;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISeenHausNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"../domain/SeenTypes.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\n\\n/**\\n * @title ISeenHausNFT\\n *\\n * @notice This is the interface for the Seen.Haus ERC-1155 NFT contract.\\n *\\n * The ERC-165 identifier for this interface is: 0x34d6028b\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n*/\\ninterface ISeenHausNFT is IERC2981, IERC1155Upgradeable {\\n\\n    /**\\n     * @notice The nextToken getter\\n     * @dev does not increment counter\\n     */\\n    function getNextToken() external view returns (uint256 nextToken);\\n\\n    /**\\n     * @notice Get the info about a given token.\\n     *\\n     * @param _tokenId - the id of the token to check\\n     * @return tokenInfo - the info about the token. See: {SeenTypes.Token}\\n     */\\n    function getTokenInfo(uint256 _tokenId) external view returns (SeenTypes.Token memory tokenInfo);\\n\\n    /**\\n     * @notice Check if a given token id corresponds to a physical lot.\\n     *\\n     * @param _tokenId - the id of the token to check\\n     * @return physical - true if the item corresponds to a physical lot\\n     */\\n    function isPhysical(uint256 _tokenId) external returns (bool);\\n\\n    /**\\n     * @notice Mint a given supply of a token, marking it as physical.\\n     *\\n     * Entire supply must be minted at once.\\n     * More cannot be minted later for the same token id.\\n     * Can only be called by an address with the ESCROW_AGENT role.\\n     * Token supply is sent to the caller.\\n     *\\n     * @param _supply - the supply of the token\\n     * @param _creator - the creator of the NFT (where the royalties will go)\\n     * @param _tokenURI - the URI of the token metadata\\n     *\\n     * @return consignment - the registered primary market consignment of the newly minted token\\n     */\\n    function mintPhysical(\\n        uint256 _supply,\\n        address payable _creator,\\n        string memory _tokenURI,\\n        uint16 _royaltyPercentage\\n    )\\n    external\\n    returns(SeenTypes.Consignment memory consignment);\\n\\n    /**\\n     * @notice Mint a given supply of a token.\\n     *\\n     * Entire supply must be minted at once.\\n     * More cannot be minted later for the same token id.\\n     * Can only be called by an address with the MINTER role.\\n     * Token supply is sent to the caller's address.\\n     *\\n     * @param _supply - the supply of the token\\n     * @param _creator - the creator of the NFT (where the royalties will go)\\n     * @param _tokenURI - the URI of the token metadata\\n     *\\n     * @return consignment - the registered primary market consignment of the newly minted token\\n     */\\n    function mintDigital(\\n        uint256 _supply,\\n        address payable _creator,\\n        string memory _tokenURI,\\n        uint16 _royaltyPercentage\\n    )\\n    external\\n    returns(SeenTypes.Consignment memory consignment);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title IERC2981 interface\\n *\\n * @notice NFT Royalty Standard.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2981\\n */\\ninterface IERC2981 is IERC165Upgradeable {\\n\\n    /**\\n     * @notice Determine how much royalty is owed (if any) and to whom.\\n     * @param _tokenId - the NFT asset queried for royalty information\\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for _salePrice\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external\\n    view\\n    returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/market/client/MarketClientBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IMarketController.sol\\\";\\nimport \\\"../../domain/SeenConstants.sol\\\";\\nimport \\\"../../domain/SeenTypes.sol\\\";\\nimport \\\"./MarketClientLib.sol\\\";\\n\\n\\n/**\\n * @title MarketClientBase\\n *\\n * @notice Extended by Seen.Haus contracts that need to communicate with the\\n * MarketController, but are NOT facets of the MarketDiamond.\\n *\\n * Market client contracts include SeenHausNFT, ItemsTicketer, and LotsTicketer\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\nabstract contract MarketClientBase is SeenTypes, SeenConstants {\\n\\n    /**\\n     * @dev Modifier that checks that the caller has a specific role.\\n     *\\n     * Reverts if caller doesn't have role.\\n     *\\n     * See: {AccessController.hasRole}\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        require(MarketClientLib.hasRole(role), \\\"Caller doesn't have role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Get the MarketController from the MarketClientProxy's storage\\n     *\\n     * @return IMarketController address\\n     */\\n    function getMarketController()\\n    internal\\n    pure\\n    returns (IMarketController)\\n    {\\n        MarketClientLib.ProxyStorage memory ps = MarketClientLib.proxyStorage();\\n        return ps.marketController;\\n    }\\n\\n    /**\\n     * @notice Get a percentage of a given amount.\\n     *\\n     * N.B. Represent ercentage values are stored\\n     * as unsigned integers, the result of multiplying the given percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     *\\n     * @param _amount - the amount to return a percentage of\\n     * @param _percentage - the percentage value represented as above\\n     */\\n    function getPercentageOf(uint256 _amount, uint16 _percentage)\\n    internal\\n    pure\\n    returns (uint256 share)\\n    {\\n        share = _amount * _percentage / 10000;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/market/client/nft/SeenHausNFTStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../domain/SeenTypes.sol\\\";\\n\\n/**\\n * @title SeenHausNFTStorage\\n * @notice Splits storage away from the logic in SeenHausNFT.sol for maintainability\\n */\\ncontract SeenHausNFTStorage is SeenTypes {\\n\\n  address internal _owner;\\n\\n  /// @dev token id => Token struct\\n  mapping (uint256 => Token) internal tokens;\\n\\n  // Next token number\\n  uint256 internal nextToken;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/domain/SeenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SeenTypes\\n *\\n * @notice Enums and structs used by the Seen.Haus contract ecosystem.\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ncontract SeenTypes {\\n\\n    enum Market {\\n        Primary,\\n        Secondary\\n    }\\n\\n    enum MarketHandler {\\n        Unhandled,\\n        Auction,\\n        Sale\\n    }\\n\\n    enum Clock {\\n        Live,\\n        Trigger\\n    }\\n\\n    enum Audience {\\n        Open,\\n        Staker,\\n        VipStaker\\n    }\\n\\n    enum Outcome {\\n        Pending,\\n        Closed,\\n        Canceled\\n    }\\n\\n    enum State {\\n        Pending,\\n        Running,\\n        Ended\\n    }\\n\\n    enum Ticketer {\\n        Default,\\n        Lots,\\n        Items\\n    }\\n\\n    struct Token {\\n        address payable creator;\\n        uint16 royaltyPercentage;\\n        bool isPhysical;\\n        uint256 id;\\n        uint256 supply;\\n        string uri;\\n    }\\n\\n    struct Consignment {\\n        Market market;\\n        MarketHandler marketHandler;\\n        address payable seller;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 supply;\\n        uint256 id;\\n        bool multiToken;\\n        bool released;\\n        uint256 releasedSupply;\\n        uint16 customFeePercentageBasisPoints;\\n        uint256 pendingPayout;\\n    }\\n\\n    struct Auction {\\n        address payable buyer;\\n        uint256 consignmentId;\\n        uint256 start;\\n        uint256 duration;\\n        uint256 reserve;\\n        uint256 bid;\\n        Clock clock;\\n        State state;\\n        Outcome outcome;\\n    }\\n\\n    struct Sale {\\n        uint256 consignmentId;\\n        uint256 start;\\n        uint256 price;\\n        uint256 perTxCap;\\n        State state;\\n        Outcome outcome;\\n    }\\n\\n    struct EscrowTicket {\\n        uint256 amount;\\n        uint256 consignmentId;\\n        uint256 id;\\n        string itemURI;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMarketController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMarketConfig.sol\\\";\\nimport \\\"./IMarketConfigAdditional.sol\\\";\\nimport \\\"./IMarketClerk.sol\\\";\\n\\n/**\\n * @title IMarketController\\n *\\n * @notice Manages configuration and consignments used by the Seen.Haus contract suite.\\n *\\n * The ERC-165 identifier for this interface is: 0xbb8dba77\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ninterface IMarketController is IMarketClerk, IMarketConfig, IMarketConfigAdditional {}\"\r\n    },\r\n    \"contracts/domain/SeenConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SeenConstants\\n *\\n * @notice Constants used by the Seen.Haus contract ecosystem.\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ncontract SeenConstants {\\n\\n    // Endpoint will serve dynamic metadata composed of ticket and ticketed item's info\\n    string internal constant ESCROW_TICKET_URI = \\\"https://api.seen.haus/ticket/metadata/\\\";\\n\\n    // Access Control Roles\\n    bytes32 internal constant ADMIN = keccak256(\\\"ADMIN\\\");                   // Deployer and any other admins as needed\\n    bytes32 internal constant SELLER = keccak256(\\\"SELLER\\\");                 // Approved sellers amd Seen.Haus reps\\n    bytes32 internal constant MINTER = keccak256(\\\"MINTER\\\");                 // Approved artists and Seen.Haus reps\\n    bytes32 internal constant ESCROW_AGENT = keccak256(\\\"ESCROW_AGENT\\\");     // Seen.Haus Physical Item Escrow Agent\\n    bytes32 internal constant MARKET_HANDLER = keccak256(\\\"MARKET_HANDLER\\\"); // Market Handler contracts\\n    bytes32 internal constant UPGRADER = keccak256(\\\"UPGRADER\\\");             // Performs contract upgrades\\n    bytes32 internal constant MULTISIG = keccak256(\\\"MULTISIG\\\");             // Admin role of MARKET_HANDLER & UPGRADER\\n\\n}\"\r\n    },\r\n    \"contracts/market/client/MarketClientLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IMarketController.sol\\\";\\n\\n/**\\n * @title MarketClientLib\\n *\\n * Maintains the implementation address and the access and market controller addresses.\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\nlibrary MarketClientLib {\\n\\n    struct ProxyStorage {\\n\\n        // The Seen.Haus AccessController address\\n        IAccessControlUpgradeable accessController;\\n\\n        // The Seen.Haus MarketController address\\n        IMarketController marketController;\\n\\n        // The implementation address\\n        address implementation;\\n    }\\n\\n    /**\\n     * @dev Storage slot with the address of the Seen.Haus AccessController\\n     * This is obviously not a standard EIP-1967 slot.\\n     */\\n    bytes32 internal constant PROXY_SLOT = keccak256('Seen.Haus.MarketClientProxy');\\n\\n    /**\\n     * @notice Get the Proxy storage slot\\n     *\\n     * @return ps - Proxy storage slot cast to ProxyStorage\\n     */\\n    function proxyStorage() internal pure returns (ProxyStorage storage ps) {\\n        bytes32 position = PROXY_SLOT;\\n        assembly {\\n            ps.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks that the caller has a specific role.\\n     *\\n     * Reverts if caller doesn't have role.\\n     *\\n     * See: {AccessController.hasRole}\\n     */\\n    function hasRole(bytes32 role) internal view returns (bool) {\\n        ProxyStorage storage ps = proxyStorage();\\n        return ps.accessController.hasRole(role, msg.sender);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMarketConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../domain/SeenTypes.sol\\\";\\n\\n/**\\n * @title IMarketController\\n *\\n * @notice Manages configuration and consignments used by the Seen.Haus contract suite.\\n * @dev Contributes its events and functions to the IMarketController interface\\n *\\n * The ERC-165 identifier for this interface is: 0x57f9f26d\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ninterface IMarketConfig {\\n\\n    /// Events\\n    event NFTAddressChanged(address indexed nft);\\n    event EscrowTicketerAddressChanged(address indexed escrowTicketer, SeenTypes.Ticketer indexed ticketerType);\\n    event StakingAddressChanged(address indexed staking);\\n    event MultisigAddressChanged(address indexed multisig);\\n    event VipStakerAmountChanged(uint256 indexed vipStakerAmount);\\n    event PrimaryFeePercentageChanged(uint16 indexed feePercentage);\\n    event SecondaryFeePercentageChanged(uint16 indexed feePercentage);\\n    event MaxRoyaltyPercentageChanged(uint16 indexed maxRoyaltyPercentage);\\n    event OutBidPercentageChanged(uint16 indexed outBidPercentage);\\n    event DefaultTicketerTypeChanged(SeenTypes.Ticketer indexed ticketerType);\\n\\n    /**\\n     * @notice Sets the address of the xSEEN ERC-20 staking contract.\\n     *\\n     * Emits a NFTAddressChanged event.\\n     *\\n     * @param _nft - the address of the nft contract\\n     */\\n    function setNft(address _nft) external;\\n\\n    /**\\n     * @notice The nft getter\\n     */\\n    function getNft() external view returns (address);\\n\\n    /**\\n     * @notice Sets the address of the Seen.Haus lots-based escrow ticketer contract.\\n     *\\n     * Emits a EscrowTicketerAddressChanged event.\\n     *\\n     * @param _lotsTicketer - the address of the items-based escrow ticketer contract\\n     */\\n    function setLotsTicketer(address _lotsTicketer) external;\\n\\n    /**\\n     * @notice The lots-based escrow ticketer getter\\n     */\\n    function getLotsTicketer() external view returns (address);\\n\\n    /**\\n     * @notice Sets the address of the Seen.Haus items-based escrow ticketer contract.\\n     *\\n     * Emits a EscrowTicketerAddressChanged event.\\n     *\\n     * @param _itemsTicketer - the address of the items-based escrow ticketer contract\\n     */\\n    function setItemsTicketer(address _itemsTicketer) external;\\n\\n    /**\\n     * @notice The items-based escrow ticketer getter\\n     */\\n    function getItemsTicketer() external view returns (address);\\n\\n    /**\\n     * @notice Sets the address of the xSEEN ERC-20 staking contract.\\n     *\\n     * Emits a StakingAddressChanged event.\\n     *\\n     * @param _staking - the address of the staking contract\\n     */\\n    function setStaking(address payable _staking) external;\\n\\n    /**\\n     * @notice The staking getter\\n     */\\n    function getStaking() external view returns (address payable);\\n\\n    /**\\n     * @notice Sets the address of the Seen.Haus multi-sig wallet.\\n     *\\n     * Emits a MultisigAddressChanged event.\\n     *\\n     * @param _multisig - the address of the multi-sig wallet\\n     */\\n    function setMultisig(address payable _multisig) external;\\n\\n    /**\\n     * @notice The multisig getter\\n     */\\n    function getMultisig() external view returns (address payable);\\n\\n    /**\\n     * @notice Sets the VIP staker amount.\\n     *\\n     * Emits a VipStakerAmountChanged event.\\n     *\\n     * @param _vipStakerAmount - the minimum amount of xSEEN ERC-20 a caller must hold to participate in VIP events\\n     */\\n    function setVipStakerAmount(uint256 _vipStakerAmount) external;\\n\\n    /**\\n     * @notice The vipStakerAmount getter\\n     */\\n    function getVipStakerAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the marketplace fee percentage.\\n     * Emits a PrimaryFeePercentageChanged event.\\n     *\\n     * @param _primaryFeePercentage - the percentage that will be taken as a fee from the net of a Seen.Haus primary sale or auction\\n     *\\n     * N.B. Represent percentage value as an unsigned int by multiplying the percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     */\\n    function setPrimaryFeePercentage(uint16 _primaryFeePercentage) external;\\n\\n    /**\\n     * @notice Sets the marketplace fee percentage.\\n     * Emits a SecondaryFeePercentageChanged event.\\n     *\\n     * @param _secondaryFeePercentage - the percentage that will be taken as a fee from the net of a Seen.Haus secondary sale or auction (after royalties)\\n     *\\n     * N.B. Represent percentage value as an unsigned int by multiplying the percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     */\\n    function setSecondaryFeePercentage(uint16 _secondaryFeePercentage) external;\\n\\n    /**\\n     * @notice The primaryFeePercentage and secondaryFeePercentage getter\\n     */\\n    function getFeePercentage(SeenTypes.Market _market) external view returns (uint16);\\n\\n    /**\\n     * @notice Sets the external marketplace maximum royalty percentage.\\n     *\\n     * Emits a MaxRoyaltyPercentageChanged event.\\n     *\\n     * @param _maxRoyaltyPercentage - the maximum percentage of a Seen.Haus sale or auction that will be paid as a royalty\\n     */\\n    function setMaxRoyaltyPercentage(uint16 _maxRoyaltyPercentage) external;\\n\\n    /**\\n     * @notice The maxRoyaltyPercentage getter\\n     */\\n    function getMaxRoyaltyPercentage() external view returns (uint16);\\n\\n    /**\\n     * @notice Sets the marketplace auction outbid percentage.\\n     *\\n     * Emits a OutBidPercentageChanged event.\\n     *\\n     * @param _outBidPercentage - the minimum percentage a Seen.Haus auction bid must be above the previous bid to prevail\\n     */\\n    function setOutBidPercentage(uint16 _outBidPercentage) external;\\n\\n    /**\\n     * @notice The outBidPercentage getter\\n     */\\n    function getOutBidPercentage() external view returns (uint16);\\n\\n    /**\\n     * @notice Sets the default escrow ticketer type.\\n     *\\n     * Emits a DefaultTicketerTypeChanged event.\\n     *\\n     * Reverts if _ticketerType is Ticketer.Default\\n     * Reverts if _ticketerType is already the defaultTicketerType\\n     *\\n     * @param _ticketerType - the new default escrow ticketer type.\\n     */\\n    function setDefaultTicketerType(SeenTypes.Ticketer _ticketerType) external;\\n\\n    /**\\n     * @notice The defaultTicketerType getter\\n     */\\n    function getDefaultTicketerType() external view returns (SeenTypes.Ticketer);\\n\\n    /**\\n     * @notice Get the Escrow Ticketer to be used for a given consignment\\n     *\\n     * If a specific ticketer has not been set for the consignment,\\n     * the default escrow ticketer will be returned.\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @return ticketer = the address of the escrow ticketer to use\\n     */\\n    function getEscrowTicketer(uint256 _consignmentId) external view returns (address ticketer);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMarketConfigAdditional.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../domain/SeenTypes.sol\\\";\\n\\n/**\\n * @title IMarketController\\n *\\n * @notice Manages configuration and consignments used by the Seen.Haus contract suite.\\n * @dev Contributes its events and functions to the IMarketController interface\\n *\\n * The ERC-165 identifier for this interface is: 0x57f9f26d\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ninterface IMarketConfigAdditional {\\n\\n    /// Events\\n    event AllowExternalTokensOnSecondaryChanged(bool indexed status);\\n    event EscrowAgentFeeChanged(address indexed escrowAgent, uint16 fee);\\n    \\n    /**\\n     * @notice Sets whether or not external tokens can be listed on secondary market\\n     *\\n     * Emits an AllowExternalTokensOnSecondaryChanged event.\\n     *\\n     * @param _status - boolean of whether or not external tokens are allowed\\n     */\\n    function setAllowExternalTokensOnSecondary(bool _status) external;\\n\\n    /**\\n     * @notice The allowExternalTokensOnSecondary getter\\n     */\\n    function getAllowExternalTokensOnSecondary() external view returns (bool status);\\n\\n        /**\\n     * @notice The escrow agent fee getter\\n     */\\n    function getEscrowAgentFeeBasisPoints(address _escrowAgentAddress) external view returns (uint16);\\n\\n    /**\\n     * @notice The escrow agent fee setter\\n     */\\n    function setEscrowAgentFeeBasisPoints(address _escrowAgentAddress, uint16 _basisPoints) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMarketClerk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../domain/SeenTypes.sol\\\";\\n\\n/**\\n * @title IMarketClerk\\n *\\n * @notice Manages consignments for the Seen.Haus contract suite.\\n *\\n * The ERC-165 identifier for this interface is: 0xec74481a\\n *\\n * @author Cliff Hall <cliff@futurescale.com> (https://twitter.com/seaofarrows)\\n */\\ninterface IMarketClerk is IERC1155ReceiverUpgradeable, IERC721ReceiverUpgradeable {\\n\\n    /// Events\\n    event ConsignmentTicketerChanged(uint256 indexed consignmentId, SeenTypes.Ticketer indexed ticketerType);\\n    event ConsignmentFeeChanged(uint256 indexed consignmentId, uint16 customConsignmentFee);\\n    event ConsignmentPendingPayoutSet(uint256 indexed consignmentId, uint256 amount);\\n    event ConsignmentRegistered(address indexed consignor, address indexed seller, SeenTypes.Consignment consignment);\\n    event ConsignmentMarketed(address indexed consignor, address indexed seller, uint256 indexed consignmentId);\\n    event ConsignmentReleased(uint256 indexed consignmentId, uint256 amount, address releasedTo);\\n\\n    /**\\n     * @notice The nextConsignment getter\\n     */\\n    function getNextConsignment() external view returns (uint256);\\n\\n    /**\\n     * @notice The consignment getter\\n     */\\n    function getConsignment(uint256 _consignmentId) external view returns (SeenTypes.Consignment memory);\\n\\n    /**\\n     * @notice Get the remaining supply of the given consignment.\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @return uint256 - the remaining supply held by the MarketController\\n     */\\n    function getUnreleasedSupply(uint256 _consignmentId) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the consignor of the given consignment\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @return  address - consigner's address\\n     */\\n    function getConsignor(uint256 _consignmentId) external view returns(address);\\n\\n    /**\\n     * @notice Registers a new consignment for sale or auction.\\n     *\\n     * Emits a ConsignmentRegistered event.\\n     *\\n     * @param _market - the market for the consignment. See {SeenTypes.Market}\\n     * @param _consignor - the address executing the consignment transaction\\n     * @param _seller - the seller of the consignment\\n     * @param _tokenAddress - the contract address issuing the NFT behind the consignment\\n     * @param _tokenId - the id of the token being consigned\\n     * @param _supply - the amount of the token being consigned\\n     *\\n     * @return Consignment - the registered consignment\\n     */\\n    function registerConsignment(\\n        SeenTypes.Market _market,\\n        address _consignor,\\n        address payable _seller,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _supply\\n    )\\n    external\\n    returns(SeenTypes.Consignment memory);\\n\\n    /**\\n      * @notice Update consignment to indicate it has been marketed\\n      *\\n      * Emits a ConsignmentMarketed event.\\n      *\\n      * Reverts if consignment has already been marketed.\\n      * A consignment is considered as marketed if it has a marketHandler other than Unhandled. See: {SeenTypes.MarketHandler}\\n      *\\n      * @param _consignmentId - the id of the consignment\\n      */\\n    function marketConsignment(uint256 _consignmentId, SeenTypes.MarketHandler _marketHandler) external;\\n\\n    /**\\n     * @notice Release the consigned item to a given address\\n     *\\n     * Emits a ConsignmentReleased event.\\n     *\\n     * Reverts if caller is does not have MARKET_HANDLER role.\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @param _amount - the amount of the consigned supply to release\\n     * @param _releaseTo - the address to transfer the consigned token balance to\\n     */\\n    function releaseConsignment(uint256 _consignmentId, uint256 _amount, address _releaseTo) external;\\n\\n    /**\\n     * @notice Clears the pending payout value of a consignment\\n     *\\n     * Emits a ConsignmentPayoutSet event.\\n     *\\n     * Reverts if:\\n     *  - caller is does not have MARKET_HANDLER role.\\n     *  - consignment doesn't exist\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @param _amount - the amount of that the consignment's pendingPayout must be set to\\n     */\\n    function setConsignmentPendingPayout(uint256 _consignmentId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Set the type of Escrow Ticketer to be used for a consignment\\n     *\\n     * Default escrow ticketer is Ticketer.Lots. This only needs to be called\\n     * if overriding to Ticketer.Items for a given consignment.\\n     *\\n     * Emits a ConsignmentTicketerSet event.\\n     * Reverts if consignment is not registered.\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @param _ticketerType - the type of ticketer to use. See: {SeenTypes.Ticketer}\\n     */\\n    function setConsignmentTicketer(uint256 _consignmentId, SeenTypes.Ticketer _ticketerType) external;\\n\\n    /**\\n     * @notice Set a custom fee percentage on a consignment (e.g. for \\\"official\\\" SEEN x Artist drops)\\n     *\\n     * Default escrow ticketer is Ticketer.Lots. This only needs to be called\\n     * if overriding to Ticketer.Items for a given consignment.\\n     *\\n     * Emits a ConsignmentFeeChanged event.\\n     *\\n     * Reverts if consignment doesn't exist     *\\n     *\\n     * @param _consignmentId - the id of the consignment\\n     * @param _customFeePercentageBasisPoints - the custom fee percentage basis points to use\\n     *\\n     * N.B. _customFeePercentageBasisPoints percentage value as an unsigned int by multiplying the percentage by 100:\\n     * e.g, 1.75% = 175, 100% = 10000\\n     */\\n    function setConsignmentCustomFee(uint256 _consignmentId, uint16 _customFeePercentageBasisPoints) external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyPercentage\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isPhysical\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct SeenTypes.Token\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isPhysical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"mintDigital\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SeenTypes.Market\",\"name\":\"market\",\"type\":\"uint8\"},{\"internalType\":\"enum SeenTypes.MarketHandler\",\"name\":\"marketHandler\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"multiToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"customFeePercentageBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"pendingPayout\",\"type\":\"uint256\"}],\"internalType\":\"struct SeenTypes.Consignment\",\"name\":\"consignment\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"mintPhysical\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SeenTypes.Market\",\"name\":\"market\",\"type\":\"uint8\"},{\"internalType\":\"enum SeenTypes.MarketHandler\",\"name\":\"marketHandler\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"multiToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"customFeePercentageBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"pendingPayout\",\"type\":\"uint256\"}],\"internalType\":\"struct SeenTypes.Consignment\",\"name\":\"consignment\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SeenHausNFT", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}