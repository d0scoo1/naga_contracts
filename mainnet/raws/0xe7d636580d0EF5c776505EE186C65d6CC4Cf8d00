{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the Chainlink aggregator\\n */\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @dev Interface of the Chainlink aggregator\\n */\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {\\n\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the Chainlink V3 aggregator\\n */\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/FeedRegistryInterface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {AggregatorV2V3Interface} from \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n    struct Phase {\\n        uint16 phaseId;\\n        uint80 startingAggregatorRoundId;\\n        uint80 endingAggregatorRoundId;\\n    }\\n\\n    event FeedProposed(\\n        address indexed asset,\\n        address indexed denomination,\\n        address indexed proposedAggregator,\\n        address currentAggregator,\\n        address sender\\n    );\\n    event FeedConfirmed(\\n        address indexed asset,\\n        address indexed denomination,\\n        address indexed latestAggregator,\\n        address previousAggregator,\\n        uint16 nextPhaseId,\\n        address sender\\n    );\\n\\n    // V3 AggregatorV3Interface\\n\\n    function decimals(address base, address quote) external view returns (uint8);\\n\\n    function description(address base, address quote) external view returns (string memory);\\n\\n    function version(address base, address quote) external view returns (uint256);\\n\\n    function latestRoundData(address base, address quote)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function getRoundData(\\n        address base,\\n        address quote,\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    // V2 AggregatorInterface\\n\\n    function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n    function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n    function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n    function getAnswer(\\n        address base,\\n        address quote,\\n        uint256 roundId\\n    ) external view returns (int256 answer);\\n\\n    function getTimestamp(\\n        address base,\\n        address quote,\\n        uint256 roundId\\n    ) external view returns (uint256 timestamp);\\n\\n    // Registry getters\\n\\n    function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n    function getPhaseFeed(\\n        address base,\\n        address quote,\\n        uint16 phaseId\\n    ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n    function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n    function getPhase(\\n        address base,\\n        address quote,\\n        uint16 phaseId\\n    ) external view returns (Phase memory phase);\\n\\n    // Round helpers\\n\\n    function getRoundFeed(\\n        address base,\\n        address quote,\\n        uint80 roundId\\n    ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n    function getPhaseRange(\\n        address base,\\n        address quote,\\n        uint16 phaseId\\n    ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n    function getPreviousRoundId(\\n        address base,\\n        address quote,\\n        uint80 roundId\\n    ) external view returns (uint80 previousRoundId);\\n\\n    function getNextRoundId(\\n        address base,\\n        address quote,\\n        uint80 roundId\\n    ) external view returns (uint80 nextRoundId);\\n\\n    // Feed management\\n\\n    function proposeFeed(\\n        address base,\\n        address quote,\\n        address aggregator\\n    ) external;\\n\\n    function confirmFeed(\\n        address base,\\n        address quote,\\n        address aggregator\\n    ) external;\\n\\n    // Proposed aggregator\\n\\n    function getProposedFeed(address base, address quote)\\n        external\\n        view\\n        returns (AggregatorV2V3Interface proposedAggregator);\\n\\n    function proposedGetRoundData(\\n        address base,\\n        address quote,\\n        uint80 roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedLatestRoundData(address base, address quote)\\n        external\\n        view\\n        returns (\\n            uint80 id,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    // Phases\\n    function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/OpynPricerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OpynPricerInterface {\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getHistoricalPrice(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isWhitelistedPricer(address _pricer) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/libs/ChainlinkLib.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport {AggregatorV2V3Interface} from \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"../interfaces/AggregatorV3Interface.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title ChainlinkLib\\n * @author 10 Delta\\n * @notice Library for interacting with Chainlink feeds\\n */\\nlibrary ChainlinkLib {\\n    using SafeMath for uint256;\\n\\n    /// @dev base decimals\\n    uint256 internal constant BASE = 8;\\n    /// @dev offset for chainlink aggregator phases\\n    uint256 internal constant PHASE_OFFSET = 64;\\n    /// @dev eth address on the chainlink registry\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev btc address on the chainlink registry\\n    address internal constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n    /// @dev usd address on the chainlink registry\\n    address internal constant USD = address(840);\\n    /// @dev quote asset address\\n    address internal constant QUOTE = USD;\\n\\n    /**\\n     * @notice validates that a roundId matches a timestamp, reverts if invalid\\n     * @dev invalid if _roundId isn't the first roundId after _timestamp\\n     * @param _aggregator chainlink aggregator\\n     * @param _timestamp timestamp\\n     * @param _roundId the first roundId after timestamp\\n     * @return answer, the price at that roundId\\n     */\\n    function validateRoundId(\\n        AggregatorV2V3Interface _aggregator,\\n        uint256 _timestamp,\\n        uint80 _roundId\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , uint256 updatedAt, ) = _aggregator.getRoundData(_roundId);\\n        // Validate round data\\n        require(answer >= 0 && updatedAt > 0, \\\"ChainlinkLib: round not complete\\\");\\n        // Check if the timestamp at _roundId is >= _timestamp\\n        require(_timestamp <= updatedAt, \\\"ChainlinkLib: roundId too low\\\");\\n        // If _roundId is greater than the lowest roundId for the current phase\\n        if (_roundId > uint80((uint256(_roundId >> PHASE_OFFSET) << PHASE_OFFSET) | 1)) {\\n            // Check if the timestamp at the previous roundId is <= _timestamp\\n            (bool success, bytes memory data) = address(_aggregator).staticcall(\\n                abi.encodeWithSelector(AggregatorV3Interface.getRoundData.selector, _roundId - 1)\\n            );\\n            // Skip checking the timestamp if getRoundData reverts\\n            if (success) {\\n                (, int256 lastAnswer, , uint256 lastUpdatedAt, ) = abi.decode(\\n                    data,\\n                    (uint80, int256, uint256, uint256, uint80)\\n                );\\n                // Skip checking the timestamp if the previous answer is invalid\\n                require(lastAnswer < 0 || _timestamp >= lastUpdatedAt, \\\"ChainlinkLib: roundId too high\\\");\\n            }\\n        }\\n        return uint256(answer);\\n    }\\n\\n    /**\\n     * @notice gets the closest roundId to a timestamp\\n     * @dev the returned roundId is the first roundId after _timestamp\\n     * @param _aggregator chainlink aggregator\\n     * @param _timestamp timestamp\\n     * @return roundId, the roundId for the timestamp (its timestamp will be >= _timestamp)\\n     * @return answer, the price at that roundId\\n     */\\n    function getRoundData(AggregatorV2V3Interface _aggregator, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint80, uint256)\\n    {\\n        (uint80 maxRoundId, int256 answer, , uint256 maxUpdatedAt, ) = _aggregator.latestRoundData();\\n        // Check if the latest timestamp is >= _timestamp\\n        require(_timestamp <= maxUpdatedAt, \\\"ChainlinkLib: timestamp too high\\\");\\n        // Get the lowest roundId for the current phase\\n        uint80 minRoundId = uint80((uint256(maxRoundId >> PHASE_OFFSET) << PHASE_OFFSET) | 1);\\n        // Return if the latest roundId equals the lowest roundId\\n        if (minRoundId == maxRoundId) {\\n            require(answer >= 0, \\\"ChainlinkLib: max round not complete\\\");\\n            return (maxRoundId, uint256(answer));\\n        }\\n        uint256 minUpdatedAt;\\n        (, answer, , minUpdatedAt, ) = _aggregator.getRoundData(minRoundId);\\n        (uint80 midRoundId, uint256 midUpdatedAt) = (minRoundId, minUpdatedAt);\\n        uint256 _maxRoundId = maxRoundId; // Save maxRoundId for later use\\n        // Return the lowest roundId if the timestamp at the lowest roundId is >= _timestamp\\n        if (minUpdatedAt >= _timestamp && answer >= 0 && minUpdatedAt > 0) {\\n            return (minRoundId, uint256(answer));\\n        } else if (minUpdatedAt < _timestamp) {\\n            // Binary search to find the closest roundId to _timestamp\\n            while (minRoundId <= maxRoundId) {\\n                midRoundId = uint80((uint256(minRoundId) + uint256(maxRoundId)) / 2);\\n                (, answer, , midUpdatedAt, ) = _aggregator.getRoundData(midRoundId);\\n                if (midUpdatedAt < _timestamp) {\\n                    minRoundId = midRoundId + 1;\\n                } else if (midUpdatedAt > _timestamp) {\\n                    maxRoundId = midRoundId - 1;\\n                } else if (answer < 0 || midUpdatedAt == 0) {\\n                    // Break if closest roundId is invalid\\n                    break;\\n                } else {\\n                    // Return if the closest roundId timestamp equals _timestamp\\n                    return (midRoundId, uint256(answer));\\n                }\\n            }\\n        }\\n        // If the timestamp at the closest roundId is less than _timestamp or if the closest roundId is invalid\\n        while (midUpdatedAt < _timestamp || answer < 0 || midUpdatedAt == 0) {\\n            require(midRoundId < _maxRoundId, \\\"ChainlinkLib: exceeded max roundId\\\");\\n            // Increment the closest roundId by 1 to ensure that the roundId timestamp > _timestamp\\n            midRoundId++;\\n            (, answer, , midUpdatedAt, ) = _aggregator.getRoundData(midRoundId);\\n        }\\n        return (midRoundId, uint256(answer));\\n    }\\n\\n    /**\\n     * @notice scale aggregator response to base decimals (1e8)\\n     * @param _price aggregator price\\n     * @return price scaled to 1e8\\n     */\\n    function scaleToBase(uint256 _price, uint8 _aggregatorDecimals) internal pure returns (uint256) {\\n        if (_aggregatorDecimals > BASE) {\\n            _price = _price.div(10**(uint256(_aggregatorDecimals).sub(BASE)));\\n        } else if (_aggregatorDecimals < BASE) {\\n            _price = _price.mul(10**(BASE.sub(_aggregatorDecimals)));\\n        }\\n\\n        return _price;\\n    }\\n\\n    /**\\n     * @notice gets the base asset on the chainlink registry\\n     * @param _asset asset address\\n     * @param weth weth address\\n     * @param wbtc wbtc address\\n     * @return base asset address\\n     */\\n    function getBase(\\n        address _asset,\\n        address weth,\\n        address wbtc\\n    ) internal pure returns (address) {\\n        if (_asset == address(0)) {\\n            return _asset;\\n        } else if (_asset == weth) {\\n            return ETH;\\n        } else if (_asset == wbtc) {\\n            return BTC;\\n        } else {\\n            return _asset;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n/* solhint-disable */\\n\\npragma solidity =0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/pricers/ChainlinkRegistryPricer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\nimport {FeedRegistryInterface} from \\\"../interfaces/FeedRegistryInterface.sol\\\";\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {OpynPricerInterface} from \\\"../interfaces/OpynPricerInterface.sol\\\";\\nimport {ChainlinkLib} from \\\"../libs/ChainlinkLib.sol\\\";\\nimport {SafeCast} from \\\"../packages/oz/SafeCast.sol\\\";\\n\\n/**\\n * @notice A Pricer contract for all assets available on the Chainlink Feed Registry\\n */\\ncontract ChainlinkRegistryPricer is OpynPricerInterface {\\n    using SafeCast for int256;\\n\\n    /// @notice the opyn oracle address\\n    OracleInterface public immutable oracle;\\n    /// @notice the chainlink feed registry\\n    FeedRegistryInterface public immutable registry;\\n    /// @dev weth address\\n    address public immutable weth;\\n    /// @dev wbtc address\\n    address public immutable wbtc;\\n\\n    /**\\n     * @param _oracle Opyn Oracle address\\n     */\\n    constructor(\\n        address _oracle,\\n        address _registry,\\n        address _weth,\\n        address _wbtc\\n    ) public {\\n        require(_oracle != address(0), \\\"ChainlinkRegistryPricer: Cannot set 0 address as oracle\\\");\\n        require(_registry != address(0), \\\"ChainlinkRegistryPricer: Cannot set 0 address as registry\\\");\\n        require(_weth != address(0), \\\"ChainlinkRegistryPricer: Cannot set 0 address as weth\\\");\\n        require(_wbtc != address(0), \\\"ChainlinkRegistryPricer: Cannot set 0 address as wbtc\\\");\\n\\n        oracle = OracleInterface(_oracle);\\n        registry = FeedRegistryInterface(_registry);\\n        weth = _weth;\\n        wbtc = _wbtc;\\n    }\\n\\n    /**\\n     * @notice sets the expiry prices in the oracle without providing a roundId\\n     * @dev uses more 2.6x more gas compared to passing in a roundId\\n     * @param _assets assets to set the price for\\n     * @param _expiryTimestamps expiries to set a price for\\n     */\\n    function setExpiryPriceInOracle(address[] calldata _assets, uint256[] calldata _expiryTimestamps) external {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            (, uint256 price) = ChainlinkLib.getRoundData(\\n                registry.getFeed(ChainlinkLib.getBase(_assets[i], weth, wbtc), ChainlinkLib.QUOTE),\\n                _expiryTimestamps[i]\\n            );\\n            oracle.setExpiryPrice(_assets[i], _expiryTimestamps[i], price);\\n        }\\n    }\\n\\n    /**\\n     * @notice sets the expiry prices in the oracle\\n     * @dev a roundId must be provided to confirm price validity, which is the first Chainlink price provided after the expiryTimestamp\\n     * @param _assets assets to set the price for\\n     * @param _expiryTimestamps expiries to set a price for\\n     * @param _roundIds the first roundId after each expiryTimestamp\\n     */\\n    function setExpiryPriceInOracleRoundId(\\n        address[] calldata _assets,\\n        uint256[] calldata _expiryTimestamps,\\n        uint80[] calldata _roundIds\\n    ) external {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            oracle.setExpiryPrice(\\n                _assets[i],\\n                _expiryTimestamps[i],\\n                ChainlinkLib.validateRoundId(\\n                    registry.getFeed(ChainlinkLib.getBase(_assets[i], weth, wbtc), ChainlinkLib.QUOTE),\\n                    _expiryTimestamps[i],\\n                    _roundIds[i]\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice get the live price for the asset\\n     * @dev overides the getPrice function in OpynPricerInterface\\n     * @param _asset asset that this pricer will get a price for\\n     * @return price of the asset in USD, scaled by 1e8\\n     */\\n    function getPrice(address _asset) external view override returns (uint256) {\\n        address base = ChainlinkLib.getBase(_asset, weth, wbtc);\\n        int256 answer = registry.latestAnswer(base, ChainlinkLib.QUOTE);\\n        require(answer > 0, \\\"ChainlinkRegistryPricer: price is lower than 0\\\");\\n        // chainlink's answer is already 1e8\\n        // no need to safecast since we already check if its > 0\\n        return ChainlinkLib.scaleToBase(uint256(answer), registry.decimals(base, ChainlinkLib.QUOTE));\\n    }\\n\\n    /**\\n     * @notice get historical chainlink price\\n     * @param _asset asset that this pricer will get a price for\\n     * @param _roundId chainlink round id\\n     * @return round price and timestamp\\n     */\\n    function getHistoricalPrice(address _asset, uint80 _roundId) external view override returns (uint256, uint256) {\\n        address base = ChainlinkLib.getBase(_asset, weth, wbtc);\\n        (, int256 price, , uint256 roundTimestamp, ) = registry.getRoundData(base, ChainlinkLib.QUOTE, _roundId);\\n        return (\\n            ChainlinkLib.scaleToBase(price.toUint256(), registry.decimals(base, ChainlinkLib.QUOTE)),\\n            roundTimestamp\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expiryTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"setExpiryPriceInOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expiryTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint80[]\",\"name\":\"_roundIds\",\"type\":\"uint80[]\"}],\"name\":\"setExpiryPriceInOracleRoundId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkRegistryPricer", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b5711daec960c9487d95ba327c570a7cce4982c000000000000000000000000047fb2585d2c56fe188d0e6ec628a38b74fceeedf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}