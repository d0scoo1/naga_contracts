{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File contracts/oz/0.8.0/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File contracts/oz/0.8.0/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File contracts/oz/0.8.0/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File contracts/oz/0.8.0/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/oz/0.8.0/token/ERC20/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/Curve/Curve_Registry_V3.sol\r\n\r\n// \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\r\n// \u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\r\n// \u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\r\n// \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f6\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\r\n// \u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00f9\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00ea\u0393\u00f2\u00e6\r\n// \u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00f2\u00dc\u0393\u00f2\u00c9\u0393\u00f2\u00a5\r\n// Copyright (C) 2022 zapper\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice Registry for Curve Pools with Utility functions.\r\n\r\n// SPDX-License-Identifier: GPL-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICurveAddressProvider {\r\n    function get_registry() external view returns (address);\r\n\r\n    function get_address(uint256 _id) external view returns (address);\r\n}\r\n\r\ninterface ICurveRegistry {\r\n    function get_pool_from_lp_token(address lpToken)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_lp_token(address swapAddress) external view returns (address);\r\n\r\n    function get_n_coins(address _pool)\r\n        external\r\n        view\r\n        returns (uint256[2] memory);\r\n\r\n    function get_coins(address _pool) external view returns (address[8] memory);\r\n\r\n    function get_underlying_coins(address _pool)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n}\r\n\r\ninterface ICurveCryptoRegistry {\r\n    function get_pool_from_lp_token(address lpToken)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_lp_token(address swapAddress) external view returns (address);\r\n\r\n    function get_n_coins(address _pool) external view returns (uint256);\r\n\r\n    function get_coins(address _pool) external view returns (address[8] memory);\r\n}\r\n\r\ninterface ICurveFactoryRegistry {\r\n    function get_n_coins(address _pool) external view returns (uint256);\r\n\r\n    function get_coins(address _pool) external view returns (address[2] memory);\r\n\r\n    function get_underlying_coins(address _pool)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n}\r\n\r\ninterface ICurveV2Pool {\r\n    function price_oracle(uint256 k) external view returns (uint256);\r\n}\r\n\r\ncontract Curve_Registry_V3 is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    ICurveAddressProvider internal constant CurveAddressProvider =\r\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\r\n\r\n    ICurveRegistry public CurveRegistry;\r\n    ICurveFactoryRegistry public FactoryRegistry;\r\n    ICurveCryptoRegistry public CurveCryptoRegistry;\r\n\r\n    address internal constant wbtcToken =\r\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address internal constant sbtcCrvToken =\r\n        0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\r\n    address internal constant ETHAddress =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    mapping(address => bool) public shouldAddUnderlying;\r\n    mapping(address => address) private depositAddresses;\r\n\r\n    constructor() {\r\n        CurveRegistry = ICurveRegistry(CurveAddressProvider.get_registry());\r\n        FactoryRegistry = ICurveFactoryRegistry(\r\n            CurveAddressProvider.get_address(3)\r\n        );\r\n        CurveCryptoRegistry = ICurveCryptoRegistry(\r\n            CurveAddressProvider.get_address(5)\r\n        );\r\n\r\n        // set mappings\r\n        depositAddresses[\r\n            0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51\r\n        ] = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\r\n        depositAddresses[\r\n            0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56\r\n        ] = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\r\n        depositAddresses[\r\n            0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C\r\n        ] = 0xac795D2c97e60DF6a99ff1c814727302fD747a80;\r\n        depositAddresses[\r\n            0x06364f10B501e868329afBc005b3492902d6C763\r\n        ] = 0xA50cCc70b6a011CffDdf45057E39679379187287;\r\n        depositAddresses[\r\n            0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27\r\n        ] = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB;\r\n        depositAddresses[\r\n            0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\r\n        ] = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\r\n\r\n        shouldAddUnderlying[0xDeBF20617708857ebe4F679508E7b7863a8A8EeE] = true;\r\n        shouldAddUnderlying[0xEB16Ae0052ed37f479f7fe63849198Df1765a733] = true;\r\n        shouldAddUnderlying[0x2dded6Da1BF5DBdF597C45fcFaa3194e53EcfeAF] = true;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the pool is an original (non-factory) pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if pool is a non-factory pool, false otherwise\r\n    */\r\n    function isCurvePool(address swapAddress) public view returns (bool) {\r\n        if (CurveRegistry.get_lp_token(swapAddress) != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the pool is a factory pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if pool is a factory pool, false otherwise\r\n    */\r\n    function isFactoryPool(address swapAddress) public view returns (bool) {\r\n        if (FactoryRegistry.get_coins(swapAddress)[0] != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the pool is a Crypto pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if pool is a crypto pool, false otherwise\r\n    */\r\n    function isCryptoPool(address swapAddress) public view returns (bool) {\r\n        if (CurveCryptoRegistry.get_lp_token(swapAddress) != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the Pool is a metapool\r\n    @notice All factory pools are metapools but not all metapools\r\n    * are factory pools! (e.g. dusd)\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool is a metapool, false otherwise\r\n    */\r\n    function isMetaPool(address swapAddress) public view returns (bool) {\r\n        if (isCurvePool(swapAddress)) {\r\n            uint256[2] memory poolTokenCounts =\r\n                CurveRegistry.get_n_coins(swapAddress);\r\n\r\n            if (poolTokenCounts[0] == poolTokenCounts[1]) return false;\r\n            else return true;\r\n        }\r\n        if (isCryptoPool(swapAddress)) {\r\n            uint256 poolTokensCount =\r\n                CurveCryptoRegistry.get_n_coins(swapAddress);\r\n            address[8] memory poolTokens =\r\n                CurveCryptoRegistry.get_coins(swapAddress);\r\n\r\n            for (uint256 i = 0; i < poolTokensCount; i++) {\r\n                if (isCurvePool(poolTokens[i])) return true;\r\n            }\r\n        }\r\n        if (isFactoryPool(swapAddress)) return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the Pool is metapool of the Curve or Factory pool type\r\n    @notice All factory pools are metapools but not all metapools\r\n    * are factory pools! (e.g. dusd)\r\n    @param swapAddress Curve swap address for the pool\r\n    @return 1 if Meta Curve Pool\r\n            2 if Meta Factory Pool\r\n            0 otherwise\r\n    */\r\n    function _isCurveFactoryMetaPool(address swapAddress)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (isCurvePool(swapAddress)) {\r\n            uint256[2] memory poolTokenCounts =\r\n                CurveRegistry.get_n_coins(swapAddress);\r\n\r\n            if (poolTokenCounts[0] == poolTokenCounts[1]) return 0;\r\n            else return 1;\r\n        }\r\n        if (isFactoryPool(swapAddress)) return 2;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the pool is a Curve V2 pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if pool is a V2 pool, false otherwise\r\n    */\r\n    function isV2Pool(address swapAddress) public view returns (bool) {\r\n        try ICurveV2Pool(swapAddress).price_oracle(0) {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Gets the Curve pool deposit address\r\n    @notice The deposit address is used for pools with wrapped (c, y) tokens\r\n    @param swapAddress Curve swap address for the pool\r\n    @return depositAddress Curve pool deposit address or the swap address if not mapped\r\n    */\r\n    function getDepositAddress(address swapAddress)\r\n        external\r\n        view\r\n        returns (address depositAddress)\r\n    {\r\n        depositAddress = depositAddresses[swapAddress];\r\n        if (depositAddress == address(0)) return swapAddress;\r\n    }\r\n\r\n    /**\r\n    @notice Gets the Curve pool swap address\r\n    @notice The token and swap address is the same for metapool/factory pools\r\n    @param tokenAddress Curve swap address for the pool\r\n    @return swapAddress Curve pool swap address or address(0) if pool doesnt exist\r\n    */\r\n    function getSwapAddress(address tokenAddress)\r\n        external\r\n        view\r\n        returns (address swapAddress)\r\n    {\r\n        swapAddress = CurveRegistry.get_pool_from_lp_token(tokenAddress);\r\n        if (swapAddress != address(0)) {\r\n            return swapAddress;\r\n        }\r\n        swapAddress = CurveCryptoRegistry.get_pool_from_lp_token(tokenAddress);\r\n        if (swapAddress != address(0)) {\r\n            return swapAddress;\r\n        }\r\n        if (isFactoryPool(tokenAddress)) {\r\n            return tokenAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n    @notice Gets the Curve pool token address\r\n    @notice The token and swap address is the same for metapool/factory pools\r\n    @param swapAddress Curve swap address for the pool\r\n    @return tokenAddress Curve pool token address or address(0) if pool doesnt exist\r\n    */\r\n    function getTokenAddress(address swapAddress)\r\n        external\r\n        view\r\n        returns (address tokenAddress)\r\n    {\r\n        tokenAddress = CurveRegistry.get_lp_token(swapAddress);\r\n        if (tokenAddress != address(0)) {\r\n            return tokenAddress;\r\n        }\r\n        tokenAddress = CurveCryptoRegistry.get_lp_token(swapAddress);\r\n        if (tokenAddress != address(0)) {\r\n            return tokenAddress;\r\n        }\r\n        if (isFactoryPool(swapAddress)) {\r\n            return swapAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n    @notice Gets the number of non-underlying tokens in a pool\r\n    @param swapAddress Curve swap address for the pool\r\n    @return number of underlying tokens in the pool\r\n    */\r\n    function getNumTokens(address swapAddress) public view returns (uint256) {\r\n        if (isCurvePool(swapAddress)) {\r\n            return CurveRegistry.get_n_coins(swapAddress)[0];\r\n        } else if (isCryptoPool(swapAddress)) {\r\n            return CurveCryptoRegistry.get_n_coins(swapAddress);\r\n        } else {\r\n            return FactoryRegistry.get_n_coins(swapAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Gets an array of underlying pool token addresses\r\n    @param swapAddress Curve swap address for the pool\r\n    @return poolTokens returns 4 element array containing the \r\n    * addresses of the pool tokens (0 address if pool contains < 4 tokens)\r\n    */\r\n    function getPoolTokens(address swapAddress)\r\n        public\r\n        view\r\n        returns (address[4] memory poolTokens)\r\n    {\r\n        uint256 isCurveFactoryMetaPool = _isCurveFactoryMetaPool(swapAddress);\r\n        if (isCurveFactoryMetaPool == 1) {\r\n            address[8] memory poolUnderlyingCoins =\r\n                CurveRegistry.get_coins(swapAddress);\r\n            for (uint256 i = 0; i < 2; i++) {\r\n                poolTokens[i] = poolUnderlyingCoins[i];\r\n            }\r\n        } else if (isCurveFactoryMetaPool == 2) {\r\n            address[2] memory poolUnderlyingCoins =\r\n                FactoryRegistry.get_coins(swapAddress);\r\n            for (uint256 i = 0; i < 2; i++) {\r\n                poolTokens[i] = poolUnderlyingCoins[i];\r\n            }\r\n        } else if (isCryptoPool(swapAddress)) {\r\n            address[8] memory poolUnderlyingCoins =\r\n                CurveCryptoRegistry.get_coins(swapAddress);\r\n\r\n            for (uint256 i = 0; i < 4; i++) {\r\n                poolTokens[i] = poolUnderlyingCoins[i];\r\n            }\r\n        } else {\r\n            address[8] memory poolUnderlyingCoins;\r\n            if (isBtcPool(swapAddress)) {\r\n                poolUnderlyingCoins = CurveRegistry.get_coins(swapAddress);\r\n            } else {\r\n                poolUnderlyingCoins = CurveRegistry.get_underlying_coins(\r\n                    swapAddress\r\n                );\r\n            }\r\n            for (uint256 i = 0; i < 4; i++) {\r\n                poolTokens[i] = poolUnderlyingCoins[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the Curve pool contains WBTC\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool contains WBTC, false otherwise\r\n    */\r\n    function isBtcPool(address swapAddress) public view returns (bool) {\r\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == wbtcToken || poolTokens[i] == sbtcCrvToken)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Checks if the Curve pool contains ETH\r\n    @param swapAddress Curve swap address for the pool\r\n    @return true if the pool contains ETH, false otherwise\r\n    */\r\n    function isEthPool(address swapAddress) external view returns (bool) {\r\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == ETHAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    @notice Check if the pool contains the toToken\r\n    @param swapAddress Curve swap address for the pool\r\n    @param toToken contract address of the token\r\n    @return true if the pool contains the token, false otherwise\r\n    @return index of the token in the pool, 0 if pool does not contain the token\r\n    */\r\n    function isUnderlyingToken(address swapAddress, address toToken)\r\n        external\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        address[4] memory poolTokens = getPoolTokens(swapAddress);\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            if (poolTokens[i] == address(0)) return (false, 0);\r\n            if (poolTokens[i] == toToken) return (true, i);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    /**\r\n    @notice Updates to the latest Curve registry from the address provider\r\n    */\r\n    function update_curve_registry() external onlyOwner {\r\n        address new_address = CurveAddressProvider.get_registry();\r\n\r\n        require(address(CurveRegistry) != new_address, \"Already updated\");\r\n\r\n        CurveRegistry = ICurveRegistry(new_address);\r\n    }\r\n\r\n    /**\r\n    @notice Updates to the latest Curve factory registry from the address provider\r\n    */\r\n    function update_factory_registry() external onlyOwner {\r\n        address new_address = CurveAddressProvider.get_address(3);\r\n\r\n        require(address(FactoryRegistry) != new_address, \"Already updated\");\r\n\r\n        FactoryRegistry = ICurveFactoryRegistry(new_address);\r\n    }\r\n\r\n    /**\r\n    @notice Updates to the latest Curve crypto registry from the address provider\r\n    */\r\n    function update_crypto_registry() external onlyOwner {\r\n        address new_address = CurveAddressProvider.get_address(5);\r\n\r\n        require(address(CurveCryptoRegistry) != new_address, \"Already updated\");\r\n\r\n        CurveCryptoRegistry = ICurveCryptoRegistry(new_address);\r\n    }\r\n\r\n    /**\r\n    @notice Add new pools which use the _use_underlying bool\r\n    @param swapAddresses Curve swap addresses for the pool\r\n    @param addUnderlying True if underlying tokens are always added\r\n    */\r\n    function updateShouldAddUnderlying(\r\n        address[] calldata swapAddresses,\r\n        bool[] calldata addUnderlying\r\n    ) external onlyOwner {\r\n        require(\r\n            swapAddresses.length == addUnderlying.length,\r\n            \"Mismatched arrays\"\r\n        );\r\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\r\n            shouldAddUnderlying[swapAddresses[i]] = addUnderlying[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Add new pools which use uamounts for add_liquidity\r\n    @param swapAddresses Curve swap addresses to map from\r\n    @param _depositAddresses Curve deposit addresses to map to\r\n    */\r\n    function updateDepositAddresses(\r\n        address[] calldata swapAddresses,\r\n        address[] calldata _depositAddresses\r\n    ) external onlyOwner {\r\n        require(\r\n            swapAddresses.length == _depositAddresses.length,\r\n            \"Mismatched arrays\"\r\n        );\r\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\r\n            depositAddresses[swapAddresses[i]] = _depositAddresses[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    //@notice Withdraw stuck tokens\r\n    */\r\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 qty;\r\n\r\n            if (tokens[i] == ETHAddress) {\r\n                qty = address(this).balance;\r\n                Address.sendValue(payable(owner()), qty);\r\n            } else {\r\n                qty = IERC20(tokens[i]).balanceOf(address(this));\r\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CurveCryptoRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveCryptoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CurveRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FactoryRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getNumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"poolTokens\",\"type\":\"address[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isBtcPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isCryptoPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isCurvePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isEthPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isFactoryPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isMetaPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"isUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"}],\"name\":\"isV2Pool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAddUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositAddresses\",\"type\":\"address[]\"}],\"name\":\"updateDepositAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"addUnderlying\",\"type\":\"bool[]\"}],\"name\":\"updateShouldAddUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_crypto_registry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_curve_registry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_factory_registry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Curve_Registry_V3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aec33a4331c4cfb63e0ddd9061d5e9e097de7beb82a1b34e6ba364e58f63a9ba"}]}