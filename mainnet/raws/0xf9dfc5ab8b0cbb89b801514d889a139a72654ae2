{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract Presale {\r\n    using SafeERC20 for IERC20;\r\n\taddress private _owner;\r\n\t\r\n\tIERC20 private _token;\r\n\tIERC20 private _wdf;\r\n\tuint256 private _pricetoken;\r\n\tuint256 private _priceeth;\r\n\t\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnerSet(address(0), _owner);\r\n    }\r\n\r\n    function token() public view virtual returns (IERC20) {\r\n\t\treturn _token;\r\n    }\r\n\t\r\n    function wdf() public view virtual returns (IERC20) {\r\n\t\treturn _wdf;\r\n    }\r\n\t\r\n    function pricetoken() public view virtual returns (uint256) {\r\n\t\treturn _pricetoken;\r\n    }\r\n\t\r\n    function priceeth() public view virtual returns (uint256) {\r\n\t\treturn _priceeth;\r\n    }\r\n\t\r\n    function Config(IERC20 token_addr, IERC20 wdf_addr, uint256 pricetoken_amount, uint256 priceeth_amount) public isOwner returns (bool success) {\r\n\t\trequire(pricetoken_amount > 0, \"Config: missing by token price\");\r\n\t\trequire(priceeth_amount > 0, \"Config: missing by eth price\");\r\n\t\t_token = token_addr;\r\n\t\t_wdf = wdf_addr;\r\n\t\t_pricetoken = pricetoken_amount;\r\n\t\t_priceeth = priceeth_amount;\r\n        return true;\r\n    }\r\n\t\r\n    event WDFSale(address receiver, uint256 paid, uint256 received);\r\n\tfunction BuyWDF(uint256 amount) public returns (bool success) {\r\n        require(amount > 0, \"BuyWDF: amount is not positive\");\r\n        require(_pricetoken > 0, \"BuyWDF: price not configured\");\r\n        uint256 paid = (amount / 100) * _pricetoken;\r\n        if(_wdf.decimals() > _token.decimals()){\r\n            uint256 diff = _wdf.decimals() - _token.decimals();\r\n            for (uint8 i = 0; i < diff; i++){\r\n                paid /= 10;\r\n            }\r\n        }\r\n        if(_token.decimals() > _wdf.decimals()){\r\n            uint256 diff = _token.decimals() - _wdf.decimals();\r\n            for (uint8 i = 0; i < diff; i++){\r\n                paid *= 10;\r\n            }\r\n        }\r\n        require(paid > 0, \"BuyWDF: amount for paid is not positive\");\r\n        uint256 allowance = _token.allowance(msg.sender, address(this));\r\n        require(allowance >= paid, \"BuyWDF: Check the token allowance\");\r\n        require(_token.transferFrom(msg.sender, address(this), paid) == true, \"BuyWDF: Couldn't transfer tokens to WDF Team\");\r\n        require(_wdf.transfer(msg.sender, amount) == true, \"BuyWDF: Couldn't transfer WDF tokens to buyer\");\r\n\t\temit WDFSale(msg.sender, paid, amount);\r\n        return true;\r\n    }\r\n\t\r\n\t//IF BUY FOR ETHER\r\n\tfunction BuyWDFETH() payable public {\r\n        uint256 amount = msg.value;\r\n        require(amount > 0, \"BuyWDFETH: amount is not positive\");\r\n        require(_priceeth > 0, \"BuyWDFETH: price not configured\");\r\n        uint256 diff = 18 - _wdf.decimals();\r\n        uint256 up = 1;\r\n        for (uint8 i = 0; i < diff; i++){\r\n            up *= 10;\r\n        }\r\n        uint256 getwdf = ( amount * _priceeth ) / up;\r\n        require(getwdf > 0, \"BuyWDF: received WDF amount is not positive\");\r\n        require(_wdf.transfer(msg.sender, getwdf) == true, \"BuyWDFETH: Couldn't transfer WDF tokens to buyer\");\r\n        emit WDFSale(msg.sender, amount, getwdf);\r\n    }\r\n\t\r\n\tfunction WithdrawSale(IERC20 token_address) public isOwner {\r\n        address payable to = payable(_owner);\r\n        uint256 balance = address(this).balance;\r\n        if(balance > 0){\r\n            to.transfer(balance);\r\n        }\r\n        uint256 balance_ = token_address.balanceOf(address(this));\r\n        if(balance_ > 0){\r\n            token_address.approve(address(this), balance_);\r\n            token_address.transferFrom(address(this), _owner, balance_);\r\n        }\r\n    }\r\n\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    function getOwner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\t\r\n    function setOwner(address newOwner) public isOwner {\r\n\t\trequire(newOwner != address(0), \"WDF: missing new Owner address\");\r\n        emit OwnerSet(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == _owner, \"WDF Caller is not owner\");\r\n        _;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"WDF SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"WDF SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"WDF SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"WDF SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"WDF SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"WDF Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"WDF Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"WDF Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"WDF Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"WDF Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"WDF Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"WDF: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"WDF: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"WDF: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"WDF: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"WDFSale\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyWDF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyWDFETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_addr\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"wdf_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricetoken_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceeth_amount\",\"type\":\"uint256\"}],\"name\":\"Config\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"WithdrawSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricetoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37a80355b07f161004dd1797a730e9af01348b31100d7d11b6d34118ac68588c"}]}