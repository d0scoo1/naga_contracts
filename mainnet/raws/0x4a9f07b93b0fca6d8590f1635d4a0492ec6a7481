{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(\r\n        address owner,\r\n        uint256 cdpId,\r\n        address allowedAddr\r\n    ) external view returns (uint256);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function ilks(uint256) external view returns (bytes32);\r\n\r\n    function owns(uint256) external view returns (address);\r\n\r\n    function urns(uint256) external view returns (address);\r\n\r\n    function cdpAllow(\r\n        uint256 cdp,\r\n        address usr,\r\n        uint256 ok\r\n    ) external;\r\n\r\n    function frob(\r\n        uint256,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function flux(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function move(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function exit(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface ICommand {\r\n    function isTriggerDataValid(uint256 _cdpId, bytes memory triggerData)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isExecutionCorrect(uint256 cdpId, bytes memory triggerData)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isExecutionLegal(uint256 cdpId, bytes memory triggerData) external view returns (bool);\r\n\r\n    function execute(\r\n        bytes calldata executionData,\r\n        uint256 cdpId,\r\n        bytes memory triggerData\r\n    ) external;\r\n}\r\n\r\ninterface BotLike {\r\n    function addRecord(\r\n        uint256 cdpId,\r\n        uint256 triggerType,\r\n        uint256 replacedTriggerId,\r\n        bytes memory triggerData\r\n    ) external;\r\n\r\n    function removeRecord(\r\n        // This function should be executed allways in a context of AutomationBot address not DsProxy,\r\n        //msg.sender should be dsProxy\r\n        uint256 cdpId,\r\n        uint256 triggerId\r\n    ) external;\r\n\r\n    function execute(\r\n        bytes calldata executionData,\r\n        uint256 cdpId,\r\n        bytes calldata triggerData,\r\n        address commandAddress,\r\n        uint256 triggerId,\r\n        uint256 daiCoverage\r\n    ) external;\r\n}\r\n\r\ncontract ServiceRegistry {\r\n    uint256 public constant MAX_DELAY = 30 days;\r\n\r\n    mapping(bytes32 => uint256) public lastExecuted;\r\n    mapping(bytes32 => address) private namedService;\r\n    address public owner;\r\n    uint256 public requiredDelay;\r\n\r\n    modifier validateInput(uint256 len) {\r\n        require(msg.data.length == len, \"registry/illegal-padding\");\r\n        _;\r\n    }\r\n\r\n    modifier delayedExecution() {\r\n        bytes32 operationHash = keccak256(msg.data);\r\n        uint256 reqDelay = requiredDelay;\r\n\r\n        /* solhint-disable not-rely-on-time */\r\n        if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\r\n            // not called before, scheduled for execution\r\n            lastExecuted[operationHash] = block.timestamp;\r\n            emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\r\n        } else {\r\n            require(\r\n                block.timestamp - reqDelay > lastExecuted[operationHash],\r\n                \"registry/delay-too-small\"\r\n            );\r\n            emit ChangeApplied(operationHash, block.timestamp, msg.data);\r\n            _;\r\n            lastExecuted[operationHash] = 0;\r\n        }\r\n        /* solhint-enable not-rely-on-time */\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"registry/only-owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 initialDelay) {\r\n        require(initialDelay <= MAX_DELAY, \"registry/invalid-delay\");\r\n        requiredDelay = initialDelay;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        external\r\n        onlyOwner\r\n        validateInput(36)\r\n        delayedExecution\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeRequiredDelay(uint256 newDelay)\r\n        external\r\n        onlyOwner\r\n        validateInput(36)\r\n        delayedExecution\r\n    {\r\n        require(newDelay <= MAX_DELAY, \"registry/invalid-delay\");\r\n        requiredDelay = newDelay;\r\n    }\r\n\r\n    function getServiceNameHash(string memory name) external pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(name));\r\n    }\r\n\r\n    function addNamedService(bytes32 serviceNameHash, address serviceAddress)\r\n        external\r\n        onlyOwner\r\n        validateInput(68)\r\n        delayedExecution\r\n    {\r\n        require(namedService[serviceNameHash] == address(0), \"registry/service-override\");\r\n        namedService[serviceNameHash] = serviceAddress;\r\n    }\r\n\r\n    function updateNamedService(bytes32 serviceNameHash, address serviceAddress)\r\n        external\r\n        onlyOwner\r\n        validateInput(68)\r\n        delayedExecution\r\n    {\r\n        require(namedService[serviceNameHash] != address(0), \"registry/service-does-not-exist\");\r\n        namedService[serviceNameHash] = serviceAddress;\r\n    }\r\n\r\n    function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\r\n        require(namedService[serviceNameHash] != address(0), \"registry/service-does-not-exist\");\r\n        namedService[serviceNameHash] = address(0);\r\n        emit NamedServiceRemoved(serviceNameHash);\r\n    }\r\n\r\n    function getRegisteredService(string memory serviceName) external view returns (address) {\r\n        return namedService[keccak256(abi.encodePacked(serviceName))];\r\n    }\r\n\r\n    function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\r\n        return namedService[serviceNameHash];\r\n    }\r\n\r\n    function clearScheduledExecution(bytes32 scheduledExecution)\r\n        external\r\n        onlyOwner\r\n        validateInput(36)\r\n    {\r\n        require(lastExecuted[scheduledExecution] > 0, \"registry/execution-not-scheduled\");\r\n        lastExecuted[scheduledExecution] = 0;\r\n        emit ChangeCancelled(scheduledExecution);\r\n    }\r\n\r\n    event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\r\n    event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\r\n    event ChangeCancelled(bytes32 dataHash);\r\n    event NamedServiceRemoved(bytes32 nameHash);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 internal constant WAD = 10**18;\r\n    uint256 internal constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract IVat {\r\n    struct Urn {\r\n        uint256 ink; // Locked Collateral  [wad]\r\n        uint256 art; // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art; // Total Normalised Debt     [wad]\r\n        uint256 rate; // Accumulated Rates         [ray]\r\n        uint256 spot; // Price with Safety Margin  [ray]\r\n        uint256 line; // Debt Ceiling              [rad]\r\n        uint256 dust; // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping(bytes32 => mapping(address => Urn)) public urns;\r\n    mapping(bytes32 => Ilk) public ilks;\r\n    mapping(bytes32 => mapping(address => uint256)) public gem; // [wad]\r\n\r\n    function can(address, address) public view virtual returns (uint256);\r\n\r\n    function dai(address) public view virtual returns (uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) public virtual;\r\n\r\n    function hope(address) public virtual;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual;\r\n\r\n    function fork(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) public virtual;\r\n}\r\n\r\nabstract contract IGem {\r\n    function dec() public virtual returns (uint256);\r\n\r\n    function gem() public virtual returns (IGem);\r\n\r\n    function join(address, uint256) public payable virtual;\r\n\r\n    function exit(address, uint256) public virtual;\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual returns (bool);\r\n\r\n    function deposit() public payable virtual;\r\n\r\n    function withdraw(uint256) public virtual;\r\n\r\n    function allowance(address, address) public virtual returns (uint256);\r\n}\r\n\r\nabstract contract IJoin {\r\n    bytes32 public ilk;\r\n\r\n    function dec() public view virtual returns (uint256);\r\n\r\n    function gem() public view virtual returns (IGem);\r\n\r\n    function join(address, uint256) public payable virtual;\r\n\r\n    function exit(address, uint256) public virtual;\r\n}\r\n\r\nabstract contract IDaiJoin {\r\n    function vat() public virtual returns (IVat);\r\n\r\n    function dai() public virtual returns (IGem);\r\n\r\n    function join(address, uint256) public payable virtual;\r\n\r\n    function exit(address, uint256) public virtual;\r\n}\r\n\r\nabstract contract IJug {\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256 rho;\r\n    }\r\n\r\n    mapping(bytes32 => Ilk) public ilks;\r\n\r\n    function drip(bytes32) public virtual returns (uint256);\r\n}\r\n\r\n/// @title Getter contract for Vault info from Maker protocol\r\ncontract McdUtils is DSMath {\r\n    address public immutable serviceRegistry;\r\n    IERC20 private immutable DAI;\r\n    address private immutable daiJoin;\r\n    address public immutable jug;\r\n\r\n    constructor(\r\n        address _serviceRegistry,\r\n        IERC20 _dai,\r\n        address _daiJoin,\r\n        address _jug\r\n    ) {\r\n        serviceRegistry = _serviceRegistry;\r\n        DAI = _dai;\r\n        daiJoin = _daiJoin;\r\n        jug = _jug;\r\n    }\r\n\r\n    function toInt256(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int256-overflow\");\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address vat,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint256 wad\r\n    ) internal returns (int256 dart) {\r\n        // Updates stability fee rate\r\n        uint256 rate = IJug(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = IVat(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = toInt256(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = mul(uint256(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function drawDebt(\r\n        uint256 borrowedDai,\r\n        uint256 cdpId,\r\n        ManagerLike manager,\r\n        address sendTo\r\n    ) external {\r\n        address urn = manager.urns(cdpId);\r\n        address vat = manager.vat();\r\n\r\n        manager.frob(cdpId, 0, _getDrawDart(vat, urn, manager.ilks(cdpId), borrowedDai));\r\n        manager.move(cdpId, address(this), mul(borrowedDai, RAY));\r\n\r\n        if (IVat(vat).can(address(this), daiJoin) == 0) {\r\n            IVat(vat).hope(daiJoin);\r\n        }\r\n\r\n        IJoin(daiJoin).exit(sendTo, borrowedDai);\r\n    }\r\n}\r\n\r\n\r\ncontract AutomationBot {\r\n    struct TriggerRecord {\r\n        bytes32 triggerHash;\r\n        uint256 cdpId;\r\n    }\r\n\r\n    string private constant CDP_MANAGER_KEY = \"CDP_MANAGER\";\r\n    string private constant AUTOMATION_BOT_KEY = \"AUTOMATION_BOT\";\r\n    string private constant AUTOMATION_EXECUTOR_KEY = \"AUTOMATION_EXECUTOR\";\r\n    string private constant MCD_UTILS_KEY = \"MCD_UTILS\";\r\n\r\n    mapping(uint256 => TriggerRecord) public activeTriggers;\r\n\r\n    uint256 public triggersCounter = 0;\r\n\r\n    ServiceRegistry public immutable serviceRegistry;\r\n    address public immutable self;\r\n\r\n    constructor(ServiceRegistry _serviceRegistry) {\r\n        serviceRegistry = _serviceRegistry;\r\n        self = address(this);\r\n    }\r\n\r\n    modifier auth(address caller) {\r\n        require(\r\n            serviceRegistry.getRegisteredService(AUTOMATION_EXECUTOR_KEY) == caller,\r\n            \"bot/not-executor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyDelegate() {\r\n        require(address(this) != self, \"bot/only-delegate\");\r\n        _;\r\n    }\r\n\r\n    // works correctly in any context\r\n    function validatePermissions(\r\n        uint256 cdpId,\r\n        address operator,\r\n        ManagerLike manager\r\n    ) private view {\r\n        require(isCdpOwner(cdpId, operator, manager), \"bot/no-permissions\");\r\n    }\r\n\r\n    // works correctly in any context\r\n    function isCdpAllowed(\r\n        uint256 cdpId,\r\n        address operator,\r\n        ManagerLike manager\r\n    ) public view returns (bool) {\r\n        address cdpOwner = manager.owns(cdpId);\r\n        return (manager.cdpCan(cdpOwner, cdpId, operator) == 1) || (operator == cdpOwner);\r\n    }\r\n\r\n    // works correctly in any context\r\n    function isCdpOwner(\r\n        uint256 cdpId,\r\n        address operator,\r\n        ManagerLike manager\r\n    ) private view returns (bool) {\r\n        return (operator == manager.owns(cdpId));\r\n    }\r\n\r\n    // works correctly in any context\r\n    function getCommandAddress(uint256 triggerType) public view returns (address) {\r\n        bytes32 commandHash = keccak256(abi.encode(\"Command\", triggerType));\r\n\r\n        address commandAddress = serviceRegistry.getServiceAddress(commandHash);\r\n\r\n        return commandAddress;\r\n    }\r\n\r\n    // works correctly in any context\r\n    function getTriggersHash(\r\n        uint256 cdpId,\r\n        bytes memory triggerData,\r\n        address commandAddress\r\n    ) private view returns (bytes32) {\r\n        bytes32 triggersHash = keccak256(\r\n            abi.encodePacked(cdpId, triggerData, serviceRegistry, commandAddress)\r\n        );\r\n\r\n        return triggersHash;\r\n    }\r\n\r\n    // works correctly in context of Automation Bot\r\n    function checkTriggersExistenceAndCorrectness(\r\n        uint256 cdpId,\r\n        uint256 triggerId,\r\n        address commandAddress,\r\n        bytes memory triggerData\r\n    ) private view {\r\n        bytes32 triggersHash = activeTriggers[triggerId].triggerHash;\r\n\r\n        require(\r\n            triggersHash != bytes32(0) &&\r\n                triggersHash == getTriggersHash(cdpId, triggerData, commandAddress),\r\n            \"bot/invalid-trigger\"\r\n        );\r\n    }\r\n\r\n    function checkTriggersExistenceAndCorrectness(uint256 cdpId, uint256 triggerId) private view {\r\n        require(activeTriggers[triggerId].cdpId == cdpId, \"bot/invalid-trigger\");\r\n    }\r\n\r\n    // works correctly in context of automationBot\r\n    function addRecord(\r\n        // This function should be executed allways in a context of AutomationBot address not DsProxy,\r\n        // msg.sender should be dsProxy\r\n        uint256 cdpId,\r\n        uint256 triggerType,\r\n        uint256 replacedTriggerId,\r\n        bytes memory triggerData\r\n    ) external {\r\n        ManagerLike manager = ManagerLike(serviceRegistry.getRegisteredService(CDP_MANAGER_KEY));\r\n        address commandAddress = getCommandAddress(triggerType);\r\n\r\n        require(\r\n            ICommand(commandAddress).isTriggerDataValid(cdpId, triggerData),\r\n            \"bot/invalid-trigger-data\"\r\n        );\r\n\r\n        require(isCdpAllowed(cdpId, msg.sender, manager), \"bot/no-permissions\");\r\n\r\n        triggersCounter = triggersCounter + 1;\r\n        activeTriggers[triggersCounter] = TriggerRecord(\r\n            getTriggersHash(cdpId, triggerData, commandAddress),\r\n            cdpId\r\n        );\r\n\r\n        if (replacedTriggerId != 0) {\r\n            require(\r\n                activeTriggers[replacedTriggerId].cdpId == cdpId,\r\n                \"bot/trigger-removal-illegal\"\r\n            );\r\n            activeTriggers[replacedTriggerId] = TriggerRecord(0, 0);\r\n            emit TriggerRemoved(cdpId, replacedTriggerId);\r\n        }\r\n        emit TriggerAdded(triggersCounter, commandAddress, cdpId, triggerData);\r\n    }\r\n\r\n    // works correctly in context of automationBot\r\n    function removeRecord(\r\n        // This function should be executed allways in a context of AutomationBot address not DsProxy,\r\n        // msg.sender should be dsProxy\r\n        uint256 cdpId,\r\n        uint256 triggerId\r\n    ) external {\r\n        address managerAddress = serviceRegistry.getRegisteredService(CDP_MANAGER_KEY);\r\n\r\n        require(isCdpAllowed(cdpId, msg.sender, ManagerLike(managerAddress)), \"bot/no-permissions\");\r\n        // validatePermissions(cdpId, msg.sender, ManagerLike(managerAddress));\r\n\r\n        checkTriggersExistenceAndCorrectness(cdpId, triggerId);\r\n\r\n        activeTriggers[triggerId] = TriggerRecord(0, 0);\r\n        emit TriggerRemoved(cdpId, triggerId);\r\n    }\r\n\r\n    //works correctly in context of dsProxy\r\n    function addTrigger(\r\n        uint256 cdpId,\r\n        uint256 triggerType,\r\n        uint256 replacedTriggerId,\r\n        bytes memory triggerData\r\n    ) external onlyDelegate {\r\n        // TODO: consider adding isCdpAllow add flag in tx payload, make sense from extensibility perspective\r\n        ManagerLike manager = ManagerLike(serviceRegistry.getRegisteredService(CDP_MANAGER_KEY));\r\n\r\n        address automationBot = serviceRegistry.getRegisteredService(AUTOMATION_BOT_KEY);\r\n        BotLike(automationBot).addRecord(cdpId, triggerType, replacedTriggerId, triggerData);\r\n        if (!isCdpAllowed(cdpId, automationBot, manager)) {\r\n            manager.cdpAllow(cdpId, automationBot, 1);\r\n            emit ApprovalGranted(cdpId, automationBot);\r\n        }\r\n    }\r\n\r\n    //works correctly in context of dsProxy\r\n\r\n    // TODO: removeAllowance parameter of this method moves responsibility to decide on this to frontend.\r\n    // In case of a bug on frontend allowance might be revoked by setting this parameter to `true`\r\n    // despite there still be some active triggers which will be disables by this call.\r\n    // One of the solutions is to add counter of active triggers and revoke allowance only if last trigger is being deleted\r\n    function removeTrigger(\r\n        uint256 cdpId,\r\n        uint256 triggerId,\r\n        bool removeAllowance\r\n    ) external onlyDelegate {\r\n        address managerAddress = serviceRegistry.getRegisteredService(CDP_MANAGER_KEY);\r\n        ManagerLike manager = ManagerLike(managerAddress);\r\n\r\n        address automationBot = serviceRegistry.getRegisteredService(AUTOMATION_BOT_KEY);\r\n\r\n        BotLike(automationBot).removeRecord(cdpId, triggerId);\r\n\r\n        if (removeAllowance) {\r\n            manager.cdpAllow(cdpId, automationBot, 0);\r\n            emit ApprovalRemoved(cdpId, automationBot);\r\n        }\r\n\r\n        emit TriggerRemoved(cdpId, triggerId);\r\n    }\r\n\r\n    //works correctly in context of dsProxy\r\n    function removeApproval(ServiceRegistry _serviceRegistry, uint256 cdpId) external onlyDelegate {\r\n        address approvedEntity = changeApprovalStatus(_serviceRegistry, cdpId, 0);\r\n        emit ApprovalRemoved(cdpId, approvedEntity);\r\n    }\r\n\r\n    //works correctly in context of dsProxy\r\n    function grantApproval(ServiceRegistry _serviceRegistry, uint256 cdpId) external onlyDelegate {\r\n        address approvedEntity = changeApprovalStatus(_serviceRegistry, cdpId, 1);\r\n        emit ApprovalGranted(cdpId, approvedEntity);\r\n    }\r\n\r\n    //works correctly in context of dsProxy\r\n    function changeApprovalStatus(\r\n        ServiceRegistry _serviceRegistry,\r\n        uint256 cdpId,\r\n        uint256 status\r\n    ) private returns (address) {\r\n        address managerAddress = _serviceRegistry.getRegisteredService(CDP_MANAGER_KEY);\r\n        ManagerLike manager = ManagerLike(managerAddress);\r\n        address automationBot = _serviceRegistry.getRegisteredService(AUTOMATION_BOT_KEY);\r\n        require(\r\n            isCdpAllowed(cdpId, automationBot, manager) != (status == 1),\r\n            \"bot/approval-unchanged\"\r\n        );\r\n        validatePermissions(cdpId, address(this), manager);\r\n        manager.cdpAllow(cdpId, automationBot, status);\r\n        return automationBot;\r\n    }\r\n\r\n    function drawDaiFromVault(\r\n        uint256 cdpId,\r\n        ManagerLike manager,\r\n        uint256 daiCoverage\r\n    ) internal {\r\n        address utilsAddress = serviceRegistry.getRegisteredService(MCD_UTILS_KEY);\r\n\r\n        McdUtils utils = McdUtils(utilsAddress);\r\n        manager.cdpAllow(cdpId, utilsAddress, 1);\r\n        utils.drawDebt(daiCoverage, cdpId, manager, msg.sender);\r\n        manager.cdpAllow(cdpId, utilsAddress, 0);\r\n    }\r\n\r\n    //works correctly in context of automationBot\r\n    function execute(\r\n        bytes calldata executionData,\r\n        uint256 cdpId,\r\n        bytes calldata triggerData,\r\n        address commandAddress,\r\n        uint256 triggerId,\r\n        uint256 daiCoverage\r\n    ) external auth(msg.sender) {\r\n        checkTriggersExistenceAndCorrectness(cdpId, triggerId, commandAddress, triggerData);\r\n        ManagerLike manager = ManagerLike(serviceRegistry.getRegisteredService(CDP_MANAGER_KEY));\r\n        drawDaiFromVault(cdpId, manager, daiCoverage);\r\n\r\n        ICommand command = ICommand(commandAddress);\r\n        require(command.isExecutionLegal(cdpId, triggerData), \"bot/trigger-execution-illegal\");\r\n\r\n        manager.cdpAllow(cdpId, commandAddress, 1);\r\n        command.execute(executionData, cdpId, triggerData);\r\n        activeTriggers[triggerId] = TriggerRecord(0, 0);\r\n        manager.cdpAllow(cdpId, commandAddress, 0);\r\n\r\n        require(command.isExecutionCorrect(cdpId, triggerData), \"bot/trigger-execution-wrong\");\r\n\r\n        emit TriggerExecuted(triggerId, cdpId, executionData);\r\n    }\r\n\r\n    event ApprovalRemoved(uint256 indexed cdpId, address approvedEntity);\r\n\r\n    event ApprovalGranted(uint256 indexed cdpId, address approvedEntity);\r\n\r\n    event TriggerRemoved(uint256 indexed cdpId, uint256 indexed triggerId);\r\n\r\n    event TriggerAdded(\r\n        uint256 indexed triggerId,\r\n        address indexed commandAddress,\r\n        uint256 indexed cdpId,\r\n        bytes triggerData\r\n    );\r\n\r\n    event TriggerExecuted(uint256 indexed triggerId, uint256 indexed cdpId, bytes executionData);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ninterface IExchange {\r\n    function swapTokenForDai(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 receiveAtLeast,\r\n        address callee,\r\n        bytes calldata withData\r\n    ) external;\r\n\r\n    function swapDaiForToken(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 receiveAtLeast,\r\n        address callee,\r\n        bytes calldata withData\r\n    ) external;\r\n}\r\n\r\ncontract AutomationExecutor {\r\n    using SafeERC20 for IERC20;\r\n\r\n    BotLike public immutable bot;\r\n    IERC20 public immutable dai;\r\n    IWETH public immutable weth;\r\n\r\n    address public exchange;\r\n    address public owner;\r\n\r\n    mapping(address => bool) public callers;\r\n\r\n    constructor(\r\n        BotLike _bot,\r\n        IERC20 _dai,\r\n        IWETH _weth,\r\n        address _exchange\r\n    ) {\r\n        bot = _bot;\r\n        weth = _weth;\r\n        dai = _dai;\r\n        exchange = _exchange;\r\n        owner = msg.sender;\r\n        callers[owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"executor/only-owner\");\r\n        _;\r\n    }\r\n\r\n    modifier auth(address caller) {\r\n        require(callers[caller], \"executor/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"executor/invalid-new-owner\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setExchange(address newExchange) external onlyOwner {\r\n        require(newExchange != address(0), \"executor/invalid-new-exchange\");\r\n        exchange = newExchange;\r\n    }\r\n\r\n    function addCaller(address caller) external onlyOwner {\r\n        callers[caller] = true;\r\n    }\r\n\r\n    function removeCaller(address caller) external onlyOwner {\r\n        require(caller != msg.sender, \"executor/cannot-remove-owner\");\r\n        callers[caller] = false;\r\n    }\r\n\r\n    function execute(\r\n        bytes calldata executionData,\r\n        uint256 cdpId,\r\n        bytes calldata triggerData,\r\n        address commandAddress,\r\n        uint256 triggerId,\r\n        uint256 daiCoverage,\r\n        uint256 minerBribe,\r\n        int256 gasRefund\r\n    ) external auth(msg.sender) {\r\n        uint256 initialGasAvailable = gasleft();\r\n        bot.execute(executionData, cdpId, triggerData, commandAddress, triggerId, daiCoverage);\r\n\r\n        if (minerBribe > 0) {\r\n            block.coinbase.transfer(minerBribe);\r\n        }\r\n        uint256 finalGasAvailable = gasleft();\r\n        uint256 etherUsed = tx.gasprice *\r\n            uint256(int256(initialGasAvailable - finalGasAvailable) - gasRefund);\r\n\r\n        if (address(this).balance > etherUsed) {\r\n            payable(msg.sender).transfer(etherUsed);\r\n        } else {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        address otherAsset,\r\n        bool toDai,\r\n        uint256 amount,\r\n        uint256 receiveAtLeast,\r\n        address callee,\r\n        bytes calldata withData\r\n    ) external auth(msg.sender) {\r\n        IERC20 fromToken = toDai ? IERC20(otherAsset) : dai;\r\n        require(\r\n            amount > 0 && amount <= fromToken.balanceOf(address(this)),\r\n            \"executor/invalid-amount\"\r\n        );\r\n\r\n        uint256 allowance = fromToken.allowance(address(this), exchange);\r\n\r\n        if (amount > allowance) {\r\n            fromToken.safeIncreaseAllowance(exchange, type(uint256).max - allowance);\r\n        }\r\n\r\n        if (toDai) {\r\n            IExchange(exchange).swapTokenForDai(\r\n                otherAsset,\r\n                amount,\r\n                receiveAtLeast,\r\n                callee,\r\n                withData\r\n            );\r\n        } else {\r\n            IExchange(exchange).swapDaiForToken(\r\n                otherAsset,\r\n                amount,\r\n                receiveAtLeast,\r\n                callee,\r\n                withData\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdraw(address asset, uint256 amount) external onlyOwner {\r\n        if (asset == address(0)) {\r\n            require(amount <= address(this).balance, \"executor/invalid-amount\");\r\n            (bool sent, ) = payable(owner).call{ value: amount }(\"\");\r\n            require(sent, \"executor/withdrawal-failed\");\r\n        } else {\r\n            IERC20(asset).safeTransfer(owner, amount);\r\n        }\r\n    }\r\n\r\n    function unwrapWETH(uint256 amount) external onlyOwner {\r\n        weth.withdraw(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ninterface MPALike {\r\n    struct CdpData {\r\n        address gemJoin;\r\n        address payable fundsReceiver;\r\n        uint256 cdpId;\r\n        bytes32 ilk;\r\n        uint256 requiredDebt;\r\n        uint256 borrowCollateral;\r\n        uint256 withdrawCollateral;\r\n        uint256 withdrawDai;\r\n        uint256 depositDai;\r\n        uint256 depositCollateral;\r\n        bool skipFL;\r\n        string methodName;\r\n    }\r\n\r\n    struct AddressRegistry {\r\n        address jug;\r\n        address manager;\r\n        address multiplyProxyActions;\r\n        address lender;\r\n        address exchange;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address fromTokenAddress;\r\n        address toTokenAddress;\r\n        uint256 fromTokenAmount;\r\n        uint256 toTokenAmount;\r\n        uint256 minToTokenAmount;\r\n        address exchangeAddress;\r\n        bytes _exchangeCalldata;\r\n    }\r\n\r\n    function closeVaultExitCollateral(\r\n        ExchangeData calldata exchangeData,\r\n        CdpData memory cdpData,\r\n        AddressRegistry calldata addressRegistry\r\n    ) external;\r\n\r\n    function closeVaultExitDai(\r\n        ExchangeData calldata exchangeData,\r\n        CdpData memory cdpData,\r\n        AddressRegistry calldata addressRegistry\r\n    ) external;\r\n}\r\n\r\ninterface IPipInterface {\r\n    function read() external returns (bytes32);\r\n}\r\n\r\ninterface SpotterLike {\r\n    function ilks(bytes32) external view returns (IPipInterface pip, uint256 mat);\r\n\r\n    function par() external view returns (uint256);\r\n}\r\n\r\ninterface VatLike {\r\n    function urns(bytes32, address) external view returns (uint256 ink, uint256 art);\r\n\r\n    function ilks(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 art, // Total Normalised Debt      [wad]\r\n            uint256 rate, // Accumulated Rates         [ray]\r\n            uint256 spot, // Price with Safety Margin  [ray]\r\n            uint256 line, // Debt Ceiling              [rad]\r\n            uint256 dust // Urn Debt Floor             [rad]\r\n        );\r\n\r\n    function gem(bytes32, address) external view returns (uint256); // [wad]\r\n\r\n    function can(address, address) external view returns (uint256);\r\n\r\n    function dai(address) external view returns (uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function hope(address) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function fork(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n}\r\n\r\ninterface OsmMomLike {\r\n    function osms(bytes32) external view returns (address);\r\n}\r\n\r\ninterface OsmLike {\r\n    function peep() external view returns (bytes32, bool);\r\n\r\n    function bud(address) external view returns (uint256);\r\n\r\n    function kiss(address a) external;\r\n}\r\n\r\n/// @title Getter contract for Vault info from Maker protocol\r\ncontract McdView is DSMath {\r\n    ManagerLike public manager;\r\n    VatLike public vat;\r\n    SpotterLike public spotter;\r\n    OsmMomLike public osmMom;\r\n    address public owner;\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    constructor(\r\n        address _vat,\r\n        address _manager,\r\n        address _spotter,\r\n        address _mom,\r\n        address _owner\r\n    ) {\r\n        manager = ManagerLike(_manager);\r\n        vat = VatLike(_vat);\r\n        spotter = SpotterLike(_spotter);\r\n        osmMom = OsmMomLike(_mom);\r\n        owner = _owner;\r\n    }\r\n\r\n    function approve(address _allowedReader, bool isApproved) external {\r\n        require(msg.sender == owner, \"mcd-view/not-authorised\");\r\n        whitelisted[_allowedReader] = isApproved;\r\n    }\r\n\r\n    /// @notice Gets Vault info (collateral, debt)\r\n    /// @param vaultId Id of the Vault\r\n    function getVaultInfo(uint256 vaultId) public view returns (uint256, uint256) {\r\n        address urn = manager.urns(vaultId);\r\n        bytes32 ilk = manager.ilks(vaultId);\r\n\r\n        (uint256 collateral, uint256 debt) = vat.urns(ilk, urn);\r\n        (, uint256 rate, , , ) = vat.ilks(ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param ilk Ilk of the Vault\r\n    function getPrice(bytes32 ilk) public view returns (uint256) {\r\n        (, uint256 mat) = spotter.ilks(ilk);\r\n        (, , uint256 spot, , ) = vat.ilks(ilk);\r\n\r\n        return div(rmul(rmul(spot, spotter.par()), mat), 10**9);\r\n    }\r\n\r\n    /// @notice Gets oracle next price of the asset\r\n    /// @param ilk Ilk of the Vault\r\n    function getNextPrice(bytes32 ilk) public view returns (uint256) {\r\n        require(whitelisted[msg.sender], \"mcd-view/not-whitelisted\");\r\n        OsmLike osm = OsmLike(osmMom.osms(ilk));\r\n        (bytes32 val, bool status) = osm.peep();\r\n        require(status, \"mcd-view/osm-price-error\");\r\n        return uint256(val);\r\n    }\r\n\r\n    /// @notice Gets Vaults ratio\r\n    /// @param vaultId Id of the Vault\r\n    function getRatio(uint256 vaultId, bool useNextPrice) public view returns (uint256) {\r\n        bytes32 ilk = manager.ilks(vaultId);\r\n        uint256 price = useNextPrice ? getNextPrice(ilk) : getPrice(ilk);\r\n        (uint256 collateral, uint256 debt) = getVaultInfo(vaultId);\r\n        if (debt == 0) return 0;\r\n        return wdiv(wmul(collateral, price), debt);\r\n    }\r\n}\r\n\r\ncontract CloseCommand is ICommand {\r\n    address public immutable serviceRegistry;\r\n    string private constant CDP_MANAGER_KEY = \"CDP_MANAGER\";\r\n    string private constant MCD_VIEW_KEY = \"MCD_VIEW\";\r\n    string private constant MPA_KEY = \"MULTIPLY_PROXY_ACTIONS\";\r\n\r\n    constructor(address _serviceRegistry) {\r\n        serviceRegistry = _serviceRegistry;\r\n    }\r\n\r\n    function isExecutionCorrect(uint256 cdpId, bytes memory) external view override returns (bool) {\r\n        address viewAddress = ServiceRegistry(serviceRegistry).getRegisteredService(MCD_VIEW_KEY);\r\n        McdView viewerContract = McdView(viewAddress);\r\n        (uint256 collateral, uint256 debt) = viewerContract.getVaultInfo(cdpId);\r\n        return !(collateral > 0 || debt > 0);\r\n    }\r\n\r\n    function isExecutionLegal(uint256 _cdpId, bytes memory triggerData)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        (, , uint256 slLevel) = abi.decode(triggerData, (uint256, uint16, uint256));\r\n\r\n        address managerAddress = ServiceRegistry(serviceRegistry).getRegisteredService(\r\n            CDP_MANAGER_KEY\r\n        );\r\n        ManagerLike manager = ManagerLike(managerAddress);\r\n        if (manager.owns(_cdpId) == address(0)) {\r\n            return false;\r\n        }\r\n        address viewAddress = ServiceRegistry(serviceRegistry).getRegisteredService(MCD_VIEW_KEY);\r\n        uint256 collRatio = McdView(viewAddress).getRatio(_cdpId, true);\r\n        bool vaultNotEmpty = collRatio != 0; // MCD_VIEW contract returns 0 (instead of infinity) as a collateralisation ratio of empty vault\r\n        return vaultNotEmpty && collRatio <= slLevel * 10**16;\r\n    }\r\n\r\n    function execute(\r\n        bytes calldata executionData,\r\n        uint256,\r\n        bytes memory triggerData\r\n    ) external override {\r\n        (, uint16 triggerType, ) = abi.decode(triggerData, (uint256, uint16, uint256));\r\n\r\n        address mpaAddress = ServiceRegistry(serviceRegistry).getRegisteredService(MPA_KEY);\r\n\r\n        bytes4 prefix = abi.decode(executionData, (bytes4));\r\n        bytes4 expectedSelector;\r\n\r\n        if (triggerType == 1) {\r\n            expectedSelector = MPALike.closeVaultExitCollateral.selector;\r\n        } else if (triggerType == 2) {\r\n            expectedSelector = MPALike.closeVaultExitDai.selector;\r\n        } else revert(\"unsupported-triggerType\");\r\n\r\n        require(prefix == expectedSelector, \"wrong-payload\");\r\n        //since all global values in this contract are either const or immutable, this delegate call do not break any storage\r\n        //this is simplest approach, most similar to way we currently call dsProxy\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool status, ) = mpaAddress.delegatecall(executionData);\r\n\r\n        require(status, \"execution failed\");\r\n    }\r\n\r\n    function isTriggerDataValid(uint256 _cdpId, bytes memory triggerData)\r\n        external\r\n        pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        (uint256 cdpId, uint16 triggerType, uint256 slLevel) = abi.decode(\r\n            triggerData,\r\n            (uint256, uint16, uint256)\r\n        );\r\n        return slLevel > 100 && _cdpId == cdpId && (triggerType == 1 || triggerType == 2);\r\n    }\r\n}\r\n\r\ncontract DummyCommand is ICommand {\r\n    address public serviceRegistry;\r\n    bool public initialCheckReturn;\r\n    bool public finalCheckReturn;\r\n    bool public revertsInExecute;\r\n    bool public validTriggerData;\r\n\r\n    constructor(\r\n        address _serviceRegistry,\r\n        bool _initialCheckReturn,\r\n        bool _finalCheckReturn,\r\n        bool _revertsInExecute,\r\n        bool _validTriggerData\r\n    ) {\r\n        serviceRegistry = _serviceRegistry;\r\n        initialCheckReturn = _initialCheckReturn;\r\n        finalCheckReturn = _finalCheckReturn;\r\n        revertsInExecute = _revertsInExecute;\r\n        validTriggerData = _validTriggerData;\r\n    }\r\n\r\n    function changeValidTriggerDataFlag(bool _validTriggerData) external {\r\n        validTriggerData = _validTriggerData;\r\n    }\r\n\r\n    function changeFlags(\r\n        bool _initialCheckReturn,\r\n        bool _finalCheckReturn,\r\n        bool _revertsInExecute\r\n    ) external {\r\n        initialCheckReturn = _initialCheckReturn;\r\n        finalCheckReturn = _finalCheckReturn;\r\n        revertsInExecute = _revertsInExecute;\r\n    }\r\n\r\n    function isTriggerDataValid(uint256, bytes memory) external view override returns (bool) {\r\n        return validTriggerData;\r\n    }\r\n\r\n    function isExecutionCorrect(\r\n        uint256, // cdpId\r\n        bytes memory // triggerData\r\n    ) external view override returns (bool) {\r\n        return finalCheckReturn;\r\n    }\r\n\r\n    function isExecutionLegal(\r\n        uint256, // cdpId\r\n        bytes memory // triggerData\r\n    ) external view override returns (bool) {\r\n        return initialCheckReturn;\r\n    }\r\n\r\n    function execute(\r\n        bytes calldata,\r\n        uint256,\r\n        bytes memory\r\n    ) external view override {\r\n        require(!revertsInExecute, \"command failed\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract TestERC20 is ERC20 {\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 amount_\r\n    ) ERC20(name_, symbol_) {\r\n        _mint(msg.sender, amount_);\r\n    }\r\n}\r\n\r\ncontract TestExchange is IExchange {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable DAI;\r\n\r\n    constructor(IERC20 _dai) {\r\n        DAI = _dai;\r\n    }\r\n\r\n    function swapTokenForDai(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 receiveAtLeast,\r\n        address,\r\n        bytes calldata\r\n    ) external override {\r\n        require(\r\n            IERC20(asset).transferFrom(msg.sender, address(this), amount),\r\n            \"exchange/asset-from-failed\"\r\n        );\r\n        require(DAI.transfer(msg.sender, receiveAtLeast), \"exchange/dai-to-failed\");\r\n    }\r\n\r\n    function swapDaiForToken(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 receiveAtLeast,\r\n        address,\r\n        bytes calldata\r\n    ) external override {\r\n        require(DAI.transferFrom(msg.sender, address(this), amount), \"exchange/dai-from-failed\");\r\n        require(IERC20(asset).transfer(msg.sender, receiveAtLeast), \"exchange/asset-to-failed\");\r\n    }\r\n}\r\n\r\n\r\ninterface DsProxyLike {\r\n    function owner() external view returns (address);\r\n\r\n    function setOwner(address owner_) external;\r\n\r\n    function execute(address target, bytes memory data) external payable returns (bytes32 response);\r\n}\r\n\r\ncontract TestWETH {\r\n    string public name = \"Wrapped Ether\";\r\n    string public symbol = \"WETH\";\r\n    uint8 public decimals = 18;\r\n\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\r\n    event Deposit(address indexed dst, uint256 wad);\r\n    event Withdrawal(address indexed src, uint256 wad);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        payable(msg.sender).transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) public returns (bool) {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ChangeApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ChangeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduledFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ChangeScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"NamedServiceRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"serviceAddress\",\"type\":\"address\"}],\"name\":\"addNamedService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"changeRequiredDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"scheduledExecution\",\"type\":\"bytes32\"}],\"name\":\"clearScheduledExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"getRegisteredService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceNameHash\",\"type\":\"bytes32\"}],\"name\":\"getServiceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getServiceNameHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lastExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceNameHash\",\"type\":\"bytes32\"}],\"name\":\"removeNamedService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"serviceAddress\",\"type\":\"address\"}],\"name\":\"updateNamedService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ServiceRegistry", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000708", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5b9db2a1c8b73793786d8ec465648bddd1de1e27f6f5ebc574d4a0c940b5a79"}]}