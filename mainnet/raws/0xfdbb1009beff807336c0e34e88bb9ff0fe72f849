{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: IXSushi.sol\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface IXSushi {\r\n    function enter(uint256 _amount) external;\r\n    function leave(uint256 _share) external;\r\n}\r\n\r\n// File: ILendingLogic.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface ILendingLogic {\r\n    /**\r\n        @notice Get the APR based on underlying token.\r\n        @param _token Address of the underlying token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromUnderlying(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the APR based on wrapped token.\r\n        @param _token Address of the wrapped token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromWrapped(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the calls needed to lend.\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount of the underlying token\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function lend(address _underlying, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the calls needed to unlend\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of the underlying tokens\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function unlend(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRate(address _wrapped) external returns(uint256);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRateView(address _wrapped) external view returns(uint256);\r\n}\r\n\r\n// File: Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: LendingRegistry.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// TODO consider making this contract upgradeable\r\ncontract LendingRegistry is Ownable {\r\n\r\n    // Maps wrapped token to protocol\r\n    mapping(address => bytes32) public wrappedToProtocol;\r\n    // Maps wrapped token to underlying\r\n    mapping(address => address) public wrappedToUnderlying;\r\n\r\n    mapping(address => mapping(bytes32 => address)) public underlyingToProtocolWrapped;\r\n\r\n    // Maps protocol to addresses containing lend and unlend logic\r\n    mapping(bytes32 => address) public protocolToLogic;\r\n\r\n    event WrappedToProtocolSet(address indexed wrapped, bytes32 indexed protocol);\r\n    event WrappedToUnderlyingSet(address indexed wrapped, address indexed underlying);\r\n    event ProtocolToLogicSet(bytes32 indexed protocol, address indexed logic);\r\n    event UnderlyingToProtocolWrappedSet(address indexed underlying, bytes32 indexed protocol, address indexed wrapped);\r\n\r\n    /**\r\n        @notice Set which protocl a wrapped token belongs to\r\n        @param _wrapped Address of the wrapped token\r\n        @param _protocol Bytes32 key of the protocol\r\n    */\r\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) onlyOwner external {\r\n        wrappedToProtocol[_wrapped] = _protocol;\r\n        emit WrappedToProtocolSet(_wrapped, _protocol);\r\n    }\r\n\r\n    /**\r\n        @notice Set what is the underlying for a wrapped token\r\n        @param _wrapped Address of the wrapped token\r\n        @param _underlying Address of the underlying token\r\n    */\r\n    function setWrappedToUnderlying(address _wrapped, address _underlying) onlyOwner external {\r\n        wrappedToUnderlying[_wrapped] = _underlying;\r\n        emit WrappedToUnderlyingSet(_wrapped, _underlying);\r\n    }\r\n\r\n    /**\r\n        @notice Set the logic contract for the protocol\r\n        @param _protocol Bytes32 key of the protocol\r\n        @param _logic Address of the lending logic contract for that protocol\r\n    */\r\n    function setProtocolToLogic(bytes32 _protocol, address _logic) onlyOwner external {\r\n        protocolToLogic[_protocol] = _logic;\r\n        emit ProtocolToLogicSet(_protocol, _logic);\r\n    }\r\n\r\n    /**\r\n        @notice Set the wrapped token for the underlying deposited in this protocol\r\n        @param _underlying Address of the unerlying token\r\n        @param _protocol Bytes32 key of the protocol\r\n        @param _wrapped Address of the wrapped token\r\n    */\r\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) onlyOwner external {\r\n        underlyingToProtocolWrapped[_underlying][_protocol] = _wrapped;\r\n        emit UnderlyingToProtocolWrappedSet(_underlying, _protocol, _wrapped);\r\n    }\r\n\r\n    /**\r\n        @notice Get tx data to lend the underlying amount in a specific protocol\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount to lend\r\n        @param _protocol Bytes32 key of the protocol\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getLendTXData(address _underlying, uint256 _amount, address _tokenHolder, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data) {\r\n        ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[_protocol]);\r\n        require(address(lendingLogic) != address(0), \"NO_LENDING_LOGIC_SET\");\r\n\r\n        return lendingLogic.lend(_underlying, _amount, _tokenHolder);\r\n    }\r\n\r\n    /**\r\n        @notice Get the tx data to unlend the wrapped amount\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of wrapped token to unlend\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getUnlendTXData(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data) {\r\n        ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[wrappedToProtocol[_wrapped]]);\r\n        require(address(lendingLogic) != address(0), \"NO_LENDING_LOGIC_SET\");\r\n\r\n        return lendingLogic.unlend(_wrapped, _amount, _tokenHolder);\r\n    }\r\n\r\n    /**\r\n        @notice Get the beste apr for the give protocols\r\n        @dev returns default values if lending logic not found\r\n        @param _underlying Address of the underlying token\r\n        @param _protocols Array of protocols to include\r\n        @return apr The APR\r\n        @return protocol Protocol that provides the APR\r\n    */\r\n    function getBestApr(address _underlying, bytes32[] memory _protocols) external view returns(uint256 apr, bytes32 protocol) {\r\n        uint256 bestApr;\r\n        bytes32 bestProtocol;\r\n\r\n        for(uint256 i = 0; i < _protocols.length; i++) {\r\n            bytes32 protocol = _protocols[i];\r\n            ILendingLogic lendingLogic = ILendingLogic(protocolToLogic[protocol]);\r\n            require(address(lendingLogic) != address(0), \"NO_LENDING_LOGIC_SET\");\r\n\r\n            uint256 apr = lendingLogic.getAPRFromUnderlying(_underlying);\r\n            if (apr > bestApr) {\r\n                bestApr = apr;\r\n                bestProtocol = protocol;\r\n            }\r\n        }\r\n\r\n        return (bestApr, bestProtocol);\r\n    }\r\n}\r\n\r\n// File: StakingLogicSushi.sol\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.7.1;\r\n\r\ncontract StakingLogicSushi{\r\n\r\n    LendingRegistry public lendingRegistry;\r\n    bytes32 public immutable protocolKey;\r\n\r\n    constructor(address _lendingRegistry, bytes32 _protocolKey) {\r\n        require(_lendingRegistry != address(0), \"INVALID_LENDING_REGISTRY\");\r\n        lendingRegistry = LendingRegistry(_lendingRegistry);\r\n        protocolKey = _protocolKey;\r\n    }\r\n\r\n    function getAPRFromWrapped(address _token) public view returns(uint256) {\r\n        return uint256(0);\r\n    }\r\n\r\n    function getAPRFromUnderlying(address _token) external view returns(uint256) {\r\n        return uint256(0);\r\n    }\r\n\r\n    function lend(address _underlying, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data) {\r\n        IERC20 underlying = IERC20(_underlying);\r\n\r\n        targets = new address[](3);\r\n        data = new bytes[](3);\r\n\r\n        address SushiBar = lendingRegistry.underlyingToProtocolWrapped(_underlying, protocolKey);\r\n\r\n        // zero out approval to be sure\r\n        targets[0] = _underlying;\r\n        data[0] = abi.encodeWithSelector(underlying.approve.selector, SushiBar, 0);\r\n\r\n        // Set approval\r\n        targets[1] = _underlying;\r\n        data[1] = abi.encodeWithSelector(underlying.approve.selector, SushiBar, _amount);\r\n\r\n        // Stake in Sushi Bar\r\n        targets[2] = SushiBar;\r\n        data[2] =  abi.encodeWithSelector(IXSushi.enter.selector, _amount);\r\n\r\n        return(targets, data);\r\n    }\r\n\r\n    function unlend(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data) {\r\n        targets = new address[](1);\r\n        data = new bytes[](1);\r\n\r\n        targets[0] = _wrapped;\r\n        data[0] = abi.encodeWithSelector(IXSushi.leave.selector, _amount);\r\n\r\n        return(targets, data);\r\n    }\r\n\r\n    function exchangeRate(address _wrapped) external view returns(uint256) {\r\n        return _exchangeRate(_wrapped);\r\n    }\r\n\r\n    function exchangeRateView(address _wrapped) external view returns(uint256) {\r\n        return _exchangeRate(_wrapped);\r\n    }\r\n\r\n    function _exchangeRate(address _wrapped) internal view returns(uint256) {\r\n        IERC20 xToken = IERC20(_wrapped);\r\n        IERC20 token = IERC20(lendingRegistry.wrappedToUnderlying(_wrapped));\r\n        return mulDivUp(token.balanceOf(_wrapped),10**18,xToken.totalSupply());\r\n    }\r\n     \r\n    //As implemented by big brains of solmate:\r\n    //https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\r\n    function mulDivUp(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 z) {\r\n        assembly {\r\n            // Store x * y in z for now.\r\n            z := mul(x, y)\r\n\r\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\r\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\r\n                revert(0, 0)\r\n            }\r\n\r\n            // First, divide z - 1 by the denominator and add 1.\r\n            // We allow z - 1 to underflow if z is 0, because we multiply the\r\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\r\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_protocolKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"name\":\"exchangeRateView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAPRFromUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAPRFromWrapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingRegistry\",\"outputs\":[{\"internalType\":\"contract LendingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"unlend\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingLogicSushi", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000008a2b7d713e388123dc6678168656659d297d3970000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb1f23b97b59dfc58044bc4124b5b87df9a470f0d60ca580751e683cc811465f"}]}