{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solhint-disable const-name-snakecase\r\n\r\npragma solidity 0.8.7;\r\n\r\n/// @notice Minimal interface for BentoBox token vault interactions - `token` is aliased as `address` from `IERC20` for code simplicity.\r\ninterface IBentoBoxMinimal {\r\n\r\n    struct Rebase {\r\n        uint128 elastic;\r\n        uint128 base;\r\n    }\r\n\r\n    struct StrategyData {\r\n        uint64 strategyStartDate;\r\n        uint64 targetPercentage;\r\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\r\n    }\r\n\r\n    function strategyData(address token) external view returns (StrategyData memory);\r\n\r\n    /// @notice Balance per ERC-20 token per account in shares.\r\n    function balanceOf(address, address) external view returns (uint256);\r\n\r\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\r\n    /// @param token_ The ERC-20 token to deposit.\r\n    /// @param from which account to pull the tokens.\r\n    /// @param to which account to push the tokens.\r\n    /// @param amount Token amount in native representation to deposit.\r\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\r\n    /// @return amountOut The amount deposited.\r\n    /// @return shareOut The deposited amount repesented in shares.\r\n    function deposit(\r\n        address token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    /// @notice Withdraws an amount of `token` from a user account.\r\n    /// @param token_ The ERC-20 token to withdraw.\r\n    /// @param from which user to pull the tokens.\r\n    /// @param to which user to push the tokens.\r\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\r\n    /// @param share Like above, but `share` takes precedence over `amount`.\r\n    function withdraw(\r\n        address token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    /// @notice Transfer shares from a user account to another one.\r\n    /// @param token The ERC-20 token to transfer.\r\n    /// @param from which user to pull the tokens.\r\n    /// @param to which user to push the tokens.\r\n    /// @param share The amount of `token` in shares.\r\n    function transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    /// @dev Helper function to represent an `amount` of `token` in shares.\r\n    /// @param token The ERC-20 token.\r\n    /// @param amount The `token` amount.\r\n    /// @param roundUp If the result `share` should be rounded up.\r\n    /// @return share The token amount represented in shares.\r\n    function toShare(\r\n        address token,\r\n        uint256 amount,\r\n        bool roundUp\r\n    ) external view returns (uint256 share);\r\n\r\n    /// @dev Helper function to represent shares back into the `token` amount.\r\n    /// @param token The ERC-20 token.\r\n    /// @param share The amount of shares.\r\n    /// @param roundUp If the result should be rounded up.\r\n    /// @return amount The share amount back into native representation.\r\n    function toAmount(\r\n        address token,\r\n        uint256 share,\r\n        bool roundUp\r\n    ) external view returns (uint256 amount);\r\n\r\n    /// @notice Registers this contract so that users can approve it for the BentoBox.\r\n    function registerProtocol() external;\r\n\r\n    function totals(address token) external view returns (Rebase memory);\r\n\r\n    function harvest(\r\n        address token,\r\n        bool balance,\r\n        uint256 maxChangeAmount\r\n    ) external;\r\n}\r\n\r\ninterface IReducer {\r\n    function reduceCompletely(address cauldron) external;\r\n}\r\n\r\ncontract Rebalance {\r\n    error NotHighEnough();\r\n    address public constant UST = 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD;\r\n    IReducer private constant reducer = IReducer(0x16ebACab63581e69d6F7594C9Eb1a05dF808ea75);\r\n    address private constant strategy = 0x9CD243E5200B290F10d74D93E0CA6C9e51B3d664;\r\n    IBentoBoxMinimal private constant bentoBox = IBentoBoxMinimal(0xd96f48665a1410C0cd669A88898ecA36B9Fc2cce);\r\n\r\n    function reduce() external {\r\n        uint256 amount = bentoBox.toAmount(UST, bentoBox.balanceOf(UST, address(strategy)), false);\r\n\r\n        if (amount <= 100 ether) {\r\n            revert NotHighEnough();\r\n        }\r\n\r\n        bentoBox.harvest(UST, true, type(uint256).max);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"NotHighEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rebalance", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ffad97d4a064784bd4cdc3120843ff7147921beeab5641deb7506dca4e318e8"}]}