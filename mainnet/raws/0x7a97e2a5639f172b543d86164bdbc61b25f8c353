{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract TokenLike {\r\n    function transfer(address, uint256) external virtual;\r\n}\r\n\r\n/**\r\n* @notice   Minimal treasury for the community DAO\r\n*           Allows for delegating control of the treasury (fixed amount per epoch)\r\n*           Governance can update allowance or revoke rights at any time\r\n*           Increases in allowance take effect only in next epoch, decreases immediately\r\n**/\r\ncontract GebDaoMinimalTreasury is GebAuth {\r\n    // --- State vars ---\r\n    // Token kept in the treasury\r\n    TokenLike immutable public token;\r\n    // Delegate, can spend allowance every epoch\r\n    address public treasuryDelegate;\r\n    // Duration of each epoch (seconds)\r\n    uint256 public epochLength;\r\n    // Amount that can be spent each epoch\r\n    uint256 public delegateAllowance;\r\n    // Amount left to spend in current epock\r\n    uint256 internal delegateLeftoverToSpend_;\r\n    // Current epoch start (Unix timestamp)\r\n    uint256 public epochStart;\r\n\r\n    // --- Constructor ---\r\n    /**\r\n     * @notice Constructor\r\n     * @param _token Token to be used\r\n     * @param _delegate Delegate\r\n     * @param _epochLength Duration of each epoch (seconds)\r\n     * @param _delegateAllowance Amount that can be spent by the delegate each epoch\r\n     */\r\n    constructor(\r\n        address _token,\r\n        address _delegate,\r\n        uint256 _epochLength,\r\n        uint256 _delegateAllowance\r\n    ) public {\r\n        require(_epochLength > 0, \"GebDAOMinimalTreasury/invalid-epoch\");\r\n        require(_token != address(0), \"GebDAOMinimalTreasury/invalid-epoch\");\r\n        token = TokenLike(_token);\r\n        treasuryDelegate = _delegate;\r\n        epochLength = _epochLength;\r\n        delegateAllowance = _delegateAllowance;\r\n        epochStart = now;\r\n        delegateLeftoverToSpend_ = _delegateAllowance;\r\n    }\r\n\r\n    // --- SafeMath ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"GebDAOMinimalTreasury/add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"GebDAOMinimalTreasury/sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"GebDAOMinimalTreasury/mul-overflow\");\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Admin Functions ---\r\n    /**\r\n    * @notice Modify an int256 parameter\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new value for the parameter\r\n    **/\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"epochLength\") {\r\n          require(val > 0, \"GebDAOMinimalTreasury/invalid-epochLength\");\r\n          epochLength = val;\r\n        }\r\n        else if (parameter == \"delegateAllowance\") {\r\n          delegateAllowance = val;\r\n          if (val < delegateLeftoverToSpend_)\r\n            delegateLeftoverToSpend_ = val;\r\n        }\r\n        else revert(\"GebDAOMinimalTreasury/modify-unrecognized-param\");\r\n    }\r\n\r\n    /**\r\n    * @notice Modify an int256 parameter\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new value for the parameter\r\n    **/\r\n    function modifyParameters(bytes32 parameter, address val) external isAuthorized {\r\n        if (parameter == \"treasuryDelegate\") {\r\n          treasuryDelegate = val;\r\n        }\r\n        else revert(\"GebDAOMinimalTreasury/modify-unrecognized-param\");\r\n    }\r\n\r\n    // --- Delegate functions ---\r\n    /**\r\n    * @notice Updates epoch info. Unused balance in previous epochs should not be available\r\n    **/\r\n    modifier updateEpoch() {\r\n        uint256 epochFinish = add(epochStart, epochLength);\r\n        if (now > epochFinish) {\r\n            delegateLeftoverToSpend_ = delegateAllowance;\r\n            if (now - epochFinish > epochLength) {\r\n                uint256 epochsElapsed = sub(now, epochFinish) / epochLength;\r\n                epochStart = add(mul(epochsElapsed, epochLength), epochFinish);\r\n            } else\r\n                epochStart = epochFinish;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from treasury to dst\r\n     * @param dst The address to transfer tokens to\r\n     * @param amount The amount of tokens to transfer\r\n     */\r\n    function delegateTransferERC20(address dst, uint256 amount) external updateEpoch {\r\n        require(msg.sender == treasuryDelegate, \"GebDAOMinimalTreasury/unauthorized\");\r\n        delegateLeftoverToSpend_ = sub(delegateLeftoverToSpend_, amount); // reverts if lower allowance\r\n        token.transfer(dst, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer any token from treasury to dst (admin only)\r\n     * @param dst The address to transfer tokens to\r\n     * @param amount The amount of tokens to transfer\r\n     */\r\n    function transferERC20(address _token, address dst, uint256 amount) external isAuthorized {\r\n        TokenLike(_token).transfer(dst, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns current delegateLeftoverToSpend\r\n     */\r\n    function delegateLeftoverToSpend() external view returns (uint256) {\r\n        uint256 epochFinish = add(epochStart, epochLength);\r\n        if (now > epochFinish)\r\n            return delegateAllowance;\r\n        else\r\n            return delegateLeftoverToSpend_;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegateAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateLeftoverToSpend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegateTransferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GebDaoMinimalTreasury", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002835c00000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9a6ffacbf0dbce8201a04925a7f92a5aa3ea71e8ec21e656fea3f96291116dc6"}]}