{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Kohi/CustomPath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./VertexData.sol\\\";\\r\\n\\r\\nstruct CustomPath {\\r\\n    int32 numVertices;\\r\\n    VertexData[] vertexData;\\r\\n}\\r\\n\\r\\nlibrary CustomPathMethods {\\r\\n    function create(uint maxVertices) external pure returns (CustomPath memory data) {\\r\\n        data.numVertices = 0;\\r\\n        data.vertexData = new VertexData[](maxVertices);\\r\\n    }\\r\\n\\r\\n    function vertices(CustomPath memory self)\\r\\n        external\\r\\n        pure\\r\\n        returns (VertexData[] memory results)\\r\\n    {\\r\\n        results = new VertexData[](uint32(self.numVertices) + 1);\\r\\n        for (uint32 i = 0; i < uint32(self.numVertices); i++) {\\r\\n            (Command command, int64 x, int64 y) = vertex(self, int32(i));\\r\\n            results[i] = VertexData(command, Vector2(x, y));\\r\\n        }\\r\\n        results[uint32(self.numVertices)] = VertexData(\\r\\n            Command.Stop,\\r\\n            Vector2(0, 0)\\r\\n        );\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    function add(\\r\\n        CustomPath memory self,\\r\\n        int64 x,\\r\\n        int64 y,\\r\\n        Command command\\r\\n    ) internal pure {\\r\\n        self.vertexData[uint32(self.numVertices++)] = VertexData(\\r\\n            command,\\r\\n            Vector2(x, y)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function endPoly(CustomPath memory self) internal pure {\\r\\n        Command command = lastCommand(self);\\r\\n        if (command != Command.Stop && command != Command.EndPoly) {\\r\\n            self.vertexData[uint32(self.numVertices++)] = VertexData(\\r\\n                Command.MoveTo,\\r\\n                Vector2(0, 0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function moveTo(\\r\\n        CustomPath memory self,\\r\\n        int64 x,\\r\\n        int64 y\\r\\n    ) internal pure {\\r\\n        self.vertexData[uint32(self.numVertices++)] = VertexData(\\r\\n            Command.MoveTo,\\r\\n            Vector2(x, y)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function lineTo(\\r\\n        CustomPath memory self,\\r\\n        int64 x,\\r\\n        int64 y\\r\\n    ) internal pure {\\r\\n        self.vertexData[uint32(self.numVertices++)] = VertexData(\\r\\n            Command.LineTo,\\r\\n            Vector2(x, y)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function lastCommand(CustomPath memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Command)\\r\\n    {\\r\\n        return\\r\\n            self.numVertices != 0\\r\\n                ? self.vertexData[uint32(self.numVertices - 1)].command\\r\\n                : Command.Stop;\\r\\n    }\\r\\n\\r\\n    function lastX(CustomPath memory self) internal pure returns (int64) {\\r\\n        if (self.numVertices > 0) {\\r\\n            int32 index = self.numVertices - 1;\\r\\n            return self.vertexData[uint32(index)].position.x;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function lastY(CustomPath memory self) internal pure returns (int64) {\\r\\n        if (self.numVertices > 0) {\\r\\n            int32 index = self.numVertices - 1;\\r\\n            return self.vertexData[uint32(index)].position.y;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function previousVertex(CustomPath memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            Command,\\r\\n            int64 x,\\r\\n            int64 y\\r\\n        )\\r\\n    {\\r\\n        if (self.numVertices > 1) {\\r\\n            return vertex(self, self.numVertices - 2);\\r\\n        }\\r\\n        x = 0;\\r\\n        y = 0;\\r\\n        return (Command.Stop, x, y);\\r\\n    }\\r\\n\\r\\n    function vertex(CustomPath memory self, int32 index)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            Command,\\r\\n            int64 x,\\r\\n            int64 y\\r\\n        )\\r\\n    {\\r\\n        x = self.vertexData[uint32(index)].position.x;\\r\\n        y = self.vertexData[uint32(index)].position.y;\\r\\n        return (self.vertexData[uint32(index)].command, x, y);\\r\\n    }\\r\\n\\r\\n    function commandAt(CustomPath memory self, int32 index)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Command)\\r\\n    {\\r\\n        return self.vertexData[uint32(index)].command;\\r\\n    }\\r\\n\\r\\n    function lastVertex(CustomPath memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            Command,\\r\\n            int64 x,\\r\\n            int64 y\\r\\n        )\\r\\n    {\\r\\n        if (self.numVertices != 0) {\\r\\n            return vertex(self, self.numVertices - 1);\\r\\n        }\\r\\n        x = 0;\\r\\n        y = 0;\\r\\n        return (Command.Stop, x, y);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Kohi/VertexData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./Command.sol\\\";\\r\\nimport \\\"./Vector2.sol\\\";\\r\\n\\r\\nstruct VertexData {\\r\\n    Command command;\\r\\n    Vector2 position;\\r\\n}\"\r\n    },\r\n    \"contracts/Kohi/Command.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nenum Command {\\r\\n    Stop,\\r\\n    MoveTo,\\r\\n    LineTo,\\r\\n    Curve3,\\r\\n    Curve4,\\r\\n    EndPoly\\r\\n}\"\r\n    },\r\n    \"contracts/Kohi/Vector2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* Copyright (c) Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\n/*\\r\\n/*\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                               //\\r\\n//     @@@@@@@@@@@@@@                        @@@@                                // \\r\\n//               @@@@                        @@@@ @@@@@@@@                       // \\r\\n//               @@@@    @@@@@@@@@@@@@@@@    @@@@@@@          @@@@@@@@@@@@@@@@   // \\r\\n//               @@@@                        @@@@                                // \\r\\n//     @@@@@@@@@@@@@@                        @@@@@@@@@@@@@                       // \\r\\n//               @@@@                          @@@@@@@@@@@                       // \\r\\n//                                                                               //\\r\\n///////////////////////////////////////////////////////////////////////////////////\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct Vector2 {\\r\\n    int64 x;\\r\\n    int64 y;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxVertices\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"numVertices\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"enum Command\",\"name\":\"command\",\"type\":\"Command\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"internalType\":\"struct Vector2\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct VertexData[]\",\"name\":\"vertexData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CustomPath\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"numVertices\",\"type\":\"int32\"},{\"components\":[{\"internalType\":\"enum Command\",\"name\":\"command\",\"type\":\"Command\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"internalType\":\"struct Vector2\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct VertexData[]\",\"name\":\"vertexData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CustomPath\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"vertices\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Command\",\"name\":\"command\",\"type\":\"Command\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"internalType\":\"struct Vector2\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct VertexData[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CustomPathMethods", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}