{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\n library SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n contract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint _value) {\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract BAC is StandardToken{\r\n    string public constant name = \"BananaFundCoin\";\r\n    string public constant symbol = \"BAC\";\r\n    uint public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n    \r\n    //1\u4ee5\u592a\u53ef\u4ee5\u5151\u6362\u4ee3\u5e01\u6570\u91cf\r\n    uint public price ;\r\n    uint public issueIndex = 0;\r\n    //\u4ee3\u5e01\u5206\u914d\r\n    uint public constant bacFund =500*(10**6)*10**decimals;\r\n    uint public constant MaxReleasedBac =1000*(10**6)*10**decimals;\r\n    //\u5224\u5b9a\u662f\u5426\u5728BAC\u5151\u6362\u4e2d\r\n    bool public saleOrNot;\r\n    //\u4e8b\u4ef6\r\n    event InvalidCaller(address caller);\r\n    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\r\n    event StartOK();\r\n    event InvalidState(bytes msg);\r\n    event ShowMsg(bytes msg);\r\n    \r\n    //\u5b9a\u4e49\u4e3a\u5408\u7ea6\u90e8\u7f72\u7684\u90e8\u7f72\u94b1\u5305\u5730\u5740\r\n    address public target;\r\n    \r\n    //\u5408\u7ea6\u8f6c\u8d26\u5730\u5740   \u4ee3\u5e01\u5151\u6362\u4ef7\u683c \r\n    function BAC(uint _price){\r\n        target = msg.sender;\r\n        price =_price;\r\n        totalSupply=bacFund;\r\n        balances[target] = bacFund;\r\n        saleOrNot = false;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        if (target == msg.sender) {\r\n          _;\r\n        } else {\r\n            InvalidCaller(msg.sender);\r\n            throw;\r\n        }\r\n    }\r\n\r\n    modifier inProgress {\r\n        if (saleStarted()) {\r\n            _;\r\n        } else {\r\n            InvalidState(\"Sale is not in progress\");\r\n            throw;\r\n        }\r\n    }\r\n  \r\n    //\u6839\u636e\u8f6c\u5165\u7684\u4ee5\u592a\u5e01\u6570\u989d\u8fd4\u5e01\r\n    function () payable{\r\n        if(saleOrNot){\r\n            issueToken(msg.sender);\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    function issueToken(address recipient) payable inProgress{\r\n        assert(msg.value >= 0.01 ether);\r\n        //\u8ba1\u7b97\u53ef\u4ee5\u83b7\u5f97\u4ee3\u5e01\u7684\u6570\u91cf\r\n        uint  amount = computeAccount(msg.value);\r\n        if(totalSupply < bacFund+MaxReleasedBac){\r\n            balances[recipient] = balances[recipient].add(amount);\r\n            totalSupply = totalSupply.add(amount);\r\n            Issue(issueIndex++, recipient,msg.value, amount);\r\n        }else{\r\n            InvalidState(\"BAC is not enough\");\r\n            throw;\r\n        }\r\n        //\u5c06\u4ee5\u592a\u8f6c\u5165\u53d1\u8d77\u8005\u7684\u94b1\u5305\u5730\u5740\r\n        if (!target.send(msg.value)) {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    //\u8ba1\u7b97\u8fd4\u56de\u4ee3\u5e01\u7684\u6570\u91cf\r\n    function computeAccount(uint ehtAccount) internal constant returns (uint tokens){\r\n        tokens=price.mul(ehtAccount);\r\n    }\r\n    \r\n    //\u5b9a\u4e49\u4ee3\u5e01\u7684\u5151\u6362\u6bd4\u5217\r\n    function setPrice(uint _price) onlyOwner{\r\n        if(_price>0){\r\n            price= _price;\r\n        }else{\r\n            ShowMsg(\"Invalid price\");\r\n        }\r\n    }\r\n    \r\n    //\u5f00\u542f\u4ee3\u5e01\u7684\u53d1\u552e\r\n    function startSale() onlyOwner{\r\n        if(!saleOrNot){\r\n            saleOrNot = true;\r\n            StartOK();\r\n        }else{\r\n            ShowMsg(\"sale is ing \");\r\n        }\r\n    }   \r\n    \r\n    // \u505c\u6b62\u4ee3\u5e01\u7684\u53d1\u552e\r\n    function stopSale() onlyOwner{\r\n        if(saleOrNot) {\r\n            saleOrNot=false;\r\n            //\u5c06\u5269\u4f59\u7684\u4e0d\u8db3\u7684\u4ee3\u5e01\u8f6c\u5165target\r\n            if(totalSupply< 1500*(10**6)*10**decimals){\r\n                balances[target] = balances[target].add(1500*(10**6)*10**decimals-totalSupply);\r\n            }\r\n        }else{\r\n            ShowMsg(\"sale has been over\");\r\n        }\r\n    }\r\n    \r\n    function saleStarted() constant returns (bool) {\r\n        return saleOrNot;\r\n    }\r\n    \r\n    //\u81ea\u6740\r\n    function destroy() onlyOwner{\r\n        suicide(target);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOrNot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bacFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxReleasedBac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartOK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"ShowMsg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BAC", "CompilerVersion": "v0.4.11+commit.68ef5810", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d7afbe364eae881446af80a83f2aec4d539b6d429dbb459c9d403feefa3ba5d7"}]}