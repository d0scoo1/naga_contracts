{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.9.6 https://hardhat.org\r\n\r\n// File contracts/Frax/IFrax.sol\r\n\r\n\r\ninterface IFrax {\r\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\r\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\r\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\r\n  function addPool(address pool_address ) external;\r\n  function allowance(address owner, address spender ) external view returns (uint256);\r\n  function approve(address spender, uint256 amount ) external returns (bool);\r\n  function balanceOf(address account ) external view returns (uint256);\r\n  function burn(uint256 amount ) external;\r\n  function burnFrom(address account, uint256 amount ) external;\r\n  function collateral_ratio_paused() external view returns (bool);\r\n  function controller_address() external view returns (address);\r\n  function creator_address() external view returns (address);\r\n  function decimals() external view returns (uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\r\n  function eth_usd_consumer_address() external view returns (address);\r\n  function eth_usd_price() external view returns (uint256);\r\n  function frax_eth_oracle_address() external view returns (address);\r\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n  function frax_pools(address ) external view returns (bool);\r\n  function frax_pools_array(uint256 ) external view returns (address);\r\n  function frax_price() external view returns (uint256);\r\n  function frax_step() external view returns (uint256);\r\n  function fxs_address() external view returns (address);\r\n  function fxs_eth_oracle_address() external view returns (address);\r\n  function fxs_price() external view returns (uint256);\r\n  function genesis_supply() external view returns (uint256);\r\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\r\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\r\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\r\n  function globalCollateralValue() external view returns (uint256);\r\n  function global_collateral_ratio() external view returns (uint256);\r\n  function grantRole(bytes32 role, address account ) external;\r\n  function hasRole(bytes32 role, address account ) external view returns (bool);\r\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\r\n  function last_call_time() external view returns (uint256);\r\n  function minting_fee() external view returns (uint256);\r\n  function name() external view returns (string memory);\r\n  function owner_address() external view returns (address);\r\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\r\n  function pool_mint(address m_address, uint256 m_amount ) external;\r\n  function price_band() external view returns (uint256);\r\n  function price_target() external view returns (uint256);\r\n  function redemption_fee() external view returns (uint256);\r\n  function refreshCollateralRatio() external;\r\n  function refresh_cooldown() external view returns (uint256);\r\n  function removePool(address pool_address ) external;\r\n  function renounceRole(bytes32 role, address account ) external;\r\n  function revokeRole(bytes32 role, address account ) external;\r\n  function setController(address _controller_address ) external;\r\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\r\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\r\n  function setFXSAddress(address _fxs_address ) external;\r\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\r\n  function setFraxStep(uint256 _new_step ) external;\r\n  function setMintingFee(uint256 min_fee ) external;\r\n  function setOwner(address _owner_address ) external;\r\n  function setPriceBand(uint256 _price_band ) external;\r\n  function setPriceTarget(uint256 _new_price_target ) external;\r\n  function setRedemptionFee(uint256 red_fee ) external;\r\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\r\n  function setTimelock(address new_timelock ) external;\r\n  function symbol() external view returns (string memory);\r\n  function timelock_address() external view returns (address);\r\n  function toggleCollateralRatio() external;\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount ) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n  function weth_address() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/FXS/IFxs.sol\r\n\r\n\r\ninterface IFxs {\r\n  function DEFAULT_ADMIN_ROLE() external view returns(bytes32);\r\n  function FRAXStablecoinAdd() external view returns(address);\r\n  function FXS_DAO_min() external view returns(uint256);\r\n  function allowance(address owner, address spender) external view returns(uint256);\r\n  function approve(address spender, uint256 amount) external returns(bool);\r\n  function balanceOf(address account) external view returns(uint256);\r\n  function burn(uint256 amount) external;\r\n  function burnFrom(address account, uint256 amount) external;\r\n  function checkpoints(address, uint32) external view returns(uint32 fromBlock, uint96 votes);\r\n  function decimals() external view returns(uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool);\r\n  function genesis_supply() external view returns(uint256);\r\n  function getCurrentVotes(address account) external view returns(uint96);\r\n  function getPriorVotes(address account, uint256 blockNumber) external view returns(uint96);\r\n  function getRoleAdmin(bytes32 role) external view returns(bytes32);\r\n  function getRoleMember(bytes32 role, uint256 index) external view returns(address);\r\n  function getRoleMemberCount(bytes32 role) external view returns(uint256);\r\n  function grantRole(bytes32 role, address account) external;\r\n  function hasRole(bytes32 role, address account) external view returns(bool);\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns(bool);\r\n  function mint(address to, uint256 amount) external;\r\n  function name() external view returns(string memory);\r\n  function numCheckpoints(address) external view returns(uint32);\r\n  function oracle_address() external view returns(address);\r\n  function owner_address() external view returns(address);\r\n  function pool_burn_from(address b_address, uint256 b_amount) external;\r\n  function pool_mint(address m_address, uint256 m_amount) external;\r\n  function renounceRole(bytes32 role, address account) external;\r\n  function revokeRole(bytes32 role, address account) external;\r\n  function setFRAXAddress(address frax_contract_address) external;\r\n  function setFXSMinDAO(uint256 min_FXS) external;\r\n  function setOracle(address new_oracle) external;\r\n  function setOwner(address _owner_address) external;\r\n  function setTimelock(address new_timelock) external;\r\n  function symbol() external view returns(string memory);\r\n  function timelock_address() external view returns(address);\r\n  function toggleVotes() external;\r\n  function totalSupply() external view returns(uint256);\r\n  function trackingVotes() external view returns(bool);\r\n  function transfer(address recipient, uint256 amount) external returns(bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n}\r\n\r\n\r\n// File contracts/Frax/IFraxAMOMinter.sol\r\n\r\n\r\n// MAY need to be updated\r\ninterface IFraxAMOMinter {\r\n  function FRAX() external view returns(address);\r\n  function FXS() external view returns(address);\r\n  function acceptOwnership() external;\r\n  function addAMO(address amo_address, bool sync_too) external;\r\n  function allAMOAddresses() external view returns(address[] memory);\r\n  function allAMOsLength() external view returns(uint256);\r\n  function amos(address) external view returns(bool);\r\n  function amos_array(uint256) external view returns(address);\r\n  function burnFraxFromAMO(uint256 frax_amount) external;\r\n  function burnFxsFromAMO(uint256 fxs_amount) external;\r\n  function col_idx() external view returns(uint256);\r\n  function collatDollarBalance() external view returns(uint256);\r\n  function collatDollarBalanceStored() external view returns(uint256);\r\n  function collat_borrow_cap() external view returns(int256);\r\n  function collat_borrowed_balances(address) external view returns(int256);\r\n  function collat_borrowed_sum() external view returns(int256);\r\n  function collateral_address() external view returns(address);\r\n  function collateral_token() external view returns(address);\r\n  function correction_offsets_amos(address, uint256) external view returns(int256);\r\n  function custodian_address() external view returns(address);\r\n  function dollarBalances() external view returns(uint256 frax_val_e18, uint256 collat_val_e18);\r\n  // function execute(address _to, uint256 _value, bytes _data) external returns(bool, bytes);\r\n  function fraxDollarBalanceStored() external view returns(uint256);\r\n  function fraxTrackedAMO(address amo_address) external view returns(int256);\r\n  function fraxTrackedGlobal() external view returns(int256);\r\n  function frax_mint_balances(address) external view returns(int256);\r\n  function frax_mint_cap() external view returns(int256);\r\n  function frax_mint_sum() external view returns(int256);\r\n  function fxs_mint_balances(address) external view returns(int256);\r\n  function fxs_mint_cap() external view returns(int256);\r\n  function fxs_mint_sum() external view returns(int256);\r\n  function giveCollatToAMO(address destination_amo, uint256 collat_amount) external;\r\n  function min_cr() external view returns(uint256);\r\n  function mintFraxForAMO(address destination_amo, uint256 frax_amount) external;\r\n  function mintFxsForAMO(address destination_amo, uint256 fxs_amount) external;\r\n  function missing_decimals() external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function oldPoolCollectAndGive(address destination_amo) external;\r\n  function oldPoolRedeem(uint256 frax_amount) external;\r\n  function old_pool() external view returns(address);\r\n  function owner() external view returns(address);\r\n  function pool() external view returns(address);\r\n  function receiveCollatFromAMO(uint256 usdc_amount) external;\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function removeAMO(address amo_address, bool sync_too) external;\r\n  function setAMOCorrectionOffsets(address amo_address, int256 frax_e18_correction, int256 collat_e18_correction) external;\r\n  function setCollatBorrowCap(uint256 _collat_borrow_cap) external;\r\n  function setCustodian(address _custodian_address) external;\r\n  function setFraxMintCap(uint256 _frax_mint_cap) external;\r\n  function setFraxPool(address _pool_address) external;\r\n  function setFxsMintCap(uint256 _fxs_mint_cap) external;\r\n  function setMinimumCollateralRatio(uint256 _min_cr) external;\r\n  function setTimelock(address new_timelock) external;\r\n  function syncDollarBalances() external;\r\n  function timelock_address() external view returns(address);\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/Math/Math.sol\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Curve/IveFXS.sol\r\n\r\npragma abicoder v2;\r\n\r\ninterface IveFXS {\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    function commit_transfer_ownership(address addr) external;\r\n    function apply_transfer_ownership() external;\r\n    function commit_smart_wallet_checker(address addr) external;\r\n    function apply_smart_wallet_checker() external;\r\n    function toggleEmergencyUnlock() external;\r\n    function recoverERC20(address token_addr, uint256 amount) external;\r\n    function get_last_user_slope(address addr) external view returns (int128);\r\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\r\n    function locked__end(address _addr) external view returns (uint256);\r\n    function checkpoint() external;\r\n    function deposit_for(address _addr, uint256 _value) external;\r\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\r\n    function increase_amount(uint256 _value) external;\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n    function withdraw() external;\r\n    function balanceOf(address addr) external view returns (uint256);\r\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\r\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function totalSupply(uint256 t) external view returns (uint256);\r\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\r\n    function totalFXSSupply() external view returns (uint256);\r\n    function totalFXSSupplyAt(uint256 _block) external view returns (uint256);\r\n    function changeController(address _newController) external;\r\n    function token() external view returns (address);\r\n    function supply() external view returns (uint256);\r\n    function locked(address addr) external view returns (LockedBalance memory);\r\n    function epoch() external view returns (uint256);\r\n    function point_history(uint256 arg0) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_history(address arg0, uint256 arg1) external view returns (int128 bias, int128 slope, uint256 ts, uint256 blk, uint256 fxs_amt);\r\n    function user_point_epoch(address arg0) external view returns (uint256);\r\n    function slope_changes(uint256 arg0) external view returns (int128);\r\n    function controller() external view returns (address);\r\n    function transfersEnabled() external view returns (bool);\r\n    function emergencyUnlockActive() external view returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function future_smart_wallet_checker() external view returns (address);\r\n    function smart_wallet_checker() external view returns (address);\r\n    function admin() external view returns (address);\r\n    function future_admin() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Common/Context.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory __name, string memory __symbol) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for `accounts`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Utils/ReentrancyGuard.sol\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/veFXSYieldDistributorV4.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ======================veFXSYieldDistributorV4=======================\r\n// ====================================================================\r\n// Distributes Frax protocol yield based on the claimer's veFXS balance\r\n// V3: Yield will now not accrue for unlocked veFXS\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Jason Huan: https://github.com/jasonhuan\r\n// Sam Kazemian: https://github.com/samkazemian\r\n\r\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team (veFXS portion)\r\n// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract veFXSYieldDistributorV4 is Owned, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Instances\r\n    IveFXS private veFXS;\r\n    ERC20 public emittedToken;\r\n\r\n    // Addresses\r\n    address public emitted_token_address;\r\n\r\n    // Admin addresses\r\n    address public timelock_address;\r\n\r\n    // Constant for price precision\r\n    uint256 private constant PRICE_PRECISION = 1e6;\r\n\r\n    // Yield and period related\r\n    uint256 public periodFinish;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public yieldRate;\r\n    uint256 public yieldDuration = 604800; // 7 * 86400  (7 days)\r\n    mapping(address => bool) public reward_notifiers;\r\n\r\n    // Yield tracking\r\n    uint256 public yieldPerVeFXSStored = 0;\r\n    mapping(address => uint256) public userYieldPerTokenPaid;\r\n    mapping(address => uint256) public yields;\r\n\r\n    // veFXS tracking\r\n    uint256 public totalVeFXSParticipating = 0;\r\n    uint256 public totalVeFXSSupplyStored = 0;\r\n    mapping(address => bool) public userIsInitialized;\r\n    mapping(address => uint256) public userVeFXSCheckpointed;\r\n    mapping(address => uint256) public userVeFXSEndpointCheckpointed;\r\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\r\n\r\n    // Greylists\r\n    mapping(address => bool) public greylist;\r\n\r\n    // Admin booleans for emergencies\r\n    bool public yieldCollectionPaused = false; // For emergencies\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require( msg.sender == owner || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier notYieldCollectionPaused() {\r\n        require(yieldCollectionPaused == false, \"Yield collection is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier checkpointUser(address account) {\r\n        _checkpointUser(account);\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner,\r\n        address _emittedToken,\r\n        address _timelock_address,\r\n        address _veFXS_address\r\n    ) Owned(_owner) {\r\n        emitted_token_address = _emittedToken;\r\n        emittedToken = ERC20(_emittedToken);\r\n\r\n        veFXS = IveFXS(_veFXS_address);\r\n        lastUpdateTime = block.timestamp;\r\n        timelock_address = _timelock_address;\r\n\r\n        reward_notifiers[_owner] = true;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function fractionParticipating() external view returns (uint256) {\r\n        return totalVeFXSParticipating.mul(PRICE_PRECISION).div(totalVeFXSSupplyStored);\r\n    }\r\n\r\n    // Only positions with locked veFXS can accrue yield. Otherwise, expired-locked veFXS\r\n    // is de-facto rewards for FXS.\r\n    function eligibleCurrentVeFXS(address account) public view returns (uint256 eligible_vefxs_bal, uint256 stored_ending_timestamp) {\r\n        uint256 curr_vefxs_bal = veFXS.balanceOf(account);\r\n        \r\n        // Stored is used to prevent abuse\r\n        stored_ending_timestamp = userVeFXSEndpointCheckpointed[account];\r\n\r\n        // Only unexpired veFXS should be eligible\r\n        if (stored_ending_timestamp != 0 && (block.timestamp >= stored_ending_timestamp)){\r\n            eligible_vefxs_bal = 0;\r\n        }\r\n        else if (block.timestamp >= stored_ending_timestamp){\r\n            eligible_vefxs_bal = 0;\r\n        }\r\n        else {\r\n            eligible_vefxs_bal = curr_vefxs_bal;\r\n        }\r\n    }\r\n\r\n    function lastTimeYieldApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function yieldPerVeFXS() public view returns (uint256) {\r\n        if (totalVeFXSSupplyStored == 0) {\r\n            return yieldPerVeFXSStored;\r\n        } else {\r\n            return (\r\n                yieldPerVeFXSStored.add(\r\n                    lastTimeYieldApplicable()\r\n                        .sub(lastUpdateTime)\r\n                        .mul(yieldRate)\r\n                        .mul(1e18)\r\n                        .div(totalVeFXSSupplyStored)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        // Uninitialized users should not earn anything yet\r\n        if (!userIsInitialized[account]) return 0;\r\n\r\n        // Get eligible veFXS balances\r\n        (uint256 eligible_current_vefxs, uint256 ending_timestamp) = eligibleCurrentVeFXS(account);\r\n\r\n        // If your veFXS is unlocked\r\n        uint256 eligible_time_fraction = PRICE_PRECISION;\r\n        if (eligible_current_vefxs == 0){\r\n            // And you already claimed after expiration\r\n            if (lastRewardClaimTime[account] >= ending_timestamp) {\r\n                // You get NOTHING. You LOSE. Good DAY ser!\r\n                return 0;\r\n            }\r\n            // You haven't claimed yet\r\n            else {\r\n                uint256 eligible_time = (ending_timestamp).sub(lastRewardClaimTime[account]);\r\n                uint256 total_time = (block.timestamp).sub(lastRewardClaimTime[account]);\r\n                eligible_time_fraction = PRICE_PRECISION.mul(eligible_time).div(total_time);\r\n            }\r\n        }\r\n\r\n        // If the amount of veFXS increased, only pay off based on the old balance\r\n        // Otherwise, take the midpoint\r\n        uint256 vefxs_balance_to_use;\r\n        {\r\n            uint256 old_vefxs_balance = userVeFXSCheckpointed[account];\r\n            if (eligible_current_vefxs > old_vefxs_balance){\r\n                vefxs_balance_to_use = old_vefxs_balance;\r\n            }\r\n            else {\r\n                vefxs_balance_to_use = ((eligible_current_vefxs).add(old_vefxs_balance)).div(2); \r\n            }\r\n        }\r\n\r\n        return (\r\n            vefxs_balance_to_use\r\n                .mul(yieldPerVeFXS().sub(userYieldPerTokenPaid[account]))\r\n                .mul(eligible_time_fraction)\r\n                .div(1e18 * PRICE_PRECISION)\r\n                .add(yields[account])\r\n        );\r\n    }\r\n\r\n    function getYieldForDuration() external view returns (uint256) {\r\n        return (yieldRate.mul(yieldDuration));\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function _checkpointUser(address account) internal {\r\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\r\n        sync();\r\n\r\n        // Calculate the earnings first\r\n        _syncEarned(account);\r\n\r\n        // Get the old and the new veFXS balances\r\n        uint256 old_vefxs_balance = userVeFXSCheckpointed[account];\r\n        uint256 new_vefxs_balance = veFXS.balanceOf(account);\r\n\r\n        // Update the user's stored veFXS balance\r\n        userVeFXSCheckpointed[account] = new_vefxs_balance;\r\n\r\n        // Update the user's stored ending timestamp\r\n        IveFXS.LockedBalance memory curr_locked_bal_pack = veFXS.locked(account);\r\n        userVeFXSEndpointCheckpointed[account] = curr_locked_bal_pack.end;\r\n\r\n        // Update the total amount participating\r\n        if (new_vefxs_balance >= old_vefxs_balance) {\r\n            uint256 weight_diff = new_vefxs_balance.sub(old_vefxs_balance);\r\n            totalVeFXSParticipating = totalVeFXSParticipating.add(weight_diff);\r\n        } else {\r\n            uint256 weight_diff = old_vefxs_balance.sub(new_vefxs_balance);\r\n            totalVeFXSParticipating = totalVeFXSParticipating.sub(weight_diff);\r\n        }\r\n\r\n        // Mark the user as initialized\r\n        if (!userIsInitialized[account]) {\r\n            userIsInitialized[account] = true;\r\n            lastRewardClaimTime[account] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _syncEarned(address account) internal {\r\n        if (account != address(0)) {\r\n            uint256 earned0 = earned(account);\r\n            yields[account] = earned0;\r\n            userYieldPerTokenPaid[account] = yieldPerVeFXSStored;\r\n        }\r\n    }\r\n\r\n    // Anyone can checkpoint another user\r\n    function checkpointOtherUser(address user_addr) external {\r\n        _checkpointUser(user_addr);\r\n    }\r\n\r\n    // Checkpoints the user\r\n    function checkpoint() external {\r\n        _checkpointUser(msg.sender);\r\n    }\r\n\r\n    function getYield() external nonReentrant notYieldCollectionPaused checkpointUser(msg.sender) returns (uint256 yield0) {\r\n        require(greylist[msg.sender] == false, \"Address has been greylisted\");\r\n\r\n        yield0 = yields[msg.sender];\r\n        if (yield0 > 0) {\r\n            yields[msg.sender] = 0;\r\n            TransferHelper.safeTransfer(\r\n                emitted_token_address,\r\n                msg.sender,\r\n                yield0\r\n            );\r\n            emit YieldCollected(msg.sender, yield0, emitted_token_address);\r\n        }\r\n\r\n        lastRewardClaimTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n\r\n    function sync() public {\r\n        // Update the total veFXS supply\r\n        yieldPerVeFXSStored = yieldPerVeFXS();\r\n        totalVeFXSSupplyStored = veFXS.totalSupply();\r\n        lastUpdateTime = lastTimeYieldApplicable();\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 amount) external {\r\n        // Only whitelisted addresses can notify rewards\r\n        require(reward_notifiers[msg.sender], \"Sender not whitelisted\");\r\n\r\n        // Handle the transfer of emission tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the smission amount\r\n        emittedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Update some values beforehand\r\n        sync();\r\n\r\n        // Update the new yieldRate\r\n        if (block.timestamp >= periodFinish) {\r\n            yieldRate = amount.div(yieldDuration);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(yieldRate);\r\n            yieldRate = amount.add(leftover).div(yieldDuration);\r\n        }\r\n        \r\n        // Update duration-related info\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(yieldDuration);\r\n\r\n        emit RewardAdded(amount, yieldRate);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Added to support recovering LP Yield and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\r\n        emit RecoveredERC20(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    function setYieldDuration(uint256 _yieldDuration) external onlyByOwnGov {\r\n        require( periodFinish == 0 || block.timestamp > periodFinish, \"Previous yield period must be complete before changing the duration for the new period\");\r\n        yieldDuration = _yieldDuration;\r\n        emit YieldDurationUpdated(yieldDuration);\r\n    }\r\n\r\n    function greylistAddress(address _address) external onlyByOwnGov {\r\n        greylist[_address] = !(greylist[_address]);\r\n    }\r\n\r\n    function toggleRewardNotifier(address notifier_addr) external onlyByOwnGov {\r\n        reward_notifiers[notifier_addr] = !reward_notifiers[notifier_addr];\r\n    }\r\n\r\n    function setPauses(bool _yieldCollectionPaused) external onlyByOwnGov {\r\n        yieldCollectionPaused = _yieldCollectionPaused;\r\n    }\r\n\r\n    function setYieldRate(uint256 _new_rate0, bool sync_too) external onlyByOwnGov {\r\n        yieldRate = _new_rate0;\r\n\r\n        if (sync_too) {\r\n            sync();\r\n        }\r\n    }\r\n\r\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\r\n        timelock_address = _new_timelock;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward, uint256 yieldRate);\r\n    event OldYieldCollected(address indexed user, uint256 yield, address token_address);\r\n    event YieldCollected(address indexed user, uint256 yield, address token_address);\r\n    event YieldDurationUpdated(uint256 newDuration);\r\n    event RecoveredERC20(address token, uint256 amount);\r\n    event YieldPeriodRenewed(address token, uint256 yieldRate);\r\n    event DefaultInitialization();\r\n\r\n    /* ========== A CHICKEN ========== */\r\n    //\r\n    //         ,~.\r\n    //      ,-'__ `-,\r\n    //     {,-'  `. }              ,')\r\n    //    ,( a )   `-.__         ,',')~,\r\n    //   <=.) (         `-.__,==' ' ' '}\r\n    //     (   )                      /)\r\n    //      `-'\\   ,                    )\r\n    //          |  \\        `~.        /\r\n    //          \\   `._        \\      /\r\n    //           \\     `._____,'    ,'\r\n    //            `-.             ,'\r\n    //               `-._     _,-'\r\n    //                   77jj'\r\n    //                  //_||\r\n    //               __//--'/`\r\n    //             ,--'/`  '\r\n    //\r\n    // [hjw] https://textart.io/art/vw6Sa3iwqIRGkZsN1BC2vweF/chicken\r\n}\r\n\r\n\r\n// File contracts/Oracle/AggregatorV3Interface.sol\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IUniswapV2PairV5.sol\r\n\r\n\r\ninterface IUniswapV2PairV5 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IFraxswapPair.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================= IFraxswapPair ==========================\r\n// ====================================================================\r\n// Fraxswap LP Pair Interface\r\n// Inspired by https://www.paradigm.xyz/2021/07/twamm\r\n// https://github.com/para-dave/twamm\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n// Sam Kazemian: https://github.com/samkazemian\r\n\r\ninterface IFraxswapPair is IUniswapV2PairV5 {\r\n    // TWAMM\r\n\r\n    event LongTermSwap0To1(address indexed addr, uint256 orderId, uint256 amount0In, uint256 numberOfTimeIntervals);\r\n    event LongTermSwap1To0(address indexed addr, uint256 orderId, uint256 amount1In, uint256 numberOfTimeIntervals);\r\n    event CancelLongTermOrder(address indexed addr, uint256 orderId, address sellToken, uint256 unsoldAmount, address buyToken, uint256 purchasedAmount);\r\n    event WithdrawProceedsFromLongTermOrder(address indexed addr, uint256 orderId, address indexed proceedToken, uint256 proceeds, bool orderExpired);\r\n\r\n    function longTermSwapFrom0To1(uint256 amount0In, uint256 numberOfTimeIntervals) external returns (uint256 orderId);\r\n    function longTermSwapFrom1To0(uint256 amount1In, uint256 numberOfTimeIntervals) external returns (uint256 orderId);\r\n    function cancelLongTermSwap(uint256 orderId) external;\r\n    function withdrawProceedsFromLongTermSwap(uint256 orderId) external returns (bool is_expired, address rewardTkn, uint256 totalReward);\r\n    function executeVirtualOrders(uint256 blockTimestamp) external;\r\n\r\n    function orderTimeInterval() external returns (uint256);\r\n    function getTWAPHistoryLength() external view returns (uint);\r\n    function getTwammReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast, uint112 _twammReserve0, uint112 _twammReserve1);\r\n    function getReserveAfterTwamm(uint256 blockTimestamp) external view returns (uint112 _reserve0, uint112 _reserve1, uint256 lastVirtualOrderTimestamp, uint112 _twammReserve0, uint112 _twammReserve1);\r\n    function getNextOrderID() external view returns (uint256);\r\n    function getOrderIDsForUser(address user) external view returns (uint256[] memory);\r\n    function getOrderIDsForUserLength(address user) external view returns (uint256);\r\n//    function getDetailedOrdersForUser(address user, uint256 offset, uint256 limit) external view returns (LongTermOrdersLib.Order[] memory detailed_orders);\r\n    function twammUpToDate() external view returns (bool);\r\n    function getTwammState() external view returns (uint256 token0Rate, uint256 token1Rate, uint256 lastVirtualOrderTimestamp, uint256 orderTimeInterval_rtn, uint256 rewardFactorPool0, uint256 rewardFactorPool1);\r\n    function getTwammSalesRateEnding(uint256 _blockTimestamp) external view returns (uint256 orderPool0SalesRateEnding, uint256 orderPool1SalesRateEnding);\r\n    function getTwammRewardFactor(uint256 _blockTimestamp) external view returns (uint256 rewardFactorPool0AtTimestamp, uint256 rewardFactorPool1AtTimestamp);\r\n    function getTwammOrder(uint256 orderId) external view returns (uint256 id, uint256 expirationTimestamp, uint256 saleRate, address owner, address sellTokenAddr, address buyTokenAddr);\r\n    function getTwammOrderProceedsView(uint256 orderId, uint256 blockTimestamp) external view returns (bool orderExpired, uint256 totalReward);\r\n    function getTwammOrderProceeds(uint256 orderId) external returns (bool orderExpired, uint256 totalReward);\r\n\r\n\r\n    function togglePauseNewSwaps() external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/core/interfaces/IUniswapV2FactoryV5.sol\r\n\r\n\r\ninterface IUniswapV2FactoryV5 {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/libraries/Babylonian.sol\r\n\r\n\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/libraries/FullMath.sol\r\n\r\n\r\n\r\n/// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.\r\n/// @author Adapted from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/FullMath.sol.\r\n/// @dev Handles \"phantom overflow\", i.e., allows multiplication and division where an intermediate value overflows 256 bits.\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\r\n    /// @param a The multiplicand.\r\n    /// @param b The multiplier.\r\n    /// @param denominator The divisor.\r\n    /// @return result The 256-bit result.\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n    unchecked {\r\n        // 512-bit multiply [prod1 prod0] = a * b.\r\n        // Compute the product mod 2**256 and mod 2**256 - 1,\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0.\r\n        uint256 prod0; // Least significant 256 bits of the product.\r\n        uint256 prod1; // Most significant 256 bits of the product.\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n        // Handle non-overflow cases, 256 by 256 division.\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n        // Make sure the result is less than 2**256 -\r\n        // also prevents denominator == 0.\r\n        require(denominator > prod1);\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n        // Make division exact by subtracting the remainder from [prod1 prod0] -\r\n        // compute remainder using mulmod.\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number.\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n        // Factor powers of two out of denominator -\r\n        // compute largest power of two divisor of denominator\r\n        // (always >= 1).\r\n        uint256 twos = uint256(-int256(denominator)) & denominator;\r\n        // Divide denominator by power of two.\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n        // Divide [prod1 prod0] by the factors of two.\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos -\r\n        // if twos is zero, then it becomes one.\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n        // Invert denominator mod 2**256 -\r\n        // now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // for four bits. That is, denominator * inv = 1 mod 2**4.\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**8.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**16.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**32.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**64.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**128.\r\n        inv *= 2 - denominator * inv; // Inverse mod 2**256.\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n    }\r\n\r\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision - throws if result overflows an uint256 or denominator == 0.\r\n    /// @param a The multiplicand.\r\n    /// @param b The multiplier.\r\n    /// @param denominator The divisor.\r\n    /// @return result The 256-bit result.\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n    unchecked {\r\n        if (mulmod(a, b, denominator) != 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Fraxswap/periphery/libraries/UniswapV2LiquidityMathLibraryMini.sol\r\n\r\n\r\n\r\n\r\n\r\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\r\n// in terms of the underlying tokens\r\nlibrary UniswapV2LiquidityMathLibraryMini {\r\n\r\n    // computes the direction and magnitude of the profit-maximizing trade\r\n    // function computeProfitMaximizingTrade(\r\n    //     uint256 truePriceTokenA,\r\n    //     uint256 truePriceTokenB,\r\n    //     uint256 reserveA,\r\n    //     uint256 reserveB\r\n    // ) pure internal returns (uint256 amountIn) {\r\n    //     bool aToB = ((reserveA * truePriceTokenB) / reserveB) < truePriceTokenA;\r\n\r\n    //     uint256 invariant = reserveA * reserveB;\r\n\r\n    //     // true price is expressed as a ratio, so both values must be non-zero\r\n    //     require(truePriceTokenA != 0 && truePriceTokenB != 0, \"CPMT: ZERO_PRICE\");\r\n\r\n    //     uint256 leftSide = Babylonian.sqrt(\r\n    //         FullMath.mulDiv(\r\n    //             (invariant * 1000),\r\n    //             aToB ? truePriceTokenA : truePriceTokenB,\r\n    //             (aToB ? truePriceTokenB : truePriceTokenA) * 997\r\n    //         )\r\n    //     );\r\n    //     uint256 rightSide = (aToB ? reserveA * 1000 : reserveB * 1000) / 997;\r\n\r\n    //     if (leftSide < rightSide) return (0);\r\n\r\n    //     // compute the amount that must be sent to move the price to the profit-maximizing price\r\n    //     amountIn = leftSide - rightSide;\r\n    // }\r\n\r\n    function computeProfitMaximizingTrade(\r\n        uint256 inTokenTruePrice,\r\n        uint256 outTokenTruePrice,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) pure internal returns (uint256 amountIn) {\r\n        uint256 invariant = reserveIn * reserveOut;\r\n\r\n        // true price is expressed as a ratio, so both values must be non-zero\r\n        require(inTokenTruePrice != 0 && outTokenTruePrice != 0, \"CPMT: ZERO_PRICE\");\r\n\r\n        uint256 leftSide = Babylonian.sqrt(\r\n            FullMath.mulDiv(\r\n                (invariant * 1000),\r\n                inTokenTruePrice,\r\n                outTokenTruePrice * 997\r\n            )\r\n        );\r\n        uint256 rightSide = (reserveIn * 1000) / 997;\r\n\r\n        if (leftSide < rightSide) return (0);\r\n\r\n        // compute the amount that must be sent to move the price to the profit-maximizing price\r\n        amountIn = leftSide - rightSide;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/TWAMM_AMO.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ============================ TWAMM_AMO =============================\r\n// ====================================================================\r\n// Interacts with Fraxswap to buy and sell FRAX and FXS\r\n// Also can burn them or in the case of FXS, give to veFXS yield\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Rich Gee: https://github.com/zer0blockchain\r\n// Dennis: https://github.com/denett\r\n// Jack Corddry: https://github.com/corddry\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TWAMM_AMO is Owned {\r\n\r\n    // Core\r\n    IFrax public FRAX;\r\n    IFxs public FXS;\r\n    IFraxswapPair public fraxswap_pair;\r\n    IFraxAMOMinter public amo_minter;\r\n    veFXSYieldDistributorV4 public yield_distributor;\r\n    address public timelock_address;\r\n    address public msig_address;\r\n\r\n    // Oracles\r\n    AggregatorV3Interface public priceFeedFRAXUSD;\r\n    AggregatorV3Interface public priceFeedFXSUSD;\r\n    uint256 public chainlink_frax_usd_decimals;\r\n    uint256 public chainlink_fxs_usd_decimals;\r\n\r\n    // Safety\r\n    uint256 public max_swap_frax_amt_in = 10000000e18; // 10M, mainly fat-finger precautions\r\n    uint256 public max_swap_fxs_amt_in = 10000000e18; // 10M, mainly fat-finger precautions\r\n\r\n    // Constants for various precisions\r\n    uint256 public constant PRICE_PRECISION = 1e18;\r\n\r\n    // Misc\r\n    bool public frax_is_token0;\r\n    uint256 public num_twamm_intervals = 168; // Each interval is default 3600 sec (1 hr)\r\n    uint256 public swap_period = 7 * 86400; // 7 days\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _creator_address,\r\n        address _timelock_address,\r\n        address[8] memory _address_pack\r\n    ) Owned(_creator_address) {\r\n        // Set timelock\r\n        timelock_address = _timelock_address;\r\n\r\n        // Set instances\r\n        FRAX = IFrax(_address_pack[0]);\r\n        FXS = IFxs(_address_pack[1]);\r\n        fraxswap_pair = IFraxswapPair(_address_pack[2]);\r\n        priceFeedFRAXUSD = AggregatorV3Interface(_address_pack[3]);\r\n        priceFeedFXSUSD = AggregatorV3Interface(_address_pack[4]);\r\n        msig_address = _address_pack[5];\r\n        amo_minter = IFraxAMOMinter(_address_pack[6]);\r\n        yield_distributor = veFXSYieldDistributorV4(_address_pack[7]);\r\n\r\n        // Set the oracle decimals\r\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\r\n        chainlink_fxs_usd_decimals = priceFeedFXSUSD.decimals();\r\n\r\n        // Need to know which token FRAX is (0 or 1)\r\n        address token0 = fraxswap_pair.token0();\r\n        if (token0 == address(FRAX)) frax_is_token0 = true;\r\n        else frax_is_token0 = false;\r\n\r\n        // Get the number of TWAMM intervals. Truncation desired\r\n        num_twamm_intervals = swap_period / fraxswap_pair.orderTimeInterval();\r\n    }\r\n\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // Needed as a FRAX AMO\r\n    function dollarBalances() public view returns (uint256 frax_val_e18, uint256 collat_val_e18) {\r\n        frax_val_e18 = FRAX.balanceOf(address(this)); // Unallocated FRAX\r\n        collat_val_e18 = (frax_val_e18 * FRAX.global_collateral_ratio()) / 1e6;\r\n    }\r\n\r\n    // In Chainlink decimals\r\n    function getFRAXPriceE18() public view returns (uint256) {\r\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFRAXUSD.latestRoundData();\r\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \"Invalid chainlink price\");\r\n\r\n        return ((uint256(price) * 1e18) / (10 ** chainlink_frax_usd_decimals));\r\n    }\r\n\r\n    // In Chainlink decimals    \r\n    function getFXSPriceE18() public view returns (uint256) {\r\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = priceFeedFXSUSD.latestRoundData();\r\n        require(price >= 0 && updatedAt!= 0 && answeredInRound >= roundID, \"Invalid chainlink price\");\r\n\r\n        return ((uint256(price) * 1e18) / (10 ** chainlink_fxs_usd_decimals));\r\n    }\r\n\r\n    /* ========== MUTATIVE ========== */\r\n\r\n    // Use the TWAMM\r\n    function twammSwap(uint256 frax_sell_amt, uint256 fxs_sell_amount, uint256 override_intervals) external onlyByOwnGov returns (uint256 frax_to_use, uint256 fxs_to_use, uint256 new_order_id) {\r\n        // Make sure only one direction occurs\r\n        require(!((frax_sell_amt > 0) && (fxs_sell_amount > 0)), \"Can only sell in one direction\");\r\n\r\n        {\r\n            if (fxs_sell_amount > 0) {\r\n                // Sell FXS for FRAX\r\n                // --------------------------------\r\n                fxs_to_use = fxs_sell_amount;\r\n    \r\n                // Make sure nonzero\r\n                require(fxs_to_use > 0, \"FXS sold must be nonzero\");\r\n\r\n                // Safety check\r\n                require(fxs_to_use <= max_swap_fxs_amt_in, \"Too much FXS sold\");\r\n\r\n                // Approve FXS first\r\n                FXS.approve(address(fraxswap_pair), fxs_to_use);\r\n\r\n                // Swap\r\n                if (frax_is_token0) {\r\n                    new_order_id = fraxswap_pair.longTermSwapFrom1To0(fxs_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n                else {\r\n                    new_order_id = fraxswap_pair.longTermSwapFrom0To1(fxs_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n            }\r\n            else {\r\n                // Use FRAX to buy FXS\r\n                // --------------------------------\r\n                frax_to_use = frax_sell_amt;\r\n\r\n                // Make sure nonzero\r\n                require(frax_to_use > 0, \"FRAX sold must be nonzero\");\r\n\r\n                // Safety check\r\n                require(frax_to_use <= max_swap_frax_amt_in, \"Too much FRAX sold\");\r\n\r\n                // Approve FRAX first\r\n                FRAX.approve(address(fraxswap_pair), frax_to_use);\r\n\r\n                // Swap\r\n                if (frax_is_token0) {\r\n                    new_order_id = fraxswap_pair.longTermSwapFrom0To1(frax_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n                else {\r\n                    new_order_id = fraxswap_pair.longTermSwapFrom1To0(frax_to_use, override_intervals > 0 ? override_intervals : num_twamm_intervals);\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SwapInitiated(new_order_id, frax_to_use, fxs_to_use, block.timestamp);\r\n    }\r\n\r\n    function cancelTWAMMOrder(uint256 order_id) external onlyByOwnGov {\r\n        // Cancel the order\r\n        fraxswap_pair.cancelLongTermSwap(order_id);\r\n\r\n        emit SwapCancelled(order_id);\r\n    }\r\n\r\n    function collectCurrTWAMMProceeds(uint256 order_id) external onlyByOwnGov {\r\n        // Withdraw current proceeds\r\n        (, address rewardTkn, uint256 totalReward) = fraxswap_pair.withdrawProceedsFromLongTermSwap(order_id);\r\n\r\n        emit SwapProceedsCollected(order_id, rewardTkn, totalReward);\r\n    }\r\n\r\n    // token_choice 0 = FRAX; 1 = FXS\r\n    function burnAndOrGive(\r\n        uint8 token_choice, \r\n        uint256 burn_amount, \r\n        uint256 give_amount_yield_dist,\r\n        uint256 give_amount_msig\r\n    ) external onlyByOwnGov {\r\n        if (token_choice == 0) {\r\n            // Burn some of the FRAX\r\n            if (burn_amount > 0) burnFRAX(burn_amount);\r\n\r\n            // Give the rest to the yield distributor\r\n            // NOT APPLICABLE FOR FRAX\r\n\r\n            // Give some to the msig\r\n            if (give_amount_msig > 0) TransferHelper.safeTransfer(address(FRAX), msig_address, give_amount_msig);\r\n        }\r\n        else {\r\n            // Burn some of the FXS\r\n            if (burn_amount > 0) burnFXS(burn_amount);\r\n\r\n            // Give some to the yield distributor\r\n            if (give_amount_yield_dist > 0) {\r\n                FXS.approve(address(yield_distributor), give_amount_yield_dist);\r\n                yield_distributor.notifyRewardAmount(give_amount_yield_dist);\r\n            }\r\n\r\n            // Give some to the msig\r\n            if (give_amount_msig > 0) TransferHelper.safeTransfer(address(FXS), msig_address, give_amount_msig);\r\n        }\r\n\r\n        emit burnAndOrGiven(token_choice, burn_amount, give_amount_yield_dist, give_amount_msig);\r\n    }\r\n\r\n    /* ========== Burns and givebacks ========== */\r\n   \r\n    // Burn unneeded or excess FRAX. Goes through the minter\r\n    function burnFRAX(uint256 frax_amount) public onlyByOwnGov {\r\n        FRAX.approve(address(amo_minter), frax_amount);\r\n        amo_minter.burnFraxFromAMO(frax_amount);\r\n\r\n        emit FRAXBurned(frax_amount);\r\n    }\r\n\r\n    // Burn unneeded FXS. Goes through the minter\r\n    function burnFXS(uint256 fxs_amount) public onlyByOwnGov {\r\n        FXS.approve(address(amo_minter), fxs_amount);\r\n        amo_minter.burnFxsFromAMO(fxs_amount);\r\n\r\n        emit FXSBurned(fxs_amount);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setOracles(address _frax_oracle, address _fxs_oracle) external onlyByOwnGov {\r\n        priceFeedFRAXUSD = AggregatorV3Interface(_frax_oracle);\r\n        priceFeedFXSUSD = AggregatorV3Interface(_fxs_oracle);\r\n\r\n        // Set the Chainlink oracle decimals\r\n        chainlink_frax_usd_decimals = priceFeedFRAXUSD.decimals();\r\n        chainlink_fxs_usd_decimals = priceFeedFXSUSD.decimals();\r\n    }\r\n\r\n    function setTWAMMAndSwapPeriod(address _twamm_addr, uint256 _swap_period) external onlyByOwnGov {\r\n        // Change the TWAMM parameters\r\n        fraxswap_pair = IFraxswapPair(_twamm_addr);\r\n        swap_period = _swap_period;\r\n        num_twamm_intervals = _swap_period / fraxswap_pair.orderTimeInterval();\r\n    }\r\n\r\n    function setTWAMMMaxSwapIn(uint256 _max_swap_frax_amt_in, uint256 _max_swap_fxs_amt_in) external onlyByOwnGov {\r\n        max_swap_frax_amt_in = _max_swap_frax_amt_in;\r\n        max_swap_fxs_amt_in = _max_swap_fxs_amt_in;\r\n    }\r\n\r\n    function setMiscAddresses(address _new_msig_address, address _new_yield_distributor_address) external onlyByOwnGov {\r\n        msig_address = _new_msig_address;\r\n        yield_distributor = veFXSYieldDistributorV4(_new_yield_distributor_address);\r\n    }\r\n\r\n    function setTimelock(address _new_timelock_address) external onlyByOwnGov {\r\n        timelock_address = _new_timelock_address;\r\n    }\r\n\r\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        TransferHelper.safeTransfer(tokenAddress, owner, tokenAmount);\r\n        emit RecoveredERC20(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event SwapInitiated(uint256 order_id, uint256 frax_amt, uint256 fxs_amt, uint256 timestamp);\r\n    event SwapCancelled(uint256 order_id);\r\n    event SwapProceedsCollected(uint256 order_id, address reward_tkn, uint256 ttl_reward);\r\n    event burnAndOrGiven(uint8 token_choice, uint256 burn_amount, uint256 give_amount_yield_dist, uint256 give_amount_msig);\r\n    event FRAXBurned(uint256 frax_amount);\r\n    event FXSBurned(uint256 fxs_amount);\r\n    event RecoveredERC20(address token, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address[8]\",\"name\":\"_address_pack\",\"type\":\"address[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"FRAXBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fxs_amount\",\"type\":\"uint256\"}],\"name\":\"FXSBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frax_amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fxs_amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SwapInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ttl_reward\",\"type\":\"uint256\"}],\"name\":\"SwapProceedsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"token_choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"give_amount_yield_dist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"give_amount_msig\",\"type\":\"uint256\"}],\"name\":\"burnAndOrGiven\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract IFrax\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXS\",\"outputs\":[{\"internalType\":\"contract IFxs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amo_minter\",\"outputs\":[{\"internalType\":\"contract IFraxAMOMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"token_choice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"burn_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"give_amount_yield_dist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"give_amount_msig\",\"type\":\"uint256\"}],\"name\":\"burnAndOrGive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_amount\",\"type\":\"uint256\"}],\"name\":\"burnFRAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fxs_amount\",\"type\":\"uint256\"}],\"name\":\"burnFXS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"}],\"name\":\"cancelTWAMMOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink_frax_usd_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink_fxs_usd_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"}],\"name\":\"collectCurrTWAMMProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_val_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collat_val_e18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_is_token0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxswap_pair\",\"outputs\":[{\"internalType\":\"contract IFraxswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFRAXPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFXSPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_swap_frax_amt_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_swap_fxs_amt_in\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msig_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"num_twamm_intervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedFRAXUSD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedFXSUSD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_msig_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_new_yield_distributor_address\",\"type\":\"address\"}],\"name\":\"setMiscAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frax_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxs_oracle\",\"type\":\"address\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twamm_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swap_period\",\"type\":\"uint256\"}],\"name\":\"setTWAMMAndSwapPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_swap_frax_amt_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_swap_fxs_amt_in\",\"type\":\"uint256\"}],\"name\":\"setTWAMMMaxSwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_timelock_address\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_sell_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fxs_sell_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"override_intervals\",\"type\":\"uint256\"}],\"name\":\"twammSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_to_use\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fxs_to_use\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_order_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield_distributor\",\"outputs\":[{\"internalType\":\"contract veFXSYieldDistributorV4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TWAMM_AMO", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000234d953a9404bf9dbc3b526271d440cd2870bcd20000000000000000000000008412ebf45bac1b340bbe8f318b928c466c4e39ca000000000000000000000000853d955acef822db058eb8505911ed77f175b99e0000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d00000000000000000000000008206412c107ef1adb70b9277974f5163760e128e000000000000000000000000b9e1e3a9feff48998e45fa90847ed4d467e8bcfd0000000000000000000000006ebc52c8c1089be9eb3945c4350b68b8e4c2233f000000000000000000000000b1748c79709f4ba2dd82834b8c82d4a505003f27000000000000000000000000cf37b62109b537fa0cb9a90af4ca72f6fb85e241000000000000000000000000c6764e58b36e26b08fd1d2aed4538c02171fa872", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfe2b697cf6db935b94152108c72ecd579949c687e4be701cf6bb44956540359"}]}