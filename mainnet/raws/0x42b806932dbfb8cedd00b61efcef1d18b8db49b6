{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    uint private unlocked = 1;\r\n    modifier lock() virtual {\r\n        require(unlocked == 1, 'DOGERC721: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, IERC721 {\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual lock override {\r\n        address owner = _owners[tokenId];\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual lock override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual lock override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\ninterface IDDFERC721PoolPair is IERC721Enumerable {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function mint(address owner, uint256 tokenId) external;\r\n    function burn(address owner, uint256 lpTokenId) external;\r\n    function updateTokenTime(address owner, uint256 lpTokenId) external;\r\n    function setInterestRate(uint32 _reward)  external;\r\n    function tokenInfo(uint256 lpTokenId) external view returns (uint32, uint32, uint32);\r\n}\r\n\r\ncontract DDFERC721PoolPair is IDDFERC721PoolPair, ERC721Enumerable {\r\n    address public factory;\r\n    address public token;\r\n    uint32 private interestRate = 30000;\r\n    uint32  private blockStartTime; // uses single storage slot, accessible via getReserves\r\n\r\n    mapping(uint256 => uint32) private _lpTokensTimes;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    constructor(){\r\n        factory = msg.sender;\r\n        blockStartTime = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(string memory name_, string memory symbol_, address _token, uint32 _interestRate) external lock {\r\n        require(msg.sender == factory, 'DDFNFT: FORBIDDEN'); // sufficient check\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        token = _token;\r\n        interestRate = _interestRate;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function mint(address owner, uint256 tokenId) external lock override {\r\n        require(_msgSender() == IERC721(token).ownerOf(tokenId), \"NFTPoolPair: transfer of token that is not owner\");\r\n        \r\n        IERC721(token).transferFrom(_msgSender(), address(this), tokenId);\r\n        if(_exists(tokenId)){\r\n            _transfer(address(this), owner, tokenId);\r\n        }else{\r\n            _mint(owner, tokenId); \r\n        }\r\n        _lpTokensTimes[tokenId] = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function burn(address owner, uint256 lpTokenId) external lock override{\r\n        require(_exists(lpTokenId), \"burn: operator query for nonexistent token\");\r\n        require(ownerOf(lpTokenId) == owner, \"ERC721: burn NFT of lpTokenId that is not owner\");\r\n        require(_isApprovedOrOwner(_msgSender(), lpTokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        IERC721(token).transferFrom(address(this), owner, lpTokenId);\r\n        \r\n        _transfer(owner, address(this), lpTokenId);\r\n        delete _lpTokensTimes[lpTokenId];\r\n    }\r\n\r\n    function updateTokenTime(address owner, uint256 lpTokenId) \r\n        external \r\n        lock \r\n        override{\r\n        require(_exists(lpTokenId), \"updateTokenTime: operator query for nonexistent token\");\r\n        require(ownerOf(lpTokenId) == owner, \"DDFERC721PoolPair: retrieve NFT of token that is not owner\");\r\n        require(_isApprovedOrOwner(_msgSender(), lpTokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _lpTokensTimes[lpTokenId] = uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"DDFERC721PoolPair: URI query for nonexistent token\");\r\n        return IDDFERC721PoolPair(token).tokenURI(tokenId);\r\n    }\r\n\r\n    function tokenInfo(uint256 lpTokenId) external view override returns (uint32, uint32, uint32){\r\n        return (blockStartTime, _lpTokensTimes[lpTokenId], interestRate);\r\n    }\r\n\r\n    function setInterestRate(uint32 _interestRate) external lock override{\r\n        require(msg.sender == factory, \"DDFERC721PoolPair: FORBIDDEN\"); // sufficient check\r\n        interestRate = _interestRate;\r\n    }\r\n}\r\n\r\ninterface IDDFERC721Factory {\r\n    function getPair(address token) external view returns (address pair);\r\n    function allTokensLength() external view returns (uint);\r\n    function createPair(string memory name_, string memory symbol_, address token, uint32 interestRate) external returns (address pair);\r\n    function setInterestRate(address token, uint32 _interestRate) external;\r\n}\r\n\r\ncontract DDFERC721Factory is IDDFERC721Factory {\r\n    mapping(address => address) private pairs;\r\n    address[] private allTokens;\r\n    address private _owner;\r\n\r\n    event PairCreated(address indexed token, address pair, uint);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"DDFERC20Factory: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function getPair(address token) external view override returns (address pair){\r\n         pair = pairs[token];\r\n    }\r\n\r\n    function allTokensLength() public view override returns (uint) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function findAllTokens() external view returns (address[] memory){\r\n        return allTokens;\r\n    }\r\n\r\n    function createPair(string memory name_, string memory symbol_, address token, uint32 interestRate) external onlyOwner override returns (address pair) {\r\n        require(token != address(0), 'DDFERC721Factory: ZERO_ADDRESS');\r\n        require(pairs[token] == address(0), 'DDFERC721Factory: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(DDFERC721PoolPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        DDFERC721PoolPair(pair).initialize(name_, symbol_, token, interestRate);\r\n        pairs[token] = pair;\r\n        allTokens.push(token);\r\n        emit PairCreated(token, pair, allTokens.length);\r\n    }\r\n\r\n    function setInterestRate(address token, uint32 _interestRate) external onlyOwner override{\r\n        address pair = pairs[token]; \r\n        require(pair != address(0), \"ERC721: The DDFFactory query for nonexistent pair\");\r\n\r\n        DDFERC721PoolPair(pair).setInterestRate(_interestRate);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"interestRate\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_interestRate\",\"type\":\"uint32\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DDFERC721Factory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://118cc4fe22b3e15203cf516454c32ab5d295378de8b9d8f658c906e532361aef"}]}