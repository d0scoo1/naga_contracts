{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\nOfficial Contract of Mandalorian Inu\r\nhttps://t.me/Mandalorian_Official\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n        functionCallWithValue(\r\n            target,\r\n            data,\r\n            value,\r\n            \"Address: low-level call with value failed\"\r\n        );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract MandalorianInu is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address payable public marketingAddress;\r\n\r\n    address payable public devAddress;\r\n\r\n    address payable public liquidityAddress;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    bool public limitsInEffect = true;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1 * 1e15 * 1e9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private constant _name = \"Mandalorian Inu\";\r\n    string private constant _symbol = \"MANDO\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _taxFee;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    uint256 private _marketingFee;\r\n\r\n    uint256 private _liquidityFee;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    uint256 private constant BUY = 1;\r\n    uint256 private constant SELL = 2;\r\n    uint256 private constant TRANSFER = 3;\r\n    uint256 private buyOrSellSwitch;\r\n\r\n    uint256 public _buyTaxFee = 2;\r\n    uint256 public _buyLiquidityFee = 1;\r\n    uint256 public _buyMarketingFee = 7;\r\n\r\n    uint256 public _sellTaxFee = 2;\r\n    uint256 public _sellLiquidityFee = 1;\r\n    uint256 public _sellMarketingFee = 7;\r\n\r\n    uint256 public tradingActiveBlock = 0;\r\n    mapping(address => bool) public boughtEarly;\r\n    uint256 public earlyBuyPenaltyEnd;\r\n\r\n    uint256 public _liquidityTokensToSwap;\r\n    uint256 public _marketingTokensToSwap;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    bool private gasLimitActive = true;\r\n\r\nuint256 public wreckSniperBuyers = 100000000 gwei;\r\nuint256 public wreckSniperSellers = 100000000 gwei;\r\n\r\nmapping (address => bool) public automatedMarketMakerPairs;\r\n\r\nuint256 private minimumTokensBeforeSwap;\r\n\r\nIUniswapV2Router02 public uniswapV2Router;\r\naddress public uniswapV2Pair;\r\n\r\nbool inSwapAndLiquify;\r\nbool public swapAndLiquifyEnabled = false;\r\nbool public tradingActive = false;\r\n\r\nevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\nevent SwapAndLiquify(\r\nuint256 tokensSwapped,\r\nuint256 ethReceived,\r\nuint256 tokensIntoLiquidity\r\n);\r\n\r\nevent SwapETHForTokens(uint256 amountIn, address[] path);\r\n\r\nevent SwapTokensForETH(uint256 amountIn, address[] path);\r\n\r\nevent SetAutomatedMarketMakerPair(address pair, bool value);\r\n\r\nevent ExcludeFromReward(address excludedAddress);\r\n\r\nevent IncludeInReward(address includedAddress);\r\n\r\nevent ExcludeFromFee(address excludedAddress);\r\n\r\nevent IncludeInFee(address includedAddress);\r\n\r\nevent SetBuyFee(uint256 marketingFee, uint256 liquidityFee, uint256 reflectFee);\r\n\r\nevent SetSellFee(uint256 marketingFee, uint256 liquidityFee, uint256 reflectFee);\r\n\r\nevent TransferForeignToken(address token, uint256 amount);\r\n\r\nevent UpdatedMarketingAddress(address marketing);\r\n\r\nevent UpdatedLiquidityAddress(address liquidity);\r\n\r\nevent OwnerForcedSwapBack(uint256 timestamp);\r\n\r\nevent BoughtEarly(address indexed sniper);\r\n\r\nevent RemovedSniper(address indexed notsnipersupposedly);\r\n\r\nmodifier lockTheSwap() {\r\ninSwapAndLiquify = true;\r\n_;\r\ninSwapAndLiquify = false;\r\n}\r\n\r\nconstructor() payable {\r\n_rOwned[_msgSender()] = _rTotal / 1000 * 405;\r\n_rOwned[address(this)] = _rTotal / 1000 * 595;\r\n\r\nmaxTransactionAmount = _tTotal * 10 / 1000; // 1% maxTransactionAmountTxn\r\nminimumTokensBeforeSwap = _tTotal * 5 / 10000; // 0.05% swap tokens amount\r\n\r\nmarketingAddress = payable(0x6D2c62c8E3893a32C18bBCfAf624aF6B9999d25F);\r\n\r\ndevAddress = payable(0x8710F3d73552281EF214356132B80b4632b3e44F);\r\n\r\nliquidityAddress = payable(owner()); // Liquidity Address (switches to dead address once launch happens)\r\n\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n_isExcludedFromFee[marketingAddress] = true;\r\n_isExcludedFromFee[liquidityAddress] = true;\r\n\r\nexcludeFromMaxTransaction(owner(), true);\r\nexcludeFromMaxTransaction(address(this), true);\r\nexcludeFromMaxTransaction(address(0xdead), true);\r\n\r\nemit Transfer(address(0), _msgSender(), _tTotal * 405 / 1000);\r\nemit Transfer(address(0), address(this), _tTotal * 595 / 1000);\r\n}\r\n\r\nfunction name() external pure returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() external pure returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() external pure returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() external pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nif (_isExcluded[account]) return _tOwned[account];\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount)\r\nexternal\r\noverride\r\nreturns (bool)\r\n{\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender)\r\nexternal\r\nview\r\noverride\r\nreturns (uint256)\r\n{\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(\r\nsender,\r\n_msgSender(),\r\n_allowances[sender][_msgSender()].sub(\r\namount,\r\n\"ERC20: transfer amount exceeds allowance\"\r\n)\r\n);\r\nreturn true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue)\r\nexternal\r\nvirtual\r\nreturns (bool)\r\n{\r\n_approve(\r\n_msgSender(),\r\nspender,\r\n_allowances[_msgSender()][spender].add(addedValue)\r\n);\r\nreturn true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue)\r\nexternal\r\nvirtual\r\nreturns (bool)\r\n{\r\n_approve(\r\n_msgSender(),\r\nspender,\r\n_allowances[_msgSender()][spender].sub(\r\nsubtractedValue,\r\n\"ERC20: decreased allowance below zero\"\r\n)\r\n);\r\nreturn true;\r\n}\r\n\r\nfunction isExcludedFromReward(address account)\r\nexternal\r\nview\r\nreturns (bool)\r\n{\r\nreturn _isExcluded[account];\r\n}\r\n\r\nfunction totalFees() external view returns (uint256) {\r\nreturn _tFeeTotal;\r\n}\r\n\r\n// remove limits after token is stable - 30-60 minutes\r\nfunction removeLimits() external onlyOwner returns (bool){\r\nlimitsInEffect = false;\r\ngasLimitActive = false;\r\ntransferDelayEnabled = false;\r\nreturn true;\r\n}\r\n\r\n// disable Transfer delay\r\nfunction disableTransferDelay() external onlyOwner returns (bool){\r\ntransferDelayEnabled = false;\r\nreturn true;\r\n}\r\n\r\nfunction excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n_isExcludedMaxTransactionAmount[updAds] = isEx;\r\n}\r\n\r\n// once enabled, can never be turned off\r\nfunction enableTrading() internal onlyOwner {\r\ntradingActive = true;\r\nswapAndLiquifyEnabled = true;\r\ntradingActiveBlock = block.number;\r\nearlyBuyPenaltyEnd = block.timestamp + 72 hours;\r\n}\r\n\r\nfunction launch(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner returns (bool){\r\nrequire(!tradingActive, \"Trading is already active, cannot relaunch.\");\r\nrequire(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\");\r\nfor(uint256 i = 0; i < airdropWallets.length; i++){\r\naddress wallet = airdropWallets[i];\r\nuint256 amount = amounts[i];\r\n_transfer(msg.sender, wallet, amount);\r\n}\r\nenableTrading();\r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\nexcludeFromMaxTransaction(address(_uniswapV2Router), true);\r\nuniswapV2Router = _uniswapV2Router;\r\n_approve(address(this), address(uniswapV2Router), _tTotal);\r\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\nexcludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n_setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\nrequire(address(this).balance > 0, \"Must have ETH on contract to launch\");\r\naddLiquidity(balanceOf(address(this)), address(this).balance);\r\nreturn true;\r\n}\r\n\r\nfunction minimumTokensBeforeSwapAmount() external view returns (uint256) {\r\nreturn minimumTokensBeforeSwap;\r\n}\r\n\r\nfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\nrequire(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n_setAutomatedMarketMakerPair(pair, value);\r\n}\r\n\r\nfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\nautomatedMarketMakerPairs[pair] = value;\r\n_isExcludedMaxTransactionAmount[pair] = value;\r\nif(value){excludeFromReward(pair);}\r\nif(!value){includeInReward(pair);}\r\n}\r\n\r\nfunction setWreckSniperBuyers(uint256 sniperWreckBuy) public onlyOwner{\r\nrequire(sniperWreckBuy >= 0);\r\nwreckSniperBuyers = sniperWreckBuy * 1 gwei;\r\n}\r\n\r\nfunction setWreckSniperSellers(uint256 sniperWreckSeller) public onlyOwner{\r\nrequire(sniperWreckSeller >= 0);\r\nwreckSniperSellers = sniperWreckSeller * 1 gwei;\r\n}\r\n\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\nexternal\r\nview\r\nreturns (uint256)\r\n{\r\nrequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\nif (!deductTransferFee) {\r\n(uint256 rAmount, , , , , ) = _getValues(tAmount);\r\nreturn rAmount;\r\n} else {\r\n(, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\nreturn rTransferAmount;\r\n}\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount)\r\npublic\r\nview\r\nreturns (uint256)\r\n{\r\nrequire(\r\nrAmount <= _rTotal,\r\n\"Amount must be less than total reflections\"\r\n);\r\nuint256 currentRate = _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction excludeFromReward(address account) public onlyOwner {\r\nrequire(!_isExcluded[account], \"Account is already excluded\");\r\nrequire(_excluded.length + 1 <= 50, \"Cannot exclude more than 50 accounts.  Include a previously excluded address.\");\r\nif (_rOwned[account] > 0) {\r\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n}\r\n_isExcluded[account] = true;\r\n_excluded.push(account);\r\n}\r\n\r\nfunction includeInReward(address account) public onlyOwner {\r\nrequire(_isExcluded[account], \"Account is not excluded\");\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_excluded[i] == account) {\r\n_excluded[i] = _excluded[_excluded.length - 1];\r\n_tOwned[account] = 0;\r\n_isExcluded[account] = false;\r\n_excluded.pop();\r\nbreak;\r\n}\r\n}\r\n}\r\n\r\nfunction _approve(\r\naddress owner,\r\naddress spender,\r\nuint256 amount\r\n) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(\r\naddress from,\r\naddress to,\r\n\r\nuint256 amount\r\n) private {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\r\nif(!tradingActive){\r\nrequire(_isExcludedFromFee[from] || _isExcludedFromFee[to], \"Trading is not active yet.\");\r\n}\r\n\r\n\r\n\r\nif(limitsInEffect){\r\nif (\r\nfrom != owner() &&\r\nto != owner() &&\r\nto != address(0) &&\r\nto != address(0xdead) &&\r\n!inSwapAndLiquify\r\n){\r\n\r\nif(from != owner() && to != uniswapV2Pair && block.number == tradingActiveBlock){\r\nboughtEarly[to] = true;\r\nemit BoughtEarly(to);\r\n}\r\n\r\nif (gasLimitActive && automatedMarketMakerPairs[from]) {\r\nrequire(tx.gasprice <= wreckSniperBuyers, \"The Mandalorian does not approve of your actions, contact the admins to resolve this\");\r\n}\r\n\r\n\r\nif (gasLimitActive && automatedMarketMakerPairs[to]) {\r\nrequire(tx.gasprice <= wreckSniperSellers, \"The Mandalorian does not approve of your actions, contact the admins to resolve this\");\r\n}\r\n\r\n\r\nif (transferDelayEnabled){\r\nif (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\r\nrequire(_holderLastTransferTimestamp[to] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n_holderLastTransferTimestamp[to] = block.number;\r\n}\r\n}\r\n\r\n//when buy\r\nif (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\nrequire(wreckSniperBuyers + amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\r\n}\r\n//when sell\r\nelse if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\nrequire(wreckSniperSellers + amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n}\r\n}\r\n}\r\n\r\n\r\n\r\nuint256 totalTokensToSwap = _liquidityTokensToSwap.add(_marketingTokensToSwap);\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\nbool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n// swap and liquify\r\nif (\r\n!inSwapAndLiquify &&\r\nswapAndLiquifyEnabled &&\r\nbalanceOf(uniswapV2Pair) > 0 &&\r\ntotalTokensToSwap > 0 &&\r\n!_isExcludedFromFee[to] &&\r\n!_isExcludedFromFee[from] &&\r\nautomatedMarketMakerPairs[to] &&\r\noverMinimumTokenBalance\r\n) {\r\nswapBack();\r\n}\r\n\r\nbool takeFee = true;\r\n\r\nif (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\ntakeFee = false;\r\nbuyOrSellSwitch = TRANSFER; // no tax on transfers\r\n} else {\r\n// Buy\r\nif (automatedMarketMakerPairs[from]) {\r\nremoveAllFee();\r\n_taxFee = _buyTaxFee;\r\n_liquidityFee = _buyLiquidityFee + _buyMarketingFee;\r\nbuyOrSellSwitch = BUY;\r\n}\r\n// Sell\r\nelse if (automatedMarketMakerPairs[to]) {\r\nremoveAllFee();\r\n_taxFee = _sellTaxFee;\r\n_liquidityFee = _sellLiquidityFee + _sellMarketingFee;\r\nbuyOrSellSwitch = SELL;\r\n// higher tax if bought in the same block as trading active for 72 hours (sniper protect)\r\nif(boughtEarly[from] && earlyBuyPenaltyEnd > block.timestamp){\r\n_taxFee = _taxFee * 5;\r\n_liquidityFee = _liquidityFee * 5;\r\n}\r\n// Normal transfers do not get taxed\r\n} else {\r\nrequire(!boughtEarly[from] || earlyBuyPenaltyEnd <= block.timestamp, \"Snipers can't transfer tokens to sell cheaper until penalty timeframe is over.  DM a Mod.\");\r\nremoveAllFee();\r\nbuyOrSellSwitch = TRANSFER; // no tax on transfers\r\n}\r\n}\r\n\r\n_tokenTransfer(from, to, amount, takeFee);\r\n\r\n}\r\n\r\nfunction swapBack() private lockTheSwap {\r\nuint256 contractBalance = balanceOf(address(this));\r\nuint256 totalTokensToSwap = _liquidityTokensToSwap + _marketingTokensToSwap;\r\n\r\nuint256 tokensForLiquidity = _liquidityTokensToSwap.div(2);\r\nuint256 amountToSwapForETH = contractBalance.sub(tokensForLiquidity);\r\n\r\nuint256 initialETHBalance = address(this).balance;\r\n\r\nswapTokensForETH(amountToSwapForETH);\r\n\r\nuint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\nuint256 ethForMarketing = ethBalance.mul(_marketingTokensToSwap).div(totalTokensToSwap);\r\n\r\nuint256 ethForLiquidity = ethBalance.sub(ethForMarketing);\r\n\r\nuint256 ethForDev= ethForMarketing * 2 / 7;\r\nethForMarketing -= ethForDev;\r\n\r\n_liquidityTokensToSwap = 0;\r\n_marketingTokensToSwap = 0;\r\n\r\n(bool success,) = address(marketingAddress).call{value: ethForMarketing}(\"\");\r\n(success,) = address(devAddress).call{value: ethForDev}(\"\");\r\n\r\naddLiquidity(tokensForLiquidity, ethForLiquidity);\r\nemit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\r\n\r\nif(address(this).balance > 1e17){\r\n(success,) = address(marketingAddress).call{value: address(this).balance}(\"\");\r\n}\r\n}\r\n\r\n// force Swap back if slippage above 49% for launch.\r\nfunction forceSwapBack() external onlyOwner {\r\nuint256 contractBalance = balanceOf(address(this));\r\nrequire(contractBalance >= _tTotal / 100, \"Can only swap back if more than 1% of tokens stuck on contract\");\r\nswapBack();\r\nemit OwnerForcedSwapBack(block.timestamp);\r\n}\r\n\r\nfunction swapTokensForETH(uint256 tokenAmount) private {\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0, // accept any amount of ETH\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n}\r\n\r\nfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\naddress(this),\r\ntokenAmount,\r\n0, // slippage is unavoidable\r\n0, // slippage is unavoidable\r\nliquidityAddress,\r\nblock.timestamp\r\n);\r\n}\r\n\r\nfunction _tokenTransfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount,\r\nbool takeFee\r\n) private {\r\nif (!takeFee) removeAllFee();\r\n\r\nif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferFromExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferToExcluded(sender, recipient, amount);\r\n} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferBothExcluded(sender, recipient, amount);\r\n} else {\r\n_transferStandard(sender, recipient, amount);\r\n}\r\n\r\nif (!takeFee) restoreAllFee();\r\n}\r\n\r\nfunction _transferStandard(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity\r\n) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferToExcluded(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity\r\n) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferFromExcluded(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity\r\n) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferBothExcluded(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity\r\n) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nfunction _getValues(uint256 tAmount)\r\nprivate\r\nview\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\n(\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity\r\n) = _getTValues(tAmount);\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\ntAmount,\r\ntFee,\r\ntLiquidity,\r\n_getRate()\r\n);\r\nreturn (\r\nrAmount,\r\nrTransferAmount,\r\nrFee,\r\ntTransferAmount,\r\ntFee,\r\ntLiquidity\r\n);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount)\r\nprivate\r\nview\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 tFee = calculateTaxFee(tAmount);\r\nuint256 tLiquidity = calculateLiquidityFee(tAmount);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\nreturn (tTransferAmount, tFee, tLiquidity);\r\n}\r\n\r\nfunction _getRValues(\r\nuint256 tAmount,\r\nuint256 tFee,\r\nuint256 tLiquidity,\r\nuint256 currentRate\r\n)\r\nprivate\r\npure\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns (uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (\r\n_rOwned[_excluded[i]] > rSupply ||\r\n_tOwned[_excluded[i]] > tSupply\r\n) return (_rTotal, _tTotal);\r\nrSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\ntSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n}\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\nfunction _takeLiquidity(uint256 tLiquidity) private {\r\nif(buyOrSellSwitch == BUY){\r\n_liquidityTokensToSwap += tLiquidity * _buyLiquidityFee / _liquidityFee;\r\n_marketingTokensToSwap += tLiquidity * _buyMarketingFee / _liquidityFee;\r\n} else if(buyOrSellSwitch == SELL){\r\n_liquidityTokensToSwap += tLiquidity * _sellLiquidityFee / _liquidityFee;\r\n_marketingTokensToSwap += tLiquidity * _sellMarketingFee / _liquidityFee;\r\n}\r\nuint256 currentRate = _getRate();\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\nif (_isExcluded[address(this)])\r\n_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n}\r\n\r\nfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\nreturn _amount.mul(_taxFee).div(10**2);\r\n}\r\n\r\nfunction calculateLiquidityFee(uint256 _amount)\r\nprivate\r\nview\r\nreturns (uint256)\r\n{\r\nreturn _amount.mul(_liquidityFee).div(10**2);\r\n}\r\n\r\nfunction removeAllFee() private {\r\nif (_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n_previousTaxFee = _taxFee;\r\n_previousLiquidityFee = _liquidityFee;\r\n\r\n_taxFee = 0;\r\n_liquidityFee = 0;\r\n}\r\n\r\nfunction restoreAllFee() private {\r\n_taxFee = _previousTaxFee;\r\n_liquidityFee = _previousLiquidityFee;\r\n}\r\n\r\nfunction isExcludedFromFee(address account) external view returns (bool) {\r\nreturn _isExcludedFromFee[account];\r\n}\r\n\r\nfunction removeBoughtEarly(address account) external onlyOwner {\r\nboughtEarly[account] = false;\r\nemit RemovedSniper(account);\r\n}\r\n\r\nfunction excludeFromFee(address account) external onlyOwner {\r\n_isExcludedFromFee[account] = true;\r\nemit ExcludeFromFee(account);\r\n}\r\n\r\nfunction includeInFee(address account) external onlyOwner {\r\n_isExcludedFromFee[account] = false;\r\nemit IncludeInFee(account);\r\n}\r\n\r\nfunction setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee, uint256 buyMarketingFee)\r\nexternal\r\nonlyOwner\r\n{\r\n_buyTaxFee = buyTaxFee;\r\n_buyLiquidityFee = buyLiquidityFee;\r\n_buyMarketingFee = buyMarketingFee;\r\nrequire(_buyTaxFee + _buyLiquidityFee + _buyMarketingFee <= 10, \"Must keep buy taxes below 10%\");\r\nemit SetBuyFee(buyMarketingFee, buyLiquidityFee, buyTaxFee);\r\n}\r\n\r\nfunction setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellMarketingFee)\r\nexternal\r\nonlyOwner\r\n{\r\n_sellTaxFee = sellTaxFee;\r\n_sellLiquidityFee = sellLiquidityFee;\r\n_sellMarketingFee = sellMarketingFee;\r\nrequire(_sellTaxFee + _sellLiquidityFee + _sellMarketingFee <= 15, \"Must keep sell taxes below 15%\");\r\nemit SetSellFee(sellMarketingFee, sellLiquidityFee, sellTaxFee);\r\n}\r\n\r\n\r\nfunction setMarketingAddress(address _marketingAddress) external onlyOwner {\r\nrequire(_marketingAddress != address(0), \"_marketingAddress address cannot be 0\");\r\n_isExcludedFromFee[marketingAddress] = false;\r\nmarketingAddress = payable(_marketingAddress);\r\n_isExcludedFromFee[marketingAddress] = true;\r\nemit UpdatedMarketingAddress(_marketingAddress);\r\n}\r\n\r\nfunction setLiquidityAddress(address _liquidityAddress) public onlyOwner {\r\nrequire(_liquidityAddress != address(0), \"_liquidityAddress address cannot be 0\");\r\nliquidityAddress = payable(_liquidityAddress);\r\n_isExcludedFromFee[liquidityAddress] = true;\r\nemit UpdatedLiquidityAddress(_liquidityAddress);\r\n}\r\n\r\nfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\nswapAndLiquifyEnabled = _enabled;\r\nemit SwapAndLiquifyEnabledUpdated(_enabled);\r\n}\r\n\r\nreceive() external payable {}\r\n\r\nfunction transferForeignToken(address _token, address _to)\r\nexternal\r\nonlyOwner\r\nreturns (bool _sent)\r\n{\r\nrequire(_token != address(0), \"_token address cannot be 0\");\r\nrequire(_token != address(this), \"Can't withdraw native tokens\");\r\nuint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n_sent = IERC20(_token).transfer(_to, _contractBalance);\r\nemit TransferForeignToken(_token, _contractBalance);\r\n}\r\n\r\nfunction ETHRescueFunction() external onlyOwner {\r\nrequire(!tradingActive, \"Not able to withdraw unless you havent started the launch yet.\");\r\nbool success;\r\n(success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BoughtEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notsnipersupposedly\",\"type\":\"address\"}],\"name\":\"RemovedSniper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"UpdatedLiquidityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHRescueFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sniperWreckBuy\",\"type\":\"uint256\"}],\"name\":\"setWreckSniperBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sniperWreckSeller\",\"type\":\"uint256\"}],\"name\":\"setWreckSniperSellers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wreckSniperBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wreckSniperSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MandalorianInu", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://539317eab36b880d70e2155a8a2a39beef4b1d7dc6a8405d3441874e99f1c036"}]}