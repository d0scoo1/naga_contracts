{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/CurveUstAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./../interfaces/IExchangeAdapter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\n\\r\\n// solhint-disable func-name-mixedcase\\r\\n// solhint-disable var-name-mixedcase\\r\\ninterface ICurveUst {\\r\\n    function exchange_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _burn_amount,\\r\\n        int128 i,\\r\\n        uint256 _min_received\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ICurve3Crv {\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\r\\n        external;\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        int128 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract CurveUstAdapter {\\r\\n    address public constant fraxLp = 0x94e131324b6054c0D789b190b2dAC504e4361b53;\\r\\n    ICurve3Crv public constant pool3Crv =\\r\\n        ICurve3Crv(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\r\\n\\r\\n    function indexByUnderlyingCoin(address coin) public pure returns (int128) {\\r\\n        if (coin == 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD) return 1; // ust\\r\\n        if (coin == 0x6B175474E89094C44Da98b954EedeAC495271d0F) return 2; // dai\\r\\n        if (coin == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) return 3; // usdc\\r\\n        if (coin == 0xdAC17F958D2ee523a2206206994597C13D831ec7) return 4; // usdt\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function indexByCoin(address coin) public pure returns (int128) {\\r\\n        if (coin == 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD) return 1; // ust\\r\\n        if (coin == 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490) return 2; // 3Crv\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // 0x6012856e  =>  executeSwap(address,address,address,uint256)\\r\\n    function executeSwap(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256) {\\r\\n        ICurveUst curve = ICurveUst(pool);\\r\\n        int128 i = indexByUnderlyingCoin(fromToken);\\r\\n        int128 j = indexByUnderlyingCoin(toToken);\\r\\n        require(i != 0 && j != 0, \\\"CurveUstAdapter: can't swap\\\");\\r\\n\\r\\n        return curve.exchange_underlying(i - 1, j - 1, amount, 0);\\r\\n    }\\r\\n\\r\\n    // 0xe83bbb76  =>  enterPool(address,address,address,uint256)\\r\\n    function enterPool(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256) {\\r\\n        ICurveUst curve = ICurveUst(pool);\\r\\n\\r\\n        uint128 i = uint128(indexByCoin(fromToken));\\r\\n\\r\\n        if (i != 0) {\\r\\n            uint256[2] memory entryVector_;\\r\\n            entryVector_[i - 1] = amount;\\r\\n            return curve.add_liquidity(entryVector_, 0);\\r\\n        }\\r\\n\\r\\n        i = uint128(indexByUnderlyingCoin(fromToken));\\r\\n        IERC20 threeCrvToken = IERC20(\\r\\n            0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\\r\\n        );\\r\\n\\r\\n        require(i != 0, \\\"CrvUstAdapter: can't enter\\\");\\r\\n        uint256[3] memory entryVector;\\r\\n        entryVector[i - 2] = amount;\\r\\n\\r\\n        pool3Crv.add_liquidity(entryVector, 0);\\r\\n        return\\r\\n            curve.add_liquidity([0, threeCrvToken.balanceOf(address(this))], 0);\\r\\n    }\\r\\n\\r\\n    // 0x9d756192  =>  exitPool(address,address,address,uint256)\\r\\n    function exitPool(\\r\\n        address pool,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256) {\\r\\n        ICurveUst curve = ICurveUst(pool);\\r\\n\\r\\n        int128 i = indexByCoin(toToken);\\r\\n\\r\\n        if (i != 0) {\\r\\n            return curve.remove_liquidity_one_coin(amount, i - 1, 0);\\r\\n        }\\r\\n\\r\\n        i = indexByUnderlyingCoin(toToken);\\r\\n        require(i != 0, \\\"CrvUstAdapter: can't exit\\\");\\r\\n        uint256 amount3Crv = curve.remove_liquidity_one_coin(amount, 1, 0);\\r\\n        pool3Crv.remove_liquidity_one_coin(amount3Crv, i - 2, 0);\\r\\n\\r\\n        return IERC20(toToken).balanceOf(address(this));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IExchangeAdapter {\\r\\n    // 0x6012856e  =>  executeSwap(address,address,address,uint256)\\r\\n    function executeSwap(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    // 0x73ec962e  =>  enterPool(address,address,uint256)\\r\\n    function enterPool(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    // 0x660cb8d4  =>  exitPool(address,address,uint256)\\r\\n    function exitPool(\\r\\n        address pool,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enterPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"indexByCoin\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"indexByUnderlyingCoin\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3Crv\",\"outputs\":[{\"internalType\":\"contract ICurve3Crv\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveUstAdapter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}