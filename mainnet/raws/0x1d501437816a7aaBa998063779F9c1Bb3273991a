{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TShirt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nimport './TShirtRenderer.sol';\\nimport './Base64.sol';\\n\\ncontract TShirt is ERC721, ERC721Enumerable, Pausable, Ownable, ITShirtRenderer {\\n  using Address for address payable;\\n  using Counters for Counters.Counter;\\n\\n  address public rendererAddress;\\n\\n  Counters.Counter private _tokenIdCounter;\\n  uint256 public constant MAX_SUPPLY = 999;\\n\\n  // tokenId => minted Options\\n  mapping(uint256 => Options) private tokens;\\n\\n  event Purchased(address owner, uint256 tokenId, Options options);\\n\\n  constructor() ERC721('T-Shirt Exchange', 'TSHIRT') {}\\n\\n  function setRendererAddress(address to) public onlyOwner {\\n    rendererAddress = to;\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function getCost(uint256 design) public view override returns (uint256) {\\n    return ITShirtRenderer(rendererAddress).getCost(design);\\n  }\\n\\n  function render(uint256 tokenId, Options memory options) public view override returns (string memory) {\\n    return ITShirtRenderer(rendererAddress).render(tokenId, options);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    require(_exists(tokenId), 'id');\\n    return render(tokenId, tokens[tokenId]);\\n  }\\n\\n  function withdraw(uint256 amount, address to) external onlyOwner {\\n    require(amount > 0 && amount <= address(this).balance, 'oob');\\n    payable(to).sendValue(amount);\\n  }\\n\\n  function purchase(Options memory options) external payable {\\n    // supply check\\n    require(_tokenIdCounter.current() <= MAX_SUPPLY, 'max');\\n\\n    // validate design\\n    require(options.background > 0 && options.outline > 0 && options.fill > 0, 'color');\\n    require(options.background != options.outline, 'mono');\\n\\n    // price check\\n    require(msg.value >= getCost(options.design), 'cost');\\n\\n    // save options and increment tokenId\\n    _tokenIdCounter.increment();\\n    tokens[_tokenIdCounter.current()] = options;\\n\\n    // mint token to sender\\n    _safeMint(_msgSender(), _tokenIdCounter.current());\\n\\n    // emit event\\n    emit Purchased(_msgSender(), _tokenIdCounter.current(), options);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/TShirtRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport './Base64.sol';\\n\\ninterface ITShirtRenderer {\\n  struct Options {\\n    uint256 design;\\n    uint256 background;\\n    uint256 outline;\\n    uint256 fill;\\n    uint256 color1;\\n    uint256 color2;\\n    uint256 color3;\\n    uint256 color4;\\n    uint256 color5;\\n  }\\n\\n  function getCost(uint256 design) external view returns (uint256);\\n\\n  function render(uint256 tokenId, Options memory options) external view returns (string memory);\\n}\\n\\ncontract TShirtRenderer is ITShirtRenderer {\\n  // private string-building constants\\n  string private constant PATH_PREFIX = '<path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" class=\\\"';\\n  string private constant COLOR_PREFIX = ',{\\\"trait_type\\\":\\\"Color\\\",\\\"value\\\":\\\"';\\n\\n  // matches length of designs array\\n  uint256 public constant DESIGNS_MAX = 75;\\n\\n  // cost tiers\\n  uint256 public constant COST_BASIC = 0.1234 ether;\\n  uint256 public constant COST_FANCY = 0.345 ether;\\n  uint256 public constant COST_WHALE = 1 ether;\\n\\n  // split every 6th char to get array. size = length / 6\\n  string public constant COLORS =\\n    '------F1F5F9E2E8F0CBD5E194A3B864748B4755693341551E293BF5F5F4E7E5E4D6D3D1A8A29E78716C57534E44403C292524FEE2E2FECACAFCA5A5F87171EF4444DC2626B91C1C991B1BFFEDD5FED7AAFDBA74FB923CF97316EA580CC2410C9A3412FEF3C7FDE68AFCD34DFBBF24F59E0BD97706B4530992400EFEF9C3FEF08AFDE047FACC15EAB308CA8A04A16207854D0EECFCCBD9F99DBEF264A3E63584CC1665A30D4D7C0F3F6212DCFCE7BBF7D086EFAC4ADE8022C55E16A34A15803D166534D1FAE5A7F3D06EE7B734D39910B981059669047857065F46CCFBF199F6E45EEAD42DD4BF14B8A60D94880F766E115E59CFFAFEA5F3FC67E8F922D3EE06B6D40891B20E7490155E75E0F2FEBAE6FD7DD3FC38BDF80EA5E90284C70369A1075985DBEAFEBFDBFE93C5FD60A5FA3B82F62563EB1D4ED81E40AFE0E7FFC7D2FEA5B4FC818CF86366F14F46E54338CA3730A3EDE9FEDDD6FEC4B5FDA78BFA8B5CF67C3AED6D28D95B21B6F3E8FFE9D5FFD8B4FEC084FCA855F79333EA7E22CE6B21A8FAE8FFF5D0FEF0ABFCE879F9D946EFC026D3A21CAF86198FFCE7F3FBCFE8F9A8D4F472B6EC4899DB2777BE185D9D174DFFE4E6FECDD3FDA4AFFB7185F43F5EE11D48BE123C9F1239';\\n\\n  string[] public patterns = [\\n    '', // 0: blank\\n    '11 8h1v17h-1V8zm-1 1H9v4h1V9zm-3 1h1v5H7v-5zm-2 2h1v1H5v-1zm9-3h-1v16h1V9zm1 1h1v15h-1V10zm3 0h-1v15h1V10zm2-2h-1v17h1V8zm1 0h1v6h-1V8zm3 1h-1v5h1V9zm1 2h1v3h-1v-3z',\\n    '8 9h6v1H8V9zm0 2v-1H7v1H6v2h1v1h2v-1H8v-1h16v1h-1v1h2v-1h1v-2h-1v-1h-1V9h-6v1h6v1H8zm16 0v1h1v-1h-1zM8 11v1H7v-1h1zm14 2H10v1h12v-1zm-11 2h10v1H11v-1zm10 2H11v1h10v-1zm-10 2h10v1H11v-1zm10 2H11v1h10v-1zm-10 2h10v1H11v-1z',\\n    '22 8h-2v1h1v1h2V9h-1V8zm-3 2h-1v1h-1v2h1v1h2v-1h1v-2h-1v-1h-1zm4 1h2v1h1v2h-1v1h-1v-1h-1v-1h-1v-1h1v-1zM6 12H5v1h1v-1zm12 3h-1v1h-1v2h1v1h2v-1h1v-2h-1v-1h-1zm-5 1h-1v1h-1v2h1v1h2v-1h1v-2h-1v-1h-1zm8 3h-1v1h-1v2h1v1h1v-4zm-5 1h-1v1h-1v2h1v1h2v-1h1v-2h-1v-1h-1zm-4 1h-1v4h1v-1h1v-2h-1v-1zm6 3h2v1h-2v-1zm-5-13h2v1h1v2h-1v1h-2v-1h-1v-2h1v-1zm-5 0h2v1h1v2h-1v-1H9v1H7v-2h1v-1zm5-3h-3v2h2V9h1V8z',\\n    '17 14h-2v1h-1v1h-1v2h1v1h1v1h2v-1h1v-1h1v-2h-1v-1h-1v-1zm0 1v1h1v2h-1v1h-2v-1h-1v-2h1v-1h2z',\\n    '18 11h-4v1h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1h4v1h1v1h1v1h1v-1h-1v-1h-1v-1h-1v-1zm3 8h-1v1h-1v1h-1v1h-4v-1h-1v-1h-1v-1h-1v1h1v1h1v1h1v1h4v-1h1v-1h1v-1h1v-1z',\\n    '9 9v1H8v1H7v1H6v1h1v-1h1v-1h1v-1h1V9h1V8h-1v1H9zm16 3h1v1h-1v-1zm-1-1h1v1h-1v-1zm-1-1h1v1h-1v-1zm-1-1h1v1h-1V9zm0 0h-1V8h1v1z',\\n    '12 9h1v1h-1V9zm-1 2v-1h1v1h-1zm-1 1v-1h1v1h-1zm-1 1v-1h1v1H9zm-1 1v-1h1v1H8zm0 0v1H7v-1h1zm11-5h1v1h-1V9zm2 2h-1v-1h1v1zm1 1h-1v-1h1v1zm1 1h-1v-1h1v1zm1 1h-1v-1h1v1zm0 0h1v1h-1v-1zm-3 9h-1v1h-1v1h1v-1h1v-1zm-9 1h1v1h-1v-1zm0 0h-1v-1h1v1z',\\n    '21 9h-1v1h-1v1h3v-1h-1V9Zm-4 3h-1v1h-1v1h3v-1h-1v-1Zm-4 2h-1v1h-1v1h3v-1h-1v-1Zm6 1h-1v1h-1v1h3v-1h-1v-1Zm-3 3h-1v-1h-1v1h-1v1h3v-1Zm-4 2h-1v1h1v-1Zm-1 4h1v1h-1v-1Zm9-4h-1v-1h-1v1h-1v1h3v-1Zm-4 2h-1v-1h-1v1h-1v1h3v-1Zm5 2h-1v-1h-1v1h-1v1h3v-1Zm0-12v1h-1v1h2v-2h-1Zm5 0h1v1h-3v-1h1v-1h1v1Zm-13-2h1v1h-3v-1h1V9h1v1Zm-5 1h1v1H6v-1h1v-1h1v1Zm-1 4v-2h1v2H7Z',\\n    '11 16v4h10v-3h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1Z',\\n    '11 8h-1v1H8v2h17v-1h-1V9h-2V8h-3v1h-1v1h-4V9h-1V8h-2Zm0 11h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v3H11v-4Z',\\n    '7 10h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h2v1h1v1h-2v1h-1v-1h-3v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1H9v1H8v-1H7v1H6v-1H5v-1h1v-1h1v-1Zm5 12h-1v3h10v-2h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1Z',\\n    '9 9H8v1H7v1H6v1h1v1h2V9Zm4 0h-1v2h2V9h-1Zm6 4h-1v3h3v-2h-1v-1h-1Zm-7 0h-1v4h2v-4h-1Zm8 7h-2v3h2v-1h1v-2h-1Zm1-11h2v4h-2v-1h-1v-2h1V9ZM11 22h4v2h-1v1h-2v-1h-1v-2Z',\\n    '15 10h2v2h-1v1h-2v-1h-1v-2h2Zm-2 7h2v3h-3v-1h-1v-2h2Zm2 3h3v4h-3v-4Zm6 2h-2v3h2v-3ZM7 14v1h1v-1h1v-1H7v1Zm16-2h3v2h-1v1h-1v-1h-1v-2Zm-4 2h-2v1h-1v3h3v-4Z',\\n    '18 9h2v2h-1v1h-2v-1h-1v-1h2V9Zm0 7h2v1h1v2h-1v1h-2v-1h-1v-2h1v-1Zm-4 3h-1v1h-1v2h1v1h2v-1h1v-2h-1v-1h-1Zm3 4h2v1h1v1h-4v-1h1v-1Zm-4-9h2v1h1v2h-1v1h-2v-1h-1v-2h1v-1Zm-2-1v1H9v-1H8v-2h1v-1h2v1h1v2h-1Zm13-4h-1v1h-1v2h1v1h2v-1h1v-1h-1v-1h-1V9Z',\\n    '13 8h-1v1h1V8zm-1 2h1v1h2v2h-3v-3zm3 4h-1v1h-2v2h3v-3zm-2 4h-1v3h3v-2h-2v-1zm11-7h1v2h-3v-3h1v1h1zm-9 11h-1v1h-2v2h3v-3z',\\n    '20 8v3h-1v-1h-1V9h1V8h1zM8 10h1v1h1V9H8v1zm10 4v1h-1v-3h3v2h-2zm-1 4h2v1h1v-3h-3v2zm-7-5H9v1H8v1H7v-3h3v1zm8 10h-1v-3h3v2h-2v1zm1 2h1v-1h-3v1h2z',\\n    '10 8h1v6h-1V8zm3 1h1v16h-1V9zm-5 1H7v5h1v-5zm8 0h1v15h-1V10zm4-2h-1v17h1V8zm2 1h1v4h-1V9zm4 2h-1v3h1v-3z',\\n    '12 8h-1v17h1V8zm3 2h-1v15h1V10zM8 9h1v5H8V9zm-2 3H5v1h1v-1zm11-2h1v15h-1V10zm4-2h-1v17h1V8zm2 1h1v5h-1V9zm4 3h-1v1h1v-1z',\\n    '10 8h3v1h-3V8zm16 3H6v1h20v-1zm-15 3h10v1H11v-1zm10 3H11v1h10v-1zm-10 3h10v1H11v-1zm0 3h10v1H11v-1zM22 8h-3v1h3V8zM7 14h1v1H7v-1zm18 0h-1v1h1v-1z',\\n    '25 10H7v1h18v-1zM6 13h3v1H6v-1zm4 0h12v1H10v-1zm11 3H11v1h10v-1zm-10 3h10v1H11v-1zm0 3h10v1H11v-1zm15-9h-3v1h3v-1z',\\n    '20 8h2v2h-2V8zm-9 3h2v2h-2v-2zm6 0h2v2h-2v-2zm-1 3h-2v2h2v-2zm-5 3h2v2h-2v-2zm8 0h-2v2h2v-2zm-5 3h2v2h-2v-2zm-1 3h-2v2h2v-2zm4 0h2v2h-2v-2zm4-3h-1v2h1v-2zm-1-6h1v2h-1v-2zm5-3h-2v2h2v-2zM7 11H6v1H5v1h2v-2zm1-2h2v1H8V9z',\\n    '11 8h2v2h-2V8zm5 3h-2v2h2v-2zm4 0h2v2h-2v-2zm-1 5v-2h-2v2h2zm-8-2h2v2h-2v-2zm5 3h-2v2h2v-2zm-5 3h2v2h-2v-2zm8 2v-2h-2v2h2zm-5 1h2v2h-2v-2zm7 0h-1v2h1v-2zm-1-6h1v2h-1v-2zm-10-6H8v2h2v-2zm8-2h1v1h-1V9zm6 0h-1v1h1V9zm0 5h1v1h-1v-1zm3-2h-1v1h1v-1z',\\n    '8 15H7v-5h1v5zm3 6h1v-8h-1v8zm6-6h-2v2h2v-2zm4 6v-1h-8v1h8zm0 3v1H11v-1h10zm0-13h-1v8h1v-8zm3-1h1v5h-1v-5zm-13 1v1h8v-1h-8z',\\n    '22 9h1v4h-1V9zM9 13h1v-2H9v2zm4 0v1h4v-1h-4zm6 0h-1v4h1v-4zm-5 6h-1v-4h1v4zm-8-6H5v-1h1v1zm13 6v-1h-4v1h4zm2 4v-1H11v1h10zm6-11h-1v1h1v-1zm-9-2V9h3v1h-3zM9 9v1h5V9H9z',\\n    '12 8h-2v1H8v2h1v-1h1V9h3V8h-1zm1 6h1v1h1v1h6v1h-1v1h-1v1h-1v-1h-1v-1h-6v-1h1v-1h1v-1zm5-3h1v-1h1V9h2V8h-3v1h-1v2zm5-1h1v1h1v1h1v1h-5v-1h1v-1h1v-1zM13 22h1v1h1v1h6v1H11v-1h1v-1h1v-1z',\\n    '14 10h-1v1h-1v1H5v1h2v1h2v-1h8v1h1v1h1v-1h1v-1h7v-1h-2v-1h-1v-1h-1v1h-1v1h-7v-1h-1v-1zm-1 8h1v1h1v1h6v1h-1v1h-1v1h-1v-1h-1v-1h-6v-1h1v-1h1v-1z',\\n    '22 8h-1v2h-1v1h1v3h-1v1h1v-1h1v-3h1v-1h-1V8zm-8 2h3v1h-1v3h1v1h-1v3h1v1h-1v3h1v1h-1v2h-1v-2h-1v-1h1v-3h-1v-1h1v-3h-1v-1h1v-3h-1v-1zm6 8h1v1h-1v-1zm1 4h-1v1h1v-1zM9 9h1v1h1v1h-1v2H9v-2H8v-1h1V9z',\\n    '12 8h1v4h1v1h-1v3h1v1h-1v3h1v1h-1v3h1v1h-3v-1h1v-3h-1v-1h1v-3h-1v-1h1v-3h-1v-1h1V9h-1V8h1zm7 1h-1v3h-1v1h1v3h-1v1h1v3h-1v1h1v3h-1v1h3v-1h-1v-3h1v-1h-1v-3h1v-1h-1v-3h1v-1h-1V9zm5 1h1v2h1v1h-1v2h-1v-2h-1v-1h1v-2zM6 11h1v1h1v1H7v1H6v-1H5v-1h1v-1z',\\n    '11 8h-1v6h1V8zm4 2h-1v15h1V10zm3-1h1v16h-1V9zm5 0h-1v4h1V9zm3 3h1v1h-1v-1zM7 11H6v3h1v-3z',\\n    '21 8h1v6h-1V8zm-7 1h-1v16h1V9zm4 1h-1v15h1V10zm8 1h-1v3h1v-3zM9 9h1v4H9V9zm-3 3H5v1h1v-1z',\\n    '8 11h1v2H8v-2zm2 0h2v2h-2v-2zm7 0h-2v2h2v-2zm-6 5h1v2h-1v-2zm4 0h2v2h-2v-2zm-3 5h-1v2h1v-2zm8 0h1v2h-1v-2zm1-5h-1v2h1v-2zm-6 5h2v2h-2v-2zm-1-5h-1v2h1v-2zm4 0h1v2h-1v-2zm4-5h-2v2h2v-2zm3 0h1v1h1v1h-2v-2zm-11 0h-1v2h1v-2zm5 0h-1v2h1v-2zm4 0h1v2h-1v-2zm-9 10h-1v2h1v-2zm4 0h1v2h-1v-2zM6 12H5v1h2v-2H6v1z',\\n    '14 9v1h-1V9h1zm-6 6v-1H7v1h1zm9-1v1h-2v-1h2zm0 5v1h-2v-1h2zm0 6v-1h-2v1h2zm-3-6v1h-1v-1h1zm0-4v-1h-1v1h1zm5-1v1h-1v-1h1zm0 6v-1h-1v1h1zm-5 4v1h-1v-1h1zm-2-4v-1h-1v1h1zm0-6v1h-1v-1h1zm0 10v1h-1v-1h1zm7 1v-1h-1v1h1zm2-11v1h-1v-1h1zm4 1v-1h-1v1h1zm-6-5V9h-1v1h1zm-7-1v1h-2V9h2zm-3 1V9H8v1h1zm13-1v1h-2V9h2zm2 1V9h-1v1h1zm-3 9v1h-1v-1h1zm0 6v-1h-1v1h1z',\\n    '25 10H7v1H6v1h20v-1h-1v-1zm-4 4H11v2h10v-2zm-10 4h10v2H11v-2zm10 4H11v2h10v-2zm3-8h1v1h-1v-1zM8 14H7v1h1v-1z',\\n    '11 8h-1v2h4V9h-3V8zm11 3V9h-4v1h3v1H11v3h9v1h-8v3h7v1h-6v3h5v1h-4v2h1v-1h4v-3h-5v-1h6v-3h-7v-1h8v-3h-9v-1h10v-1z',\\n    '11 8h-1v1h1v2H9V9H8v1H7v1H6v1H5v1h2v2h1v-1h1v-1h2v2h2v2h-2v2h2v2h-2v2h2v2h2v-2h2v2h2v-2h2v-2h-2v-2h2v-2h-2v-2h2v-2h2v1h1v1h1v-2h2v-1h-1v-1h-1v-1h-1V9h-1v2h-2V9h1V8h-1v1h-2v2h-2v-1h-2v1h-2V9h-2V8zm2 5v2h2v2h-2v2h2v2h-2v2h2v-2h2v2h2v-2h-2v-2h2v-2h-2v-2h2v-2h2v-2h-2v2h-2v-2h-2v2h-2zm0 0h-2v-2h2v2zm2 0v2h2v-2h-2zm2 4h-2v2h2v-2zm6-6v2h2v-2h-2zM9 13H7v-2h2v2z',\\n    '13 8h-1v1h1V8zm-3 2h1v1h-1v-1zm5 0h-1v1h1v-1zm-3 2h1v1h-1v-1zm2 2h1v1h-1v-1zm3 0h1v1h-1v-1zm3-2h-1v1h1v-1zm-8 4h1v1h-1v-1zm-3-4H8v1h1v-1zm10 4h1v1h-1v-1zm5-4h-1v1h1v-1zm-7-2h1v1h-1v-1zm5 0h-1v1h1v-1zm-3-2h1v1h-1V8zm-1 10h-1v1h1v-1zm1 2h1v1h-1v-1zm-1 2h-1v1h1v-1zm1 2h1v1h-1v-1zm-4-6h-1v1h1v-1zm-3 2h1v1h-1v-1zm2 2h1v1h-1v-1zm-1 2h-1v1h1v-1z',\\n    '15 13h2v2h-2z',\\n    '17 13h2v2h-2z',\\n    '13 13h2v2h-2z',\\n    '16 15h2v2h-2z',\\n    '14 15h2v2h-2z',\\n    '17 11h1v1h-1v-1zm2 1v1h-1v-1h1zm0 0v-1h1v1h-1zm-6 7h1v1h-1v-1zm0 1v1h-1v-1h1zm1 0h1v1h-1v-1zm4-1h-1v1h1v1h1v-1h1v-1h-1v1h-1v-1zm-3-7h-1v-1h-1v1h-1v1h1v-1h1v1h1v-1z',\\n    '23 10h1v1h-1v-1zm0 2v-1h-1v1h1zm1 0h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm0 0v1h1v-1h-1zm-6 3h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v1h1v-1h-1v-1h-1v1h-1v-1zM7 13h1v1H7v-1zm0-1v-1h1v1H7zm2 0H8v1h1v-1zm0-1h1v1H9v-1zm0 0H8v-1h1v1zm-2 1H6v1h1v-1zm10 11h1v1h-1v-1zm-1 1h1v1h-1v-1zm-1 0v-1h1v1h-1zm-1 0h1v1h-1v-1zm-1 0v-1h1v1h-1zm-1 0v1h1v-1h-1zm0 0h-1v-1h1v1zm7 0v1h-1v-1h1zm1 0h-1v-1h1v1zm0 0h1v1h-1v-1z',\\n    '13 8h-1v1h1V8zm-1 7h-1v1h1v1h1v-1h-1v-1zm-1 4h1v1h-1v-1zm1 1h1v1h-1v-1zm0 3h-1v1h1v1h1v-1h-1v-1zm3 0h1v1h-1v-1zm1 1h1v1h-1v-1zm3-1h1v1h-1v-1zm1 1h1v1h-1v-1zm-4-5h-1v1h1v1h1v-1h-1v-1zm3 0h1v1h-1v-1zm1 1h1v1h-1v-1zm-5-5h1v1h-1v-1zm1 1h1v1h-1v-1zm4-1h-1v1h1v1h1v-1h-1v-1zm0-7h1v1h-1V8zM7 11h1v1H7v-1zm1 1h1v1H8v-1zm4-1h-1v1h1v1h1v-1h-1v-1zm7 0h1v1h-1v-1zm1 1h1v1h-1v-1zm4-1h-1v1h1v1h1v-1h-1v-1zm-9 0h1v1h-1v-1zm1 1h1v1h-1v-1z',\\n    '11 9h-1v1H9v1h1v-1h1V9zm7 0h1v1h-1V9zm0 1v1h-1v-1h1zm-4 3h1v1h-1v-1zm0 1v1h-1v-1h1zm1 3h-1v1h-1v1h1v-1h1v-1zm-1 4h1v1h-1v-1zm0 1v1h-1v-1h1zm5-1h-1v1h-1v1h1v-1h1v-1zm-1-4h1v1h-1v-1zm0 1v1h-1v-1h1zm1-5h-1v1h-1v1h1v-1h1v-1zm-5-3h-1v1h1v-1zm-4 3h1v1h-1v-1zm15 1h-1v1h1v-1zm-2-5h-1v1h-1v1h1v-1h1V9zM7 13H6v1h1v-1z',\\n    '12 8h1v17h-1V8zm4 2h1v15h-1V10zm5-2h-1v17h1V8zm3 2h1v5h-1v-5zM9 9H8v5h1V9z',\\n    '11 8h1v17h-1V8zm4 2h1v15h-1V10zm5-2h-1v17h1V8zm3 1h1v5h-1V9zM8 10H7v5h1v-5z',\\n    '10 9H9v1H7v1h3V9zm12 0h1v1h2v1h-3V9zm-7 1h-1v5h-3v1h4v-6zm2 0h1v5h3v1h-4v-6zm-6 8h4v7h-1v-6h-3v-1zm6 7v-7h4v1h-3v6h-1z',\\n    '9 9H8v1h1V9zm15 0h-1v1h1V9zM13 9h1v6h-3v-1h2V9zm1 16v-6h-3v1h2v5h1zm5-16h-1v6h3v-1h-2V9zm-1 16v-6h3v1h-2v5h-1zm7-11h-1v1h1v-1zM8 14H7v1h1v-1z',\\n    '13 8h-1v5h-2v1h3V8zm-7 6h3v-1H6v1zm13-6h1v5h2v1h-3V8zm7 6h-3v-1h3v1zm-7 11v-5h2v1h-1v4h-1zm-7-5h-1v1h1v4h1v-5h-1z',\\n    '12 8h-2v1h2V8zm8 1V8h-1v1h-1v1h2V9zm-3 2h-1v1h1v-1zm-5 1h2v2h-2v-2zm4 6v-2h2v2h-2zm1 5v2h-2v-2h2zm4-1h-1v1h1v-1zm-10 1h1v2h-1v-2zm12-12h1v1h-1v-1zm-5 3h-1v1h1v-1zM8 13h1v1H8v-1zm7 5h-1v1h1v-1z',\\n    '22 8h-1v2h2V9h-1V8zM8 10h2v2H8v-2zm13 4h-2v2h2v-2zm-10 4h2v2h-2v-2zm8 6h2v1h-2v-1zm-5-1h-1v1h1v-1zM13 9h1v1h1v1h-2V9zm10 4h1v1h-1v-1zm-7 0h-1v1h1v-1zm-6 0h1v1h-1v-1zm9 6h-2v2h2v-2z',\\n    '12 10h-1v1h1v-1zm3 5h-2v2h2v-2zm5 2h-1v1h1v-1zm0 2h1v1h-1v-1zm-7 2h-1v1h1v-1zm5 1h1v1h-1v-1zM6 12H5v1h1v1h1v-2H6zm15 0h1v1h-1v-1zm-1-1h-2v2h2v-2zm5 3v-2h2v1h-1v1h-1zm-14 2h1v1h-1v-1zm5 4h-2v2h2v-2z',\\n    '10 8v1h3V8h-3zm9 1V8h3v1h-3zm-5 5h-1v6h6v-6h-5zm4 1h-4v4h4v-4zM7 15v-5h1v5H7zm17-5v5h1v-5h-1z',\\n    '10 10h13v3h-1v-2H10v2H9v-3h1zm5 6h2v2h-2v-2zm-4 7v1h10v-1H11z',\\n    '5 13v-1h1v1H5zm6-1v10h10V12H11zm9 9v-8h-8v8h8zm6-9v1h1v-1h-1z',\\n    '8 10h2v1h12v-1h2v1h-1v1H9v-1H8v-1zm3 6h10v1H11v-1zm0 5h10v1H11v-1z',\\n    '25 10h-1v1h-1v1H9v-1H8v-1H7v2h1v1h16v-1h1v-2zm-14 7h10v1H11v-1zm0 5h10v1H11v-1z',\\n    '8 9h6v1H8V9zm-3 3h1v1H5v-1zm2 2H6v-1h1v1zm0 0h1v1H7v-1zm20-2h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1zm-6 12H11v1h10v-1zm-10-5h10v1H11v-1zm10-5H11v1h10v-1zm3-5h-6v1h6V9z',\\n    '26 12v1h-1v1h-2v-1h1v-1h1v-1h1v1zm-4-4h-3v1h3V8zM11 23h10v1H11v-1zm0-5h10v1H11v-1zM10 8h3v1h-3V8zm12 5H10v1h12v-1zM7 13H6v-2h1v1h1v1h1v1H7v-1z',\\n    '7 11H6v2h1v1h2v-3H7zm18 0h1v2h-1v1h-2v-3h2zm-14 3h10v2H11v-2zm10 6H11v2h10v-2z',\\n    '8 10H7v2h1v1h2v-1H9v-1H8v-1zm16 0h1v2h-1v1h-2v-1h1v-1h1v-1zm-13 6h10v2H11v-2zm10 6H11v2h10v-2z',\\n    '24 11v1h1v-1h-1zm0 1v1h-1v-1h1zM7 12h1v-1H7v1zm1 0v1h1v-1H8zm5 1v-1h2v1h1v2h-1v2h2v-1h2v1h1v2h-1v1h-2v-1h-2v2h1v2h-1v1h-2v-1h-1v-2h1v-6h-1v-2h1z',\\n    '26 13h-1v1h-1v-1h1v-1h1v1zM6 13h1v-1H6v1zm1 0v1h1v-1H7zm12-1h-2v1h-1v2h1v1h2v-1h1v-2h-1v-1zm-6 4h2v1h1v2h-1v1h-2v-1h-1v-2h1v-1zm4 4h2v1h1v2h-1v1h-2v-1h-1v-2h1v-1z',\\n    '23 11h3v1h1v1h-1v1h-1v1h-1v-1h-1v-3zM6 12H5v1h1v1h1v1h1v-1h1v-3H6v1zm5 8h10v5H11v-5z',\\n    '8 9h2v1h1v2h-1v1H8v-1H7v-2h1V9zm3 6h10v5H11v-5zm13-6h-2v1h-1v2h1v1h2v-1h1v-2h-1V9z',\\n    '10 9h1v1h1v1h1v1h1v1h1v1h2v-1h1v-1h1v-1h1v-1h1V9h2v2h-1v1h-1v1h-1v1h-1v1h-1v1h-1v1h-2v-1h-1v-1h-1v-1h-1v-1h-1v-1h-1v-1H9V9h1z',\\n    '11 8h-1v2h1v1h1v1h1v1h1v1h1v1h2v-1h1v-1h1v-1h1v-1h1v-1h1V8h-1v1h-1v1h-1v1h-1v1h-1v1h-2v-1h-1v-1h-1v-1h-1V9h-1V8z',\\n    '22 8h-3v17h2V14h1v-1h1v1h1v1h1v-1h1v-1h1v-1h-1v-1h-1v-1h-1V9h-2V8z',\\n    '10 8h3v17h-2V14h-1v-1H9v1H8v1H7v-1H6v-1H5v-1h1v-1h1v-1h1V9h2V8z',\\n    '21 20v5H11v-5h10z',\\n    '11 15v5h10v-5H11z',\\n    '16 11h1v3h-2v-2h1v-1zm-2 6h-3v3h2v-1h1v-2zm4 3h2v1h1v4h-4v-2h1v-3z',\\n    '9 9H8v1H7v1H6v1h4v-2H9V9zm10 1h2v3h-2v1h-2v-4h2zm-2 5h-3v3h3v-3zm1 8v-4h-3v1h-1v3h4zm-6-11h1v-1h1v3h-2v-2z',\\n    '10 11h1v2h1v1h1v1h-2v-1h-1v-1H9v-1h1v-1zm7 4h4v3h-1v1h-3v-4zm-3 6h-2v1h-1v3h3v-1h1v-3h-1z',\\n    '13 9h1v2h-2v2h-1v-3h1V9h1zm-1 7h1v-1h1v2h-2v-1zm9-5V9h3v1h1v3h-3v-1h-1v-1zm-2 12v-1h1v-1h-2v1h-1v2h2v-1z',\\n    '12 16h8v1h-8v-1z',\\n    '12 15h8v1h-8v-1z',\\n    '12 14h8v1h-8v-1z',\\n    '7 11h1v1H7v-1zm1 1h1v1H8v-1zm4 1h8v1h-8v-1zm13-2h-1v1h-1v1h1v-1h1v-1z',\\n    '6 12h1v1H6v-1zm1 1h1v1H7v-1zm5-1h8v1h-8v-1zm14 0h-1v1h-1v1h1v-1h1v-1z',\\n    '10 9H8v1H7v1H6v1H5v1h1v1h1v1h1v-1h1v-1h1v-1h1v-2h-1V9zm12 0h2v1h1v1h1v1h1v1h-1v1h-1v1h-1v-1h-1v-1h-1v-1h-1v-2h1V9z',\\n    '13 12h1v1h-1v-1zm1 1h1v1h-1v-1zm5-1h-1v1h-1v1h1v-1h1v-1zm-6 5h1v1h-1v-1zm1 0v-1h1v1h-1zm4 0h1v1h-1v-1zm0 0h-1v-1h1v1z',\\n    '15 11h1v1h-1v-1zm-2 4h-1v1h1v-1zm4 3h-1v1h1v-1zm3-4h-1v1h1v-1z',\\n    '16 12h1v1h-1v-1zm-2 2h-1v1h1v-1zm5 1h-1v1h1v-1zm-3 2h-1v1h1v-1z',\\n    '14 13h1v2h-1v-2zm3 0h1v2h-1v-2zm1 4h-4v-1h-1v1h1v1h4v-1zm0 0v-1h1v1h-1z',\\n    '13 12h3v1h4v1h-1v1h-1v1h-3v-1h-2v-3z',\\n    '12 14h2v1h-2v-1zm5 2h-1v1h-1v1h2v-2z',\\n    '14 13h1v1h-1z',\\n    '14 13h-1v1h-1v1h2v4h-1v1h2v-2h3v1h-1v1h2v-5h1v-1h-1v1h-4v-3h-1v1Z',\\n    '13 13h1v1h-1z',\\n    '14 18h1v2h-2v-1h1v-1Zm4 0h1v2h-2v-1h1v-1Z',\\n    '16 15h-3v2h1v1h2v-3z',\\n    '13 14h4v4h-1v-1h-1v-1h-1v-1h-1v-1z',\\n    '14 13h-1v1h2v1h1v1h1v2h1v-5h-4z',\\n    '17 12h-4v1h3v1h1v1h1v3h1v-4h-1v-1h-1v-1z',\\n    '18 13h-1v1h1v1h-2v-1h-3v1h-1v2h6v-1h1v-2h1v-1h-1v1h-1v-1Zm-5 2h1v1h-1v-1Z',\\n    '13 15h1v1h-1z',\\n    '13 12h1v1h-1v-1Zm2 1h-1v1h1v-1Zm0 0v-1h1v1h-1Z',\\n    '16 11h-1v1h1v-1zm4 2h-1v1h1v-1zm-4 0h1v1h1v2h1v3h-1v1h-1v1h-3v-1h-1v-3h1v-1h1v-1h1v-2z',\\n    '15 17h1v2h1v1h-3v-2h1v-1z',\\n    '14 13h-1v1h1v-1zm1 4h-1v2h4v-4h-2v1h-1v1z',\\n    '16 18v-2h1v3h-1v2h-1v-1h-1v-1h1v-1h1z',\\n    '17 13v-1h-2v1h-1v1h-1v1h-1v2h2v1h-1v1h-1v1h1v-1h1v1h1v-1h2v1h1v-1h1v1h1v-1h-1v-1h-1v-1h2v-2h-1v-1h-1v-1h-1zm0 5h1v1h-1v-1zm-2 0v-1h2v1h-2zm0 0h-1v1h1v-1zm3-2v-1h-1v1h1zm-3 0v-1h-1v1h1z',\\n    '17 12h1v1h1v1h1v4h-1v1h-1v1h-4v-1h-1v-1h-1v-4h1v-1h1v-1h3z',\\n    '14 14h1v1h-1v-1zm3 0h1v1h-1v-1zm2 2h-1v1h-4v-1h-1v1h1v1h4v-1h1v-1z',\\n    '13 13h-1v1h1v3h-1v1h3v-1h-1v-4h-1zm-1 7h8v1h-8v-1zm5-7h2v1h-2v-1zm0 4h-1v-3h1v3zm2 0v1h-2v-1h2zm0-1v1h1v-3h-1v2z',\\n    '19 13h-6v5h1v1h-1v1h2v-2h2v1h-1v1h2v-2h1v-5zm-1 1h-1v1h1v-1zm0 2h-4v1h4v-1zm-4-1v-1h1v1h-1z',\\n    '16 12h1v2h-1v1h3v1h-1v1h-1v1h-1v1h-1v-2h1v-1h-3v-1h1v-1h1v-1h1v-1z',\\n    '11 17h10v4H11z',\\n    '6 13h3v1H8v1H7v-1H6v-1Zm4 0h12v1h-1v3H11v-3h-1v-1Zm16 0h-3v1h1v1h1v-1h1v-1Z',\\n    '9 9H8v1h1v1h4v1h4v1h4v1h1v-2h-4v-1h-4v-1h-4V9H9Zm2 10h3v1h4v1h3v1h-4v-1h-4v-1h-2v-1Zm13-6h-1v1h3v-1h-2Z',\\n    '19 9h-1v1h3v1h4v1h1v-1h-1v-1h-3V9h-3Zm-8 7h3v1h4v1h3v1h-4v-1h-4v-1h-2v-1Z',\\n    '5 12h5v1H5v-1Zm5 1h4v1h4v1h3v1h-4v-1h-4v-1h-3v-1Zm1 9h3v1h4v1h3v1h-4v-1h-4v-1h-2v-1Z',\\n    '11 9H8v1h2v1h4v1h4v1h5v1h3v-1h-3v-1h-4v-1h-4v-1h-4V9Zm0 9v1h4v1h4v1h2v-1h-1v-1h-4v-1h-4v-1h-1v1Z',\\n    '7 11H6v1h2v1h4v1h4v1h4v1h1v-2h-4v-1h-4v-1H9v-1H7Zm4 9h3v1h4v1h3v1h-4v-1h-4v-1h-2v-1Z',\\n    '8 10H7v1h2v1h4v1h4v1h5v-1h-4v-1h-4v-1h-4v-1H8Zm17 4h-1v1h1v-1Zm-14 5h4v1h4v1h2v1h-3v-1h-4v-1h-3v-1Z',\\n    '15 12h-1v1h3v1h-2v2h1v-1h1v-1h1v-1h-1v-1h-2zm1 5h-1v1h1v-1z',\\n    '13 12h1v1h-1v-1zm2 2v-1h-1v1h-1v1h1v1h-1v1h1v-1h1v-1h2v1h1v1h1v-1h-1v-1h1v-1h-1v-1h1v-1h-1v1h-1v1h-2zm2 0v1h1v-1h-1zm-2 0h-1v1h1v-1z',\\n    '16.5 12h1v1h1v1h-4v-1h2v-1zm-2 3h-1v-1h1v1zm3 1h-3v-1h3v1zm0 1v-1h1v1h-1zm-3 1v1h1v-1h2v-1h-4v1h1z',\\n    '13 12h2v1h-1v3h1v1h-2v-5zm4 4h1v-3h-1v-1h2v5h-2v-1z',\\n    '19 12h-6v1h-1v6h1v1h1v-1h1v1h2v-1h1v1h1v-1h1v-6h-1v-1zm-1 2v2h-1v-2h1zm-3 2h-1v-2h1v2z',\\n    '13 14h4v1h1v1h-2v2h2v-1h1v-1h1v2h-1v1h-1v1h-5v-1h-1v-4h1v-1z',\\n    '13 12h6v1h-6v-1zm6 1h1v2h-2v-1h1v-1zm-6 2h1v1h2v1h-3v-2zm0 2v1h-1v-1h1zm2 1h-1v1h-1v1h1v-1h2v1h1v-1h1v-1h-1v1h-1v-1h-1z',\\n    '17 14h1v1h-1z',\\n    '12 12h4v1h1v1h1v3h1v2h1v1h-2v-2h-1v2h-3v-1h1v-2h-1v-1h1v-1h-3v-1h2v-1h-2v-1zm2 5v1h-1v-1h1z',\\n    '15 13h1v1h-1v-1z',\\n    '16 14h3v1h-3v-1z',\\n    '13 13h1v1h1v1h-1v1h-1v1h3v-5h-3v1z',\\n    '17 12v5h-3v-1h1v-1h1v-1h-1v-1h-1v-1h3z',\\n    '17 12v1h1v3h-1v1h-2v-1h1v-1h1v-1h-1v-1h-1v-1h2z',\\n    '16 12h1v1h-1v-1zm2 2h-1v-1h1v1zm0 1v-1h1v1h-1zm-1 1h1v-1h-1v1zm0 0v1h-1v-1h1z',\\n    '14.5 13v1h1v-1h-1Zm3 3v-1h-1v1h1Z',\\n    '17.5 14v-1h-1v1h1Zm-3 1v1h1v-1h-1Z',\\n    '15.5 14h1v1h-1z',\\n    '14.5 14h-1v1h1v-1Zm4 0h-1v1h1v-1Z',\\n    '16.5 12h-1v1h1v-1Zm0 4h-1v1h1v-1Z',\\n    '14 16h4v1h-4z',\\n    '13 15h6v1h-6z',\\n    '12 14h8v1h-8z',\\n    '14 13h4v1h-4z',\\n    '15 12h2v1h-2z',\\n    '14 12h4v1h1v4h-1v1h-4v-1h-1v-4h1v-1z',\\n    '17 12h-1v2h1v-2z\\\"/><path fill-opacity=\\\".25\\\" d=\\\"M13 13h1v2h1v1h4v1h-1v1h-4v-1h-1v-4zm2 0h1v1h-1v-1z',\\n    '17 12h-4v5h4v1h3v-1h-1v-1h-1v-1h1v-1h1v-1h-3v-1z\\\"/><path fill-opacity=\\\".2\\\" d=\\\"M17 13h3v1h-1v1h-1v1h1v1h1v1h-3v-5z',\\n    '12 12h1v8h-1z',\\n    '13 13h5v1h2v2h-1v-1h-1v1h1v1h-2v1h1v1h-5v-1h1v-1h-1v-4z\\\"/><path fill-opacity=\\\".2\\\" d=\\\"M13 16h1v1h-1v-1zm4 1h-3v1h3v-1zm0 0v-1h1v1h-1z',\\n    '15.5 12h-2v1h-1v2h1v1h1v1h1v1h1v-1h1v-1h1v-1h1v-2h-1v-1h-2v1h-1v-1z\\\"/><g fill=\\\"#fff\\\"><path fill-opacity=\\\".6\\\" d=\\\"M13.5 13h1v1h-1z\\\"/><path fill-opacity=\\\".3\\\" d=\\\"M15.5 13h-1v1h-1v1h1v-1h1v-1z\\\"/></g><path fill-opacity=\\\".2\\\" d=\\\"M19.5 14h-1v1h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1h1v-1z\\\"/><path fill-opacity=\\\".1\\\" d=\\\"M19.5 13h-1v1h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1h1v-1z',\\n    '13 12h2v2h1v1h-1v1h1v2h-1v-1h-1v-1h-1v-1h-1v-2h1v-1zm3 4v-1h1v-1h-1v-1h1v-1h2v1h1v2h-1v1h-1v1h-1v-1h-1z\\\"/><g fill=\\\"#fff\\\"><path fill-opacity=\\\".6\\\" d=\\\"M13 13h1v1h-1z\\\"/><path fill-opacity=\\\".3\\\" d=\\\"M15 13h-1v1h-1v1h1v-1h1v-1z\\\"/></g><path d=\\\"M20 13h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1zm-4 3h-1v1h1v-1z\\\" fill-opacity=\\\".1\\\"/><path fill-opacity=\\\".2\\\" d=\\\"M20 14h-1v1h-1v1h-1v1h1v-1h1v-1h1v-1zm-4 3h-1v1h1v-1z',\\n    '14 16h-1v-3h6v3h-1v1h-1v2h1v1h-4v-1h1v-2h-1v-1z\\\"/><path fill-opacity=\\\".2\\\" d=\\\"M16 18h-1v1h2v-1h-1z',\\n    '15 16h-1v-3h4v3h-1v1h-2v-1z\\\"/><path fill=\\\"#fff\\\" fill-opacity=\\\".4\\\" d=\\\"M15 15h1v-2h-1v2z',\\n    '19 12h-6v1h-1v6h1v1h6v-1h1v-6h-1v-1z\\\"/><path fill=\\\"#fff\\\" d=\\\"M17 13h-2v1h-1v1h-1v2h1v1h1v1h2v-1h1v-1h1v-2h-1v-1h-1v-1z',\\n    '16 15h-1v2h2v-2h-1z',\\n    '14 13h4v4h-4z',\\n    '15 14v2h2v-2h-2z\\\"/><path fill=\\\"#fff\\\" fill-opacity=\\\".3\\\" d=\\\"M16 14h-1v1h1v1h1v-1h-1v-1z',\\n    '17 12h-2v2h-2v2h2v2h2v-2h2v-2h-2v-2zm-1 2h1v2h-2v-2h1z\\\"/><path fill-opacity=\\\".2\\\" d=\\\"M16 12h-1v1h1v-1zm3 2h-1v1h1v-1zm-6 1h1v1h-1v-1zm4 2h-1v1h1v-1z',\\n    '13 16h6v1h-6z',\\n    '16 15h2v1h-2z',\\n    '13 14h6v1h-6z',\\n    '18 12h-4v1h-1v1h6v-1h-1v-1zm-5 5h6v1h-6v-1z\\\"/><path fill-opacity=\\\".1\\\" d=\\\"M14 14h-1v3h1v-3zm5 0h-1v3h1v-3z\\\"/><path fill=\\\"#fff\\\" fill-opacity=\\\".2\\\" d=\\\"M16 12h1v1h-1v-1zm1 1v1h1v-1h-1zm-3 0h1v1h-1v-1z',\\n    '\\\"/><path d=\\\"M10 9V8h3v1h1v1h4V9h1V8h3v1h2v1h1v1h1v1h1v1h-1v1h-1v1h-1v-1h-1v-1h-1v1h-1v11H11V14h-1v-1H9v1H8v1H7v-1H6v-1H5v-1h1v-1h1v-1h1V9h2Z\\\" fill=\\\"url(#gd1)\\\"/><defs><linearGradient id=\\\"gd1\\\" gradientTransform=\\\"rotate(45 0.5 0.5)\\\"><stop class=\\\"g1\\\"/><stop offset=\\\"100%\\\" class=\\\"g2\\\"/></linearGradient></defs><g x=\\\"'\\n  ];\\n\\n  // fill empty spaces with 0\\n  uint256[5][] public designs = [\\n    [0, 0, 0, 0, 0],\\n    [1, 0, 0, 0, 0],\\n    [2, 0, 0, 0, 0],\\n    [3, 0, 0, 0, 0],\\n    [4, 5, 6, 7, 0],\\n    [8, 0, 0, 0, 0],\\n    [9, 10, 11, 0, 0],\\n    [12, 13, 14, 0, 0],\\n    [15, 16, 0, 0, 0],\\n    [17, 18, 0, 0, 0],\\n    [19, 20, 0, 0, 0],\\n    [21, 22, 0, 0, 0],\\n    [23, 24, 0, 0, 0],\\n    [25, 26, 0, 0, 0],\\n    [27, 28, 0, 0, 0],\\n    [29, 30, 0, 0, 0],\\n    [31, 32, 0, 0, 0],\\n    [33, 0, 0, 0, 0],\\n    [34, 0, 0, 0, 0],\\n    [35, 0, 0, 0, 0],\\n    [36, 0, 0, 0, 0],\\n    [37, 38, 39, 40, 41],\\n    [42, 43, 0, 0, 0],\\n    [44, 45, 0, 0, 0],\\n    [46, 47, 30, 0, 0],\\n    [48, 49, 50, 0, 0],\\n    [51, 52, 53, 0, 0],\\n    [54, 55, 56, 0, 0],\\n    [57, 58, 59, 60, 0],\\n    [61, 62, 0, 0, 0],\\n    [63, 64, 0, 0, 0],\\n    [65, 66, 0, 0, 0],\\n    [67, 68, 0, 0, 0],\\n    [69, 70, 0, 0, 0],\\n    [71, 72, 0, 0, 0],\\n    [67, 0, 0, 0, 0],\\n    [73, 74, 75, 76, 0],\\n    [77, 78, 79, 80, 81],\\n    [82, 0, 0, 0, 0],\\n    [83, 84, 85, 0, 0],\\n    [86, 0, 0, 0, 0],\\n    [87, 88, 89, 0, 0],\\n    [90, 91, 92, 0, 0],\\n    [93, 94, 95, 96, 0],\\n    [97, 98, 99, 0, 0],\\n    [100, 101, 102, 103, 0],\\n    [143, 144, 0, 0, 0],\\n    [145, 146, 0, 0, 0],\\n    [147, 0, 0, 0, 0],\\n    [148, 0, 0, 0, 0],\\n    [149, 0, 0, 0, 0],\\n    [104, 0, 0, 0, 0],\\n    [105, 106, 0, 0, 0],\\n    [107, 0, 0, 0, 0],\\n    [108, 0, 0, 0, 0],\\n    [109, 0, 0, 0, 0],\\n    [71, 110, 111, 0, 0],\\n    [112, 113, 114, 0, 0],\\n    [115, 116, 117, 0, 0],\\n    [118, 0, 0, 0, 0],\\n    [119, 0, 0, 0, 0],\\n    [120, 0, 0, 0, 0],\\n    [121, 0, 0, 0, 0],\\n    [122, 0, 0, 0, 0],\\n    [123, 124, 125, 0, 0],\\n    [126, 127, 0, 0, 0],\\n    [150, 151, 0, 0, 0],\\n    [152, 153, 0, 0, 0],\\n    [154, 155, 156, 0, 0],\\n    [128, 0, 0, 0, 0],\\n    [157, 139, 158, 159, 160],\\n    [129, 130, 131, 132, 0],\\n    [133, 134, 135, 136, 137],\\n    [138, 139, 140, 141, 142],\\n    [161, 0, 0, 0, 0]\\n  ];\\n\\n  // index matches designs array above, see purchase method for logic\\n  bool[] public fancy = [\\n    false,\\n    false,\\n    false,\\n    false,\\n    false,\\n    //\\n    false,\\n    true,\\n    true,\\n    false,\\n    false,\\n    //\\n    false,\\n    false,\\n    true,\\n    false,\\n    true,\\n    //\\n    false,\\n    false,\\n    false,\\n    false,\\n    false,\\n    //\\n    false,\\n    false,\\n    false,\\n    true,\\n    true,\\n    //\\n    false,\\n    true,\\n    true,\\n    false,\\n    false,\\n    //\\n    false,\\n    false,\\n    false,\\n    false,\\n    false,\\n    //\\n    false,\\n    true,\\n    true,\\n    false,\\n    true,\\n    //\\n    false,\\n    false,\\n    false,\\n    true,\\n    false,\\n    //\\n    true,\\n    true,\\n    false,\\n    false,\\n    true,\\n    //\\n    true,\\n    true,\\n    true,\\n    false,\\n    true,\\n    //\\n    false,\\n    false,\\n    true,\\n    true,\\n    false,\\n    //\\n    false,\\n    false,\\n    false,\\n    true,\\n    false,\\n    //\\n    false,\\n    false,\\n    false,\\n    false,\\n    false,\\n    //\\n    true,\\n    true,\\n    false,\\n    false,\\n    false // whale\\n  ];\\n\\n  constructor() {}\\n\\n  // extract 0-6 substring at spot within mega palette string\\n  function getColor(uint256 spot) private pure returns (string memory) {\\n    if (spot == 0) return '';\\n    bytes memory strBytes = bytes(COLORS);\\n    bytes memory result = new bytes(6);\\n    for (uint256 i = (spot * 6); i < ((spot + 1) * 6); i++) result[i - (spot * 6)] = strBytes[i];\\n    return string(result);\\n  }\\n\\n  function getStyles(Options memory options) private pure returns (string memory) {\\n    // prettier-ignore\\n    return string(abi.encodePacked(\\n      '.c1{fill:#', getColor(options.color1), '}',\\n      '.c2{fill:#', getColor(options.color2), '}',\\n      '.c3{fill:#', getColor(options.color3), '}',\\n      '.c4{fill:#', getColor(options.color4), '}',\\n      '.c5{fill:#', getColor(options.color5), '}',\\n      '.g1{stop-color:#', getColor(options.fill), '}',\\n      '.g2{stop-color:#', getColor(options.color1), '}'\\n    ));\\n  }\\n\\n  function getDesign(Options memory options) private view returns (string memory) {\\n    // prettier-ignore\\n    return string(abi.encodePacked(\\n      PATH_PREFIX, 'c1\\\" d=\\\"M', patterns[designs[options.design][0]], '\\\"/>',\\n      PATH_PREFIX, 'c2\\\" d=\\\"M', patterns[designs[options.design][1]], '\\\"/>',\\n      PATH_PREFIX, 'c3\\\" d=\\\"M', patterns[designs[options.design][2]], '\\\"/>',\\n      PATH_PREFIX, 'c4\\\" d=\\\"M', patterns[designs[options.design][3]], '\\\"/>',\\n      PATH_PREFIX, 'c5\\\" d=\\\"M', patterns[designs[options.design][4]], '\\\"/>'\\n    ));\\n  }\\n\\n  function getColorAttributes(Options memory options) private pure returns (string memory) {\\n    // prettier-ignore\\n    return string(abi.encodePacked(\\n      COLOR_PREFIX, getColor(options.fill), '\\\"}',\\n      COLOR_PREFIX, getColor(options.color1), '\\\"}',\\n      COLOR_PREFIX, getColor(options.color2), '\\\"}',\\n      COLOR_PREFIX, getColor(options.color3), '\\\"}',\\n      COLOR_PREFIX, getColor(options.color4), '\\\"}',\\n      COLOR_PREFIX, getColor(options.color5), '\\\"}'\\n    ));\\n  }\\n\\n  function getCost(uint256 design) external view override returns (uint256 cost) {\\n    cost = COST_BASIC;\\n    if (design == DESIGNS_MAX) cost = COST_WHALE;\\n    else if (fancy[design]) cost = COST_FANCY;\\n  }\\n\\n  function render(uint256 tokenId, Options memory options) external view override returns (string memory) {\\n    // prettier-ignore\\n    string memory art = string(\\n      abi.encodePacked(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\" viewBox=\\\"0 0 3200 3200\\\">',\\n          '<style>',\\n            getStyles(options),\\n          '</style>',\\n          '<g transform=\\\"scale(100)\\\">',\\n            '<path fill=\\\"#', getColor(options.background), '\\\" d=\\\"M0 0h32v32H0z\\\"/>',\\n            '<path fill=\\\"#', getColor(options.outline), '\\\" d=\\\"M13 7h-3v1H8v1H7v1H6v1H5v1H4v1h1v1h1v1h1v1h1v-1h1v-1h1v11h1v1h10v-1h1V14h1v1h1v1h1v-1h1v-1h1v-1h1v-1h-1v-1h-1v-1h-1V9h-1V8h-2V7h-3v1h-1v1h-4V8h-1V7Z\\\"/>',\\n            '<path fill=\\\"#', getColor(options.fill), '\\\" d=\\\"M10 8v1H8v1H7v1H6v1H5v1h1v1h1v1h1v-1h1v-1h1v1h1v11h10V14h1v-1h1v1h1v1h1v-1h1v-1h1v-1h-1v-1h-1v-1h-1V9h-2V8h-3v1h-1v1h-4V9h-1V8h-3Z\\\"/>',\\n            getDesign(options),\\n          '</g>',\\n        '</svg>'\\n      )\\n    );\\n\\n    // prettier-ignore\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{',\\n              '\\\"name\\\": \\\"T-Shirt #', Strings.toString(tokenId), '\\\",',\\n              '\\\"external_url\\\": \\\"https://tshirt.exchange/shirt/', Strings.toString(tokenId), '\\\",',\\n              '\\\"description\\\": \\\"On-chain user generated NFT-Shirts.\\\",',\\n              '\\\"attributes\\\": [',\\n                '{\\\"trait_type\\\":\\\"Design\\\",\\\"value\\\":\\\"No. ', Strings.toString(options.design + 1), '\\\"}',\\n                ',{\\\"trait_type\\\":\\\"Background\\\",\\\"value\\\":\\\"', getColor(options.background), '\\\"}',\\n                ',{\\\"trait_type\\\":\\\"Outline\\\",\\\"value\\\":\\\"', getColor(options.outline), '\\\"}',\\n                getColorAttributes(options),\\n              '],',\\n              '\\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(art)),\\n            '\\\"}'\\n          )\\n        )\\n      )\\n    );\\n\\n    return string(abi.encodePacked('data:application/json;base64,', json));\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Base64.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity 0.8.9;\\n\\nlibrary Base64 {\\n  bytes internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return '';\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"design\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color5\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITShirtRenderer.Options\",\"name\":\"options\",\"type\":\"tuple\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"design\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"design\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color5\",\"type\":\"uint256\"}],\"internalType\":\"struct ITShirtRenderer.Options\",\"name\":\"options\",\"type\":\"tuple\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"design\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color5\",\"type\":\"uint256\"}],\"internalType\":\"struct ITShirtRenderer.Options\",\"name\":\"options\",\"type\":\"tuple\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rendererAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setRendererAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TShirt", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}