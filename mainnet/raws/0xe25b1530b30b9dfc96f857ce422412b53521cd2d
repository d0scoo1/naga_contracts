{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.4.25 <0.6.0;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only contract owner can call this method\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"Owner can't be set to zero address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0), \"Address to can't be zero address\");\r\n    require(_value <= balances[msg.sender], \"Balance less than transfer value\");\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/* \u5408\u7ea6\u6682\u505c\u529f\u80fd */\r\ncontract Pausable is Ownable {\r\n  event PausePublic(bool newState);\r\n  event PauseOwnerAdmin(bool newState);\r\n\r\n  bool public pausedPublic = false;\r\n  bool public pausedOwnerAdmin = false;\r\n\r\n  address public admin;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable based on pause states.\r\n   */\r\n  modifier whenNotPaused() {\r\n    if(pausedPublic) {\r\n      if(!pausedOwnerAdmin) {\r\n        require(msg.sender == admin || msg.sender == owner, \"Only admin or owner can call with pausedPublic\");\r\n      } else {\r\n        revert(\"all paused\");\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to set new pause flags\r\n   * pausedPublic can't be false while pausedOwnerAdmin is true\r\n   * \u5f53\u7ba1\u7406\u5458\u88ab\u6682\u505c \u666e\u901a\u7528\u6237\u4e00\u5b9a\u662f\u88ab\u6682\u505c\u7684\r\n   */\r\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) public onlyOwner {\r\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true), \"PausedPublic can't be false while pausedOwnerAdmin is true\");\r\n\r\n    pausedPublic = newPausedPublic;\r\n    pausedOwnerAdmin = newPausedOwnerAdmin;\r\n\r\n    emit PausePublic(newPausedPublic);\r\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0), \"Address to can't be zero address\");\r\n    require(_value <= balances[_from], \"Balance less than transfer value\");\r\n    require(_value <= allowed[_from][msg.sender], \"Allowed balance less than transfer value\");\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract PollToken is PausableToken {\r\n    uint8  private constant _decimals = 8;\r\n    uint private constant minDuration = 300;\r\n    uint constant fourYears = 4 * 365 days;\r\n\r\n    struct Poll {\r\n        // \u521d\u59cb\u6bcf\u5206\u949f\u4ea7\u91cf\r\n        uint amountPerMinute;\r\n        // \u4e0a\u4e00\u6b21\u9886\u53d6\u65f6\u95f4\r\n        uint lastMineTime;\r\n        // \u5f53\u524d\u8870\u51cf\u9636\u6bb5 \u521d\u59cb\u4e3a 0\r\n        uint currentDecayPeriod;\r\n        // \u5df2\u9886\u53d6\u603b\u91cf\r\n        uint totalMine;\r\n        // \u77ff\u6c60\u8d26\u6237\r\n        address account;\r\n        // \u5f00\u59cb\u91ca\u653e\u65f6\u95f4\r\n        uint startTime;\r\n    }\r\n\r\n    Poll public businessPoll = Poll({\r\n        amountPerMinute: 23852740 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0\r\n    });\r\n\r\n    Poll public communityPoll = Poll({\r\n        amountPerMinute: 6815068 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0\r\n    });\r\n\r\n    Poll public techPoll = Poll({\r\n        amountPerMinute: 3407534 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0\r\n    });\r\n\r\n    /* \u8bbe\u7f6e\u77ff\u6c60\u8d26\u6237\u63a5\u53e3 */\r\n    function _setPollAccount(address account, Poll storage poll) private {\r\n        require(account != address(0), \"Poll account can't be zero address\");\r\n        poll.account = account;\r\n    }\r\n    function setBusinessAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, businessPoll);\r\n    }\r\n    function setCommunityAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, communityPoll);\r\n    }\r\n    function setTechAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, techPoll);\r\n    }\r\n    function setAllAccount(address businessAcc, address communityAcc, address techAcc) public onlyOwner {\r\n        _setPollAccount(businessAcc, businessPoll);\r\n        _setPollAccount(communityAcc, communityPoll);\r\n        _setPollAccount(techAcc, techPoll);\r\n    }\r\n\r\n    /* \u6fc0\u6d3b\u77ff\u6c60\u63a5\u53e3 */\r\n    function _activePoll(Poll storage poll) private {\r\n        require(poll.startTime == 0, \"Poll has actived\");\r\n        poll.startTime = now;\r\n    }\r\n    function activeBusinessPoll() public onlyOwner {\r\n        _activePoll(businessPoll);\r\n    }\r\n    function activeCommunityPoll() public onlyOwner {\r\n        _activePoll(communityPoll);\r\n    }\r\n    function activeTechPoll() public onlyOwner {\r\n        _activePoll(techPoll);\r\n    }\r\n\r\n    /* \u83b7\u53d6\u53ef\u63d0\u989d\u5ea6\u63a5\u53e3 */\r\n    function _getAvailablePoll(Poll memory poll) private view returns (uint) {\r\n        if (poll.startTime == 0) {\r\n            return 0;\r\n        }\r\n        uint duration = 0;\r\n        uint amount = 0;\r\n        uint curTime = now;\r\n        // \u5f53\u524d\u5904\u4e8e\u7b2c\u51e0\u4e2a\u8870\u51cf\u9636\u6bb5\r\n        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\r\n        // \u4e0a\u4e00\u6b21\u5904\u4e8e\u7b2c\u51e0\u4e2a\u8870\u51cf\u9636\u6bb5\r\n        uint lastDecayPeriod = 0;\r\n        if (poll.lastMineTime > 0) {\r\n            duration = curTime - poll.lastMineTime;\r\n            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\r\n        } else {\r\n            duration = curTime - poll.startTime;\r\n        }\r\n\r\n        if (currentDecayPeriod == lastDecayPeriod) {\r\n            // \u6ca1\u6709\u8de8\u9636\u6bb5\r\n            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\r\n        }\r\n        else {\r\n            /**\r\n            * \u8de8\u9636\u6bb5 \u5148\u8ba1\u7b97\u4e24\u5934\u7684\u91cf\r\n            * \u518d\u8ba1\u7b97\u4e2d\u95f4\u6574\u9636\u6bb5\u7684\u91cf\r\n            * \u8003\u8651\u4e86\u5305\u62ec\u5728\u7aef\u70b9\u7684\u6781\u7aef\u60c5\u51b5\r\n            * |____|____|____|____|\r\n            *   ^    ^    ^    ^\r\n            *   0    1    2   3\r\n            */\r\n            uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\r\n            uint right_duration = (curTime - poll.startTime) % fourYears;\r\n\r\n            if (left_duration != fourYears && poll.lastMineTime > 0) {\r\n                amount = amount + poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\r\n            }\r\n            amount = amount + poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\r\n            for (uint i = lastDecayPeriod + 1; i < currentDecayPeriod; i++) {\r\n                amount = amount + poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n    function getAvailableBPoll() public view returns (uint) {\r\n        return _getAvailablePoll(businessPoll);\r\n    }\r\n    function getAvailableCpoll() public view returns (uint) {\r\n        return _getAvailablePoll(communityPoll);\r\n    }\r\n    function getAvailableTpoll() public view returns (uint) {\r\n        return _getAvailablePoll(techPoll);\r\n    }\r\n\r\n    /* \u63d0\u53d6\u77ff\u4ee3\u5e01\u6c60\u63a5\u53e3 */\r\n    function _minePoll(Poll storage poll) private {\r\n        require(poll.startTime > 0, \"Poll not start\");\r\n        require(poll.account != address(0), \"businessAccount can't be zero address\");\r\n\r\n        uint duration = 0;\r\n        uint amount = 0;\r\n        uint curTime = now;\r\n        // \u5f53\u524d\u5904\u4e8e\u7b2c\u51e0\u4e2a\u8870\u51cf\u9636\u6bb5\r\n        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\r\n        // \u4e0a\u4e00\u6b21\u5904\u4e8e\u7b2c\u51e0\u4e2a\u8870\u51cf\u9636\u6bb5\r\n        uint lastDecayPeriod = 0;\r\n        if (poll.lastMineTime > 0) {\r\n            duration = curTime - poll.lastMineTime;\r\n            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\r\n        } else {\r\n            duration = curTime - poll.startTime;\r\n        }\r\n\r\n        if (currentDecayPeriod == lastDecayPeriod) {\r\n            // \u6ca1\u6709\u8de8\u9636\u6bb5\r\n            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\r\n        }\r\n        else {\r\n            uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\r\n            uint right_duration = (curTime - poll.startTime) % fourYears;\r\n\r\n            if (left_duration != fourYears && poll.lastMineTime > 0) {\r\n                amount = amount + poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\r\n            }\r\n            amount = amount + poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\r\n            for (uint i = lastDecayPeriod + 1; i < currentDecayPeriod; i++) {\r\n                amount = amount + poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n            }\r\n        }\r\n\r\n        balances[poll.account] = balances[poll.account] + amount;\r\n        poll.totalMine = poll.totalMine + amount;\r\n        poll.lastMineTime = curTime;\r\n        poll.currentDecayPeriod = currentDecayPeriod;\r\n        emit Transfer(address(0x0), poll.account, amount);\r\n    }\r\n    function mineBusinessPoll() public onlyOwner {\r\n        _minePoll(businessPoll);\r\n    }\r\n    function mineCommunityPoll() public onlyOwner {\r\n        _minePoll(communityPoll);\r\n    }\r\n    function mineTechPoll() public onlyOwner {\r\n        _minePoll(techPoll);\r\n    }\r\n}\r\n\r\ncontract BlockSeedToken is PollToken {\r\n    string  public  constant name = \"BlockSeed Token\";\r\n    string  public  constant symbol = \"BKS\";\r\n    uint8   public  constant decimals = 8;\r\n    uint    public  constant initLiquidity = 500000000 * 10 ** uint(decimals);\r\n    bool    private  changed;\r\n\r\n    modifier validDestination( address to )\r\n    {\r\n        require(to != address(0x0), \"Address to can't be zero address\");\r\n        require(to != address(this), \"Address to can't be contract address\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        // assign the admin account\r\n        admin = msg.sender;\r\n        changed = false;\r\n\r\n        totalSupply = 100000000000 * 10**uint256(decimals);\r\n        balances[msg.sender] = initLiquidity;\r\n        emit Transfer(address(0x0), msg.sender, initLiquidity);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /* \u83b7\u53d6\u4ee3\u5e01\u6d41\u901a\u603b\u91cf\u63a5\u53e3 */\r\n    function getLiquidity() public view returns (uint) {\r\n        return initLiquidity + businessPoll.totalMine + communityPoll.totalMine + techPoll.totalMine;\r\n    }\r\n\r\n    /* \u9500\u6bc1\u4ee3\u5e01 */\r\n    function burn(uint _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) public onlyOwner {\r\n        // owner can drain tokens that are sent here by mistake\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n    function changeAdmin(address newAdmin) public onlyOwner {\r\n        // owner can re-assign the admin\r\n        emit AdminTransferred(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function changeAll(address newOwner) public onlyOwner{\r\n        if (!changed){\r\n            transfer(newOwner,totalSupply);\r\n            changeAdmin(newOwner);\r\n            transferOwnership(newOwner);\r\n            changed = true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeCommunityPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineTechPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineBusinessPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techPoll\",\"outputs\":[{\"name\":\"amountPerMinute\",\"type\":\"uint256\"},{\"name\":\"lastMineTime\",\"type\":\"uint256\"},{\"name\":\"currentDecayPeriod\",\"type\":\"uint256\"},{\"name\":\"totalMine\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setBusinessAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityPoll\",\"outputs\":[{\"name\":\"amountPerMinute\",\"type\":\"uint256\"},{\"name\":\"lastMineTime\",\"type\":\"uint256\"},{\"name\":\"currentDecayPeriod\",\"type\":\"uint256\"},{\"name\":\"totalMine\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedOwnerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"businessAcc\",\"type\":\"address\"},{\"name\":\"communityAcc\",\"type\":\"address\"},{\"name\":\"techAcc\",\"type\":\"address\"}],\"name\":\"setAllAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeBusinessPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCommunityAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessPoll\",\"outputs\":[{\"name\":\"amountPerMinute\",\"type\":\"uint256\"},{\"name\":\"lastMineTime\",\"type\":\"uint256\"},{\"name\":\"currentDecayPeriod\",\"type\":\"uint256\"},{\"name\":\"totalMine\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTechAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPausedPublic\",\"type\":\"bool\"},{\"name\":\"newPausedOwnerAdmin\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activeTechPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableCpoll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableBPoll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineCommunityPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTpoll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PausePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PauseOwnerAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BlockSeedToken", "CompilerVersion": "v0.5.1+commit.c8a2cb62", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f2c65d96a1f54d5eed0a51118a5c09ae708c154876c731f95eb050725e92ed01"}]}