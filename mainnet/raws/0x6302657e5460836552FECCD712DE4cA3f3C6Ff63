{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IndexLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport \\\"./libraries/BP.sol\\\";\\nimport \\\"./libraries/IndexLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IvToken.sol\\\";\\nimport \\\"./interfaces/IOrderer.sol\\\";\\nimport \\\"./interfaces/IIndexLogic.sol\\\";\\nimport \\\"./interfaces/IvTokenFactory.sol\\\";\\nimport \\\"./interfaces/IPhuturePriceOracle.sol\\\";\\n\\nimport \\\"./PhutureIndex.sol\\\";\\n\\n/// @title Index logic\\n/// @notice Contains common logic for index minting and burning\\ncontract IndexLogic is PhutureIndex, IIndexLogic {\\n    using FullMath for uint;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Asset role\\n    bytes32 internal immutable ASSET_ROLE;\\n    /// @notice Role granted for asset which should be skipped during burning\\n    bytes32 internal immutable SKIPPED_ASSET_ROLE;\\n\\n    constructor() {\\n        ASSET_ROLE = keccak256(\\\"ASSET_ROLE\\\");\\n        SKIPPED_ASSET_ROLE = keccak256(\\\"SKIPPED_ASSET_ROLE\\\");\\n    }\\n\\n    /// @notice Mints index to `_recipient` address\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external override {\\n        address feePool = IIndexRegistry(registry).feePool();\\n        _chargeAUMFee(feePool);\\n\\n        IPhuturePriceOracle oracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\\n\\n        uint lastAssetBalanceInBase;\\n        uint minAmountInBase = type(uint).max;\\n\\n        uint assetsCount = assets.length();\\n        for (uint i; i < assetsCount; ) {\\n            address asset = assets.at(i);\\n            require(IAccessControl(registry).hasRole(ASSET_ROLE, asset), \\\"Index: INVALID_ASSET\\\");\\n\\n            uint8 weight = weightOf[asset];\\n            if (weight != 0) {\\n                uint assetPerBaseInUQ = oracle.refreshedAssetPerBaseInUQ(asset);\\n                // Q_b * w_i * p_i = Q_i\\n                // Q_b = Q_i / (w_i * p_i)\\n                IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).createdVTokenOf(asset));\\n                uint amountInAsset = IERC20(asset).balanceOf(address(vToken)) - vToken.lastAssetBalance();\\n                uint _minAmountInBase = amountInAsset.mulDiv(\\n                    FixedPoint112.Q112 * IndexLibrary.MAX_WEIGHT,\\n                    assetPerBaseInUQ * weight\\n                );\\n                if (_minAmountInBase < minAmountInBase) {\\n                    minAmountInBase = _minAmountInBase;\\n                }\\n\\n                uint lastBalanceInAsset = vToken.lastAssetBalanceOf(address(this));\\n                vToken.mint();\\n\\n                lastAssetBalanceInBase += lastBalanceInAsset.mulDiv(FixedPoint112.Q112, assetPerBaseInUQ);\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        uint inactiveAssetsCount = inactiveAssets.length();\\n        for (uint i; i < inactiveAssetsCount; ) {\\n            address inactiveAsset = inactiveAssets.at(i);\\n            if (!IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, inactiveAsset)) {\\n                lastAssetBalanceInBase += IvToken(IvTokenFactory(vTokenFactory).createdVTokenOf(inactiveAsset))\\n                    .lastAssetBalanceOf(address(this))\\n                    .mulDiv(FixedPoint112.Q112, oracle.refreshedAssetPerBaseInUQ(inactiveAsset));\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        assert(minAmountInBase != type(uint).max);\\n\\n        uint value;\\n\\n        uint totalSupply = totalSupply();\\n        if (totalSupply != 0) {\\n            require(lastAssetBalanceInBase != 0, \\\"Index: INSUFFICIENT_AMOUNT\\\");\\n\\n            value =\\n                (oracle.convertToIndex(minAmountInBase, decimals()) * totalSupply) /\\n                oracle.convertToIndex(lastAssetBalanceInBase, decimals());\\n        } else {\\n            value = oracle.convertToIndex(minAmountInBase, decimals()) - IndexLibrary.INITIAL_QUANTITY;\\n            _mint(address(0xdead), IndexLibrary.INITIAL_QUANTITY);\\n        }\\n\\n        uint fee = (value * IFeePool(feePool).mintingFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\\n        if (fee != 0) {\\n            _mint(feePool, fee);\\n            value -= fee;\\n        }\\n\\n        _mint(_recipient, value);\\n    }\\n\\n    /// @notice Burns index and transfers assets to `_recipient` address\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external override {\\n        uint value = balanceOf(address(this));\\n        require(value != 0, \\\"Index: INSUFFICIENT_AMOUNT\\\");\\n\\n        bool containsBlacklistedAssets;\\n\\n        uint assetsCount = assets.length();\\n        for (uint i; i < assetsCount; ) {\\n            if (!IAccessControl(registry).hasRole(ASSET_ROLE, assets.at(i))) {\\n                containsBlacklistedAssets = true;\\n                break;\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        if (!containsBlacklistedAssets) {\\n            address feePool = IIndexRegistry(registry).feePool();\\n\\n            uint fee = (value * IFeePool(feePool).burningFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\\n\\n            if (fee != 0) {\\n                // AUM charged in _transfer method\\n                _transfer(address(this), feePool, fee);\\n                value -= fee;\\n            } else {\\n                _chargeAUMFee(feePool);\\n            }\\n        }\\n\\n        IOrderer orderer = IOrderer(IIndexRegistry(registry).orderer());\\n        uint lastOrderId = orderer.lastOrderIdOf(address(this));\\n\\n        uint totalCount = inactiveAssets.length() + assetsCount;\\n        for (uint i; i < totalCount; ++i) {\\n            address asset = i < assetsCount ? assets.at(i) : inactiveAssets.at(i - assetsCount);\\n\\n            if (containsBlacklistedAssets && IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, asset)) {\\n                continue;\\n            }\\n\\n            IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).vTokenOf(asset));\\n            uint indexBalance = vToken.balanceOf(address(this));\\n\\n            uint totalSupply = totalSupply();\\n\\n            uint accountBalance = (value * indexBalance) / totalSupply;\\n            if (accountBalance != 0) {\\n                // calculate index value in vault to be burned\\n                vToken.transfer(address(vToken), accountBalance);\\n                vToken.burn(_recipient);\\n                if (lastOrderId != 0) {\\n                    // checks that asset is active\\n                    if (i < assetsCount) {\\n                        orderer.reduceOrderAsset(asset, totalSupply - value, totalSupply);\\n                    } else {\\n                        orderer.updateOrderDetails(asset, indexBalance - accountBalance);\\n                    }\\n                }\\n            }\\n        }\\n\\n        _burn(address(this), value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title Base point library\\n/// @notice Contains constant used to prevent underflow of math operations\\nlibrary BP {\\n    /// @notice Base point number\\n    /// @dev Used to prevent underflow of math operations\\n    uint16 constant DECIMAL_FACTOR = 10_000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/IndexLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint112.sol\\\";\\n\\n/// @title Index library\\n/// @notice Provides various utilities for indexes\\nlibrary IndexLibrary {\\n    using FullMath for uint;\\n\\n    /// @notice Initial index quantity to mint\\n    uint constant INITIAL_QUANTITY = 10000;\\n\\n    /// @notice Total assets weight within an index\\n    uint8 constant MAX_WEIGHT = type(uint8).max;\\n\\n    /// @notice Returns amount of asset equivalent to the given parameters\\n    /// @param _assetPerBaseInUQ Asset per base price in UQ\\n    /// @param _weight Weight of the given asset\\n    /// @param _amountInBase Total assets amount in base\\n    /// @return Amount of asset\\n    function amountInAsset(\\n        uint _assetPerBaseInUQ,\\n        uint8 _weight,\\n        uint _amountInBase\\n    ) internal pure returns (uint) {\\n        require(_assetPerBaseInUQ != 0, \\\"IndexLibrary: ORACLE\\\");\\n\\n        return ((_amountInBase * _weight) / MAX_WEIGHT).mulDiv(_assetPerBaseInUQ, FixedPoint112.Q112);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Vault token interface\\n/// @notice Contains logic for index's asset management\\ninterface IvToken {\\n    struct AssetData {\\n        uint maxShares;\\n        uint amountInAsset;\\n    }\\n\\n    event UpdateDeposit(address indexed account, uint depositedAmount);\\n    event SetVaultController(address vaultController);\\n    event VTokenTransfer(address indexed from, address indexed to, uint amount);\\n\\n    /// @notice Initializes vToken with the given parameters\\n    /// @param _asset Asset that will be stored\\n    /// @param _registry Index registry address\\n    function initialize(address _asset, address _registry) external;\\n\\n    /// @notice Sets vault controller for the vault\\n    /// @param _vaultController Vault controller to set\\n    function setController(address _vaultController) external;\\n\\n    /// @notice Updates reserve to expected deposit target\\n    function deposit() external;\\n\\n    /// @notice Withdraws all deposited amount\\n    function withdraw() external;\\n\\n    /// @notice Transfers shares between given accounts\\n    /// @param _from Account to transfer shares from\\n    /// @param _to Account to transfer shares to\\n    /// @param _shares Amount of shares to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _shares\\n    ) external;\\n\\n    /// @notice Transfers asset to the given recipient\\n    /// @dev Method is restricted to orderer\\n    /// @param _recipient Recipient address\\n    /// @param _amount Amount to transfer\\n    function transferAsset(address _recipient, uint _amount) external;\\n\\n    /// @notice Mints shares for the current sender\\n    /// @return shares Amount of minted shares\\n    function mint() external returns (uint shares);\\n\\n    /// @notice Burns shares for the given recipient and returns assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return amount Amount of sent assets\\n    function burn(address _recipient) external returns (uint amount);\\n\\n    /// @notice Transfers shares from the sender to the given recipient\\n    /// @param _recipient Account to transfer shares to\\n    /// @param _amount Amount of shares to transfer\\n    function transfer(address _recipient, uint _amount) external;\\n\\n    /// @notice Manually synchronizes shares balances\\n    function sync() external;\\n\\n    /// @notice Mints shares for the given recipient\\n    /// @param _recipient Recipient to mint shares for\\n    /// @return Returns minted shares amount\\n    function mintFor(address _recipient) external returns (uint);\\n\\n    /// @notice Burns shares and sends assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return Returns amount of sent assets\\n    function burnFor(address _recipient) external returns (uint);\\n\\n    /// @notice Virtual supply amount: current balance + expected to be withdrawn using vault controller\\n    /// @return Returns virtual supply amount\\n    function virtualTotalAssetSupply() external view returns (uint);\\n\\n    /// @notice Total supply amount: current balance + deposited using vault controller\\n    /// @return Returns total supply amount\\n    function totalAssetSupply() external view returns (uint);\\n\\n    /// @notice Amount deposited using vault controller\\n    /// @return Returns amount deposited using vault controller\\n    function deposited() external view returns (uint);\\n\\n    /// @notice Returns mintable amount of shares for given asset's amount\\n    /// @param _amount Amount of assets to mint shares for\\n    /// @return Returns amount of shares available for minting\\n    function mintableShares(uint _amount) external view returns (uint);\\n\\n    /// @notice Returns amount of assets for the given account with the given shares amount\\n    /// @return Amount of assets for the given account with the given shares amount\\n    function assetDataOf(address _account, uint _shares) external view returns (AssetData memory);\\n\\n    /// @notice Returns amount of assets for the given shares amount\\n    /// @param _shares Amount of shares\\n    /// @return Amount of assets\\n    function assetBalanceForShares(uint _shares) external view returns (uint);\\n\\n    /// @notice Asset balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns asset balance of the given address\\n    function assetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance for the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns last asset balance for the given address\\n    function lastAssetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance\\n    /// @return Returns last asset balance\\n    function lastAssetBalance() external view returns (uint);\\n\\n    /// @notice Total shares supply\\n    /// @return Returns total shares supply\\n    function totalSupply() external view returns (uint);\\n\\n    /// @notice Shares balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns shares balance of the given address\\n    function balanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Returns the change in shares for a given amount of an asset\\n    /// @param _account Account to calculate shares for\\n    /// @param _amountInAsset Amount of asset to calculate shares\\n    /// @return newShares New shares value\\n    /// @return oldShares Old shares value\\n    function shareChange(address _account, uint _amountInAsset) external view returns (uint newShares, uint oldShares);\\n\\n    /// @notice Vault controller address\\n    /// @return Returns vault controller address\\n    function vaultController() external view returns (address);\\n\\n    /// @notice Stored asset address\\n    /// @return Returns stored asset address\\n    function asset() external view returns (address);\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice Percentage deposited using vault controller\\n    /// @return Returns percentage deposited using vault controller\\n    function currentDepositedPercentageInBP() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IvToken.sol\\\";\\n\\n/// @title Orderer interface\\n/// @notice Describes methods for reweigh execution, order creation and execution\\ninterface IOrderer {\\n    struct Order {\\n        uint creationTimestamp;\\n        OrderAsset[] assets;\\n    }\\n\\n    struct OrderAsset {\\n        address asset;\\n        OrderSide side;\\n        uint shares;\\n    }\\n\\n    struct InternalSwap {\\n        address sellAccount;\\n        address buyAccount;\\n        uint maxSellShares;\\n        address[] buyPath;\\n    }\\n\\n    struct ExternalSwap {\\n        address factory;\\n        address account;\\n        uint maxSellShares;\\n        uint minSwapOutputAmount;\\n        address[] buyPath;\\n    }\\n\\n    enum OrderSide {\\n        Sell,\\n        Buy\\n    }\\n\\n    event PlaceOrder(address creator, uint id);\\n    event UpdateOrder(uint id, address asset, uint share, bool isSellSide);\\n    event CompleteOrder(uint id, address sellAsset, uint soldShares, address buyAsset, uint boughtShares);\\n\\n    /// @notice Initializes orderer with the given params\\n    /// @param _registry Index registry address\\n    /// @param _orderLifetime Order lifetime in which it stays valid\\n    /// @param _maxAllowedPriceImpactInBP Max allowed exchange price impact\\n    function initialize(\\n        address _registry,\\n        uint64 _orderLifetime,\\n        uint16 _maxAllowedPriceImpactInBP\\n    ) external;\\n\\n    /// @notice Sets max allowed exchange price impact\\n    /// @param _maxAllowedPriceImpactInBP Max allowed exchange price impact\\n    function setMaxAllowedPriceImpactInBP(uint16 _maxAllowedPriceImpactInBP) external;\\n\\n    /// @notice Sets order lifetime in which it stays valid\\n    /// @param _orderLifetime Order lifetime in which it stays valid\\n    function setOrderLifetime(uint64 _orderLifetime) external;\\n\\n    /// @notice Places order to orderer queue and returns order id\\n    /// @return Order id of the placed order\\n    function placeOrder() external returns (uint);\\n\\n    /// @notice Fulfills specified order with order details\\n    /// @param _orderId Order id to fulfill\\n    /// @param _asset Asset address to be exchanged\\n    /// @param _shares Amount of asset to be exchanged\\n    /// @param _side Order side: buy or sell\\n    function addOrderDetails(\\n        uint _orderId,\\n        address _asset,\\n        uint _shares,\\n        OrderSide _side\\n    ) external;\\n\\n    /// @notice Updates shares for order\\n    /// @param _asset Asset address\\n    /// @param _shares New amount of shares\\n    function updateOrderDetails(address _asset, uint _shares) external;\\n\\n    /// @notice Updates asset amount for the latest order placed by the sender\\n    /// @param _asset Asset to change amount for\\n    /// @param _newTotalSupply New amount value\\n    /// @param _oldTotalSupply Old amount value\\n    function reduceOrderAsset(\\n        address _asset,\\n        uint _newTotalSupply,\\n        uint _oldTotalSupply\\n    ) external;\\n\\n    /// @notice Reweighs the given index\\n    /// @param _index Index address to call reweight for\\n    function reweight(address _index) external;\\n\\n    /// @notice Swap shares between given indexes\\n    /// @param _info Swap info objects with exchange details\\n    function internalSwap(InternalSwap calldata _info) external;\\n\\n    /// @notice Swap shares using DEX\\n    /// @param _info Swap info objects with exchange details\\n    function externalSwap(ExternalSwap calldata _info) external;\\n\\n    /// @notice Max allowed exchange price impact\\n    /// @return Returns max allowed exchange price impact\\n    function maxAllowedPriceImpactInBP() external view returns (uint16);\\n\\n    /// @notice Order lifetime in which it stays valid\\n    /// @return Returns order lifetime in which it stays valid\\n    function orderLifetime() external view returns (uint64);\\n\\n    /// @notice Returns last order of the given account\\n    /// @param _account Account to get last order for\\n    /// @return order Last order of the given account\\n    function orderOf(address _account) external view returns (Order memory order);\\n\\n    /// @notice Returns last order id of the given account\\n    /// @param _account Account to get last order for\\n    /// @return Last order id of the given account\\n    function lastOrderIdOf(address _account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index logic interface\\n/// @notice Contains mint and burn logic\\ninterface IIndexLogic {\\n    /// @notice Index minting\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external;\\n\\n    /// @notice Index burning\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title vToken factory interface\\n/// @notice Contains vToken creation logic\\ninterface IvTokenFactory {\\n    event VTokenCreated(address vToken, address asset);\\n\\n    /// @notice Initialize vToken factory with the given params\\n    /// @param _registry Index registry address\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function initialize(address _registry, address _vTokenImpl) external;\\n\\n    /// @notice Upgrades beacon implementation\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function upgradeBeaconTo(address _vTokenImpl) external;\\n\\n    /// @notice Creates vToken for the given asset\\n    /// @param _asset Asset to create vToken for\\n    function createVToken(address _asset) external;\\n\\n    /// @notice Creates and returns or returns address of previously created vToken for the given asset\\n    /// @param _asset Asset to create or return vToken for\\n    function createdVTokenOf(address _asset) external returns (address);\\n\\n    /// @notice Returns beacon address\\n    /// @return Beacon address\\n    function beacon() external view returns (address);\\n\\n    /// @notice Returns vToken for the given asset\\n    /// @param _asset Asset to retrieve vToken for\\n    /// @return vToken for the given asset\\n    function vTokenOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhuturePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\n/// @title Phuture price oracle interface\\n/// @notice Aggregates all price oracles and works with them through IPriceOracle interface\\ninterface IPhuturePriceOracle is IPriceOracle {\\n    /// @notice Initializes price oracle\\n    /// @param _registry Index registry address\\n    /// @param _base Base asset\\n    function initialize(address _registry, address _base) external;\\n\\n    /// @notice Assigns given oracle to specified asset. Then oracle will be used to manage asset price\\n    /// @param _asset Asset to register\\n    /// @param _oracle Oracle to assign\\n    function setOracleOf(address _asset, address _oracle) external;\\n\\n    /// @notice Removes oracle of specified asset\\n    /// @param _asset Asset to remove oracle from\\n    function removeOracleOf(address _asset) external;\\n\\n    /// @notice Converts to index amount\\n    /// @param _baseAmount Amount in base\\n    /// @param _indexDecimals Index's decimals\\n    /// @return Asset per base in UQ with index decimals\\n    function convertToIndex(uint _baseAmount, uint8 _indexDecimals) external view returns (uint);\\n\\n    /// @notice Checks if the given asset has oracle assigned\\n    /// @param _asset Asset to check\\n    /// @return Returns boolean flag defining if the given asset has oracle assigned\\n    function containsOracleOf(address _asset) external view returns (bool);\\n\\n    /// @notice Price oracle assigned to the given `_asset`\\n    /// @param _asset Asset to obtain price oracle for\\n    /// @return Returns price oracle assigned to the `_asset`\\n    function priceOracleOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/PhutureIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./libraries/AUMCalculationLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/INameRegistry.sol\\\";\\nimport \\\"./interfaces/IIndexRegistry.sol\\\";\\n\\nimport \\\"./IndexLayout.sol\\\";\\n\\n/// @title Phuture index\\n/// @notice Contains AUM fee's logic, overrides name and symbol\\nabstract contract PhutureIndex is IndexLayout, ERC20Permit, ERC165 {\\n    constructor() ERC20Permit(\\\"PhutureIndex\\\") ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    /// @notice Index symbol\\n    /// @return Returns index symbol\\n    function symbol() public view override returns (string memory) {\\n        return INameRegistry(registry).symbolOfIndex(address(this));\\n    }\\n\\n    /// @notice Index name\\n    /// @return Returns index name\\n    function name() public view override returns (string memory) {\\n        return INameRegistry(registry).nameOfIndex(address(this));\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IIndexLayout).interfaceId ||\\n            _interfaceId == type(IERC20Permit).interfaceId ||\\n            _interfaceId == type(IERC20).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Overrides _transfer to include AUM fee logic\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint _value\\n    ) internal override {\\n        _chargeAUMFee(IIndexRegistry(registry).feePool());\\n        super._transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Calculates and mints AUM fee\\n    /// @param _feePool Fee pool address\\n    function _chargeAUMFee(address _feePool) internal {\\n        uint timePassed = uint96(block.timestamp) - lastTransferTime;\\n        if (timePassed != 0) {\\n            address _factory = factory;\\n            uint fee = ((totalSupply() - balanceOf(_factory)) *\\n                (AUMCalculationLibrary.rpow(\\n                    IFeePool(_feePool).AUMScaledPerSecondsRateOf(address(this)),\\n                    timePassed,\\n                    AUMCalculationLibrary.RATE_SCALE_BASE\\n                ) - AUMCalculationLibrary.RATE_SCALE_BASE)) / AUMCalculationLibrary.RATE_SCALE_BASE;\\n\\n            if (fee != 0) {\\n                super._mint(_factory, fee);\\n                lastTransferTime = uint96(block.timestamp);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (~denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title FixedPoint112\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint112 {\\n    uint8 internal constant RESOLUTION = 112;\\n    /// @dev 2**112\\n    uint256 internal constant Q112 = 0x10000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Price oracle interface\\n/// @notice Returns price of single asset in relation to base\\ninterface IPriceOracle {\\n    /// @notice Updates and returns asset per base\\n    /// @return Asset per base in UQ\\n    function refreshedAssetPerBaseInUQ(address _asset) external returns (uint);\\n\\n    /// @notice Returns last asset per base\\n    /// @return Asset per base in UQ\\n    function lastAssetPerBaseInUQ(address _asset) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AUMCalculationLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title AUM fee calculation library\\n/// @notice More details https://github.com/enzymefinance/protocol/blob/b671b3dfea92596dd2e962c73b233dcdb22bf753/contracts/release/utils/MakerDaoMath.sol\\n/// @dev Taken from https://github.com/enzymefinance/protocol\\nlibrary AUMCalculationLibrary {\\n    /// @dev A constant used for AUM fee calculation to prevent underflow\\n    uint constant RATE_SCALE_BASE = 1e27;\\n\\n    /// @notice Power function for AUM fee calculation\\n    /// @param _x Base number\\n    /// @param _n Exponent number\\n    /// @param _base Base number multiplier\\n    /// @return z_ Returns value of `_x` raised to power of `_n`\\n    function rpow(\\n        uint _x,\\n        uint _n,\\n        uint _base\\n    ) internal pure returns (uint z_) {\\n        assembly {\\n            switch _x\\n            case 0 {\\n                switch _n\\n                case 0 {\\n                    z_ := _base\\n                }\\n                default {\\n                    z_ := 0\\n                }\\n            }\\n            default {\\n                switch mod(_n, 2)\\n                case 0 {\\n                    z_ := _base\\n                }\\n                default {\\n                    z_ := _x\\n                }\\n                let half := div(_base, 2)\\n                for {\\n                    _n := div(_n, 2)\\n                } _n {\\n                    _n := div(_n, 2)\\n                } {\\n                    let xx := mul(_x, _x)\\n                    if iszero(eq(div(xx, _x), _x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    _x := div(xxRound, _base)\\n                    if mod(_n, 2) {\\n                        let zx := mul(z_, _x)\\n                        if and(iszero(iszero(_x)), iszero(eq(div(zx, _x), z_))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z_ := div(zxRound, _base)\\n                    }\\n                }\\n            }\\n        }\\n\\n        return z_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Fee pool interface\\n/// @notice Provides methods for fee management\\ninterface IFeePool {\\n    struct MintBurnInfo {\\n        address recipient;\\n        uint share;\\n    }\\n\\n    event Mint(address indexed index, address indexed recipient, uint share);\\n    event Burn(address indexed index, address indexed recipient, uint share);\\n    event SetMintingFeeInBP(address indexed account, address indexed index, uint16 mintingFeeInBP);\\n    event SetBurningFeeInBP(address indexed account, address indexed index, uint16 burningFeeInPB);\\n    event SetAUMScaledPerSecondsRate(address indexed account, address indexed index, uint AUMScaledPerSecondsRate);\\n\\n    event Withdraw(address indexed index, address indexed recipient, uint amount);\\n\\n    /// @notice Initializes FeePool with the given params\\n    /// @param _registry Index registry address\\n    function initialize(address _registry) external;\\n\\n    /// @notice Initializes index with provided fees and makes initial mint\\n    /// @param _index Index to initialize\\n    /// @param _mintingFeeInBP Minting fee to initialize with\\n    /// @param _burningFeeInBP Burning fee to initialize with\\n    /// @param _AUMScaledPerSecondsRate Aum scaled per second rate to initialize with\\n    /// @param _mintInfo Mint info object array containing mint recipient and amount for initial mint\\n    function initializeIndex(\\n        address _index,\\n        uint16 _mintingFeeInBP,\\n        uint16 _burningFeeInBP,\\n        uint _AUMScaledPerSecondsRate,\\n        MintBurnInfo[] calldata _mintInfo\\n    ) external;\\n\\n    /// @notice Mints fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object containing mint recipient and amount\\n    function mint(address _index, MintBurnInfo calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object containing burn recipient and amount\\n    function burn(address _index, MintBurnInfo calldata _burnInfo) external;\\n\\n    /// @notice Mints fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object array containing mint recipients and amounts\\n    function mintMultiple(address _index, MintBurnInfo[] calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object array containing burn recipients and amounts\\n    function burnMultiple(address _index, MintBurnInfo[] calldata _burnInfo) external;\\n\\n    /// @notice Sets index minting fee in base point format\\n    /// @param _index Index to set minting fee for\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setMintingFeeInBP(address _index, uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets index burning fee in base point format\\n    /// @param _index Index to set burning fee for\\n    /// @param _burningFeeInBP New burning fee value\\n    function setBurningFeeInBP(address _index, uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets AUM scaled per seconds rate that will be used for fee calculation\\n    /// @param _index Index to set AUM scaled per seconds rate for\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setAUMScaledPerSecondsRate(address _index, uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraws sender fees from the given index\\n    /// @param _index Index to withdraw fees from\\n    function withdraw(address _index) external;\\n\\n    /// @notice Withdraws platform fees from the given index to specified address\\n    /// @param _index Index to withdraw fees from\\n    /// @param _recipient Recipient to send fees to\\n    function withdrawPlatformFeeOf(address _index, address _recipient) external;\\n\\n    /// @notice Total shares in the given index\\n    /// @return Returns total shares in the given index\\n    function totalSharesOf(address _index) external view returns (uint);\\n\\n    /// @notice Shares of specified recipient in the given index\\n    /// @return Returns shares of specified recipient in the given index\\n    function shareOf(address _index, address _account) external view returns (uint);\\n\\n    /// @notice Minting fee in base point format\\n    /// @return Returns minting fee in base point (BP) format\\n    function mintingFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice Burning fee in base point format\\n    /// @return Returns burning fee in base point (BP) format\\n    function burningFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    /// @return Returns AUM scaled per seconds rate\\n    function AUMScaledPerSecondsRateOf(address _index) external view returns (uint);\\n\\n    /// @notice Returns withdrawable amount for specified account from given index\\n    /// @param _index Index to check withdrawable amount\\n    /// @param _account Recipient to check withdrawable amount for\\n    function withdrawableAmountOf(address _index, address _account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INameRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Name registry interface\\n/// @notice Providing information about index names and symbols\\ninterface INameRegistry {\\n    event SetName(address index, string name);\\n    event SetSymbol(address index, string name);\\n\\n    /// @notice Sets name of the given index\\n    /// @param _index Index address\\n    /// @param _name New index name\\n    function setIndexName(address _index, string calldata _name) external;\\n\\n    /// @notice Sets symbol for the given index\\n    /// @param _index Index address\\n    /// @param _symbol New index symbol\\n    function setIndexSymbol(address _index, string calldata _symbol) external;\\n\\n    /// @notice Returns index address by name\\n    /// @param _name Index name to look for\\n    /// @return Index address\\n    function indexOfName(string calldata _name) external view returns (address);\\n\\n    /// @notice Returns index address by symbol\\n    /// @param _symbol Index symbol to look for\\n    /// @return Index address\\n    function indexOfSymbol(string calldata _symbol) external view returns (address);\\n\\n    /// @notice Returns name of the given index\\n    /// @param _index Index address\\n    /// @return Index name\\n    function nameOfIndex(address _index) external view returns (string memory);\\n\\n    /// @notice Returns symbol of the given index\\n    /// @param _index Index address\\n    /// @return Index symbol\\n    function symbolOfIndex(address _index) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexFactory.sol\\\";\\n\\n/// @title Index registry interface\\n/// @notice Contains core components, addresses and asset market capitalizations\\ninterface IIndexRegistry {\\n    event SetIndexLogic(address indexed account, address indexLogic);\\n    event SetMaxComponents(address indexed account, uint maxComponents);\\n    event UpdateAsset(address indexed asset, uint marketCap);\\n    event SetOrderer(address indexed account, address orderer);\\n    event SetFeePool(address indexed account, address feePool);\\n    event SetPriceOracle(address indexed account, address priceOracle);\\n\\n    /// @notice Initializes IndexRegistry with the given params\\n    /// @param _indexLogic Index logic address\\n    /// @param _maxComponents Maximum assets for an index\\n    function initialize(address _indexLogic, uint _maxComponents) external;\\n\\n    /// @notice Sets maximum assets for an index\\n    /// @param _maxComponents Maximum assets for an index\\n    function setMaxComponents(uint _maxComponents) external;\\n\\n    /// @notice Index logic address\\n    /// @return Returns index logic address\\n    function indexLogic() external returns (address);\\n\\n    /// @notice Sets index logic address\\n    /// @param _indexLogic Index logic address\\n    function setIndexLogic(address _indexLogic) external;\\n\\n    /// @notice Sets adminRole as role's admin role.\\n    /// @param _role Role\\n    /// @param _adminRole AdminRole of given role\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /// @notice Registers new index\\n    /// @param _index Index address\\n    /// @param _nameDetails Name details (name and symbol) for provided index\\n    function registerIndex(address _index, IIndexFactory.NameDetails calldata _nameDetails) external;\\n\\n    /// @notice Registers asset in the system, updates it's market capitalization and assigns required roles\\n    /// @param _asset Asset to register\\n    /// @param _marketCap It's current market capitalization\\n    function addAsset(address _asset, uint _marketCap) external;\\n\\n    /// @notice Removes assets from the system\\n    /// @param _asset Asset to remove\\n    function removeAsset(address _asset) external;\\n\\n    /// @notice Updates market capitalization for the given asset\\n    /// @param _asset Asset address to update market capitalization for\\n    /// @param _marketCap Market capitalization value\\n    function updateAssetMarketCap(address _asset, uint _marketCap) external;\\n\\n    /// @notice Sets price oracle address\\n    /// @param _priceOracle Price oracle address\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    /// @notice Sets orderer address\\n    /// @param _orderer Orderer address\\n    function setOrderer(address _orderer) external;\\n\\n    /// @notice Sets fee pool address\\n    /// @param _feePool Fee pool address\\n    function setFeePool(address _feePool) external;\\n\\n    /// @notice Maximum assets for an index\\n    /// @return Returns maximum assets for an index\\n    function maxComponents() external view returns (uint);\\n\\n    /// @notice Market capitalization of provided asset\\n    /// @return _asset Returns market capitalization of provided asset\\n    function marketCapOf(address _asset) external view returns (uint);\\n\\n    /// @notice Returns total market capitalization of the given assets\\n    /// @param _assets Assets array to calculate market capitalization of\\n    /// @return _marketCaps Corresponding capitalizations of the given asset\\n    /// @return _totalMarketCap Total market capitalization of the given assets\\n    function marketCapsOf(address[] calldata _assets)\\n        external\\n        view\\n        returns (uint[] memory _marketCaps, uint _totalMarketCap);\\n\\n    /// @notice Total market capitalization of all registered assets\\n    /// @return Returns total market capitalization of all registered assets\\n    function totalMarketCap() external view returns (uint);\\n\\n    /// @notice Price oracle address\\n    /// @return Returns price oracle address\\n    function priceOracle() external view returns (address);\\n\\n    /// @notice Orderer address\\n    /// @return Returns orderer address\\n    function orderer() external view returns (address);\\n\\n    /// @notice Fee pool address\\n    /// @return Returns fee pool address\\n    function feePool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/IndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IIndexLayout.sol\\\";\\n\\n/// @title Index layout\\n/// @notice Contains storage layout of index\\nabstract contract IndexLayout is IIndexLayout {\\n    /// @inheritdoc IIndexLayout\\n    address public override factory;\\n    /// @inheritdoc IIndexLayout\\n    address public override vTokenFactory;\\n    /// @inheritdoc IIndexLayout\\n    address public override registry;\\n\\n    /// @notice Timestamp of last AUM fee charge\\n    uint96 internal lastTransferTime;\\n\\n    /// @notice Set with asset addresses\\n    EnumerableSet.AddressSet internal assets;\\n    /// @notice Set with previously used asset addresses\\n    EnumerableSet.AddressSet internal inactiveAssets;\\n    /// @notice Map of assets and their corresponding weights in index\\n    mapping(address => uint8) internal weightOf;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index factory interface\\n/// @notice Contains logic for initial fee management for indexes which will be created by this factory\\ninterface IIndexFactory {\\n    struct NameDetails {\\n        string name;\\n        string symbol;\\n    }\\n\\n    event SetVTokenFactory(address vTokenFactory);\\n    event SetDefaultMintingFeeInBP(address indexed account, uint16 mintingFeeInBP);\\n    event SetDefaultBurningFeeInBP(address indexed account, uint16 burningFeeInBP);\\n    event SetDefaultAUMScaledPerSecondsRate(address indexed account, uint AUMScaledPerSecondsRate);\\n\\n    /// @notice Sets default index minting fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setDefaultMintingFeeInBP(uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets default index burning fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _burningFeeInBP New burning fee value\\n    function setDefaultBurningFeeInBP(uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets reweighting logic address\\n    /// @param _reweightingLogic Reweighting logic address\\n    function setReweightingLogic(address _reweightingLogic) external;\\n\\n    /// @notice Sets default AUM scaled per seconds rate that will be used for fee calculation\\n    /**\\n        @dev Will be set in FeePool on index creation.\\n        Effective management fee rate (annual, in percent, after dilution) is calculated by the given formula:\\n        fee = (rpow(scaledPerSecondRate, numberOfSeconds, 10*27) - 10**27) * totalSupply / 10**27, where:\\n\\n        totalSupply - total index supply;\\n        numberOfSeconds - delta time for calculation period;\\n        scaledPerSecondRate - scaled rate, calculated off chain by the given formula:\\n\\n        scaledPerSecondRate = ((1 + k) ** (1 / 365 days)) * AUMCalculationLibrary.RATE_SCALE_BASE, where:\\n        k = (aumFeeInBP / BP) / (1 - aumFeeInBP / BP);\\n\\n        Note: rpow and RATE_SCALE_BASE are provided by AUMCalculationLibrary\\n        More info: https://docs.enzyme.finance/fee-formulas/management-fee\\n\\n        After value calculated off chain, scaledPerSecondRate is set to setDefaultAUMScaledPerSecondsRate\\n    */\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setDefaultAUMScaledPerSecondsRate(uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraw fee balance to fee pool for a given index\\n    /// @param _index Index to withdraw fee balance from\\n    function withdrawToFeePool(address _index) external;\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Minting fee in base point (BP) format\\n    /// @return Returns minting fee in base point (BP) format\\n    function defaultMintingFeeInBP() external view returns (uint16);\\n\\n    /// @notice Burning fee in base point (BP) format\\n    /// @return Returns burning fee in base point (BP) format\\n    function defaultBurningFeeInBP() external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    ///         See setDefaultAUMScaledPerSecondsRate method description for more details.\\n    /// @return Returns AUM scaled per seconds rate\\n    function defaultAUMScaledPerSecondsRate() external view returns (uint);\\n\\n    /// @notice Reweighting logic address\\n    /// @return Returns reweighting logic address\\n    function reweightingLogic() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index layout interface\\n/// @notice Contains storage layout of index\\ninterface IIndexLayout {\\n    /// @notice Index factory address\\n    /// @return Returns index factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Registry address\\n    /// @return Returns registry address\\n    function registry() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndexLogic", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}