{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BalancerZapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n//a simple contract to get round balancer's crazy inputs\\n\\nstruct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\ninterface IBalancerVault{\\n    function joinPool(\\n    bytes32 poolId, \\n    address sender, \\n    address recipient, \\n    JoinPoolRequest memory request\\n) external;\\n\\nfunction getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n}\\ninterface IERC20{\\n    function transfer(address, uint256) external;\\n    function approve(address, uint256) external;\\n    function transferFrom(address, address, uint256) external;\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ncontract BalancerZapper  {\\n    address immutable internal owner;\\n\\n    IBalancerVault balancerVault = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n    \\n    constructor() public{\\n        owner = msg.sender;\\n    }\\n    \\n    function joinPool(address _inToken, uint256 _amount, bytes32 _poolId, address _recepient, uint256[] calldata _amountsIn, uint256 _minOut) external{\\n        IERC20(_inToken).transferFrom(msg.sender, address(this), _amount);\\n        IERC20(_inToken).approve(address(balancerVault), _amount);\\n\\n        uint256 JoinKind = 1; //EXACT_TOKENS_IN_FOR_BPT_OUT\\n        \\n        bytes memory userDataEncoded = abi.encode(JoinKind, _amountsIn, _minOut);\\n        (address[] memory poolTokens, , ) = balancerVault.getPoolTokens(_poolId);\\n        JoinPoolRequest memory jpr = JoinPoolRequest(poolTokens, _amountsIn, userDataEncoded, false);\\n\\n        //must approve this contract as relayer\\n        balancerVault.joinPool(_poolId, address(this), _recepient, jpr);\\n    }\\n\\n    function sweep(address token) external{\\n        require(msg.sender == owner);\\n        IERC20(token).transfer(owner, IERC20(token).balanceOf(address(this)));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BalancerZapper.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerZapper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}