{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n *      ##########################################\r\n *      ##########################################\r\n *      ###                                    ###\r\n *      ###          \ud835\udc0f\ud835\udc25\ud835\udc1a\ud835\udc32 & \ud835\udc16\ud835\udc22\ud835\udc27 \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b          ###\r\n *      ###                 at                 ###\r\n *      ###          \ud835\udc04\ud835\udc13\ud835\udc07\ud835\udc04\ud835\udc11\ud835\udc00\ud835\udc05\ud835\udc05\ud835\udc0b\ud835\udc04.\ud835\udc02\ud835\udc0e\ud835\udc0c          ###\r\n *      ###                                    ###\r\n *      ##########################################\r\n *      ##########################################\r\n *\r\n *      Welcome to the temporary \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e \ud835\udc03\ud835\udc22\ud835\udc2c\ud835\udc1b\ud835\udc2e\ud835\udc2b\ud835\udc2c\ud835\udc1a\ud835\udc25 \ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc1c\ud835\udc2d. \r\n *      It's currently a place-holder whose only functionality is \r\n *      forward-compatability with the soon-to-be-deployed actual \r\n *      contract. \r\n *\r\n *      Its job is to accrue funds generated by \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e to pay out \r\n *      as \ud835\udc1d\ud835\udc22\ud835\udc2f\ud835\udc22\ud835\udc1d\ud835\udc1e\ud835\udc27\ud835\udc1d\ud835\udc2c to the \ud835\udc0b\ud835\udc0e\ud835\udc13 token holders. But that's only the \r\n *      start. \ud835\udc0b\ud835\udc0e\ud835\udc13 token holders will form a \ud835\udc03\ud835\udc00\ud835\udc0e who own and run \r\n *      \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e, and will be able to vote of the future of the \r\n *      platform via this very contract! They'll also get to say where \r\n *      \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc11\ud835\udc1e\ud835\udc25\ud835\udc22\ud835\udc1e\ud835\udc1f - Etheraffle's charitable arm - funds go to as well. \r\n *      All whilst earning a \ud835\udc1d\ud835\udc22\ud835\udc2f\ud835\udc22\ud835\udc1d\ud835\udc1e\ud835\udc27\ud835\udc1d from ticket sales of \ud835\udc04\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e! \r\n *\r\n *\r\n *                     \ud835\udc04\ud835\udc31\ud835\udc1c\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc2d\ud835\udc22\ud835\udc26\ud835\udc1e\ud835\udc2c - \ud835\udc2c\ud835\udc2d\ud835\udc1a\ud835\udc32 \ud835\udc2d\ud835\udc2e\ud835\udc27\ud835\udc1e\ud835\udc1d!\r\n *\r\n *\r\n *      Learn more and take part at \ud835\udc21\ud835\udc2d\ud835\udc2d\ud835\udc29\ud835\udc2c://\ud835\udc1e\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e.\ud835\udc1c\ud835\udc28\ud835\udc26/\ud835\udc22\ud835\udc1c\ud835\udc28\r\n *      Or if you want to chat to us you have loads of options:\r\n *      On \ud835\udc13\ud835\udc1e\ud835\udc25\ud835\udc1e\ud835\udc20\ud835\udc2b\ud835\udc1a\ud835\udc26 @ \ud835\udc21\ud835\udc2d\ud835\udc2d\ud835\udc29\ud835\udc2c://\ud835\udc2d.\ud835\udc26\ud835\udc1e/\ud835\udc1e\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e\r\n *      Or on \ud835\udc13\ud835\udc30\ud835\udc22\ud835\udc2d\ud835\udc2d\ud835\udc1e\ud835\udc2b @ \ud835\udc21\ud835\udc2d\ud835\udc2d\ud835\udc29\ud835\udc2c://\ud835\udc2d\ud835\udc30\ud835\udc22\ud835\udc2d\ud835\udc2d\ud835\udc1e\ud835\udc2b.\ud835\udc1c\ud835\udc28\ud835\udc26/\ud835\udc1e\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e\r\n *      Or on \ud835\udc11\ud835\udc1e\ud835\udc1d\ud835\udc1d\ud835\udc22\ud835\udc2d @ \ud835\udc21\ud835\udc2d\ud835\udc2d\ud835\udc29\ud835\udc2c://\ud835\udc1e\ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc1f\ud835\udc1f\ud835\udc25\ud835\udc1e.\ud835\udc2b\ud835\udc1e\ud835\udc1d\ud835\udc1d\ud835\udc22\ud835\udc2d.\ud835\udc1c\ud835\udc28\ud835\udc26\r\n *\r\n */\r\npragma solidity^0.4.21;\r\n\r\ncontract ReceiverInterface {\r\n    function receiveEther() external payable {}\r\n}\r\n\r\ncontract EtheraffleDisbursal {\r\n\r\n    bool    upgraded;\r\n    address etheraffle;\r\n    /**\r\n     * @dev  Modifier to prepend to functions rendering them\r\n     *       only callable by the Etheraffle multisig address.\r\n     */\r\n    modifier onlyEtheraffle() {\r\n        require(msg.sender == etheraffle);\r\n        _;\r\n    }\r\n    event LogEtherReceived(address fromWhere, uint howMuch, uint atTime);\r\n    event LogUpgrade(address toWhere, uint amountTransferred, uint atTime);\r\n    /**\r\n     * @dev   Constructor - sets the etheraffle var to the Etheraffle\r\n     *        managerial multisig account.\r\n     *\r\n     * @param _etheraffle   The Etheraffle multisig account\r\n     */\r\n    function EtheraffleDisbursal(address _etheraffle) {\r\n        etheraffle = _etheraffle;\r\n    }\r\n    /**\r\n     * @dev   Upgrade function transferring all this contract's ether\r\n     *        via the standard receive ether function in the proposed\r\n     *        new disbursal contract.\r\n     *\r\n     * @param _addr    The new disbursal contract address.\r\n     */\r\n    function upgrade(address _addr) onlyEtheraffle external {\r\n        upgraded = true;\r\n        emit LogUpgrade(_addr, this.balance, now);\r\n        ReceiverInterface(_addr).receiveEther.value(this.balance)();\r\n    }\r\n    /**\r\n     * @dev   Standard receive ether function, forward-compatible\r\n     *        with proposed future disbursal contract.\r\n     */\r\n    function receiveEther() payable external {\r\n        emit LogEtherReceived(msg.sender, msg.value, now);\r\n    }\r\n    /**\r\n     * @dev   Set the Etheraffle multisig contract address, in case of future\r\n     *        upgrades. Only callable by the current Etheraffle address.\r\n     *\r\n     * @param _newAddr   New address of Etheraffle multisig contract.\r\n     */\r\n    function setEtheraffle(address _newAddr) onlyEtheraffle external {\r\n        etheraffle = _newAddr;\r\n    }\r\n    /**\r\n     * @dev   selfDestruct - used here to delete this placeholder contract\r\n     *        and forward any funds sent to it on to the final disbursal\r\n     *        contract once it is fully developed. Only callable by the\r\n     *        Etheraffle multisig.\r\n     *\r\n     * @param _addr   The destination address for any ether herein.\r\n     */\r\n    function selfDestruct(address _addr) onlyEtheraffle {\r\n        require(upgraded);\r\n        selfdestruct(_addr);\r\n    }\r\n    /**\r\n     * @dev   Fallback function that accepts ether and announces its\r\n     *        arrival via an event.\r\n     */\r\n    function () payable external {\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setEtheraffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_etheraffle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fromWhere\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"howMuch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogEtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"toWhere\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTransferred\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"atTime\",\"type\":\"uint256\"}],\"name\":\"LogUpgrade\",\"type\":\"event\"}]", "ContractName": "EtheraffleDisbursal", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000097f535e98cf250cdd7ff0cb9b29e4548b609a0bd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e7bcaebef211a70ad8e827e748a35754dd8b9331708745e5d4ec5b63bcc19fc5"}]}