{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at optimistic.etherscan.io on 2022-04-27\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// interface mintNFT{\r\n   \r\n//       function mint(\r\n//         uint256 _category,\r\n//         bytes memory _data,\r\n//         bytes memory _signature\r\n//     ) external ;\r\n// }\r\n\r\ncontract Claims {\r\n     //address constant nftContra = address(0xA0BB4c422D003C517D18cAB8cDaA87B03982Ab43);//\u6d4b\u8bd5\u7f51\r\n    // address  signer = address(0x87d3aB4771972F7e010d3329cFa0f1aE768295Dc);\r\n   //   using SignatureChecker for address;\r\n\r\n    // Wallet who will be the backend signer\r\n    address public signer = address(0x87d3aB4771972F7e010d3329cFa0f1aE768295Dc);\r\n\r\n     address constant nftContra = address(0xFD43D1dA000558473822302e1d44D81dA2e4cC0d);//\u4e3b\u7f51\u5408\u7ea6\r\n\r\n  // address constant nftContra = address(0xA0BB4c422D003C517D18cAB8cDaA87B03982Ab43);//\u6d4b\u8bd5\u7f51\r\n\r\n    // \u5b9a\u4e49\u4e8b\u4ef6\r\n    event mintEvent(address indexed sender, bool indexed success,bytes indexed data);\r\n\r\n    // function three_call(address addr) public {\r\n    //         //addr.call(bytes4(keccak256(\"test()\")));                 // \u60c5\u51b51 msg.sender= \u5408\u7ea6B\u8c03\u7528\u5730\u5740\r\n    //         addr.delegatecall(bytes4(keccak256(\"test()\")));       // \u60c5\u51b52  msg.sender= \u94b1\u5305\u8c03\u7528\u5730\u5740\r\n    //        // addr.callcode(bytes4(keccak256(\"test()\")));           // \u60c5\u51b53   msg.sender= \u5408\u7ea6A\u5730\u5740\r\n    // } \r\n\r\n\r\n     function singleMint( uint256 _category,bytes memory _data,\r\n                       bytes memory _signature) public  {\r\n        (bool success, bytes memory data) = nftContra.delegatecall(\r\n             abi.encodeWithSignature(\"mint(uint256,bytes,bytes)\", _category, _data, _signature)\r\n        );\r\n        // \u89e6\u53d1\u4e8b\u4ef6\r\n        emit mintEvent(msg.sender, success,data);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function mulMint( bytes[] memory _data, bytes[] memory _signature) public  {\r\n\r\n\r\n        for (uint256 i = 0; i < _data.length; i++) {\r\n            (bool success, bytes memory data) = nftContra.delegatecall(\r\n             abi.encodeWithSignature(\"mint(uint256,bytes,bytes)\", i+1, _data[i], _signature[i])\r\n            );\r\n              // \u89e6\u53d1\u4e8b\u4ef6\r\n            // emit mintEvent(msg.sender, success,data);\r\n        }\r\n       \r\n       \r\n    }\r\n\r\n\r\n    // address constant contra = address(0xFD43D1dA000558473822302e1d44D81dA2e4cC0d);\r\n    //   function mulccc(  bytes[]  memory datas , bytes[]  memory signatures  )  public {\r\n    //     mintNFT(contra).mint(1, datas[0], signatures[0] ) ;\r\n    //     mintNFT(contra).mint(2,datas[1], signatures[1] ) ;\r\n    //     mintNFT(contra).mint(3,datas[2], signatures[2] ) ;\r\n    //     mintNFT(contra).mint(4,datas[3], signatures[3] ) ;\r\n    //     mintNFT(contra).mint(5,datas[4], signatures[4] ) ;\r\n    //     mintNFT(contra).mint(6,datas[5], signatures[5] ) ;\r\n    //     mintNFT(contra).mint(7,datas[6], signatures[6] ) ;\r\n    //     mintNFT(contra).mint(8,datas[7], signatures[7] ) ;\r\n    //     mintNFT(contra).mint(9,datas[8], signatures[8] ) ;\r\n    // } \r\n\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signature\",\"type\":\"bytes[]\"}],\"name\":\"mulMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"singleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Claims", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46725cc6ef269acccd975ca20212abd7a30be9ef418f3c5a8f07d211bc263926"}]}