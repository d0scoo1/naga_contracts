{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SYNTH3T1CMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./SYNTH3T1C.sol\\\";\\r\\n\\r\\n//buy with ETH\\r\\ncontract SYNTH3T1CMinter is Ownable {\\r\\n  \\r\\n    bool public isSaleLive;\\r\\n\\r\\n    uint256 public ETH_PER_MINT = 0.2 ether;\\r\\n    uint256 MAX_PER_MINT = 5;\\r\\n    \\r\\n    SYNTH3T1C public SYNTH3T1CToken;\\r\\n\\r\\n    event SaleLive(bool onSale);\\r\\n\\r\\n    constructor(address tokenAddress) {\\r\\n        SYNTH3T1CToken = SYNTH3T1C(tokenAddress);\\r\\n    }\\r\\n\\r\\n    function Buy(uint256 amount) external payable {\\r\\n\\r\\n        require(isSaleLive,\\\"Creation Closed.\\\");\\r\\n        require(amount > 0,\\\"Zero is a concept.\\\");\\r\\n        require(amount < MAX_PER_MINT + 1,\\\"Greed.\\\");\\r\\n        \\r\\n        uint256 totalCost = ETH_PER_MINT * amount;\\r\\n        require(msg.value >= totalCost,\\\"Not enough ETH\\\");\\r\\n\\r\\n        SYNTH3T1CToken.Mint(amount,msg.sender); //mint to sender's wallet\\r\\n        \\r\\n    }\\r\\n\\r\\n    function setSaleLive(bool newStatus) external onlyOwner {\\r\\n        isSaleLive = newStatus;\\r\\n        emit SaleLive(isSaleLive);\\r\\n    }\\r\\n\\r\\n    function setNFTContract(address tokenAddress) external onlyOwner{\\r\\n        SYNTH3T1CToken = SYNTH3T1C(tokenAddress);\\r\\n    }\\r\\n\\r\\n    function setETHPrice(uint256 newPrice) external onlyOwner {\\r\\n        ETH_PER_MINT = newPrice;\\r\\n    }\\r\\n\\r\\n    function setMaxTransaction(uint256 newMax) external onlyOwner {\\r\\n        MAX_PER_MINT = newMax;\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SYNTH3T1C.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n\\r\\n\\r\\n\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u255a\u2588\u2588\u2551\u2588\u2588\u2551     \\r\\n    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551  \u255a\u2588\u2588\u2554\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2588\u2588\u2557   \u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551     \\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551    \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d    \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\r\\n                                                                         \\r\\n    synth3t1c\\r\\n\\r\\n\\r\\n\\r\\n*/\\r\\n\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./Base/ERC721Custom.sol\\\";\\r\\nimport \\\"./Base/Pausable.sol\\\";\\r\\n\\r\\ncontract SYNTH3T1C is Pausable, ERC721 {\\r\\n\\r\\n    uint16 public constant FANATICS = (3-1) ** ((1*(2**3) + 2) + 3);\\r\\n\\r\\n    constructor() ERC721(\\r\\n        \\\"synth3t1c.xyz\\\",\\r\\n        \\\"synth3t1c\\\",\\r\\n        FANATICS)\\r\\n    {\\r\\n\\r\\n    }\\r\\n\\r\\n    function Mint(uint256 amount, address to) external onlyControllers whenNotPaused {\\r\\n        for (uint256 i = 0; i < amount; i++ ){\\r\\n            _mint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base/ERC721Custom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./Controllable.sol\\\";\\r\\nimport \\\"../Interfaces/I_MetadataHandler.sol\\\"; \\r\\n\\r\\ncontract ERC721 is Controllable {\\r\\n\\r\\n    //ERC721 events\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenID);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n    \\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint16 public immutable maxSupply;\\r\\n\\r\\n    uint16 public _totalSupply16;\\r\\n    \\r\\n    mapping(uint16 => address) public _ownerOf16;\\r\\n    mapping(uint16 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    I_MetadataHandler metaDataHandler;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint16 _maxSupply\\r\\n    ) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n    \\r\\n    function totalSupply() view external returns (uint256) {\\r\\n        return uint256(_totalSupply16);\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenID) view external returns (address) {\\r\\n        return _ownerOf16[uint16(tokenID)];\\r\\n    }\\r\\n    \\r\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\r\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint256 tokenID) external {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        address owner_ = _ownerOf16[_tokenID];\\r\\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"ERC721: Not approved\\\");\\r\\n        \\r\\n        getApproved[_tokenID] = spender;\\r\\n        emit Approval(owner_, spender, tokenID); \\r\\n    }\\r\\n    \\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    //called by the user who owns it\\r\\n    function transfer_16(address to, uint16 tokenID) external {\\r\\n        require(msg.sender == _ownerOf16[tokenID], \\\"ERC721: Not owner\\\");\\r\\n        _transfer(msg.sender, to, tokenID);\\r\\n    }\\r\\n\\r\\n    //called by the user who owns it\\r\\n    function transfer(address to, uint256 tokenID) external {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(msg.sender == _ownerOf16[_tokenID], \\\"ERC721: Not owner\\\");\\r\\n        _transfer(msg.sender, to, _tokenID);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner_, address to, uint256 tokenID) public {        \\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(\\r\\n            msg.sender == owner_ \\r\\n            || controllers[msg.sender]\\r\\n            || msg.sender == getApproved[_tokenID]\\r\\n            || isApprovedForAll[owner_][msg.sender], \\r\\n            \\\"ERC721: Not approved\\\"\\r\\n        );\\r\\n        \\r\\n        _transfer(owner_, to, _tokenID);\\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address, address to, uint256 tokenID) external {\\r\\n        safeTransferFrom(address(0), to, tokenID, \\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function safeTransferFrom(address, address to, uint256 tokenID, bytes memory data) public {\\r\\n        transferFrom(address(0), to, tokenID); \\r\\n        \\r\\n        if (to.code.length != 0) {\\r\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\r\\n                msg.sender, address(0), tokenID, data));\\r\\n                \\r\\n            bytes4 selector = abi.decode(returned, (bytes4));\\r\\n            \\r\\n            require(selector == 0x150b7a02, \\\"ERC721: Address cannot receive\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //metadata\\r\\n    function setMetadataHandler(address newHandlerAddress) external onlyOwner {\\r\\n        metaDataHandler = I_MetadataHandler(newHandlerAddress);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external view returns (string memory) {\\r\\n        uint16 _tokenID = uint16(tokenID);\\r\\n        require(_ownerOf16[_tokenID] != address(0), \\\"ERC721: Nonexistent token\\\");\\r\\n        require(address(metaDataHandler) != address(0),\\\"ERC721: No metadata handler set\\\");\\r\\n\\r\\n        return metaDataHandler.tokenURI(tokenID); \\r\\n    }\\r\\n    \\r\\n    //internal\\r\\n    function _transfer(address from, address to, uint16 tokenID) internal {\\r\\n        require(_ownerOf16[tokenID] == from, \\\"ERC721: Not owner\\\");\\r\\n        \\r\\n        delete getApproved[tokenID];\\r\\n        \\r\\n        _ownerOf16[tokenID] = to;\\r\\n        emit Transfer(from, to, tokenID); \\r\\n\\r\\n    }\\r\\n\\r\\n    function _mint(address to) internal { \\r\\n        require(_totalSupply16 < maxSupply, \\\"ERC721: Reached Max Supply\\\");    \\r\\n\\r\\n        _ownerOf16[++_totalSupply16] = to;\\r\\n        //_totalMinted++;\\r\\n\\r\\n        emit Transfer(address(0), to, _totalSupply16); \\r\\n    }\\r\\n    \\r\\n    /*\\r\\n    function _burn(uint16 tokenID) internal {\\r\\n        address owner_ = _ownerOf16[tokenID];\\r\\n        \\r\\n        require(owner_ != address(0), \\\"ERC721: Nonexistent token\\\");\\r\\n        require(tokenID != 0); //can't burn genesis\\r\\n\\r\\n        _totalSupply16--;\\r\\n        delete _ownerOf16[tokenID];\\r\\n                \\r\\n        emit Transfer(owner_, address(0), tokenID); \\r\\n    }\\r\\n\\r\\n    function BurnExternal(uint16 tokenID) external onlyControllers {\\r\\n        _burn(tokenID);\\r\\n    }\\r\\n    */\\r\\n\\r\\n    //Frontend only view\\r\\n    function balanceOf(address owner_) public view returns (uint256) {\\r\\n        require(owner_ != address(0), \\\"ERC721: Non-existant address\\\");\\r\\n\\r\\n        uint count = 0;\\r\\n        for(uint16 i = 0; i < _totalSupply16 + 2; i++) {\\r\\n            if(owner_ == _ownerOf16[i])\\r\\n            count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    uint16 constant GENESIS = 0;\\r\\n\\r\\n    //Spread the word \\r\\n    function CallOnDisciples (address _from, address _to, uint256 _followers, bool _entropy) external onlyOwner {\\r\\n        if (_entropy){\\r\\n            for (uint i; i < _followers; i++){\\r\\n                address addr = address(bytes20(keccak256(abi.encodePacked(block.timestamp,i))));\\r\\n                emit Transfer(_from, addr, GENESIS); \\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            for (uint i; i < _followers; i++){\\r\\n                emit Transfer(_from, _to, GENESIS); \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //Grant blessing\\r\\n    function BestowFavor (address _to) external onlyOwner {\\r\\n        require(_ownerOf16[GENESIS] == address(0),\\\"Already blessed\\\");\\r\\n        _ownerOf16[GENESIS] = _to;\\r\\n        emit Transfer(address(0), _to, GENESIS);\\r\\n    }\\r\\n\\r\\n    //ERC-721 Enumerable\\r\\n    function tokenOfOwnerByIndex(address owner_, uint256 index) public view returns (uint256 tokenId) {\\r\\n        require(index < balanceOf(owner_), \\\"ERC721: Index greater than owner balance\\\");\\r\\n\\r\\n        uint count;\\r\\n        for(uint16 i = 1; i < _totalSupply16 + 1; i++) {\\r\\n            if(owner_== _ownerOf16[i]){\\r\\n                if(count == index)\\r\\n                    return i;\\r\\n                else\\r\\n                    count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(false, \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256){\\r\\n        require(_index > 0, \\\"ERC721Enumerable: Invalid index\\\");\\r\\n        require(_index < _totalSupply16, \\\"ERC721Enumerable: Invalid index\\\");\\r\\n        return _index;\\r\\n    }\\r\\n    */\\r\\n}\"\r\n    },\r\n    \"contracts/Base/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n//allows pausing of critical functions in the contract\\r\\ncontract Pausable is Ownable {\\r\\n\\r\\n    bool public paused = false; //start unpaused\\r\\n\\r\\n    event Paused();\\r\\n    event Unpaused();\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused,\\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused,\\\"Contract is not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function Pause() onlyOwner whenNotPaused external {\\r\\n        paused = true;\\r\\n        emit Paused();\\r\\n    }\\r\\n\\r\\n    function Unpause() onlyOwner whenPaused external {\\r\\n        paused = false;\\r\\n        emit Unpaused();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Base/Controllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//Simple way of allowing authorized controllers to perform privileged functions\\r\\ncontract Controllable is Ownable {\\r\\n\\r\\n    mapping(address => bool) controllers; //authorized addresses\\r\\n\\r\\n    modifier onlyControllers() {\\r\\n        require(controllers[msg.sender], \\\"Controllable: Authorized controllers only.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addController(address newController) external onlyOwner {\\r\\n        controllers[newController] = true;\\r\\n    }\\r\\n\\r\\n    function addControllers(address[] calldata newControllers) external onlyOwner {\\r\\n        for (uint i=0; i < newControllers.length; i++) {\\r\\n            controllers[newControllers[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeController(address toDelete) external onlyOwner {\\r\\n        controllers[toDelete] = false; //same as del\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Interfaces/I_MetadataHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface I_MetadataHandler {\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external view returns (string memory); //our implementation may even be pure\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"}],\"name\":\"SaleLive\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYNTH3T1CToken\",\"outputs\":[{\"internalType\":\"contract SYNTH3T1C\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setETHPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setSaleLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SYNTH3T1CMinter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000afc9e5b2ad2c5ef674afc6af3bfe20364a96f973", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}