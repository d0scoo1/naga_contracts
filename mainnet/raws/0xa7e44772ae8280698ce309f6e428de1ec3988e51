{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"AbiDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @title Decode raw calldata and params\\n * @author yearn.finance\\n */\\n\\nlibrary AbiDecoder {\\n  /**\\n   * @notice Extract all params from calldata given a list of param types and raw calldata bytes\\n   * @param paramTypes An array of param types (ie. [\\\"address\\\", \\\"bytes[]\\\", \\\"uint256\\\"])\\n   * @param data Raw calldata (including 4byte method selector)\\n   * @return Returns an array of input param data\\n   */\\n  function getParamsFromCalldata(\\n    string[] memory paramTypes,\\n    bytes calldata data\\n  ) public pure returns (bytes[] memory) {\\n    uint256 numberOfParams = paramTypes.length;\\n    bytes[] memory results = new bytes[](numberOfParams);\\n    for (uint256 paramIdx = 0; paramIdx \\u003c numberOfParams; paramIdx++) {\\n      string memory paramType = paramTypes[paramIdx];\\n      bytes memory param = getParamFromCalldata(data, paramType, paramIdx);\\n      results[paramIdx] = param;\\n    }\\n    return results;\\n  }\\n\\n  /**\\n   * @notice Extract param bytes given calldata, param type and param index\\n   * @param data Raw calldata (including 4byte method selector)\\n   * @param paramIdx The position of the param data to fetch (0 will fetch the first param)\\n   * @return Returns the raw data of the param at paramIdx index\\n   * @dev If the type is \\\"bytes\\\", \\\"bytes[]\\\", \\\"string\\\" or \\\"string[]\\\" the offset byte\\n   *      will be set to 0x20. The param is isolated in such a way that it can be passed as an\\n   *      input to another method selector using call or staticcall.\\n   */\\n  function getParamFromCalldata(\\n    bytes calldata data,\\n    string memory paramType,\\n    uint256 paramIdx\\n  ) public pure returns (bytes memory) {\\n    uint256 paramsStartIdx = 0x04; // Start after method selector\\n    uint256 paramOffset = 0x20 * paramIdx;\\n    bytes memory paramDescriptorValue = bytes(\\n      data[paramsStartIdx + paramOffset:paramsStartIdx + paramOffset + 0x20]\\n    );\\n\\n    bool paramTypeIsStringOrBytes = Strings.stringsEqual(paramType, \\\"bytes\\\") ||\\n      Strings.stringsEqual(paramType, \\\"string\\\");\\n    bool paramTypeIsStringArrayOrBytesArray = Strings.stringsEqual(\\n      paramType,\\n      \\\"bytes[]\\\"\\n    ) || Strings.stringsEqual(paramType, \\\"string[]\\\");\\n    bool _paramTypeIsArray = paramTypeIsArray(paramType);\\n\\n    uint256 paramStartIdx = uint256(bytes32(paramDescriptorValue)) + 0x04;\\n    if (paramTypeIsStringOrBytes) {\\n      return extractParamForBytesType(data, paramStartIdx);\\n    } else if (paramTypeIsStringArrayOrBytesArray) {\\n      return extractParamForBytesArrayType(data, paramStartIdx);\\n    } else if (_paramTypeIsArray) {\\n      return extractParamForSimpleArray(data, paramStartIdx);\\n    } else {\\n      return paramDescriptorValue;\\n    }\\n  }\\n\\n  /**\\n   * @notice Extract param for \\\"bytes\\\" and \\\"string\\\" types given calldata and a param start index\\n   * @param data Raw calldata (including 4byte method selector)\\n   * @param paramStartIdx The offset the param starts at\\n   * @return Returns the raw data of the param at paramIdx index\\n   */\\n  function extractParamForBytesType(bytes calldata data, uint256 paramStartIdx)\\n    public\\n    pure\\n    returns (bytes memory)\\n  {\\n    uint256 paramEndIdx = paramStartIdx + 0x20;\\n    bytes32 bytesLengthBytes = bytes32(data[paramStartIdx:paramEndIdx]);\\n    uint256 bytesLength = uint256(bytesLengthBytes);\\n    bytes memory dataToAdd = abi.encodePacked(\\n      uint256(0x20),\\n      bytes32(bytesLengthBytes)\\n    );\\n    uint256 numberOfRowsOfBytes = (bytesLength / 32) + 1;\\n    for (uint256 rowIdx; rowIdx \\u003c numberOfRowsOfBytes; rowIdx++) {\\n      uint256 rowStartIdx = paramEndIdx + (0x20 * rowIdx);\\n      dataToAdd = abi.encodePacked(\\n        dataToAdd,\\n        data[rowStartIdx:rowStartIdx + 0x20]\\n      );\\n    }\\n    return dataToAdd;\\n  }\\n\\n  /**\\n   * @notice Extract param for \\\"bytes[]\\\" and \\\"string[]\\\" types given calldata and a param start index\\n   * @param data Raw calldata (including 4byte method selector)\\n   * @param paramStartIdx The offset the param starts at\\n   * @return Returns the raw data of the param at paramIdx index\\n   */\\n  function extractParamForBytesArrayType(\\n    bytes calldata data,\\n    uint256 paramStartIdx\\n  ) public pure returns (bytes memory) {\\n    uint256 paramEndIdx = paramStartIdx + 0x20;\\n    bytes32 arrayLengthBytes = bytes32(data[paramStartIdx:paramEndIdx]);\\n    uint256 arrayLength = uint256(arrayLengthBytes);\\n    bytes memory dataToAdd = abi.encodePacked(\\n      uint256(0x20),\\n      bytes32(arrayLengthBytes)\\n    );\\n    uint256 lastOffsetStartIdx = paramEndIdx + (0x20 * arrayLength) - 0x20;\\n    uint256 lastOffset = uint256(\\n      bytes32(data[lastOffsetStartIdx:lastOffsetStartIdx + 0x20])\\n    );\\n    bytes32 lastElementBytesLengthBytes = bytes32(\\n      data[paramEndIdx + lastOffset:paramEndIdx + lastOffset + 0x20]\\n    );\\n    uint256 lastElementBytesLength = uint256(lastElementBytesLengthBytes);\\n    uint256 numberOfRowsOfBytesForLastElement = (lastElementBytesLength / 32) +\\n      1;\\n    uint256 dataEndIdx = paramEndIdx +\\n      lastOffset +\\n      0x20 +\\n      (0x20 * numberOfRowsOfBytesForLastElement);\\n    dataToAdd = abi.encodePacked(dataToAdd, data[paramEndIdx:dataEndIdx]);\\n    return dataToAdd;\\n  }\\n\\n  /**\\n   * @notice Extract param for \\\"*[]\\\" types given calldata and a param start index, assuming each element is 32 bytes\\n   * @param data Raw calldata (including 4byte method selector)\\n   * @param paramStartIdx The offset the param starts at\\n   * @return Returns the raw data of the param at paramIdx index\\n   */\\n  function extractParamForSimpleArray(\\n    bytes calldata data,\\n    uint256 paramStartIdx\\n  ) public pure returns (bytes memory) {\\n    uint256 paramEndIdx = paramStartIdx + 0x20;\\n    bytes32 arrayLengthBytes = bytes32(data[paramStartIdx:paramEndIdx]);\\n    uint256 arrayLength = uint256(arrayLengthBytes);\\n    bytes memory dataToAdd = abi.encodePacked(\\n      uint256(0x20),\\n      bytes32(arrayLengthBytes)\\n    );\\n    for (uint256 rowIdx; rowIdx \\u003c arrayLength; rowIdx++) {\\n      uint256 rowStartIdx = paramEndIdx + (0x20 * rowIdx);\\n      dataToAdd = abi.encodePacked(\\n        dataToAdd,\\n        data[rowStartIdx:rowStartIdx + 0x20]\\n      );\\n    }\\n    return dataToAdd;\\n  }\\n\\n  /**\\n   * @notice Check to see if the last two characters of a string are \\\"[]\\\"\\n   * @param paramType Param type as a string (ie. \\\"uint256\\\", \\\"uint256[]\\\")\\n   * @return Returns true if the paramType ends with \\\"[]\\\", false if not\\n   */\\n  function paramTypeIsArray(string memory paramType)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    bytes32 lastTwoCharacters;\\n    assembly {\\n      let len := mload(paramType)\\n      lastTwoCharacters := mload(add(add(paramType, 0x20), sub(len, 2)))\\n    }\\n    return lastTwoCharacters == bytes32(bytes(\\\"[]\\\"));\\n  }\\n}\\n\"},\"CalldataValidation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./AbiDecoder.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\n/**\\n * @title Validate raw calldata against an allowlist\\n * @author yearn.finance\\n */\\n\\n/*******************************************************\\n *                   Main Contract Logic\\n *******************************************************/\\nlibrary CalldataValidation {\\n  /**\\n   * @notice Calculate a method signature given a condition\\n   * @param condition The condition from which to generate the signature\\n   * @return signature The method signature in string format (ie. \\\"approve(address,uint256)\\\")\\n   */\\n  function methodSignatureByCondition(IAllowlist.Condition memory condition)\\n    public\\n    pure\\n    returns (string memory signature)\\n  {\\n    bytes memory signatureBytes = abi.encodePacked(condition.methodName, \\\"(\\\");\\n    for (uint256 paramIdx; paramIdx \\u003c condition.paramTypes.length; paramIdx++) {\\n      signatureBytes = abi.encodePacked(\\n        signatureBytes,\\n        condition.paramTypes[paramIdx]\\n      );\\n      if (paramIdx + 1 \\u003c condition.paramTypes.length) {\\n        signatureBytes = abi.encodePacked(signatureBytes, \\\",\\\");\\n      }\\n    }\\n    signatureBytes = abi.encodePacked(signatureBytes, \\\")\\\");\\n    signature = string(signatureBytes);\\n  }\\n\\n  /**\\n   * @notice Check target validity\\n   * @param implementationAddress The address the validation method will be executed against\\n   * @param targetAddress The target address to validate\\n   * @param requirementValidationMethod The method to execute\\n   * @return targetValid Returns true if the target is valid and false otherwise\\n   * @dev If \\\"requirementValidationMethod\\\" is \\\"isValidVaultToken\\\" and target address is usdc\\n   *      the validation check will look like this: usdc.isValidVaultToken(targetAddress),\\n   *      where the result of the validation method is expected to return a bool\\n   */\\n  function checkTarget(\\n    address implementationAddress,\\n    address targetAddress,\\n    string memory requirementValidationMethod\\n  ) public view returns (bool targetValid) {\\n    string memory methodSignature = string(\\n      abi.encodePacked(requirementValidationMethod, \\\"(address)\\\")\\n    );\\n    (, bytes memory data) = address(implementationAddress).staticcall(\\n      abi.encodeWithSignature(methodSignature, targetAddress)\\n    );\\n    targetValid = abi.decode(data, (bool));\\n  }\\n\\n  /**\\n   * @notice Check method selector validity\\n   * @param data Raw input calldata (we will extract the 4-byte selector\\n   *             from the beginning of the calldata)\\n   * @param condition The condition struct to check (we generate the complete\\n   *        method selector using condition.methodName and condition.paramTypes)\\n   * @return methodSelectorValid Returns true if the method selector is valid and false otherwise\\n   */\\n  function checkMethodSelector(\\n    bytes calldata data,\\n    IAllowlist.Condition memory condition\\n  ) public pure returns (bool methodSelectorValid) {\\n    string memory methodSignature = methodSignatureByCondition(condition);\\n    bytes4 methodSelectorBySignature = bytes4(\\n      keccak256(bytes(methodSignature))\\n    );\\n    bytes4 methodSelectorByCalldata = bytes4(data[0:4]);\\n    methodSelectorValid = methodSelectorBySignature == methodSelectorByCalldata;\\n  }\\n\\n  /**\\n   * @notice Check an individual method param\\u0027s validity\\n   * @param implementationAddress The address the validation method will be executed against\\n   * @param requirement The specific requirement (of type \\\"param\\\") to check (ie. [\\\"param\\\", \\\"isVault\\\", \\\"0\\\"])\\n   * @dev A condition may have multiple requirements, all of which must be true\\n   * @dev The middle element of a requirement is the requirement validation method\\n   * @dev The last element of a requirement is the parameter index to validate against\\n   * @param condition The entire condition struct to check the param against\\n   * @param data Raw input calldata for the original method call\\n   * @return Returns true if the param is valid, false if not\\n   */\\n  function checkParam(\\n    address implementationAddress,\\n    string[] memory requirement,\\n    IAllowlist.Condition memory condition,\\n    bytes calldata data\\n  ) public view returns (bool) {\\n    uint256 paramIdx = Strings.atoi(requirement[2], 10);\\n    string memory paramType = condition.paramTypes[paramIdx];\\n    bytes memory paramCalldata = AbiDecoder.getParamFromCalldata(\\n      data,\\n      paramType,\\n      paramIdx\\n    );\\n    string memory methodSignature = string(\\n      abi.encodePacked(requirement[1], \\\"(\\\", paramType, \\\")\\\")\\n    );\\n    bytes memory encodedCalldata = abi.encodePacked(\\n      bytes4(keccak256(bytes(methodSignature))),\\n      paramCalldata\\n    );\\n    bool success;\\n    bytes memory resultData;\\n    (success, resultData) = address(implementationAddress).staticcall(\\n      encodedCalldata\\n    );\\n    if (success) {\\n      return abi.decode(resultData, (bool));\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Test a target address and calldata against a specific condition and implementation\\n   * @param condition The condition to test\\n   * @param targetAddress Target address of the original method call\\n   * @param data Calldata of the original methodcall\\n   * @return Returns true if the condition passes and false if not\\n   * @dev The condition check is comprised of 3 parts:\\n          - Method selector check (to make sure the calldata method selector matches the condition method selector)\\n          - Target check (to make sure the target is valid)\\n          - Param check (to make sure the specified param is valid)\\n   */\\n  function testCondition(\\n    address allowlistAddress,\\n    IAllowlist.Condition memory condition,\\n    address targetAddress,\\n    bytes calldata data\\n  ) public view returns (bool) {\\n    string[][] memory requirements = condition.requirements;\\n    address implementationAddress = IAllowlist(allowlistAddress)\\n      .implementationById(condition.implementationId);\\n    for (\\n      uint256 requirementIdx;\\n      requirementIdx \\u003c requirements.length;\\n      requirementIdx++\\n    ) {\\n      string[] memory requirement = requirements[requirementIdx];\\n      string memory requirementType = requirement[0];\\n      string memory requirementValidationMethod = requirement[1];\\n      if (!checkMethodSelector(data, condition)) {\\n        return false;\\n      }\\n      if (Strings.stringsEqual(requirementType, \\\"target\\\")) {\\n        bool targetValid = checkTarget(\\n          implementationAddress,\\n          targetAddress,\\n          requirementValidationMethod\\n        );\\n        if (!targetValid) {\\n          return false;\\n        }\\n      } else if (Strings.stringsEqual(requirementType, \\\"param\\\")) {\\n        bool paramValid = checkParam(\\n          implementationAddress,\\n          requirement,\\n          condition,\\n          data\\n        );\\n        if (!paramValid) {\\n          return false;\\n        }\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Test target address and calldata against all stored protocol conditions\\n   * @dev This is done to determine whether or not the target address and calldata are valid and whitelisted\\n   * @dev This is the primary method that should be called by integrators\\n   * @param allowlistAddress The address of the allowlist to check calldata against\\n   * @param targetAddress The target address of the call\\n   * @param data The raw calldata to test\\n   * @return Returns true if the calldata/target test is successful and false if not\\n   */\\n  function validateCalldataByAllowlist(\\n    address allowlistAddress,\\n    address targetAddress,\\n    bytes calldata data\\n  ) public view returns (bool) {\\n    IAllowlist.Condition[] memory _conditions = IAllowlist(allowlistAddress)\\n      .conditionsList();\\n    for (\\n      uint256 conditionIdx;\\n      conditionIdx \\u003c _conditions.length;\\n      conditionIdx++\\n    ) {\\n      IAllowlist.Condition memory condition = _conditions[conditionIdx];\\n      bool conditionPassed = testCondition(\\n        allowlistAddress,\\n        condition,\\n        targetAddress,\\n        data\\n      );\\n      if (conditionPassed) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\"},\"IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IAllowlist is IOwnable {\\n  struct Condition {\\n    string id;\\n    string implementationId;\\n    string methodName;\\n    string[] paramTypes;\\n    string[][] requirements;\\n  }\\n\\n  struct Implementation {\\n    string id;\\n    address addr;\\n  }\\n\\n  function conditionsList() external view returns (Condition[] memory);\\n\\n  function addConditions(Condition[] memory) external;\\n\\n  function setImplementations(Implementation[] memory) external;\\n\\n  function implementationById(string memory) external view returns (address);\\n}\\n\"},\"IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IOwnable {\\n  function setOwnerAddress(address _ownerAddress) external;\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Small library for working with strings\\n * @author yearn.finance\\n */\\n\\nlibrary Strings {\\n  /**\\n   * @notice Search for a needle in a haystack\\n   * @param haystack The string to search\\n   * @param needle The string to search for\\n   */\\n  function stringStartsWith(string memory haystack, string memory needle)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    return indexOfStringInString(needle, haystack) == 0;\\n  }\\n\\n  /**\\n   * @notice Find the index of a string in another string\\n   * @param needle The string to search for\\n   * @param haystack The string to search\\n   * @return Returns -1 if no match is found, otherwise returns the index of the match\\n   */\\n  function indexOfStringInString(string memory needle, string memory haystack)\\n    public\\n    pure\\n    returns (int256)\\n  {\\n    bytes memory _needle = bytes(needle);\\n    bytes memory _haystack = bytes(haystack);\\n    if (_haystack.length \\u003c _needle.length) {\\n      return -1;\\n    }\\n    bool _match;\\n    for (uint256 haystackIdx; haystackIdx \\u003c _haystack.length; haystackIdx++) {\\n      for (uint256 needleIdx; needleIdx \\u003c _needle.length; needleIdx++) {\\n        uint8 needleChar = uint8(_needle[needleIdx]);\\n        if (haystackIdx + needleIdx \\u003e= _haystack.length) {\\n          return -1;\\n        }\\n        uint8 haystackChar = uint8(_haystack[haystackIdx + needleIdx]);\\n        if (needleChar == haystackChar) {\\n          _match = true;\\n          if (needleIdx == _needle.length - 1) {\\n            return int256(haystackIdx);\\n          }\\n        } else {\\n          _match = false;\\n          break;\\n        }\\n      }\\n    }\\n    return -1;\\n  }\\n\\n  /**\\n   * @notice Check to see if two strings are exactly equal\\n   * @dev Supports strings of arbitrary length\\n   * @param input0 First string to compare\\n   * @param input1 Second string to compare\\n   * @return Returns true if strings are exactly equal, false if not\\n   */\\n  function stringsEqual(string memory input0, string memory input1)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 input0Length = bytes(input0).length;\\n    uint256 input1Length = bytes(input1).length;\\n    uint256 maxLength;\\n    if (input0Length \\u003e input1Length) {\\n      maxLength = input0Length;\\n    } else {\\n      maxLength = input1Length;\\n    }\\n    uint256 numberOfRowsToCompare = (maxLength / 32) + 1;\\n    bytes32 input0Bytes32;\\n    bytes32 input1Bytes32;\\n    for (uint256 rowIdx; rowIdx \\u003c numberOfRowsToCompare; rowIdx++) {\\n      uint256 offset = 0x20 * (rowIdx + 1);\\n      assembly {\\n        input0Bytes32 := mload(add(input0, offset))\\n        input1Bytes32 := mload(add(input1, offset))\\n      }\\n      if (input0Bytes32 != input1Bytes32) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Convert ASCII to integer\\n   * @param input Integer as a string (ie. \\\"345\\\")\\n   * @param base Base to use for the conversion (10 for decimal)\\n   * @return output Returns uint256 representation of input string\\n   * @dev Based on GemERC721 utility but includes a fix\\n   */\\n  function atoi(string memory input, uint8 base)\\n    public\\n    pure\\n    returns (uint256 output)\\n  {\\n    require(base == 2 || base == 8 || base == 10 || base == 16);\\n    bytes memory buf = bytes(input);\\n    for (uint256 idx = 0; idx \\u003c buf.length; idx++) {\\n      uint8 digit = uint8(buf[idx]) - 0x30;\\n      if (digit \\u003e 10) {\\n        digit -= 7;\\n      }\\n      require(digit \\u003c base);\\n      output *= base;\\n      output += digit;\\n    }\\n    return output;\\n  }\\n\\n  /**\\n   * @notice Convert integer to ASCII\\n   * @param input Integer as a string (ie. \\\"345\\\")\\n   * @param base Base to use for the conversion (10 for decimal)\\n   * @return output Returns string representation of input integer\\n   * @dev Based on GemERC721 utility but includes a fix\\n   */\\n  function itoa(uint256 input, uint8 base)\\n    public\\n    pure\\n    returns (string memory output)\\n  {\\n    require(base == 2 || base == 8 || base == 10 || base == 16);\\n    if (input == 0) {\\n      return \\\"0\\\";\\n    }\\n    bytes memory buf = new bytes(256);\\n    uint256 idx = 0;\\n    while (input \\u003e 0) {\\n      uint8 digit = uint8(input % base);\\n      uint8 ascii = digit + 0x30;\\n      if (digit \\u003e 9) {\\n        ascii += 7;\\n      }\\n      buf[idx++] = bytes1(ascii);\\n      input /= base;\\n    }\\n    uint256 length = idx;\\n    for (idx = 0; idx \\u003c length / 2; idx++) {\\n      buf[idx] ^= buf[length - 1 - idx];\\n      buf[length - 1 - idx] ^= buf[idx];\\n      buf[idx] ^= buf[length - 1 - idx];\\n    }\\n    output = string(buf);\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"implementationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"methodName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"paramTypes\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"requirements\",\"type\":\"string[][]\"}],\"internalType\":\"struct IAllowlist.Condition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"name\":\"checkMethodSelector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"methodSelectorValid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"requirement\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"implementationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"methodName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"paramTypes\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"requirements\",\"type\":\"string[][]\"}],\"internalType\":\"struct IAllowlist.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkParam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"requirementValidationMethod\",\"type\":\"string\"}],\"name\":\"checkTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"targetValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"implementationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"methodName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"paramTypes\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"requirements\",\"type\":\"string[][]\"}],\"internalType\":\"struct IAllowlist.Condition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"name\":\"methodSignatureByCondition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowlistAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"implementationId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"methodName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"paramTypes\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"requirements\",\"type\":\"string[][]\"}],\"internalType\":\"struct IAllowlist.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"testCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validateCalldataByAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CalldataValidation", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "Strings:af69afdc6b6bc0d61abd47b3ff8999b0e0e23a27;AbiDecoder:5d7201c10afd0ed1a1f408e321ef0ebc7314b086", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b13685b91b64d539bdf2a37cb5782f1611c36ddfae03b11f9953f7ed747e2b0b"}]}