{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/PoolExercise.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ERC1155BaseStorage} from \\\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\\\";\\r\\n\\r\\nimport {PoolInternal} from \\\"./PoolInternal.sol\\\";\\r\\nimport {IPoolExercise} from \\\"./IPoolExercise.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Premia option pool\\r\\n * @dev deployed standalone and referenced by PoolProxy\\r\\n */\\r\\ncontract PoolExercise is IPoolExercise, PoolInternal {\\r\\n    constructor(\\r\\n        address ivolOracle,\\r\\n        address weth,\\r\\n        address premiaMining,\\r\\n        address feeReceiver,\\r\\n        address feeDiscountAddress,\\r\\n        int128 feePremium64x64,\\r\\n        int128 feeApy64x64\\r\\n    )\\r\\n        PoolInternal(\\r\\n            ivolOracle,\\r\\n            weth,\\r\\n            premiaMining,\\r\\n            feeReceiver,\\r\\n            feeDiscountAddress,\\r\\n            feePremium64x64,\\r\\n            feeApy64x64\\r\\n        )\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IPoolExercise\\r\\n     */\\r\\n    function exerciseFrom(\\r\\n        address holder,\\r\\n        uint256 longTokenId,\\r\\n        uint256 contractSize\\r\\n    ) external {\\r\\n        if (msg.sender != holder) {\\r\\n            require(\\r\\n                ERC1155BaseStorage.layout().operatorApprovals[holder][\\r\\n                    msg.sender\\r\\n                ],\\r\\n                \\\"not approved\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _exercise(holder, longTokenId, contractSize);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IPoolExercise\\r\\n     */\\r\\n    function processExpired(uint256 longTokenId, uint256 contractSize)\\r\\n        external\\r\\n    {\\r\\n        _exercise(address(0), longTokenId, contractSize);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC173} from \\\"@solidstate/contracts/access/IERC173.sol\\\";\\nimport {OwnableStorage} from \\\"@solidstate/contracts/access/OwnableStorage.sol\\\";\\nimport {IERC20} from \\\"@solidstate/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC1155EnumerableInternal, ERC1155EnumerableStorage, EnumerableSet} from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\\\";\\nimport {IWETH} from \\\"@solidstate/contracts/utils/IWETH.sol\\\";\\n\\nimport {PoolStorage} from \\\"./PoolStorage.sol\\\";\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport {ABDKMath64x64Token} from \\\"../libraries/ABDKMath64x64Token.sol\\\";\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\nimport {IFeeDiscount} from \\\"../staking/IFeeDiscount.sol\\\";\\nimport {IPoolEvents} from \\\"./IPoolEvents.sol\\\";\\nimport {IPremiaMining} from \\\"../mining/IPremiaMining.sol\\\";\\nimport {IVolatilitySurfaceOracle} from \\\"../oracle/IVolatilitySurfaceOracle.sol\\\";\\n\\n/**\\n * @title Premia option pool\\n * @dev deployed standalone and referenced by PoolProxy\\n */\\ncontract PoolInternal is IPoolEvents, ERC1155EnumerableInternal {\\n    using ABDKMath64x64 for int128;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using PoolStorage for PoolStorage.Layout;\\n\\n    struct Interval {\\n        uint256 contractSize;\\n        uint256 tokenAmount;\\n        uint256 payment;\\n        uint256 apyFee;\\n    }\\n\\n    address internal immutable WETH_ADDRESS;\\n    address internal immutable PREMIA_MINING_ADDRESS;\\n    address internal immutable FEE_RECEIVER_ADDRESS;\\n    address internal immutable FEE_DISCOUNT_ADDRESS;\\n    address internal immutable IVOL_ORACLE_ADDRESS;\\n\\n    int128 internal immutable FEE_PREMIUM_64x64;\\n    int128 internal immutable FEE_APY_64x64;\\n\\n    uint256 internal immutable UNDERLYING_FREE_LIQ_TOKEN_ID;\\n    uint256 internal immutable BASE_FREE_LIQ_TOKEN_ID;\\n\\n    uint256 internal immutable UNDERLYING_RESERVED_LIQ_TOKEN_ID;\\n    uint256 internal immutable BASE_RESERVED_LIQ_TOKEN_ID;\\n\\n    uint256 internal constant INVERSE_BASIS_POINT = 1e4;\\n    uint256 internal constant BATCHING_PERIOD = 260;\\n\\n    // Minimum APY for capital locked up to underwrite options.\\n    // The quote will return a minimum price corresponding to this APY\\n    int128 internal constant MIN_APY_64x64 = 0x4ccccccccccccccd; // 0.3\\n\\n    // Multiply sell quote by this constant\\n    int128 internal constant SELL_COEFFICIENT_64x64 = 0xb333333333333333; // 0.7\\n\\n    constructor(\\n        address ivolOracle,\\n        address weth,\\n        address premiaMining,\\n        address feeReceiver,\\n        address feeDiscountAddress,\\n        int128 feePremium64x64,\\n        int128 feeApy64x64\\n    ) {\\n        IVOL_ORACLE_ADDRESS = ivolOracle;\\n        WETH_ADDRESS = weth;\\n        PREMIA_MINING_ADDRESS = premiaMining;\\n        FEE_RECEIVER_ADDRESS = feeReceiver;\\n        // PremiaFeeDiscount contract address\\n        FEE_DISCOUNT_ADDRESS = feeDiscountAddress;\\n        FEE_PREMIUM_64x64 = feePremium64x64;\\n        FEE_APY_64x64 = feeApy64x64;\\n\\n        UNDERLYING_FREE_LIQ_TOKEN_ID = PoolStorage.formatTokenId(\\n            PoolStorage.TokenType.UNDERLYING_FREE_LIQ,\\n            0,\\n            0\\n        );\\n        BASE_FREE_LIQ_TOKEN_ID = PoolStorage.formatTokenId(\\n            PoolStorage.TokenType.BASE_FREE_LIQ,\\n            0,\\n            0\\n        );\\n\\n        UNDERLYING_RESERVED_LIQ_TOKEN_ID = PoolStorage.formatTokenId(\\n            PoolStorage.TokenType.UNDERLYING_RESERVED_LIQ,\\n            0,\\n            0\\n        );\\n        BASE_RESERVED_LIQ_TOKEN_ID = PoolStorage.formatTokenId(\\n            PoolStorage.TokenType.BASE_RESERVED_LIQ,\\n            0,\\n            0\\n        );\\n    }\\n\\n    modifier onlyProtocolOwner() {\\n        require(\\n            msg.sender == IERC173(OwnableStorage.layout().owner).owner(),\\n            \\\"Not protocol owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function _fetchFeeDiscount64x64(address feePayer)\\n        internal\\n        view\\n        returns (int128 discount64x64)\\n    {\\n        if (FEE_DISCOUNT_ADDRESS != address(0)) {\\n            discount64x64 = ABDKMath64x64.divu(\\n                IFeeDiscount(FEE_DISCOUNT_ADDRESS).getDiscount(feePayer),\\n                INVERSE_BASIS_POINT\\n            );\\n        }\\n    }\\n\\n    function _withdrawFees(bool isCall) internal returns (uint256 amount) {\\n        uint256 tokenId = _getReservedLiquidityTokenId(isCall);\\n        amount = _balanceOf(FEE_RECEIVER_ADDRESS, tokenId);\\n\\n        if (amount > 0) {\\n            _burn(FEE_RECEIVER_ADDRESS, tokenId, amount);\\n            _pushTo(\\n                FEE_RECEIVER_ADDRESS,\\n                PoolStorage.layout().getPoolToken(isCall),\\n                amount\\n            );\\n            emit FeeWithdrawal(isCall, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate price of option contract\\n     * @param args structured quote arguments\\n     * @return result quote result\\n     */\\n    function _quotePurchasePrice(PoolStorage.QuoteArgsInternal memory args)\\n        internal\\n        view\\n        returns (PoolStorage.QuoteResultInternal memory result)\\n    {\\n        require(\\n            args.strike64x64 > 0 && args.spot64x64 > 0 && args.maturity > 0,\\n            \\\"invalid args\\\"\\n        );\\n\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        int128 contractSize64x64 = ABDKMath64x64Token.fromDecimals(\\n            args.contractSize,\\n            l.underlyingDecimals\\n        );\\n\\n        (int128 adjustedCLevel64x64, int128 oldLiquidity64x64) = l\\n            .getRealPoolState(args.isCall);\\n\\n        require(oldLiquidity64x64 > 0, \\\"no liq\\\");\\n\\n        int128 timeToMaturity64x64 = ABDKMath64x64.divu(\\n            args.maturity - block.timestamp,\\n            365 days\\n        );\\n\\n        int128 annualizedVolatility64x64 = IVolatilitySurfaceOracle(\\n            IVOL_ORACLE_ADDRESS\\n        ).getAnnualizedVolatility64x64(\\n                l.base,\\n                l.underlying,\\n                args.spot64x64,\\n                args.strike64x64,\\n                timeToMaturity64x64\\n            );\\n\\n        require(annualizedVolatility64x64 > 0, \\\"vol = 0\\\");\\n\\n        int128 collateral64x64 = args.isCall\\n            ? contractSize64x64\\n            : contractSize64x64.mul(args.strike64x64);\\n\\n        (\\n            int128 price64x64,\\n            int128 cLevel64x64,\\n            int128 slippageCoefficient64x64\\n        ) = OptionMath.quotePrice(\\n                OptionMath.QuoteArgs(\\n                    annualizedVolatility64x64.mul(annualizedVolatility64x64),\\n                    args.strike64x64,\\n                    args.spot64x64,\\n                    timeToMaturity64x64,\\n                    adjustedCLevel64x64,\\n                    oldLiquidity64x64,\\n                    oldLiquidity64x64.sub(collateral64x64),\\n                    0x10000000000000000, // 64x64 fixed point representation of 1\\n                    MIN_APY_64x64,\\n                    args.isCall\\n                )\\n            );\\n\\n        result.baseCost64x64 = args.isCall\\n            ? price64x64.mul(contractSize64x64).div(args.spot64x64)\\n            : price64x64.mul(contractSize64x64);\\n        result.feeCost64x64 = result.baseCost64x64.mul(FEE_PREMIUM_64x64);\\n        result.cLevel64x64 = cLevel64x64;\\n        result.slippageCoefficient64x64 = slippageCoefficient64x64;\\n        result.feeCost64x64 -= result.feeCost64x64.mul(\\n            _fetchFeeDiscount64x64(args.feePayer)\\n        );\\n    }\\n\\n    function _quoteSalePrice(PoolStorage.QuoteArgsInternal memory args)\\n        internal\\n        view\\n        returns (int128 baseCost64x64, int128 feeCost64x64)\\n    {\\n        require(\\n            args.strike64x64 > 0 && args.spot64x64 > 0 && args.maturity > 0,\\n            \\\"invalid args\\\"\\n        );\\n\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        int128 timeToMaturity64x64 = ABDKMath64x64.divu(\\n            args.maturity - block.timestamp,\\n            365 days\\n        );\\n\\n        int128 annualizedVolatility64x64 = IVolatilitySurfaceOracle(\\n            IVOL_ORACLE_ADDRESS\\n        ).getAnnualizedVolatility64x64(\\n                l.base,\\n                l.underlying,\\n                args.spot64x64,\\n                args.strike64x64,\\n                timeToMaturity64x64\\n            );\\n\\n        require(annualizedVolatility64x64 > 0, \\\"vol = 0\\\");\\n\\n        int128 blackScholesPrice64x64 = OptionMath._blackScholesPrice(\\n            annualizedVolatility64x64.mul(annualizedVolatility64x64),\\n            args.strike64x64,\\n            args.spot64x64,\\n            timeToMaturity64x64,\\n            args.isCall\\n        );\\n\\n        int128 exerciseValue64x64 = ABDKMath64x64Token.fromDecimals(\\n            _calculateExerciseValue(\\n                l,\\n                args.contractSize,\\n                args.spot64x64,\\n                args.strike64x64,\\n                args.isCall\\n            ),\\n            l.baseDecimals\\n        );\\n\\n        int128 sellCLevel64x64;\\n\\n        {\\n            uint256 longTokenId = PoolStorage.formatTokenId(\\n                PoolStorage.getTokenType(args.isCall, true),\\n                args.maturity,\\n                args.strike64x64\\n            );\\n\\n            // Initialize to avg value, and replace by current if avg not set or current is lower\\n            sellCLevel64x64 = l.avgCLevel64x64[longTokenId];\\n\\n            {\\n                (int128 currentCLevel64x64, ) = l.getRealPoolState(args.isCall);\\n\\n                if (\\n                    sellCLevel64x64 == 0 || currentCLevel64x64 < sellCLevel64x64\\n                ) {\\n                    sellCLevel64x64 = currentCLevel64x64;\\n                }\\n            }\\n        }\\n\\n        int128 contractSize64x64 = ABDKMath64x64Token.fromDecimals(\\n            args.contractSize,\\n            l.underlyingDecimals\\n        );\\n\\n        baseCost64x64 = SELL_COEFFICIENT_64x64\\n            .mul(sellCLevel64x64)\\n            .mul(\\n                blackScholesPrice64x64.mul(contractSize64x64).sub(\\n                    exerciseValue64x64\\n                )\\n            )\\n            .add(exerciseValue64x64);\\n\\n        if (args.isCall) {\\n            baseCost64x64 = baseCost64x64.div(args.spot64x64);\\n        }\\n\\n        feeCost64x64 = baseCost64x64.mul(FEE_PREMIUM_64x64);\\n\\n        feeCost64x64 -= feeCost64x64.mul(_fetchFeeDiscount64x64(args.feePayer));\\n        baseCost64x64 -= feeCost64x64;\\n    }\\n\\n    function _getAvailableBuybackLiquidity(uint256 shortTokenId)\\n        internal\\n        view\\n        returns (uint256 totalLiquidity)\\n    {\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[shortTokenId];\\n        (PoolStorage.TokenType tokenType, , ) = PoolStorage.parseTokenId(\\n            shortTokenId\\n        );\\n        bool isCall = tokenType == PoolStorage.TokenType.SHORT_CALL;\\n\\n        uint256 length = accounts.length();\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            address lp = accounts.at(i);\\n\\n            if (l.isBuybackEnabled[lp][isCall]) {\\n                totalLiquidity += _balanceOf(lp, shortTokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice burn corresponding long and short option tokens\\n     * @param l storage layout struct\\n     * @param account holder of tokens to annihilate\\n     * @param maturity timestamp of option maturity\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @param isCall true for call, false for put\\n     * @param contractSize quantity of option contract tokens to annihilate\\n     * @return collateralFreed amount of collateral freed, including APY fee rebate\\n     */\\n    function _annihilate(\\n        PoolStorage.Layout storage l,\\n        address account,\\n        uint64 maturity,\\n        int128 strike64x64,\\n        bool isCall,\\n        uint256 contractSize\\n    ) internal returns (uint256 collateralFreed) {\\n        uint256 longTokenId = PoolStorage.formatTokenId(\\n            PoolStorage.getTokenType(isCall, true),\\n            maturity,\\n            strike64x64\\n        );\\n        uint256 shortTokenId = PoolStorage.formatTokenId(\\n            PoolStorage.getTokenType(isCall, false),\\n            maturity,\\n            strike64x64\\n        );\\n\\n        uint256 tokenAmount = l.contractSizeToBaseTokenAmount(\\n            contractSize,\\n            strike64x64,\\n            isCall\\n        );\\n\\n        // calculate unconsumed APY fee so that it may be refunded\\n\\n        uint256 intervalApyFee = _calculateApyFee(\\n            l,\\n            shortTokenId,\\n            tokenAmount,\\n            maturity\\n        );\\n\\n        _burn(account, longTokenId, contractSize);\\n\\n        uint256 rebate = _fulfillApyFee(\\n            l,\\n            account,\\n            shortTokenId,\\n            contractSize,\\n            intervalApyFee,\\n            isCall\\n        );\\n\\n        _burn(account, shortTokenId, contractSize);\\n\\n        collateralFreed = tokenAmount + rebate + intervalApyFee;\\n\\n        emit Annihilate(shortTokenId, contractSize);\\n    }\\n\\n    /**\\n     * @notice deposit underlying currency, underwriting calls of that currency with respect to base currency\\n     * @param amount quantity of underlying currency to deposit\\n     * @param isCallPool whether to deposit underlying in the call pool or base in the put pool\\n     * @param creditMessageValue whether to apply message value as credit towards transfer\\n     */\\n    function _deposit(\\n        uint256 amount,\\n        bool isCallPool,\\n        bool creditMessageValue\\n    ) internal {\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        // Reset gradual divestment timestamp\\n        delete l.divestmentTimestamps[msg.sender][isCallPool];\\n\\n        _processPendingDeposits(l, isCallPool);\\n\\n        l.depositedAt[msg.sender][isCallPool] = block.timestamp;\\n        _addUserTVL(l, msg.sender, isCallPool, amount);\\n        _pullFrom(l, msg.sender, amount, isCallPool, creditMessageValue);\\n\\n        _addToDepositQueue(msg.sender, amount, isCallPool);\\n\\n        emit Deposit(msg.sender, isCallPool, amount);\\n    }\\n\\n    /**\\n     * @notice purchase option\\n     * @param l storage layout struct\\n     * @param account recipient of purchased option\\n     * @param maturity timestamp of option maturity\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @param isCall true for call, false for put\\n     * @param contractSize size of option contract\\n     * @param newPrice64x64 64x64 fixed point representation of current spot price\\n     * @return baseCost quantity of tokens required to purchase long position\\n     * @return feeCost quantity of tokens required to pay fees\\n     */\\n    function _purchase(\\n        PoolStorage.Layout storage l,\\n        address account,\\n        uint64 maturity,\\n        int128 strike64x64,\\n        bool isCall,\\n        uint256 contractSize,\\n        int128 newPrice64x64\\n    ) internal returns (uint256 baseCost, uint256 feeCost) {\\n        require(maturity > block.timestamp, \\\"expired\\\");\\n        require(contractSize >= l.underlyingMinimum, \\\"too small\\\");\\n\\n        {\\n            uint256 tokenAmount = l.contractSizeToBaseTokenAmount(\\n                contractSize,\\n                strike64x64,\\n                isCall\\n            );\\n\\n            uint256 freeLiquidityTokenId = _getFreeLiquidityTokenId(isCall);\\n\\n            require(\\n                tokenAmount <=\\n                    _totalSupply(freeLiquidityTokenId) -\\n                        l.totalPendingDeposits(isCall) -\\n                        (_balanceOf(account, freeLiquidityTokenId) -\\n                            l.pendingDepositsOf(account, isCall)),\\n                \\\"insuf liq\\\"\\n            );\\n        }\\n\\n        PoolStorage.QuoteResultInternal memory quote = _quotePurchasePrice(\\n            PoolStorage.QuoteArgsInternal(\\n                account,\\n                maturity,\\n                strike64x64,\\n                newPrice64x64,\\n                contractSize,\\n                isCall\\n            )\\n        );\\n\\n        baseCost = ABDKMath64x64Token.toDecimals(\\n            quote.baseCost64x64,\\n            l.getTokenDecimals(isCall)\\n        );\\n\\n        feeCost = ABDKMath64x64Token.toDecimals(\\n            quote.feeCost64x64,\\n            l.getTokenDecimals(isCall)\\n        );\\n\\n        uint256 longTokenId = PoolStorage.formatTokenId(\\n            PoolStorage.getTokenType(isCall, true),\\n            maturity,\\n            strike64x64\\n        );\\n\\n        _updateCLevelAverage(l, longTokenId, contractSize, quote.cLevel64x64);\\n\\n        // mint long option token for buyer\\n        _mint(account, longTokenId, contractSize);\\n\\n        int128 oldLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);\\n        // burn free liquidity tokens from other underwriters\\n        _mintShortTokenLoop(\\n            l,\\n            account,\\n            maturity,\\n            strike64x64,\\n            contractSize,\\n            baseCost,\\n            isCall\\n        );\\n        int128 newLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);\\n\\n        _setCLevel(l, oldLiquidity64x64, newLiquidity64x64, isCall);\\n\\n        // mint reserved liquidity tokens for fee receiver\\n\\n        _processAvailableFunds(\\n            FEE_RECEIVER_ADDRESS,\\n            feeCost,\\n            isCall,\\n            true,\\n            false\\n        );\\n\\n        emit Purchase(\\n            account,\\n            longTokenId,\\n            contractSize,\\n            baseCost,\\n            feeCost,\\n            newPrice64x64\\n        );\\n    }\\n\\n    /**\\n     * @notice reassign short position to new underwriter\\n     * @param l storage layout struct\\n     * @param account holder of positions to be reassigned\\n     * @param maturity timestamp of option maturity\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @param isCall true for call, false for put\\n     * @param contractSize quantity of option contract tokens to reassign\\n     * @param newPrice64x64 64x64 fixed point representation of current spot price\\n     * @return baseCost quantity of tokens required to reassign short position\\n     * @return feeCost quantity of tokens required to pay fees\\n     * @return netCollateralFreed quantity of liquidity freed\\n     */\\n    function _reassign(\\n        PoolStorage.Layout storage l,\\n        address account,\\n        uint64 maturity,\\n        int128 strike64x64,\\n        bool isCall,\\n        uint256 contractSize,\\n        int128 newPrice64x64\\n    )\\n        internal\\n        returns (\\n            uint256 baseCost,\\n            uint256 feeCost,\\n            uint256 netCollateralFreed\\n        )\\n    {\\n        (baseCost, feeCost) = _purchase(\\n            l,\\n            account,\\n            maturity,\\n            strike64x64,\\n            isCall,\\n            contractSize,\\n            newPrice64x64\\n        );\\n\\n        uint256 totalCollateralFreed = _annihilate(\\n            l,\\n            account,\\n            maturity,\\n            strike64x64,\\n            isCall,\\n            contractSize\\n        );\\n\\n        netCollateralFreed = totalCollateralFreed - baseCost - feeCost;\\n    }\\n\\n    /**\\n     * @notice exercise option on behalf of holder\\n     * @dev used for processing of expired options if passed holder is zero address\\n     * @param holder owner of long option tokens to exercise\\n     * @param longTokenId long option token id\\n     * @param contractSize quantity of tokens to exercise\\n     */\\n    function _exercise(\\n        address holder,\\n        uint256 longTokenId,\\n        uint256 contractSize\\n    ) internal {\\n        uint64 maturity;\\n        int128 strike64x64;\\n        bool isCall;\\n\\n        bool onlyExpired = holder == address(0);\\n\\n        {\\n            PoolStorage.TokenType tokenType;\\n            (tokenType, maturity, strike64x64) = PoolStorage.parseTokenId(\\n                longTokenId\\n            );\\n            require(\\n                tokenType == PoolStorage.TokenType.LONG_CALL ||\\n                    tokenType == PoolStorage.TokenType.LONG_PUT,\\n                \\\"invalid type\\\"\\n            );\\n            require(!onlyExpired || maturity < block.timestamp, \\\"not expired\\\");\\n            isCall = tokenType == PoolStorage.TokenType.LONG_CALL;\\n        }\\n\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        int128 spot64x64 = _update(l);\\n\\n        if (maturity < block.timestamp) {\\n            spot64x64 = l.getPriceUpdateAfter(maturity);\\n        }\\n\\n        require(\\n            onlyExpired ||\\n                (\\n                    isCall\\n                        ? (spot64x64 > strike64x64)\\n                        : (spot64x64 < strike64x64)\\n                ),\\n            \\\"not ITM\\\"\\n        );\\n\\n        uint256 exerciseValue = _calculateExerciseValue(\\n            l,\\n            contractSize,\\n            spot64x64,\\n            strike64x64,\\n            isCall\\n        );\\n\\n        if (onlyExpired) {\\n            // burn long option tokens from multiple holders\\n            // transfer profit to and emit Exercise event for each holder in loop\\n\\n            _burnLongTokenLoop(\\n                contractSize,\\n                exerciseValue,\\n                longTokenId,\\n                isCall\\n            );\\n        } else {\\n            // burn long option tokens from sender\\n\\n            _burnLongTokenInterval(\\n                holder,\\n                longTokenId,\\n                contractSize,\\n                exerciseValue,\\n                isCall\\n            );\\n        }\\n\\n        // burn short option tokens from multiple underwriters\\n\\n        _burnShortTokenLoop(\\n            l,\\n            maturity,\\n            strike64x64,\\n            contractSize,\\n            exerciseValue,\\n            isCall,\\n            false\\n        );\\n    }\\n\\n    function _calculateExerciseValue(\\n        PoolStorage.Layout storage l,\\n        uint256 contractSize,\\n        int128 spot64x64,\\n        int128 strike64x64,\\n        bool isCall\\n    ) internal view returns (uint256 exerciseValue) {\\n        // calculate exercise value if option is in-the-money\\n\\n        if (isCall) {\\n            if (spot64x64 > strike64x64) {\\n                exerciseValue = spot64x64.sub(strike64x64).div(spot64x64).mulu(\\n                    contractSize\\n                );\\n            }\\n        } else {\\n            if (spot64x64 < strike64x64) {\\n                exerciseValue = l.contractSizeToBaseTokenAmount(\\n                    contractSize,\\n                    strike64x64.sub(spot64x64),\\n                    false\\n                );\\n            }\\n        }\\n    }\\n\\n    function _mintShortTokenLoop(\\n        PoolStorage.Layout storage l,\\n        address buyer,\\n        uint64 maturity,\\n        int128 strike64x64,\\n        uint256 contractSize,\\n        uint256 premium,\\n        bool isCall\\n    ) internal {\\n        uint256 shortTokenId = PoolStorage.formatTokenId(\\n            PoolStorage.getTokenType(isCall, false),\\n            maturity,\\n            strike64x64\\n        );\\n\\n        uint256 tokenAmount = l.contractSizeToBaseTokenAmount(\\n            contractSize,\\n            strike64x64,\\n            isCall\\n        );\\n\\n        // calculate anticipated APY fee so that it may be reserved\\n\\n        uint256 apyFee = _calculateApyFee(\\n            l,\\n            shortTokenId,\\n            tokenAmount,\\n            maturity\\n        );\\n\\n        while (tokenAmount > 0) {\\n            address underwriter = l.liquidityQueueAscending[isCall][address(0)];\\n\\n            uint256 balance = _balanceOf(\\n                underwriter,\\n                _getFreeLiquidityTokenId(isCall)\\n            );\\n\\n            // if underwriter is in process of divestment, remove from queue\\n\\n            if (!l.getReinvestmentStatus(underwriter, isCall)) {\\n                _burn(underwriter, _getFreeLiquidityTokenId(isCall), balance);\\n                _processAvailableFunds(\\n                    underwriter,\\n                    balance,\\n                    isCall,\\n                    true,\\n                    false\\n                );\\n                _subUserTVL(l, underwriter, isCall, balance);\\n                continue;\\n            }\\n\\n            // if underwriter has insufficient liquidity, remove from queue\\n\\n            if (balance < l.getMinimumAmount(isCall)) {\\n                l.removeUnderwriter(underwriter, isCall);\\n                continue;\\n            }\\n\\n            // move interval to end of queue if underwriter is buyer\\n\\n            if (underwriter == buyer) {\\n                l.removeUnderwriter(underwriter, isCall);\\n                l.addUnderwriter(underwriter, isCall);\\n                continue;\\n            }\\n\\n            balance -= l.pendingDepositsOf(underwriter, isCall);\\n\\n            Interval memory interval;\\n\\n            // amount of liquidity provided by underwriter, accounting for reinvested premium\\n            interval.tokenAmount =\\n                (balance * (tokenAmount + premium - apyFee)) /\\n                tokenAmount;\\n\\n            // skip underwriters whose liquidity is pending deposit processing\\n\\n            if (interval.tokenAmount == 0) continue;\\n\\n            // truncate interval if underwriter has excess liquidity available\\n\\n            if (interval.tokenAmount > tokenAmount)\\n                interval.tokenAmount = tokenAmount;\\n\\n            // calculate derived interval variables\\n\\n            interval.contractSize =\\n                (contractSize * interval.tokenAmount) /\\n                tokenAmount;\\n            interval.payment = (premium * interval.tokenAmount) / tokenAmount;\\n            interval.apyFee = (apyFee * interval.tokenAmount) / tokenAmount;\\n\\n            _mintShortTokenInterval(\\n                l,\\n                underwriter,\\n                buyer,\\n                shortTokenId,\\n                interval,\\n                isCall\\n            );\\n\\n            tokenAmount -= interval.tokenAmount;\\n            contractSize -= interval.contractSize;\\n            premium -= interval.payment;\\n            apyFee -= interval.apyFee;\\n        }\\n    }\\n\\n    function _mintShortTokenInterval(\\n        PoolStorage.Layout storage l,\\n        address underwriter,\\n        address longReceiver,\\n        uint256 shortTokenId,\\n        Interval memory interval,\\n        bool isCallPool\\n    ) internal {\\n        // track prepaid APY fees\\n\\n        _reserveApyFee(l, underwriter, shortTokenId, interval.apyFee);\\n\\n        // if payment is equal to collateral amount plus APY fee, this is a manual underwrite\\n\\n        bool isManualUnderwrite = interval.payment ==\\n            interval.tokenAmount + interval.apyFee;\\n\\n        if (!isManualUnderwrite) {\\n            // burn free liquidity tokens from underwriter\\n            _burn(\\n                underwriter,\\n                _getFreeLiquidityTokenId(isCallPool),\\n                interval.tokenAmount + interval.apyFee - interval.payment\\n            );\\n        }\\n\\n        // mint short option tokens for underwriter\\n        _mint(underwriter, shortTokenId, interval.contractSize);\\n\\n        _addUserTVL(\\n            l,\\n            underwriter,\\n            isCallPool,\\n            interval.payment - interval.apyFee\\n        );\\n\\n        emit Underwrite(\\n            underwriter,\\n            longReceiver,\\n            shortTokenId,\\n            interval.contractSize,\\n            isManualUnderwrite ? 0 : interval.payment,\\n            isManualUnderwrite\\n        );\\n    }\\n\\n    function _burnLongTokenLoop(\\n        uint256 contractSize,\\n        uint256 exerciseValue,\\n        uint256 longTokenId,\\n        bool isCallPool\\n    ) internal {\\n        EnumerableSet.AddressSet storage holders = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[longTokenId];\\n\\n        while (contractSize > 0) {\\n            address longTokenHolder = holders.at(holders.length() - 1);\\n\\n            uint256 intervalContractSize = _balanceOf(\\n                longTokenHolder,\\n                longTokenId\\n            );\\n\\n            // truncate interval if holder has excess long position size\\n\\n            if (intervalContractSize > contractSize)\\n                intervalContractSize = contractSize;\\n\\n            uint256 intervalExerciseValue = (exerciseValue *\\n                intervalContractSize) / contractSize;\\n\\n            _burnLongTokenInterval(\\n                longTokenHolder,\\n                longTokenId,\\n                intervalContractSize,\\n                intervalExerciseValue,\\n                isCallPool\\n            );\\n\\n            contractSize -= intervalContractSize;\\n            exerciseValue -= intervalExerciseValue;\\n        }\\n    }\\n\\n    function _burnLongTokenInterval(\\n        address holder,\\n        uint256 longTokenId,\\n        uint256 contractSize,\\n        uint256 exerciseValue,\\n        bool isCallPool\\n    ) internal {\\n        _burn(holder, longTokenId, contractSize);\\n\\n        if (exerciseValue > 0) {\\n            _processAvailableFunds(\\n                holder,\\n                exerciseValue,\\n                isCallPool,\\n                true,\\n                true\\n            );\\n        }\\n\\n        emit Exercise(holder, longTokenId, contractSize, exerciseValue, 0);\\n    }\\n\\n    function _burnShortTokenLoop(\\n        PoolStorage.Layout storage l,\\n        uint64 maturity,\\n        int128 strike64x64,\\n        uint256 contractSize,\\n        uint256 payment,\\n        bool isCall,\\n        bool onlyBuybackLiquidity\\n    ) internal {\\n        uint256 shortTokenId = PoolStorage.formatTokenId(\\n            PoolStorage.getTokenType(isCall, false),\\n            maturity,\\n            strike64x64\\n        );\\n\\n        uint256 tokenAmount = l.contractSizeToBaseTokenAmount(\\n            contractSize,\\n            strike64x64,\\n            isCall\\n        );\\n\\n        // calculate unconsumed APY fee so that it may be refunded\\n\\n        uint256 apyFee = _calculateApyFee(\\n            l,\\n            shortTokenId,\\n            tokenAmount,\\n            maturity\\n        );\\n\\n        EnumerableSet.AddressSet storage underwriters = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[shortTokenId];\\n\\n        uint256 index = underwriters.length();\\n\\n        while (contractSize > 0) {\\n            address underwriter = underwriters.at(--index);\\n\\n            // skip underwriters who do not provide buyback liqudity, if applicable\\n\\n            if (\\n                onlyBuybackLiquidity && !l.isBuybackEnabled[underwriter][isCall]\\n            ) continue;\\n\\n            Interval memory interval;\\n\\n            // amount of liquidity provided by underwriter\\n            interval.contractSize = _balanceOf(underwriter, shortTokenId);\\n\\n            // truncate interval if underwriter has excess short position size\\n\\n            if (interval.contractSize > contractSize)\\n                interval.contractSize = contractSize;\\n\\n            // calculate derived interval variables\\n\\n            interval.tokenAmount =\\n                (tokenAmount * interval.contractSize) /\\n                contractSize;\\n            interval.payment = (payment * interval.contractSize) / contractSize;\\n            interval.apyFee = (apyFee * interval.contractSize) / contractSize;\\n\\n            _burnShortTokenInterval(\\n                l,\\n                underwriter,\\n                shortTokenId,\\n                interval,\\n                isCall,\\n                onlyBuybackLiquidity\\n            );\\n\\n            contractSize -= interval.contractSize;\\n            tokenAmount -= interval.tokenAmount;\\n            payment -= interval.payment;\\n            apyFee -= interval.apyFee;\\n        }\\n    }\\n\\n    function _burnShortTokenInterval(\\n        PoolStorage.Layout storage l,\\n        address underwriter,\\n        uint256 shortTokenId,\\n        Interval memory interval,\\n        bool isCallPool,\\n        bool isSale\\n    ) internal {\\n        // track prepaid APY fees\\n\\n        uint256 refundWithRebate = interval.apyFee +\\n            _fulfillApyFee(\\n                l,\\n                underwriter,\\n                shortTokenId,\\n                interval.contractSize,\\n                interval.apyFee,\\n                isCallPool\\n            );\\n\\n        // burn short option tokens from underwriter\\n        _burn(underwriter, shortTokenId, interval.contractSize);\\n\\n        bool divest = !l.getReinvestmentStatus(underwriter, isCallPool);\\n\\n        _processAvailableFunds(\\n            underwriter,\\n            interval.tokenAmount - interval.payment + refundWithRebate,\\n            isCallPool,\\n            divest,\\n            false\\n        );\\n\\n        if (divest) {\\n            _subUserTVL(l, underwriter, isCallPool, interval.tokenAmount);\\n        } else {\\n            if (refundWithRebate > interval.payment) {\\n                _addUserTVL(\\n                    l,\\n                    underwriter,\\n                    isCallPool,\\n                    refundWithRebate - interval.payment\\n                );\\n            } else if (interval.payment > refundWithRebate) {\\n                _subUserTVL(\\n                    l,\\n                    underwriter,\\n                    isCallPool,\\n                    interval.payment - refundWithRebate\\n                );\\n            }\\n        }\\n\\n        if (isSale) {\\n            emit AssignSale(\\n                underwriter,\\n                shortTokenId,\\n                interval.tokenAmount - interval.payment,\\n                interval.contractSize\\n            );\\n        } else {\\n            emit AssignExercise(\\n                underwriter,\\n                shortTokenId,\\n                interval.tokenAmount - interval.payment,\\n                interval.contractSize,\\n                0\\n            );\\n        }\\n    }\\n\\n    function _calculateApyFee(\\n        PoolStorage.Layout storage l,\\n        uint256 shortTokenId,\\n        uint256 tokenAmount,\\n        uint64 maturity\\n    ) internal view returns (uint256 apyFee) {\\n        if (block.timestamp < maturity) {\\n            int128 apyFeeRate64x64 = _totalSupply(shortTokenId) == 0\\n                ? FEE_APY_64x64\\n                : l.feeReserveRates[shortTokenId];\\n\\n            apyFee = apyFeeRate64x64.mulu(\\n                (tokenAmount * (maturity - block.timestamp)) / (365 days)\\n            );\\n        }\\n    }\\n\\n    function _reserveApyFee(\\n        PoolStorage.Layout storage l,\\n        address underwriter,\\n        uint256 shortTokenId,\\n        uint256 amount\\n    ) internal {\\n        l.feesReserved[underwriter][shortTokenId] += amount;\\n\\n        emit APYFeeReserved(underwriter, shortTokenId, amount);\\n    }\\n\\n    /**\\n     * @notice credit fee receiver with fees earned and calculate rebate for underwriter\\n     * @dev short tokens which have acrrued fee must not be burned or transferred until after this helper is called\\n     * @param l storage layout struct\\n     * @param underwriter holder of short position who reserved fees\\n     * @param shortTokenId short token id whose reserved fees to pay and rebate\\n     * @param intervalContractSize size of position for which to calculate accrued fees\\n     * @param intervalApyFee quantity of fees reserved but not yet accrued\\n     * @param isCallPool true for call, false for put\\n     */\\n    function _fulfillApyFee(\\n        PoolStorage.Layout storage l,\\n        address underwriter,\\n        uint256 shortTokenId,\\n        uint256 intervalContractSize,\\n        uint256 intervalApyFee,\\n        bool isCallPool\\n    ) internal returns (uint256 rebate) {\\n        if (intervalApyFee == 0) return 0;\\n\\n        // calculate proportion of fees reserved corresponding to interval\\n\\n        uint256 feesReserved = l.feesReserved[underwriter][shortTokenId];\\n\\n        uint256 intervalFeesReserved = (feesReserved * intervalContractSize) /\\n            _balanceOf(underwriter, shortTokenId);\\n\\n        // deduct fees for time not elapsed\\n\\n        l.feesReserved[underwriter][shortTokenId] -= intervalFeesReserved;\\n\\n        // apply rebate to fees accrued\\n\\n        rebate = _fetchFeeDiscount64x64(underwriter).mulu(\\n            intervalFeesReserved - intervalApyFee\\n        );\\n\\n        // credit fee receiver with fees paid\\n\\n        uint256 intervalFeesPaid = intervalFeesReserved -\\n            intervalApyFee -\\n            rebate;\\n\\n        _processAvailableFunds(\\n            FEE_RECEIVER_ADDRESS,\\n            intervalFeesPaid,\\n            isCallPool,\\n            true,\\n            false\\n        );\\n\\n        emit APYFeePaid(underwriter, shortTokenId, intervalFeesPaid);\\n    }\\n\\n    function _addToDepositQueue(\\n        address account,\\n        uint256 amount,\\n        bool isCallPool\\n    ) internal {\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        _mint(account, _getFreeLiquidityTokenId(isCallPool), amount);\\n\\n        uint256 nextBatch = (block.timestamp / BATCHING_PERIOD) *\\n            BATCHING_PERIOD +\\n            BATCHING_PERIOD;\\n        l.pendingDeposits[account][nextBatch][isCallPool] += amount;\\n\\n        PoolStorage.BatchData storage batchData = l.nextDeposits[isCallPool];\\n        batchData.totalPendingDeposits += amount;\\n        batchData.eta = nextBatch;\\n    }\\n\\n    function _processPendingDeposits(PoolStorage.Layout storage l, bool isCall)\\n        internal\\n    {\\n        PoolStorage.BatchData storage batchData = l.nextDeposits[isCall];\\n\\n        if (batchData.eta == 0 || block.timestamp < batchData.eta) return;\\n\\n        int128 oldLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);\\n\\n        _setCLevel(\\n            l,\\n            oldLiquidity64x64,\\n            oldLiquidity64x64.add(\\n                ABDKMath64x64Token.fromDecimals(\\n                    batchData.totalPendingDeposits,\\n                    l.getTokenDecimals(isCall)\\n                )\\n            ),\\n            isCall\\n        );\\n\\n        delete l.nextDeposits[isCall];\\n    }\\n\\n    function _getFreeLiquidityTokenId(bool isCall)\\n        internal\\n        view\\n        returns (uint256 freeLiqTokenId)\\n    {\\n        freeLiqTokenId = isCall\\n            ? UNDERLYING_FREE_LIQ_TOKEN_ID\\n            : BASE_FREE_LIQ_TOKEN_ID;\\n    }\\n\\n    function _getReservedLiquidityTokenId(bool isCall)\\n        internal\\n        view\\n        returns (uint256 reservedLiqTokenId)\\n    {\\n        reservedLiqTokenId = isCall\\n            ? UNDERLYING_RESERVED_LIQ_TOKEN_ID\\n            : BASE_RESERVED_LIQ_TOKEN_ID;\\n    }\\n\\n    function _setCLevel(\\n        PoolStorage.Layout storage l,\\n        int128 oldLiquidity64x64,\\n        int128 newLiquidity64x64,\\n        bool isCallPool\\n    ) internal {\\n        int128 oldCLevel64x64 = l.getDecayAdjustedCLevel64x64(isCallPool);\\n\\n        int128 cLevel64x64 = l.applyCLevelLiquidityChangeAdjustment(\\n            oldCLevel64x64,\\n            oldLiquidity64x64,\\n            newLiquidity64x64,\\n            isCallPool\\n        );\\n\\n        l.setCLevel(cLevel64x64, isCallPool);\\n\\n        emit UpdateCLevel(\\n            isCallPool,\\n            cLevel64x64,\\n            oldLiquidity64x64,\\n            newLiquidity64x64\\n        );\\n    }\\n\\n    function _updateCLevelAverage(\\n        PoolStorage.Layout storage l,\\n        uint256 longTokenId,\\n        uint256 contractSize,\\n        int128 cLevel64x64\\n    ) internal {\\n        int128 supply64x64 = ABDKMath64x64Token.fromDecimals(\\n            _totalSupply(longTokenId),\\n            l.underlyingDecimals\\n        );\\n        int128 contractSize64x64 = ABDKMath64x64Token.fromDecimals(\\n            contractSize,\\n            l.underlyingDecimals\\n        );\\n\\n        l.avgCLevel64x64[longTokenId] = l\\n            .avgCLevel64x64[longTokenId]\\n            .mul(supply64x64)\\n            .add(cLevel64x64.mul(contractSize64x64))\\n            .div(supply64x64.add(contractSize64x64));\\n    }\\n\\n    /**\\n     * @notice calculate and store updated market state\\n     * @param l storage layout struct\\n     * @return newPrice64x64 64x64 fixed point representation of current spot price\\n     */\\n    function _update(PoolStorage.Layout storage l)\\n        internal\\n        returns (int128 newPrice64x64)\\n    {\\n        if (l.updatedAt == block.timestamp) {\\n            return (l.getPriceUpdate(block.timestamp));\\n        }\\n\\n        newPrice64x64 = l.fetchPriceUpdate();\\n\\n        if (l.getPriceUpdate(block.timestamp) == 0) {\\n            l.setPriceUpdate(block.timestamp, newPrice64x64);\\n        }\\n\\n        l.updatedAt = block.timestamp;\\n\\n        _processPendingDeposits(l, true);\\n        _processPendingDeposits(l, false);\\n    }\\n\\n    /**\\n     * @notice transfer ERC20 tokens to message sender\\n     * @param token ERC20 token address\\n     * @param amount quantity of token to transfer\\n     */\\n    function _pushTo(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) return;\\n\\n        require(IERC20(token).transfer(to, amount), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice transfer ERC20 tokens from message sender\\n     * @param l storage layout struct\\n     * @param from address from which tokens are pulled from\\n     * @param amount quantity of token to transfer\\n     * @param isCallPool whether funds correspond to call or put pool\\n     * @param creditMessageValue whether to attempt to treat message value as credit\\n     */\\n    function _pullFrom(\\n        PoolStorage.Layout storage l,\\n        address from,\\n        uint256 amount,\\n        bool isCallPool,\\n        bool creditMessageValue\\n    ) internal {\\n        uint256 credit;\\n\\n        if (creditMessageValue) {\\n            credit = _creditMessageValue(amount, isCallPool);\\n        }\\n\\n        if (amount > credit) {\\n            credit += _creditReservedLiquidity(\\n                from,\\n                amount - credit,\\n                isCallPool\\n            );\\n        }\\n\\n        if (amount > credit) {\\n            require(\\n                IERC20(l.getPoolToken(isCallPool)).transferFrom(\\n                    from,\\n                    address(this),\\n                    amount - credit\\n                ),\\n                \\\"ERC20 transfer failed\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice transfer or reinvest available user funds\\n     * @param account owner of funds\\n     * @param amount quantity of funds available\\n     * @param isCallPool whether funds correspond to call or put pool\\n     * @param divest whether to reserve funds or reinvest\\n     * @param transferOnDivest whether to transfer divested funds to owner\\n     */\\n    function _processAvailableFunds(\\n        address account,\\n        uint256 amount,\\n        bool isCallPool,\\n        bool divest,\\n        bool transferOnDivest\\n    ) internal {\\n        if (divest) {\\n            if (transferOnDivest) {\\n                _pushTo(\\n                    account,\\n                    PoolStorage.layout().getPoolToken(isCallPool),\\n                    amount\\n                );\\n            } else {\\n                _mint(\\n                    account,\\n                    _getReservedLiquidityTokenId(isCallPool),\\n                    amount\\n                );\\n            }\\n        } else {\\n            _addToDepositQueue(account, amount, isCallPool);\\n        }\\n    }\\n\\n    /**\\n     * @notice validate that pool accepts ether deposits and calculate credit amount from message value\\n     * @param amount total deposit quantity\\n     * @param isCallPool whether to deposit underlying in the call pool or base in the put pool\\n     * @return credit quantity of credit to apply\\n     */\\n    function _creditMessageValue(uint256 amount, bool isCallPool)\\n        internal\\n        returns (uint256 credit)\\n    {\\n        if (msg.value > 0) {\\n            require(\\n                PoolStorage.layout().getPoolToken(isCallPool) == WETH_ADDRESS,\\n                \\\"not WETH deposit\\\"\\n            );\\n\\n            if (msg.value > amount) {\\n                unchecked {\\n                    (bool success, ) = payable(msg.sender).call{\\n                        value: msg.value - amount\\n                    }(\\\"\\\");\\n\\n                    require(success, \\\"ETH refund failed\\\");\\n\\n                    credit = amount;\\n                }\\n            } else {\\n                credit = msg.value;\\n            }\\n\\n            IWETH(WETH_ADDRESS).deposit{value: credit}();\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate credit amount from reserved liquidity\\n     * @param account address whose reserved liquidity to use as credit\\n     * @param amount total deposit quantity\\n     * @param isCallPool whether to deposit underlying in the call pool or base in the put pool\\n     * @return credit quantity of credit to apply\\n     */\\n    function _creditReservedLiquidity(\\n        address account,\\n        uint256 amount,\\n        bool isCallPool\\n    ) internal returns (uint256 credit) {\\n        uint256 reservedLiqTokenId = _getReservedLiquidityTokenId(isCallPool);\\n\\n        uint256 balance = _balanceOf(account, reservedLiqTokenId);\\n\\n        if (balance > 0) {\\n            credit = balance > amount ? amount : balance;\\n\\n            _burn(account, reservedLiqTokenId, credit);\\n        }\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        _mint(account, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function _addUserTVL(\\n        PoolStorage.Layout storage l,\\n        address user,\\n        bool isCallPool,\\n        uint256 amount\\n    ) internal {\\n        uint256 userTVL = l.userTVL[user][isCallPool];\\n        uint256 totalTVL = l.totalTVL[isCallPool];\\n\\n        IPremiaMining(PREMIA_MINING_ADDRESS).allocatePending(\\n            user,\\n            address(this),\\n            isCallPool,\\n            userTVL,\\n            userTVL + amount,\\n            totalTVL\\n        );\\n\\n        l.userTVL[user][isCallPool] = userTVL + amount;\\n        l.totalTVL[isCallPool] = totalTVL + amount;\\n    }\\n\\n    function _subUserTVL(\\n        PoolStorage.Layout storage l,\\n        address user,\\n        bool isCallPool,\\n        uint256 amount\\n    ) internal {\\n        uint256 userTVL = l.userTVL[user][isCallPool];\\n        uint256 totalTVL = l.totalTVL[isCallPool];\\n\\n        uint256 newUserTVL;\\n        uint256 newTotalTVL;\\n\\n        if (userTVL > amount) {\\n            newUserTVL = userTVL - amount;\\n        }\\n\\n        if (totalTVL > amount) {\\n            newTotalTVL = totalTVL - amount;\\n        }\\n\\n        IPremiaMining(PREMIA_MINING_ADDRESS).allocatePending(\\n            user,\\n            address(this),\\n            isCallPool,\\n            userTVL,\\n            newUserTVL,\\n            totalTVL\\n        );\\n\\n        l.userTVL[user][isCallPool] = newUserTVL;\\n        l.totalTVL[isCallPool] = newTotalTVL;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: track eligible underwriters\\n     * @param operator transaction sender\\n     * @param from token sender\\n     * @param to token receiver\\n     * @param ids token ids transferred\\n     * @param amounts token quantities transferred\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        PoolStorage.Layout storage l = PoolStorage.layout();\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            if (amount == 0) continue;\\n\\n            if (from == address(0)) {\\n                l.tokenIds.add(id);\\n            }\\n\\n            if (to == address(0) && _totalSupply(id) == 0) {\\n                l.tokenIds.remove(id);\\n            }\\n\\n            // prevent transfer of free and reserved liquidity during waiting period\\n\\n            if (\\n                id == UNDERLYING_FREE_LIQ_TOKEN_ID ||\\n                id == BASE_FREE_LIQ_TOKEN_ID ||\\n                id == UNDERLYING_RESERVED_LIQ_TOKEN_ID ||\\n                id == BASE_RESERVED_LIQ_TOKEN_ID\\n            ) {\\n                if (from != address(0) && to != address(0)) {\\n                    bool isCallPool = id == UNDERLYING_FREE_LIQ_TOKEN_ID ||\\n                        id == UNDERLYING_RESERVED_LIQ_TOKEN_ID;\\n\\n                    require(\\n                        l.depositedAt[from][isCallPool] + (1 days) <\\n                            block.timestamp,\\n                        \\\"liq lock 1d\\\"\\n                    );\\n                }\\n            }\\n\\n            if (\\n                id == UNDERLYING_FREE_LIQ_TOKEN_ID ||\\n                id == BASE_FREE_LIQ_TOKEN_ID\\n            ) {\\n                bool isCallPool = id == UNDERLYING_FREE_LIQ_TOKEN_ID;\\n                uint256 minimum = l.getMinimumAmount(isCallPool);\\n\\n                if (from != address(0)) {\\n                    uint256 balance = _balanceOf(from, id);\\n\\n                    if (balance > minimum && balance <= amount + minimum) {\\n                        require(\\n                            balance - l.pendingDepositsOf(from, isCallPool) >=\\n                                amount,\\n                            \\\"Insuf balance\\\"\\n                        );\\n                        l.removeUnderwriter(from, isCallPool);\\n                    }\\n\\n                    if (to != address(0)) {\\n                        _subUserTVL(l, from, isCallPool, amount);\\n                        _addUserTVL(l, to, isCallPool, amount);\\n                    }\\n                }\\n\\n                if (to != address(0)) {\\n                    uint256 balance = _balanceOf(to, id);\\n\\n                    if (balance <= minimum && balance + amount >= minimum) {\\n                        l.addUnderwriter(to, isCallPool);\\n                    }\\n                }\\n            }\\n\\n            // Update userTVL on SHORT options transfers\\n            (PoolStorage.TokenType tokenType, , ) = PoolStorage.parseTokenId(\\n                id\\n            );\\n\\n            if (\\n                tokenType == PoolStorage.TokenType.SHORT_CALL ||\\n                tokenType == PoolStorage.TokenType.SHORT_PUT\\n            ) {\\n                _beforeShortTokenTransfer(l, from, to, id, amount);\\n            }\\n        }\\n    }\\n\\n    function _beforeShortTokenTransfer(\\n        PoolStorage.Layout storage l,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) private {\\n        // total supply has already been updated, so compare to amount rather than 0\\n        if (from == address(0) && _totalSupply(id) == amount) {\\n            l.feeReserveRates[id] = FEE_APY_64x64;\\n        }\\n\\n        if (to == address(0) && _totalSupply(id) == 0) {\\n            delete l.feeReserveRates[id];\\n        }\\n\\n        if (from != address(0) && to != address(0)) {\\n            (\\n                PoolStorage.TokenType tokenType,\\n                uint64 maturity,\\n                int128 strike64x64\\n            ) = PoolStorage.parseTokenId(id);\\n\\n            bool isCall = tokenType == PoolStorage.TokenType.SHORT_CALL;\\n            uint256 collateral = l.contractSizeToBaseTokenAmount(\\n                amount,\\n                strike64x64,\\n                isCall\\n            );\\n\\n            uint256 intervalApyFee = _calculateApyFee(\\n                l,\\n                id,\\n                collateral,\\n                maturity\\n            );\\n\\n            uint256 rebate = _fulfillApyFee(\\n                l,\\n                from,\\n                id,\\n                amount,\\n                intervalApyFee,\\n                isCall\\n            );\\n\\n            _reserveApyFee(l, to, id, intervalApyFee);\\n\\n            bool divest = !l.getReinvestmentStatus(from, isCall);\\n\\n            if (rebate > 0) {\\n                _processAvailableFunds(from, rebate, isCall, divest, false);\\n            }\\n\\n            _subUserTVL(\\n                l,\\n                from,\\n                isCall,\\n                divest ? collateral : collateral - rebate\\n            );\\n\\n            _addUserTVL(l, to, isCall, collateral);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IPoolExercise.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Pool interface for exercising and processing of expired options\\r\\n */\\r\\ninterface IPoolExercise {\\r\\n    /**\\r\\n     * @notice exercise option on behalf of holder\\r\\n     * @param holder owner of long option tokens to exercise\\r\\n     * @param longTokenId long option token id\\r\\n     * @param contractSize quantity of tokens to exercise\\r\\n     */\\r\\n    function exerciseFrom(\\r\\n        address holder,\\r\\n        uint256 longTokenId,\\r\\n        uint256 contractSize\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice process expired option, freeing liquidity and distributing profits\\r\\n     * @param longTokenId long option token id\\r\\n     * @param contractSize quantity of tokens to process\\r\\n     */\\r\\n    function processExpired(uint256 longTokenId, uint256 contractSize) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(address holder, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from '../base/ERC1155Base.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155Base,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id) public view virtual returns (uint256) {\\n        return _totalHolders(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (address[] memory)\\n    {\\n        return _accountsByToken(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        return _tokensByAccount(account);\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155EnumerableInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '../token/ERC20/IERC20.sol';\\nimport { IERC20Metadata } from '../token/ERC20/metadata/IERC20Metadata.sol';\\n\\n/**\\n * @title WETH (Wrapped ETH) interface\\n */\\ninterface IWETH is IERC20, IERC20Metadata {\\n    /**\\n     * @notice convert ETH to WETH\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice convert WETH to ETH\\n     * @dev if caller is a contract, it should have a fallback or receive function\\n     * @param amount quantity of WETH to convert, denominated in wei\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {AggregatorInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {EnumerableSet, ERC1155EnumerableStorage} from \\\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\\\";\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\nimport {ABDKMath64x64Token} from \\\"../libraries/ABDKMath64x64Token.sol\\\";\\r\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\r\\n\\r\\nlibrary PoolStorage {\\r\\n    using ABDKMath64x64 for int128;\\r\\n    using PoolStorage for PoolStorage.Layout;\\r\\n\\r\\n    enum TokenType {\\r\\n        UNDERLYING_FREE_LIQ,\\r\\n        BASE_FREE_LIQ,\\r\\n        UNDERLYING_RESERVED_LIQ,\\r\\n        BASE_RESERVED_LIQ,\\r\\n        LONG_CALL,\\r\\n        SHORT_CALL,\\r\\n        LONG_PUT,\\r\\n        SHORT_PUT\\r\\n    }\\r\\n\\r\\n    struct PoolSettings {\\r\\n        address underlying;\\r\\n        address base;\\r\\n        address underlyingOracle;\\r\\n        address baseOracle;\\r\\n    }\\r\\n\\r\\n    struct QuoteArgsInternal {\\r\\n        address feePayer; // address of the fee payer\\r\\n        uint64 maturity; // timestamp of option maturity\\r\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\r\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\r\\n        uint256 contractSize; // size of option contract\\r\\n        bool isCall; // true for call, false for put\\r\\n    }\\r\\n\\r\\n    struct QuoteResultInternal {\\r\\n        int128 baseCost64x64; // 64x64 fixed point representation of option cost denominated in underlying currency (without fee)\\r\\n        int128 feeCost64x64; // 64x64 fixed point representation of option fee cost denominated in underlying currency for call, or base currency for put\\r\\n        int128 cLevel64x64; // 64x64 fixed point representation of C-Level of Pool after purchase\\r\\n        int128 slippageCoefficient64x64; // 64x64 fixed point representation of slippage coefficient for given order size\\r\\n    }\\r\\n\\r\\n    struct BatchData {\\r\\n        uint256 eta;\\r\\n        uint256 totalPendingDeposits;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.storage.Pool\\\");\\r\\n\\r\\n    uint256 private constant C_DECAY_BUFFER = 12 hours;\\r\\n    uint256 private constant C_DECAY_INTERVAL = 4 hours;\\r\\n\\r\\n    struct Layout {\\r\\n        // ERC20 token addresses\\r\\n        address base;\\r\\n        address underlying;\\r\\n        // AggregatorV3Interface oracle addresses\\r\\n        address baseOracle;\\r\\n        address underlyingOracle;\\r\\n        // token metadata\\r\\n        uint8 underlyingDecimals;\\r\\n        uint8 baseDecimals;\\r\\n        // minimum amounts\\r\\n        uint256 baseMinimum;\\r\\n        uint256 underlyingMinimum;\\r\\n        // deposit caps\\r\\n        uint256 _deprecated_basePoolCap;\\r\\n        uint256 _deprecated_underlyingPoolCap;\\r\\n        // market state\\r\\n        int128 _deprecated_steepness64x64;\\r\\n        int128 cLevelBase64x64;\\r\\n        int128 cLevelUnderlying64x64;\\r\\n        uint256 cLevelBaseUpdatedAt;\\r\\n        uint256 cLevelUnderlyingUpdatedAt;\\r\\n        uint256 updatedAt;\\r\\n        // User -> isCall -> depositedAt\\r\\n        mapping(address => mapping(bool => uint256)) depositedAt;\\r\\n        mapping(address => mapping(bool => uint256)) divestmentTimestamps;\\r\\n        // doubly linked list of free liquidity intervals\\r\\n        // isCall -> User -> User\\r\\n        mapping(bool => mapping(address => address)) liquidityQueueAscending;\\r\\n        mapping(bool => mapping(address => address)) liquidityQueueDescending;\\r\\n        // minimum resolution price bucket => price\\r\\n        mapping(uint256 => int128) bucketPrices64x64;\\r\\n        // sequence id (minimum resolution price bucket / 256) => price update sequence\\r\\n        mapping(uint256 => uint256) priceUpdateSequences;\\r\\n        // isCall -> batch data\\r\\n        mapping(bool => BatchData) nextDeposits;\\r\\n        // user -> batch timestamp -> isCall -> pending amount\\r\\n        mapping(address => mapping(uint256 => mapping(bool => uint256))) pendingDeposits;\\r\\n        EnumerableSet.UintSet tokenIds;\\r\\n        // user -> isCallPool -> total value locked of user (Used for liquidity mining)\\r\\n        mapping(address => mapping(bool => uint256)) userTVL;\\r\\n        // isCallPool -> total value locked\\r\\n        mapping(bool => uint256) totalTVL;\\r\\n        // steepness values\\r\\n        int128 steepnessBase64x64;\\r\\n        int128 steepnessUnderlying64x64;\\r\\n        // User -> isCallPool -> isBuybackEnabled\\r\\n        mapping(address => mapping(bool => bool)) isBuybackEnabled;\\r\\n        // LongTokenId -> averageC\\r\\n        mapping(uint256 => int128) avgCLevel64x64;\\r\\n        // APY fee tracking\\r\\n        // underwriter -> shortTokenId -> amount\\r\\n        mapping(address => mapping(uint256 => uint256)) feesReserved;\\r\\n        // shortTokenId -> 64x64 fixed point representation of apy fee\\r\\n        mapping(uint256 => int128) feeReserveRates;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate ERC1155 token id for given option parameters\\r\\n     * @param tokenType TokenType enum\\r\\n     * @param maturity timestamp of option maturity\\r\\n     * @param strike64x64 64x64 fixed point representation of strike price\\r\\n     * @return tokenId token id\\r\\n     */\\r\\n    function formatTokenId(\\r\\n        TokenType tokenType,\\r\\n        uint64 maturity,\\r\\n        int128 strike64x64\\r\\n    ) internal pure returns (uint256 tokenId) {\\r\\n        tokenId =\\r\\n            (uint256(tokenType) << 248) +\\r\\n            (uint256(maturity) << 128) +\\r\\n            uint256(int256(strike64x64));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice derive option maturity and strike price from ERC1155 token id\\r\\n     * @param tokenId token id\\r\\n     * @return tokenType TokenType enum\\r\\n     * @return maturity timestamp of option maturity\\r\\n     * @return strike64x64 option strike price\\r\\n     */\\r\\n    function parseTokenId(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            TokenType tokenType,\\r\\n            uint64 maturity,\\r\\n            int128 strike64x64\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            tokenType := shr(248, tokenId)\\r\\n            maturity := shr(128, tokenId)\\r\\n            strike64x64 := tokenId\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenType(bool isCall, bool isLong)\\r\\n        internal\\r\\n        pure\\r\\n        returns (TokenType tokenType)\\r\\n    {\\r\\n        if (isCall) {\\r\\n            tokenType = isLong ? TokenType.LONG_CALL : TokenType.SHORT_CALL;\\r\\n        } else {\\r\\n            tokenType = isLong ? TokenType.LONG_PUT : TokenType.SHORT_PUT;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPoolToken(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (address token)\\r\\n    {\\r\\n        token = isCall ? l.underlying : l.base;\\r\\n    }\\r\\n\\r\\n    function getTokenDecimals(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint8 decimals)\\r\\n    {\\r\\n        decimals = isCall ? l.underlyingDecimals : l.baseDecimals;\\r\\n    }\\r\\n\\r\\n    function getMinimumAmount(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 minimumAmount)\\r\\n    {\\r\\n        minimumAmount = isCall ? l.underlyingMinimum : l.baseMinimum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get the total supply of free liquidity tokens, minus pending deposits\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return 64x64 fixed point representation of total free liquidity\\r\\n     */\\r\\n    function totalFreeLiquiditySupply64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        uint256 tokenId = formatTokenId(\\r\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        return\\r\\n            ABDKMath64x64Token.fromDecimals(\\r\\n                ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\r\\n                    l.totalPendingDeposits(isCall),\\r\\n                l.getTokenDecimals(isCall)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getReinvestmentStatus(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 timestamp = l.divestmentTimestamps[account][isCallPool];\\r\\n        return timestamp == 0 || timestamp > block.timestamp;\\r\\n    }\\r\\n\\r\\n    function addUnderwriter(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        if (_isInQueue(account, asc, desc)) return;\\r\\n\\r\\n        address last = desc[address(0)];\\r\\n\\r\\n        asc[last] = account;\\r\\n        desc[account] = last;\\r\\n        desc[address(0)] = account;\\r\\n    }\\r\\n\\r\\n    function removeUnderwriter(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        if (!_isInQueue(account, asc, desc)) return;\\r\\n\\r\\n        address prev = desc[account];\\r\\n        address next = asc[account];\\r\\n        asc[prev] = next;\\r\\n        desc[next] = prev;\\r\\n        delete asc[account];\\r\\n        delete desc[account];\\r\\n    }\\r\\n\\r\\n    function isInQueue(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (bool) {\\r\\n        mapping(address => address) storage asc = l.liquidityQueueAscending[\\r\\n            isCallPool\\r\\n        ];\\r\\n        mapping(address => address) storage desc = l.liquidityQueueDescending[\\r\\n            isCallPool\\r\\n        ];\\r\\n\\r\\n        return _isInQueue(account, asc, desc);\\r\\n    }\\r\\n\\r\\n    function _isInQueue(\\r\\n        address account,\\r\\n        mapping(address => address) storage asc,\\r\\n        mapping(address => address) storage desc\\r\\n    ) private view returns (bool) {\\r\\n        return asc[account] != address(0) || desc[address(0)] == account;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get current C-Level, without accounting for pending adjustments\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function getRawCLevel64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 cLevel64x64)\\r\\n    {\\r\\n        cLevel64x64 = isCall ? l.cLevelUnderlying64x64 : l.cLevelBase64x64;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get current C-Level, accounting for unrealized decay\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function getDecayAdjustedCLevel64x64(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 cLevel64x64)\\r\\n    {\\r\\n        // get raw C-Level from storage\\r\\n        cLevel64x64 = l.getRawCLevel64x64(isCall);\\r\\n\\r\\n        // account for C-Level decay\\r\\n        cLevel64x64 = l.applyCLevelDecayAdjustment(cLevel64x64, isCall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get updated C-Level and pool liquidity level, accounting for decay and pending deposits\\r\\n     * @param l storage layout struct\\r\\n     * @param isCall whether to update C-Level for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     * @return liquidity64x64 64x64 fixed point representation of new liquidity amount\\r\\n     */\\r\\n    function getRealPoolState(Layout storage l, bool isCall)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 cLevel64x64, int128 liquidity64x64)\\r\\n    {\\r\\n        PoolStorage.BatchData storage batchData = l.nextDeposits[isCall];\\r\\n\\r\\n        int128 oldCLevel64x64 = l.getDecayAdjustedCLevel64x64(isCall);\\r\\n        int128 oldLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);\\r\\n\\r\\n        if (\\r\\n            batchData.totalPendingDeposits > 0 &&\\r\\n            batchData.eta != 0 &&\\r\\n            block.timestamp >= batchData.eta\\r\\n        ) {\\r\\n            liquidity64x64 = ABDKMath64x64Token\\r\\n                .fromDecimals(\\r\\n                    batchData.totalPendingDeposits,\\r\\n                    l.getTokenDecimals(isCall)\\r\\n                )\\r\\n                .add(oldLiquidity64x64);\\r\\n\\r\\n            cLevel64x64 = l.applyCLevelLiquidityChangeAdjustment(\\r\\n                oldCLevel64x64,\\r\\n                oldLiquidity64x64,\\r\\n                liquidity64x64,\\r\\n                isCall\\r\\n            );\\r\\n        } else {\\r\\n            cLevel64x64 = oldCLevel64x64;\\r\\n            liquidity64x64 = oldLiquidity64x64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate updated C-Level, accounting for unrealized decay\\r\\n     * @param l storage layout struct\\r\\n     * @param oldCLevel64x64 64x64 fixed point representation pool C-Level before accounting for decay\\r\\n     * @param isCall whether query is for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after accounting for decay\\r\\n     */\\r\\n    function applyCLevelDecayAdjustment(\\r\\n        Layout storage l,\\r\\n        int128 oldCLevel64x64,\\r\\n        bool isCall\\r\\n    ) internal view returns (int128 cLevel64x64) {\\r\\n        uint256 timeElapsed = block.timestamp -\\r\\n            (isCall ? l.cLevelUnderlyingUpdatedAt : l.cLevelBaseUpdatedAt);\\r\\n\\r\\n        // do not apply C decay if less than 24 hours have elapsed\\r\\n\\r\\n        if (timeElapsed > C_DECAY_BUFFER) {\\r\\n            timeElapsed -= C_DECAY_BUFFER;\\r\\n        } else {\\r\\n            return oldCLevel64x64;\\r\\n        }\\r\\n\\r\\n        int128 timeIntervalsElapsed64x64 = ABDKMath64x64.divu(\\r\\n            timeElapsed,\\r\\n            C_DECAY_INTERVAL\\r\\n        );\\r\\n\\r\\n        uint256 tokenId = formatTokenId(\\r\\n            isCall ? TokenType.UNDERLYING_FREE_LIQ : TokenType.BASE_FREE_LIQ,\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        uint256 tvl = l.totalTVL[isCall];\\r\\n\\r\\n        int128 utilization = ABDKMath64x64.divu(\\r\\n            tvl -\\r\\n                (ERC1155EnumerableStorage.layout().totalSupply[tokenId] -\\r\\n                    l.totalPendingDeposits(isCall)),\\r\\n            tvl\\r\\n        );\\r\\n\\r\\n        return\\r\\n            OptionMath.calculateCLevelDecay(\\r\\n                OptionMath.CalculateCLevelDecayArgs(\\r\\n                    timeIntervalsElapsed64x64,\\r\\n                    oldCLevel64x64,\\r\\n                    utilization,\\r\\n                    0xb333333333333333, // 0.7\\r\\n                    0xe666666666666666, // 0.9\\r\\n                    0x10000000000000000, // 1.0\\r\\n                    0x10000000000000000, // 1.0\\r\\n                    0xe666666666666666, // 0.9\\r\\n                    0x56fc2a2c515da32ea // 2e\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate updated C-Level, accounting for change in liquidity\\r\\n     * @param l storage layout struct\\r\\n     * @param oldCLevel64x64 64x64 fixed point representation pool C-Level before accounting for liquidity change\\r\\n     * @param oldLiquidity64x64 64x64 fixed point representation of previous liquidity\\r\\n     * @param newLiquidity64x64 64x64 fixed point representation of current liquidity\\r\\n     * @param isCallPool whether to update C-Level for call or put pool\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level\\r\\n     */\\r\\n    function applyCLevelLiquidityChangeAdjustment(\\r\\n        Layout storage l,\\r\\n        int128 oldCLevel64x64,\\r\\n        int128 oldLiquidity64x64,\\r\\n        int128 newLiquidity64x64,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (int128 cLevel64x64) {\\r\\n        int128 steepness64x64 = isCallPool\\r\\n            ? l.steepnessUnderlying64x64\\r\\n            : l.steepnessBase64x64;\\r\\n\\r\\n        // fallback to deprecated storage value if side-specific value is not set\\r\\n        if (steepness64x64 == 0) steepness64x64 = l._deprecated_steepness64x64;\\r\\n\\r\\n        cLevel64x64 = OptionMath.calculateCLevel(\\r\\n            oldCLevel64x64,\\r\\n            oldLiquidity64x64,\\r\\n            newLiquidity64x64,\\r\\n            steepness64x64\\r\\n        );\\r\\n\\r\\n        if (cLevel64x64 < 0xb333333333333333) {\\r\\n            cLevel64x64 = int128(0xb333333333333333); // 64x64 fixed point representation of 0.7\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set C-Level to arbitrary pre-calculated value\\r\\n     * @param cLevel64x64 new C-Level of pool\\r\\n     * @param isCallPool whether to update C-Level for call or put pool\\r\\n     */\\r\\n    function setCLevel(\\r\\n        Layout storage l,\\r\\n        int128 cLevel64x64,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        if (isCallPool) {\\r\\n            l.cLevelUnderlying64x64 = cLevel64x64;\\r\\n            l.cLevelUnderlyingUpdatedAt = block.timestamp;\\r\\n        } else {\\r\\n            l.cLevelBase64x64 = cLevel64x64;\\r\\n            l.cLevelBaseUpdatedAt = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOracles(\\r\\n        Layout storage l,\\r\\n        address baseOracle,\\r\\n        address underlyingOracle\\r\\n    ) internal {\\r\\n        require(\\r\\n            AggregatorV3Interface(baseOracle).decimals() ==\\r\\n                AggregatorV3Interface(underlyingOracle).decimals(),\\r\\n            \\\"Pool: oracle decimals must match\\\"\\r\\n        );\\r\\n\\r\\n        l.baseOracle = baseOracle;\\r\\n        l.underlyingOracle = underlyingOracle;\\r\\n    }\\r\\n\\r\\n    function fetchPriceUpdate(Layout storage l)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128 price64x64)\\r\\n    {\\r\\n        int256 priceUnderlying = AggregatorInterface(l.underlyingOracle)\\r\\n            .latestAnswer();\\r\\n        int256 priceBase = AggregatorInterface(l.baseOracle).latestAnswer();\\r\\n\\r\\n        return ABDKMath64x64.divi(priceUnderlying, priceBase);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set price update for hourly bucket corresponding to given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to update\\r\\n     * @param price64x64 64x64 fixed point representation of price\\r\\n     */\\r\\n    function setPriceUpdate(\\r\\n        Layout storage l,\\r\\n        uint256 timestamp,\\r\\n        int128 price64x64\\r\\n    ) internal {\\r\\n        uint256 bucket = timestamp / (1 hours);\\r\\n        l.bucketPrices64x64[bucket] = price64x64;\\r\\n        l.priceUpdateSequences[bucket >> 8] += 1 << (255 - (bucket & 255));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get price update for hourly bucket corresponding to given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to query\\r\\n     * @return 64x64 fixed point representation of price\\r\\n     */\\r\\n    function getPriceUpdate(Layout storage l, uint256 timestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        return l.bucketPrices64x64[timestamp / (1 hours)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get first price update available following given timestamp\\r\\n     * @param l storage layout struct\\r\\n     * @param timestamp timestamp to query\\r\\n     * @return 64x64 fixed point representation of price\\r\\n     */\\r\\n    function getPriceUpdateAfter(Layout storage l, uint256 timestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (int128)\\r\\n    {\\r\\n        // price updates are grouped into hourly buckets\\r\\n        uint256 bucket = timestamp / (1 hours);\\r\\n        // divide by 256 to get the index of the relevant price update sequence\\r\\n        uint256 sequenceId = bucket >> 8;\\r\\n\\r\\n        // get position within sequence relevant to current price update\\r\\n\\r\\n        uint256 offset = bucket & 255;\\r\\n        // shift to skip buckets from earlier in sequence\\r\\n        uint256 sequence = (l.priceUpdateSequences[sequenceId] << offset) >>\\r\\n            offset;\\r\\n\\r\\n        // iterate through future sequences until a price update is found\\r\\n        // sequence corresponding to current timestamp used as upper bound\\r\\n\\r\\n        uint256 currentPriceUpdateSequenceId = block.timestamp / (256 hours);\\r\\n\\r\\n        while (sequence == 0 && sequenceId <= currentPriceUpdateSequenceId) {\\r\\n            sequence = l.priceUpdateSequences[++sequenceId];\\r\\n        }\\r\\n\\r\\n        // if no price update is found (sequence == 0) function will return 0\\r\\n        // this should never occur, as each relevant external function triggers a price update\\r\\n\\r\\n        // the most significant bit of the sequence corresponds to the offset of the relevant bucket\\r\\n\\r\\n        uint256 msb;\\r\\n\\r\\n        for (uint256 i = 128; i > 0; i >>= 1) {\\r\\n            if (sequence >> i > 0) {\\r\\n                msb += i;\\r\\n                sequence >>= i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return l.bucketPrices64x64[((sequenceId + 1) << 8) - msb - 1];\\r\\n    }\\r\\n\\r\\n    function totalPendingDeposits(Layout storage l, bool isCallPool)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return l.nextDeposits[isCallPool].totalPendingDeposits;\\r\\n    }\\r\\n\\r\\n    function pendingDepositsOf(\\r\\n        Layout storage l,\\r\\n        address account,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            l.pendingDeposits[account][l.nextDeposits[isCallPool].eta][\\r\\n                isCallPool\\r\\n            ];\\r\\n    }\\r\\n\\r\\n    function contractSizeToBaseTokenAmount(\\r\\n        Layout storage l,\\r\\n        uint256 contractSize,\\r\\n        int128 price64x64,\\r\\n        bool isCallPool\\r\\n    ) internal view returns (uint256 tokenAmount) {\\r\\n        if (isCallPool) {\\r\\n            tokenAmount = contractSize;\\r\\n        } else {\\r\\n            uint256 value = price64x64.mulu(contractSize);\\r\\n\\r\\n            int128 value64x64 = ABDKMath64x64Token.fromDecimals(\\r\\n                value,\\r\\n                l.underlyingDecimals\\r\\n            );\\r\\n\\r\\n            tokenAmount = ABDKMath64x64Token.toDecimals(\\r\\n                value64x64,\\r\\n                l.baseDecimals\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBuybackEnabled(\\r\\n        Layout storage l,\\r\\n        bool state,\\r\\n        bool isCallPool\\r\\n    ) internal {\\r\\n        l.isBuybackEnabled[msg.sender][isCallPool] = state;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ABDKMath64x64Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\n\\r\\nlibrary ABDKMath64x64Token {\\r\\n    using ABDKMath64x64 for int128;\\r\\n\\r\\n    /**\\r\\n     * @notice convert 64x64 fixed point representation of token amount to decimal\\r\\n     * @param value64x64 64x64 fixed point representation of token amount\\r\\n     * @param decimals token display decimals\\r\\n     * @return value decimal representation of token amount\\r\\n     */\\r\\n    function toDecimals(int128 value64x64, uint8 decimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 value)\\r\\n    {\\r\\n        value = value64x64.mulu(10**decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert decimal representation of token amount to 64x64 fixed point\\r\\n     * @param value decimal representation of token amount\\r\\n     * @param decimals token display decimals\\r\\n     * @return value64x64 64x64 fixed point representation of token amount\\r\\n     */\\r\\n    function fromDecimals(uint256 value, uint8 decimals)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int128 value64x64)\\r\\n    {\\r\\n        value64x64 = ABDKMath64x64.divu(value, 10**decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert 64x64 fixed point representation of token amount to wei (18 decimals)\\r\\n     * @param value64x64 64x64 fixed point representation of token amount\\r\\n     * @return value wei representation of token amount\\r\\n     */\\r\\n    function toWei(int128 value64x64) internal pure returns (uint256 value) {\\r\\n        value = toDecimals(value64x64, 18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice convert wei representation (18 decimals) of token amount to 64x64 fixed point\\r\\n     * @param value wei representation of token amount\\r\\n     * @return value64x64 64x64 fixed point representation of token amount\\r\\n     */\\r\\n    function fromWei(uint256 value) internal pure returns (int128 value64x64) {\\r\\n        value64x64 = fromDecimals(value, 18);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/OptionMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\n\\r\\nlibrary OptionMath {\\r\\n    using ABDKMath64x64 for int128;\\r\\n\\r\\n    struct QuoteArgs {\\r\\n        int128 varianceAnnualized64x64; // 64x64 fixed point representation of annualized variance\\r\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\r\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\r\\n        int128 timeToMaturity64x64; // 64x64 fixed point representation of duration of option contract (in years)\\r\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level of Pool before purchase\\r\\n        int128 oldPoolState; // 64x64 fixed point representation of current state of the pool\\r\\n        int128 newPoolState; // 64x64 fixed point representation of state of the pool after trade\\r\\n        int128 steepness64x64; // 64x64 fixed point representation of Pool state delta multiplier\\r\\n        int128 minAPY64x64; // 64x64 fixed point representation of minimum APY for capital locked up to underwrite options\\r\\n        bool isCall; // whether to price \\\"call\\\" or \\\"put\\\" option\\r\\n    }\\r\\n\\r\\n    struct CalculateCLevelDecayArgs {\\r\\n        int128 timeIntervalsElapsed64x64; // 64x64 fixed point representation of quantity of discrete arbitrary intervals elapsed since last update\\r\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level prior to accounting for decay\\r\\n        int128 utilization64x64; // 64x64 fixed point representation of pool capital utilization rate\\r\\n        int128 utilizationLowerBound64x64;\\r\\n        int128 utilizationUpperBound64x64;\\r\\n        int128 cLevelLowerBound64x64;\\r\\n        int128 cLevelUpperBound64x64;\\r\\n        int128 cConvergenceULowerBound64x64;\\r\\n        int128 cConvergenceUUpperBound64x64;\\r\\n    }\\r\\n\\r\\n    // 64x64 fixed point integer constants\\r\\n    int128 internal constant ONE_64x64 = 0x10000000000000000;\\r\\n    int128 internal constant THREE_64x64 = 0x30000000000000000;\\r\\n\\r\\n    // 64x64 fixed point constants used in Choudhury\u2019s approximation of the Black-Scholes CDF\\r\\n    int128 private constant CDF_CONST_0 = 0x09109f285df452394; // 2260 / 3989\\r\\n    int128 private constant CDF_CONST_1 = 0x19abac0ea1da65036; // 6400 / 3989\\r\\n    int128 private constant CDF_CONST_2 = 0x0d3c84b78b749bd6b; // 3300 / 3989\\r\\n\\r\\n    /**\\r\\n     * @notice recalculate C-Level based on change in liquidity\\r\\n     * @param initialCLevel64x64 64x64 fixed point representation of C-Level of Pool before update\\r\\n     * @param oldPoolState64x64 64x64 fixed point representation of liquidity in pool before update\\r\\n     * @param newPoolState64x64 64x64 fixed point representation of liquidity in pool after update\\r\\n     * @param steepness64x64 64x64 fixed point representation of steepness coefficient\\r\\n     * @return 64x64 fixed point representation of new C-Level\\r\\n     */\\r\\n    function calculateCLevel(\\r\\n        int128 initialCLevel64x64,\\r\\n        int128 oldPoolState64x64,\\r\\n        int128 newPoolState64x64,\\r\\n        int128 steepness64x64\\r\\n    ) external pure returns (int128) {\\r\\n        return\\r\\n            newPoolState64x64\\r\\n                .sub(oldPoolState64x64)\\r\\n                .div(\\r\\n                    oldPoolState64x64 > newPoolState64x64\\r\\n                        ? oldPoolState64x64\\r\\n                        : newPoolState64x64\\r\\n                )\\r\\n                .mul(steepness64x64)\\r\\n                .neg()\\r\\n                .exp()\\r\\n                .mul(initialCLevel64x64);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the price of an option using the Premia Finance model\\r\\n     * @param args arguments of quotePrice\\r\\n     * @return premiaPrice64x64 64x64 fixed point representation of Premia option price\\r\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after purchase\\r\\n     */\\r\\n    function quotePrice(QuoteArgs memory args)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            int128 premiaPrice64x64,\\r\\n            int128 cLevel64x64,\\r\\n            int128 slippageCoefficient64x64\\r\\n        )\\r\\n    {\\r\\n        int128 deltaPoolState64x64 = args\\r\\n            .newPoolState\\r\\n            .sub(args.oldPoolState)\\r\\n            .div(args.oldPoolState)\\r\\n            .mul(args.steepness64x64);\\r\\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\\r\\n\\r\\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\\r\\n            args.varianceAnnualized64x64,\\r\\n            args.strike64x64,\\r\\n            args.spot64x64,\\r\\n            args.timeToMaturity64x64,\\r\\n            args.isCall\\r\\n        );\\r\\n\\r\\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\\r\\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\\r\\n            deltaPoolState64x64\\r\\n        );\\r\\n\\r\\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\\r\\n            slippageCoefficient64x64\\r\\n        );\\r\\n\\r\\n        int128 intrinsicValue64x64;\\r\\n\\r\\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\\r\\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\\r\\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\\r\\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\\r\\n        }\\r\\n\\r\\n        int128 collateralValue64x64 = args.isCall\\r\\n            ? args.spot64x64\\r\\n            : args.strike64x64;\\r\\n\\r\\n        int128 minPrice64x64 = intrinsicValue64x64.add(\\r\\n            collateralValue64x64.mul(args.minAPY64x64).mul(\\r\\n                args.timeToMaturity64x64\\r\\n            )\\r\\n        );\\r\\n\\r\\n        if (minPrice64x64 > premiaPrice64x64) {\\r\\n            premiaPrice64x64 = minPrice64x64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the decay of C-Level based on heat diffusion function\\r\\n     * @param args structured CalculateCLevelDecayArgs\\r\\n     * @return cLevelDecayed64x64 C-Level after accounting for decay\\r\\n     */\\r\\n    function calculateCLevelDecay(CalculateCLevelDecayArgs memory args)\\r\\n        external\\r\\n        pure\\r\\n        returns (int128 cLevelDecayed64x64)\\r\\n    {\\r\\n        int128 convFHighU64x64 = (args.utilization64x64 >=\\r\\n            args.utilizationUpperBound64x64 &&\\r\\n            args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\\r\\n            ? ONE_64x64\\r\\n            : int128(0);\\r\\n\\r\\n        int128 convFLowU64x64 = (args.utilization64x64 <=\\r\\n            args.utilizationLowerBound64x64 &&\\r\\n            args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\\r\\n            ? ONE_64x64\\r\\n            : int128(0);\\r\\n\\r\\n        cLevelDecayed64x64 = args\\r\\n            .oldCLevel64x64\\r\\n            .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\\r\\n            .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\\r\\n            .mul(\\r\\n                convFLowU64x64\\r\\n                    .mul(ONE_64x64.sub(args.utilization64x64))\\r\\n                    .add(convFHighU64x64.mul(args.utilization64x64))\\r\\n                    .mul(args.timeIntervalsElapsed64x64)\\r\\n                    .neg()\\r\\n                    .exp()\\r\\n            )\\r\\n            .add(\\r\\n                args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\\r\\n                    args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the exponential decay coefficient for a given interval\\r\\n     * @param oldTimestamp timestamp of previous update\\r\\n     * @param newTimestamp current timestamp\\r\\n     * @return 64x64 fixed point representation of exponential decay coefficient\\r\\n     */\\r\\n    function _decay(uint256 oldTimestamp, uint256 newTimestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int128)\\r\\n    {\\r\\n        return\\r\\n            ONE_64x64.sub(\\r\\n                (-ABDKMath64x64.divu(newTimestamp - oldTimestamp, 7 days)).exp()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate Choudhury\u2019s approximation of the Black-Scholes CDF\\r\\n     * @param input64x64 64x64 fixed point representation of random variable\\r\\n     * @return 64x64 fixed point representation of the approximated CDF of x\\r\\n     */\\r\\n    function _N(int128 input64x64) internal pure returns (int128) {\\r\\n        // squaring via mul is cheaper than via pow\\r\\n        int128 inputSquared64x64 = input64x64.mul(input64x64);\\r\\n\\r\\n        int128 value64x64 = (-inputSquared64x64 >> 1).exp().div(\\r\\n            CDF_CONST_0.add(CDF_CONST_1.mul(input64x64.abs())).add(\\r\\n                CDF_CONST_2.mul(inputSquared64x64.add(THREE_64x64).sqrt())\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return input64x64 > 0 ? ONE_64x64.sub(value64x64) : value64x64;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the price of an option using the Black-Scholes model\\r\\n     * @param varianceAnnualized64x64 64x64 fixed point representation of annualized variance\\r\\n     * @param strike64x64 64x64 fixed point representation of strike price\\r\\n     * @param spot64x64 64x64 fixed point representation of spot price\\r\\n     * @param timeToMaturity64x64 64x64 fixed point representation of duration of option contract (in years)\\r\\n     * @param isCall whether to price \\\"call\\\" or \\\"put\\\" option\\r\\n     * @return 64x64 fixed point representation of Black-Scholes option price\\r\\n     */\\r\\n    function _blackScholesPrice(\\r\\n        int128 varianceAnnualized64x64,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) internal pure returns (int128) {\\r\\n        int128 cumulativeVariance64x64 = timeToMaturity64x64.mul(\\r\\n            varianceAnnualized64x64\\r\\n        );\\r\\n        int128 cumulativeVarianceSqrt64x64 = cumulativeVariance64x64.sqrt();\\r\\n\\r\\n        int128 d1_64x64 = spot64x64\\r\\n            .div(strike64x64)\\r\\n            .ln()\\r\\n            .add(cumulativeVariance64x64 >> 1)\\r\\n            .div(cumulativeVarianceSqrt64x64);\\r\\n        int128 d2_64x64 = d1_64x64.sub(cumulativeVarianceSqrt64x64);\\r\\n\\r\\n        if (isCall) {\\r\\n            return\\r\\n                spot64x64.mul(_N(d1_64x64)).sub(strike64x64.mul(_N(d2_64x64)));\\r\\n        } else {\\r\\n            return\\r\\n                -spot64x64.mul(_N(-d1_64x64)).sub(\\r\\n                    strike64x64.mul(_N(-d2_64x64))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/IFeeDiscount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {FeeDiscountStorage} from \\\"./FeeDiscountStorage.sol\\\";\\r\\n\\r\\ninterface IFeeDiscount {\\r\\n    event Staked(\\r\\n        address indexed user,\\r\\n        uint256 amount,\\r\\n        uint256 stakePeriod,\\r\\n        uint256 lockedUntil\\r\\n    );\\r\\n    event Unstaked(address indexed user, uint256 amount);\\r\\n\\r\\n    struct StakeLevel {\\r\\n        uint256 amount; // Amount to stake\\r\\n        uint256 discount; // Discount when amount is reached\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake using IERC2612 permit\\r\\n     * @param amount The amount of xPremia to stake\\r\\n     * @param period The lockup period (in seconds)\\r\\n     * @param deadline Deadline after which permit will fail\\r\\n     * @param v V\\r\\n     * @param r R\\r\\n     * @param s S\\r\\n     */\\r\\n    function stakeWithPermit(\\r\\n        uint256 amount,\\r\\n        uint256 period,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Lockup xPremia for protocol fee discounts\\r\\n     *          Longer period of locking will apply a multiplier on the amount staked, in the fee discount calculation\\r\\n     * @param amount The amount of xPremia to stake\\r\\n     * @param period The lockup period (in seconds)\\r\\n     */\\r\\n    function stake(uint256 amount, uint256 period) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake xPremia (If lockup period has ended)\\r\\n     * @param amount The amount of xPremia to unstake\\r\\n     */\\r\\n    function unstake(uint256 amount) external;\\r\\n\\r\\n    //////////\\r\\n    // View //\\r\\n    //////////\\r\\n\\r\\n    /**\\r\\n     * Calculate the stake amount of a user, after applying the bonus from the lockup period chosen\\r\\n     * @param user The user from which to query the stake amount\\r\\n     * @return The user stake amount after applying the bonus\\r\\n     */\\r\\n    function getStakeAmountWithBonus(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the % of fee discount for user, based on his stake\\r\\n     * @param user The _user for which the discount is for\\r\\n     * @return Percentage of protocol fee discount (in basis point)\\r\\n     *         Ex : 1000 = 10% fee discount\\r\\n     */\\r\\n    function getDiscount(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stake levels\\r\\n     * @return Stake levels\\r\\n     *         Ex : 2500 = -25%\\r\\n     */\\r\\n    function getStakeLevels() external returns (StakeLevel[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get stake period multiplier\\r\\n     * @param period The duration (in seconds) for which tokens are locked\\r\\n     * @return The multiplier for this staking period\\r\\n     *         Ex : 20000 = x2\\r\\n     */\\r\\n    function getStakePeriodMultiplier(uint256 period)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get staking infos of a user\\r\\n     * @param user The user address for which to get staking infos\\r\\n     * @return The staking infos of the user\\r\\n     */\\r\\n    function getUserInfo(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (FeeDiscountStorage.UserInfo memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/IPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPoolEvents {\\r\\n    event Purchase(\\r\\n        address indexed user,\\r\\n        uint256 longTokenId,\\r\\n        uint256 contractSize,\\r\\n        uint256 baseCost,\\r\\n        uint256 feeCost,\\r\\n        int128 spot64x64\\r\\n    );\\r\\n\\r\\n    event Sell(\\r\\n        address indexed user,\\r\\n        uint256 longTokenId,\\r\\n        uint256 contractSize,\\r\\n        uint256 baseCost,\\r\\n        uint256 feeCost,\\r\\n        int128 spot64x64\\r\\n    );\\r\\n\\r\\n    event Exercise(\\r\\n        address indexed user,\\r\\n        uint256 longTokenId,\\r\\n        uint256 contractSize,\\r\\n        uint256 exerciseValue,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    event Underwrite(\\r\\n        address indexed underwriter,\\r\\n        address indexed longReceiver,\\r\\n        uint256 shortTokenId,\\r\\n        uint256 intervalContractSize,\\r\\n        uint256 intervalPremium,\\r\\n        bool isManualUnderwrite\\r\\n    );\\r\\n\\r\\n    event AssignExercise(\\r\\n        address indexed underwriter,\\r\\n        uint256 shortTokenId,\\r\\n        uint256 freedAmount,\\r\\n        uint256 intervalContractSize,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    event AssignSale(\\r\\n        address indexed underwriter,\\r\\n        uint256 shortTokenId,\\r\\n        uint256 freedAmount,\\r\\n        uint256 intervalContractSize\\r\\n    );\\r\\n\\r\\n    event Deposit(address indexed user, bool isCallPool, uint256 amount);\\r\\n\\r\\n    event Withdrawal(\\r\\n        address indexed user,\\r\\n        bool isCallPool,\\r\\n        uint256 depositedAt,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event FeeWithdrawal(bool indexed isCallPool, uint256 amount);\\r\\n\\r\\n    event APYFeeReserved(\\r\\n        address underwriter,\\r\\n        uint256 shortTokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event APYFeePaid(address underwriter, uint256 shortTokenId, uint256 amount);\\r\\n\\r\\n    event Annihilate(uint256 shortTokenId, uint256 amount);\\r\\n\\r\\n    event UpdateCLevel(\\r\\n        bool indexed isCall,\\r\\n        int128 cLevel64x64,\\r\\n        int128 oldLiquidity64x64,\\r\\n        int128 newLiquidity64x64\\r\\n    );\\r\\n\\r\\n    event UpdateSteepness(int128 steepness64x64, bool isCallPool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mining/IPremiaMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {PremiaMiningStorage} from \\\"./PremiaMiningStorage.sol\\\";\\r\\n\\r\\ninterface IPremiaMining {\\r\\n    function addPremiaRewards(uint256 _amount) external;\\r\\n\\r\\n    function premiaRewardsAvailable() external view returns (uint256);\\r\\n\\r\\n    function getTotalAllocationPoints() external view returns (uint256);\\r\\n\\r\\n    function getPoolInfo(address pool, bool isCallPool)\\r\\n        external\\r\\n        view\\r\\n        returns (PremiaMiningStorage.PoolInfo memory);\\r\\n\\r\\n    function getPremiaPerYear() external view returns (uint256);\\r\\n\\r\\n    function addPool(address _pool, uint256 _allocPoints) external;\\r\\n\\r\\n    function setPoolAllocPoints(\\r\\n        address[] memory _pools,\\r\\n        uint256[] memory _allocPoints\\r\\n    ) external;\\r\\n\\r\\n    function pendingPremia(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        address _user\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function updatePool(\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function allocatePending(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n\\r\\n    function claim(\\r\\n        address _user,\\r\\n        address _pool,\\r\\n        bool _isCallPool,\\r\\n        uint256 _userTVLOld,\\r\\n        uint256 _userTVLNew,\\r\\n        uint256 _totalTVL\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IVolatilitySurfaceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {VolatilitySurfaceOracleStorage} from \\\"./VolatilitySurfaceOracleStorage.sol\\\";\\r\\n\\r\\ninterface IVolatilitySurfaceOracle {\\r\\n    /**\\r\\n     * @notice Pack IV model parameters into a single bytes32\\r\\n     * @dev This function is used to pack the parameters into a single variable, which is then used as input in `update`\\r\\n     * @param params Parameters of IV model to pack\\r\\n     * @return result The packed parameters of IV model\\r\\n     */\\r\\n    function formatParams(int256[5] memory params)\\r\\n        external\\r\\n        pure\\r\\n        returns (bytes32 result);\\r\\n\\r\\n    /**\\r\\n     * @notice Unpack IV model parameters from a bytes32\\r\\n     * @param input Packed IV model parameters to unpack\\r\\n     * @return params The unpacked parameters of the IV model\\r\\n     */\\r\\n    function parseParams(bytes32 input)\\r\\n        external\\r\\n        pure\\r\\n        returns (int256[] memory params);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the list of whitelisted relayers\\r\\n     * @return The list of whitelisted relayers\\r\\n     */\\r\\n    function getWhitelistedRelayers() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the IV model parameters of a token pair\\r\\n     * @param base The base token of the pair\\r\\n     * @param underlying The underlying token of the pair\\r\\n     * @return The IV model parameters\\r\\n     */\\r\\n    function getParams(address base, address underlying)\\r\\n        external\\r\\n        view\\r\\n        returns (VolatilitySurfaceOracleStorage.Update memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get unpacked IV model parameters\\r\\n     * @param base The base token of the pair\\r\\n     * @param underlying The underlying token of the pair\\r\\n     * @return The unpacked IV model parameters\\r\\n     */\\r\\n    function getParamsUnpacked(address base, address underlying)\\r\\n        external\\r\\n        view\\r\\n        returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get time to maturity in years, as a 64x64 fixed point representation\\r\\n     * @param maturity Maturity timestamp\\r\\n     * @return Time to maturity (in years), as a 64x64 fixed point representation\\r\\n     */\\r\\n    function getTimeToMaturity64x64(uint64 maturity)\\r\\n        external\\r\\n        view\\r\\n        returns (int128);\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the annualized volatility for given set of parameters\\r\\n     * @param base The base token of the pair\\r\\n     * @param underlying The underlying token of the pair\\r\\n     * @param spot64x64 64x64 fixed point representation of spot price\\r\\n     * @param strike64x64 64x64 fixed point representation of strike price\\r\\n     * @param timeToMaturity64x64 64x64 fixed point representation of time to maturity (denominated in years)\\r\\n     * @return 64x64 fixed point representation of annualized implied volatility, where 1 is defined as 100%\\r\\n     */\\r\\n    function getAnnualizedVolatility64x64(\\r\\n        address base,\\r\\n        address underlying,\\r\\n        int128 spot64x64,\\r\\n        int128 strike64x64,\\r\\n        int128 timeToMaturity64x64\\r\\n    ) external view returns (int128);\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the price of an option using the Black-Scholes model\\r\\n     * @param base The base token of the pair\\r\\n     * @param underlying The underlying token of the pair\\r\\n     * @param strike64x64 Strike, as a64x64 fixed point representation\\r\\n     * @param spot64x64 Spot price, as a 64x64 fixed point representation\\r\\n     * @param timeToMaturity64x64 64x64 fixed point representation of time to maturity (denominated in years)\\r\\n     * @param isCall Whether it is for call or put\\r\\n     * @return 64x64 fixed point representation of the Black Scholes price\\r\\n     */\\r\\n    function getBlackScholesPrice64x64(\\r\\n        address base,\\r\\n        address underlying,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) external view returns (int128);\\r\\n\\r\\n    /**\\r\\n     * @notice Get Black Scholes price as an uint256 with 18 decimals\\r\\n     * @param base The base token of the pair\\r\\n     * @param underlying The underlying token of the pair\\r\\n     * @param strike64x64 Strike, as a64x64 fixed point representation\\r\\n     * @param spot64x64 Spot price, as a 64x64 fixed point representation\\r\\n     * @param timeToMaturity64x64 64x64 fixed point representation of time to maturity (denominated in years)\\r\\n     * @param isCall Whether it is for call or put\\r\\n     * @return Black scholes price, as an uint256 with 18 decimals\\r\\n     */\\r\\n    function getBlackScholesPrice(\\r\\n        address base,\\r\\n        address underlying,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Add relayers to the whitelist so that they can add oracle surfaces\\r\\n     * @param accounts The addresses to add to the whitelist\\r\\n     */\\r\\n    function addWhitelistedRelayers(address[] memory accounts) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Remove relayers from the whitelist so that they cannot add oracle surfaces\\r\\n     * @param accounts The addresses to remove from the whitelist\\r\\n     */\\r\\n    function removeWhitelistedRelayers(address[] memory accounts) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update a list of IV model parameters\\r\\n     * @param base List of base tokens\\r\\n     * @param underlying List of underlying tokens\\r\\n     * @param parameters List of IV model parameters\\r\\n     */\\r\\n    function updateParams(\\r\\n        address[] memory base,\\r\\n        address[] memory underlying,\\r\\n        bytes32[] memory parameters\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/IERC20Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(uint256 id)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function _totalHolders(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function _accountsByToken(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length(); i++) {\\n                addresses[i] = accounts.at(i);\\n            }\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function _tokensByAccount(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        unchecked {\\n            for (uint256 i; i < tokens.length(); i++) {\\n                ids[i] = tokens.at(i);\\n            }\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; ) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        require(value == 0, 'UintUtils: hex length insufficient');\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/staking/FeeDiscountStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary FeeDiscountStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.staking.PremiaFeeDiscount\\\");\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 balance; // Balance staked by user\\r\\n        uint64 stakePeriod; // Stake period selected by user\\r\\n        uint64 lockedUntil; // Timestamp at which the lock ends\\r\\n    }\\r\\n\\r\\n    struct Layout {\\r\\n        // User data with xPREMIA balance staked and date at which lock ends\\r\\n        mapping(address => UserInfo) userInfo;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mining/PremiaMiningStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n// For further clarification please see https://license.premia.legal\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary PremiaMiningStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.storage.PremiaMining\\\");\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. PREMIA to distribute per block.\\r\\n        uint256 lastRewardTimestamp; // Last timestamp that PREMIA distribution occurs\\r\\n        uint256 accPremiaPerShare; // Accumulated PREMIA per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 reward; // Total allocated unclaimed reward\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of PREMIA\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accPremiaPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accPremiaPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    struct Layout {\\r\\n        // Total PREMIA left to distribute\\r\\n        uint256 premiaAvailable;\\r\\n        // Amount of premia distributed per year\\r\\n        uint256 premiaPerYear;\\r\\n        // pool -> isCallPool -> PoolInfo\\r\\n        mapping(address => mapping(bool => PoolInfo)) poolInfo;\\r\\n        // pool -> isCallPool -> user -> UserInfo\\r\\n        mapping(address => mapping(bool => mapping(address => UserInfo))) userInfo;\\r\\n        // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n        uint256 totalAllocPoint;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/VolatilitySurfaceOracleStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {EnumerableSet} from \\\"@solidstate/contracts/utils/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary VolatilitySurfaceOracleStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256(\\\"premia.contracts.storage.VolatilitySurfaceOracle\\\");\\r\\n\\r\\n    uint256 internal constant PARAM_BITS = 51;\\r\\n    uint256 internal constant PARAM_BITS_MINUS_ONE = 50;\\r\\n    uint256 internal constant PARAM_AMOUNT = 5;\\r\\n    // START_BIT = PARAM_BITS * (PARAM_AMOUNT - 1)\\r\\n    uint256 internal constant START_BIT = 204;\\r\\n\\r\\n    struct Update {\\r\\n        uint256 updatedAt;\\r\\n        bytes32 params;\\r\\n    }\\r\\n\\r\\n    struct Layout {\\r\\n        // Base token -> Underlying token -> Update\\r\\n        mapping(address => mapping(address => Update)) parameters;\\r\\n        // Relayer addresses which can be trusted to provide accurate option trades\\r\\n        EnumerableSet.AddressSet whitelistedRelayers;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getParams(\\r\\n        Layout storage l,\\r\\n        address base,\\r\\n        address underlying\\r\\n    ) internal view returns (bytes32) {\\r\\n        return l.parameters[base][underlying].params;\\r\\n    }\\r\\n\\r\\n    function parseParams(bytes32 input)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int256[] memory params)\\r\\n    {\\r\\n        params = new int256[](PARAM_AMOUNT);\\r\\n\\r\\n        // Value to add to negative numbers to cast them to int256\\r\\n        int256 toAdd = (int256(-1) >> PARAM_BITS) << PARAM_BITS;\\r\\n\\r\\n        assembly {\\r\\n            let i := 0\\r\\n            // Value equal to -1\\r\\n\\r\\n            let mid := shl(PARAM_BITS_MINUS_ONE, 1)\\r\\n\\r\\n            for {\\r\\n\\r\\n            } lt(i, PARAM_AMOUNT) {\\r\\n\\r\\n            } {\\r\\n                let offset := sub(START_BIT, mul(PARAM_BITS, i))\\r\\n                let param := shr(\\r\\n                    offset,\\r\\n                    sub(\\r\\n                        input,\\r\\n                        shl(\\r\\n                            add(offset, PARAM_BITS),\\r\\n                            shr(add(offset, PARAM_BITS), input)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                // Check if value is a negative number and needs casting\\r\\n                if or(eq(param, mid), gt(param, mid)) {\\r\\n                    param := add(param, toAdd)\\r\\n                }\\r\\n\\r\\n                // Store result in the params array\\r\\n                mstore(add(params, add(0x20, mul(0x20, i))), param)\\r\\n\\r\\n                i := add(i, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function formatParams(int256[5] memory params)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        int256 max = int256(1 << PARAM_BITS_MINUS_ONE);\\r\\n\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < PARAM_AMOUNT; i++) {\\r\\n                require(params[i] < max && params[i] > -max, \\\"Out of bounds\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            let i := 0\\r\\n\\r\\n            for {\\r\\n\\r\\n            } lt(i, PARAM_AMOUNT) {\\r\\n\\r\\n            } {\\r\\n                let offset := sub(START_BIT, mul(PARAM_BITS, i))\\r\\n                let param := mload(add(params, mul(0x20, i)))\\r\\n\\r\\n                result := add(\\r\\n                    result,\\r\\n                    shl(\\r\\n                        offset,\\r\\n                        sub(param, shl(PARAM_BITS, shr(PARAM_BITS, param)))\\r\\n                    )\\r\\n                )\\r\\n\\r\\n                i := add(i, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/OptionMath.sol\": {\r\n        \"OptionMath\": \"0x0f6e8ef18fb5bb61d545fee60f779d8aed60408f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ivolOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiaMining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDiscountAddress\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"feePremium64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"feeApy64x64\",\"type\":\"int128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"APYFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"APYFeeReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Annihilate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalContractSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AssignExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalContractSize\",\"type\":\"uint256\"}],\"name\":\"AssignSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exerciseValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"spot64x64\",\"type\":\"int128\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"spot64x64\",\"type\":\"int128\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"longReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalContractSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManualUnderwrite\",\"type\":\"bool\"}],\"name\":\"Underwrite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"cLevel64x64\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"oldLiquidity64x64\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"newLiquidity64x64\",\"type\":\"int128\"}],\"name\":\"UpdateCLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"steepness64x64\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"}],\"name\":\"UpdateSteepness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCallPool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"longTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractSize\",\"type\":\"uint256\"}],\"name\":\"exerciseFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"longTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractSize\",\"type\":\"uint256\"}],\"name\":\"processExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoolExercise", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a87bb29b984d672664aa1dd2d19d2e8b24f0f2a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000009abb27581c2e46a114f8c367355851e0580e9703000000000000000000000000c4b2c51f969e0713e799de73b7f130fb7bb604cf000000000000000000000000f1bb87563a122211d40d393ebf1c633c330377f900000000000000000000000000000000000000000000000007ae147ae147ae1400000000000000000000000000000000000000000000000007ae147ae147ae14", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}