{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/game/DataProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IHeroManager.sol\\\";\\nimport \\\"../interfaces/ILobbyManager.sol\\\";\\n\\ncontract DataProcessor is Multicall, Ownable {\\n  IHeroManager public heroManager;\\n  ILobbyManager public lobbyManager;\\n\\n  constructor(address hmAddr, address lmAddr) {\\n    heroManager = IHeroManager(hmAddr);\\n    lobbyManager = ILobbyManager(lmAddr);\\n  }\\n\\n  function getPlayerHeroesOnLobby(uint256 lobbyId, address player)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return lobbyManager.getPlayerHeroesOnLobby(lobbyId, player);\\n  }\\n\\n  function getLobbyHeroes(uint256 lobbyId)\\n    external\\n    view\\n    returns (\\n      address,\\n      uint256[] memory,\\n      address,\\n      uint256[] memory\\n    )\\n  {\\n    (, , address host, address client, , , , , , , ) = lobbyManager.lobbies(\\n      lobbyId\\n    );\\n    return (\\n      host,\\n      getPlayerHeroesOnLobby(lobbyId, host),\\n      client,\\n      getPlayerHeroesOnLobby(lobbyId, client)\\n    );\\n  }\\n\\n  function getLobbyPower(uint256 lobbyId)\\n    external\\n    view\\n    returns (\\n      address,\\n      uint256,\\n      address,\\n      uint256\\n    )\\n  {\\n    (, , address host, address client, , , , , , , ) = lobbyManager.lobbies(\\n      lobbyId\\n    );\\n    uint256 hostPower = lobbyManager.powerHistory(lobbyId, host);\\n    uint256 clientPower = lobbyManager.powerHistory(lobbyId, client);\\n\\n    return (host, hostPower, client, clientPower);\\n  }\\n\\n  function getHeroesPower(uint256[] memory heroes)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return lobbyManager.getHeroesPower(heroes);\\n  }\\n\\n  function getActiveLobbies(address myAddr, uint256 lobbyCapacity)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 count;\\n\\n    uint256 totalLobbies = lobbyManager.totalLobbies();\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        ,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (finishedAt == 0 && capacity == lobbyCapacity && host != myAddr) {\\n        count++;\\n      }\\n    }\\n\\n    uint256 baseIndex = 0;\\n    uint256[] memory result = new uint256[](count);\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        ,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (finishedAt == 0 && capacity == lobbyCapacity && host != myAddr) {\\n        result[baseIndex] = i;\\n        baseIndex++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function getMyLobbies(address myAddr, uint256 lobbyCapacity)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 count;\\n\\n    uint256 totalLobbies = lobbyManager.totalLobbies();\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        ,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (finishedAt == 0 && capacity == lobbyCapacity && host == myAddr) {\\n        count++;\\n      }\\n    }\\n\\n    uint256 baseIndex = 0;\\n    uint256[] memory result = new uint256[](count);\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        ,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (finishedAt == 0 && capacity == lobbyCapacity && host == myAddr) {\\n        result[baseIndex] = i;\\n        baseIndex++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function getMyHistory(address myAddr, uint256 lobbyCapacity)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 count;\\n\\n    uint256 totalLobbies = lobbyManager.totalLobbies();\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        address client,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (\\n        finishedAt > 0 &&\\n        capacity == lobbyCapacity &&\\n        (host == myAddr || client == myAddr)\\n      ) {\\n        count++;\\n      }\\n    }\\n\\n    uint256 baseIndex = 0;\\n    uint256[] memory result = new uint256[](count);\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (\\n        ,\\n        ,\\n        address host,\\n        address client,\\n        ,\\n        uint256 capacity,\\n        ,\\n        uint256 finishedAt,\\n        ,\\n        ,\\n\\n      ) = lobbyManager.lobbies(i);\\n      if (\\n        finishedAt > 0 &&\\n        capacity == lobbyCapacity &&\\n        (host == myAddr || client == myAddr)\\n      ) {\\n        result[baseIndex] = i;\\n        baseIndex++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function getAllHistory(uint256 lobbyCapacity)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 count;\\n\\n    uint256 totalLobbies = lobbyManager.totalLobbies();\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (, , , , , uint256 capacity, , uint256 finishedAt, , , ) = lobbyManager\\n        .lobbies(i);\\n      if (finishedAt > 0 && capacity == lobbyCapacity) {\\n        count++;\\n      }\\n    }\\n\\n    uint256 baseIndex = 0;\\n    uint256[] memory result = new uint256[](count);\\n    for (uint256 i = 1; i <= totalLobbies; i++) {\\n      (, , , , , uint256 capacity, , uint256 finishedAt, , , ) = lobbyManager\\n        .lobbies(i);\\n      if (finishedAt > 0 && capacity == lobbyCapacity) {\\n        result[baseIndex] = i;\\n        baseIndex++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function setHeroManager(address hmAddr) external onlyOwner {\\n    heroManager = IHeroManager(hmAddr);\\n  }\\n\\n  function setLobbyManager(address lmAddr) external onlyOwner {\\n    lobbyManager = ILobbyManager(lmAddr);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHeroManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IHeroManager {\\n  function heroPower(uint256 heroId) external view returns (uint256);\\n\\n  function heroPrimaryAttribute(uint256 heroId) external view returns (uint256);\\n\\n  function heroLevel(uint256 heroId) external view returns (uint256);\\n\\n  function bulkExpUp(uint256[] calldata heroIds, bool won) external;\\n\\n  function heroEnergy(uint256 heroId) external view returns (uint256);\\n\\n  function spendHeroEnergy(uint256 heroId) external;\\n\\n  function expUp(uint256 heroId, bool won) external;\\n\\n  function token() external view returns (address);\\n\\n  function nft() external view returns (address);\\n\\n  function validateHeroIds(uint256[] calldata heroIds, address owner)\\n    external\\n    view\\n    returns (bool);\\n\\n  function validateHeroEnergies(uint256[] calldata heroIds)\\n    external\\n    view\\n    returns (bool);\\n\\n  function rewardsPayeer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILobbyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ILobbyManager {\\n  function lobbies(uint256 lobbyId)\\n    external\\n    view\\n    returns (\\n      bytes32 name,\\n      bytes32 avatar,\\n      address host,\\n      address client,\\n      uint256 id,\\n      uint256 capacity,\\n      uint256 startedAt,\\n      uint256 finishedAt,\\n      uint256 winner,\\n      uint256 fee,\\n      uint256 rewards\\n    );\\n\\n  function lobbyHeroes(\\n    uint256 lobbyId,\\n    address player,\\n    uint256 index\\n  ) external view returns (uint256);\\n\\n  function powerHistory(uint256 lobbyId, address player)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getPlayerHeroesOnLobby(uint256 lobbyId, address player)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  function getHeroesPower(uint256[] memory heroes)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function totalLobbies() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hmAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lmAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lobbyCapacity\",\"type\":\"uint256\"}],\"name\":\"getActiveLobbies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lobbyCapacity\",\"type\":\"uint256\"}],\"name\":\"getAllHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"heroes\",\"type\":\"uint256[]\"}],\"name\":\"getHeroesPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lobbyId\",\"type\":\"uint256\"}],\"name\":\"getLobbyHeroes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lobbyId\",\"type\":\"uint256\"}],\"name\":\"getLobbyPower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lobbyCapacity\",\"type\":\"uint256\"}],\"name\":\"getMyHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lobbyCapacity\",\"type\":\"uint256\"}],\"name\":\"getMyLobbies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lobbyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerHeroesOnLobby\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroManager\",\"outputs\":[{\"internalType\":\"contract IHeroManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lobbyManager\",\"outputs\":[{\"internalType\":\"contract ILobbyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hmAddr\",\"type\":\"address\"}],\"name\":\"setHeroManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lmAddr\",\"type\":\"address\"}],\"name\":\"setLobbyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DataProcessor", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c04fe537b99adfdac0647834e022b5a8b3dec9bf000000000000000000000000b42781b583897514a5685b1a8ed7efa083db8859", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}