{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/VeManagerDillLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/protocols/IVotingEscrow.sol\\\";\\nimport {IDillGauge} from \\\"./interfaces/protocols/IDillGauge.sol\\\";\\nimport {IGaugeProxy} from \\\"./interfaces/protocols/IGaugeProxy.sol\\\";\\nimport {IMinter} from \\\"./interfaces/protocols/IMinter.sol\\\";\\nimport {IFeeDistributor} from \\\"./interfaces/protocols/IFeeDistributor.sol\\\";\\nimport {IFeeHandler} from \\\"./interfaces/protocols/IFeeHandler.sol\\\";\\nimport {IUpgradeSource} from \\\"./interfaces/IUpgradeSource.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {EternalStorage} from \\\"./lib/EternalStorage.sol\\\";\\nimport {Errors, _require} from \\\"./lib/Errors.sol\\\";\\nimport {SafeTransferLib} from \\\"./lib/SafeTransferLib.sol\\\";\\nimport {GovernableInit} from \\\"./GovernableInit.sol\\\";\\n\\n/// @notice Beluga VeManager (Dill-like gauges)\\n/// @author Chainvisions\\n/// @notice A contract for managing veToken locking and gauge farming/boosting.\\n\\ncontract VeManagerDillLike is GovernableInit, IUpgradeSource, EternalStorage {\\n    using SafeTransferLib for IERC20;\\n\\n    /// @notice Info for each reward gauge.\\n    struct GaugeInfo {\\n        uint16 lockNumerator;  // Percentage of rewards on this gauge to lock.\\n        uint16 kickbackNumerator;    // Percentage of rewards to distribute to the kickback pool.\\n        address strategy;   // Permitted strategy contract for using this gauge.\\n        address gauge;      // Gauge contract of the token.\\n    }\\n\\n    /// @notice Mapping for information on each reward gauge.\\n    mapping(address => GaugeInfo) public gaugeInfo;\\n\\n    /// @notice Addresses permitted to handle veToken voting power.\\n    mapping(address => bool) public governors;\\n\\n    mapping(address => bool) private infoExistsForGauge;\\n\\n    /// @notice Emitted when a new implementation upgrade is queued.\\n    event UpgradeAnnounced(address newImplementation);\\n\\n    modifier onlyGovernors {\\n        _require(\\n            msg.sender == governance()\\n            || governors[msg.sender],\\n            Errors.GOVERNORS_ONLY\\n        );\\n        _;\\n    }\\n\\n    /// @notice Initializes the VeManager contract.\\n    /// @param _store Storage contract for access control.\\n    /// @param _MAX_LOCK_TIME Max time for locking tokens into the escrow.\\n    /// @param _escrow veToken reward escrow for locking.\\n    /// @param _controller veToken Gauge Controller for casting votes.\\n    function __Manager_init(\\n        address _store,\\n        uint256 _MAX_LOCK_TIME,\\n        address _escrow,\\n        address _controller\\n    ) external initializer {\\n        __Governable_init_(_store);\\n\\n        // Set max lock time.\\n        _setMaxLockTime(_MAX_LOCK_TIME);\\n\\n        // Assign state.\\n        _setVotingEscrow(_escrow);\\n        _setRewardToken(IVotingEscrow(_escrow).token());\\n        _setGaugeController(_controller);\\n        _setUpgradeTimelock(12 hours);\\n    }\\n\\n    /// @notice Locks reward tokens for veTokens.\\n    /// @param _amount Amount of tokens to lock.\\n    function lockTokens(uint256 _amount) external onlyGovernors {\\n        _lockRewards(_amount);\\n    }\\n\\n    /// @notice Locks all reward tokens held for veTokens.\\n    function lockAllTokens() external onlyGovernors {\\n        _lockRewards(rewardToken().balanceOf(address(this)));\\n    }\\n\\n    /// @notice Withdraws the veToken lock.\\n    function withdrawLock() external onlyGovernors {\\n        votingEscrow().withdraw();\\n        _setVeTokenLockActive(false);\\n    }\\n\\n    /// @notice Votes for a specific reward gauge weight.\\n    /// @param _gauges Gauges to vote for the weight of.\\n    /// @param _weights Reward weights of the gauges.\\n    function voteForGauge(address[] calldata _gauges, uint256[] calldata _weights) external onlyGovernors {\\n        gaugeController().vote(_gauges, _weights);\\n    }\\n\\n    /// @notice Executes a transaction on the VeMananger. Governance only.\\n    /// @param _to Address to call to.\\n    /// @param _value Value to call the address with.\\n    /// @param _data Data to call the address with.\\n    /// @return Whether or not the call succeeded and the return data.\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyGovernance returns (bool, bytes memory) {\\n        // Execute the transaction\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n\\n        // Return the results\\n        return (success, result);\\n    }\\n\\n    /// @notice Deposits tokens into the VeManager contract.\\n    /// @param _token Token to deposit into the VeManager.\\n    /// @param _amount Amount of tokens to deposit.\\n    function depositGaugeTokens(address _token, uint256 _amount) external {\\n        // Read gauge data and store for reading the data of.\\n        GaugeInfo memory gaugeParams = gaugeInfo[_token];\\n\\n        // Check if caller is the gauge's permitted strategy.\\n        _require(msg.sender == gaugeParams.strategy, Errors.CALLER_NOT_STRATEGY);\\n\\n        // We can now transfer the tokens from the strategy and stake.\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(_token).safeApprove(gaugeParams.gauge, 0);\\n        IERC20(_token).safeApprove(gaugeParams.gauge, _amount);\\n\\n        IDillGauge(gaugeParams.gauge).deposit(_amount);\\n    }\\n\\n    /// @notice Withdraws tokens from the VeManager contract.\\n    /// @param _token Token to withdraw from the VeManager.\\n    /// @param _amount Amount to withdraw from the contract.\\n    function withdrawGaugeTokens(address _token, uint256 _amount) external {\\n        // Read gauge data and store for reading the data of.\\n        GaugeInfo memory gaugeParams = gaugeInfo[_token];\\n\\n        // Check if caller is the gauge's permitted strategy.\\n        _require(msg.sender == gaugeParams.strategy, Errors.CALLER_NOT_STRATEGY);\\n\\n        // We can now the transfer the gauge tokens to the strategy.\\n        IDillGauge(gaugeParams.gauge).withdraw(_amount);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /// @notice Withdraws all tokens from the VeManager contract.\\n    /// @param _token Token to withdraw all stake from the gauge of.\\n    function divestAllGaugeTokens(address _token) external {\\n        // Read gauge data and store for reading the data of.\\n        GaugeInfo memory gaugeParams = gaugeInfo[_token];\\n\\n        // Check if caller is the gauge's permitted strategy.\\n        _require(msg.sender == gaugeParams.strategy, Errors.CALLER_NOT_STRATEGY);\\n\\n        // We can now divest the gauge tokens and send them to the strategy.\\n        IDillGauge(gaugeParams.gauge).exit();\\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Claims rewards from a specified gauge and sends to the strategy.\\n    /// @param _token Token to claim the rewards from the gauge contract of.\\n    function claimGaugeRewards(address _token) external {\\n        // Read gauge data and store for reading the data of.\\n        GaugeInfo memory gaugeParams = gaugeInfo[_token];\\n        IERC20 _rewardToken = rewardToken();\\n\\n        // Check if caller is the gauge's permitted strategy.\\n        _require(msg.sender == gaugeParams.strategy, Errors.CALLER_NOT_STRATEGY);\\n\\n        // We can now collect and distribute any reward tokens earned.\\n        IDillGauge(gaugeParams.gauge).getReward();\\n\\n        uint256 gaugeEarnings = _rewardToken.balanceOf(address(this));\\n        if(gaugeEarnings > 0) {\\n            uint256 toLock = 0;\\n            uint256 kickback = 0;\\n            if(gaugeParams.lockNumerator > 0) {\\n                toLock = (gaugeEarnings * gaugeParams.lockNumerator) / 10000;\\n                _lockRewards(toLock);\\n            }\\n\\n            if(gaugeParams.kickbackNumerator > 0) {\\n                IVault _kickbackPool = kickbackPool();\\n                kickback = (gaugeEarnings * gaugeParams.kickbackNumerator) / 10000;\\n                _rewardToken.safeTransfer(address(_kickbackPool), kickback);\\n                _kickbackPool.notifyRewardAmount(address(_rewardToken), kickback);\\n            }\\n\\n            _rewardToken.safeTransfer(msg.sender, (gaugeEarnings - (toLock + kickback)));\\n        }\\n    }\\n\\n    /// @notice Claims earned fees from the FeeDistributor.\\n    function claimEarnedFees() external {\\n        IFeeDistributor _feeDistributor = feeDistributor();\\n        address handlerAddress = address(feeHandler());\\n        address[] memory rewardTokens = _feeDistributor.tokens();\\n        uint256[] memory rewardBalances = new uint256[](rewardTokens.length);\\n\\n        // Perform claim.\\n        _feeDistributor.claim();\\n\\n        // Send rewards to the handler.\\n        if(handlerAddress != address(0)) {\\n            for(uint256 i = 0; i < rewardTokens.length; i++) {\\n                address reward = rewardTokens[i];\\n                uint256 rewardBalance = IERC20(rewardTokens[i]).balanceOf(address(this));\\n                rewardBalances[i] = rewardBalance;\\n\\n                IERC20(reward).safeTransfer(handlerAddress, rewardBalance);\\n            }\\n            IFeeHandler(handlerAddress).handleFees(rewardBalances);\\n        }\\n    }\\n\\n    /// @notice Finalizes or cancels upgrades by setting the next implementation address to 0.\\n    function finalizeUpgrade() external override onlyGovernance {\\n        _setNextImplementation(address(0));\\n        _setNextImplementationTimestamp(0);\\n    }\\n\\n    /// @notice Whether or not the proxy should upgrade.\\n    /// @return If the proxy can be upgraded and the new implementation address.\\n    function shouldUpgrade() external view override returns (bool, address) {\\n        return (\\n            nextImplementationTimestamp() != 0\\n                && block.timestamp > nextImplementationTimestamp()\\n                && nextImplementation() != address(0),\\n            nextImplementation()\\n        );\\n    }\\n\\n    /// @notice Total amount of tokens staked in a specific gauge.\\n    /// @param _token Token to fetch the gauge stake of.\\n    /// @return The amount of `_token` staked into its respective gauge.\\n    function totalStakeForGauge(address _token) external view returns (uint256) {\\n        return IDillGauge(gaugeInfo[_token].gauge).balanceOf(address(this));\\n    }\\n\\n    /// @notice Schedules an upgrade to the vault.\\n    /// @param _impl Address of the new implementation.\\n    function scheduleUpgrade(address _impl) public onlyGovernance {\\n        _setNextImplementation(_impl);\\n        _setNextImplementationTimestamp(block.timestamp + upgradeTimelock());\\n        emit UpgradeAnnounced(_impl);\\n    }\\n\\n    /// @notice Recovers a specified token from the VeManager contract.\\n    /// @param _token Token to recover from the manager.\\n    /// @param _amount Amount to recover from the manager.\\n    function recoverToken(\\n        address _token, \\n        uint256 _amount\\n    ) public onlyGovernance {\\n        IERC20(_token).safeTransfer(governance(), _amount);\\n    }\\n\\n    /// @notice Adds a new gauge to the VeManager contract.\\n    /// @param _token Address of the token to add.\\n    /// @param _strategy Strategy that is permitted to use this gauge.\\n    /// @param _gauge Gauge of the token.\\n    /// @param _lockNumerator Percentage of gauge rewards to lock into veTokens.\\n    function addGauge(\\n        address _token,\\n        address _strategy,\\n        address _gauge,\\n        uint16 _lockNumerator,\\n        uint16 _kickbackNumerator\\n    ) public onlyGovernors {\\n        _require(!infoExistsForGauge[_token], Errors.GAUGE_INFO_ALREADY_EXISTS);\\n        // Create new GaugeInfo struct.\\n        GaugeInfo memory gaugeParams;\\n        gaugeParams.gauge = _gauge;\\n        gaugeParams.strategy = _strategy;\\n        gaugeParams.lockNumerator = _lockNumerator;\\n        gaugeParams.kickbackNumerator = _kickbackNumerator;\\n\\n        // Set info.\\n        gaugeInfo[_token] = gaugeParams;\\n        infoExistsForGauge[_token] = true;\\n    }\\n\\n    /// @notice Increases the VeManager's lock time.\\n    /// @param _increaseBy The time to increase the lock time by.\\n    function increaseLockTime(\\n        uint256 _increaseBy\\n    ) public onlyGovernors {\\n        IVotingEscrow _votingEscrow = votingEscrow();\\n\\n        uint256 lockEnd = _votingEscrow.locked__end(address(this));\\n        _votingEscrow.increase_unlock_time((lockEnd + _increaseBy));\\n    }\\n\\n    /// @notice Sets the strategy of a specified gauge.\\n    /// @param _token Token of the gauge to set the strategy of.\\n    /// @param _newStrategy New strategy for the gauge.\\n    function setGaugeStrategy(\\n        address _token,\\n        address _newStrategy\\n    ) public onlyGovernors {\\n        _require(infoExistsForGauge[_token], Errors.GAUGE_NON_EXISTENT);\\n\\n        // Set strategy.\\n        GaugeInfo storage gaugeParams = gaugeInfo[_token];\\n        gaugeParams.strategy = _newStrategy;\\n    }\\n\\n    /// @notice Sets the lock numerator of a specified gauge.\\n    /// @param _token Token of the gauge to set the strategy of.\\n    /// @param _newLockNumerator New lock numerator for the gauge.\\n    function setGaugeLockNumerator(\\n        address _token,\\n        uint16 _newLockNumerator\\n    ) public onlyGovernors {\\n        _require(infoExistsForGauge[_token], Errors.GAUGE_NON_EXISTENT);\\n\\n        // Set lock numerator.\\n        GaugeInfo storage gaugeParams = gaugeInfo[_token];\\n        gaugeParams.lockNumerator = _newLockNumerator;\\n    }\\n\\n    /// @notice Sets the kickback numerator of a specified gauge.\\n    /// @param _token Token of the gauge to set the kickback numerator of.\\n    /// @param _newKickbackNumerator New kickback numerator of the gauge.\\n    function setGaugeKickbackNumerator(\\n        address _token,\\n        uint16 _newKickbackNumerator\\n    ) public onlyGovernors {\\n        _require(infoExistsForGauge[_token], Errors.GAUGE_NON_EXISTENT);\\n\\n        // Set kickback numerator.\\n        GaugeInfo storage gaugeParams = gaugeInfo[_token];\\n        gaugeParams.kickbackNumerator = _newKickbackNumerator;\\n    }\\n\\n    /// @notice Sets the FeeDistributor contract for claiming fees.\\n    /// @param _feeDistributor FeeDistributor contract.\\n    function setFeeDistributor(\\n        address _feeDistributor\\n    ) public onlyGovernors {\\n        _setFeeDistributor(_feeDistributor);\\n    }\\n\\n    /// @notice Sets the FeeHandler contract for fee conversion and handling.\\n    /// @param _feeHandler FeeHandler contract.\\n    function setFeeHandler(\\n        address _feeHandler\\n    ) public onlyGovernors {\\n        _setFeeHandler(_feeHandler);\\n    }\\n\\n    /// @notice Sets the kickback pool contract for kickback rewards.\\n    /// @param _kickbackPool Kickback pool contract.\\n    function setKickbackPool(\\n        address _kickbackPool\\n    ) public onlyGovernors {\\n        _setKickbackPool(_kickbackPool);\\n    }\\n\\n    /// @notice Adds a governor to the VeManager.\\n    /// @param _governor Governor to add from the manager.\\n    function addGovernor(\\n        address _governor\\n    ) public onlyGovernance {\\n        governors[_governor] = true;\\n    }\\n\\n    /// @notice Removes a governor from the VeManager.\\n    /// @param _governor Governor to remove from the manager.\\n    function removeGovernor(\\n        address _governor\\n    ) public onlyGovernance {\\n        governors[_governor] = false;\\n    }\\n\\n    /// @notice Amount of veTokens held by the VeManager.\\n    function netVeAssets() public view returns (uint256) {\\n        return IERC20(address(votingEscrow())).balanceOf(address(this));\\n    }\\n\\n    /// @notice The VeManager's veToken lock expiration.\\n    function lockExpiration() public view returns (uint256) {\\n        return votingEscrow().locked__end(address(this));\\n    }\\n\\n    /// @notice Next implementation contract for the proxy.\\n    function nextImplementation() public view returns (address) {\\n        return _getAddress(\\\"nextImplementation\\\");\\n    }\\n\\n    /// @notice Timestamp of when the next upgrade can be executed.\\n    function nextImplementationTimestamp() public view returns (uint256) {\\n        return _getUint256(\\\"nextImplementationTimestamp\\\");\\n    }\\n\\n    /// @notice Timelock for contract upgrades.\\n    function upgradeTimelock() public view returns (uint256) {\\n        return _getUint256(\\\"upgradeTimelock\\\");\\n    }\\n\\n    /// @notice Max lock time for locking for veTokens.\\n    function maxLockTime() public view returns (uint256) {\\n        return _getUint256(\\\"maxLockTime\\\");\\n    }\\n\\n    /// @notice veToken VotingEscrow contract.\\n    function votingEscrow() public view returns (IVotingEscrow) {\\n        return IVotingEscrow(_getAddress(\\\"votingEscrow\\\"));\\n    }\\n\\n    /// @notice Reward token to farm in gauges and lock.\\n    function rewardToken() public view returns (IERC20) {\\n        return IERC20(_getAddress(\\\"rewardToken\\\"));\\n    }\\n\\n    /// @notice Gauge controller contract for voting.\\n    function gaugeController() public view returns (IGaugeProxy) {\\n        return IGaugeProxy(_getAddress(\\\"gaugeController\\\"));\\n    }\\n\\n    /// @notice Fee distributor contract for claiming fees. Optional.\\n    function feeDistributor() public view returns (IFeeDistributor) {\\n        return IFeeDistributor(_getAddress(\\\"feeDistributor\\\"));\\n    }\\n\\n    /// @notice Beluga fee handler for handling claimed fees. Optional.\\n    function feeHandler() public view returns (IFeeHandler) {\\n        return IFeeHandler(_getAddress(\\\"feeHandler\\\"));\\n    }\\n\\n    /// @notice Whether or not a veToken lock is active on the escrow.\\n    function veTokenLockActive() public view returns (bool) {\\n        return _getBool(\\\"veTokenLockActive\\\");\\n    }\\n\\n    /// @notice Kickback pool for distributing kickback rewards.\\n    function kickbackPool() public view returns (IVault) {\\n        return IVault(_getAddress(\\\"kickbackPool\\\"));\\n    }\\n\\n    function _lockRewards(uint256 _amountToLock) internal {\\n        IERC20 _rewardToken = rewardToken();\\n        address escrowAddress = address(votingEscrow());\\n\\n        _rewardToken.safeApprove(escrowAddress, 0);\\n        _rewardToken.safeApprove(escrowAddress, _amountToLock);\\n\\n        if(veTokenLockActive()) {\\n            // We can simply increase the amount.\\n            IVotingEscrow(escrowAddress).increase_amount(_amountToLock);\\n        } else {\\n            // We need to create a new lock.\\n            IVotingEscrow(escrowAddress).create_lock(_amountToLock, (block.timestamp + maxLockTime()));\\n            _setVeTokenLockActive(true);\\n        }\\n    }\\n\\n    function _setNextImplementation(address _address) internal {\\n        _setAddress(\\\"nextImplementation\\\", _address);\\n    }\\n\\n    function _setNextImplementationTimestamp(uint256 _value) internal {\\n        _setUint256(\\\"nextImplementationTimestamp\\\", _value);\\n    }\\n\\n    function _setUpgradeTimelock(uint256 _value) internal {\\n        _setUint256(\\\"upgradeTimelock\\\", _value);\\n    }\\n\\n    function _setMaxLockTime(uint256 _value) internal {\\n        _setUint256(\\\"maxLockTime\\\", _value);\\n    }\\n\\n    function _setVotingEscrow(address _value) internal {\\n        _setAddress(\\\"votingEscrow\\\", _value);\\n    }\\n\\n    function _setRewardToken(address _value) internal {\\n        _setAddress(\\\"rewardToken\\\", _value);\\n    }\\n\\n    function _setGaugeController(address _value) internal {\\n        _setAddress(\\\"gaugeController\\\", _value);\\n    }\\n\\n    function _setRewardMinter(address _value) internal {\\n        _setAddress(\\\"rewardMinter\\\", _value);\\n    }\\n\\n    function _setFeeDistributor(address _value) internal {\\n        _setAddress(\\\"feeDistributor\\\", _value);\\n    }\\n\\n    function _setFeeHandler(address _value) internal {\\n        _setAddress(\\\"feeHandler\\\", _value);\\n    }\\n\\n    function _setVeTokenLockActive(bool _value) internal {\\n        _setBool(\\\"veTokenLockActive\\\", _value);\\n    }\\n\\n    function _setKickbackPool(address _value) internal {\\n        _setAddress(\\\"kickbackPool\\\", _value);\\n    }\\n\\n    function findArrayItem(address[] memory _array, address _item) private pure returns (uint256) {\\n        for(uint256 i = 0; i < _array.length; i++) {\\n            if(_array[i] == _item) {\\n                return i;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/protocols/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.6;\\n\\ninterface IVotingEscrow {\\n    function create_lock(uint256, uint256) external;\\n    function increase_amount(uint256) external;\\n    function increase_unlock_time(uint256) external;\\n    function withdraw() external;\\n    function token() external view returns (address);\\n    function locked() external view returns (uint256);\\n    function locked__end(address) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n}\"\r\n    },\r\n    \"src/interfaces/protocols/IDillGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDillGauge {\\n    function deposit(uint256) external;\\n    function depositFor(uint256, address) external;\\n    function depositAll() external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n    function exit() external;\\n    function getReward() external;\\n    function balanceOf(address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"src/interfaces/protocols/IGaugeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IGaugeProxy {\\n    function collect() external;\\n    function deposit() external;\\n    function distribute() external;\\n    function vote(address[] memory, uint256[] memory) external;\\n}\"\r\n    },\r\n    \"src/interfaces/protocols/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.6;\\n\\ninterface IMinter {\\n    function mint(address) external;\\n    function mint_for(address, address) external;\\n}\"\r\n    },\r\n    \"src/interfaces/protocols/IFeeDistributor.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.6;\\n\\ninterface IFeeDistributor {\\n    function claim() external;\\n    function tokens() external view returns (address[] memory);\\n}\"\r\n    },\r\n    \"src/interfaces/protocols/IFeeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.6;\\n\\ninterface IFeeHandler {\\n    function handleFees(uint256[] memory) external;\\n}\"\r\n    },\r\n    \"src/interfaces/IUpgradeSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IUpgradeSource {\\n  function finalizeUpgrade() external;\\n  function shouldUpgrade() external view returns (bool, address);\\n}\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address) external;\\n    function setVaultFractionToInvest(uint256) external;\\n\\n    function deposit(uint256) external;\\n    function depositFor(address, uint256) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256) external;\\n\\n    function getReward() external;\\n    function getRewardByToken(address) external;\\n    function notifyRewardAmount(address, uint256) external;\\n\\n    function underlyingUnit() external view returns (uint256);\\n    function getPricePerFullShare() external view returns (uint256);\\n    function underlyingBalanceWithInvestmentForHolder(address) external view returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n    function rebalance() external;\\n}\"\r\n    },\r\n    \"src/lib/EternalStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/// @title Eternal Storage Pattern.\\n/// @author Chainvisions\\n/// @notice A mapping-based storage pattern, allows for collision-less storage.\\n\\ncontract EternalStorage {\\n    mapping(bytes32 => uint256) private uint256Storage;\\n    mapping(bytes32 => address) private addressStorage;\\n    mapping(bytes32 => bool) private boolStorage;\\n\\n    function _setUint256(string memory _key, uint256 _value) internal {\\n        uint256Storage[keccak256(abi.encodePacked(_key))] = _value;\\n    }\\n\\n    function _setAddress(string memory _key, address _value) internal {\\n        addressStorage[keccak256(abi.encodePacked(_key))] = _value;\\n    }\\n\\n    function _setBool(string memory _key, bool _value) internal {\\n        boolStorage[keccak256(abi.encodePacked(_key))] = _value;\\n    }\\n\\n    function _getUint256(string memory _key) internal view returns (uint256) {\\n        return uint256Storage[keccak256(abi.encodePacked(_key))];\\n    }\\n\\n    function _getAddress(string memory _key) internal view returns (address) {\\n        return addressStorage[keccak256(abi.encodePacked(_key))];\\n    }\\n\\n    function _getBool(string memory _key) internal view returns (bool) {\\n        return boolStorage[keccak256(abi.encodePacked(_key))];\\n    }\\n}\"\r\n    },\r\n    \"src/lib/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BEL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BEL#\\\" part is a known constant\\n        // (0x42454C23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42454C23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\n\\n/// @title Beluga Errors Library\\n/// @author Chainvisions\\n/// @author Forked and modified from Balancer (https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/solidity-utils/contracts/helpers/BalancerErrors.sol)\\n/// @notice Library for efficiently handling errors on Beluga contracts with reduced bytecode size additions.\\n\\nlibrary Errors {\\n    // Vault\\n    uint256 internal constant NUMERATOR_ABOVE_MAX_BUFFER = 0;\\n    uint256 internal constant UNDEFINED_STRATEGY = 1;\\n    uint256 internal constant CALLER_NOT_WHITELISTED = 2;\\n    uint256 internal constant VAULT_HAS_NO_SHARES = 3;\\n    uint256 internal constant SHARES_MUST_NOT_BE_ZERO = 4;\\n    uint256 internal constant LOSSES_ON_DOHARDWORK = 5;\\n    uint256 internal constant CANNOT_UPDATE_STRATEGY = 6;\\n    uint256 internal constant NEW_STRATEGY_CANNOT_BE_EMPTY = 7;\\n    uint256 internal constant VAULT_AND_STRATEGY_UNDERLYING_MUST_MATCH = 8;\\n    uint256 internal constant STRATEGY_DOES_NOT_BELONG_TO_VAULT = 9;\\n    uint256 internal constant CALLER_NOT_GOV_OR_REWARD_DIST = 10;\\n    uint256 internal constant NOTIF_AMOUNT_INVOKES_OVERFLOW = 11;\\n    uint256 internal constant REWARD_INDICE_NOT_FOUND = 12;\\n    uint256 internal constant REWARD_TOKEN_ALREADY_EXIST = 13;\\n    uint256 internal constant DURATION_CANNOT_BE_ZERO = 14;\\n    uint256 internal constant REWARD_TOKEN_DOES_NOT_EXIST = 15;\\n    uint256 internal constant REWARD_PERIOD_HAS_NOT_ENDED = 16;\\n    uint256 internal constant CANNOT_REMOVE_LAST_REWARD_TOKEN = 17;\\n    uint256 internal constant DENOMINATOR_MUST_BE_GTE_NUMERATOR = 18;\\n    uint256 internal constant CANNOT_UPDATE_EXIT_FEE = 19;\\n    uint256 internal constant CANNOT_TRANSFER_IMMATURE_TOKENS = 20;\\n    uint256 internal constant CANNOT_DEPOSIT_ZERO = 21;\\n    uint256 internal constant HOLDER_MUST_BE_DEFINED = 22;\\n\\n    // VeManager\\n    uint256 internal constant GOVERNORS_ONLY = 23;\\n    uint256 internal constant CALLER_NOT_STRATEGY = 24;\\n    uint256 internal constant GAUGE_INFO_ALREADY_EXISTS = 25;\\n    uint256 internal constant GAUGE_NON_EXISTENT = 26;\\n\\n    // Strategies\\n    uint256 internal constant CALL_RESTRICTED = 27;\\n    uint256 internal constant STRATEGY_IN_EMERGENCY_STATE = 28;\\n    uint256 internal constant REWARD_POOL_UNDERLYING_MISMATCH = 29;\\n    uint256 internal constant UNSALVAGABLE_TOKEN = 30;\\n\\n    // Strategy splitter.\\n    uint256 internal constant ARRAY_LENGTHS_DO_NOT_MATCH = 31;\\n    uint256 internal constant WEIGHTS_DO_NOT_ADD_UP = 32;\\n    uint256 internal constant REBALANCE_REQUIRED = 33;\\n    uint256 internal constant INDICE_DOES_NOT_EXIST = 34;\\n\\n    // Strategy-specific\\n    uint256 internal constant WITHDRAWAL_WINDOW_NOT_ACTIVE = 35;\\n\\n    // 0xDAO Partnership Staking.\\n    uint256 internal constant CANNOT_WITHDRAW_MORE_THAN_STAKE = 36;\\n\\n    // Active management strategies.\\n    uint256 internal constant TX_ORIGIN_NOT_PERMITTED = 37;\\n}\"\r\n    },\r\n    \"src/lib/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    event Debug(bool one, bool two, uint256 retsize);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\"\r\n    },\r\n    \"src/GovernableInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {Storage} from \\\"./Storage.sol\\\";\\n\\n/**\\n * @dev Contract for access control where the governance address specified\\n * in the Storage contract can be granted access to specific functions\\n * on a contract that inherits this contract.\\n *\\n * The difference between GovernableInit and Governable is that GovernableInit supports proxy\\n * smart contracts.\\n */\\n\\ncontract GovernableInit is Initializable {\\n\\n  bytes32 internal constant _STORAGE_SLOT = 0xa7ec62784904ff31cbcc32d09932a58e7f1e4476e1d041995b37c917990b16dc;\\n\\n  modifier onlyGovernance() {\\n    require(Storage(_storage()).isGovernance(msg.sender), \\\"Governable: Not governance\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    assert(_STORAGE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.governableInit.storage\\\")) - 1));\\n  }\\n\\n  function __Governable_init_(address _store) public initializer {\\n    _setStorage(_store);\\n  }\\n\\n  function _setStorage(address newStorage) private {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newStorage)\\n    }\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"Governable: New storage shouldn't be empty\\\");\\n    _setStorage(_store);\\n  }\\n\\n  function _storage() internal view returns (address str) {\\n    bytes32 slot = _STORAGE_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      str := sload(slot)\\n    }\\n  }\\n\\n  function governance() public view returns (address) {\\n    return Storage(_storage()).governance();\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Storage: Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"Storage: New governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"Storage: New controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"UpgradeAnnounced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"__Governable_init_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_LOCK_TIME\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"__Manager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_lockNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_kickbackNumerator\",\"type\":\"uint16\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEarnedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimGaugeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositGaugeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"divestAllGaugeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHandler\",\"outputs\":[{\"internalType\":\"contract IFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"contract IGaugeProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"lockNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickbackNumerator\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increaseBy\",\"type\":\"uint256\"}],\"name\":\"increaseLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickbackPool\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netVeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextImplementationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"scheduleUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"}],\"name\":\"setFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newKickbackNumerator\",\"type\":\"uint16\"}],\"name\":\"setGaugeKickbackNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newLockNumerator\",\"type\":\"uint16\"}],\"name\":\"setGaugeLockNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"setGaugeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kickbackPool\",\"type\":\"address\"}],\"name\":\"setKickbackPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalStakeForGauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veTokenLockActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"voteForGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGaugeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VeManagerDillLike", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}