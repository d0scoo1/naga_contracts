{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\n\r\nabstract contract CFMS { //Crypto Family Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address => bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"CFMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"CFMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        to.transfer(value);\r\n    }\r\n\r\n\r\n}\r\n\r\ninterface SURREAL {\r\n    function adminMint(address to, uint256 amount) external;\r\n}\r\n\r\ncontract Extension is CFMS {\r\n    \r\n    SURREAL SS;\r\n\r\n    uint256 private _whitePrice = 100000000000000000;\r\n    uint256 private _whiteUserLimit = 4;\r\n    uint256 private _whiteTotal = 1500;\r\n\r\n    mapping(address => uint256) private _userWhiteMints; //How many times did the user mint in white lsit minting\r\n\r\n    uint256 private _whiteMinted;\r\n\r\n    mapping(address => bool) private _whiteAccess;\r\n    \r\n    constructor(address _SS) {\r\n        SS = SURREAL(_SS);\r\n    }\r\n\r\n    //Read Functions======================================================================================================================================================\r\n\r\n    function whiteListed(address user) external view returns(bool listed) {\r\n        return _whiteAccess[user];\r\n    } \r\n\r\n    function userWhiteMints(address user) external view returns(uint256 mints) {\r\n        return _userWhiteMints[user];\r\n    }\r\n\r\n    function whiteMinted() public view returns(uint256 data) { return _whiteMinted; }\r\n    \r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function changeData(uint256 whitePrice, uint256 whiteUserLimit, uint256 whiteTotal) external Manager {\r\n        _whitePrice = whitePrice;\r\n        _whiteUserLimit = whiteUserLimit;\r\n        _whiteTotal = whiteTotal;\r\n    }\r\n\r\n    function setWhiteList(address[] calldata users) external Manager {\r\n        uint256 size = users.length;\r\n\r\n        for(uint256 t; t < size; ++t) {\r\n            _whiteAccess[users[t]] = true;\r\n        }\r\n    }\r\n    \r\n    //User Functions======================================================================================================================================================\r\n\r\n    function whiteMint() external payable {\r\n        require(_whiteAccess[msg.sender], \"SURREAL: Invalid Access\"); \r\n\r\n        uint256 amount = msg.value / _whitePrice;\r\n\r\n        _userWhiteMints[msg.sender] += amount;\r\n        require(_userWhiteMints[msg.sender] < _whiteUserLimit, \"SURREAL: Minting Limit Reached\");\r\n\r\n        _whiteMinted += amount;\r\n        require(_whiteMinted < _whiteTotal,\"SURREAL: Insufficient White Mint Tokens\");\r\n\r\n        SS.adminMint(msg.sender, amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whitePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteUserLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteTotal\",\"type\":\"uint256\"}],\"name\":\"changeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userWhiteMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Extension", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c423de818c6e83dd8564cc18a4cc6c7c0b8e455", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4eb60d0df1d48662f4c9d04ceec935a7da37e3db2d0b77a36ac79768696ce076"}]}