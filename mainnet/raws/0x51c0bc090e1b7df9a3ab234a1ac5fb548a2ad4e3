{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract StakingPool is Ownable{\r\n    //last time that tokens where retrieved\r\n    mapping(uint => uint256) public checkpoints;\r\n\r\n    //see how many nfts are being staked\r\n    mapping(address => uint256[]) public stakedTokens;\r\n\r\n    IERC721Enumerable public NFTCollection;\r\n    IERC20 public Token;\r\n\r\n    uint public rewardPerDayBronze = 100000000000000000;\r\n    uint public rewardPerDaySilver = 200000000000000000;\r\n    uint public rewardPerDayGold = 300000000000000000;\r\n    uint public rewardPerDayPlatinum = 400000000000000000;\r\n\r\n    //dummy address that we use to sign the withdraw transaction to verify the type of nft\r\n    address private dummy = address(0xc0A7Ee1ABb27c81ae51d9720a208B80881617e44);\r\n\r\n    uint[] private tids;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    constructor() {\r\n        NFTCollection = IERC721Enumerable(0xB62E63c57d63f0812D5f2f583B733e3C5e6848f8);\r\n        Token = IERC20(0x5e4Efb364071C64Ee3641fe1E68cB5d2D5558709);\r\n    }\r\n\r\n    modifier onlyValidAccess(uint8 _v, bytes32 _r, bytes32 _s) {\r\n        require( isValidAccessMessage(msg.sender,_v,_r,_s), 'Invalid Signature' );\r\n        _;\r\n    }\r\n\r\n    //set ERC721Enumerable\r\n    function setNFTInterface(address newInterface) public onlyOwner {\r\n        NFTCollection = IERC721Enumerable(newInterface);\r\n    }\r\n\r\n    //set ERC20\r\n    function setTokenInterface(address newInterface) public onlyOwner {\r\n        Token = IERC20(newInterface);\r\n    }\r\n \r\n    /* \r\n    * @dev Verifies if message was signed by owner to give access to _add for this contract.\r\n    *      Assumes Geth signature prefix.\r\n    * @param _add Address of agent with access\r\n    * @param _v ECDSA signature parameter v.\r\n    * @param _r ECDSA signature parameters r.\r\n    * @param _s ECDSA signature parameters s.\r\n    * @return Validity of access message for a given address.\r\n    */\r\n    function isValidAccessMessage(address _add, uint8 _v, bytes32 _r, bytes32 _s) view public returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(address(this), _add));\r\n        return dummy == ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), _v, _r, _s);\r\n    }\r\n\r\n    function depositAll() external {\r\n        uint balance = NFTCollection.balanceOf(msg.sender);\r\n        require(balance > 0, \"No tokens to stake!\");\r\n\r\n        delete tids;\r\n        for (uint i = 0; i < balance; i++) {\r\n            tids.push(NFTCollection.tokenOfOwnerByIndex(msg.sender, i));\r\n        }\r\n        for (uint i = 0; i < tids.length; i++) {\r\n            _deposit(tids[i]);\r\n        }\r\n        \r\n    }\r\n\r\n    function deposit(uint tokenId) public {\r\n        //they have to be the owner of tokenID\r\n        require(msg.sender == NFTCollection.ownerOf(tokenId), 'Sender must be owner');\r\n        _deposit(tokenId);\r\n        \r\n    }\r\n\r\n    function _deposit(uint tokenId) internal {\r\n        //set the time of staking to now\r\n        checkpoints[tokenId] = block.timestamp;\r\n\r\n        //transfer NFT to contract\r\n        NFTCollection.transferFrom(msg.sender, address(this), tokenId);\r\n\r\n        //add to their staked tokens\r\n        stakedTokens[msg.sender].push(tokenId);\r\n    }\r\n\r\n    function withdrawAll(uint[] memory types_, uint8 _v, bytes32 _r, bytes32 _s) onlyValidAccess(_v,  _r, _s) external {\r\n        getAllRewards(types_, _v, _r, _s);\r\n\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            NFTCollection.transferFrom(address(this), msg.sender, stakedTokens[msg.sender][i]);\r\n            //popFromStakedTokens(stakedTokens[msg.sender][i]);\r\n            checkpoints[stakedTokens[msg.sender][i]] = block.timestamp; \r\n        }\r\n        delete stakedTokens[msg.sender];\r\n    }\r\n\r\n    function emergencyWithdrawAll() external {\r\n        require(stakedTokens[msg.sender].length > 0, \"No tokens staked\");\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            NFTCollection.transferFrom(address(this), msg.sender, stakedTokens[msg.sender][i]);\r\n            //popFromStakedTokens(stakedTokens[msg.sender][i]);\r\n            checkpoints[stakedTokens[msg.sender][i]] = block.timestamp; \r\n        }\r\n        delete stakedTokens[msg.sender];\r\n    }\r\n\r\n    function withdraw(uint tokenId, uint type_, uint8 _v, bytes32 _r, bytes32 _s) onlyValidAccess(_v,  _r, _s)  public {\r\n        bool check = false;\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            if (stakedTokens[msg.sender][i] == tokenId) {\r\n                check = true;\r\n                break;\r\n            }\r\n        }\r\n        require(check == true, 'You have not staked this token!');\r\n\r\n        _withdraw(tokenId, type_);\r\n        popFromStakedTokens(tokenId);\r\n        \r\n    }\r\n\r\n    function emergencyWithdraw(uint tokenId) external {\r\n        bool check = false;\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            if (stakedTokens[msg.sender][i] == tokenId) {\r\n                check = true;\r\n                break;\r\n            }\r\n        }\r\n        require(check == true, 'You have not staked this token!');\r\n\r\n        NFTCollection.transferFrom(address(this), msg.sender, tokenId);\r\n        popFromStakedTokens(tokenId);\r\n        checkpoints[tokenId] = block.timestamp; \r\n    }\r\n\r\n    function popFromStakedTokens(uint tokenId) internal {\r\n        uint pos = positionInStakedTokens(tokenId);\r\n        \r\n        uint firstValue = stakedTokens[msg.sender][pos];\r\n        uint secondValue = stakedTokens[msg.sender][stakedTokens[msg.sender].length - 1];\r\n        stakedTokens[msg.sender][pos] = secondValue;\r\n        stakedTokens[msg.sender][stakedTokens[msg.sender].length - 1] = firstValue;\r\n        stakedTokens[msg.sender].pop();\r\n    }\r\n\r\n    function positionInStakedTokens(uint tokenId) internal view returns(uint) {\r\n        uint index;\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            if (stakedTokens[msg.sender][i] == tokenId) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    function _withdraw(uint tokenId, uint type_) internal {\r\n        collect(tokenId, type_);\r\n        NFTCollection.transferFrom(address(this), msg.sender, tokenId);\r\n    }\r\n\r\n    function getReward(uint tokenId, uint type_, uint8 _v, bytes32 _r, bytes32 _s) onlyValidAccess(_v,  _r, _s) public {\r\n        bool check = false;\r\n        for (uint i = 0; i < stakedTokens[msg.sender].length; i++) {\r\n            if (stakedTokens[msg.sender][i] == tokenId) {\r\n                check = true;\r\n                break;\r\n            }\r\n        }\r\n        require(check == true, 'You have not staked this token!');\r\n\r\n        collect(tokenId, type_);\r\n    }\r\n\r\n    function getAllRewards(uint[] memory types_, uint8 _v, bytes32 _r, bytes32 _s) onlyValidAccess(_v,  _r, _s) public {\r\n        require(stakedTokens[msg.sender].length > 0, \"No tokens staked\");\r\n        require(types_.length == stakedTokens[msg.sender].length, \"Types and Tokens Staked do not match!\");\r\n\r\n        uint rewards = 0;\r\n        for (uint i = 0; i < types_.length; i++) {\r\n            rewards += calculateReward(stakedTokens[msg.sender][i], types_[i]);\r\n            checkpoints[stakedTokens[msg.sender][i]] = block.timestamp;\r\n        }\r\n\r\n        require(rewards <= Token.balanceOf(address(this)), \"Staking Contract does not have sufficient funds\");\r\n        Token.transfer(msg.sender, rewards);\r\n    }\r\n\r\n\r\n    function collect(uint tokenId, uint type_) internal {\r\n        uint256 reward = calculateReward(tokenId, type_);     \r\n        //_mint(msg.sender, reward);\r\n        require(reward <= Token.balanceOf(address(this)), \"Staking Contract does not have sufficient funds\");\r\n        Token.transfer(msg.sender, reward);\r\n\r\n        checkpoints[tokenId] = block.timestamp; \r\n    }\r\n\r\n    function calculateAllRewards(uint[] memory types_, address who) public view returns(uint256) {\r\n        require(stakedTokens[who].length > 0, \"No tokens staked\");\r\n        require(types_.length == stakedTokens[who].length, \"Types and Tokens Staked do not match!\");\r\n\r\n        uint256 total;\r\n        for (uint i = 0; i < types_.length; i++) {\r\n            total += calculateReward(stakedTokens[who][i], types_[i]);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function calculateReward(uint tokenId, uint type_) public view returns(uint256) {\r\n        require(type_ >= 0 && type_ < 5, \"Invalid Type of Token!\");\r\n        uint256 checkpoint = checkpoints[tokenId];\r\n\r\n        if (type_ == 0) {\r\n            return 0;\r\n        }\r\n        else if (type_ == 1) {\r\n            return rewardPerDayBronze * ((block.timestamp-checkpoint) / 86400);\r\n        }\r\n        else if (type_ == 2) {\r\n            return rewardPerDaySilver * ((block.timestamp-checkpoint) / 86400);\r\n        }\r\n        else if (type_ == 3) {\r\n            return rewardPerDayGold * ((block.timestamp-checkpoint) / 86400);\r\n        }\r\n        else {\r\n            return rewardPerDayPlatinum * ((block.timestamp-checkpoint) / 86400);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    function seeStakedTokens(address who) public view returns(uint256[] memory) {\r\n        return stakedTokens[who];\r\n    }\r\n\r\n    function withdrawKatsumi() external onlyOwner {\r\n        uint256 balance = Token.balanceOf(address(this));\r\n        require(balance > 0, \"No tokens to withdraw!\");\r\n        Token.transfer(msg.sender, balance);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTCollection\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"types_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"calculateAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"types_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isValidAccessMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDayBronze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDayGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDayPlatinum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDaySilver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"seeStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterface\",\"type\":\"address\"}],\"name\":\"setNFTInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterface\",\"type\":\"address\"}],\"name\":\"setTokenInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"types_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawKatsumi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47fb61bf9e2ecce4b121d060b2635cff195a13e3f47c1e8713c6f2f3dd4d29fc"}]}