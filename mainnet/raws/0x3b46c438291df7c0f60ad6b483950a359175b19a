{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\ncontract ForTubeGovernorEvents {\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(uint id, address proposer, bytes[] executables, uint startBlock, uint endBlock, string description);\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    /// @param voter The address which casted a vote\r\n    /// @param proposalId The proposal id which was voted on\r\n    /// @param support Support index for the vote.\r\n    /// @param votes Number of votes which were cast by the voter\r\n    event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint id);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint id);\r\n\r\n    /// @notice Emitted when proposal threshold is set\r\n    event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);\r\n\r\n    /// @notice Emitted when pendingAdmin is changed\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n}\r\n\r\n/**\r\n * @title Storage for ForTube Governor\r\n * @notice For future upgrades, do not change ForTubeGovernorDelegateStorageV1. Create a new\r\n * contract which implements ForTubeGovernorDelegateStorageV1 and following the naming convention\r\n * ForTubeGovernorDelegateStorageVX.\r\n */\r\ncontract ForTubeGovernorStorage {\r\n    /// @notice Administrator for this contract\r\n    address public admin;\r\n\r\n    /// @notice Pending administrator for this contract\r\n    address public pendingAdmin;\r\n\r\n    /// @notice The min setable voting delay\r\n    uint public minVotingDelay; // 5760, About 24 Hours, 1 block = 15s for production\r\n\r\n    /// @notice The minimum setable voting period\r\n    uint public minVotingPeriod;// 5760, About 24 hours\uff0c1 block == 15s\r\n\r\n    /// @notice The number of votes required in order for a voter to become a proposer\r\n    uint public proposalThreshold;\r\n\r\n    /// @notice The total number of proposals\r\n    uint public proposalCount;\r\n\r\n    /// @notice The address of the ForTube governance token\r\n    IFdao public fdao;\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping (uint => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping (address => uint) public latestProposalIds;\r\n\r\n    struct Proposal {\r\n        // @notice Unique id for looking up a proposal\r\n        uint id;\r\n\r\n        // @notice Creator of the proposal\r\n        address proposer;\r\n\r\n        // every executable is decoded to address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description\r\n        bytes[] executables;\r\n\r\n        // @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint startBlock;\r\n\r\n        // @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint endBlock;\r\n\r\n        uint[] votes; // votes[x] is current number of votes to x in this proposal\r\n\r\n        // @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n\r\n        // @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n\r\n        // @notice Receipts of ballots for the entire set of voters\r\n        mapping (address => Receipt) receipts;\r\n\r\n        uint winning;\r\n        uint options;// option count\r\n    }\r\n\r\n    /// Ballot receipt record for a voter\r\n    struct Receipt {\r\n        // Whether or not a vote has been cast\r\n        bool hasVoted;\r\n\r\n        // Whether or not the voter supports the proposal or abstains, expand for multi options\r\n        uint8 support;\r\n\r\n        // The number of votes the voter had, which were cast\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Failed,\r\n        Succeeded,\r\n        Executed\r\n    }\r\n}\r\n\r\ninterface IFdao {\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\n\r\ncontract ForTubeGovernor is Initializable, ForTubeGovernorStorage, ForTubeGovernorEvents {\r\n    /// @notice The name of this contract\r\n    string public constant name = \"ForTube Governor\";\r\n\r\n    /// @notice The minimum setable proposal threshold\r\n    uint public constant MIN_PROPOSAL_THRESHOLD = 76000e18; // 76,000 FDAO\r\n\r\n    // /// @notice The minimum setable voting period\r\n    // uint public constant MIN_VOTING_PERIOD = 5760; // About 24 hours\uff0c1 block == 15s\r\n\r\n    /// @notice The max setable voting period\r\n    uint public constant MAX_VOTING_PERIOD = 80640; // About 2 weeks\r\n\r\n    /// @notice The min setable voting delay\r\n    // uint public constant MIN_VOTING_DELAY = 5760; // About 24 Hours, 1 block = 15s\r\n\r\n    /// @notice The max setable voting delay\r\n    uint public constant MAX_VOTING_DELAY = 40320; // About 1 week\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    uint public constant quorumVotes = 400000e18; // 400,000 FDAO\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    uint public constant proposalMaxOperations = 100; // 100 actions, for update so many ftokens\r\n\r\n    /**\r\n      * @notice Used to initialize the contract during delegator contructor\r\n      * @param admin_ The address of the MultiSig\r\n      * @param fdao_ The address of the FDAO token\r\n      * @param minVotingPeriod_ The initial voting period\r\n      * @param proposalThreshold_ The initial proposal threshold\r\n      */\r\n    function initialize(address admin_, address fdao_, uint minVotingPeriod_, uint minVotingDelay_, uint proposalThreshold_) external initializer {\r\n        require(admin_ != address(0), \"ForTubeGovernor::initialize: invalid admin address\");\r\n        require(fdao_ != address(0), \"ForTubeGovernor::initialize: invalid FDAO address\");\r\n        minVotingPeriod = minVotingPeriod_; // init to 5760 (24H) in prod\r\n        minVotingDelay = minVotingDelay_; // init to 5760 (24H) in prod\r\n        require(minVotingDelay_ <= MAX_VOTING_DELAY, \"ForTubeGovernor::propose: invalid voting delay\");\r\n        require(proposalThreshold_ >= MIN_PROPOSAL_THRESHOLD, \"ForTubeGovernor::initialize: invalid proposal threshold\");\r\n\r\n        fdao = IFdao(fdao_);\r\n        proposalThreshold = proposalThreshold_;\r\n\r\n        admin = admin_;\r\n    }\r\n\r\n    /**\r\n      * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\r\n      * @param executables all the exectables in the proposal\r\n      * @param description description of the proposal\r\n      * @param options voted options count\r\n      * @param startBlock voting start block number\r\n      * @param votingPeriod voting Peroid in block unit\r\n      * @return Proposal id of new proposal\r\n      */\r\n    function propose(bytes[] memory executables, string memory description, uint options, uint256 startBlock, uint256 votingPeriod) public returns (uint) {\r\n        require(options >= 2, \"invalid options\");\r\n        require(startBlock > block.number + minVotingDelay && startBlock <= block.number + MAX_VOTING_DELAY, \"invalid block number\");\r\n        require(executables.length == options, \"ForTubeGovernor::propose: executables != options\");\r\n        require(votingPeriod >= minVotingPeriod && votingPeriod <= MAX_VOTING_PERIOD, \"ForTubeGovernor::propose: invalid voting period\");\r\n\r\n        require(fdao.getPriorVotes(msg.sender, sub256(block.number, 1)) >= proposalThreshold, \"ForTubeGovernor::propose: proposer votes below proposal threshold\");\r\n        for (uint i = 0; i < options; i++) {\r\n            (, address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, ) = abi.decode(executables[i], (uint[], address[], uint[], string[], bytes[], string));\r\n\r\n            require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \"ForTubeGovernor::propose: proposal function information arity mismatch\");\r\n            require(targets.length <= proposalMaxOperations, \"ForTubeGovernor::propose: too many actions\");\r\n        }\r\n\r\n        uint latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n          ProposalState proposersLatestProposalState = state(latestProposalId);\r\n          require(proposersLatestProposalState != ProposalState.Active, \"ForTubeGovernor::propose: one live proposal per proposer, found an already active proposal\");\r\n          require(proposersLatestProposalState != ProposalState.Pending, \"ForTubeGovernor::propose: one live proposal per proposer, found an already pending proposal\");\r\n        }\r\n\r\n        uint endBlock = add256(startBlock, votingPeriod);\r\n\r\n        uint[] memory _votes = new uint[](options);\r\n        proposalCount++;\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            executables: executables,\r\n            startBlock: startBlock,\r\n            endBlock: endBlock,\r\n            votes: _votes,\r\n            canceled: false,\r\n            executed: false,\r\n            winning: uint(-1), // invalid option, 0 is valid, so use -1 as invalid.\r\n            options: options\r\n        });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalCreated(newProposal.id, msg.sender, executables, startBlock, endBlock, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    /**\r\n      * @notice Executes a queued proposal if eta has passed\r\n      * @param proposalId The id of the proposal to execute\r\n      */\r\n    function execute(uint proposalId) external payable {\r\n        require(msg.sender == admin, \"ForTubeGovernor::execute: Call must come from admin.\");\r\n        require(state(proposalId) == ProposalState.Succeeded, \"ForTubeGovernor::execute: proposal can only be executed if it is queued\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n\r\n        require(proposal.winning != uint(-1), \"!winning\");\r\n\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    /**\r\n      * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\r\n      * @param proposalId The id of the proposal to cancel\r\n      */\r\n    function cancel(uint proposalId) external {\r\n        require(state(proposalId) != ProposalState.Executed && state(proposalId) != ProposalState.Canceled, \"ForTubeGovernor::cancel: cannot cancel executed or canceled proposal\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n\r\n        // Proposer can cancel\r\n        if(msg.sender != proposal.proposer) {\r\n            require(fdao.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold, \"ForTubeGovernor::cancel: proposer above threshold\");\r\n        }\r\n\r\n        proposal.canceled = true;\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    /**\r\n      * @notice Gets actions of a proposal\r\n      * @param proposalId the id of the proposal\r\n      * @param option the option of the proposal\r\n      * @return chain_ids chain_ids of the proposal actions\r\n      * @return targets targets of the proposal actions\r\n      * @return values values of the proposal actions\r\n      * @return signatures signatures of the proposal actions\r\n      * @return calldatas calldatas of the proposal actions\r\n      */\r\n    function getActions(uint proposalId, uint option) external view returns (uint[] memory chain_ids, address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory descriptions) {\r\n        Proposal storage p = proposals[proposalId];\r\n        require(option < p.executables.length, \"option out of range\");\r\n        (chain_ids, targets, values, signatures, calldatas, descriptions) = abi.decode(p.executables[option], (uint[], address[], uint[], string[], bytes[], string));\r\n    }\r\n\r\n    function getExecutables(uint proposalId) external view returns (bytes[] memory executeables) {\r\n        Proposal storage p = proposals[proposalId];\r\n        return p.executables;\r\n    }\r\n\r\n    function getExecutablesAt(uint proposalId, uint index) external view returns (bytes memory executeables) {\r\n        Proposal storage p = proposals[proposalId];\r\n        require(index < p.executables.length, \"index out of range\");\r\n        return p.executables[index];\r\n    }\r\n\r\n    /**\r\n      * @notice Gets the receipt for a voter on a given proposal\r\n      * @param proposalId the id of proposal\r\n      * @param voter The address of the voter\r\n      * @return The voting receipt\r\n      */\r\n    function getReceipt(uint proposalId, address voter) external view returns (Receipt memory) {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    /**\r\n      * @notice Gets the state of a proposal\r\n      * @param proposalId The id of the proposal\r\n      * @return Proposal state\r\n      */\r\n    function state(uint proposalId) public view returns (ProposalState) {\r\n        require(proposalCount >= proposalId, \"ForTubeGovernor::state: invalid proposal id\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.winning == uint(-1) || proposal.votes[proposal.winning] < quorumVotes) {\r\n            return ProposalState.Failed;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else {\r\n            return ProposalState.Succeeded;\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @notice Cast a vote for a proposal\r\n      * @param proposalId The id of the proposal to vote on\r\n      * @param support The support zero-based index for the vote.\r\n      */\r\n    function castVote(uint proposalId, uint8 support) external {\r\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support));\r\n    }\r\n\r\n    /**\r\n      * @notice Internal function that caries out voting logic\r\n      * @param voter The voter that is casting their vote\r\n      * @param proposalId The id of the proposal to vote on\r\n      * @param support The support zero-based index for the vote.\r\n      * @return The number of votes cast\r\n      */\r\n    function castVoteInternal(address voter, uint proposalId, uint8 support) internal returns (uint96) {\r\n        require(state(proposalId) == ProposalState.Active, \"ForTubeGovernor::castVoteInternal: voting is closed\");\r\n        require(support < proposals[proposalId].options, \"ForTubeGovernor::castVoteInternal: invalid vote type\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(receipt.hasVoted == false, \"ForTubeGovernor::castVoteInternal: voter already voted\");\r\n        uint96 votes = fdao.getPriorVotes(voter, proposal.startBlock);\r\n\r\n        proposal.votes[support] = add256(proposal.votes[support], votes);\r\n\r\n        uint _max = proposal.winning == uint(-1) ? 0 : proposal.votes[proposal.winning];\r\n        if (proposal.votes[support] > _max) {\r\n            proposal.winning = support;\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        return votes;\r\n    }\r\n\r\n    /**\r\n      * @notice Admin function for setting the proposal threshold\r\n      * @dev newProposalThreshold must be greater than the hardcoded min\r\n      * @param newProposalThreshold new proposal threshold\r\n      */\r\n    function _setProposalThreshold(uint newProposalThreshold) external {\r\n        require(msg.sender == admin, \"ForTubeGovernor::_setProposalThreshold: admin only\");\r\n        require(newProposalThreshold >= MIN_PROPOSAL_THRESHOLD, \"ForTubeGovernor::_setProposalThreshold: invalid proposal threshold\");\r\n        uint oldProposalThreshold = proposalThreshold;\r\n        proposalThreshold = newProposalThreshold;\r\n\r\n        emit ProposalThresholdSet(oldProposalThreshold, proposalThreshold);\r\n    }\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      */\r\n    function _setPendingAdmin(address newPendingAdmin) external {\r\n        // Check caller = admin\r\n        require(msg.sender == admin, \"ForTubeGovernor:_setPendingAdmin: admin only\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      */\r\n    function _acceptAdmin() external {\r\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\r\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \"ForTubeGovernor:_acceptAdmin: pending admin only\");\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        require(b <= a, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"executables\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"_setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fdao\",\"outputs\":[{\"internalType\":\"contract IFdao\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chain_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"descriptions\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getExecutables\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"executeables\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExecutablesAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"executeables\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct ForTubeGovernorStorage.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fdao_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minVotingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minVotingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVotingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVotingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"options\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"executables\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"options\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ForTubeGovernorStorage.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ForTubeGovernor", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3e4c0ecdc86c1225e323dd97534cdf93fc457cc8400f7f035eac4e7fe6d386d"}]}