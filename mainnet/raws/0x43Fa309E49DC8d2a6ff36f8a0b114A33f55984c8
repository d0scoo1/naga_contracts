{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SueiBianDAODispenser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nenum SaleStage {\\n    None,\\n    FirstWhiteList,\\n    SecondWhiteList,\\n    PublicSale\\n}\\n\\ninterface NFT {\\n    function mint(address receiver) external;\\n}\\n\\ncontract SueiBianDispenser is Ownable, ReentrancyGuard {\\n    using Strings for uint256;\\n    using MerkleProof for bytes32[];\\n\\n    uint256 public firstWhiteListSaleStartTime = 1642683600; // Jan 20th 2022. 9:00PM UTC+8\\n    uint256 public firstWhiteListSaleEndTime = 1642685400; // Jan 20th 2022. 9:30PM UTC+8\\n    uint256 public firstWhiteListSaleRemainingCount = 120;\\n\\n    uint256 public secondWhiteListSaleStartTime = 1642685400; // Jan 20th 2022. 9:30PM UTC+8\\n    uint256 public secondWhiteListSaleEndTime = 1642687200; // Jan 20th 2022. 10:00PM UTC+8\\n    uint256 public secondWhiteListSaleRemainingCount = 180;\\n\\n    uint256 public publicSaleStartTime = 1642687200; // Jan 20th 2022. 10:00PM UTC+8\\n    uint256 public publicSaleEndTime = 1642689000; // Jan 20th 2022. 10:30PM UTC+8\\n    uint256 public publicSalePurchasedCount = 0;\\n    uint256 public publicSaleMaxPurchaseAmount = 3;\\n\\n    uint256 public maxDispenseCount = 300;\\n\\n    uint256 public mintPrice = 0.08 ether;\\n\\n    bytes32 private _firstWhiteListMerkleRoot;\\n    bytes32 private _secondWhiteListMerkleRoot;\\n\\n    address public sueiBianDAOAddress;\\n    mapping(address => bool) public firstWhiteListPurchased;\\n    mapping(address => bool) public secondWhiteListPurchased;\\n\\n    constructor(address _sueiBianDAOAddress) {\\n        sueiBianDAOAddress = _sueiBianDAOAddress;\\n    }\\n\\n    /* ************** */\\n    /* USER FUNCTIONS */\\n    /* ************** */\\n    function publicSaleRemainingCount() public view returns (uint256) {\\n        uint256 totalWhiteListRemainingCount = firstWhiteListSaleRemainingCount +\\n                secondWhiteListSaleRemainingCount;\\n        return\\n            publicSalePurchasedCount <= totalWhiteListRemainingCount\\n                ? totalWhiteListRemainingCount - publicSalePurchasedCount\\n                : 0;\\n    }\\n\\n    // @notice This function returns the current active sale stage\\n    // @notice 0: NONE, 1: First Whitelist Sale, 2: Second Whitelist Sale, 3: Public Sale\\n    function getCurrentActiveSaleStage() public view returns (SaleStage) {\\n        bool firstWhiteListSaleIsActive = (block.timestamp >\\n            firstWhiteListSaleStartTime) &&\\n            (block.timestamp < firstWhiteListSaleEndTime);\\n        if (firstWhiteListSaleIsActive) {\\n            return SaleStage.FirstWhiteList;\\n        }\\n        bool secondWhiteListSaleIsActive = (block.timestamp >\\n            secondWhiteListSaleStartTime) &&\\n            (block.timestamp < secondWhiteListSaleEndTime);\\n        if (secondWhiteListSaleIsActive) {\\n            return SaleStage.SecondWhiteList;\\n        }\\n        bool publicSaleIsActive = (block.timestamp > publicSaleStartTime) &&\\n            (block.timestamp < publicSaleEndTime);\\n        if (publicSaleIsActive) {\\n            return SaleStage.PublicSale;\\n        }\\n        return SaleStage.None;\\n    }\\n\\n    function sueiBianBuy(bytes32[] calldata proof, uint256 numberOfTokens)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(\\n            msg.value == mintPrice * numberOfTokens,\\n            \\\"sent ether value incorrect\\\"\\n        );\\n        SaleStage currentActiveSaleStage = getCurrentActiveSaleStage();\\n        require(\\n            currentActiveSaleStage != SaleStage.None,\\n            \\\"no active sale right now\\\"\\n        );\\n        require(numberOfTokens > 0, \\\"numberOfTokens cannot be 0\\\");\\n        if (currentActiveSaleStage == SaleStage.FirstWhiteList) {\\n            _sueiBianBuyFirstWhiteList(proof, numberOfTokens);\\n        } else if (currentActiveSaleStage == SaleStage.SecondWhiteList) {\\n            _sueiBianBuySecondWhiteList(proof, numberOfTokens);\\n        } else {\\n            _sueiBianBuyPublicSale(numberOfTokens);\\n        }\\n    }\\n\\n    function _sueiBianBuyFirstWhiteList(\\n        bytes32[] calldata proof,\\n        uint256 numberOfTokens\\n    ) internal {\\n        require(\\n            !firstWhiteListPurchased[msg.sender],\\n            \\\"firstWhiteListPurchased already\\\"\\n        );\\n        require(\\n            proof.verify(\\n                _firstWhiteListMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender, numberOfTokens))\\n            ),\\n            \\\"failed to verify first WL merkle root\\\"\\n        );\\n        require(\\n            firstWhiteListSaleRemainingCount >= numberOfTokens,\\n            \\\"first whitelist sold out\\\"\\n        );\\n        firstWhiteListPurchased[msg.sender] = true;\\n        firstWhiteListSaleRemainingCount -= numberOfTokens;\\n        for (uint256 i = 0; i < numberOfTokens; i++) {\\n            NFT(sueiBianDAOAddress).mint(msg.sender);\\n        }\\n    }\\n\\n    function _sueiBianBuySecondWhiteList(\\n        bytes32[] calldata proof,\\n        uint256 numberOfTokens\\n    ) internal {\\n        require(\\n            !secondWhiteListPurchased[msg.sender],\\n            \\\"secondWhiteListPurchased already\\\"\\n        );\\n        require(\\n            proof.verify(\\n                _secondWhiteListMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender, numberOfTokens))\\n            ),\\n            \\\"failed to verify second WL merkle root\\\"\\n        );\\n        require(\\n            secondWhiteListSaleRemainingCount >= numberOfTokens,\\n            \\\"second whitelist sold out\\\"\\n        );\\n        secondWhiteListPurchased[msg.sender] = true;\\n        secondWhiteListSaleRemainingCount -= numberOfTokens;\\n        for (uint256 i = 0; i < numberOfTokens; i++) {\\n            NFT(sueiBianDAOAddress).mint(msg.sender);\\n        }\\n    }\\n\\n    function _sueiBianBuyPublicSale(uint256 numberOfTokens) internal {\\n        require(\\n            publicSaleRemainingCount() >= numberOfTokens,\\n            \\\"public sale sold out\\\"\\n        );\\n        require(\\n            numberOfTokens <= publicSaleMaxPurchaseAmount,\\n            \\\"numberOfTokens exceeds publicSaleMaxPurchaseAmount\\\"\\n        );\\n\\n        publicSalePurchasedCount += numberOfTokens;\\n        for (uint256 i = 0; i < numberOfTokens; i++) {\\n            NFT(sueiBianDAOAddress).mint(msg.sender);\\n        }\\n    }\\n\\n    /* *************** */\\n    /* ADMIN FUNCTIONS */\\n    /* *************** */\\n\\n    function setMerkleRoots(bytes32 _firstMerkleRoot, bytes32 _secondMerkleRoot)\\n        external\\n        onlyOwner\\n    {\\n        _firstWhiteListMerkleRoot = _firstMerkleRoot;\\n        _secondWhiteListMerkleRoot = _secondMerkleRoot;\\n    }\\n\\n    function setSaleData(\\n        uint256 _firstWhiteListSaleStartTime,\\n        uint256 _firstWhiteListSaleEndTime,\\n        uint256 _firstWhiteListSaleRemainingCount,\\n        uint256 _secondWhiteListSaleStartTime,\\n        uint256 _secondWhiteListSaleEndTime,\\n        uint256 _secondWhiteListSaleRemainingCount,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSalePurchasedCount,\\n        uint256 _publicSaleMaxPurchaseAmount,\\n        uint256 _maxDispenseCount,\\n        uint256 _mintPrice\\n    ) external onlyOwner {\\n        firstWhiteListSaleStartTime = _firstWhiteListSaleStartTime;\\n        firstWhiteListSaleEndTime = _firstWhiteListSaleEndTime;\\n        firstWhiteListSaleRemainingCount = _firstWhiteListSaleRemainingCount;\\n        secondWhiteListSaleStartTime = _secondWhiteListSaleStartTime;\\n        secondWhiteListSaleEndTime = _secondWhiteListSaleEndTime;\\n        secondWhiteListSaleRemainingCount = _secondWhiteListSaleRemainingCount;\\n        publicSaleStartTime = _publicSaleStartTime;\\n        publicSaleEndTime = _publicSaleEndTime;\\n        publicSalePurchasedCount = _publicSalePurchasedCount;\\n        publicSaleMaxPurchaseAmount = _publicSaleMaxPurchaseAmount;\\n        maxDispenseCount = _maxDispenseCount;\\n        mintPrice = _mintPrice;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sueiBianDAOAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstWhiteListPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstWhiteListSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstWhiteListSaleRemainingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstWhiteListSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentActiveSaleStage\",\"outputs\":[{\"internalType\":\"enum SaleStage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDispenseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleMaxPurchaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePurchasedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleRemainingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"secondWhiteListPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondWhiteListSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondWhiteListSaleRemainingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondWhiteListSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstWhiteListSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstWhiteListSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstWhiteListSaleRemainingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondWhiteListSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondWhiteListSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondWhiteListSaleRemainingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSalePurchasedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleMaxPurchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDispenseCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setSaleData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"sueiBianBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sueiBianDAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SueiBianDispenser", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a720a6754b20e1204e77a4f1625410c6e9e8413a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}