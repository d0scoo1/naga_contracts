{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/main/AdminInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\nimport \\\"./AlphaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AdminInterface\\r\\n * @dev Implementation of AdminInterface\\r\\n */\\r\\n\\r\\ncontract AdminInterface is Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Decimal factors\\r\\n    uint256 public COEFF_SCALE_DECIMALS_F = 1e4; // for fees\\r\\n    uint256 public COEFF_SCALE_DECIMALS_P = 1e6; // for price\\r\\n    uint256 public AMOUNT_SCALE_DECIMALS = 1; // for stable token\\r\\n\\r\\n    // Fees rate\\r\\n    uint256 public DEPOSIT_FEE_RATE = 50; // \\r\\n    uint256 public MANAGEMENT_FEE_RATE = 200;\\r\\n    uint256 public PERFORMANCE_FEE_RATE = 2000;\\r\\n    \\r\\n    // Fees parameters\\r\\n    uint256 public SECONDES_PER_YEAR = 86400 * 365;  \\r\\n    uint256 public PERFORMANCE_FEES = 0;\\r\\n    uint256 public MANAGEMENT_FEES = 0;\\r\\n    uint256 public MANAGEMENT_FEE_TIME = 0;\\r\\n\\r\\n    // ALPHA price\\r\\n    uint256 public ALPHA_PRICE = 1000000;\\r\\n    uint256 public ALPHA_PRICE_WAVG = 1000000;\\r\\n\\r\\n     // User deposit parameters\\r\\n    uint256 public MIN_AMOUNT = 1000 * 1e18;\\r\\n    bool public CAN_CANCEL = true;\\r\\n    \\r\\n    // Withdrawal parameters\\r\\n    uint256 public LOCKUP_PERIOD_MANAGER = 2 hours; \\r\\n    uint256 public LOCKUP_PERIOD_USER = 0 days; \\r\\n    uint256 public TIME_WITHDRAW_MANAGER = 0;\\r\\n   \\r\\n    // Portfolio management parameters\\r\\n    uint public netDepositInd= 0;\\r\\n    uint256 public netAmountEvent =0;\\r\\n    uint256 public SLIPPAGE_TOLERANCE = 200;\\r\\n    address public manager;\\r\\n    address public treasury;\\r\\n    address public alphaStrategy;\\r\\n\\r\\n    //Contracts\\r\\n    AlphaToken public alphaToken;\\r\\n    IERC20 public stableToken;\\r\\n    constructor( address _manager, address _treasury, address _stableTokenAddress,\\r\\n     address _alphaToken) {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _treasury != address(0),\\r\\n            \\\"Formation.Fi:  treasury address is the zero address\\\"\\r\\n            );\\r\\n        require(\\r\\n            _stableTokenAddress != address(0),\\r\\n            \\\"Formation.Fi: Stable token address is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _alphaToken != address(0),\\r\\n            \\\"Formation.Fi: ALPHA token address is the zero address\\\"\\r\\n        );\\r\\n        manager = _manager;\\r\\n        treasury = _treasury; \\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        alphaToken = AlphaToken(_alphaToken);\\r\\n        uint8 _stableTokenDecimals = ERC20( _stableTokenAddress).decimals();\\r\\n        if ( _stableTokenDecimals == 6) {\\r\\n            AMOUNT_SCALE_DECIMALS= 1e12;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Modifiers\\r\\n      modifier onlyAlphaStrategy() {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n        require(msg.sender == alphaStrategy,\\r\\n             \\\"Formation.Fi: Caller is not the alphaStrategy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     modifier onlyManager() {\\r\\n        require(msg.sender == manager, \\r\\n        \\\"Formation.Fi: Caller is not the manager\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier canCancel() {\\r\\n        require(CAN_CANCEL == true, \\\"Formation Fi: Cancel feature is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(\\r\\n            _treasury != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function setManager(address _manager) external onlyOwner {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: manager address is the zero address\\\"\\r\\n        );\\r\\n        manager = _manager;\\r\\n    }\\r\\n\\r\\n    function setAlphaStrategy(address _alphaStrategy) public onlyOwner {\\r\\n         require(\\r\\n            _alphaStrategy!= address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         alphaStrategy = _alphaStrategy;\\r\\n    } \\r\\n\\r\\n     function setCancel(bool _cancel) external onlyManager {\\r\\n        CAN_CANCEL = _cancel;\\r\\n    }\\r\\n     function setLockupPeriodManager(uint256 _lockupPeriodManager) external onlyManager {\\r\\n        LOCKUP_PERIOD_MANAGER = _lockupPeriodManager;\\r\\n    }\\r\\n\\r\\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\\r\\n        LOCKUP_PERIOD_USER = _lockupPeriodUser;\\r\\n    }\\r\\n \\r\\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\\r\\n        DEPOSIT_FEE_RATE = _rate;\\r\\n    }\\r\\n\\r\\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\\r\\n        MANAGEMENT_FEE_RATE = _rate;\\r\\n    }\\r\\n\\r\\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\\r\\n        PERFORMANCE_FEE_RATE  = _rate;\\r\\n    }\\r\\n    function setMinAmount(uint256 _minAmount) external onlyManager {\\r\\n        MIN_AMOUNT = _minAmount;\\r\\n     }\\r\\n\\r\\n    function setCoeffScaleDecimalsFees (uint256 _scale) external onlyManager {\\r\\n        require(\\r\\n             _scale > 0,\\r\\n            \\\"Formation.Fi: decimal fees factor is 0\\\"\\r\\n        );\\r\\n\\r\\n       COEFF_SCALE_DECIMALS_F  = _scale;\\r\\n     }\\r\\n\\r\\n    function setCoeffScaleDecimalsPrice (uint256 _scale) external onlyManager {\\r\\n        require(\\r\\n             _scale > 0,\\r\\n            \\\"Formation.Fi: decimal price factor is 0\\\"\\r\\n        );\\r\\n       COEFF_SCALE_DECIMALS_P  = _scale;\\r\\n     }\\r\\n\\r\\n    function updateAlphaPrice(uint256 _price) external onlyManager{\\r\\n        require(\\r\\n             _price > 0,\\r\\n            \\\"Formation.Fi: ALPHA price is 0\\\"\\r\\n        );\\r\\n        ALPHA_PRICE = _price;\\r\\n    }\\r\\n\\r\\n    function updateAlphaPriceWAVG(uint256 _price_WAVG) external onlyAlphaStrategy {\\r\\n        require(\\r\\n             _price_WAVG > 0,\\r\\n            \\\"Formation.Fi: ALPHA price WAVG is 0\\\"\\r\\n        );\\r\\n        ALPHA_PRICE_WAVG  = _price_WAVG;\\r\\n    }\\r\\n    function updateManagementFeeTime(uint256 _time) external onlyAlphaStrategy {\\r\\n        MANAGEMENT_FEE_TIME = _time;\\r\\n    }\\r\\n  \\r\\n    // Calculate fees \\r\\n    function calculatePerformanceFees() external onlyManager {\\r\\n        require(PERFORMANCE_FEES == 0, \\\"Formation.Fi: performance fees pending minting\\\");\\r\\n        uint256 _deltaPrice = 0;\\r\\n        if (ALPHA_PRICE > ALPHA_PRICE_WAVG) {\\r\\n            _deltaPrice = ALPHA_PRICE - ALPHA_PRICE_WAVG;\\r\\n            ALPHA_PRICE_WAVG = ALPHA_PRICE;\\r\\n            PERFORMANCE_FEES = (alphaToken.totalSupply() *\\r\\n            _deltaPrice * PERFORMANCE_FEE_RATE) / (ALPHA_PRICE * COEFF_SCALE_DECIMALS_F); \\r\\n        }\\r\\n    }\\r\\n    function calculateManagementFees() external onlyManager {\\r\\n        require(MANAGEMENT_FEES == 0, \\\"Formation.Fi: management fees pending minting\\\");\\r\\n        if (MANAGEMENT_FEE_TIME!= 0){\\r\\n           uint256 _deltaTime;\\r\\n           _deltaTime = block.timestamp -  MANAGEMENT_FEE_TIME; \\r\\n           MANAGEMENT_FEES = (alphaToken.totalSupply() * MANAGEMENT_FEE_RATE * _deltaTime ) \\r\\n           /(COEFF_SCALE_DECIMALS_F * SECONDES_PER_YEAR);\\r\\n           MANAGEMENT_FEE_TIME = block.timestamp; \\r\\n        }\\r\\n    }\\r\\n     \\r\\n    // Mint fees\\r\\n    function mintFees() external onlyManager {\\r\\n        if ((PERFORMANCE_FEES + MANAGEMENT_FEES) > 0){\\r\\n           alphaToken.mint(treasury, PERFORMANCE_FEES + MANAGEMENT_FEES);\\r\\n           PERFORMANCE_FEES = 0;\\r\\n           MANAGEMENT_FEES = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Calculate protfolio deposit indicator \\r\\n    function calculateNetDepositInd(uint256 _depositAmountTotal, uint256 _withdrawAmountTotal)\\r\\n     public onlyAlphaStrategy returns( uint) {\\r\\n        if ( _depositAmountTotal >= \\r\\n        ((_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P)){\\r\\n            netDepositInd = 1 ;\\r\\n        }\\r\\n        else {\\r\\n            netDepositInd = 0;\\r\\n        }\\r\\n        return netDepositInd;\\r\\n    }\\r\\n\\r\\n    // Calculate protfolio Amount\\r\\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, uint256 _withdrawAmountTotal,\\r\\n        uint256 _MAX_AMOUNT_DEPOSIT, uint256 _MAX_AMOUNT_WITHDRAW) \\r\\n        public onlyAlphaStrategy returns(uint256) {\\r\\n        uint256 _netDeposit;\\r\\n        if (netDepositInd == 1) {\\r\\n             _netDeposit = _depositAmountTotal - \\r\\n             (_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P;\\r\\n             netAmountEvent = Math.min( _netDeposit, _MAX_AMOUNT_DEPOSIT);\\r\\n        }\\r\\n        else {\\r\\n            _netDeposit= ((_withdrawAmountTotal * ALPHA_PRICE) / COEFF_SCALE_DECIMALS_P) -\\r\\n            _depositAmountTotal;\\r\\n            netAmountEvent = Math.min(_netDeposit, _MAX_AMOUNT_WITHDRAW);\\r\\n        }\\r\\n        return netAmountEvent;\\r\\n    }\\r\\n\\r\\n    // Protect against Slippage\\r\\n    function protectAgainstSlippage(uint256 _withdrawAmount) public onlyManager \\r\\n         whenNotPaused   returns (uint256) {\\r\\n        require(netDepositInd == 0, \\\"Formation.Fi: it is not a slippage case\\\");\\r\\n        require(_withdrawAmount != 0, \\\"Formation.Fi: amount is zero\\\");\\r\\n       uint256 _amount = 0; \\r\\n       uint256 _deltaAmount =0;\\r\\n       uint256 _slippage = 0;\\r\\n       uint256  _alphaAmount = 0;\\r\\n       uint256 _balanceAlphaTreasury = alphaToken.balanceOf(treasury);\\r\\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * AMOUNT_SCALE_DECIMALS;\\r\\n      \\r\\n        if (_withdrawAmount< netAmountEvent){\\r\\n          _amount = netAmountEvent - _withdrawAmount;   \\r\\n          _slippage = (_amount * COEFF_SCALE_DECIMALS_F ) / netAmountEvent;\\r\\n            if (_slippage >= SLIPPAGE_TOLERANCE) {\\r\\n             return netAmountEvent;\\r\\n            }\\r\\n            else {\\r\\n              _deltaAmount = Math.min( _amount, _balanceStableTreasury);\\r\\n                if ( _deltaAmount  > 0){\\r\\n                   stableToken.safeTransferFrom(treasury, alphaStrategy, _deltaAmount/AMOUNT_SCALE_DECIMALS);\\r\\n                   _alphaAmount = (_deltaAmount * COEFF_SCALE_DECIMALS_P)/ALPHA_PRICE;\\r\\n                   alphaToken.mint(treasury, _alphaAmount);\\r\\n                   return _amount - _deltaAmount;\\r\\n               }\\r\\n               else {\\r\\n                   return _amount; \\r\\n               }  \\r\\n            }    \\r\\n        \\r\\n        }\\r\\n        else  {\\r\\n          _amount = _withdrawAmount - netAmountEvent;   \\r\\n          _alphaAmount = (_amount * COEFF_SCALE_DECIMALS_P)/ALPHA_PRICE;\\r\\n          _alphaAmount = Math.min(_alphaAmount, _balanceAlphaTreasury);\\r\\n          if (_alphaAmount >0) {\\r\\n             _deltaAmount = (_alphaAmount * ALPHA_PRICE)/COEFF_SCALE_DECIMALS_P;\\r\\n             stableToken.safeTransfer(treasury, _deltaAmount/AMOUNT_SCALE_DECIMALS);   \\r\\n             alphaToken.burn( treasury, _alphaAmount);\\r\\n            }\\r\\n           if ((_amount - _deltaAmount) > 0) {\\r\\n              stableToken.safeTransfer(manager, (_amount - _deltaAmount)/AMOUNT_SCALE_DECIMALS); \\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n\\r\\n    } \\r\\n\\r\\n    // send Stable Tokens to the contract\\r\\n    function sendStableTocontract(uint256 _amount) external \\r\\n      whenNotPaused onlyManager {\\r\\n      require( _amount > 0,  \\\"Formation.Fi: amount is zero\\\");\\r\\n      stableToken.safeTransferFrom(msg.sender, address(this), _amount/AMOUNT_SCALE_DECIMALS);\\r\\n      }\\r\\n\\r\\n     // send Stable Tokens from the contract AlphaStrategy\\r\\n    function sendStableFromcontract() external \\r\\n        whenNotPaused onlyManager {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         stableToken.safeTransfer(alphaStrategy, stableToken.balanceOf(address(this)));\\r\\n      }\\r\\n  \\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x95d89b41)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x06fdde03)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x313ce567)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0x23b872dd, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"Transaction is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused, \\\"Transaction is available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() public onlyOwner whenNotPaused {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() public onlyOwner whenPaused {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/main/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/main/AlphaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AlphaToken\\r\\n * @dev Implementation of the LP Token \\\"ALPHA\\\".\\r\\n */\\r\\n\\r\\ncontract AlphaToken is ERC20, Ownable {\\r\\n\\r\\n    // Proxy address\\r\\n    address alphaStrategy;\\r\\n    address admin;\\r\\n\\r\\n    // Deposit Mapping\\r\\n    mapping(address => uint256[]) public  amountDepositPerAddress;\\r\\n    mapping(address => uint256[]) public  timeDepositPerAddress; \\r\\n    constructor() ERC20(\\\"Formation Fi: ALPHA TOKEN\\\", \\\"ALPHA\\\") {}\\r\\n\\r\\n    // Modifiers \\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            (alphaStrategy != address(0)) && (admin != address(0)),\\r\\n            \\\"Formation.Fi: proxy is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            (msg.sender == alphaStrategy) || (msg.sender == admin),\\r\\n             \\\"Formation.Fi: Caller is not the proxy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyAlphaStrategy() {\\r\\n        require(alphaStrategy != address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == alphaStrategy,\\r\\n             \\\"Formation.Fi: Caller is not the alphaStrategy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Setter functions\\r\\n    function setAlphaStrategy(address _alphaStrategy) external onlyOwner {\\r\\n        require(\\r\\n            _alphaStrategy!= address(0),\\r\\n            \\\"Formation.Fi: alphaStrategy is the zero address\\\"\\r\\n        );\\r\\n         alphaStrategy = _alphaStrategy;\\r\\n    } \\r\\n    function setAdmin(address _admin) external onlyOwner {\\r\\n        require(\\r\\n            _admin!= address(0),\\r\\n            \\\"Formation.Fi: admin is the zero address\\\"\\r\\n        );\\r\\n         admin = _admin;\\r\\n    } \\r\\n\\r\\n    function addTimeDeposit(address _account, uint256 _time) external onlyAlphaStrategy {\\r\\n         require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _time!= 0,\\r\\n            \\\"Formation.Fi: deposit time is zero\\\"\\r\\n        );\\r\\n        timeDepositPerAddress[_account].push(_time);\\r\\n    } \\r\\n\\r\\n    function addAmountDeposit(address _account, uint256 _amount) external onlyAlphaStrategy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: deposit amount is zero\\\"\\r\\n        );\\r\\n        amountDepositPerAddress[_account].push(_amount);\\r\\n\\r\\n    } \\r\\n    \\r\\n    // functions \\\"mint\\\" and \\\"burn\\\"\\r\\n   function mint(address _account, uint256 _amount) external onlyProxy {\\r\\n       require(\\r\\n          _account!= address(0),\\r\\n           \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n       _mint(_account,  _amount);\\r\\n   }\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external onlyProxy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n         require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        _burn( _account, _amount);\\r\\n    }\\r\\n    \\r\\n    // Check the user lock up condition for his withdrawal request\\r\\n\\r\\n    function ChecklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \\r\\n     external view returns (bool){\\r\\n\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        uint256 [] memory _amountDeposit = amountDepositPerAddress[_account];\\r\\n        uint256 [] memory _timeDeposit = timeDepositPerAddress[_account];\\r\\n        uint256 _amountTotal = 0;\\r\\n        for (uint256 i = 0; i < _amountDeposit.length; i++) {\\r\\n            require ((block.timestamp - _timeDeposit[i]) >= _period, \\r\\n            \\\"Formation.Fi: user position locked\\\");\\r\\n            if (_amount<= (_amountTotal + _amountDeposit[i])){\\r\\n                break; \\r\\n            }\\r\\n            _amountTotal = _amountTotal + _amountDeposit[i];\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Functions to update  users deposit data \\r\\n    function updateDepositDataExternal( address _account,  uint256 _amount) \\r\\n        external onlyAlphaStrategy {\\r\\n         updateDepositData(_account,  _amount);\\r\\n    }\\r\\n    function updateDepositData( address _account,  uint256 _amount) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: amount is zero\\\"\\r\\n        );\\r\\n        uint256 [] memory _amountDeposit = amountDepositPerAddress[ _account];\\r\\n        uint256 _amountlocal = 0;\\r\\n        uint256 _amountTotal = 0;\\r\\n        uint256 _newAmount;\\r\\n        for (uint256 i = 0; i < _amountDeposit.length; i++) {\\r\\n            _amountlocal  = Math.min(_amountDeposit[i], _amount- _amountTotal);\\r\\n            _amountTotal = _amountTotal +  _amountlocal;\\r\\n            _newAmount = _amountDeposit[i] - _amountlocal;\\r\\n            amountDepositPerAddress[_account][i] = _newAmount;\\r\\n            if (_newAmount==0){\\r\\n               deleteDepositData(_account, i);\\r\\n            }\\r\\n            if (_amountTotal == _amount){\\r\\n               break; \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Delete deposit data \\r\\n    function deleteDepositData(address _account, uint256 _ind) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: account is the zero address\\\"\\r\\n        );\\r\\n        uint256 size = amountDepositPerAddress[_account].length-1;\\r\\n        \\r\\n        require( _ind <= size,\\r\\n            \\\"Formation.Fi: index is out of the range\\\"\\r\\n        );\\r\\n        for (uint256 i = _ind; i< size; i++){\\r\\n            amountDepositPerAddress[ _account][i] = amountDepositPerAddress[ _account][i+1];\\r\\n            timeDepositPerAddress[ _account][i] = timeDepositPerAddress[ _account][i+1];\\r\\n        }\\r\\n        amountDepositPerAddress[ _account].pop();\\r\\n        timeDepositPerAddress[ _account].pop();\\r\\n       \\r\\n    }\\r\\n   \\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n      ) internal virtual override{\\r\\n      \\r\\n       if ((to != address(0)) && (to != alphaStrategy) \\r\\n       && (to != admin) && (from != address(0)) )\\r\\n       {\\r\\n          updateDepositData(from, amount);\\r\\n          amountDepositPerAddress[to].push(amount);\\r\\n          timeDepositPerAddress[to].push(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alphaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPHA_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALPHA_PRICE_WAVG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_SCALE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAN_CANCEL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_F\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKUP_PERIOD_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKUP_PERIOD_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGEMENT_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGEMENT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGEMENT_FEE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDES_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_WITHDRAW_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaToken\",\"outputs\":[{\"internalType\":\"contract AlphaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_AMOUNT_DEPOSIT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_AMOUNT_WITHDRAW\",\"type\":\"uint256\"}],\"name\":\"calculateNetAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmountTotal\",\"type\":\"uint256\"}],\"name\":\"calculateNetDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePerformanceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"protectAgainstSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendStableFromcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendStableTocontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alphaStrategy\",\"type\":\"address\"}],\"name\":\"setAlphaStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_cancel\",\"type\":\"bool\"}],\"name\":\"setCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"setCoeffScaleDecimalsFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"setCoeffScaleDecimalsPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockupPeriodManager\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriodManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockupPeriodUser\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriodUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setManagementFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateAlphaPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_WAVG\",\"type\":\"uint256\"}],\"name\":\"updateAlphaPriceWAVG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateManagementFeeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdminInterface", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f6e29d5be708caf4d95efce453c7719bce4205e0000000000000000000000008f6e29d5be708caf4d95efce453c7719bce4205e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000047cc01712235e081ea2b01308fca6c582da5a049", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}