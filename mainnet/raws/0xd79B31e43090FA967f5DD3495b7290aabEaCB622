{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/SwapKiwi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n* @title This is the contract which added erc1155 into the previous swap contract.\\n*/\\ncontract SwapKiwi is Ownable, ERC721Holder, ERC1155Holder {\\n\\n\\tuint64 private _swapsCounter;\\n\\tuint128 private _etherLocked;\\n\\tuint128 public fee;\\n\\n\\tmapping (uint64 => Swap) private _swaps;\\n\\n\\tstruct Swap {\\n\\t\\taddress payable initiator;\\n\\t\\taddress[] initiatorNftAddresses;\\n\\t\\tuint256[] initiatorNftIds;\\n\\t\\tuint256[] initiatorNftAmounts;\\n\\t\\taddress payable secondUser;\\n\\t\\taddress[] secondUserNftAddresses;\\n\\t\\tuint256[] secondUserNftIds;\\n\\t\\tuint256[] secondUserNftAmounts;\\n\\t\\tuint128 initiatorEtherValue;\\n\\t\\tuint128 secondUserEtherValue;\\n\\t}\\n\\n\\tevent SwapExecuted(address indexed from, address indexed to, uint64 indexed swapId);\\n\\tevent SwapCanceled(address indexed canceledBy, uint64 indexed swapId);\\n\\tevent SwapProposed(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint64 indexed swapId,\\n\\t\\tuint128 etherValue,\\n\\t\\taddress[] nftAddresses,\\n\\t\\tuint256[] nftIds,\\n\\t\\tuint256[] nftAmounts\\n\\t);\\n\\tevent SwapInitiated(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint64 indexed swapId,\\n\\t\\tuint128 etherValue,\\n\\t\\taddress[] nftAddresses,\\n\\t\\tuint256[] nftIds,\\n\\t\\tuint256[] nftAmounts\\n\\t);\\n\\tevent AppFeeChanged(\\n\\t\\tuint128 fee\\n\\t);\\n\\n\\tmodifier onlyInitiator(uint64 swapId) {\\n\\t\\trequire(msg.sender == _swaps[swapId].initiator,\\n\\t\\t\\t\\\"SwapKiwi: caller is not swap initiator\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds, uint256[] memory nftAmounts) {\\n\\t\\trequire(nftAddresses.length == nftIds.length, \\\"SwapKiwi: NFT and ID arrays have to be same length\\\");\\n\\t\\trequire(nftAddresses.length == nftAmounts.length, \\\"SwapKiwi: NFT and AMOUNT arrays have to be same length\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier chargeAppFee() {\\n\\t\\trequire(msg.value >= fee, \\\"SwapKiwi: Sent ETH amount needs to be more or equal application fee\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(uint128 initalAppFee, address contractOwnerAddress) {\\n\\t\\tfee = initalAppFee;\\n\\t\\tsuper.transferOwnership(contractOwnerAddress);\\n\\t}\\n\\n\\tfunction setAppFee(uint128 newFee) external onlyOwner {\\n\\t\\tfee = newFee;\\n\\t\\temit AppFeeChanged(newFee);\\n\\t}\\n\\n\\t/**\\n\\t* @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\\n\\t*      Proposed NFTs are transfered to the SwapKiwi contract and\\n\\t*      kept there until the swap is accepted or canceled/rejected.\\n\\t*\\n\\t* @param secondUser address of the user that the first user wants to trade NFTs with\\n\\t* @param nftAddresses array of NFT addressed that want to be traded\\n\\t* @param nftIds array of IDs belonging to NFTs that want to be traded\\n\\t* @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \\n\\t* the token is ERC721 token. Otherwise the token is ERC1155 token.\\n\\t*/\\n\\tfunction proposeSwap(\\n\\t\\taddress secondUser,\\n\\t\\taddress[] memory nftAddresses,\\n\\t\\tuint256[] memory nftIds,\\n\\t\\tuint256[] memory nftAmounts\\n\\t) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\\n\\t\\t_swapsCounter += 1;\\n\\n\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tnftAddresses,\\n\\t\\t\\tnftIds,\\n\\t\\t\\tnftAmounts\\n\\t\\t);\\n\\n\\t\\tSwap storage swap = _swaps[_swapsCounter];\\n\\t\\tswap.initiator = payable(msg.sender);\\n\\t\\tswap.initiatorNftAddresses = nftAddresses;\\n\\t\\tswap.initiatorNftIds = nftIds;\\n\\t\\tswap.initiatorNftAmounts = nftAmounts;\\n\\n\\t\\tuint128 _fee = fee;\\n\\n\\t\\tif (msg.value > _fee) {\\n\\t\\t\\tswap.initiatorEtherValue = uint128(msg.value) - _fee;\\n\\t\\t\\t_etherLocked += swap.initiatorEtherValue;\\n\\t\\t}\\n\\t\\tswap.secondUser = payable(secondUser);\\n\\n\\t\\temit SwapProposed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tsecondUser,\\n\\t\\t\\t_swapsCounter,\\n\\t\\t\\tswap.initiatorEtherValue,\\n\\t\\t\\tnftAddresses,\\n\\t\\t\\tnftIds,\\n\\t\\t\\tnftAmounts\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\\n\\t*      deposits his NFTs into the SwapKiwi contract.\\n\\t*      Callable only by second user that is invited by swap initiator.\\n\\t*\\n\\t* @param swapId ID of the swap that the second user is invited to participate in\\n\\t* @param nftAddresses array of NFT addressed that want to be traded\\n\\t* @param nftIds array of IDs belonging to NFTs that want to be traded\\n\\t* @param nftAmounts array of NFT amounts that want to be traded. If the amount is zero, that means \\n\\t* the token is ERC721 token. Otherwise the token is ERC1155 token.\\n\\t*/\\n\\tfunction initiateSwap(\\n\\t\\tuint64 swapId,\\n\\t\\taddress[] memory nftAddresses,\\n\\t\\tuint256[] memory nftIds,\\n\\t\\tuint256[] memory nftAmounts\\n\\t) external payable chargeAppFee requireSameLength(nftAddresses, nftIds, nftAmounts) {\\n\\t\\trequire(_swaps[swapId].secondUser == msg.sender, \\\"SwapKiwi: caller is not swap participator\\\");\\n\\t\\trequire(\\n\\t\\t\\t_swaps[swapId].secondUserEtherValue == 0 &&\\n\\t\\t\\t( _swaps[swapId].secondUserNftAddresses.length == 0 &&\\n\\t\\t\\t_swaps[swapId].secondUserNftIds.length == 0 &&\\n\\t\\t\\t_swaps[swapId].secondUserNftAmounts.length == 0\\n\\t\\t\\t), \\\"SwapKiwi: swap already initiated\\\"\\n\\t\\t);\\n\\n\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tnftAddresses,\\n\\t\\t\\tnftIds,\\n\\t\\t\\tnftAmounts\\n\\t\\t);\\n\\n\\t\\t_swaps[swapId].secondUserNftAddresses = nftAddresses;\\n\\t\\t_swaps[swapId].secondUserNftIds = nftIds;\\n\\t\\t_swaps[swapId].secondUserNftAmounts = nftAmounts;\\n\\n\\t\\tuint128 _fee = fee;\\n\\n\\t\\tif (msg.value > _fee) {\\n\\t\\t\\t_swaps[swapId].secondUserEtherValue = uint128(msg.value) - _fee;\\n\\t\\t\\t_etherLocked += _swaps[swapId].secondUserEtherValue;\\n\\t\\t}\\n\\n\\t\\temit SwapInitiated(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_swaps[swapId].initiator,\\n\\t\\t\\tswapId,\\n\\t\\t\\t_swaps[swapId].secondUserEtherValue,\\n\\t\\t\\tnftAddresses,\\n\\t\\t\\tnftIds,\\n\\t\\t\\tnftAmounts\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @dev Swap initiator accepts the swap (NFTs proposed by the second user).\\n\\t*      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\\n\\t*      Callable only by swap initiator.\\n\\t*\\n\\t* @param swapId ID of the swap that the initator wants to execute\\n\\t*/\\n\\tfunction acceptSwap(uint64 swapId) external onlyInitiator(swapId) {\\n\\t\\trequire(\\n\\t\\t\\t(_swaps[swapId].secondUserNftAddresses.length != 0 || _swaps[swapId].secondUserEtherValue > 0) &&\\n\\t\\t\\t(_swaps[swapId].initiatorNftAddresses.length != 0 || _swaps[swapId].initiatorEtherValue > 0),\\n\\t\\t\\t\\\"SwapKiwi: Can't accept swap, both participants didn't add NFTs\\\"\\n\\t\\t);\\n\\n\\t\\t// transfer NFTs from escrow to initiator\\n\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_swaps[swapId].initiator,\\n\\t\\t\\t_swaps[swapId].secondUserNftAddresses,\\n\\t\\t\\t_swaps[swapId].secondUserNftIds,\\n\\t\\t\\t_swaps[swapId].secondUserNftAmounts\\n\\t\\t);\\n\\n\\t\\t// transfer NFTs from escrow to second user\\n\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_swaps[swapId].secondUser,\\n\\t\\t\\t_swaps[swapId].initiatorNftAddresses,\\n\\t\\t\\t_swaps[swapId].initiatorNftIds,\\n\\t\\t\\t_swaps[swapId].initiatorNftAmounts\\n\\t\\t);\\n\\n\\t\\tif (_swaps[swapId].initiatorEtherValue != 0) {\\n\\t\\t\\t_etherLocked -= _swaps[swapId].initiatorEtherValue;\\n\\t\\t\\tuint128 amountToTransfer = _swaps[swapId].initiatorEtherValue;\\n\\t\\t\\t_swaps[swapId].initiatorEtherValue = 0;\\n\\t\\t\\t_swaps[swapId].secondUser.transfer(amountToTransfer);\\n\\t\\t}\\n\\t\\tif (_swaps[swapId].secondUserEtherValue != 0) {\\n\\t\\t\\t_etherLocked -= _swaps[swapId].secondUserEtherValue;\\n\\t\\t\\tuint128 amountToTransfer = _swaps[swapId].secondUserEtherValue;\\n\\t\\t\\t_swaps[swapId].secondUserEtherValue = 0;\\n\\t\\t\\t_swaps[swapId].initiator.transfer(amountToTransfer);\\n\\t\\t}\\n\\n\\t\\temit SwapExecuted(_swaps[swapId].initiator, _swaps[swapId].secondUser, swapId);\\n\\n\\t\\tdelete _swaps[swapId];\\n\\t}\\n\\n\\t/**\\n\\t* @dev Returns NFTs from SwapKiwi to swap initator.\\n\\t*      Callable only if second user hasn't yet added NFTs.\\n\\t*\\n\\t* @param swapId ID of the swap that the swap participants want to cancel\\n\\t*/\\n\\tfunction cancelSwap(uint64 swapId) external {\\n\\t\\trequire(\\n\\t\\t\\t_swaps[swapId].initiator == msg.sender || _swaps[swapId].secondUser == msg.sender,\\n\\t\\t\\t\\\"SwapKiwi: Can't cancel swap, must be swap participant\\\"\\n\\t\\t);\\n\\t\\t// return initiator NFTs\\n\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_swaps[swapId].initiator,\\n\\t\\t\\t_swaps[swapId].initiatorNftAddresses,\\n\\t\\t\\t_swaps[swapId].initiatorNftIds,\\n\\t\\t\\t_swaps[swapId].initiatorNftAmounts\\n\\t\\t);\\n\\n\\t\\tif(_swaps[swapId].secondUserNftAddresses.length != 0) {\\n\\t\\t\\t// return second user NFTs\\n\\t\\t\\tsafeMultipleTransfersFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t_swaps[swapId].secondUser,\\n\\t\\t\\t\\t_swaps[swapId].secondUserNftAddresses,\\n\\t\\t\\t\\t_swaps[swapId].secondUserNftIds,\\n\\t\\t\\t\\t_swaps[swapId].secondUserNftAmounts\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (_swaps[swapId].initiatorEtherValue != 0) {\\n\\t\\t\\t_etherLocked -= _swaps[swapId].initiatorEtherValue;\\n\\t\\t\\tuint128 amountToTransfer = _swaps[swapId].initiatorEtherValue;\\n\\t\\t\\t_swaps[swapId].initiatorEtherValue = 0;\\n\\t\\t\\t_swaps[swapId].initiator.transfer(amountToTransfer);\\n\\t\\t}\\n\\t\\tif (_swaps[swapId].secondUserEtherValue != 0) {\\n\\t\\t\\t_etherLocked -= _swaps[swapId].secondUserEtherValue;\\n\\t\\t\\tuint128 amountToTransfer = _swaps[swapId].secondUserEtherValue;\\n\\t\\t\\t_swaps[swapId].secondUserEtherValue = 0;\\n\\t\\t\\t_swaps[swapId].secondUser.transfer(amountToTransfer);\\n\\t\\t}\\n\\n\\t\\temit SwapCanceled(msg.sender, swapId);\\n\\n\\t\\tdelete _swaps[swapId];\\n\\t}\\n\\n\\tfunction safeMultipleTransfersFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\taddress[] memory nftAddresses,\\n\\t\\tuint256[] memory nftIds,\\n\\t\\tuint256[] memory nftAmounts\\n\\t) internal virtual {\\n\\t\\tfor (uint256 i=0; i < nftIds.length; i++){\\n\\t\\t\\tsafeTransferFrom(from, to, nftAddresses[i], nftIds[i], nftAmounts[i], \\\"\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 tokenAmount,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\tif (tokenAmount == 0) {\\n\\t\\t\\tIERC721(tokenAddress).safeTransferFrom(from, to, tokenId, _data);\\n\\t\\t} else {\\n\\t\\t\\tIERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, tokenAmount, _data);\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\n\\tfunction withdrawEther(address payable recipient) external onlyOwner {\\n\\t\\trequire(recipient != address(0), \\\"SwapKiwi: transfer to the zero address\\\");\\n\\n\\t\\trecipient.transfer((address(this).balance - _etherLocked));\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"initalAppFee\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contractOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"AppFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceledBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"}],\"name\":\"SwapCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"etherValue\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftAmounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"etherValue\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftAmounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapProposed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"}],\"name\":\"acceptSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"swapId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftAmounts\",\"type\":\"uint256[]\"}],\"name\":\"initiateSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"secondUser\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftAmounts\",\"type\":\"uint256[]\"}],\"name\":\"proposeSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\"}],\"name\":\"setAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapKiwi", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000008e1bc9bf04000000000000000000000000000f37dcdef718eb72b542933b27427f39a3af09ad7", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}