{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Calculation error\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b <= a,\"Calculation error\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b != 0,\"Calculation error\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ILPToken\r\n * @dev   Contract interface for LP token contract \r\n */\r\nabstract contract ILPToken {\r\n    function balanceOf(address) public virtual returns (uint256);\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n    function approve(address , uint256) public virtual returns (bool);\r\n }\r\n\r\n/**\r\n * @title IToken\r\n * @dev   Contract interface for token contract \r\n */\r\nabstract contract IToken {\r\n    function balanceOf(address) public virtual returns (uint256);\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n    function approve(address , uint256) public virtual returns (bool);\r\n }\r\n\r\n/**\r\n * @title CLIQWETHLPStaking\r\n * @dev   CLIQWETHLP Staking Contract for LP token staking\r\n */\r\ncontract CLIQWETHLPStaking {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  address private _owner;                                           // variable for Owner of the Contract.\r\n  uint256 private _withdrawTime;                                    // variable to manage withdraw time for Token\r\n  uint256 constant public PERIOD_SILVER            = 90;             // variable constant for time period managemnt\r\n  uint256 constant public PERIOD_GOLD              = 180;            // variable constant for time period managemnt\r\n  uint256 constant public PERIOD_PLATINUM          = 270;            // variable constant for time period managemnt\r\n  uint256 constant public WITHDRAW_TIME_SILVER     = 45 * 1 days;    // variable constant to manage withdraw time lock up \r\n  uint256 constant public WITHDRAW_TIME_GOLD       = 90 * 1 days;    // variable constant to manage withdraw time lock up\r\n  uint256 constant public WITHDRAW_TIME_PLATINUM   = 135 * 1 days;   // variable constant to manage withdraw time lock up\r\n  uint256 public TOKEN_REWARD_PERCENT_SILVER       = 21788328;       // variable constant to manage token reward percentage for silver\r\n  uint256 public TOKEN_REWARD_PERCENT_GOLD         = 67332005;       // variable constant to manage token reward percentage for gold\r\n  uint256 public TOKEN_REWARD_PERCENT_PLATINUM     = 178233538;      // variable constant to manage token reward percentage for platinum\r\n  uint256 public TOKEN_PENALTY_PERCENT_SILVER      = 10894164;       // variable constant to manage token penalty percentage for silver\r\n  uint256 public TOKEN_PENALTY_PERCENT_GOLD        = 23566201;       // variable constant to manage token penalty percentage for gold\r\n  uint256 public TOKEN_PENALTY_PERCENT_PLATINUM    = 44558384;       // variable constant to manage token penalty percentage for platinum\r\n  \r\n  // events to handle staking pause or unpause for token \r\n  event Paused();\r\n  event Unpaused();\r\n  \r\n  /*\r\n  * ---------------------------------------------------------------------------------------------------------------------------\r\n  * Functions for owner.\r\n  * ---------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n   /**\r\n   * @dev get address of smart contract owner\r\n   * @return address of owner\r\n   */\r\n   function getowner() public view returns (address) {\r\n     return _owner;\r\n   }\r\n\r\n   /**\r\n   * @dev modifier to check if the message sender is owner\r\n   */\r\n   modifier onlyOwner() {\r\n     require(isOwner(),\"You are not authenticate to make this transfer\");\r\n     _;\r\n   }\r\n\r\n   /**\r\n   * @dev Internal function for modifier\r\n   */\r\n   function isOwner() internal view returns (bool) {\r\n      return msg.sender == _owner;\r\n   }\r\n\r\n   /**\r\n   * @dev Transfer ownership of the smart contract. For owner only\r\n   * @return request status\r\n   */\r\n   function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n      _owner = newOwner;\r\n      return true;\r\n   }\r\n   \r\n  /*\r\n  * ---------------------------------------------------------------------------------------------------------------------------\r\n  * Functionality of Constructor and Interface  \r\n  * ---------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n  \r\n  // constructor to declare owner of the contract during time of deploy  \r\n  constructor() public {\r\n     _owner = msg.sender;\r\n  }\r\n  \r\n  // Interface declaration for contract\r\n  ILPToken ilptoken;\r\n  IToken itoken;\r\n    \r\n  // function to set Contract Address for Token Transfer Functionality for LP Token and Cliq Token\r\n  function setContractAddresses(address lpTokenContractAddress, address tokenContractAddress) external onlyOwner returns(bool){\r\n    ilptoken = ILPToken(lpTokenContractAddress);\r\n    itoken = IToken(tokenContractAddress);\r\n    return true;\r\n  }\r\n  \r\n   /*\r\n  * ----------------------------------------------------------------------------------------------------------------------------\r\n  * Owner functions of get value, set value and other Functionality\r\n  * ----------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n  \r\n  // function to add token reward in contract\r\n  function addTokenReward(uint256 token) external onlyOwner returns(bool){\r\n    _ownerTokenAllowance = _ownerTokenAllowance.add(token);\r\n    itoken.transferFrom(msg.sender, address(this), token);\r\n    return true;\r\n  }\r\n  \r\n  // function to withdraw added token reward in contract\r\n  function withdrawAddedTokenReward(uint256 token) external onlyOwner returns(bool){\r\n    require(token < _ownerTokenAllowance,\"Value is not feasible, Please Try Again!!!\");\r\n    _ownerTokenAllowance = _ownerTokenAllowance.sub(token);\r\n    itoken.transfer(msg.sender, token);\r\n    return true;\r\n  }\r\n  \r\n  // function to get token reward in contract\r\n  function getTokenReward() public view returns(uint256){\r\n    return _ownerTokenAllowance;\r\n  }\r\n  \r\n  // function to pause Token Staking\r\n  function pauseTokenStaking() public onlyOwner {\r\n    tokenPaused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  // function to unpause Token Staking\r\n  function unpauseTokenStaking() public onlyOwner {\r\n    tokenPaused = false;\r\n    emit Unpaused();\r\n  }\r\n  \r\n  // function to set values\r\n  function setManager(uint256 tokenStakingCount, uint256 tokenTotalDays, address tokenStakingAddress, uint256 tokenStakingStartTime,\r\n   uint256 tokenStakingEndTime, uint256 usertokens) external onlyOwner returns(bool){\r\n    _tokenStakingCount = tokenStakingCount;\r\n    _tokenTotalDays[_tokenStakingCount] = tokenTotalDays;\r\n    _tokenStakingAddress[_tokenStakingCount] = tokenStakingAddress;\r\n    _tokenStakingId[tokenStakingAddress].push(_tokenStakingCount);\r\n    _tokenStakingEndTime[_tokenStakingCount] = tokenStakingEndTime;\r\n    _tokenStakingStartTime[_tokenStakingCount] = tokenStakingStartTime;\r\n    _usersTokens[_tokenStakingCount] = usertokens;\r\n    _TokenTransactionstatus[_tokenStakingCount] = false;\r\n    totalStakedToken = totalStakedToken.add(usertokens);\r\n    totalTokenStakesInContract = totalTokenStakesInContract.add(usertokens);\r\n    return true;\r\n  }\r\n  \r\n  // function to set reward percent\r\n  function setRewardPercent(uint256 silver, uint256 gold, uint256 platinum) external onlyOwner returns(bool){\r\n    require(silver != 0 && gold != 0 && platinum !=0,\"Invalid Reward Value or Zero value, Please Try Again!!!\");\r\n     TOKEN_REWARD_PERCENT_SILVER = silver;\r\n     TOKEN_REWARD_PERCENT_GOLD = gold;\r\n     TOKEN_REWARD_PERCENT_PLATINUM = platinum;\r\n     return true;\r\n  }\r\n  \r\n  // function to set penalty percent\r\n  function setPenaltyPercent(uint256 silver, uint256 gold, uint256 platinum) external onlyOwner returns(bool){\r\n    require(silver != 0 && gold != 0 && platinum !=0,\"Invalid Penalty Value or Zero value, Please Try Again!!!\");\r\n     TOKEN_PENALTY_PERCENT_SILVER = silver;\r\n     TOKEN_PENALTY_PERCENT_GOLD = gold;\r\n     TOKEN_PENALTY_PERCENT_PLATINUM = platinum;\r\n     return true;\r\n  }\r\n  \r\n  // function to withdraw LP token from the contract\r\n  function withdrawLPToken(uint256 amount) external onlyOwner returns(bool){\r\n      ilptoken.transfer(msg.sender,amount);\r\n      return true;\r\n  } \r\n\r\n  // function to withdraw token from the contract\r\n  function withdrawToken(uint256 amount) external onlyOwner returns(bool){\r\n      itoken.transfer(msg.sender,amount);\r\n      return true;\r\n  } \r\n  \r\n  // function to withdraw ETH from the contract\r\n  function withdrawETH() external onlyOwner returns(bool){\r\n      msg.sender.transfer(address(this).balance);\r\n      return true;\r\n  }\r\n \r\n  /*\r\n  * ----------------------------------------------------------------------------------------------------------------------------\r\n  * Variable, Mapping for Token Staking Functionality\r\n  * ----------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n  \r\n  // mapping for users with id => address Staking Address\r\n  mapping (uint256 => address) private _tokenStakingAddress;\r\n  \r\n  // mapping for users with address => id staking id\r\n  mapping (address => uint256[]) private _tokenStakingId;\r\n\r\n  // mapping for users with id => Staking Time\r\n  mapping (uint256 => uint256) private _tokenStakingStartTime;\r\n  \r\n  // mapping for users with id => End Time\r\n  mapping (uint256 => uint256) private _tokenStakingEndTime;\r\n\r\n  // mapping for users with id => Tokens \r\n  mapping (uint256 => uint256) private _usersTokens;\r\n  \r\n  // mapping for users with id => Status\r\n  mapping (uint256 => bool) private _TokenTransactionstatus;    \r\n  \r\n  // mapping to keep track of final withdraw value of staked token\r\n  mapping(uint256=>uint256) private _finalTokenStakeWithdraw;\r\n  \r\n  // mapping to keep track total number of staking days\r\n  mapping(uint256=>uint256) private _tokenTotalDays;\r\n  \r\n  // variable to keep count of Token Staking\r\n  uint256 private _tokenStakingCount = 0;\r\n  \r\n  // variable to keep track on reward added by owner\r\n  uint256 private _ownerTokenAllowance = 0;\r\n\r\n  // variable for token time management\r\n  uint256 private _tokentime;\r\n  \r\n  // variable for token staking pause and unpause mechanism\r\n  bool public tokenPaused = false;\r\n  \r\n  // variable for total Token staked by user\r\n  uint256 public totalStakedToken = 0;\r\n  \r\n  // variable for total stake token in contract\r\n  uint256 public totalTokenStakesInContract = 0;\r\n  \r\n  // modifier to check the user for staking || Re-enterance Guard\r\n  modifier tokenStakeCheck(uint256 tokens, uint256 timePeriod){\r\n    require(tokens > 0, \"Invalid Token Amount, Please Try Again!!! \");\r\n    require(timePeriod == PERIOD_SILVER || timePeriod == PERIOD_GOLD || timePeriod == PERIOD_PLATINUM, \"Enter the Valid Time Period and Try Again !!!\");\r\n    _;\r\n  }\r\n  \r\n  /*\r\n  * ------------------------------------------------------------------------------------------------------------------------------\r\n  * Functions for Token Staking Functionality\r\n  * ------------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  // function to performs staking for user tokens for a specific period of time\r\n  function stakeToken(uint256 tokens, uint256 time) public tokenStakeCheck(tokens, time) returns(bool){\r\n    require(tokenPaused == false, \"Staking is Paused, Please try after staking get unpaused!!!\");\r\n    _tokentime = now + (time * 1 days);\r\n    _tokenStakingCount = _tokenStakingCount + 1;\r\n    _tokenTotalDays[_tokenStakingCount] = time;\r\n    _tokenStakingAddress[_tokenStakingCount] = msg.sender;\r\n    _tokenStakingId[msg.sender].push(_tokenStakingCount);\r\n    _tokenStakingEndTime[_tokenStakingCount] = _tokentime;\r\n    _tokenStakingStartTime[_tokenStakingCount] = now;\r\n    _usersTokens[_tokenStakingCount] = tokens;\r\n    _TokenTransactionstatus[_tokenStakingCount] = false;\r\n    totalStakedToken = totalStakedToken.add(tokens);\r\n    totalTokenStakesInContract = totalTokenStakesInContract.add(tokens);\r\n    ilptoken.transferFrom(msg.sender, address(this), tokens);\r\n    return true;\r\n  }\r\n\r\n  // function to get staking count for token\r\n  function getTokenStakingCount() public view returns(uint256){\r\n    return _tokenStakingCount;\r\n  }\r\n  \r\n  // function to get total Staked tokens\r\n  function getTotalStakedToken() public view returns(uint256){\r\n    return totalStakedToken;\r\n  }\r\n  \r\n  // function to calculate reward for the message sender for token\r\n  function getTokenRewardDetailsByStakingId(uint256 id) public view returns(uint256){\r\n    if(_tokenTotalDays[id] == PERIOD_SILVER) {\r\n        return (_usersTokens[id]*TOKEN_REWARD_PERCENT_SILVER/100000000);\r\n    } else if(_tokenTotalDays[id] == PERIOD_GOLD) {\r\n               return (_usersTokens[id]*TOKEN_REWARD_PERCENT_GOLD/100000000);\r\n      } else if(_tokenTotalDays[id] == PERIOD_PLATINUM) { \r\n                 return (_usersTokens[id]*TOKEN_REWARD_PERCENT_PLATINUM/100000000);\r\n        } else{\r\n              return 0;\r\n          }\r\n  }\r\n\r\n  // function to calculate penalty for the message sender for token\r\n  function getTokenPenaltyDetailByStakingId(uint256 id) public view returns(uint256){\r\n    if(_tokenStakingEndTime[id] > now){\r\n        if(_tokenTotalDays[id]==PERIOD_SILVER){\r\n            return (_usersTokens[id]*TOKEN_PENALTY_PERCENT_SILVER/100000000);\r\n        } else if(_tokenTotalDays[id] == PERIOD_GOLD) {\r\n              return (_usersTokens[id]*TOKEN_PENALTY_PERCENT_GOLD/100000000);\r\n          } else if(_tokenTotalDays[id] == PERIOD_PLATINUM) { \r\n                return (_usersTokens[id]*TOKEN_PENALTY_PERCENT_PLATINUM/100000000);\r\n            } else {\r\n                return 0;\r\n              }\r\n    } else{\r\n       return 0;\r\n     }\r\n  }\r\n \r\n  // function for withdrawing staked tokens\r\n  function withdrawStakedTokens(uint256 stakingId) public returns(bool) {\r\n    require(_tokenStakingAddress[stakingId] == msg.sender,\"No staked token found on this address and ID\");\r\n    require(_TokenTransactionstatus[stakingId] != true,\"Either tokens are already withdrawn or blocked by admin\");\r\n    if(_tokenTotalDays[stakingId] == PERIOD_SILVER){\r\n          require(now >= _tokenStakingStartTime[stakingId] + WITHDRAW_TIME_SILVER, \"Unable to Withdraw Staked token before 45 days of staking start time, Please Try Again Later!!!\");\r\n          _TokenTransactionstatus[stakingId] = true;\r\n          if(now >= _tokenStakingEndTime[stakingId]){\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenRewardDetailsByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenRewardDetailsByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenRewardDetailsByStakingId(stakingId));\r\n          } else {\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenPenaltyDetailByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenPenaltyDetailByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenPenaltyDetailByStakingId(stakingId));\r\n            }\r\n    } else if(_tokenTotalDays[stakingId] == PERIOD_GOLD){\r\n          require(now >= _tokenStakingStartTime[stakingId] + WITHDRAW_TIME_GOLD, \"Unable to Withdraw Staked token before 90 days of staking start time, Please Try Again Later!!!\");\r\n          _TokenTransactionstatus[stakingId] = true;\r\n          if(now >= _tokenStakingEndTime[stakingId]){\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenRewardDetailsByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenRewardDetailsByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenRewardDetailsByStakingId(stakingId));\r\n          } else {\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenPenaltyDetailByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenPenaltyDetailByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenPenaltyDetailByStakingId(stakingId));\r\n            }\r\n    } else if(_tokenTotalDays[stakingId] == PERIOD_PLATINUM){\r\n          require(now >= _tokenStakingStartTime[stakingId] + WITHDRAW_TIME_PLATINUM, \"Unable to Withdraw Staked token before 135 days of staking start time, Please Try Again Later!!!\");\r\n          _TokenTransactionstatus[stakingId] = true;\r\n          if(now >= _tokenStakingEndTime[stakingId]){\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenRewardDetailsByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenRewardDetailsByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenRewardDetailsByStakingId(stakingId));\r\n          } else {\r\n              _finalTokenStakeWithdraw[stakingId] = _usersTokens[stakingId].add(getTokenPenaltyDetailByStakingId(stakingId));\r\n              ilptoken.transfer(msg.sender,_usersTokens[stakingId]);\r\n              itoken.transfer(msg.sender,getTokenPenaltyDetailByStakingId(stakingId));\r\n              totalTokenStakesInContract = totalTokenStakesInContract.sub(_usersTokens[stakingId]);\r\n              _ownerTokenAllowance = _ownerTokenAllowance.sub(getTokenPenaltyDetailByStakingId(stakingId));\r\n            }\r\n    } else {\r\n        return false;\r\n      }\r\n    return true;\r\n  }\r\n  \r\n  // function to get Final Withdraw Staked value for token\r\n  function getFinalTokenStakeWithdraw(uint256 id) public view returns(uint256){\r\n    return _finalTokenStakeWithdraw[id];\r\n  }\r\n  \r\n  // function to get total token stake in contract\r\n  function getTotalTokenStakesInContract() public view returns(uint256){\r\n      return totalTokenStakesInContract;\r\n  }\r\n  \r\n  /*\r\n  * -------------------------------------------------------------------------------------------------------------------------------\r\n  * Get Functions for Stake Token Functionality\r\n  * -------------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  // function to get Token Staking address by id\r\n  function getTokenStakingAddressById(uint256 id) external view returns (address){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _tokenStakingAddress[id];\r\n  }\r\n  \r\n  // function to get Token staking id by address\r\n  function getTokenStakingIdByAddress(address add) external view returns(uint256[] memory){\r\n    require(add != address(0),\"Invalid Address, Pleae Try Again!!!\");\r\n    return _tokenStakingId[add];\r\n  }\r\n  \r\n  // function to get Token Staking Starting time by id\r\n  function getTokenStakingStartTimeById(uint256 id) external view returns(uint256){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _tokenStakingStartTime[id];\r\n  }\r\n  \r\n  // function to get Token Staking Ending time by id\r\n  function getTokenStakingEndTimeById(uint256 id) external view returns(uint256){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _tokenStakingEndTime[id];\r\n  }\r\n  \r\n  // function to get Token Staking Total Days by Id\r\n  function getTokenStakingTotalDaysById(uint256 id) external view returns(uint256){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _tokenTotalDays[id];\r\n  }\r\n\r\n  // function to get Staking tokens by id\r\n  function getStakingTokenById(uint256 id) external view returns(uint256){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _usersTokens[id];\r\n  }\r\n\r\n  // function to get Token lockstatus by id\r\n  function getTokenLockStatus(uint256 id) external view returns(bool){\r\n    require(id <= _tokenStakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _TokenTransactionstatus[id];\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_PLATINUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PENALTY_PERCENT_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PENALTY_PERCENT_PLATINUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PENALTY_PERCENT_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_REWARD_PERCENT_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_REWARD_PERCENT_PLATINUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_REWARD_PERCENT_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TIME_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TIME_PLATINUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TIME_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"addTokenReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFinalTokenStakeWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingTokenById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenLockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenPenaltyDetailByStakingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenRewardDetailsByStakingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenStakingAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenStakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenStakingEndTimeById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getTokenStakingIdByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenStakingStartTimeById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenStakingTotalDaysById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokenStakesInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTokenStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenStakingCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenStakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usertokens\",\"type\":\"uint256\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platinum\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platinum\",\"type\":\"uint256\"}],\"name\":\"setRewardPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenStakesInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseTokenStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"withdrawAddedTokenReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"withdrawStakedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CLIQWETHLPStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9da630b5a9b614eed64bc100d21fc93b0d7edf84fbbd761c18829e9ca72958b5"}]}