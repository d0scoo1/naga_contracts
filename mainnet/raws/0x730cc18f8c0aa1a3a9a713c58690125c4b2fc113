{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"Math error\");\r\n        return a - b;\r\n    }\r\n\r\n}\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ninterface ERC20 {\r\n    function balanceOf(address _address) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// Manage contract\r\ncontract BhxManage {\r\n\r\n    // \u7ba1\u7406\u5458\r\n    address public owner;\r\n    // \u7ba1\u7406\u54582; \u7528\u4e8e\u53cc\u91cd\u7b7e\u540d\u9a8c\u8bc1\r\n    address public owner2;\r\n    // \u7b7e\u540d\u7684messageHash\r\n    mapping (bytes32 => bool) public signHash;\r\n    // bhx\u5408\u7ea6\u5730\u5740\r\n    address public bhx;\r\n    // usdt\u5408\u7ea6\u5730\u5740\r\n    address public usdt;\r\n    bytes4 private constant TRANSFER = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n\r\n    constructor(address _owner2, address _bhx, address _usdt) public {\r\n        owner = msg.sender;\r\n        owner2 = _owner2;\r\n        bhx = _bhx;\r\n        usdt = _usdt;\r\n    }\r\n\r\n    /*function balanceOf(address _address) public view returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}*/\r\n\r\n\r\n    // \u7ba1\u7406\u5458\u4fee\u9970\u7b26\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"You are not owner\");\r\n        _;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u65b0\u7684\u7ba1\u7406\u5458\r\n    function setOwner(address _owner) public onlyOwner returns (bool success) {\r\n        require(_owner != address(0), \"Zero address error\");\r\n        owner = _owner;\r\n        success = true;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u65b0\u7684\u7ba1\u7406\u54582\r\n    function setOwner2(address _owner2) public onlyOwner returns (bool success) {\r\n        require(_owner2 != address(0), \"Zero address error\");\r\n        owner2 = _owner2;\r\n        success = true;\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u53d6\u51fa\u5408\u7ea6\u91cc\u7684erc20\u4ee3\u5e01\r\n    function takeErc20(address _erc20Address) public onlyOwner returns (bool success2) {\r\n        require(_erc20Address != address(0), \"Zero address error\");\r\n        // \u521b\u5efausdt\u7684\u5408\u7ea6\u5bf9\u8c61\r\n        ERC20 erc20 = ERC20(_erc20Address);\r\n        // \u83b7\u53d6\u5408\u7ea6\u5730\u5740\u7684\u4f59\u989d\r\n        uint256 _value = erc20.balanceOf(address(this));\r\n        // \u4ece\u5408\u7ea6\u5730\u5740\u8f6c\u51fausdt\u5230to\u5730\u5740\r\n        (bool success, ) = address(_erc20Address).call(\r\n            abi.encodeWithSelector(TRANSFER, msg.sender, _value)\r\n        );\r\n        if(!success) {\r\n            revert(\"Transfer is fail\");\r\n        }\r\n        success2 = true;\r\n    }\r\n\r\n    // \u540e\u53f0\u4ea4\u6613bhx; \u4f7f\u7528\u4e8c\u6b21\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1, \u4ece\u5408\u7ea6\u5730\u5740\u6263\u9664bhx\r\n    // \u53c2\u65701: \u63a5\u53d7\u65b9\u5730\u5740\r\n    // \u53c2\u65702: \u4ea4\u6613\u7684\u6570\u91cf\r\n    // \u53c2\u65703: \u552f\u4e00\u7684\u503c(\u4f7f\u7528\u968f\u673a\u7684\u552f\u4e00\u6570\u5c31\u53ef\u4ee5)\r\n    // \u53c2\u65704: owner\u7b7e\u540d\u7684signature\u503c\r\n    function backendTransferBhx(address _to, uint256 _value, uint256 _nonce, bytes memory _signature) public returns (bool success2) {\r\n        require(_to != address(0), \"Zero address error\");\r\n        // \u521b\u5efabhx\u5408\u7ea6\u5bf9\u8c61\r\n        ERC20 bhxErc20 = ERC20(bhx);\r\n        // \u83b7\u53d6\u5408\u7ea6\u5730\u5740\u7684bhx\u4f59\u989d\r\n        uint256 bhxBalance = bhxErc20.balanceOf(address(this));\r\n        require(bhxBalance >= _value && _value > 0, \"Insufficient balance or zero amount\");\r\n        // \u9a8c\u8bc1\u5f97\u5230\u7684\u5730\u5740\u662f\u4e0d\u662fowner2, \u5e76\u4e14\u6570\u636e\u6ca1\u6709\u88ab\u4fee\u6539;\r\n        // \u6240\u4f7f\u7528\u7684\u6570\u636e\u6709: \u53d1\u9001\u65b9\u5730\u5740, \u63a5\u53d7\u65b9\u5730\u5740, \u4ea4\u6613\u7684\u6570\u91cf\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, _to, _value, _nonce));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        require(signer == owner2, \"Signer is not owner2\");\r\n        // \u7b7e\u540d\u7684messageHash\u5fc5\u987b\u662f\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\r\n        require(signHash[messageHash] == false, \"MessageHash is used\");\r\n        // \u8be5messageHash\u8bbe\u7f6e\u4e3a\u5df2\u4f7f\u7528\r\n        signHash[messageHash] = true;\r\n\r\n        // \u4ece\u5408\u7ea6\u5730\u5740\u8f6c\u51fabhx\u5230to\u5730\u5740\r\n        (bool success, ) = address(bhx).call(\r\n            abi.encodeWithSelector(TRANSFER, _to, _value)\r\n        );\r\n        if(!success) {\r\n            revert(\"Transfer is fail\");\r\n        }\r\n        success2 = true;\r\n    }\r\n\r\n    // \u62b5\u62bcbhx\u501f\u8d37usdt; \u4f7f\u7528\u4e8c\u6b21\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1, \u4ece\u5408\u7ea6\u5730\u5740\u6263\u9664usdt\r\n    // \u53c2\u65701: \u63a5\u53d7\u65b9\u5730\u5740\r\n    // \u53c2\u65702: \u4ea4\u6613\u7684\u6570\u91cf\r\n    // \u53c2\u65703: \u552f\u4e00\u7684\u503c(\u4f7f\u7528\u968f\u673a\u7684\u552f\u4e00\u6570\u5c31\u53ef\u4ee5)\r\n    // \u53c2\u65704: owner\u7b7e\u540d\u7684signature\u503c\r\n    function backendTransferUsdt(address _to, uint256 _value, uint256 _nonce, bytes memory _signature) public returns (bool success2) {\r\n        require(_to != address(0), \"Zero address error\");\r\n        // \u521b\u5efausdt\u7684\u5408\u7ea6\u5bf9\u8c61\r\n        ERC20 usdtErc20 = ERC20(usdt);\r\n        // \u83b7\u53d6\u5408\u7ea6\u5730\u5740\u7684usdt\u4f59\u989d\r\n        uint256 usdtBalance = usdtErc20.balanceOf(address(this));\r\n        // \u5224\u65ad\u5408\u7ea6\u5730\u5740\u7684usdt\u4f59\u989d\u662f\u5426\u8db3\u591f\r\n        require(usdtBalance >= _value && _value > 0, \"Insufficient balance or zero amount\");\r\n        // \u9a8c\u8bc1\u5f97\u5230\u7684\u5730\u5740\u662f\u4e0d\u662fowner2, \u5e76\u4e14\u6570\u636e\u6ca1\u6709\u88ab\u4fee\u6539;\r\n        // \u6240\u4f7f\u7528\u7684\u6570\u636e\u6709: \u53d1\u9001\u65b9\u5730\u5740, \u63a5\u53d7\u65b9\u5730\u5740, \u4ea4\u6613\u7684\u6570\u91cf\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, _to, _value, _nonce));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        require(signer == owner2, \"Signer is not owner2\");\r\n        // \u7b7e\u540d\u7684messageHash\u5fc5\u987b\u662f\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\r\n        require(signHash[messageHash] == false, \"MessageHash is used\");\r\n        // \u8be5messageHash\u8bbe\u7f6e\u4e3a\u5df2\u4f7f\u7528\r\n        signHash[messageHash] = true;\r\n\r\n        // \u4ece\u5408\u7ea6\u5730\u5740\u8f6c\u51fausdt\u5230to\u5730\u5740\r\n        (bool success, ) = address(usdt).call(\r\n            abi.encodeWithSelector(TRANSFER, _to, _value)\r\n        );\r\n        if(!success) {\r\n            revert(\"Transfer is fail\");\r\n        }\r\n        success2 = true;\r\n    }\r\n\r\n    // \u63d0\u53d6\u7b7e\u540d\u4e2d\u7684\u53d1\u8d77\u65b9\u5730\u5740\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    // \u5206\u79bb\u7b7e\u540d\u4fe1\u606f\u7684 v r s\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bhx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"backendTransferBhx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"backendTransferUsdt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bhx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"}],\"name\":\"setOwner2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"takeErc20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BhxManage", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed90a957557941c61ad8c730d7f958bb6f7c668c0000000000000000000000005ca130720db57bc39d4d043d383c963d9620b14e000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b86549f82932c8666e9ca1d2d3a9a9543e8908c929647d90db672c72d00edeb2"}]}