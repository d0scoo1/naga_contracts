{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/offchain/OffChainExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.4.26;\\n\\nimport \\\"./OKRoyaltyFeeManager.sol\\\";\\nimport \\\"./interfaces/SafeMath.sol\\\";\\nimport \\\"./interfaces/MyTools.sol\\\";\\nimport \\\"./interfaces/ArrayUtils.sol\\\";\\nimport \\\"./interfaces/SaleKindInterface.sol\\\";\\nimport \\\"./TransferNFTManager.sol\\\";\\nimport \\\"./base/TokenRecipient.sol\\\";\\nimport \\\"./base/Proxy.sol\\\";\\nimport \\\"./base/ReentrancyGuarded.sol\\\";\\nimport \\\"./base/ProxyRegistry.sol\\\";\\nimport \\\"./base/OwnedUpgradeabilityStorage.sol\\\";\\nimport \\\"./base/AuthenticatedProxy.sol\\\";\\n\\n/**\\n * @title ExchangeCore\\n * @author Project Wyvern Developers\\n */\\ncontract ExchangeCore is ReentrancyGuarded, Ownable {\\n    /* The token used to pay exchange fees.\\n        \u7248\u7a0e\u652f\u4ed8\u7684token\\n    */\\n    ERC20 public exchangeToken;\\n\\n    /* User registry. */\\n    ProxyRegistry public registry;\\n\\n    /* Token transfer proxy. */\\n    TokenTransferProxy public tokenTransferProxy;\\n\\n    /* Cancelled / finalized orders, by hash. */\\n    mapping(bytes32 => bool) public cancelledOrFinalized;\\n\\n    /* Orders verified by on-chain approval (alternative to ECDSA signatures so that smart contracts can place orders directly). */\\n    mapping(bytes32 => bool) public approvedOrders;\\n\\n    OKRoyaltyFeeManager public okRoyaltyFeeManager;\\n\\n    /* For split fee orders, minimum required protocol maker fee, in basis points. Paid to owner (who can change it). */\\n    uint256 public minimumMakerProtocolFee = 0;\\n\\n    /* For split fee orders, minimum required protocol taker fee, in basis points. Paid to owner (who can change it). */\\n    uint256 public minimumTakerProtocolFee = 0;\\n\\n    /* Recipient of protocol fees. */\\n    //\u534f\u8bae\u8d39\uff08\u7248\u7a0e\uff09\u7684\u63a5\u6536\u5730\u5740\\n    address public protocolFeeRecipient;\\n\\n    /* Fee method: protocol fee or split fee. */\\n    enum FeeMethod {\\n        ProtocolFee,\\n        SplitFee\\n    }\\n\\n    /* Inverse basis point. */\\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\\n\\n    struct TempData {\\n        address nftOwner;\\n        address buyerAddress;\\n        address nftContract;\\n        uint256 transferTokenIdSell;\\n        uint256 transferTokenIdBuy;\\n        bytes functionName;\\n        bytes result;\\n        bytes calldataValue;\\n        uint256 tokenId;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n    }\\n\\n    TempData tempData;\\n\\n    using SafeMath for uint256;\\n\\n    /* An ECDSA signature. */\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    /* An order on the exchange. */\\n    struct Order {\\n        /* Exchange address, intended as a versioning mechanism. */\\n        address exchange;\\n        /* Order maker address. */\\n        address maker;\\n        /* Order taker address, if specified. */\\n        address taker;\\n        /* Maker relayer fee of the order, unused for taker order. */\\n        uint256 makerRelayerFee;\\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\\n        uint256 takerRelayerFee;\\n        /* Maker protocol fee of the order, unused for taker order. */\\n        uint256 makerProtocolFee;\\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\\n        uint256 takerProtocolFee;\\n        /* Order fee recipient or zero address for taker order. */\\n        address feeRecipient;\\n        /* Fee method (protocol token or split fee). */\\n        FeeMethod feeMethod;\\n        /* Side (buy/sell). */\\n        SaleKindInterface.Side side;\\n        /* Kind of sale. */\\n        SaleKindInterface.SaleKind saleKind;\\n        /* Target. */\\n        address target;\\n        /* HowToCall. */\\n        AuthenticatedProxy.HowToCall howToCall;\\n        /* Calldata. */\\n        bytes calldata;\\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\\n        bytes replacementPattern;\\n        /* Static call target, zero-address for no static call. */\\n        address staticTarget;\\n        /* Static call extra data. */\\n        bytes staticExtradata;\\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\\n        address paymentToken;\\n        /* Base price of the order (in paymentTokens). */\\n        uint256 basePrice;\\n        /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\\n        uint256 extra;\\n        /* Listing timestamp. */\\n        uint256 listingTime;\\n        /* Expiration timestamp - 0 for no expiry. */\\n        uint256 expirationTime;\\n        /* Order salt, used to prevent duplicate hashes. */\\n        uint256 salt;\\n    }\\n\\n    event OrderApprovedPartOne(\\n        bytes32 indexed hash,\\n        address exchange,\\n        address indexed maker,\\n        address taker,\\n        uint256 makerRelayerFee,\\n        uint256 takerRelayerFee,\\n        uint256 makerProtocolFee,\\n        uint256 takerProtocolFee,\\n        address indexed feeRecipient,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        address target\\n    );\\n    event OrderApprovedPartTwo(\\n        bytes32 indexed hash,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        address staticTarget,\\n        bytes staticExtradata,\\n        address paymentToken,\\n        uint256 basePrice,\\n        uint256 extra,\\n        uint256 listingTime,\\n        uint256 expirationTime,\\n        uint256 salt,\\n        bool orderbookInclusionDesired\\n    );\\n    event OrderCancelled(bytes32 indexed hash);\\n    event OrdersMatched(\\n        bytes32 buyHash,\\n        bytes32 sellHash,\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 price,\\n        bytes32 indexed metadata\\n    );\\n\\n    function setupCopyrightMap(OKRoyaltyFeeManager feeManager)\\n        public\\n        onlyOwner\\n    {\\n        okRoyaltyFeeManager = feeManager;\\n    }\\n\\n    /**\\n     * @dev Change the minimum maker fee paid to the protocol (owner only)\\n     * @param newMinimumMakerProtocolFee New fee to set in basis points\\n     */\\n    function changeMinimumMakerProtocolFee(uint256 newMinimumMakerProtocolFee)\\n        public\\n        onlyOwner\\n    {\\n        minimumMakerProtocolFee = newMinimumMakerProtocolFee;\\n    }\\n\\n    /**\\n     * @dev Change the minimum taker fee paid to the protocol (owner only)\\n     * @param newMinimumTakerProtocolFee New fee to set in basis points\\n     */\\n    function changeMinimumTakerProtocolFee(uint256 newMinimumTakerProtocolFee)\\n        public\\n        onlyOwner\\n    {\\n        minimumTakerProtocolFee = newMinimumTakerProtocolFee;\\n    }\\n\\n    /**\\n     * @dev Change the protocol fee recipient (owner only)\\n     * @param newProtocolFeeRecipient New protocol fee recipient address\\n     */\\n    function changeProtocolFeeRecipient(address newProtocolFeeRecipient)\\n        public\\n        onlyOwner\\n    {\\n        protocolFeeRecipient = newProtocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens\\n     * @param token Token to transfer\\n     * @param from Address to charge fees\\n     * @param to Address to receive fees\\n     * @param amount Amount of protocol tokens to charge\\n     */\\n    function transferTokens(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            require(tokenTransferProxy.transferFrom(token, from, to, amount));\\n        }\\n    }\\n\\n    /**\\n     * @dev Charge a fee in protocol tokens\\n     * @param from Address to charge fees\\n     * @param to Address to receive fees\\n     * @param amount Amount of protocol tokens to charge\\n     */\\n    function chargeProtocolFee(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        transferTokens(exchangeToken, from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Execute a STATICCALL (introduced with Ethereum Metropolis, non-state-modifying external call)\\n     * @param target Contract to call\\n     * @param calldata Calldata (appended to extradata)\\n     * @param extradata Base data for STATICCALL (probably function selector and argument encoding)\\n     * @return The result of the call (success or failure)\\n     */\\n    function staticCall(\\n        address target,\\n        bytes memory calldata,\\n        bytes memory extradata\\n    ) public view returns (bool result) {\\n        bytes memory combined = new bytes(calldata.length + extradata.length);\\n        uint256 index;\\n        assembly {\\n            index := add(combined, 0x20)\\n        }\\n        index = ArrayUtils.unsafeWriteBytes(index, extradata);\\n        ArrayUtils.unsafeWriteBytes(index, calldata);\\n        assembly {\\n            result := staticcall(\\n                gas,\\n                target,\\n                add(combined, 0x20),\\n                mload(combined),\\n                mload(0x40),\\n                0\\n            )\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * Calculate size of an order struct when tightly packed\\n     *\\n     * @param order Order to calculate size of\\n     * @return Size in bytes\\n     */\\n    function sizeOf(Order memory order) internal pure returns (uint256) {\\n        return ((0x14 * 7) +\\n            (0x20 * 9) +\\n            4 +\\n            order.calldata.length +\\n            order.replacementPattern.length +\\n            order.staticExtradata.length);\\n    }\\n\\n    /**\\n     * @dev Hash an order, returning the canonical order hash, without the message prefix\\n     * @param order Order to hash\\n     * @return Hash of order\\n     */\\n    function hashOrder(Order memory order)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\\n        uint256 size = sizeOf(order);\\n        bytes memory array = new bytes(size);\\n        uint256 index;\\n        assembly {\\n            index := add(array, 0x20)\\n        }\\n        index = ArrayUtils.unsafeWriteAddress(index, order.exchange);\\n        index = ArrayUtils.unsafeWriteAddress(index, order.maker);\\n        index = ArrayUtils.unsafeWriteAddress(index, order.taker);\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\\n        index = ArrayUtils.unsafeWriteAddress(index, order.feeRecipient);\\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.feeMethod));\\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.side));\\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.saleKind));\\n        index = ArrayUtils.unsafeWriteAddress(index, order.target);\\n        index = ArrayUtils.unsafeWriteUint8(index, uint8(order.howToCall));\\n        index = ArrayUtils.unsafeWriteBytes(index, order.calldata);\\n        index = ArrayUtils.unsafeWriteBytes(index, order.replacementPattern);\\n        index = ArrayUtils.unsafeWriteAddress(index, order.staticTarget);\\n        index = ArrayUtils.unsafeWriteBytes(index, order.staticExtradata);\\n        index = ArrayUtils.unsafeWriteAddress(index, order.paymentToken);\\n        index = ArrayUtils.unsafeWriteUint(index, order.basePrice);\\n        index = ArrayUtils.unsafeWriteUint(index, order.extra);\\n        index = ArrayUtils.unsafeWriteUint(index, order.listingTime);\\n        index = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\\n        index = ArrayUtils.unsafeWriteUint(index, order.salt);\\n        assembly {\\n            hash := keccak256(add(array, 0x20), size)\\n        }\\n        return hash;\\n    }\\n\\n    /**\\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\\n     * @param order Order to hash\\n     * @return Hash of message prefix and order hash per Ethereum format\\n     */\\n    function hashToSign(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hashOrder(order));\\n    }\\n\\n    /**\\n     * @dev Assert an order is valid and return its hash\\n     * @param order Order to validate\\n     * @param sig ECDSA signature\\n     */\\n    function requireValidOrder(Order memory order, Sig memory sig)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 hash = hashToSign(order);\\n        require(validateOrder(hash, order, sig));\\n        return hash;\\n    }\\n\\n    /**\\n     * @dev Validate order parameters (does *not* check signature validity)\\n     * @param order Order to validate\\n     */\\n    function validateOrderParameters(Order memory order)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        /* Order must be targeted at this protocol version (this Exchange contract). */\\n        if (order.exchange != address(this)) {\\n            return false;\\n        }\\n\\n        /* Order must possess valid sale kind parameter combination. */\\n        if (\\n            !SaleKindInterface.validateParameters(\\n                order.saleKind,\\n                order.expirationTime\\n            )\\n        ) {\\n            return false;\\n        }\\n\\n        /* If using the split fee method, order must have sufficient protocol fees. */\\n        if (\\n            order.feeMethod == FeeMethod.SplitFee &&\\n            (order.makerProtocolFee < minimumMakerProtocolFee ||\\n                order.takerProtocolFee < minimumTakerProtocolFee)\\n        ) {\\n            return false;\\n        }\\n\\n        //\u8fd9\u91cc\u9a8c\u8bc1\u652f\u4ed8token\u662f\u5426\u5408\u6cd5 TODO\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Validate a provided previously approved / signed order, hash, and signature.\\n     * @param hash Order hash (already calculated, passed to avoid recalculation)\\n     * @param order Order to validate\\n     * @param sig ECDSA signature\\n     */\\n    function validateOrder(\\n        bytes32 hash,\\n        Order memory order,\\n        Sig memory sig\\n    ) internal view returns (bool) {\\n        /* Not done in an if-conditional to prevent unnecessary ecrecover evaluation, which seems to happen even though it should short-circuit. */\\n\\n        /* Order must have valid parameters. */\\n        if (!validateOrderParameters(order)) {\\n            return false;\\n        }\\n\\n        /* Order must have not been canceled or already filled. */\\n        if (cancelledOrFinalized[hash]) {\\n            return false;\\n        }\\n\\n        /* Order authentication. Order must be either:\\n        /* (a) previously approved */\\n        if (approvedOrders[hash]) {\\n            return true;\\n        }\\n\\n        /* or (b) ECDSA-signed by maker. */\\n        if (ecrecover(hash, sig.v, sig.r, sig.s) == order.maker) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Approve an order and optionally mark it for orderbook inclusion. Must be called by the maker of the order\\n     * @param order Order to approve\\n     * @param orderbookInclusionDesired Whether orderbook providers should include the order in their orderbooks\\n     */\\n    function approveOrder(Order memory order, bool orderbookInclusionDesired)\\n        internal\\n    {\\n        /* CHECKS */\\n\\n        /* Assert sender is authorized to approve order. */\\n        require(msg.sender == order.maker);\\n\\n        /* Calculate order hash. */\\n        bytes32 hash = hashToSign(order);\\n\\n        /* Assert order has not already been approved. */\\n        require(!approvedOrders[hash]);\\n\\n        /* EFFECTS */\\n\\n        /* Mark order as approved. */\\n        approvedOrders[hash] = true;\\n\\n        /* Log approval event. Must be split in two due to Solidity stack size limitations. */\\n        {\\n            emit OrderApprovedPartOne(\\n                hash,\\n                order.exchange,\\n                order.maker,\\n                order.taker,\\n                order.makerRelayerFee,\\n                order.takerRelayerFee,\\n                order.makerProtocolFee,\\n                order.takerProtocolFee,\\n                order.feeRecipient,\\n                order.feeMethod,\\n                order.side,\\n                order.saleKind,\\n                order.target\\n            );\\n        }\\n        {\\n            emit OrderApprovedPartTwo(\\n                hash,\\n                order.howToCall,\\n                order.calldata,\\n                order.replacementPattern,\\n                order.staticTarget,\\n                order.staticExtradata,\\n                order.paymentToken,\\n                order.basePrice,\\n                order.extra,\\n                order.listingTime,\\n                order.expirationTime,\\n                order.salt,\\n                orderbookInclusionDesired\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Cancel an order, preventing it from being matched. Must be called by the maker of the order\\n     * @param order Order to cancel\\n     * @param sig ECDSA signature\\n     */\\n    function cancelOrder(Order memory order, Sig memory sig) internal {\\n        /* CHECKS */\\n\\n        /* Calculate order hash. */\\n        bytes32 hash = requireValidOrder(order, sig);\\n\\n        /* Assert sender is authorized to cancel order. */\\n        require(msg.sender == order.maker);\\n\\n        /* EFFECTS */\\n\\n        /* Mark order as cancelled, preventing it from being matched. */\\n        cancelledOrFinalized[hash] = true;\\n\\n        /* Log cancel event. */\\n        emit OrderCancelled(hash);\\n    }\\n\\n    /**\\n     * @dev Calculate the current price of an order (convenience function)\\n     * @param order Order to calculate the price of\\n     * @return The current price of the order\\n     */\\n    function calculateCurrentPrice(Order memory order)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            SaleKindInterface.calculateFinalPrice(\\n                order.side,\\n                order.saleKind,\\n                order.basePrice,\\n                order.extra,\\n                order.listingTime,\\n                order.expirationTime\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculate the price two orders would match at, if in fact they would match (otherwise fail)\\n     * @param buy Buy-side order\\n     * @param sell Sell-side order\\n     * @return Match price\\n     */\\n    function calculateMatchPrice(Order memory buy, Order memory sell)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        /* Calculate sell price. */\\n        uint256 sellPrice = SaleKindInterface.calculateFinalPrice(\\n            sell.side,\\n            sell.saleKind,\\n            sell.basePrice,\\n            sell.extra,\\n            sell.listingTime,\\n            sell.expirationTime\\n        );\\n\\n        /* Calculate buy price. */\\n        uint256 buyPrice = SaleKindInterface.calculateFinalPrice(\\n            buy.side,\\n            buy.saleKind,\\n            buy.basePrice,\\n            buy.extra,\\n            buy.listingTime,\\n            buy.expirationTime\\n        );\\n\\n        /* Require price cross. */\\n        require(buyPrice >= sellPrice);\\n\\n        /* Maker/taker priority. */\\n        return sell.feeRecipient != address(0) ? sellPrice : buyPrice;\\n    }\\n\\n    /**\\n     * @dev Execute all ERC20 token / Ether transfers associated with an order match (fees and buyer => seller transfer)\\n     * @param buy Buy-side order\\n     * @param sell Sell-side order\\n     */\\n    function executeFundsTransfer(Order memory buy, Order memory sell)\\n        internal\\n        returns (uint256)\\n    {\\n        /* Only payable in the special case of unwrapped Ether. */\\n        if (sell.paymentToken != address(0)) {\\n            require(msg.value == 0);\\n        }\\n\\n        /* Calculate match price. */\\n        uint256 price = calculateMatchPrice(buy, sell);\\n\\n        /* If paying using a token (not Ether), transfer tokens. This is done prior to fee payments to that a seller will have tokens before being charged fees. */\\n        if (price > 0 && sell.paymentToken != address(0)) {\\n            transferTokens(sell.paymentToken, buy.maker, sell.maker, price);\\n        }\\n\\n        /* Amount that will be received by seller (for Ether). */\\n        uint256 receiveAmount = price;\\n\\n        /* Amount that must be sent by buyer (for Ether). */\\n        uint256 requiredAmount = price;\\n\\n        /* (\u5356\u5bb6\u6302\u5355\u4e70\u5bb6\u5403\u5355)Determine maker/taker and charge fees accordingly.\u53ea\u8981sell\u4e00\u65b9\u7684recipient \u4e0d\u4e3a0 \u5c31\u662f\u5356\u5bb6\u6302\u5355 \u4e70\u5bb6\u5403\u5355 */\\n        if (sell.feeRecipient != address(0)) {\\n            /* Sell-side order is maker. */\\n\\n            /* Assert taker fee is less than or equal to maximum fee specified by buyer. */\\n            require(sell.takerRelayerFee <= buy.takerRelayerFee);\\n\\n            tempData.calldataValue = sell.calldata;\\n            tempData.result = MyTools.getSlice(69, 100, tempData.calldataValue);\\n            tempData.tokenId = MyTools.bytesToUint(tempData.result);\\n            //\u7248\u7a0e\\n            (\\n                address royaltyFeeRecipient,\\n                uint256 royaltyFeeAmount\\n            ) = okRoyaltyFeeManager.calculateRoyaltyFeeAndGetRecipient(\\n                    sell.target,\\n                    tempData.tokenId,\\n                    price\\n                );\\n\\n            if (sell.feeMethod == FeeMethod.SplitFee) {\\n                /* Assert taker fee is less than or equal to maximum fee specified by buyer. */\\n                require(sell.takerProtocolFee <= buy.takerProtocolFee);\\n\\n                //\u6709\u7248\u7a0e\u5148\u6536\u7248\u7a0e (\u5356\u5bb6\u6302\u5355\u4e70\u5bb6\u5403\u5355) \u5269\u4e0b\u7684\u5e94\u6536\u518d\u53bb\u5904\u7406\u624b\u7eed\u8d39 \u8fd9\u91cc\u8981\u5224\u65ad\u662f\u5426\u4f7f\u7528\u4e3b\u94fe\u5e01\\n                if (price > 0 && sell.paymentToken == address(0)) {\\n                    receiveAmount = receiveAmount.sub(royaltyFeeAmount);\\n\\n                    royaltyFeeRecipient.transfer(royaltyFeeAmount);\\n                }\\n                //ERC20 \u6536\u7248\u7a0e (\u5356\u5bb6\u6302\u5355\u4e70\u5bb6\u5403\u5355) \u5356\u5bb6\u76f4\u63a5\u51fa\u7248\u7a0e\u7ed9\u7248\u7a0e\u6240\u6709\u8005\\n                if (price > 0 && sell.paymentToken != address(0)) {\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        sell.maker,\\n                        royaltyFeeRecipient,\\n                        royaltyFeeAmount\\n                    );\\n                }\\n\\n                /* Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker. */\\n                //\u5356\u5bb6\u6302\u5355 \u4e70\u5bb6\u5403\u5355\u7684\u573a\u666f\u4e0b sell.makerRelayerFee\u5fc5\u7136\u6709\u503c\\n                if (sell.makerRelayerFee > 0) {\\n                    //uint makerRelayerFee = SafeMath.div(SafeMath.mul(sell.makerRelayerFee, price), INVERSE_BASIS_POINT);\\n                    uint256 makerRelayerFee = sell\\n                        .makerRelayerFee\\n                        .mul(price)\\n                        .div(INVERSE_BASIS_POINT);\\n                    if (sell.paymentToken == address(0)) {\\n                        //receiveAmount = SafeMath.sub(receiveAmount, makerRelayerFee);\\n                        receiveAmount = receiveAmount.sub(makerRelayerFee);\\n                        //\u6b64\u65f6\u7684taker\u662f\u4e70\u5bb6\uff0cmsg.sender\u662f\u4e70\u5bb6\\n                        sell.feeRecipient.transfer(makerRelayerFee);\\n                    } else {\\n                        //\u5982\u679c\u6302\u5355\u8005\u662f\u5356\u5bb6\uff0c\u5411\u5356\u5bb6\u65362.5%\u7684\u624b\u7eed\u8d39\\n                        //function transferTokens(address token, address from, address to, uint amount)\\n                        //\u624b\u7eed\u8d39\\n                        transferTokens(\\n                            sell.paymentToken,\\n                            sell.maker,\\n                            sell.feeRecipient,\\n                            makerRelayerFee\\n                        );\\n                    }\\n                }\\n\\n                if (sell.takerRelayerFee > 0) {\\n                    //uint takerRelayerFee = SafeMath.div(SafeMath.mul(sell.takerRelayerFee, price), INVERSE_BASIS_POINT);\\n                    uint256 takerRelayerFee = sell\\n                        .takerRelayerFee\\n                        .mul(price)\\n                        .div(INVERSE_BASIS_POINT);\\n\\n                    if (sell.paymentToken == address(0)) {\\n                        //requiredAmount = SafeMath.add(requiredAmount, takerRelayerFee);\\n                        requiredAmount = requiredAmount.add(takerRelayerFee);\\n                        //\u6b64\u65f6\u7684taker\u662f\u5356\u5bb6\uff0cmsg.sender\u662f\u5356\u5bb6\\n                        sell.feeRecipient.transfer(takerRelayerFee);\\n                    } else {\\n                        //\u5982\u679c\u6302\u5355\u8005\u662f\u4e70\u5bb6\uff0c\u5411\u4e70\u5bb6\u65362.5%\u7684\u624b\u7eed\u8d39\\n                        //function transferTokens(address token, address from, address to, uint amount)\\n                        transferTokens(\\n                            sell.paymentToken,\\n                            buy.maker,\\n                            sell.feeRecipient,\\n                            takerRelayerFee\\n                        );\\n                    }\\n                }\\n\\n                //\u534f\u8bae\u8d39\\n                if (sell.makerProtocolFee > 0) {\\n                    //uint makerProtocolFee = SafeMath.div(SafeMath.mul(sell.makerProtocolFee, price), INVERSE_BASIS_POINT);\\n                    uint256 makerProtocolFee = sell\\n                        .makerProtocolFee\\n                        .mul(price)\\n                        .div(INVERSE_BASIS_POINT);\\n\\n                    if (sell.paymentToken == address(0)) {\\n                        //\u4e70\u5bb6\u5403\u5355\uff0c\u5356\u5bb6\u7684\u5e94\u6536\u91d1\u989d = \u5e94\u6536\u91d1\u989d - \u7248\u7a0e\\n                        //receiveAmount = SafeMath.sub(receiveAmount, makerProtocolFee);\\n                        receiveAmount = receiveAmount.sub(makerProtocolFee);\\n\\n                        protocolFeeRecipient.transfer(makerProtocolFee);\\n                    } else {\\n                        transferTokens(\\n                            sell.paymentToken,\\n                            sell.maker,\\n                            protocolFeeRecipient,\\n                            makerProtocolFee\\n                        );\\n                    }\\n                }\\n\\n                if (sell.takerProtocolFee > 0) {\\n                    uint256 takerProtocolFee = SafeMath.div(\\n                        SafeMath.mul(sell.takerProtocolFee, price),\\n                        INVERSE_BASIS_POINT\\n                    );\\n                    if (sell.paymentToken == address(0)) {\\n                        //\u5356\u5bb6\u63a5\u5355\uff0c\u5e94\u4ed8\u91d1\u989d = \u5e94\u4ed8\u91d1\u989d + \u7248\u7a0e \uff08\u7248\u7a0e\u5728payCopyRight\u5212\u8d70\uff0c\u6700\u540e\u8ba1\u7b97\u51fa\u4e00\u4e2a \u5e94\u4ed8\u91d1\u989d\uff09\\n                        //requiredAmount = SafeMath.add(requiredAmount, takerProtocolFee);\\n                        requiredAmount = requiredAmount.add(takerProtocolFee);\\n                        protocolFeeRecipient.transfer(takerProtocolFee);\\n                    } else {\\n                        transferTokens(\\n                            sell.paymentToken,\\n                            buy.maker,\\n                            protocolFeeRecipient,\\n                            takerProtocolFee\\n                        );\\n                    }\\n                }\\n            } else {\\n                /* Charge maker fee to seller. */\\n                chargeProtocolFee(\\n                    sell.maker,\\n                    sell.feeRecipient,\\n                    sell.makerRelayerFee\\n                );\\n\\n                /* Charge taker fee to buyer. */\\n                chargeProtocolFee(\\n                    buy.maker,\\n                    sell.feeRecipient,\\n                    sell.takerRelayerFee\\n                );\\n            }\\n        } else {\\n            /* Buy-side order is maker. */\\n            //\uff08\u4e70\u5bb6\u51fa\u4ef7 \u5356\u5bb6\u63a5\u5355\uff09 \u56e0\u4e3a\u5356\u5bb6\u4e00\u5f00\u59cb\u5df2\u7ecf\u6536\u5230\u4e8620\u4ee3\u5e01\uff0c\u6240\u4ee5\u8fd9\u91cc\u90fd\u662f\u5356\u5bb6\u76f4\u63a5\u7ed9\u624b\u7eed\u8d39\u6216\u8005\u7248\u7a0e\\n\\n            /* Assert taker fee is less than or equal to maximum fee specified by seller. */\\n            require(buy.takerRelayerFee <= sell.takerRelayerFee);\\n\\n            if (sell.feeMethod == FeeMethod.SplitFee) {\\n                /* The Exchange does not escrow Ether, so direct Ether can only be used to with sell-side maker / buy-side taker orders. */\\n                require(sell.paymentToken != address(0));\\n\\n                /* Assert taker fee is less than or equal to maximum fee specified by seller. */\\n                require(buy.takerProtocolFee <= sell.takerProtocolFee);\\n\\n                //\u7248\u7a0e\\n                (royaltyFeeRecipient, royaltyFeeAmount) = okRoyaltyFeeManager\\n                    .calculateRoyaltyFeeAndGetRecipient(\\n                        sell.target,\\n                        tempData.tokenId,\\n                        price\\n                    );\\n\\n                //ERC20 \u6536\u7248\u7a0e (\u5356\u5bb6\u6302\u5355\u4e70\u5bb6\u5403\u5355) \u5356\u5bb6\u76f4\u63a5\u51fa\u7248\u7a0e\u7ed9\u7248\u7a0e\u6240\u6709\u8005\\n                if (price > 0 && sell.paymentToken != address(0)) {\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        sell.maker,\\n                        royaltyFeeRecipient,\\n                        royaltyFeeAmount\\n                    );\\n                }\\n\\n                //(\u4e70\u5bb6\u51fa\u4ef7 \u5356\u5bb6\u63a5\u5355)\u4e0d\u4f1a\u5927\u4e8e0\\n                if (buy.makerRelayerFee > 0) {\\n                    makerRelayerFee = SafeMath.div(\\n                        SafeMath.mul(buy.makerRelayerFee, price),\\n                        INVERSE_BASIS_POINT\\n                    );\\n                    //makerRelayerFee = buy.makerRelayerFee.mul(price).div(INVERSE_BASIS_POINT);\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        buy.maker,\\n                        buy.feeRecipient,\\n                        makerRelayerFee\\n                    );\\n                }\\n\\n                //(\u4e70\u5bb6\u51fa\u4ef7 \u5356\u5bb6\u63a5\u5355)\u6b64\u65f6\u6709\u503c\\n                if (buy.takerRelayerFee > 0) {\\n                    takerRelayerFee = SafeMath.div(\\n                        SafeMath.mul(buy.takerRelayerFee, price),\\n                        INVERSE_BASIS_POINT\\n                    );\\n                    //takerRelayerFee = buy.takerRelayerFee.mul(price).div(INVERSE_BASIS_POINT);\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        sell.maker,\\n                        buy.feeRecipient,\\n                        takerRelayerFee\\n                    );\\n                }\\n\\n                if (buy.makerProtocolFee > 0) {\\n                    makerProtocolFee = SafeMath.div(\\n                        SafeMath.mul(buy.makerProtocolFee, price),\\n                        INVERSE_BASIS_POINT\\n                    );\\n                    //makerProtocolFee = buy.makerProtocolFee.mul(price).div(INVERSE_BASIS_POINT);\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        buy.maker,\\n                        protocolFeeRecipient,\\n                        makerProtocolFee\\n                    );\\n                }\\n\\n                if (buy.takerProtocolFee > 0) {\\n                    takerProtocolFee = SafeMath.div(\\n                        SafeMath.mul(buy.takerProtocolFee, price),\\n                        INVERSE_BASIS_POINT\\n                    );\\n                    //takerProtocolFee = buy.takerProtocolFee.mul(price).div(INVERSE_BASIS_POINT);\\n                    transferTokens(\\n                        sell.paymentToken,\\n                        sell.maker,\\n                        protocolFeeRecipient,\\n                        takerProtocolFee\\n                    );\\n                }\\n            } else {\\n                /* Charge maker fee to buyer. */\\n                chargeProtocolFee(\\n                    buy.maker,\\n                    buy.feeRecipient,\\n                    buy.makerRelayerFee\\n                );\\n\\n                /* Charge taker fee to seller. */\\n                chargeProtocolFee(\\n                    sell.maker,\\n                    buy.feeRecipient,\\n                    buy.takerRelayerFee\\n                );\\n            }\\n        }\\n\\n        if (sell.paymentToken == address(0)) {\\n            /* Special-case Ether, order must be matched by buyer. */\\n            require(msg.value >= requiredAmount);\\n            sell.maker.transfer(receiveAmount);\\n            /* Allow overshoot for variable-price auctions, refund difference. */\\n            //uint diff = SafeMath.sub(msg.value, requiredAmount);\\n            uint256 diff = msg.value.sub(requiredAmount);\\n            if (diff > 0) {\\n                buy.maker.transfer(diff);\\n            }\\n        }\\n\\n        /* This contract should never hold Ether, however, we cannot assert this, since it is impossible to prevent anyone from sending Ether e.g. with selfdestruct. */\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Return whether or not two orders can be matched with each other by basic parameters (does not check order signatures / calldata or perform static calls)\\n     * @param buy Buy-side order\\n     * @param sell Sell-side order\\n     * @return Whether or not the two orders can be matched\\n     */\\n    function ordersCanMatch(Order memory buy, Order memory sell)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (/* Must be opposite-side. */\\n        (buy.side == SaleKindInterface.Side.Buy &&\\n            sell.side == SaleKindInterface.Side.Sell) &&\\n            /* Must use same fee method. */\\n            (buy.feeMethod == sell.feeMethod) &&\\n            /* Must use same payment token. */\\n            (buy.paymentToken == sell.paymentToken) &&\\n            /* Must match maker/taker addresses. */\\n            (sell.taker == address(0) || sell.taker == buy.maker) &&\\n            (buy.taker == address(0) || buy.taker == sell.maker) &&\\n            /* One must be maker and the other must be taker (no bool XOR in Solidity). */\\n            ((sell.feeRecipient == address(0) &&\\n                buy.feeRecipient != address(0)) ||\\n                (sell.feeRecipient != address(0) &&\\n                    buy.feeRecipient == address(0))) &&\\n            /* Must match target. */\\n            (buy.target == sell.target) &&\\n            /* Must match howToCall. */\\n            (buy.howToCall == sell.howToCall) &&\\n            /* Buy-side order must be settleable. */\\n            SaleKindInterface.canSettleOrder(\\n                buy.listingTime,\\n                buy.expirationTime\\n            ) &&\\n            /* Sell-side order must be settleable. */\\n            SaleKindInterface.canSettleOrder(\\n                sell.listingTime,\\n                sell.expirationTime\\n            ));\\n    }\\n\\n    TransferNFTManager public transferManager;\\n\\n    function setTransferManager(TransferNFTManager _transferManager)\\n        public\\n        onlyOwner\\n    {\\n        transferManager = _transferManager;\\n    }\\n\\n    /**\\n     * @dev Atomically match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\\n     * @param buy Buy-side order\\n     * @param buySig Buy-side order signature\\n     * @param sell Sell-side order\\n     * @param sellSig Sell-side order signature\\n     */\\n    function atomicMatch(\\n        Order memory buy,\\n        Sig memory buySig,\\n        Order memory sell,\\n        Sig memory sellSig,\\n        bytes32 metadata\\n    ) internal reentrancyGuard {\\n        /* CHECKS */\\n\\n        /* Ensure buy order validity and calculate hash if necessary. */\\n        bytes32 buyHash;\\n\\n        if (buy.maker == msg.sender) {\\n            require(validateOrderParameters(buy));\\n        } else {\\n            buyHash = requireValidOrder(buy, buySig);\\n        }\\n\\n        /* Ensure sell order validity and calculate hash if necessary. */\\n        bytes32 sellHash;\\n        if (sell.maker == msg.sender) {\\n            require(validateOrderParameters(sell));\\n        } else {\\n            sellHash = requireValidOrder(sell, sellSig);\\n        }\\n\\n        /* Must be matchable. */\\n        require(ordersCanMatch(buy, sell));\\n\\n        /* Target must exist (prevent malicious selfdestructs just prior to order settlement). */\\n        uint256 size;\\n        address target = sell.target;\\n        assembly {\\n            size := extcodesize(target)\\n        }\\n        require(size > 0);\\n\\n        /* Must match calldata after replacement, if specified. */\\n        if (buy.replacementPattern.length > 0) {\\n            ArrayUtils.guardedArrayReplace(\\n                buy.calldata,\\n                sell.calldata,\\n                buy.replacementPattern\\n            );\\n        }\\n        if (sell.replacementPattern.length > 0) {\\n            ArrayUtils.guardedArrayReplace(\\n                sell.calldata,\\n                buy.calldata,\\n                sell.replacementPattern\\n            );\\n        }\\n\\n        require(ArrayUtils.arrayEq(buy.calldata, sell.calldata));\\n\\n        /* Retrieve delegateProxy contract. */\\n        OwnableDelegateProxy delegateProxy = registry.proxies(sell.maker);\\n\\n        /* EFFECTS */\\n\\n        /* Mark previously signed or approved orders as finalized. */\\n        if (msg.sender != buy.maker) {\\n            cancelledOrFinalized[buyHash] = true;\\n        }\\n        if (msg.sender != sell.maker) {\\n            cancelledOrFinalized[sellHash] = true;\\n        }\\n\\n        /* INTERACTIONS */\\n\\n        /* Execute funds transfer and pay fees. */\\n        uint256 price = executeFundsTransfer(buy, sell);\\n\\n        require(uint256(sell.howToCall)==0,\\\"DelegateCall mode is not supported\\\");\\n\\n        /* Execute specified call through proxy. */\\n        //require(proxy.proxy(sell.target, sell.howToCall, sell.calldata));\\n        //\u8fd9\u91cc\u53ef\u4ee5\u518d\u6269\u5c55\u4e00\u5c42\uff0c\u7528\u4e8eaddress[4]\u6307\u5b9a\u4e00\u4e2a\u6269\u5c55\u5408\u7ea6\\n        if (delegateProxy != address(0)) {\\n            require(\\n                delegateProxy.implementation() ==\\n                    registry.delegateProxyImplementation()\\n            );\\n\\n            AuthenticatedProxy proxy = AuthenticatedProxy(delegateProxy);\\n\\n            require(proxy.proxy(sell.target, sell.howToCall, sell.calldata));\\n        } else {\\n            //safeTransferFrom from  to tokenId\\n            //verify from\\n            tempData.functionName = MyTools.getSlice(1, 4, sell.calldata);\\n            tempData.result = MyTools.getSlice(5, 36, sell.calldata);\\n            tempData.result = MyTools.getSlice(13, 32, tempData.result);\\n            tempData.nftOwner = MyTools.bytesToAddress(tempData.result);\\n            require(\\n                sell.maker == tempData.nftOwner,\\n                \\\"the sell's maker is not nftOwner!\\\"\\n            );\\n\\n            //verify tokenId\\n            tempData.result = MyTools.getSlice(69, 100, sell.calldata);\\n            tempData.result = MyTools.getSlice(13, 32, tempData.result);\\n            tempData.transferTokenIdSell = MyTools.bytesToUint(tempData.result);\\n\\n            tempData.result = MyTools.getSlice(69, 100, buy.calldata);\\n            tempData.result = MyTools.getSlice(13, 32, tempData.result);\\n            tempData.transferTokenIdBuy = MyTools.bytesToUint(tempData.result);\\n\\n            require(\\n                tempData.transferTokenIdBuy == tempData.transferTokenIdSell,\\n                \\\"the target tokenId is not match!\\\"\\n            );\\n\\n            //require(sell.target==nftContract,\\\"the nftContract is not target!\\\");\\n            if (sell.calldata.length > 100) {\\n                tempData.result = MyTools.getSlice(101, 132, sell.calldata);\\n                tempData.sellAmount = MyTools.bytesToUint(tempData.result);\\n\\n                tempData.result = MyTools.getSlice(101, 132, buy.calldata);\\n                tempData.buyAmount = MyTools.bytesToUint(tempData.result);\\n                require(\\n                    tempData.sellAmount == tempData.buyAmount,\\n                    \\\"buy amount and sell amount not match!\\\"\\n                );\\n            }\\n            bool callResult = transferManager.proxy(\\n                sell.target,\\n                uint256(sell.howToCall),\\n                sell.calldata\\n            );\\n            require(callResult, \\\"nft transfer failed\\\");\\n        }\\n\\n        /* Static calls are intentionally done after the effectful call so they can check resulting state. */\\n\\n        /* Handle buy-side static call if specified. */\\n        if (buy.staticTarget != address(0)) {\\n            require(\\n                staticCall(buy.staticTarget, sell.calldata, buy.staticExtradata)\\n            );\\n        }\\n\\n        /* Handle sell-side static call if specified. */\\n        if (sell.staticTarget != address(0)) {\\n            require(\\n                staticCall(\\n                    sell.staticTarget,\\n                    sell.calldata,\\n                    sell.staticExtradata\\n                )\\n            );\\n        }\\n\\n        /* Log match event. */\\n        emit OrdersMatched(\\n            buyHash,\\n            sellHash,\\n            sell.feeRecipient != address(0) ? sell.maker : buy.maker,\\n            sell.feeRecipient != address(0) ? buy.maker : sell.maker,\\n            price,\\n            metadata\\n        );\\n    }\\n}\\n\\ncontract Exchange is ExchangeCore {\\n    /**\\n     * @dev Call guardedArrayReplace - library function exposed for testing.\\n     */\\n    function guardedArrayReplace(\\n        bytes array,\\n        bytes desired,\\n        bytes mask\\n    ) public pure returns (bytes) {\\n        ArrayUtils.guardedArrayReplace(array, desired, mask);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Call calculateFinalPrice - library function exposed for testing.\\n     */\\n    function calculateFinalPrice(\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        uint256 basePrice,\\n        uint256 extra,\\n        uint256 listingTime,\\n        uint256 expirationTime\\n    ) public view returns (uint256) {\\n        return\\n            SaleKindInterface.calculateFinalPrice(\\n                side,\\n                saleKind,\\n                basePrice,\\n                extra,\\n                listingTime,\\n                expirationTime\\n            );\\n    }\\n\\n    /**\\n     * @dev Call hashOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function hashOrder_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata\\n    ) public pure returns (bytes32) {\\n        return\\n            hashOrder(\\n                Order(\\n                    addrs[0],\\n                    addrs[1],\\n                    addrs[2],\\n                    uints[0],\\n                    uints[1],\\n                    uints[2],\\n                    uints[3],\\n                    addrs[3],\\n                    feeMethod,\\n                    side,\\n                    saleKind,\\n                    addrs[4],\\n                    howToCall,\\n                    calldata,\\n                    replacementPattern,\\n                    addrs[5],\\n                    staticExtradata,\\n                    ERC20(addrs[6]),\\n                    uints[4],\\n                    uints[5],\\n                    uints[6],\\n                    uints[7],\\n                    uints[8]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Call hashToSign - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function hashToSign_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata\\n    ) public pure returns (bytes32) {\\n        return\\n            hashToSign(\\n                Order(\\n                    addrs[0],\\n                    addrs[1],\\n                    addrs[2],\\n                    uints[0],\\n                    uints[1],\\n                    uints[2],\\n                    uints[3],\\n                    addrs[3],\\n                    feeMethod,\\n                    side,\\n                    saleKind,\\n                    addrs[4],\\n                    howToCall,\\n                    calldata,\\n                    replacementPattern,\\n                    addrs[5],\\n                    staticExtradata,\\n                    ERC20(addrs[6]),\\n                    uints[4],\\n                    uints[5],\\n                    uints[6],\\n                    uints[7],\\n                    uints[8]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Call validateOrderParameters - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function validateOrderParameters_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata\\n    ) public view returns (bool) {\\n        Order memory order = Order(\\n            addrs[0],\\n            addrs[1],\\n            addrs[2],\\n            uints[0],\\n            uints[1],\\n            uints[2],\\n            uints[3],\\n            addrs[3],\\n            feeMethod,\\n            side,\\n            saleKind,\\n            addrs[4],\\n            howToCall,\\n            calldata,\\n            replacementPattern,\\n            addrs[5],\\n            staticExtradata,\\n            ERC20(addrs[6]),\\n            uints[4],\\n            uints[5],\\n            uints[6],\\n            uints[7],\\n            uints[8]\\n        );\\n        return validateOrderParameters(order);\\n    }\\n\\n    /**\\n     * @dev Call validateOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function validateOrder_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view returns (bool) {\\n        Order memory order = Order(\\n            addrs[0],\\n            addrs[1],\\n            addrs[2],\\n            uints[0],\\n            uints[1],\\n            uints[2],\\n            uints[3],\\n            addrs[3],\\n            feeMethod,\\n            side,\\n            saleKind,\\n            addrs[4],\\n            howToCall,\\n            calldata,\\n            replacementPattern,\\n            addrs[5],\\n            staticExtradata,\\n            ERC20(addrs[6]),\\n            uints[4],\\n            uints[5],\\n            uints[6],\\n            uints[7],\\n            uints[8]\\n        );\\n        return validateOrder(hashToSign(order), order, Sig(v, r, s));\\n    }\\n\\n    /**\\n     * @dev Call approveOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function approveOrder_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata,\\n        bool orderbookInclusionDesired\\n    ) public {\\n        Order memory order = Order(\\n            addrs[0],\\n            addrs[1],\\n            addrs[2],\\n            uints[0],\\n            uints[1],\\n            uints[2],\\n            uints[3],\\n            addrs[3],\\n            feeMethod,\\n            side,\\n            saleKind,\\n            addrs[4],\\n            howToCall,\\n            calldata,\\n            replacementPattern,\\n            addrs[5],\\n            staticExtradata,\\n            ERC20(addrs[6]),\\n            uints[4],\\n            uints[5],\\n            uints[6],\\n            uints[7],\\n            uints[8]\\n        );\\n        return approveOrder(order, orderbookInclusionDesired);\\n    }\\n\\n    /**\\n     * @dev Call cancelOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function cancelOrder_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        return\\n            cancelOrder(\\n                Order(\\n                    addrs[0],\\n                    addrs[1],\\n                    addrs[2],\\n                    uints[0],\\n                    uints[1],\\n                    uints[2],\\n                    uints[3],\\n                    addrs[3],\\n                    feeMethod,\\n                    side,\\n                    saleKind,\\n                    addrs[4],\\n                    howToCall,\\n                    calldata,\\n                    replacementPattern,\\n                    addrs[5],\\n                    staticExtradata,\\n                    ERC20(addrs[6]),\\n                    uints[4],\\n                    uints[5],\\n                    uints[6],\\n                    uints[7],\\n                    uints[8]\\n                ),\\n                Sig(v, r, s)\\n            );\\n    }\\n\\n    /**\\n     * @dev Call calculateCurrentPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function calculateCurrentPrice_(\\n        address[7] addrs,\\n        uint256[9] uints,\\n        FeeMethod feeMethod,\\n        SaleKindInterface.Side side,\\n        SaleKindInterface.SaleKind saleKind,\\n        AuthenticatedProxy.HowToCall howToCall,\\n        bytes calldata,\\n        bytes replacementPattern,\\n        bytes staticExtradata\\n    ) public view returns (uint256) {\\n        return\\n            calculateCurrentPrice(\\n                Order(\\n                    addrs[0],\\n                    addrs[1],\\n                    addrs[2],\\n                    uints[0],\\n                    uints[1],\\n                    uints[2],\\n                    uints[3],\\n                    addrs[3],\\n                    feeMethod,\\n                    side,\\n                    saleKind,\\n                    addrs[4],\\n                    howToCall,\\n                    calldata,\\n                    replacementPattern,\\n                    addrs[5],\\n                    staticExtradata,\\n                    ERC20(addrs[6]),\\n                    uints[4],\\n                    uints[5],\\n                    uints[6],\\n                    uints[7],\\n                    uints[8]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Call ordersCanMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function ordersCanMatch_(\\n        address[14] addrs,\\n        uint256[18] uints,\\n        uint8[8] feeMethodsSidesKindsHowToCalls,\\n        bytes calldataBuy,\\n        bytes calldataSell,\\n        bytes replacementPatternBuy,\\n        bytes replacementPatternSell,\\n        bytes staticExtradataBuy,\\n        bytes staticExtradataSell\\n    ) public view returns (bool) {\\n        Order memory buy = Order(\\n            addrs[0],\\n            addrs[1],\\n            addrs[2],\\n            uints[0],\\n            uints[1],\\n            uints[2],\\n            uints[3],\\n            addrs[3],\\n            FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]),\\n            addrs[4],\\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]),\\n            calldataBuy,\\n            replacementPatternBuy,\\n            addrs[5],\\n            staticExtradataBuy,\\n            ERC20(addrs[6]),\\n            uints[4],\\n            uints[5],\\n            uints[6],\\n            uints[7],\\n            uints[8]\\n        );\\n        Order memory sell = Order(\\n            addrs[7],\\n            addrs[8],\\n            addrs[9],\\n            uints[9],\\n            uints[10],\\n            uints[11],\\n            uints[12],\\n            addrs[10],\\n            FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]),\\n            addrs[11],\\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]),\\n            calldataSell,\\n            replacementPatternSell,\\n            addrs[12],\\n            staticExtradataSell,\\n            ERC20(addrs[13]),\\n            uints[13],\\n            uints[14],\\n            uints[15],\\n            uints[16],\\n            uints[17]\\n        );\\n        return ordersCanMatch(buy, sell);\\n    }\\n\\n    /**\\n     * @dev Return whether or not two orders' calldata specifications can match\\n     * @param buyCalldata Buy-side order calldata\\n     * @param buyReplacementPattern Buy-side order calldata replacement mask\\n     * @param sellCalldata Sell-side order calldata\\n     * @param sellReplacementPattern Sell-side order calldata replacement mask\\n     * @return Whether the orders' calldata can be matched\\n     */\\n    function orderCalldataCanMatch(\\n        bytes buyCalldata,\\n        bytes buyReplacementPattern,\\n        bytes sellCalldata,\\n        bytes sellReplacementPattern\\n    ) public pure returns (bool) {\\n        if (buyReplacementPattern.length > 0) {\\n            ArrayUtils.guardedArrayReplace(\\n                buyCalldata,\\n                sellCalldata,\\n                buyReplacementPattern\\n            );\\n        }\\n        if (sellReplacementPattern.length > 0) {\\n            ArrayUtils.guardedArrayReplace(\\n                sellCalldata,\\n                buyCalldata,\\n                sellReplacementPattern\\n            );\\n        }\\n        return ArrayUtils.arrayEq(buyCalldata, sellCalldata);\\n    }\\n\\n    /**\\n     * @dev Call calculateMatchPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function calculateMatchPrice_(\\n        address[14] addrs,\\n        uint256[18] uints,\\n        uint8[8] feeMethodsSidesKindsHowToCalls,\\n        bytes calldataBuy,\\n        bytes calldataSell,\\n        bytes replacementPatternBuy,\\n        bytes replacementPatternSell,\\n        bytes staticExtradataBuy,\\n        bytes staticExtradataSell\\n    ) public view returns (uint256) {\\n        Order memory buy = Order(\\n            addrs[0],\\n            addrs[1],\\n            addrs[2],\\n            uints[0],\\n            uints[1],\\n            uints[2],\\n            uints[3],\\n            addrs[3],\\n            FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]),\\n            addrs[4],\\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]),\\n            calldataBuy,\\n            replacementPatternBuy,\\n            addrs[5],\\n            staticExtradataBuy,\\n            ERC20(addrs[6]),\\n            uints[4],\\n            uints[5],\\n            uints[6],\\n            uints[7],\\n            uints[8]\\n        );\\n        Order memory sell = Order(\\n            addrs[7],\\n            addrs[8],\\n            addrs[9],\\n            uints[9],\\n            uints[10],\\n            uints[11],\\n            uints[12],\\n            addrs[10],\\n            FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\\n            SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\\n            SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]),\\n            addrs[11],\\n            AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]),\\n            calldataSell,\\n            replacementPatternSell,\\n            addrs[12],\\n            staticExtradataSell,\\n            ERC20(addrs[13]),\\n            uints[13],\\n            uints[14],\\n            uints[15],\\n            uints[16],\\n            uints[17]\\n        );\\n        return calculateMatchPrice(buy, sell);\\n    }\\n\\n    /**\\n     * @dev Call atomicMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\\n     */\\n    function atomicMatch_(\\n        address[14] addrs,\\n        uint256[18] uints,\\n        uint8[8] feeMethodsSidesKindsHowToCalls,\\n        bytes calldataBuy,\\n        bytes calldataSell,\\n        bytes replacementPatternBuy,\\n        bytes replacementPatternSell,\\n        bytes staticExtradataBuy,\\n        bytes staticExtradataSell,\\n        uint8[2] vs,\\n        bytes32[5] rssMetadata\\n    ) public payable {\\n        return\\n            atomicMatch(\\n                Order(\\n                    addrs[0],\\n                    addrs[1],\\n                    addrs[2],\\n                    uints[0],\\n                    uints[1],\\n                    uints[2],\\n                    uints[3],\\n                    addrs[3],\\n                    FeeMethod(feeMethodsSidesKindsHowToCalls[0]),\\n                    SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]),\\n                    SaleKindInterface.SaleKind(\\n                        feeMethodsSidesKindsHowToCalls[2]\\n                    ),\\n                    addrs[4],\\n                    AuthenticatedProxy.HowToCall(\\n                        feeMethodsSidesKindsHowToCalls[3]\\n                    ),\\n                    calldataBuy,\\n                    replacementPatternBuy,\\n                    addrs[5],\\n                    staticExtradataBuy,\\n                    ERC20(addrs[6]),\\n                    uints[4],\\n                    uints[5],\\n                    uints[6],\\n                    uints[7],\\n                    uints[8]\\n                ),\\n                Sig(vs[0], rssMetadata[0], rssMetadata[1]),\\n                Order(\\n                    addrs[7],\\n                    addrs[8],\\n                    addrs[9],\\n                    uints[9],\\n                    uints[10],\\n                    uints[11],\\n                    uints[12],\\n                    addrs[10],\\n                    FeeMethod(feeMethodsSidesKindsHowToCalls[4]),\\n                    SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]),\\n                    SaleKindInterface.SaleKind(\\n                        feeMethodsSidesKindsHowToCalls[6]\\n                    ),\\n                    addrs[11],\\n                    AuthenticatedProxy.HowToCall(\\n                        feeMethodsSidesKindsHowToCalls[7]\\n                    ),\\n                    calldataSell,\\n                    replacementPatternSell,\\n                    addrs[12],\\n                    staticExtradataSell,\\n                    ERC20(addrs[13]),\\n                    uints[13],\\n                    uints[14],\\n                    uints[15],\\n                    uints[16],\\n                    uints[17]\\n                ),\\n                Sig(vs[1], rssMetadata[2], rssMetadata[3]),\\n                rssMetadata[4]\\n            );\\n    }\\n\\n    function validateErc(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address maker\\n    ) public pure returns (bool) {\\n        if (ecrecover(hash, v, r, s) == maker) {\\n            return true;\\n        }\\n    }\\n}\\n\\ncontract OKOffChainExchange is Exchange {\\n    string public constant name = \\\"OKEX OffChain Change\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    string public constant codename = \\\"Diego\\\";\\n\\n    function changeExchangeToken(ERC20 tokenAddress) public onlyOwner {\\n        exchangeToken = tokenAddress;\\n    }\\n\\n    function changeCopyrightReceiver(address protocolFeeAddress)\\n        public\\n        onlyOwner\\n    {\\n        protocolFeeRecipient = protocolFeeAddress;\\n    }\\n\\n    bool private onlyInitOnce;\\n\\n    /**\\n     * @dev Initialize a WyvernExchange instance\\n     * @param registryAddress Address of the registry instance which this Exchange instance will use\\n     * @param tokenAddress Address of the token used for protocol fees\\n     */\\n    function init(\\n        ProxyRegistry registryAddress,\\n        TokenTransferProxy tokenTransferProxyAddress,\\n        ERC20 tokenAddress,\\n        address protocolFeeAddress\\n    ) public {\\n        require(!onlyInitOnce, \\\"already initialized\\\");\\n        onlyInitOnce = true;\\n        registry = registryAddress;\\n        tokenTransferProxy = tokenTransferProxyAddress;\\n        //\u7528\u6765\u652f\u4ed8\u7248\u7a0e\u7684token\u5730\u5740 \u4f46\u662f\u8fd9\u91cc\u9762\u8ddf\u7740\u8ba2\u5355\u8d70(split\u6a21\u5f0f) \u53ea\u6709protocol\u6a21\u5f0f\u6b64token\u4f1a\u8d77\u4f5c\u7528\\n        exchangeToken = tokenAddress;\\n        //\u534f\u8bae\u8d39\uff08\u7248\u7a0e\uff09\u7684\u63a5\u6536\u5730\u5740\\n        protocolFeeRecipient = protocolFeeAddress;\\n        owner = msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/OKRoyaltyFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.26;\\n\\n//import {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n//import {IERC165, IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport {IERC2981} from \\\"./interfaces/IERC2981.sol\\\";\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport \\\"./OKRoyaltyFeeRegistry.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeManager\\n * @notice It handles the logic to check and transfer royalty fees (if any).\\n */\\ncontract OKRoyaltyFeeManager is IRoyaltyFeeManager, Ownable {\\n    // https://eips.ethereum.org/EIPS/eip-2981\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    IRoyaltyFeeRegistry public royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\\n     */\\n    constructor(address _royaltyFeeRegistry) {\\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\\n    }\\n\\n    function setRoyaltyFeeRegistry(address _royaltyFeeRegistry)\\n        public\\n        onlyOwner\\n    {\\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty fee and get recipient\\n     * @param collection address of the NFT contract\\n     * @param tokenId tokenId\\n     * @param amount amount to transfer\\n     */\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256) {\\n        // 1. Check if there is a royalty info in the system\\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry\\n            .royaltyInfo(collection, amount);\\n\\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\\n        // \u5f53\u652f\u6301 2981\u6807\u51c6\u65f6\uff0c\u8fd4\u56de\u67d0\u4e2atokenId\u7684\u7248\u7a0e\uff0c\u5426\u5219\u76f4\u63a5\u8fd4\u56de\u8be5NFT\u5408\u7ea6\u7ea7\u522b\u7684\u7248\u7a0e\\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(\\n                    tokenId,\\n                    amount\\n                );\\n            }\\n        }\\n        return (receiver, royaltyAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nlibrary SafeMath {\\n\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/offchain/interfaces/MyTools.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nlibrary MyTools {\\n    function getSlice(uint256 begin, uint256 end, bytes text) internal  pure returns (bytes) {\\n        bytes memory a = new bytes(end-begin+1);\\n        for(uint i=0;i<=end-begin;i++){\\n            a[i] = text[i+begin-1];\\n        }\\n        return a;\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) internal  view returns (uint256){\\n\\n        uint256 number;\\n        for(uint i= 0; i<b.length; i++){\\n            number = number + uint8(b[i])*(2**(8*(b.length-(i+1))));\\n        }\\n        return  number;\\n    }\\n\\n\\n    function bytesToAddress(bytes memory bys) internal view returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys,20))\\n        }\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/ArrayUtils.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nlibrary ArrayUtils {\\n\\n    /**\\n     * Replace bytes in an array with bytes in another array, guarded by a bitmask\\n     * Efficiency of this function is a bit unpredictable because of the EVM's word-specific model (arrays under 32 bytes will be slower)\\n     *\\n     * @dev Mask must be the size of the byte array. A nonzero byte means the byte array can be changed.\\n     * @param array The original array\\n     * @param desired The target array\\n     * @param mask The mask specifying which bits can be changed\\n     * @return The updated byte array (the parameter will be modified inplace)\\n     */\\n    function guardedArrayReplace(bytes memory array, bytes memory desired, bytes memory mask)\\n    internal\\n    pure\\n    {\\n        require(array.length == desired.length);\\n        require(array.length == mask.length);\\n\\n        uint words = array.length / 0x20;\\n        uint index = words * 0x20;\\n        assert(index / 0x20 == words);\\n        uint i;\\n\\n        for (i = 0; i < words; i++) {\\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\\n            assembly {\\n                let commonIndex := mul(0x20, add(1, i))\\n                let maskValue := mload(add(mask, commonIndex))\\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\\n            }\\n        }\\n\\n        /* Deal with the last section of the byte array. */\\n        if (words > 0) {\\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\\n            i = words;\\n            assembly {\\n                let commonIndex := mul(0x20, add(1, i))\\n                let maskValue := mload(add(mask, commonIndex))\\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\\n            }\\n        } else {\\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\\n            for (i = index; i < array.length; i++) {\\n                array[i] = ((mask[i] ^ 0xff) & array[i]) | (mask[i] & desired[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test if two arrays are equal\\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n     *\\n     * @dev Arrays must be of equal length, otherwise will return false\\n     * @param a First array\\n     * @param b Second array\\n     * @return Whether or not all bytes in the arrays are equal\\n     */\\n    function arrayEq(bytes memory a, bytes memory b)\\n    internal\\n    pure\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(a)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(b))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(a, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(b, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    /**\\n     * Unsafe write byte array into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source Byte array to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteBytes(uint index, bytes source)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        if (source.length > 0) {\\n            assembly {\\n                let length := mload(source)\\n                let end := add(source, add(0x20, length))\\n                let arrIndex := add(source, 0x20)\\n                let tempIndex := index\\n                for { } eq(lt(arrIndex, end), 1) {\\n                    arrIndex := add(arrIndex, 0x20)\\n                    tempIndex := add(tempIndex, 0x20)\\n                } {\\n                    mstore(tempIndex, mload(arrIndex))\\n                }\\n                index := add(index, length)\\n            }\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write address into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source Address to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteAddress(uint index, address source)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        uint conv = uint(source) << 0x60;\\n        assembly {\\n            mstore(index, conv)\\n            index := add(index, 0x14)\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write uint into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source uint to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteUint(uint index, uint source)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        assembly {\\n            mstore(index, source)\\n            index := add(index, 0x20)\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write uint8 into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source uint8 to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteUint8(uint index, uint8 source)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        assembly {\\n            mstore8(index, source)\\n            index := add(index, 0x1)\\n        }\\n        return index;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/SaleKindInterface.sol\": {\r\n      \"content\": \"/*\\n\\n  Abstract over fixed-price sales and Dutch auctions, with the intent of easily supporting additional methods of sale later.\\n\\n  Separated into a library for convenience, all the functions are inlined.\\n\\n*/\\n\\npragma solidity 0.4.26;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title SaleKindInterface\\n * @author Project Wyvern Developers\\n */\\nlibrary SaleKindInterface {\\n\\n    /**\\n     * Side: buy or sell.\\n     */\\n    enum Side { Buy, Sell }\\n\\n    /**\\n     * Currently supported kinds of sale: fixed price, Dutch auction. \\n     * English auctions cannot be supported without stronger escrow guarantees.\\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\\n     */\\n    enum SaleKind { FixedPrice, DutchAuction }\\n\\n    /**\\n     * @dev Check whether the parameters of a sale are valid\\n     * @param saleKind Kind of sale\\n     * @param expirationTime Order expiration time\\n     * @return Whether the parameters were valid\\n     */\\n    function validateParameters(SaleKind saleKind, uint expirationTime)\\n        pure\\n        internal\\n        returns (bool)\\n    {\\n        /* Auctions must have a set expiration date. */\\n        return (saleKind == SaleKind.FixedPrice || expirationTime > 0);\\n    }\\n\\n    /**\\n     * @dev Return whether or not an order can be settled\\n     * @dev Precondition: parameters have passed validateParameters\\n     * @param listingTime Order listing time\\n     * @param expirationTime Order expiration time\\n     */\\n    function canSettleOrder(uint listingTime, uint expirationTime)\\n        view\\n        internal\\n        returns (bool)\\n    {\\n        return (listingTime < now) && (expirationTime == 0 || now < expirationTime);\\n    }\\n\\n    /**\\n     * @dev Calculate the settlement price of an order\\n     * @dev Precondition: parameters have passed validateParameters.\\n     * @param side Order side\\n     * @param saleKind Method of sale\\n     * @param basePrice Order base price\\n     * @param extra Order extra price data\\n     * @param listingTime Order listing time\\n     * @param expirationTime Order expiration time\\n     */\\n    function calculateFinalPrice(Side side, SaleKind saleKind, uint basePrice, uint extra, uint listingTime, uint expirationTime)\\n        view\\n        internal\\n        returns (uint finalPrice)\\n    {\\n        if (saleKind == SaleKind.FixedPrice) {\\n            return basePrice;\\n        } else if (saleKind == SaleKind.DutchAuction) {\\n            uint diff = SafeMath.div(SafeMath.mul(extra, SafeMath.sub(now, listingTime)), SafeMath.sub(expirationTime, listingTime));\\n            if (side == Side.Sell) {\\n                /* Sell-side - start price: basePrice. End price: basePrice - extra. */\\n                return SafeMath.sub(basePrice, diff);\\n            } else {\\n                /* Buy-side - start price: basePrice. End price: basePrice + extra. */\\n                return SafeMath.add(basePrice, diff);\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/TransferNFTManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.26;\\n\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/Ownable.sol\\\";\\n\\n/**\\n * @title TransferManagerERC721\\n * @notice It allows the transfer of ERC721 tokens.\\n */\\ncontract TransferNFTManager is Ownable {\\n    address public OK_EXCHANGE;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _exchange address of the LooksRare exchange\\n     */\\n    constructor(address _exchange) {\\n        OK_EXCHANGE = _exchange;\\n    }\\n\\n\\n    function setExchangeAddr(\\n        address _exchange\\n    ) public onlyOwner {\\n        OK_EXCHANGE = _exchange;\\n    }\\n\\n    function proxy(\\n        address dest,\\n        uint256 howToCall,\\n        bytes calldataValue\\n    ) public returns (bool result) {\\n        require(msg.sender == OK_EXCHANGE, \\\"Transfer: Only OK Exchange\\\");\\n        if (howToCall == 0) {\\n            result = dest.call(calldataValue);\\n        } else if (howToCall == 1) {\\n            result = dest.delegatecall(calldataValue);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Transfer ERC721 token\\n     * @param collection address of the collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @dev For ERC721, amount is not used\\n     */\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) external {\\n        require(msg.sender == OK_EXCHANGE, \\\"Transfer: Only OK Exchange\\\");\\n        // https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom\\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/base/TokenRecipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\n\\ncontract ERC20Basic {\\n    function totalSupply() public view returns (uint256);\\n    function balanceOf(address who) public view returns (uint256);\\n    function transfer(address to, uint256 value) public returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender)\\n    public view returns (uint256);\\n\\n    function transferFrom(address from, address to, uint256 value)\\n    public returns (bool);\\n\\n    function approve(address spender, uint256 value) public returns (bool);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract TokenRecipient {\\n    event ReceivedEther(address indexed sender, uint amount);\\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\\n\\n    /**\\n     * @dev Receive tokens and generate a log event\\n     * @param from Address from which to transfer tokens\\n     * @param value Amount of tokens to transfer\\n     * @param token Address of token\\n     * @param extraData Additional data to log\\n     */\\n    function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\\n        ERC20 t = ERC20(token);\\n        require(t.transferFrom(from, this, value));\\n        emit ReceivedTokens(from, value, token, extraData);\\n    }\\n\\n    /**\\n     * @dev Receive Ether and generate a log event\\n     */\\n    function () payable public {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/offchain/base/Proxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\ncontract Proxy {\\n\\n    /**\\n    * @dev Tells the address of the implementation where every call will be delegated.\\n    * @return address of the implementation to which it will be delegated\\n    */\\n    function implementation() public view returns (address);\\n\\n    /**\\n    * @dev Tells the type of proxy (EIP 897)\\n    * @return Type of proxy, 2 for upgradeable proxy\\n    */\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n\\n    /**\\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\\n    * This function will return whatever the implementation call returns\\n    */\\n    function () payable public {\\n        address _impl = implementation();\\n        require(_impl != address(0));\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize)\\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\\n            let size := returndatasize\\n            returndatacopy(ptr, 0, size)\\n\\n            switch result\\n            case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/offchain/base/ReentrancyGuarded.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\ncontract ReentrancyGuarded {\\n\\n    bool reentrancyLock = false;\\n\\n    /* Prevent a contract function from being reentrant-called. */\\n    modifier reentrancyGuard {\\n        if (reentrancyLock) {\\n            revert();\\n        }\\n        reentrancyLock = true;\\n        _;\\n        reentrancyLock = false;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/offchain/base/ProxyRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nimport \\\"../interfaces/Ownable.sol\\\";\\nimport \\\"./OwnedUpgradeabilityStorage.sol\\\";\\n\\ncontract ProxyRegistry is Ownable {\\n\\n    /* DelegateProxy implementation contract. Must be initialized. */\\n    address public delegateProxyImplementation;\\n\\n    /* Authenticated proxies by user. */\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n\\n    /* Contracts pending access. */\\n    mapping(address => uint) public pending;\\n\\n    /* Contracts allowed to call those proxies. */\\n    mapping(address => bool) public contracts;\\n\\n    /* Delay period for adding an authenticated contract.\\n       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\\n       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\\n       plenty of time to notice and transfer their assets.\\n    */\\n    uint public DELAY_PERIOD = 2 weeks;\\n\\n    /**\\n     * Start the process to enable access for specified contract. Subject to delay period.\\n     *\\n     * @dev ProxyRegistry owner only\\n     * @param addr Address to which to grant permissions\\n     */\\n    function startGrantAuthentication (address addr)\\n    public\\n    onlyOwner\\n    {\\n        require(!contracts[addr] && pending[addr] == 0);\\n        pending[addr] = now;\\n    }\\n\\n    /**\\n     * End the process to nable access for specified contract after delay period has passed.\\n     *\\n     * @dev ProxyRegistry owner only\\n     * @param addr Address to which to grant permissions\\n     */\\n    function endGrantAuthentication (address addr)\\n    public\\n    onlyOwner\\n    {\\n        require(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < now));\\n        pending[addr] = 0;\\n        contracts[addr] = true;\\n    }\\n\\n    /**\\n     * Revoke access for specified contract. Can be done instantly.\\n     *\\n     * @dev ProxyRegistry owner only\\n     * @param addr Address of which to revoke permissions\\n     */\\n    function revokeAuthentication (address addr)\\n    public\\n    onlyOwner\\n    {\\n        contracts[addr] = false;\\n    }\\n\\n    /**\\n     * Register a proxy contract with this registry\\n     *\\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\\n     * @return New AuthenticatedProxy contract\\n     */\\n    function registerProxy()\\n    public\\n    returns (OwnableDelegateProxy proxy)\\n    {\\n        require(proxies[msg.sender] == address(0));\\n        proxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(\\\"initialize(address,address)\\\", msg.sender, address(this)));\\n        proxies[msg.sender] = proxy;\\n        return proxy;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/offchain/base/OwnedUpgradeabilityStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nimport \\\"./Proxy.sol\\\";\\n\\ncontract OwnedUpgradeabilityStorage {\\n\\n    // Current implementation\\n    address internal _implementation;\\n\\n    // Owner of the contract\\n    address private _upgradeabilityOwner;\\n\\n    /**\\n     * @dev Tells the address of the owner\\n     * @return the address of the owner\\n     */\\n    function upgradeabilityOwner() public view returns (address) {\\n        return _upgradeabilityOwner;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the owner\\n     */\\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\\n        _upgradeabilityOwner = newUpgradeabilityOwner;\\n    }\\n\\n    /**\\n    * @dev Tells the address of the current implementation\\n    * @return address of the current implementation\\n    */\\n    function implementation() public view returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n    * @dev Tells the proxy type (EIP 897)\\n    * @return Proxy type, 2 for forwarding proxy\\n    */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return 2;\\n    }\\n}\\n\\n\\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\\n    /**\\n    * @dev Event to show ownership has been transferred\\n    * @param previousOwner representing the address of the previous owner\\n    * @param newOwner representing the address of the new owner\\n    */\\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n    * @dev This event will be emitted every time the implementation gets upgraded\\n    * @param implementation representing the address of the upgraded implementation\\n    */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n    * @dev Upgrades the implementation address\\n    * @param implementation representing the address of the new implementation to be set\\n    */\\n    function _upgradeTo(address implementation) internal {\\n        require(_implementation != implementation);\\n        _implementation = implementation;\\n        emit Upgraded(implementation);\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyProxyOwner() {\\n        require(msg.sender == proxyOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Tells the address of the proxy owner\\n     * @return the address of the proxy owner\\n     */\\n    function proxyOwner() public view returns (address) {\\n        return upgradeabilityOwner();\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\n        require(newOwner != address(0));\\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\n        setUpgradeabilityOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\\n     * @param implementation representing the address of the new implementation to be set.\\n     */\\n    function upgradeTo(address implementation) public onlyProxyOwner {\\n        _upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\\n     * and delegatecall the new implementation for initialization.\\n     * @param implementation representing the address of the new implementation to be set.\\n     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\\n     * signature of the implementation to be called with the needed payload\\n     */\\n    function upgradeToAndCall(address implementation, bytes data) payable public onlyProxyOwner {\\n        upgradeTo(implementation);\\n        require(address(this).delegatecall(data));\\n    }\\n}\\n\\n\\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\\n\\n    constructor(address owner, address initialImplementation, bytes calldata)\\n    public\\n    {\\n        setUpgradeabilityOwner(owner);\\n        _upgradeTo(initialImplementation);\\n        require(initialImplementation.delegatecall(calldata));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/offchain/base/AuthenticatedProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\nimport \\\"./TokenRecipient.sol\\\";\\nimport \\\"./OwnedUpgradeabilityStorage.sol\\\";\\nimport \\\"./ProxyRegistry.sol\\\";\\n\\n\\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\\n\\n    /* Whether initialized. */\\n    bool initialized = false;\\n\\n    /* Address which owns this proxy. */\\n    address public user;\\n\\n    /* Associated registry with contract authentication information. */\\n    ProxyRegistry public registry;\\n\\n    /* Whether access has been revoked. */\\n    bool public revoked;\\n\\n    /* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\\n    enum HowToCall { Call, DelegateCall }\\n\\n    /* Event fired when the proxy access is revoked or unrevoked. */\\n    event Revoked(bool revoked);\\n\\n    /**\\n     * Initialize an AuthenticatedProxy\\n     *\\n     * @param addrUser Address of user on whose behalf this proxy will act\\n     * @param addrRegistry Address of ProxyRegistry contract which will manage this proxy\\n     */\\n    function initialize (address addrUser, ProxyRegistry addrRegistry)\\n    public\\n    {\\n        require(!initialized);\\n        initialized = true;\\n        user = addrUser;\\n        registry = addrRegistry;\\n    }\\n\\n    /**\\n     * Set the revoked flag (allows a user to revoke ProxyRegistry access)\\n     *\\n     * @dev Can be called by the user only\\n     * @param revoke Whether or not to revoke access\\n     */\\n    function setRevoke(bool revoke)\\n    public\\n    {\\n        require(msg.sender == user);\\n        revoked = revoke;\\n        emit Revoked(revoke);\\n    }\\n\\n    /**\\n     * Execute a message call from the proxy contract\\n     *\\n     * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\\n     * @param dest Address to which the call will be sent\\n     * @param howToCall Which kind of call to make\\n     * @param calldata Calldata to send\\n     * @return Result of the call (success or failure)\\n     */\\n    function proxy(address dest, HowToCall howToCall, bytes calldata)\\n    public\\n    returns (bool result)\\n    {\\n        require(msg.sender == user || (!revoked && registry.contracts(msg.sender)));\\n        if (howToCall == HowToCall.Call) {\\n            result = dest.call(calldata);\\n        } else if (howToCall == HowToCall.DelegateCall) {\\n            result = dest.delegatecall(calldata);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * Execute a message call and assert success\\n     *\\n     * @dev Same functionality as `proxy`, just asserts the return value\\n     * @param dest Address to which the call will be sent\\n     * @param howToCall What kind of call to make\\n     * @param calldata Calldata to send\\n     */\\n    function proxyAssert(address dest, HowToCall howToCall, bytes calldata)\\n    public\\n    {\\n        require(proxy(dest, howToCall, calldata));\\n    }\\n\\n}\\n\\ncontract TokenTransferProxy {\\n\\n    /* Authentication registry. */\\n    ProxyRegistry public registry;\\n\\n    /**\\n     * Call ERC20 `transferFrom`\\n     *\\n     * @dev Authenticated contract only\\n     * @param token ERC20 token address\\n     * @param from From address\\n     * @param to To address\\n     * @param amount Transfer amount\\n     */\\n    function transferFrom(address token, address from, address to, uint amount)\\n    public\\n    returns (bool)\\n    {\\n        require(registry.contracts(msg.sender));\\n        return ERC20(token).transferFrom(from, to, amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/offchain/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.4.26;\\n\\n//import \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n\\n        /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.4.26;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/IRoyaltyFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.26;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\"\r\n    },\r\n    \"contracts/offchain/OKRoyaltyFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.26;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/Ownable.sol\\\";\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\nimport \\\"./interfaces/ArrayUtils.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeRegistry\\n * @notice It is a royalty fee registry for the LooksRare exchange.\\n */\\ncontract OKRoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\\n    struct FeeInfo {\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n    }\\n\\n    bytes32 DOMAIN_SEPARATOR;\\n\\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\\n    uint256 public royaltyFeeLimit;\\n\\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\\n\\n    // whitelist to set sale\\n    mapping(address => bool) public whitelist;\\n\\n    event SetWhitelist(address _member, bool _isAdded);\\n\\n    function setWhitelist(address _member, bool _status) external onlyOwner {\\n        whitelist[_member] = _status;\\n        emit SetWhitelist(_member, _status);\\n    }\\n\\n    modifier onlyWhitelist() {\\n        require(whitelist[msg.sender], \\\"the caller isn't in the whitelist\\\");\\n        _;\\n    }\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    //\u8fd9\u91cc\u9700\u8981\u628a\u8981\u7b7e\u540d\u7684\u6570\u636e\u7ed3\u6784\u5316\\n    /* An order on the exchange. */\\n    struct RoyaltyFee {\\n        address collection;\\n        address setter;\\n        address receiver;\\n        uint256 fee;\\n        string nonce;\\n        string lengthStr;\\n        bytes32 hash;\\n    }\\n\\n    function sizeOf(RoyaltyFee memory royaltyFee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return ((0x14 * 4) + (0x20 * 2));\\n    }\\n\\n    function strConcat(string _a, string _b) public pure returns (string) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        string memory ret = new string(_ba.length + _bb.length);\\n        bytes memory bret = bytes(ret);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) bret[k++] = _ba[i];\\n        for (i = 0; i < _bb.length; i++) bret[k++] = _bb[i];\\n        return string(ret);\\n    }\\n\\n    function _toBytes(address a) public pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, a)\\n            )\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function bytesConcat(bytes _a, bytes _b) public pure returns (bytes) {\\n        bytes memory _ba = _a;\\n        bytes memory _bb = _b;\\n        string memory ret = new string(_ba.length + _bb.length);\\n        bytes memory bret = bytes(ret);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) bret[k++] = _ba[i];\\n        for (i = 0; i < _bb.length; i++) bret[k++] = _bb[i];\\n        //return string(ret);\\n        return bret;\\n    }\\n\\n    function toBytes(bytes32 _data) public pure returns (bytes) {\\n        return abi.encodePacked(_data);\\n    }\\n\\n    function toString(address account) public pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes memory data) public pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function toStringNoPre(address account)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toStringNOPre(abi.encodePacked(account));\\n    }\\n\\n    function toStringNOPre(bytes memory data)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(data.length * 2);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[1 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    bytes32 aHash;\\n\\n    event ResultHash(bytes32 rHash);\\n\\n    address serverAddress;\\n\\n    function setServerAddress(address _serverAddress) public onlyWhitelist {\\n        serverAddress = _serverAddress;\\n    }\\n\\n    //\u8fd9\u91cc\u7684v\u7528 \u4e0d\u5e260x\u7684\u5730\u5740 \u957f\u5ea6\u752840\u53ef\u4ee5\u505a\u5230hash\u4e00\u81f4\\n    function updateRoyaltyFeeByThirdParty(RoyaltyFee royaltyFee, Sig sig)\\n        public\\n        returns (bytes32)\\n    {\\n        // Note: we need to use `encodePacked` here instead of `encode`.\\n\\n        //string memory collectionStr = string(abi.encodePacked(collection));\\n        bytes memory a = abi.encodePacked(royaltyFee.collection);\\n        string memory aStr = toStringNOPre(a);\\n\\n        bytes memory b = abi.encodePacked(royaltyFee.setter);\\n        string memory bStr = toStringNOPre(b);\\n\\n        string memory abStr = strConcat(aStr, bStr);\\n\\n        bytes memory c = abi.encodePacked(royaltyFee.receiver);\\n        string memory cStr = toStringNOPre(c);\\n\\n        string memory abcStr = strConcat(abStr, cStr);\\n        string memory abcStrNonce = strConcat(abcStr, royaltyFee.nonce);\\n\\n        aHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                royaltyFee.lengthStr,\\n                abcStrNonce\\n            )\\n        );\\n\\n        require(aHash == royaltyFee.hash, \\\"hash error\\\");\\n        require(\\n            ecrecover(aHash, sig.v, sig.r, sig.s) == serverAddress,\\n            \\\"sign error\\\"\\n        );\\n        //require(cHash == hash,\\\"hash error\\\");\\n        emit ResultHash(aHash);\\n\\n        require(\\n            royaltyFee.fee <= royaltyFeeLimit,\\n            \\\"Registry: Royalty fee too high\\\"\\n        );\\n        _royaltyFeeInfoCollection[royaltyFee.collection] = FeeInfo({\\n            setter: royaltyFee.setter,\\n            receiver: royaltyFee.receiver,\\n            fee: royaltyFee.fee\\n        });\\n\\n        emit RoyaltyFeeUpdate(\\n            royaltyFee.collection,\\n            royaltyFee.setter,\\n            royaltyFee.receiver,\\n            royaltyFee.fee\\n        );\\n\\n        return (aHash);\\n    }\\n\\n    function stringToBytes32(string memory source)\\n        public\\n        constant\\n        returns (bytes32 result)\\n    {\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\\n    event RoyaltyFeeUpdate(\\n        address indexed collection,\\n        address indexed setter,\\n        address indexed receiver,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    constructor(uint256 _royaltyFeeLimit) {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit)\\n        external\\n        onlyWhitelist\\n    {\\n        require(_royaltyFeeLimit <= 9500, \\\"Owner: Royalty fee limit too high\\\");\\n        royaltyFeeLimit = _royaltyFeeLimit;\\n\\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\\n    }\\n\\n    /**\\n     * @notice Update royalty info for collection\\n     * @param collection address of the NFT contract\\n     * @param setter address that sets the receiver\\n     * @param receiver receiver for the royalty fee\\n     * @param fee fee (500 = 5%, 1,000 = 10%)\\n     */\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external onlyWhitelist {\\n        require(fee <= royaltyFeeLimit, \\\"Registry: Royalty fee too high\\\");\\n        _royaltyFeeInfoCollection[collection] = FeeInfo({\\n            setter: setter,\\n            receiver: receiver,\\n            fee: fee\\n        });\\n\\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty info for a collection address and a sale gross amount\\n     * @param collection collection address\\n     * @param amount amount\\n     * @return receiver address and amount received by royalty recipient\\n     */\\n    function royaltyInfo(address collection, uint256 amount)\\n        external\\n        view\\n        returns (address, uint256)\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\\n        );\\n    }\\n\\n    /**\\n     * @notice View royalty info for a collection address\\n     * @param collection collection address\\n     */\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        )\\n    {\\n        return (\\n            _royaltyFeeInfoCollection[collection].setter,\\n            _royaltyFeeInfoCollection[collection].receiver,\\n            _royaltyFeeInfoCollection[collection].fee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n\\n    event OwnershipRenounced(address indexed previousOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipRenounced(owner);\\n        owner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/offchain/interfaces/IRoyaltyFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.26;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n    external\\n    view\\n    returns (\\n        address,\\n        address,\\n        uint256\\n    );\\n}\"\r\n    },\r\n    \"contracts/offchain/interfaces/IERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.26;\\nimport \\\"./IERC165.sol\\\";\\n\\n\\ncontract IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n\\n    function approve(address to, uint256 tokenId) public;\\n\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\"},{\"name\":\"tokenTransferProxyAddress\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"protocolFeeAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferManager\",\"type\":\"address\"}],\"name\":\"setTransferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransferProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"staticCall\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumMakerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"changeMinimumMakerProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumTakerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"changeMinimumTakerProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"array\",\"type\":\"bytes\"},{\"name\":\"desired\",\"type\":\"bytes\"},{\"name\":\"mask\",\"type\":\"bytes\"}],\"name\":\"guardedArrayReplace\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTakerProtocolFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codename\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"setupCopyrightMap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"validateErc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"calculateCurrentPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProtocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyCalldata\",\"type\":\"bytes\"},{\"name\":\"buyReplacementPattern\",\"type\":\"bytes\"},{\"name\":\"sellCalldata\",\"type\":\"bytes\"},{\"name\":\"sellReplacementPattern\",\"type\":\"bytes\"}],\"name\":\"orderCalldataCanMatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"validateOrder_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"extra\",\"type\":\"uint256\"},{\"name\":\"listingTime\",\"type\":\"uint256\"},{\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"name\":\"calculateFinalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"okRoyaltyFeeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"hashOrder_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"}],\"name\":\"ordersCanMatch_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"orderbookInclusionDesired\",\"type\":\"bool\"}],\"name\":\"approveOrder_\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumMakerProtocolFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"hashToSign_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOrFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder_\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"},{\"name\":\"vs\",\"type\":\"uint8[2]\"},{\"name\":\"rssMetadata\",\"type\":\"bytes32[5]\"}],\"name\":\"atomicMatch_\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"validateOrderParameters_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"}],\"name\":\"calculateMatchPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"changeExchangeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"protocolFeeAddress\",\"type\":\"address\"}],\"name\":\"changeCopyrightReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"makerProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takerProtocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"saleKind\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OrderApprovedPartOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howToCall\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calldata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"staticTarget\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extra\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"listingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"salt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderbookInclusionDesired\",\"type\":\"bool\"}],\"name\":\"OrderApprovedPartTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sellHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"OrdersMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "OKOffChainExchange", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}