{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        // load the table into memory\r\n        bytes memory table = TABLE_DECODE;\r\n\r\n        // every 4 characters represent 3 bytes\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            // padding with '='\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            // set the actual output length\r\n            mstore(result, decodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 4 characters at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               // read 4 characters\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               // write 3 bytes\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary Library {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n            \r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n            \r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n            \r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n            \r\n            } lt(dataPtr, endPtr) {\r\n            \r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function parseInt(string memory _a)\r\n        internal\r\n        pure\r\n        returns (uint8 _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint8 mint = 0;\r\n        for (uint8 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint8(uint8(bresult[i])) >= 48) &&\r\n                (uint8(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                mint *= 10;\r\n                mint += uint8(bresult[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n    \r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n}\r\n\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\ninterface IEcoz {}\r\n\r\ncontract JaguarsURI is Ownable {\r\n    IEcoz public ecozContract;\r\n    \r\n    uint256 traitCount = 6;\r\n    uint256 babyTraitCount = 5;\r\n\r\n    uint8 randI = 0;\r\n\r\n    string []Colors;\r\n\r\n    //Encode pixel colors and locations using a 3 digit code per pxiel\r\n    string[] LETTERS;\r\n  \r\n    struct Trait {\r\n        string traitName;\r\n        string traitType;\r\n        string pixels;\r\n        uint256 pixelCount;\r\n    }\r\n\r\n    bool public revealed = false;\r\n\r\n    string[4] Leg;\r\n\r\n    mapping (uint256 => Trait[]) public traitTypes;\r\n    \r\n    mapping (uint256 => Trait[]) public babyTraitTypes;\r\n\r\n    mapping (uint256 => string) jagIDToHash;\r\n\r\n    mapping (uint256 => uint256) traitTypeCount;\r\n    \r\n    mapping (uint256 => uint256) babyTraitTypeCount;\r\n\r\n    function traitGenerator(uint256 thisTraitCount, uint256 traitProbability) internal view returns(uint256) {\r\n        uint256 thisTrait;\r\n\r\n        if (traitProbability >= 8000 && traitProbability < 10000) {//common\r\n            thisTrait = 0;\r\n        }   \r\n        else if (traitProbability >=6000 && traitProbability < 8000) {//common\r\n            if(thisTraitCount < 2) {\r\n                thisTrait = 1 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 1;\r\n            }\r\n        }\r\n        else if (traitProbability >=4750 && traitProbability < 6000) {//uncommon\r\n            if(thisTraitCount < 3) {\r\n                thisTrait = 2 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 2;\r\n            }\r\n        }\r\n        else if (traitProbability >=3500 && traitProbability < 4750) {//uncommon\r\n            if(thisTraitCount < 4) {\r\n                thisTrait = 3 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 3;\r\n            }\r\n            \r\n        }\r\n        else if (traitProbability >=2750 && traitProbability < 3500) {//rare\r\n            if(thisTraitCount < 5) {\r\n                thisTrait = 4 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 4;\r\n            }\r\n        }\r\n        else if (traitProbability >=2000 && traitProbability < 2750) {//rare\r\n            if(thisTraitCount < 6) {\r\n                thisTrait = 5 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 5;\r\n            }\r\n        }\r\n        else if (traitProbability >=1250 && traitProbability < 2000) {//rare\r\n            if(thisTraitCount < 7) {\r\n                thisTrait = 6 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 6;\r\n            }\r\n        }\r\n        else if (traitProbability >=750 && traitProbability < 1250) {//super rare\r\n            if(thisTraitCount < 8) {\r\n                thisTrait = 7 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 7;\r\n            }\r\n        }\r\n        else if (traitProbability >=250 && traitProbability < 750) {//super rare\r\n            if(traitCount < 9) {\r\n                thisTrait = 8 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 8;\r\n            }\r\n        }\r\n        else if (traitProbability >=0 && traitProbability < 250) {//legendary\r\n            if(thisTraitCount < 10) {\r\n                thisTrait = 9 % thisTraitCount;\r\n            }\r\n            else {\r\n                thisTrait = 9;\r\n            }\r\n        }\r\n        return thisTrait;\r\n    }\r\n    \r\n    function jagRandomizer(address user, uint256 jagID) external returns(uint256) {\r\n        require(msg.sender == address(ecozContract));\r\n        uint256 thisTrait;\r\n        if (jagID <= 450 && jagID > 3) {\r\n            uint256 value = 7;\r\n            for (uint256 i = 0; i < traitCount; i++) {\r\n                uint256 rand = random(user, jagID);\r\n                thisTrait = traitGenerator(traitTypeCount[i], rand);\r\n                \r\n                if (i == 0) {\r\n                    jagIDToHash[jagID] = string(abi.encodePacked(jagIDToHash[jagID], Library.toString(thisTrait), Library.toString(thisTrait)));\r\n                    i++;\r\n                }\r\n                else {\r\n                    jagIDToHash[jagID] = string(abi.encodePacked(jagIDToHash[jagID], Library.toString(thisTrait)));\r\n                }\r\n                value = value + thisTrait;\r\n            }\r\n            if (value < 19) {\r\n                return 9;\r\n            }\r\n            else if (value >= 19 && value < 23) {\r\n                return 10;\r\n            }\r\n            else {\r\n                return 11;\r\n            }\r\n        }\r\n        else if (jagID > 450) {\r\n            for (uint256 i = 0; i < babyTraitCount; i++) {\r\n                uint256 rand = random(user, jagID);\r\n                jagIDToHash[jagID] = string(abi.encodePacked(jagIDToHash[jagID], Library.toString(traitGenerator(babyTraitTypeCount[i], rand))));\r\n            }\r\n            return 0;\r\n        }\r\n        else {\r\n            return 11;\r\n        }\r\n    } \r\n\r\n    function random(address user, uint256 jagID) internal returns (uint256) {\r\n        randI = randI + 1;\r\n        \r\n        if (randI >= 10) {\r\n            randI = 0;\r\n        }\r\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, user, jagID, randI))) % 10000;\r\n    }\r\n\r\n    function letterToNumber(string memory _inputLetter) internal view returns (uint8) {\r\n        for (uint8 i = 0; i < LETTERS.length; i++) {   \r\n\r\n            if (keccak256(abi.encodePacked((LETTERS[i]))) ==keccak256(abi.encodePacked((_inputLetter)))) return (i);\r\n        }\r\n        revert();\r\n    }\r\n        \r\n    function letterToColor(string memory _inputLetter) internal view returns (string memory) {\r\n        for (uint8 i = 0; i < LETTERS.length; i++) {\r\n\r\n            if (keccak256(abi.encodePacked((LETTERS[i]))) == keccak256(abi.encodePacked((_inputLetter)))) {\r\n                return Colors[i];\r\n                }\r\n            }\r\n            revert();\r\n    }\r\n\r\n    function jaguarTokenURI(uint256 jagID, uint256 jagWeight) external view virtual returns(string memory) {\r\n        require(msg.sender == address(ecozContract));\r\n\r\n        if (jagID <= 450) {\r\n            string memory metadataString = '{\"trait_type\":\"Species\",\"value\":\"Jaguar\"},';\r\n            string memory svgString;\r\n            bool[32][32] memory placedPixels;\r\n            uint256 count;\r\n            string memory thisPixel;\r\n            string memory thisTrait;\r\n            uint8 thisTraitIndex;\r\n            string memory BGcolor = 'B6EAFF';\r\n\r\n            if (revealed == false && jagID > 3) {\r\n                thisTrait = Leg[3];\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','Status','\",\"value\":\"','Unrevealed''\"}'));\r\n                BGcolor = '6c6c6c';\r\n                count = bytes(Leg[3]).length / 3;\r\n\r\n                for (uint16 j = 0; j < count; j++) {\r\n                    thisPixel = Library.substring(thisTrait, j * 3, j * 3 + 3);\r\n                    uint8 x = letterToNumber(Library.substring(thisPixel, 0, 1));\r\n                    uint8 y = letterToNumber(Library.substring(thisPixel, 1, 2));\r\n            \r\n                    if (placedPixels[x][y]) continue;\r\n            \r\n                    svgString = string(abi.encodePacked(svgString,\"<rect fill='#\",letterToColor(Library.substring(thisPixel, 2, 3)),\"' x='\",Library.toString(x),\"' y='\",Library.toString(y),\"'/>\"));\r\n                    placedPixels[x][y] = true;\r\n                }\r\n\r\n                svgString = string(\r\n                Library.encode(bytes(abi.encodePacked(\r\n                '<svg id=\"ecoz-svg\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 32 32\"> <rect class=\"bg\" x=\"0\" y=\"0\" />',\r\n                svgString,\r\n                '<style>rect.bg{width:32px;height:32px;fill:#',BGcolor,'} rect{width:1px;height:1px;} #ecoz-svg{shape-rendering: crispedges;} </style></svg>'\r\n                )))\r\n                );\r\n\r\n                return string(abi.encodePacked(\r\n                    'data:application/json;base64,',Base64.encode(bytes(abi.encodePacked(\r\n                    '{\"name\":',\r\n                    '\"Jaguar #',\r\n                    Library.toString(jagID),\r\n                    '\", \"description\":\"',\r\n                    \"The Jaguar Ecoz is the Apex Predator of the Ecozystem. No one dare challenge the Jaguar. The only thing that can stop him from thriving in the jungle is starvation...\",\r\n                    '\", \"image\": \"',\r\n                    'data:image/svg+xml;base64,',\r\n                    svgString,'\",',\r\n                     '\"attributes\": [',\r\n                    metadataString,']',\r\n                    '}')))));      \r\n            }     \r\n\r\n            if (jagID == 1) {\r\n                thisTrait = Leg[0];\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','1/1','\",\"value\":\"','Atlantic''\"},','{\"trait_type\":\"','Generation','\",\"value\":\"','Genesis''\"},','{\"trait_type\":\"','Thrive Production','\",\"value\":\"',Library.toString(jagWeight),'\"}'));\r\n                BGcolor = '87de8d';\r\n            }\r\n\r\n            else if (jagID == 2) {\r\n                thisTrait = Leg[1];\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','1/1','\",\"value\":\"','Magma''\"},','{\"trait_type\":\"','Generation','\",\"value\":\"','Genesis''\"},','{\"trait_type\":\"','Thrive Production','\",\"value\":\"',Library.toString(jagWeight),'\"}'));\r\n                BGcolor = 'ef763b';\r\n            }\r\n\r\n            else if (jagID == 3) {\r\n                thisTrait = Leg[2];\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','1/1','\",\"value\":\"','Rambo''\"},','{\"trait_type\":\"','Generation','\",\"value\":\"','Genesis''\"},','{\"trait_type\":\"','Thrive Production','\",\"value\":\"',Library.toString(jagWeight),'\"}'));\r\n                BGcolor = '383862';\r\n            }\r\n            else {\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','Generation','\",\"value\":\"','Genesis''\"},','{\"trait_type\":\"','Thrive Production','\",\"value\":\"',Library.toString(jagWeight),'\"},'));\r\n            }\r\n            \r\n            //Get the metadata from the Traits using the hash\r\n            if (jagID > 3) {\r\n                for (uint256 i = 0; i < traitCount; i++) {\r\n                    if (i != 0) {\r\n                        thisTraitIndex = Library.parseInt(Library.substring(jagIDToHash[jagID], i, i + 1));\r\n                        metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"',traitTypes[i][thisTraitIndex].traitType,'\",\"value\":\"',traitTypes[i][thisTraitIndex].traitName,'\"}'));\r\n                    }\r\n                    if (i != 5 && i != 0) {\r\n                        metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n                    }\r\n                }\r\n            } \r\n            \r\n            //Get the SVG from the Traits using the hash\r\n            for (uint256 i = traitCount-1; i >=0 ; i--) {\r\n                if (jagID > 3) {\r\n                    thisTraitIndex = Library.parseInt(Library.substring(jagIDToHash[jagID], i, i + 1));\r\n                    count = traitTypes[i][thisTraitIndex].pixelCount;\r\n                }\r\n                else {\r\n                    if (jagID == 1) {\r\n                        count = bytes(Leg[0]).length / 3;\r\n                    }\r\n                    else if (jagID == 2) {\r\n                        count = bytes(Leg[1]).length / 3;\r\n                    }\r\n                    else if (jagID == 3) {\r\n                        count = bytes(Leg[2]).length / 3;\r\n                    }\r\n                }\r\n\r\n                for (uint16 j = 0; j < count; j++) {\r\n                    if (jagID < 4) {\r\n                        thisPixel = Library.substring(thisTrait, j * 3, j * 3 + 3);\r\n                    }\r\n                    else {\r\n                        thisPixel = Library.substring(traitTypes[i][thisTraitIndex].pixels, j * 3, j * 3 + 3);\r\n                    }\r\n\r\n                    uint8 x = letterToNumber(Library.substring(thisPixel, 0, 1));\r\n                    uint8 y = letterToNumber(Library.substring(thisPixel, 1, 2));\r\n            \r\n                    if (placedPixels[x][y]) continue;\r\n            \r\n                    svgString = string(abi.encodePacked(svgString,\"<rect fill='#\",letterToColor(Library.substring(thisPixel, 2, 3)),\"' x='\",Library.toString(x),\"' y='\",Library.toString(y),\"'/>\"));\r\n                    placedPixels[x][y] = true;\r\n                }\r\n\r\n                if (i == 0 || jagID < 4) {\r\n                    break;\r\n                }\r\n            }\r\n                \r\n\r\n            svgString = string(\r\n                Library.encode(bytes(abi.encodePacked(\r\n                '<svg id=\"ecoz-svg\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 32 32\"> <rect class=\"bg\" x=\"0\" y=\"0\" />',\r\n                svgString,\r\n                '<style>rect.bg{width:32px;height:32px;fill:#',BGcolor,'} rect{width:1px;height:1px;} #ecoz-svg{shape-rendering: crispedges;} </style></svg>'\r\n                )))\r\n                );\r\n\r\n            return string(abi.encodePacked(\r\n                'data:application/json;base64,',Base64.encode(bytes(abi.encodePacked(\r\n                '{\"name\":',\r\n                '\"Jaguar #',\r\n                Library.toString(jagID),\r\n                '\", \"description\":\"',\r\n                \"The Jaguar Ecoz is the Apex Predator of the Ecozystem. No one dare challenge the Jaguar. The only thing that can stop him from thriving in the jungle is starvation...\",\r\n                '\", \"image\": \"',\r\n                'data:image/svg+xml;base64,',\r\n                svgString,'\",',\r\n                 '\"attributes\": [',\r\n                metadataString,']',\r\n                '}')))));\r\n        }\r\n        else {\r\n            string memory metadataString = '{\"trait_type\":\"Species\",\"value\":\"Jaguar\"},';\r\n            string memory svgString;\r\n            bool[32][32] memory placedPixels;\r\n            uint256 count;\r\n            string memory thisPixel;\r\n            uint8 thisTraitIndex;\r\n            string memory BGcolor = 'B6EAFF';\r\n            metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"','Generation','\",\"value\":\"','Baby''\"},'));\r\n\r\n            //Get the metadata from the Traits using the hash\r\n            for (uint256 i = 0; i < babyTraitCount; i++) {\r\n                thisTraitIndex = Library.parseInt(Library.substring(jagIDToHash[jagID], i, i + 1));\r\n                metadataString = string(abi.encodePacked(metadataString,'{\"trait_type\":\"',babyTraitTypes[i][thisTraitIndex].traitType,'\",\"value\":\"',babyTraitTypes[i][thisTraitIndex].traitName,'\"}'));\r\n                    \r\n                if (i != babyTraitCount-1) {\r\n                    metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n                }\r\n            }\r\n            \r\n            //Get the SVG from the Traits using the hash\r\n            for (uint256 i = babyTraitCount-1; i >=0; i--) {\r\n                thisTraitIndex = Library.parseInt(Library.substring(jagIDToHash[jagID], i, i + 1));\r\n                count = babyTraitTypes[i][thisTraitIndex].pixelCount;\r\n\r\n                for (uint16 j = 0; j < count; j++) {\r\n                    thisPixel = Library.substring(babyTraitTypes[i][thisTraitIndex].pixels, j * 3, j * 3 + 3);\r\n                    uint8 x = letterToNumber(Library.substring(thisPixel, 0, 1));\r\n                    uint8 y = letterToNumber(Library.substring(thisPixel, 1, 2));\r\n\r\n                    if (placedPixels[x][y]) continue;\r\n\r\n                    svgString = string(abi.encodePacked(svgString,\"<rect fill='#\",letterToColor(Library.substring(thisPixel, 2, 3)),\"' x='\",Library.toString(x),\"' y='\",Library.toString(y),\"'/>\"));\r\n                    placedPixels[x][y] = true;\r\n                }\r\n\r\n                if (i == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        \r\n\r\n            svgString = string(\r\n                Library.encode(bytes(abi.encodePacked(\r\n                '<svg id=\"ecoz-svg\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 32 32\"> <rect class=\"bg\" x=\"0\" y=\"0\" />',\r\n                svgString,\r\n                '<style>rect.bg{width:32px;height:32px;fill:#',BGcolor,'} rect{width:1px;height:1px;} #ecoz-svg{shape-rendering: crispedges;} </style></svg>'\r\n                )))\r\n                );\r\n\r\n            return string(abi.encodePacked(\r\n                'data:application/json;base64,',Base64.encode(bytes(abi.encodePacked(\r\n                '{\"name\":',\r\n                '\"Jaguar #',\r\n                Library.toString(jagID),\r\n                '\", \"description\":\"',\r\n                \"The Jaguar Ecoz is the Apex Predator of the Ecozystem. No one dare challenge the Jaguar. The only thing that can stop him from thriving in the jungle is starvation...\",\r\n                '\", \"image\": \"',\r\n                'data:image/svg+xml;base64,',\r\n                svgString,'\",',\r\n                 '\"attributes\": [',\r\n                metadataString,']',\r\n                '}')))));    \r\n        }\r\n    }\r\n\r\n    function setJagLegendary(string memory leg1, string memory leg2, string memory leg3, string memory unrevealed) public onlyOwner {\r\n        Leg[0] = leg1;\r\n        Leg[1] = leg2;\r\n        Leg[2] = leg3;\r\n        Leg[3] = unrevealed;\r\n        return;\r\n    }\r\n    \r\n    function setJagColorsLETTERS(string[87] memory colors, string[87] memory letters) public onlyOwner {\r\n        Colors = colors;\r\n        LETTERS = letters;\r\n        return;\r\n    }\r\n\r\n    function addJagTraitType(uint256 _traitTypeIndex, Trait[] memory traits) public onlyOwner {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            traitTypes[_traitTypeIndex].push(\r\n                Trait(\r\n                    traits[i].traitName,\r\n                    traits[i].traitType,\r\n                    traits[i].pixels,\r\n                    traits[i].pixelCount\r\n                )\r\n            );\r\n        }\r\n        \r\n        traitTypeCount[_traitTypeIndex] = traitTypeCount[_traitTypeIndex] + traits.length;\r\n\r\n        return;\r\n    }\r\n\r\n    function addBabyJagTraitType(uint256 _traitTypeIndex, Trait[] memory traits) public onlyOwner {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            babyTraitTypes[_traitTypeIndex].push(\r\n                Trait(\r\n                    traits[i].traitName,\r\n                    traits[i].traitType,\r\n                    traits[i].pixels,\r\n                    traits[i].pixelCount\r\n                )\r\n            );\r\n        }\r\n        babyTraitTypeCount[_traitTypeIndex] = babyTraitTypeCount[_traitTypeIndex] + traits.length;\r\n\r\n        return;\r\n    }\r\n\r\n    function clearTraitType(uint256 index) public onlyOwner {\r\n        delete traitTypes[index];\r\n        traitTypeCount[index] = 0;\r\n        return;\r\n    }\r\n    function clearBabyTraitType(uint256 index) public onlyOwner {\r\n        delete babyTraitTypes[index];\r\n        babyTraitTypeCount[index] = 0;\r\n        return;\r\n    }\r\n\r\n    function setJagEcoz(address ecozAddress) external onlyOwner {\r\n        ecozContract = IEcoz(ecozAddress);\r\n        return;\r\n    }\r\n\r\n    function reveal() public onlyOwner {\r\n        revealed = true;\r\n        return;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitTypeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"internalType\":\"struct JaguarsURI.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"addBabyJagTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitTypeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"internalType\":\"struct JaguarsURI.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"addJagTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"babyTraitTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"clearBabyTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"clearTraitType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecozContract\",\"outputs\":[{\"internalType\":\"contract IEcoz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jagID\",\"type\":\"uint256\"}],\"name\":\"jagRandomizer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jagID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jagWeight\",\"type\":\"uint256\"}],\"name\":\"jaguarTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[87]\",\"name\":\"colors\",\"type\":\"string[87]\"},{\"internalType\":\"string[87]\",\"name\":\"letters\",\"type\":\"string[87]\"}],\"name\":\"setJagColorsLETTERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecozAddress\",\"type\":\"address\"}],\"name\":\"setJagEcoz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"leg1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"leg2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"leg3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unrevealed\",\"type\":\"string\"}],\"name\":\"setJagLegendary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"traitName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pixels\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pixelCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JaguarsURI", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b46cd1e84ebb6ff7d57ff098ceb5c20cb50277b518f3d4247c771683aaaa8eb"}]}