{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface AnimeVerse {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction basicTransfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract AnimeVerseMigrator {\r\n    address public _owner;\r\n\r\n\tmapping (address => uint256) oldDepositedTokens;\r\n\tmapping (address => bool) vestedClaim;\r\n\tmapping (address => uint256) claimableNewTokens;\r\n\tmapping (address => bool) newTokensClaimed;\r\n\taddress[] private depositedAddresses;\r\n\tuint256 private totalNecessaryTokens;\r\n\tuint256 private totalClaimedTokens;\r\n\tuint256 private totalDepositedTokens;\r\n\r\n\tbool public _1migrationOpen;\r\n\tbool public _2oldTokenDepositComplete;\r\n\tbool public _3newTokenSet;\r\n\tbool public _4claimNewTokensOpen;\r\n\r\n\taddress public oldToken;\r\n\tIERC20 IERC20_OldToken;\r\n\taddress public newToken;\r\n\tAnimeVerse IERC20_NewToken;\r\n\r\n\tuint256 constant public decimals = 9;\r\n\r\n\tuint256 public newTokenLaunchStamp;\r\n\r\n\tbool public vesting = true;\r\n\tuint256 public vestingDelay = 2 weeks;\r\n\tmapping (address => bool) vestedClaimedMarked;\r\n\r\n\tuint256 constant public _MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == msg.sender || _owner == tx.origin || newToken == msg.sender, \"Caller =/= owner or token.\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(address _oldToken) {\r\n\t\t_owner = msg.sender;\r\n\t\toldToken = _oldToken;\r\n\t\tIERC20_OldToken = IERC20(oldToken);\r\n\t}\r\n\r\n\tfunction transferOwner(address newOwner) external onlyOwner {\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n\tfunction _1openMigration() external onlyOwner {\r\n\t\trequire(!_2oldTokenDepositComplete, \"Migration has already been completed.\");\r\n\t\t_1migrationOpen = true;\r\n\t}\r\n\r\n\tfunction setMigrationPausedEnabled(bool enabled) external onlyOwner {\r\n\t\trequire(!_2oldTokenDepositComplete, \"Cannot call after migration is complete.\");\r\n\t\t_1migrationOpen = enabled;\r\n\t}\r\n\r\n\tfunction changeOldToken(address _oldToken) external onlyOwner {\r\n\t\trequire(!_2oldTokenDepositComplete, \"Cannot call after migration is complete.\");\r\n\t\toldToken = _oldToken;\r\n\t\tIERC20_OldToken = IERC20(oldToken);\r\n\t}\r\n\r\n\tfunction _2completeMigration() external onlyOwner {\r\n\t\trequire(_1migrationOpen, \"Migration needs to be open to close it.\");\r\n\t\t_1migrationOpen = false;\r\n\t\t_2oldTokenDepositComplete = true;\r\n\t}\r\n\r\n\tfunction _3setNewToken(address token) external onlyOwner {\r\n\t\trequire(_2oldTokenDepositComplete, \"Migration must first be complete.\");\r\n\t\trequire(!_3newTokenSet, \"New token already set.\");\r\n\t\tnewToken = token;\r\n\t\tIERC20_NewToken = AnimeVerse(token);\r\n\t\t_3newTokenSet = true;\r\n\t}\r\n\r\n\tfunction _4openClaiming() external onlyOwner {\r\n\t\trequire(!_4claimNewTokensOpen, \"Already opened.\");\r\n\t\trequire(_3newTokenSet, \"Must set new token address first.\");\r\n\t\trequire(IERC20_NewToken.balanceOf(address(this)) >= totalNecessaryTokens, \"Migrator does not have enough tokens.\");\r\n\t\t_4claimNewTokensOpen = true;\r\n\t\tnewTokenLaunchStamp = block.timestamp;\r\n\t}\r\n\r\n\tfunction unlockVesting() external onlyOwner {\r\n\t\tvesting = false;\r\n\t\tvestingDelay = 0;\r\n\t}\r\n\r\n\tfunction getClaimableNewTokens(address account) external view returns (uint256) {\r\n\t\treturn(claimableNewTokens[account] / (10**decimals));\r\n\t}\r\n\r\n\tfunction getTotalNecessaryTokens() external view returns (uint256) {\r\n\t\treturn totalNecessaryTokens;\r\n\t}\r\n\r\n\tfunction getTotalDepositedAddresses() external view returns (uint256) {\r\n\t\treturn depositedAddresses.length;\r\n\t}\r\n\r\n\tfunction getTotalDepositedTokens() external view returns (uint256) {\r\n\t\treturn totalDepositedTokens;\r\n\t}\r\n\r\n\tfunction getRemainingVestedTimeInSeconds() public view returns (uint256) {\r\n\t\tuint256 value = newTokenLaunchStamp + vestingDelay;\r\n\t\tif (value > block.timestamp) {\r\n\t\t\treturn value - block.timestamp;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deposit() external {\r\n\t\trequire(_1migrationOpen && !_2oldTokenDepositComplete, \"Migration is closed, unable to deposit.\");\r\n\t\taddress from = msg.sender;\r\n\t\trequire(claimableNewTokens[from] == 0, \"Already deposited, cannot deposit again!\");\r\n\t\tuint256 amountToDeposit;\r\n\t\tamountToDeposit = IERC20_OldToken.balanceOf(from);\r\n\t\tif (amountToDeposit < 1 * 10**decimals) {\r\n\t\t\trevert(\"Must have 1 or more tokens to deposit.\");\r\n\t\t}\r\n\t\tamountToDeposit /= 10**decimals;\r\n\t\tamountToDeposit *= 10**decimals;\r\n\t\trequire(IERC20_OldToken.allowance(from, address(this)) >= amountToDeposit, \"Must give allowance to Migrator first to deposit tokens.\");\r\n\t\tuint256 previousBalance = IERC20_OldToken.balanceOf(address(this));\r\n\t\tIERC20_OldToken.transferFrom(from, address(this), amountToDeposit);\r\n\t\tuint256 newBalance = IERC20_OldToken.balanceOf(address(this));\r\n\t\tuint256 amountDeposited = newBalance - previousBalance;\r\n\t\ttotalDepositedTokens += amountDeposited;\r\n\t\tif (amountDeposited > 15_000_000_000_000_000 * (10**decimals)) {\r\n\t\t\tvestedClaim[from] = true;\r\n\t\t\tamountDeposited = 15_000_000_000_000_000 * (10**decimals);\r\n\t\t} else if (amountDeposited > 10_000_000_000_000_000 * (10**decimals)) {\r\n\t\t\tvestedClaim[from] = true;\r\n\t\t}\r\n\t\tuint256 claimableTokens = amountDeposited / (10**6);\r\n\t\tclaimableNewTokens[from] = claimableTokens;\r\n\t\tdepositedAddresses.push(from);\r\n\t\ttotalNecessaryTokens += claimableTokens;\r\n\t}\r\n\r\n\tfunction claimNewTokens() external {\r\n\t\taddress to = msg.sender;\r\n\t\tuint256 amount = claimableNewTokens[to];\r\n\t\trequire(_4claimNewTokensOpen, \"New tokens not yet available to withdraw.\");\r\n\t\trequire(amount > 0, \"There are no new tokens for you to claim.\");\r\n\t\tif (vestedClaimedMarked[to]) {\r\n\t\t\trequire(getRemainingVestedTimeInSeconds() == 0, \"You may not claim your vested amount yet.\");\r\n\t\t}\r\n\t\twithdrawNewTokens(to, amount);\r\n\t}\r\n\r\n\tfunction withdrawNewTokens(address to, uint256 amount) internal {\r\n\t\tif(vesting) {\r\n\t\t\tif(vestedClaim[to]) {\r\n\t\t\t\tif (vestedClaimedMarked[to] && getRemainingVestedTimeInSeconds() == 0) {\r\n\t\t\t\t\ttokenTransfer(to, amount);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (!vestedClaimedMarked[to]) {\r\n\t\t\t\t\ttokenTransfer(to, 10_000_000_000 * (10**decimals));\r\n\t\t\t\t\tvestedClaimedMarked[to] = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttokenTransfer(to, amount);\r\n\t}\r\n\r\n\tfunction tokenTransfer(address to, uint256 amount) internal {\r\n\t\tif (amount > 0) {\r\n\t\t\tclaimableNewTokens[to] -= amount;\r\n\t\t\tIERC20_NewToken.basicTransfer(to, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tuint256 public currentIndex = 0;\r\n\r\n\tfunction forceClaimTokens(uint256 iterations) external {\r\n\t\tuint256 claimIndex;\r\n\t\tuint256 _currentIndex = currentIndex;\r\n\t\tuint256 length = depositedAddresses.length;\r\n\t\trequire(_currentIndex < length, \"All addresses force-claimed.\");\r\n\t\twhile(claimIndex < iterations && _currentIndex < length) {\r\n\t\t\taddress to = depositedAddresses[_currentIndex];\r\n\t\t\tuint256 amount = claimableNewTokens[depositedAddresses[_currentIndex]];\r\n\t\t\twithdrawNewTokens(to, amount);\r\n\t\t\tclaimIndex++;\r\n\t\t\t_currentIndex++;\r\n\t\t}\r\n\t\tcurrentIndex = _currentIndex;\r\n\t}\r\n\r\n\tfunction resetForceClaim() external {\r\n\t\trequire(getRemainingVestedTimeInSeconds() == 0, \"Cannot reset until vesting period is over.\");\r\n\t\tcurrentIndex = 0;\r\n\t}\r\n\r\n\tfunction withdrawOldTokens(address account, uint256 amount) external onlyOwner {\r\n\t\trequire(_2oldTokenDepositComplete, \"Old migration must be complete and locked.\");\r\n\t\tif (amount == 999) {\r\n\t\t\tamount = IERC20_OldToken.balanceOf(address(this));\r\n\t\t} else {\r\n\t\t\tamount *= (10**decimals);\r\n\t\t}\r\n\t\tIERC20_OldToken.transfer(account, amount);\r\n\t}\r\n\r\n\tfunction sellOldTokens(address account, address router, bool _max) external onlyOwner {\r\n\t\trequire(_2oldTokenDepositComplete, \"Old migration must be complete and locked.\");\r\n\t\tuint256 max = 49_000_000_000_000_000 * 10**9;\r\n\t\tuint256 amount;\r\n\t\tIRouter02 dexRouter = IRouter02(router);\r\n\t\tIERC20_OldToken.approve(router, type(uint256).max);\r\n\t\tif(IERC20_OldToken.balanceOf(address(this)) > max && _max) {\r\n\t\t\tamount = max;\r\n\t\t} else {\r\n\t\t\tamount = IERC20_OldToken.balanceOf(address(this));\r\n\t\t}\r\n        address[] memory path = new address[](2);\r\n        path[0] = oldToken;\r\n        path[1] = dexRouter.WETH();\r\n\r\n\t\tdexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            account,\r\n            block.timestamp\r\n        );\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_1migrationOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_1openMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2completeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2oldTokenDepositComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_3newTokenSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_3setNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_4claimNewTokensOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_4openClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"}],\"name\":\"changeOldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"}],\"name\":\"forceClaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableNewTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingVestedTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNecessaryTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTokenLaunchStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetForceClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_max\",\"type\":\"bool\"}],\"name\":\"sellOldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMigrationPausedEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnimeVerseMigrator", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "00000000000000000000000030f28b7859cb7f7a1439b1a35414c04f761e8f32", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fbd0ac16d7ca8ac3de715d135bf27de3a914731404e24d4206bac088d253bd28"}]}