{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"./interfaces/IRestrictedIndexPool.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\n\\ncontract UniBurn {\\n  using SafeMath for uint256;\\n  using TransferHelper for address;\\n\\n  IERC20 public constant defi5LP =\\n    IERC20(0x8dCBa0B75c1038c4BaBBdc0Ff3bD9a8f6979Dd13);\\n  IERC20 public constant cc10LP =\\n    IERC20(0x2701eA55b8B4f0FE46C15a0F560e9cf0C430f833);\\n  IERC20 public constant fffLP =\\n    IERC20(0x9A60F0A46C1485D4BDA7750AdB0dB1b17Aa48A33);\\n  IWETH public constant weth =\\n    IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n  IRestrictedIndexPool public constant defi5 =\\n    IRestrictedIndexPool(0xfa6de2697D59E88Ed7Fc4dFE5A33daC43565ea41);\\n  IRestrictedIndexPool public constant cc10 =\\n    IRestrictedIndexPool(0x17aC188e09A7890a1844E5E65471fE8b0CcFadF3);\\n  IRestrictedIndexPool public constant fff =\\n    IRestrictedIndexPool(0xaBAfA52D3d5A2c18A4C1Ae24480D22B831fC0413);\\n\\n  struct PoolData {\\n    uint96 supply;\\n    uint72 ethBalance;\\n    uint88 poolBalance;\\n  }\\n\\n  PoolData public fffData =\\n    PoolData(\\n      uint96(133274619446277226138),\\n      uint72(11392283886319598494),\\n      uint88(1664883434767400933503)\\n    );\\n\\n  PoolData public defi5Data =\\n    PoolData(\\n      uint96(205228556349547851201),\\n      uint72(5759526907677680378),\\n      uint88(8924373539359521982012)\\n    );\\n\\n  PoolData public cc10Data =\\n    PoolData(\\n      uint96(993232546416253583380),\\n      uint72(25711183462534811),\\n      uint88(74090838958998997067316924)\\n    );\\n\\n  function _redeem(\\n    IRestrictedIndexPool pool,\\n    IERC20 pair,\\n    PoolData storage info\\n  ) internal {\\n    uint256 lpBalance = pair.balanceOf(msg.sender);\\n    require(lpBalance > 0, \\\"ERR_NULL_AMOUNT\\\");\\n    address(pair).safeTransferFrom(msg.sender, address(0), lpBalance);\\n\\n    uint256 supply = uint256(info.supply);\\n    uint256 ethBalance = uint256(info.ethBalance);\\n    uint256 poolBalance = uint256(info.poolBalance);\\n\\n    uint256 ethValue = ethBalance.mul(lpBalance) / supply;\\n    uint256 poolValue = poolBalance.mul(lpBalance) / supply;\\n\\n    // We don't need to do a safe cast because safemath prevents\\n    // overflow and the original values are within size range\\n    info.ethBalance = uint72(ethBalance.sub(ethValue));\\n    info.poolBalance = uint88(poolBalance.sub(poolValue));\\n    info.supply = uint96(supply.sub(lpBalance));\\n\\n    pool.exitPoolTo(msg.sender, poolValue);\\n    address(msg.sender).safeTransferETH(ethValue);\\n  }\\n\\n  receive() external payable {}\\n\\n  function burnWETH() external {\\n    weth.withdraw(weth.balanceOf(address(this)));\\n  }\\n\\n  function redeemFFFLP() external {\\n    _redeem(fff, fffLP, fffData);\\n  }\\n\\n  function redeemDEFI5LP() external {\\n    _redeem(defi5, defi5LP, defi5Data);\\n  }\\n\\n  function redeemCC10LP() external {\\n    _redeem(cc10, cc10LP, cc10Data);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRestrictedIndexPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRestrictedIndexPool is IERC20 {\\n  event LOG_EXIT(\\n    address indexed caller,\\n    address indexed tokenOut,\\n    uint256 tokenAmountOut\\n  );\\n\\n  struct Record {\\n    bool bound;\\n    bool ready;\\n    uint40 lastDenormUpdate;\\n    uint96 denorm;\\n    uint96 desiredDenorm;\\n    uint8 index;\\n    uint256 balance;\\n  }\\n\\n  function initialize(address _lpBurn, address _pair) external;\\n\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n    external;\\n\\n  function exitPoolTo(address to, uint256 poolAmountIn) external;\\n\\n  function redeemAll() external;\\n\\n  function isPublicSwap() external view returns (bool);\\n\\n  function getSwapFee()\\n    external\\n    view\\n    returns (\\n      uint256 /* swapFee */\\n    );\\n\\n  function getExitFee()\\n    external\\n    view\\n    returns (\\n      uint256 /* exitFee */\\n    );\\n\\n  function getController() external view returns (address);\\n\\n  function getExitFeeRecipient() external view returns (address);\\n\\n  function isBound(address t) external view returns (bool);\\n\\n  function getNumTokens() external view returns (uint256);\\n\\n  function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n  function getCurrentDesiredTokens()\\n    external\\n    view\\n    returns (address[] memory tokens);\\n\\n  function getDenormalizedWeight(address token)\\n    external\\n    view\\n    returns (\\n      uint256 /* denorm */\\n    );\\n\\n  function getTokenRecord(address token)\\n    external\\n    view\\n    returns (Record memory record);\\n\\n  function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n  function getBalance(address token) external view returns (uint256);\\n\\n  function getUsedBalance(address token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash cfedb1f55864dcf8cc0831fdd8ec18eb045b7fd1.\\n\\nSubject to the MIT license\\n*************************************************************************************************/\\n\\nlibrary TransferHelper {\\n  function safeApproveMax(address token, address to) internal {\\n    safeApprove(token, to, type(uint256).max);\\n  }\\n\\n  function safeUnapprove(address token, address to) internal {\\n    safeApprove(token, to, 0);\\n  }\\n\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) =\\n      token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:SA\\\");\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) =\\n      token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:ST\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) =\\n      token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TH:STF\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{ value: value }(\\\"\\\");\\n    require(success, \\\"TH:STE\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IERC20 {\\n  event Approval(address indexed src, address indexed dst, uint256 amt);\\n  event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function name() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"burnWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10\",\"outputs\":[{\"internalType\":\"contract IRestrictedIndexPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10Data\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"supply\",\"type\":\"uint96\"},{\"internalType\":\"uint72\",\"name\":\"ethBalance\",\"type\":\"uint72\"},{\"internalType\":\"uint88\",\"name\":\"poolBalance\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10LP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi5\",\"outputs\":[{\"internalType\":\"contract IRestrictedIndexPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi5Data\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"supply\",\"type\":\"uint96\"},{\"internalType\":\"uint72\",\"name\":\"ethBalance\",\"type\":\"uint72\"},{\"internalType\":\"uint88\",\"name\":\"poolBalance\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi5LP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fff\",\"outputs\":[{\"internalType\":\"contract IRestrictedIndexPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fffData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"supply\",\"type\":\"uint96\"},{\"internalType\":\"uint72\",\"name\":\"ethBalance\",\"type\":\"uint72\"},{\"internalType\":\"uint88\",\"name\":\"poolBalance\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fffLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemCC10LP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemDEFI5LP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFFFLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniBurn", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}