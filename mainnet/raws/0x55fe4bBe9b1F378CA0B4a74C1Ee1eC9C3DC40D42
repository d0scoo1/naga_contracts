{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface Booster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n    function poolInfo(uint256) external view returns (address,address,address,address,address, bool);\\n\\n    // deposit lp tokens and stake\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns (bool);\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ICurveFi {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 token_amount, int128 i, uint256 min_amount) external;\\n\\n    function remove_liquidity_one_coin(address pool, uint256 token_amount, int128 i, uint256 min_amount) external;\\n\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    // crv.finance: Curve.fi Factory USD Metapool v2\\n    function add_liquidity(\\n        address pool,\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function calc_token_amount(\\n        uint256[3] calldata tokens,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata tokens,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    // 3Crv Metapools\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(address pool, uint256 token_amount, int128 i) external view returns (uint256);\\n\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function balances(int128) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int128 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface Rewards{\\n    function pid() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n    function extraRewards(uint256) external view returns (address);\\n    function rewardPerToken() external view returns (uint256);\\n    function rewardPerTokenStored() external view returns (uint256);\\n    function rewardRate() external view returns (uint256);\\n    function rewardToken() external view returns (address);\\n    function rewards(address) external view returns (uint256);\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function queueNewRewards(uint256 _rewards) external returns (bool);\\n\\n    function stake(uint256) external returns (bool);\\n    function stakeAll() external returns (bool);\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n    function withdrawAll(bool claim) external returns (bool);\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUni.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface Uni {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n    /* Uniswap V3 */\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    function quoteExactInput(\\n        bytes calldata path,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IVaultBasic.sol\\\";\\n\\n\\ninterface IVault is IVaultBasic {\\n    enum ApproveStatus { NotRequired, Required, Approved, Rejected }\\n\\n    struct StrategyParams {\\n        uint256 performanceFee;\\n        uint256 activation;\\n        uint256 debtRatio;\\n        uint256 minDebtPerHarvest;\\n        uint256 maxDebtPerHarvest;\\n        uint256 lastReport;\\n        uint256 totalDebt;\\n        uint256 totalGain;\\n        uint256 totalSkim;\\n        uint256 totalLoss;\\n        address rewardsManager;\\n        EverscaleAddress rewards;\\n    }\\n\\n    struct PendingWithdrawalParams {\\n        uint256 amount;\\n        uint256 bounty;\\n        uint256 timestamp;\\n        ApproveStatus approveStatus;\\n    }\\n\\n    struct PendingWithdrawalId {\\n        address recipient;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawalPeriodParams {\\n        uint256 total;\\n        uint256 considered;\\n    }\\n\\n    function initialize(\\n        address _token,\\n        address _bridge,\\n        address _governance,\\n        uint _targetDecimals,\\n        EverscaleAddress memory _rewards\\n    ) external;\\n\\n    function withdrawGuardian() external view returns (address);\\n\\n    function pendingWithdrawalsPerUser(address user) external view returns (uint);\\n    function pendingWithdrawals(\\n        address user,\\n        uint id\\n    ) external view returns (PendingWithdrawalParams memory);\\n    function pendingWithdrawalsTotal() external view returns (uint);\\n\\n    function managementFee() external view returns (uint256);\\n    function performanceFee() external view returns (uint256);\\n\\n    function strategies(\\n        address strategyId\\n    ) external view returns (StrategyParams memory);\\n    function withdrawalQueue() external view returns (address[20] memory);\\n\\n    function withdrawLimitPerPeriod() external view returns (uint256);\\n    function undeclaredWithdrawLimit() external view returns (uint256);\\n    function withdrawalPeriods(\\n        uint256 withdrawalPeriodId\\n    ) external view returns (WithdrawalPeriodParams memory);\\n\\n    function depositLimit() external view returns (uint256);\\n    function debtRatio() external view returns (uint256);\\n    function totalDebt() external view returns (uint256);\\n    function lastReport() external view returns (uint256);\\n    function lockedProfit() external view returns (uint256);\\n    function lockedProfitDegradation() external view returns (uint256);\\n\\n    function setWithdrawGuardian(address _withdrawGuardian) external;\\n    function setStrategyRewards(\\n        address strategyId,\\n        EverscaleAddress memory _rewards\\n    ) external;\\n    function setLockedProfitDegradation(uint256 degradation) external;\\n    function setDepositLimit(uint256 limit) external;\\n    function setPerformanceFee(uint256 fee) external;\\n    function setManagementFee(uint256 fee) external;\\n    function setWithdrawLimitPerPeriod(uint256 _withdrawLimitPerPeriod) external;\\n    function setUndeclaredWithdrawLimit(uint256 _undeclaredWithdrawLimit) external;\\n    function setWithdrawalQueue(address[20] memory queue) external;\\n    function setPendingWithdrawalBounty(uint256 id, uint256 bounty) external;\\n\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256 amount,\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    ) external;\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256[] memory amount,\\n        PendingWithdrawalId[] memory pendingWithdrawalId\\n    ) external;\\n    function depositToFactory(\\n        uint128 amount,\\n        int8 wid,\\n        uint256 user,\\n        uint256 creditor,\\n        uint256 recipient,\\n        uint128 tokenAmount,\\n        uint128 tonAmount,\\n        uint8 swapType,\\n        uint128 slippageNumerator,\\n        uint128 slippageDenominator,\\n        bytes memory level3\\n    ) external;\\n\\n    function saveWithdraw(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external returns (\\n        bool instantWithdrawal,\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    );\\n\\n    function saveWithdraw(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        EverscaleAddress memory recipient,\\n        uint bounty\\n    ) external;\\n\\n    function withdraw(\\n        uint256 id,\\n        uint256 amountRequested,\\n        address recipient,\\n        uint256 maxLoss,\\n        uint bounty\\n    ) external returns(uint256);\\n\\n    function addStrategy(\\n        address strategyId,\\n        uint256 _debtRatio,\\n        uint256 minDebtPerHarvest,\\n        uint256 maxDebtPerHarvest,\\n        uint256 _performanceFee\\n    ) external;\\n\\n    function updateStrategyDebtRatio(\\n        address strategyId,\\n        uint256 _debtRatio\\n    )  external;\\n\\n    function updateStrategyMinDebtPerHarvest(\\n        address strategyId,\\n        uint256 minDebtPerHarvest\\n    ) external;\\n\\n    function updateStrategyMaxDebtPerHarvest(\\n        address strategyId,\\n        uint256 maxDebtPerHarvest\\n    ) external;\\n\\n    function updateStrategyPerformanceFee(\\n        address strategyId,\\n        uint256 _performanceFee\\n    ) external;\\n\\n    function migrateStrategy(\\n        address oldVersion,\\n        address newVersion\\n    ) external;\\n\\n    function revokeStrategy(\\n        address strategyId\\n    ) external;\\n    function revokeStrategy() external;\\n\\n\\n    function totalAssets() external view returns (uint256);\\n    function debtOutstanding(address strategyId) external view returns (uint256);\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function creditAvailable(address strategyId) external view returns (uint256);\\n    function creditAvailable() external view returns (uint256);\\n\\n    function availableDepositLimit() external view returns (uint256);\\n    function expectedReturn(address strategyId) external view returns (uint256);\\n\\n    function report(\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    function skim(address strategyId) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    ) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalId\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external;\\n\\n\\n    event PendingWithdrawalUpdateBounty(address recipient, uint256 id, uint256 bounty);\\n    event PendingWithdrawalCancel(address recipient, uint256 id, uint256 amount);\\n    event PendingWithdrawalForce(address recipient, uint256 id);\\n    event PendingWithdrawalCreated(\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes32 payloadId\\n    );\\n    event PendingWithdrawalWithdraw(\\n        address recipient,\\n        uint256 id,\\n        uint256 requestedAmount,\\n        uint256 redeemedAmount\\n    );\\n    event PendingWithdrawalUpdateApproveStatus(\\n        address recipient,\\n        uint256 id,\\n        ApproveStatus approveStatus\\n    );\\n\\n    event UpdateWithdrawLimitPerPeriod(uint256 withdrawLimitPerPeriod);\\n    event UpdateUndeclaredWithdrawLimit(uint256 undeclaredWithdrawLimit);\\n    event UpdateDepositLimit(uint256 depositLimit);\\n\\n    event UpdatePerformanceFee(uint256 performanceFee);\\n    event UpdateManagementFee(uint256 managenentFee);\\n\\n    event UpdateWithdrawGuardian(address withdrawGuardian);\\n    event UpdateWithdrawalQueue(address[20] queue);\\n\\n    event StrategyUpdateDebtRatio(address indexed strategy, uint256 debtRatio);\\n    event StrategyUpdateMinDebtPerHarvest(address indexed strategy, uint256 minDebtPerHarvest);\\n    event StrategyUpdateMaxDebtPerHarvest(address indexed strategy, uint256 maxDebtPerHarvest);\\n    event StrategyUpdatePerformanceFee(address indexed strategy, uint256 performanceFee);\\n    event StrategyMigrated(address indexed oldVersion, address indexed newVersion);\\n    event StrategyRevoked(address indexed strategy);\\n    event StrategyRemovedFromQueue(address indexed strategy);\\n    event StrategyAddedToQueue(address indexed strategy);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPaid,\\n        uint256 totalGain,\\n        uint256 totalSkim,\\n        uint256 totalLoss,\\n        uint256 totalDebt,\\n        uint256 debtAdded,\\n        uint256 debtRatio\\n    );\\n\\n    event StrategyAdded(\\n        address indexed strategy,\\n        uint256 debtRatio,\\n        uint256 minDebtPerHarvest,\\n        uint256 maxDebtPerHarvest,\\n        uint256 performanceFee\\n    );\\n    event StrategyUpdateRewards(\\n        address strategyId,\\n        int128 wid,\\n        uint256 addr\\n    );\\n    event UserDeposit(\\n        address sender,\\n        int128 recipientWid,\\n        uint256 recipientAddr,\\n        uint256 amount,\\n        address withdrawalRecipient,\\n        uint256 withdrawalId,\\n        uint256 bounty\\n    );\\n    event FactoryDeposit(\\n        uint128 amount,\\n        int8 wid,\\n        uint256 user,\\n        uint256 creditor,\\n        uint256 recipient,\\n        uint128 tokenAmount,\\n        uint128 tonAmount,\\n        uint8 swapType,\\n        uint128 slippageNumerator,\\n        uint128 slippageDenominator,\\n        bytes1 separator,\\n        bytes level3\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IVaultBasic is IEverscale {\\n    struct WithdrawalParams {\\n        EverscaleAddress sender;\\n        uint256 amount;\\n        address recipient;\\n        uint32 chainId;\\n    }\\n\\n    function bridge() external view returns (address);\\n    function configuration() external view returns (EverscaleAddress memory);\\n    function withdrawalIds(bytes32) external view returns (bool);\\n    function rewards() external view returns (EverscaleAddress memory);\\n\\n    function governance() external view returns (address);\\n    function guardian() external view returns (address);\\n    function management() external view returns (address);\\n\\n    function token() external view returns (address);\\n    function targetDecimals() external view returns (uint256);\\n    function tokenDecimals() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n    function withdrawFee() external view returns (uint256);\\n\\n    function emergencyShutdown() external view returns (bool);\\n\\n    function apiVersion() external view returns (string memory api_version);\\n\\n    function setDepositFee(uint _depositFee) external;\\n    function setWithdrawFee(uint _withdrawFee) external;\\n\\n    function setConfiguration(EverscaleAddress memory _configuration) external;\\n    function setGovernance(address _governance) external;\\n    function acceptGovernance() external;\\n    function setGuardian(address _guardian) external;\\n    function setManagement(address _management) external;\\n    function setRewards(EverscaleAddress memory _rewards) external;\\n    function setEmergencyShutdown(bool active) external;\\n\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function decodeWithdrawalEventData(\\n        bytes memory eventData\\n    ) external view returns(WithdrawalParams memory);\\n\\n    function sweep(address _token) external;\\n\\n    // Events\\n    event Deposit(\\n        uint256 amount,\\n        int128 wid,\\n        uint256 addr\\n    );\\n\\n    event InstantWithdrawal(\\n        bytes32 payloadId,\\n        address recipient,\\n        uint256 amount\\n    );\\n\\n    event UpdateBridge(address bridge);\\n    event UpdateConfiguration(int128 wid, uint256 addr);\\n    event UpdateTargetDecimals(uint256 targetDecimals);\\n    event UpdateRewards(int128 wid, uint256 addr);\\n\\n    event UpdateDepositFee(uint256 fee);\\n    event UpdateWithdrawFee(uint256 fee);\\n\\n    event UpdateGovernance(address governance);\\n    event UpdateManagement(address management);\\n    event NewPendingGovernance(address governance);\\n    event UpdateGuardian(address guardian);\\n\\n    event EmergencyShutdown(bool active);\\n}\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IBooster.sol\\\";\\nimport \\\"../interfaces/ICurveFi.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IUni.sol\\\";\\nimport \\\"../interfaces/vault/IVault.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n\\n\\nabstract contract BaseStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    string public metadataURI;\\n\\n    /**\\n     * @notice\\n     *  Used to track which version of `StrategyAPI` this Strategy\\n     *  implements.\\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\\n     * @return A string which holds the current API version of this contract.\\n     */\\n    function apiVersion() public pure returns (string memory) {\\n        return \\\"0.1.7\\\";\\n    }\\n\\n    /**\\n     * @notice This Strategy's name.\\n     * @dev\\n     *  You can use this field to manage the \\\"version\\\" of this Strategy, e.g.\\n     *  `StrategySomethingOrOtherV1`. However, \\\"API Version\\\" is managed by\\n     *  `apiVersion()` function above.\\n     * @return This Strategy's name.\\n     */\\n    function name() external virtual view returns (string memory);\\n\\n    /**\\n     * @notice\\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\\n     *  towards Yearn's TVL calculations.\\n     * @dev\\n     *  You can override this field to set it to a non-zero value if some of the assets of this\\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\\n     *  Note that this value must be strictly less than or equal to the amount provided by\\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\\n     *  Also note that this value is used to determine the total assets under management by this\\n     *  strategy, for the purposes of computing the management fee in `Vault`\\n     * @return\\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\\n     *  Locked (TVL) calculation across it's ecosystem.\\n     */\\n    function delegatedAssets() external virtual view returns (uint256) {\\n        return 0;\\n    }\\n\\n    IVault public vault;\\n    address public strategist;\\n    address public keeper;\\n\\n    IERC20Upgradeable public want;\\n\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedStrategist(address newStrategist);\\n\\n    event UpdatedKeeper(address newKeeper);\\n\\n    event UpdatedMinReportDelay(uint256 delay);\\n\\n    event UpdatedMaxReportDelay(uint256 delay);\\n\\n    event UpdatedProfitFactor(uint256 profitFactor);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event EmergencyExitEnabled();\\n\\n    event UpdatedMetadataURI(string metadataURI);\\n\\n    // The minimum number of seconds between harvest calls. See\\n    // `setMinReportDelay()` for more details.\\n    uint256 public minReportDelay;\\n\\n    // The maximum number of seconds between harvest calls. See\\n    // `setMaxReportDelay()` for more details.\\n    uint256 public maxReportDelay;\\n\\n    // The minimum multiple that `callCost` must be above the credit/profit to\\n    // be \\\"justifiable\\\". See `setProfitFactor()` for more details.\\n    uint256 public profitFactor;\\n\\n    // Use this to adjust the threshold at which running a debt causes a\\n    // harvest trigger. See `setDebtThreshold()` for more details.\\n    uint256 public debtThreshold;\\n\\n    // See note on `setEmergencyExit()`.\\n    bool public emergencyExit;\\n\\n    // modifiers\\n    modifier onlyAuthorized() {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeepers() {\\n        require(\\n            msg.sender == keeper ||\\n            msg.sender == strategist ||\\n            msg.sender == governance() ||\\n            msg.sender == vault.guardian() ||\\n            msg.sender == vault.management(),\\n            \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Initializes the Strategy, this is called only once, when the\\n     *  contract is deployed.\\n     * @dev `_vault` should implement `VaultAPI`.\\n     * @param _vault The address of the Vault responsible for this Strategy.\\n     */\\n    function _initialize(\\n        address _vault\\n    ) internal virtual {\\n        require(address(want) == address(0), \\\"Strategy already initialized\\\");\\n\\n        vault = IVault(_vault);\\n        want = IERC20Upgradeable(vault.token());\\n        want.safeApprove(_vault, type(uint256).max); // Give Vault unlimited access (might save gas)\\n        strategist = vault.governance();\\n        keeper = strategist;\\n\\n        // initialize variables\\n        minReportDelay = 0;\\n        maxReportDelay = 86400;\\n        profitFactor = 100;\\n        debtThreshold = 0;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `strategist`.\\n     *\\n     *  This may only be called by governance or the existing strategist.\\n     * @param _strategist The new address to assign as `strategist`.\\n     */\\n    function setStrategist(address _strategist) external onlyAuthorized {\\n        require(_strategist != address(0));\\n        strategist = _strategist;\\n        emit UpdatedStrategist(_strategist);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `keeper`.\\n     *\\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\\n     *  other than `governance()` or `strategist`. However, unlike\\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\\n     *  and `harvest()`, and no other authorized functions, following the\\n     *  principle of least privilege.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _keeper The new address to assign as `keeper`.\\n     */\\n    function setKeeper(address _keeper) external onlyAuthorized {\\n        require(_keeper != address(0));\\n        keeper = _keeper;\\n        emit UpdatedKeeper(_keeper);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\\n     *  of blocks that should pass for `harvest()` to be called.\\n     *\\n     *  For external keepers (such as the Keep3r network), this is the minimum\\n     *  time between jobs to wait. (see `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _delay The minimum number of seconds to wait between harvests.\\n     */\\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\\n        minReportDelay = _delay;\\n        emit UpdatedMinReportDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\\n     *  of blocks that should pass for `harvest()` to be called.\\n     *\\n     *  For external keepers (such as the Keep3r network), this is the maximum\\n     *  time between jobs to wait. (see `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _delay The maximum number of seconds to wait between harvests.\\n     */\\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\\n        maxReportDelay = _delay;\\n        emit UpdatedMaxReportDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _profitFactor A ratio to multiply anticipated\\n     * `harvest()` gas cost against.\\n     */\\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\\n        profitFactor = _profitFactor;\\n        emit UpdatedProfitFactor(_profitFactor);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Sets how far the Strategy can go into loss without a harvest and report\\n     *  being required.\\n     *\\n     *  By default this is 0, meaning any losses would cause a harvest which\\n     *  will subsequently report the loss to the Vault for tracking. (See\\n     *  `harvestTrigger()` for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _debtThreshold How big of a loss this Strategy may carry without\\n     * being required to report to the Vault.\\n     */\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\\n     * of the file describing the strategy.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _metadataURI The URI that describe the strategy.\\n     */\\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\\n        metadataURI = _metadataURI;\\n        emit UpdatedMetadataURI(_metadataURI);\\n    }\\n\\n    /**\\n     * Resolve governance address from Vault contract, used to make assertions\\n     * on protected functions in the Strategy.\\n     */\\n    function governance() internal view returns (address) {\\n        return vault.governance();\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Strategy is currently managing,\\n     *  denominated in terms of `want` tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Strategy if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Strategy relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Strategy and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function estimatedTotalAssets() public virtual view returns (uint256);\\n\\n    /*\\n     * @notice\\n     *  Provide an indication of whether this strategy is currently \\\"active\\\"\\n     *  in that it is managing an active position, or will manage a position in\\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\\n     *  events can be tracked externally by indexing agents.\\n     * @return True if the strategy is actively managing a position.\\n     */\\n    function isActive() public view returns (bool) {\\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\\n    }\\n\\n    /**\\n     * Perform any Strategy unwinding or other calls necessary to capture the\\n     * \\\"free return\\\" this Strategy has generated since the last time its core\\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\\n     * This call is only used during \\\"normal operation\\\" of a Strategy, and\\n     * should be optimized to minimize losses as much as possible.\\n     *\\n     * This method returns any realized profits and/or realized losses\\n     * incurred, and should return the total amounts of profits/losses/debt\\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\\n     *\\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n     * debt limit, otherwise its value will be how far past the debt limit\\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\\n     *\\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n     *       It is okay for it to be less than `_debtOutstanding`, as that\\n     *       should only used as a guide for how much is left to pay back.\\n     *       Payments should be made to minimize loss from slippage, debt,\\n     *       withdrawal fees, etc.\\n     *\\n     * See `vault.debtOutstanding()`.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n    internal\\n    virtual\\n    returns (\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    );\\n\\n    /**\\n     * Perform any adjustments to the core position(s) of this Strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n     * was made is available for reinvestment. Also note that this number\\n     * could be 0, and you should handle that scenario accordingly.\\n     *\\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\\n\\n    /**\\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\\n     * This function should return the amount of `want` tokens made available by the\\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\\n     * difference is due to a realized loss, or if there is some other sitution at play\\n     * (e.g. locked funds) where the amount made available is less than what is needed.\\n     * This function is used during emergency exit instead of `prepareReturn()` to\\n     * liquidate all of the Strategy's positions back to the Vault.\\n     *\\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `tend()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `tend()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `tend()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be\\n     *  \\\"at a loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `harvestTrigger()` should never return `true` at the same\\n     *  time.\\n     * @return `true` if `tend()` should be called, `false` otherwise.\\n     */\\n    function tendTrigger(uint256 /*callCost*/) public virtual view returns (bool) {\\n        // We usually don't need tend, but if there are positions that need\\n        // active maintainence, overriding this function is how you would\\n        // signal for that.\\n        return false;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Adjust the Strategy's position. The purpose of tending isn't to\\n     *  realize gains, but to maximize yield by reinvesting any returns.\\n     *\\n     *  See comments on `adjustPosition()`.\\n     *\\n     *  This may only be called by governance, the strategist, or the keeper.\\n     */\\n    function tend() external onlyKeepers {\\n        // Don't take profits with this call, but adjust for better gains\\n        adjustPosition(vault.debtOutstanding());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `harvest()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `harvest()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `harvest()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be \\\"at a\\n     *  loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `tendTrigger` should never return `true` at the\\n     *  same time.\\n     *\\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\\n     *  strategist-controlled parameters that will influence whether this call\\n     *  returns `true` or not. These parameters will be used in conjunction\\n     *  with the parameters reported to the Vault (see `params`) to determine\\n     *  if calling `harvest()` is merited.\\n     *\\n     *  It is expected that an external system will check `harvestTrigger()`.\\n     *  This could be a script run off a desktop or cloud bot (e.g.\\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\\n     *  or via an integration with the Keep3r network (e.g.\\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\\n     * @return `true` if `harvest()` should be called, `false` otherwise.\\n     */\\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\\n        IVault.StrategyParams memory params = vault.strategies(address(this));\\n\\n        // Should not trigger if Strategy is not activated\\n        if (params.activation == 0) return false;\\n\\n        // Should not trigger if we haven't waited long enough since previous harvest\\n        if ((block.timestamp - params.lastReport) < minReportDelay) return false;\\n\\n        // Should trigger if hasn't been called in a while\\n        if ((block.timestamp - params.lastReport) >= maxReportDelay) return true;\\n\\n        // If some amount is owed, pay it back\\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\\n        //       changes to the value from triggering a harvest directly through user\\n        //       behavior. This should ensure reasonable resistance to manipulation\\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\\n        uint256 outstanding = vault.debtOutstanding();\\n        if (outstanding > debtThreshold) return true;\\n\\n        // Check for profits and losses\\n        uint256 total = estimatedTotalAssets();\\n        // Trigger if we have a loss to report\\n        if ((total + debtThreshold) < params.totalDebt) return true;\\n\\n        uint256 profit = 0;\\n        if (total > params.totalDebt) profit = total - params.totalDebt; // We've earned a profit!\\n\\n        // Otherwise, only trigger if it \\\"makes sense\\\" economically (gas cost\\n        // is <N% of value moved)\\n        uint256 credit = vault.creditAvailable();\\n        return ((profitFactor * callCost) < (credit + profit));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\\n     *  the Strategy's position.\\n     *\\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\\n     *  the Strategy's position.\\n     *\\n     *  This may only be called by governance, the strategist, or the keeper.\\n     * @dev\\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\\n     *  to take in profits, to borrow newly available funds from the Vault, or\\n     *  otherwise adjust its position. In other cases `harvest()` must be\\n     *  called to report to the Vault on the Strategy's position, especially if\\n     *  any losses have occurred.\\n     */\\n    function harvest() external virtual onlyKeepers {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = vault.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 totalAssets = estimatedTotalAssets();\\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\\n            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\\n            // NOTE: take up any remainder here as profit\\n            if (debtPayment > debtOutstanding) {\\n                profit = debtPayment - debtOutstanding;\\n                debtPayment = debtOutstanding;\\n            }\\n        } else {\\n            // Free up returns for Vault to pull\\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\\n        }\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Vault.\\n        debtOutstanding = vault.report(profit, loss, debtPayment);\\n\\n        // Check if free returns are left, and re-invest them\\n        adjustPosition(debtOutstanding);\\n\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Withdraws `_amountNeeded` to `vault`.\\n     *\\n     *  This may only be called by the Vault.\\n     * @param _amountNeeded How much `want` to withdraw.\\n     * @return _loss Any realized losses\\n     */\\n    function withdraw(uint256 _amountNeeded) external virtual returns (uint256 _loss) {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\\n        uint256 amountFreed;\\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    /**\\n     * Do anything necessary to prepare this Strategy for migration, such as\\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\\n     * value.\\n     */\\n    function prepareMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     * @notice\\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\\n     *\\n     *  This may only be called by governance or the Vault.\\n     * @dev\\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\\n     * @param _newStrategy The Strategy to migrate to.\\n     */\\n    function migrate(address _newStrategy) external {\\n        require(msg.sender == address(vault) || msg.sender == governance());\\n        require(BaseStrategy(_newStrategy).vault() == vault);\\n        prepareMigration(_newStrategy);\\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Activates emergency exit. Once activated, the Strategy will exit its\\n     *  position upon the next harvest, depositing all funds into the Vault as\\n     *  quickly as is reasonable given on-chain conditions.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @dev\\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\\n     */\\n    function setEmergencyExit() external onlyAuthorized {\\n        emergencyExit = true;\\n        vault.revokeStrategy();\\n\\n        emit EmergencyExitEnabled();\\n    }\\n\\n    /**\\n     * Override this to add all tokens/tokenized positions this contract\\n     * manages on a *persistent* basis (e.g. not just for swapping back to\\n     * want ephemerally).\\n     *\\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\\n     *\\n     * Example:\\n     *\\n     *    function protectedTokens() internal override view returns (address[] memory) {\\n     *      address[] memory protected = new address[](3);\\n     *      protected[0] = tokenA;\\n     *      protected[1] = tokenB;\\n     *      protected[2] = tokenC;\\n     *      return protected;\\n     *    }\\n     */\\n    function protectedTokens() internal virtual view returns (address[] memory);\\n\\n    /**\\n     * @notice\\n     *  Removes tokens from this Strategy that are not the type of tokens\\n     *  managed by this Strategy. This may be used in case of accidentally\\n     *  sending the wrong kind of token to this Strategy.\\n     *\\n     *  Tokens will be sent to `governance()`.\\n     *\\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\\n     *  that are protected by this Strategy.\\n     *\\n     *  This may only be called by governance.\\n     * @dev\\n     *  Implement `protectedTokens()` to specify any additional tokens that\\n     *  should be protected from sweeping in addition to `want`.\\n     * @param _token The token to transfer out of this vault.\\n     */\\n    function sweep(address _token) external virtual onlyGovernance {\\n        require(_token != address(want), \\\"!want\\\");\\n        require(_token != address(vault), \\\"!shares\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20Upgradeable(_token).safeTransfer(governance(), IERC20Upgradeable(_token).balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/ConvexCrvLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2021-05-30\\n*/\\n\\n// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"../interfaces/IBooster.sol\\\";\\nimport \\\"../interfaces/ICurveFi.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IUni.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n\\n// Part: ConvexStable\\n\\nabstract contract ConvexCrvLp is BaseStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public constant booster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    // address public constant quoter = address(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\\n    // address public constant uniswapv3 = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    address public constant uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address public constant sushiswap = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    bool public isClaimRewards;\\n    bool public isClaimExtras;\\n    uint256 public id;\\n    address public rewardContract;\\n    address public curve;\\n\\n    IERC20Upgradeable public want_wrapped;\\n    uint public constant MAX_SLIPPAGE_FACTOR = 1000000;\\n    uint public slippage_factor;\\n\\n    uint128 public curve_lp_idx;\\n\\n    address[] public dex;\\n\\n    function _approveBasic() internal virtual;\\n\\n    function _approveDex() internal virtual;\\n\\n    function approveAll() external onlyAuthorized {\\n        _approveBasic();\\n        _approveDex();\\n    }\\n\\n    function switchDex(uint256 _id, address _dex) external onlyAuthorized {\\n        dex[_id] = _dex;\\n        _approveDex();\\n    }\\n\\n    function setSlippageFactor(uint256 new_factor) external onlyAuthorized {\\n        require (slippage_factor < MAX_SLIPPAGE_FACTOR, 'Bad slippage factor');\\n\\n        slippage_factor = new_factor;\\n    }\\n\\n    function setIsClaimRewards(bool _isClaimRewards) external onlyAuthorized {\\n        isClaimRewards = _isClaimRewards;\\n    }\\n\\n    function setIsClaimExtras(bool _isClaimExtras) external onlyAuthorized {\\n        isClaimExtras = _isClaimExtras;\\n    }\\n\\n    function withdrawToConvexDepositTokens() external onlyAuthorized {\\n        Rewards(rewardContract).withdrawAll(isClaimRewards);\\n    }\\n\\n    function withdrawToWrappedTokens() external onlyAuthorized {\\n        Rewards(rewardContract).withdrawAllAndUnwrap(isClaimRewards);\\n    }\\n\\n    function claimWantTokens() external onlyGovernance {\\n        want.safeTransfer(governance(), balanceOfWant());\\n    }\\n\\n    function claimWrappedWantTokens() external onlyGovernance {\\n        want_wrapped.safeTransfer(governance(), balanceOfWrapped());\\n    }\\n\\n    function claimRewardTokens() external onlyGovernance {\\n        IERC20Upgradeable(crv).safeTransfer(governance(), IERC20Upgradeable(crv).balanceOf(address(this)));\\n        IERC20Upgradeable(cvx).safeTransfer(governance(), IERC20Upgradeable(cvx).balanceOf(address(this)));\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return string(abi.encodePacked(\\\"Convex\\\", IERC20MetadataUpgradeable(address(want_wrapped)).symbol()));\\n    }\\n\\n    function calc_want_from_wrapped(uint256 wrapped_amount) public virtual view returns (uint256 expected_return) {\\n        if (wrapped_amount > 0) {\\n            expected_return = ICurveFi(curve).calc_withdraw_one_coin(wrapped_amount, int128(curve_lp_idx));\\n        }\\n    }\\n\\n    function calc_wrapped_from_want(uint256 want_amount) public virtual view returns (uint256);\\n\\n    function apply_slippage_factor(uint256 amount) public view returns (uint256) {\\n        return (amount * (slippage_factor + MAX_SLIPPAGE_FACTOR)) / MAX_SLIPPAGE_FACTOR;\\n    }\\n\\n    function unwrap(uint256 wrapped_amount) internal virtual returns (uint256 expected_return) {\\n        if (wrapped_amount > 0) {\\n            expected_return = calc_want_from_wrapped(wrapped_amount);\\n            ICurveFi(curve).remove_liquidity_one_coin(wrapped_amount, int128(curve_lp_idx), 0);\\n        }\\n    }\\n\\n    function wrap(uint256 want_amount) internal virtual returns (uint256 expected_return);\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return want.balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public view returns (uint256) {\\n        return Rewards(rewardContract).balanceOf(address(this));\\n    }\\n\\n    function balanceOfWrapped() public view returns (uint256) {\\n        return want_wrapped.balanceOf(address(this));\\n    }\\n\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        uint256 total_wrapped = estimatedTotalWrappedAssets();\\n        return calc_want_from_wrapped(total_wrapped) + balanceOfWant();\\n    }\\n\\n    function estimatedTotalWrappedAssets() public view returns (uint256) {\\n        return balanceOfWrapped() + balanceOfPool();\\n    }\\n\\n    function adjustPosition(uint256 /*_debtOutstanding*/) internal override {\\n        // _debtOutstanding - unwrapped token\\n        if (emergencyExit) return;\\n\\n        // dont waste gas on reinvesting small sums\\n        uint256 total_available = balanceOfWant() + calc_want_from_wrapped(balanceOfWrapped());\\n        IVault.StrategyParams memory params = vault.strategies(address(this));\\n        if (total_available < params.minDebtPerHarvest) {\\n            return;\\n        }\\n\\n        wrap(balanceOfWant());\\n\\n        uint256 _wrapped = balanceOfWrapped();\\n        if (_wrapped > 0) {\\n            Booster(booster).deposit(id, _wrapped, true);\\n        }\\n    }\\n\\n    // _amount - wrapped token amount\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        _amount = Math.min(_amount, balanceOfPool());\\n        uint _before = balanceOfWrapped();\\n        Rewards(rewardContract).withdrawAndUnwrap(_amount, false);\\n        return balanceOfWrapped() - _before;\\n    }\\n\\n    // _amountNeeded - wrapped token amount must be provided\\n    // _liquidatedAmount and loss are in wrapped also\\n    function liquidatePosition(uint256 _amountNeeded)\\n    internal\\n    override\\n    returns (uint256 _liquidatedAmount, uint256 _loss)\\n    {\\n        uint256 _balance = balanceOfWrapped();\\n        if (_balance < _amountNeeded) {\\n            _liquidatedAmount = _withdrawSome(_amountNeeded - _balance);\\n            _liquidatedAmount += _balance;\\n            _loss = _amountNeeded - _liquidatedAmount; // this should be 0. o/w there must be an error\\n        }\\n        else {\\n            _liquidatedAmount = _amountNeeded;\\n        }\\n    }\\n\\n    function prepareMigration(address _newStrategy) internal override {\\n        Rewards(rewardContract).withdrawAllAndUnwrap(isClaimRewards);\\n        _migrateRewards(_newStrategy);\\n        want_wrapped.safeTransfer(_newStrategy, balanceOfWrapped());\\n    }\\n\\n    function _migrateRewards(address _newStrategy) internal virtual {\\n        IERC20Upgradeable(crv).safeTransfer(_newStrategy, IERC20Upgradeable(crv).balanceOf(address(this)));\\n        IERC20Upgradeable(cvx).safeTransfer(_newStrategy, IERC20Upgradeable(cvx).balanceOf(address(this)));\\n    }\\n\\n    function _claimableBasicInETH() internal view returns (uint256) {\\n        uint256 _crv = Rewards(rewardContract).earned(address(this));\\n\\n        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\\n        uint256 totalCliffs = 1000;\\n        uint256 maxSupply = 1e8 * 1e18; // 100m\\n        uint256 reductionPerCliff = 1e5 * 1e18; // 100k\\n        uint256 supply = IERC20Upgradeable(cvx).totalSupply();\\n        uint256 _cvx;\\n\\n        uint256 cliff = supply / reductionPerCliff;\\n        // mint if below total cliffs\\n        if (cliff < totalCliffs) {\\n            // for reduction% take inverse of current cliff\\n            uint256 reduction = totalCliffs - cliff;\\n            // reduce\\n            _cvx = (_crv * reduction) / totalCliffs;\\n\\n            // supply cap check\\n            uint256 amtTillMax = maxSupply - supply;\\n            if (_cvx > amtTillMax) {\\n                _cvx = amtTillMax;\\n            }\\n        }\\n\\n        uint256 crvValue;\\n        if (_crv > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = crv;\\n            path[1] = weth;\\n            uint256[] memory crvSwap = Uni(dex[0]).getAmountsOut(_crv, path);\\n            crvValue = crvSwap[1];\\n        }\\n\\n        uint256 cvxValue;\\n        if (_cvx > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = cvx;\\n            path[1] = weth;\\n            uint256[] memory cvxSwap = Uni(dex[1]).getAmountsOut(_cvx, path);\\n            cvxValue = cvxSwap[1];\\n        }\\n\\n        return crvValue + cvxValue;\\n    }\\n\\n    function claimableInETH() public virtual view returns (uint256 _claimable) {\\n        _claimable = _claimableBasicInETH();\\n    }\\n\\n    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary\\n    function harvestTrigger(uint256 callCost) public override view returns (bool) {\\n        IVault.StrategyParams memory params = vault.strategies(address(this));\\n\\n        if (params.activation == 0) return false;\\n\\n        if ((block.timestamp - params.lastReport) < minReportDelay) return false;\\n\\n        if ((block.timestamp - params.lastReport) >= maxReportDelay) return true;\\n\\n        uint256 outstanding = vault.debtOutstanding();\\n        if (outstanding > debtThreshold) return true;\\n\\n        uint256 total = estimatedTotalAssets();\\n        if ((total + debtThreshold) < params.totalDebt) return true;\\n\\n        return ((profitFactor * callCost) < claimableInETH());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\\n     *  the Strategy's position.\\n     *\\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\\n     *  the Strategy's position.\\n     *\\n     *  This may only be called by governance, the strategist, or the keeper.\\n     * @dev\\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\\n     *  to take in profits, to borrow newly available funds from the Vault, or\\n     *  otherwise adjust its position. In other cases `harvest()` must be\\n     *  called to report to the Vault on the Strategy's position, especially if\\n     *  any losses have occurred.\\n     */\\n    function harvest() external override onlyKeepers {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = calc_wrapped_from_want(vault.debtOutstanding());\\n        uint256 debtPayment = 0;\\n\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 totalAssets = estimatedTotalWrappedAssets();\\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\\n            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\\n            // NOTE: take up any remainder here as profit\\n            if (debtPayment > debtOutstanding) {\\n                profit = debtPayment - debtOutstanding;\\n                debtPayment = debtOutstanding;\\n            }\\n        } else {\\n            // Free up returns for Vault to pull\\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\\n        }\\n\\n        // we should be able to give profit + debtPayment to vault\\n        uint256 want_profit = calc_want_from_wrapped(profit);\\n        uint256 want_profit_plus_debtPayment = unwrap(profit + debtPayment);\\n        // we know that want_profit_plus_debtPayment >= want_profit\\n        uint256 want_debtPayment = want_profit_plus_debtPayment - want_profit;\\n\\n        uint256 want_loss = calc_want_from_wrapped(loss);\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Vault.\\n        debtOutstanding = vault.report(want_profit, want_loss, want_debtPayment);\\n\\n        // wrap and reinvest if threshold is reached\\n        adjustPosition(debtOutstanding);\\n\\n        emit Harvested(want_profit, want_loss, want_debtPayment, debtOutstanding);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Withdraws `_amountNeeded` to `vault`.\\n     * _amountNeeded provided in unwrapped tokens\\n     *\\n     *  This may only be called by the Vault.\\n     * @param _amountNeeded How much `want` to withdraw.\\n     * @return _loss Any realized losses\\n     */\\n    function withdraw(uint256 _amountNeeded) external override returns (uint256 _loss) {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\\n        uint _amountNeededWrapped;\\n        uint _amountNeededFirst = _amountNeeded;\\n\\n        for (uint i = 0; i < 3; i++) {\\n            _amountNeeded = apply_slippage_factor(_amountNeeded);\\n            _amountNeededWrapped = calc_wrapped_from_want(_amountNeeded);\\n            uint _expectedUnwrapped = calc_want_from_wrapped(_amountNeededWrapped);\\n            if (_expectedUnwrapped >= _amountNeededFirst) {\\n                break;\\n            }\\n        }\\n\\n        uint256 amountFreed;\\n        (amountFreed, _loss) = liquidatePosition(_amountNeededWrapped);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n\\n        amountFreed = unwrap(amountFreed);\\n        _loss = calc_want_from_wrapped(_loss);\\n\\n        if (amountFreed > _amountNeededFirst) {\\n            // excess want token will be used on next harvest\\n            amountFreed = _amountNeededFirst;\\n        }\\n\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    function protectedTokens()\\n    internal\\n    pure\\n    override\\n    returns (address[] memory)\\n    {\\n        address[] memory protected = new address[](2);\\n        protected[0] = crv;\\n        protected[1] = cvx;\\n        return protected;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Removes tokens from this Strategy that are not the type of tokens\\n     *  managed by this Strategy. This may be used in case of accidentally\\n     *  sending the wrong kind of token to this Strategy.\\n     *\\n     *  Tokens will be sent to `governance()`.\\n     *\\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\\n     *  that are protected by this Strategy.\\n     *\\n     *  This may only be called by governance.\\n     * @dev\\n     *  Implement `protectedTokens()` to specify any additional tokens that\\n     *  should be protected from sweeping in addition to `want`.\\n     * @param _token The token to transfer out of this vault.\\n     */\\n    function sweep(address _token) external override onlyGovernance {\\n        require(_token != address(want), \\\"!want\\\");\\n        require(_token != address(want_wrapped), \\\"!want wrapped\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20Upgradeable(_token).safeTransfer(governance(), IERC20Upgradeable(_token).balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/ConvexFrax.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2021-05-30\\n*/\\n\\n// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"../interfaces/IBooster.sol\\\";\\nimport \\\"../interfaces/ICurveFi.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IUni.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"./ConvexCrvLp.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n\\ncontract ConvexFraxStrategy is ConvexCrvLp, Initializable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    address public constant usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n    address public constant crv3 = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n    address public constant frax3crv = address(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B);\\n    address public constant zapCurve = address(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\\n\\n    address[] public pathTarget;\\n\\n    function initialize(\\n        address _vault\\n    ) external initializer {\\n        BaseStrategy._initialize(_vault);\\n\\n        slippage_factor = 150;\\n        minReportDelay = 1 days;\\n        maxReportDelay = 30 days;\\n        profitFactor = 100000;\\n        debtThreshold = 1e24;\\n        want_wrapped = IERC20Upgradeable(frax3crv);\\n        want_wrapped.safeApprove(_vault, type(uint256).max); // Give Vault unlimited access (might save gas)\\n\\n        if (address(want) == dai) {\\n            curve_lp_idx = 0;\\n        } else if (address(want) == usdc) {\\n            curve_lp_idx = 1;\\n        } else if (address(want) == usdt) {\\n            curve_lp_idx = 2;\\n        } else {\\n            revert(\\\"Strategy cant be applied to this vault\\\");\\n        }\\n\\n        curve = frax3crv;\\n        id = 32;\\n        isClaimRewards = true; // default is true, turn off in emergency\\n        // isClaimExtras = true; // add this if there are extra rewards\\n\\n        (address _lp,,,address _reward,,) = Booster(booster).poolInfo(id);\\n        require(_lp == address(want_wrapped), \\\"constructor: incorrect lp token\\\");\\n        rewardContract = _reward;\\n\\n        _approveBasic();\\n        pathTarget = new address[](2);\\n        _setPathTarget(0, 1); // crv path target\\n        _setPathTarget(1, 1); // cvx path target\\n\\n        dex = new address[](2);\\n        dex[0] = sushiswap; // crv\\n        dex[1] = sushiswap; // cvx\\n        _approveDex();\\n    }\\n\\n    function _approveBasic() internal override {\\n        want_wrapped.safeApprove(booster, 0);\\n        want_wrapped.safeApprove(booster, type(uint256).max);\\n        want_wrapped.safeApprove(zapCurve, 0);\\n        want_wrapped.safeApprove(zapCurve, type(uint256).max);\\n        IERC20Upgradeable(dai).safeApprove(zapCurve, 0);\\n        IERC20Upgradeable(dai).safeApprove(zapCurve, type(uint256).max);\\n        IERC20Upgradeable(usdc).safeApprove(zapCurve, 0);\\n        IERC20Upgradeable(usdc).safeApprove(zapCurve, type(uint256).max);\\n        IERC20Upgradeable(usdt).safeApprove(zapCurve, 0);\\n        IERC20Upgradeable(usdt).safeApprove(zapCurve, type(uint256).max);\\n    }\\n\\n    function _approveDex() internal override {\\n        IERC20Upgradeable(crv).safeApprove(dex[0], 0);\\n        IERC20Upgradeable(crv).safeApprove(dex[0], type(uint256).max);\\n        IERC20Upgradeable(cvx).safeApprove(dex[1], 0);\\n        IERC20Upgradeable(cvx).safeApprove(dex[1], type(uint256).max);\\n    }\\n\\n    function calc_want_from_wrapped(uint256 wrapped_amount) public view override returns (uint256 expected_return) {\\n        if (wrapped_amount > 0) {\\n            expected_return = ICurveFi(zapCurve).calc_withdraw_one_coin(curve, wrapped_amount, int128(curve_lp_idx) + 1);\\n        }\\n    }\\n\\n    function calc_wrapped_from_want(uint256 want_amount) public view override returns (uint256) {\\n        uint256[4] memory amounts;\\n        amounts[curve_lp_idx + 1] = want_amount;\\n        return ICurveFi(zapCurve).calc_token_amount(curve, amounts, true);\\n    }\\n\\n    function wrap(uint256 want_amount) internal override returns (uint256 expected_return) {\\n        if (want_amount > 0) {\\n            expected_return = calc_wrapped_from_want(want_amount);\\n            uint256[4] memory amounts;\\n            amounts[curve_lp_idx + 1] = want_amount;\\n            ICurveFi(zapCurve).add_liquidity(curve, amounts, 0);\\n        }\\n    }\\n\\n    function unwrap(uint256 wrapped_amount) internal override returns (uint256 expected_return) {\\n        if (wrapped_amount > 0) {\\n            expected_return = calc_want_from_wrapped(wrapped_amount);\\n            ICurveFi(zapCurve).remove_liquidity_one_coin(curve, wrapped_amount, int128(curve_lp_idx) + 1, 0);\\n        }\\n    }\\n\\n\\n    // >>> approve other rewards on dex\\n    // function _approveDex() internal override { super._approveDex(); }\\n\\n    // >>> include other rewards\\n    // function _migrateRewards(address _newStrategy) internal override { super._migrateRewards(_newStrategy); }\\n\\n    // >>> include all other rewards in eth besides _claimableBasicInETH()\\n    // function _claimableInETH() internal override view returns (uint256 _claimable) { _claimable = super._claimableInETH(); }\\n\\n    function _setPathTarget(uint _tokenId, uint _id) internal {\\n        if (_id == 0) {\\n            pathTarget[_tokenId] = dai;\\n        }\\n        else if (_id == 1) {\\n            pathTarget[_tokenId] = usdc;\\n        }\\n        else {\\n            pathTarget[_tokenId] = usdt;\\n        }\\n    }\\n\\n    function setPathTarget(uint _tokenId, uint _id) external onlyAuthorized {\\n        _setPathTarget(_tokenId, _id);\\n    }\\n\\n    function prepareReturn(uint256 _debtOutstanding)\\n    internal\\n    override\\n    returns (\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    )\\n    {\\n        // here some 'want' token could be free\\n        // we dont want it to be taken into account as profit\\n        uint before = balanceOfWrapped() + calc_wrapped_from_want(balanceOfWant());\\n\\n        Rewards(rewardContract).getReward(address(this), isClaimExtras);\\n        uint256 _crv = IERC20Upgradeable(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            address[] memory path = new address[](3);\\n            path[0] = crv;\\n            path[1] = weth;\\n            path[2] = pathTarget[0];\\n\\n            Uni(dex[0]).swapExactTokensForTokens(_crv, uint256(0), path, address(this), block.timestamp);\\n        }\\n        uint256 _cvx = IERC20Upgradeable(cvx).balanceOf(address(this));\\n        if (_cvx > 0) {\\n            address[] memory path = new address[](3);\\n            path[0] = cvx;\\n            path[1] = weth;\\n            path[2] = pathTarget[1];\\n\\n            Uni(dex[1]).swapExactTokensForTokens(_cvx, uint256(0), path, address(this), block.timestamp);\\n        }\\n        uint256 _dai = IERC20Upgradeable(dai).balanceOf(address(this));\\n        uint256 _usdc = IERC20Upgradeable(usdc).balanceOf(address(this));\\n        uint256 _usdt = IERC20Upgradeable(usdt).balanceOf(address(this));\\n        if (_dai > 0 || _usdc > 0 || _usdt > 0) {\\n            ICurveFi(zapCurve).add_liquidity(curve, [0, _dai, _usdc, _usdt], 0);\\n        }\\n        _profit = balanceOfWrapped() - before;\\n\\n        uint _total = estimatedTotalWrappedAssets();\\n        uint _debt = calc_wrapped_from_want(vault.strategies(address(this)).totalDebt);\\n        if (_total < _debt) {\\n            _loss = _debt - _total;\\n            _profit = 0;\\n        }\\n\\n        if (_debtOutstanding > 0) {\\n            _withdrawSome(_debtOutstanding);\\n            _debtPayment = Math.min(_debtOutstanding, balanceOfWrapped() - _profit);\\n        }\\n    }\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"apply_slippage_factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWrapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wrapped_amount\",\"type\":\"uint256\"}],\"name\":\"calc_want_from_wrapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expected_return\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"want_amount\",\"type\":\"uint256\"}],\"name\":\"calc_wrapped_from_want\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWantTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWrappedWantTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve_lp_idx\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalWrappedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimExtras\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimExtras\",\"type\":\"bool\"}],\"name\":\"setIsClaimExtras\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimRewards\",\"type\":\"bool\"}],\"name\":\"setIsClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPathTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_factor\",\"type\":\"uint256\"}],\"name\":\"setSlippageFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage_factor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"switchDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want_wrapped\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToConvexDepositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToWrappedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapCurve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvexFraxStrategy", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}