{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Whitelist {\r\n    function isWhitelisted(address account) external view returns (bool);\r\n}\r\n\r\ncontract PHUNTOKEN_STAKING_UNISWAP_V2 is Ownable {\r\n    IERC20 public rewardToken;\r\n    IERC20 public stakedToken;\r\n    Whitelist public whitelistContract;\r\n    uint256 public totalSupply;\r\n    uint256 public rewardRate;\r\n    uint64 public periodFinish;\r\n    uint64 public lastUpdateTime;\r\n    uint128 public rewardPerTokenStored;\r\n    uint8 public exitPercent;\r\n    address private treasury;\r\n    mapping (address => bool) public whitelist;\r\n    mapping(address => uint256) private _balances;\r\n    struct UserRewards {\r\n        uint128 earnedToDate;\r\n        uint128 userRewardPerTokenPaid;\r\n        uint128 rewards;\r\n    }\r\n    mapping(address => UserRewards) public userRewards;\r\n    string constant _transferErrorMessage = \"staked token transfer failed\";\r\n    \r\n    event RewardAdded(uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event exitStaked(address indexed user);\r\n    event enterStaked(address indexed user);\r\n\r\n    constructor(IERC20 _rewardToken, IERC20 _stakedToken, Whitelist _whitelistAddress) {\r\n        rewardToken = _rewardToken;\r\n        stakedToken = _stakedToken;\r\n        whitelistContract = _whitelistAddress;\r\n    }\r\n\r\n    modifier onlyWhitelist(address account) {\r\n        require(isWhitelisted(account), \"PHTK Staking: User is not whitelisted.\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        uint128 _rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        rewardPerTokenStored = _rewardPerTokenStored;\r\n        userRewards[account].rewards = earned(account);\r\n        userRewards[account].userRewardPerTokenPaid = _rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint64) {\r\n        uint64 blockTimestamp = uint64(block.timestamp);\r\n        return blockTimestamp < periodFinish ? blockTimestamp : periodFinish;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint128) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0)\r\n            return rewardPerTokenStored;\r\n        unchecked {\r\n            uint256 rewardDuration = lastTimeRewardApplicable() - lastUpdateTime;\r\n            return uint128(rewardPerTokenStored + rewardDuration * rewardRate * 1e18 / totalStakedSupply);\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint128) {\r\n        unchecked { \r\n            return uint128(balanceOf(account) * (rewardPerToken() - userRewards[account].userRewardPerTokenPaid) /1e18 + userRewards[account].rewards);\r\n        }\r\n    }\r\n\r\n    function stake(uint128 amount) external payable onlyWhitelist(msg.sender) {\r\n        require(msg.value == 0, \"PHTK Staking: Cannot stake any ETH\");\r\n        require(amount > 0, \"PHTK Staking: Cannot stake 0 Tokens\");\r\n        if (_balances[msg.sender] == 0)\r\n            emit enterStaked(msg.sender);\r\n        require(stakedToken.transferFrom(msg.sender, address(this), amount), _transferErrorMessage);\r\n        unchecked { \r\n            totalSupply += amount;\r\n            _balances[msg.sender] += amount;\r\n        }\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint128 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"PHTK Staking: Cannot withdraw 0 LP Tokens\");\r\n        require(amount <= _balances[msg.sender], \"PHTK Staking: Cannot withdraw more LP Tokens than user staking balance\");\r\n        unchecked {\r\n            _balances[msg.sender] -= amount;\r\n            totalSupply = totalSupply - amount;\r\n        }\r\n        require(stakedToken.transfer(msg.sender, amount), _transferErrorMessage);\r\n        emit Withdrawn(msg.sender, amount);\r\n        if(amount == _balances[msg.sender])\r\n            emit exitStaked(msg.sender);\r\n    }\r\n\r\n    function exit() external {\r\n        claimReward();\r\n        withdraw(uint128(balanceOf(msg.sender)));\r\n        emit exitStaked(msg.sender);\r\n    }\r\n\r\n    function claimReward() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        uint256 tax = 0;\r\n        if(rewardToken.balanceOf(address(this)) <= reward)\r\n            reward = 0;\r\n        if (reward > 0) {\r\n            userRewards[msg.sender].rewards = 0;\r\n            if(exitPercent != 0 && reward != 0){\r\n                tax = reward * exitPercent / 100;\r\n                require(rewardToken.transfer(treasury, tax), \"PHTK Staking: Reward transfer failed\");\r\n                emit RewardPaid(treasury, tax);\r\n            }\r\n            require(rewardToken.transfer(msg.sender, reward - tax), \"PHTK Staking: Reward transfer failed\");\r\n            userRewards[msg.sender].earnedToDate += uint128(reward - tax);\r\n            emit RewardPaid(msg.sender, reward - tax);\r\n        }\r\n    }\r\n\r\n    function setRewardParams(uint128 reward, uint64 duration) external onlyOwner {\r\n        unchecked {\r\n            require(reward > 0);\r\n            rewardPerTokenStored = rewardPerToken();\r\n            uint64 blockTimestamp = uint64(block.timestamp);\r\n            uint256 maxRewardSupply = rewardToken.balanceOf(address(this));\r\n            if(rewardToken == stakedToken)\r\n                maxRewardSupply -= totalSupply;\r\n            uint256 leftover = 0;\r\n            if (blockTimestamp >= periodFinish) {\r\n                rewardRate = reward/duration;\r\n            } else {\r\n                uint256 remaining = periodFinish-blockTimestamp;\r\n                leftover = remaining*rewardRate;\r\n                rewardRate = (reward+leftover)/duration;\r\n            }\r\n            require(reward+leftover <= maxRewardSupply, \"PHTK Staking: Not enough tokens to supply Reward Pool\");\r\n            lastUpdateTime = blockTimestamp;\r\n            periodFinish = blockTimestamp+duration;\r\n            emit RewardAdded(reward);\r\n        }\r\n    }\r\n\r\n    function withdrawReward() external onlyOwner {\r\n        uint256 rewardSupply = rewardToken.balanceOf(address(this));\r\n        //ensure funds staked by users can't be transferred out - this only transfers reward token back to contract owner\r\n        if(rewardToken == stakedToken)\r\n                rewardSupply -= totalSupply;\r\n        require(rewardToken.transfer(msg.sender, rewardSupply));\r\n        rewardRate = 0;\r\n        periodFinish = uint64(block.timestamp);\r\n    }\r\n    \r\n    function isWhitelisted(address account) public view returns (bool) {\r\n       return whitelistContract.isWhitelisted(account);\r\n    }\r\n\r\n    function updateExitStake(uint8 _exitPercent) external onlyOwner() {\r\n        require(_exitPercent <= 20, \"PHTK Staking: Exit percent cannot be greater than 20%\");\r\n        exitPercent = _exitPercent;\r\n    }\r\n\r\n    function updateTreasury(address account) external onlyOwner() {\r\n        treasury = account;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract Whitelist\",\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"enterStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"exitStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"setRewardParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_exitPercent\",\"type\":\"uint8\"}],\"name\":\"updateExitStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"earnedToDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"internalType\":\"contract Whitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PHUNTOKEN_STAKING_UNISWAP_V2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001fee5588cb1de19c70b6ad5399152d8c643fae7b000000000000000000000000bd3f7f179c480da24adfbf5c1127260902ddc5900000000000000000000000000d32f7e322d77ae662d7fcc5f517f4ebfaa627af", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8896032cf66f1cd6b14a62cec644e174fa3855184d1f694be58386fe6a3eee87"}]}