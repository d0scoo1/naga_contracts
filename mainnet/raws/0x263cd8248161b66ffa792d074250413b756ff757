{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n                                                           \r\n                                                           \r\n      .g8\"\"\"bgd                    `7MM\"\"\"YMM              \r\n    .dP'     `M                      MM    `7              \r\n    dM'       `       ,pW\"Wq.        MM   d                \r\n    MM               6W'   `Wb       MMmmMM                \r\n    MM.    `7MMF'    8M     M8       MM   Y  ,             \r\n    `Mb.     MM      YA.   ,A9       MM     ,M             \r\n      `\"bmmmdPY       `Ybmd9'      .JMMmmmmMMM             \r\n                                       __,                 \r\n            M******A'     pd*\"*b.     `7MM                 \r\n            Y     A'     (O)   j8       MM                 \r\n                 A'          ,;j9       MM                 \r\n                A'        ,-='          MM                 \r\n               A'        Ammmmmmm     .JMML.               \r\n              A'                          ,,               \r\n`7MM\"\"\"Yp,   A'                           db               \r\n  MM    Yb                                                 \r\n  MM    dP      ,6\"Yb.      ,pP\"Ybd     `7MM       ,p6\"bo  \r\n  MM\"\"\"bg.     8)   MM      8I   `\"       MM      6M'  OO  \r\n  MM    `Y      ,pm9MM      `YMMMa.       MM      8M       \r\n  MM    ,9     8M   MM      L.   I8       MM      YM.    , \r\n.JMMmmmd9      `Moo9^Yo.    M9mmmP'     .JMML.     YMbmd'  \r\n                                                           \r\n                                                           \r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0;\r\n\r\ninterface IGoEHelper {\r\n    function isContract(address) external view returns (bool);\r\n    function toString(uint256) external pure returns (string memory);\r\n}\r\n\r\ninterface IGoE20Basic {\r\n    function decimals() external view returns(uint256);\r\n    function transferFrom(address,address,uint256) external returns (bool);    \r\n    function allowance(address,address) external view returns (uint256);\r\n    function transfer(address,uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256); \r\n}\r\n\r\n\r\ncontract ProxyData {\r\n    // internal address of proxy\r\n    address internal proxied;\r\n    // internal mapping for authorized address\r\n    mapping(bytes32 => bool) internal authorized;\r\n     // enum for authorization types\r\n    enum AType {\r\n        KEY,\r\n        ADMIN,\r\n        CONTRACT\r\n    }\r\n    address internal _owner;\r\n}\r\n\r\ncontract GoE721Data is ProxyData {\r\n    /**\r\n     * events required by Non-Fungible tokens implementation\r\n     * more info @ https://eips.ethereum.org/EIPS/eip-721[EIP]\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    \r\n    /**\r\n     * variables used by ERC721 standard contracts with additional params : \r\n     * \r\n     * 1. `_attribProxy` parameter which provides onChain data attributes\r\n     * for all Non-Fungible tokens produced by proxy implemented contracts.\r\n     * \r\n     * 2. `_reservedAmount` a certain pre-specified amount of Non-Fungible tokens\r\n     * for the contract to reserve.\r\n     * \r\n     * 3. `_paused` a control variable for ERC721 {mint} function.\r\n     */\r\n    address _attribProxy;\r\n    string  _name;\r\n    string  _symbol;\r\n    string  _baseUrl;\r\n    string  _baseExtention;\r\n    uint256  _mintIdx;\r\n    uint256 _maxSupply;\r\n    uint256 _reservedAmount;\r\n    bool _paused;\r\n\r\n    /**\r\n     * variables required by Non-Fungible tokens implementation\r\n     * more info @ https://eips.ethereum.org/EIPS/eip-721[EIP]\r\n     * to adhere to functionality requested by the EIP. Main fork from OpenZepplin\r\n     * more info @ https://docs.openzeppelin.com/contracts/2.x/api/token/erc721\r\n     */\r\n    mapping(address => uint256) _mintCost;\r\n    mapping(uint256 => address) _owners;\r\n    mapping(address => uint256) _balances;\r\n    mapping(uint256 => address) _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) _operatorApprovals;\r\n\r\n    mapping(uint256 => uint256) _bridged;\r\n    mapping(uint256 => address) _bridgeReference;\r\n}\r\n\r\ncontract GoE20Transactions { \r\n    /**\r\n     * boring ERC20 function to send compliant tokens\r\n     */\r\n    function send20Token(address token, address reciever, uint256 amount) internal returns(bool){\r\n        require(IGoE20Basic(token).balanceOf(address(this)) > amount, \"GoE20Transactions: No enough balance\");\r\n        require(IGoE20Basic(token).transfer(reciever, amount), \"GoE20Transactions: Cannot currently transfer\");\r\n        return true;\r\n    }\r\n    /**\r\n     * boring ERC20 function to recieve compliant tokens\r\n     */\r\n    function recieve20Token(address token, address sender, uint256 amount) internal returns(bool) {\r\n        require(IGoE20Basic(token).allowance(sender, address(this)) >= amount, \"GoE20Transactions: Need to approve the token\");\r\n        require(IGoE20Basic(token).transferFrom(sender, address(this), amount), \"GoE20Transactions: Need to transfer tokens \");\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract GoE721Basic is GoE721Data, GoE20Transactions {\r\n\r\n    /**\r\n     * @dev Less gas consumption if `_mintIdx` starts at \r\n     * a non-zero value, thus minting starts with tokenId = 1\r\n     */\r\n    function totalSupply() public view returns(uint256){\r\n\r\n        return _mintIdx-1;\r\n    }\r\n\r\n    function maxSupply() public view returns(uint256) {\r\n        \r\n        return _maxSupply;\r\n    }\r\n\r\n    function mintCost() public view returns(uint256) {\r\n\r\n        return _mintCost[address(0)];\r\n    }\r\n\r\n    function mintCostPerToken(address tokenAddress) public view returns(uint256){\r\n        require(_mintCost[tokenAddress] != 0, \"GoE721Basic: This token is not supported\");\r\n        return _mintCost[tokenAddress];\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenChain(uint256 tokenId) public view returns(uint256) {\r\n        if(_bridged[tokenId] == 0){\r\n            return block.chainid;\r\n        }else{\r\n            return _bridged[tokenId];\r\n        }\r\n    }\r\n\r\n    function walletOfOwner(address wallet) public view returns(uint256[] memory walletNFTs){\r\n        uint256 amnt = 0;\r\n        for(uint256 i=1; i<_mintIdx; i++){\r\n            if(ownerOf(i) == wallet){\r\n                amnt += 1;\r\n            }\r\n        }\r\n        walletNFTs = new uint256[](amnt);\r\n        uint256 _idx = 0;\r\n        for(uint256 i=1; i<_mintIdx; i++){\r\n            if(ownerOf(i) == wallet){\r\n                walletNFTs[_idx] = i;\r\n                _idx += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_exists(tokenId), \"GoE721Basic: URI query for nonexistent token\");\r\n        string memory baseURI = _baseURI();\r\n        string memory _strId = IGoEHelper(0x53Eb3E1E02C8Eb8d185a074520BD52ECe09F7A43).toString(tokenId);\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, _strId , _baseExtention)) : \"\";\r\n    }\r\n    \r\n    function mint(address to, address token) external payable  {\r\n        require(!_paused, \"GoE721Basic: minting is paused\");\r\n        require(_mintIdx <= (_maxSupply-_reservedAmount), \"GoE721Basic: no more mints\");\r\n        if(token == address(0)){\r\n            require(msg.value >= _mintCost[token], \"GoE721Basic: Min payment of minting cost is required\");\r\n        }else{\r\n            require(recieve20Token(token, msg.sender, mintCostPerToken(token)), \"GoE721Basic: Cannot confirm payment\");\r\n        }\r\n        _mint(to, _mintIdx);\r\n        _mintIdx += 1;\r\n    }\r\n\r\n    function supportsInterface(bytes4) public pure returns (bool) {\r\n        // need to check interfaces\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"GoE721Basic: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n \r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"GoE721Basic: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public{\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"GoE721Basic: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"GoE721Basic: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"GoE721Basic: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        require(operator != msg.sender, \"GoE721Basic: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(address from,address to,uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"GoE721Basic: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) public {\r\n\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes memory _data) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"GoE721Basic: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _baseURI() public view returns (string memory) {\r\n\r\n        return _baseUrl;\r\n    }\r\n\r\n    function _safeTransfer(address from,address to,uint256 tokenId,bytes memory) internal  {\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function exists(uint256 tokenId) external view returns(bool){\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view  returns (bool) {\r\n\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view  returns (bool) {\r\n        require(_exists(tokenId), \"GoE721Basic: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal  {\r\n        // require(to != address(0), \"GoE: mint to the zero address\");\r\n        // require(!_exists(tokenId), \"GoE: token already minted\");\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal  {\r\n        address owner = ownerOf(tokenId);\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(address from,address to,uint256 tokenId) internal  {\r\n        require(ownerOf(tokenId) == from, \"GoE721Basic: transfer of token that is not own\");\r\n        require(to != address(0), \"GoE721Basic: transfer to the zero address\");\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal  {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    fallback () external payable {\r\n        address addr = _attribProxy;\r\n        assembly {\r\n            let freememstart := mload(0x40)\r\n            calldatacopy(freememstart, 0, calldatasize())\r\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\r\n            returndatacopy(freememstart, 0, returndatasize())\r\n            switch success\r\n            case 0 { revert(freememstart, returndatasize()) }\r\n            default { return(freememstart, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"mintCostPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"walletNFTs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoE721Basic", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fa53c405a66f1adf71c0134d92ebb1f6a2256eeb37b1be51a597702f8bb13dc0"}]}