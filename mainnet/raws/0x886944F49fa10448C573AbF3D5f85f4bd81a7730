{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LootStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n/*\\nLootStats.sol\\nLootverse Utility contract to gather stats for Loot (For Adventurers) Bags, Genesis Adventurers and other \\\"bag\\\" like contracts.\\n\\nSee OG Loot Contract for lists of all possible items.\\nhttps://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7\\n\\nAll functions are made public incase they are useful but the expected use is through the main\\n4 stats functions:\\n\\n- getGreatness()\\n- getLevel()\\n- getRating()\\n- getNumberOfItemsInClass()\\n- getGreatnessByItem()\\n- getLevelByItem()\\n- getRatingByItem()\\n- getClassByItem()\\n\\nEach of these take a Loot Bag ID.  This contract relies and stores the most current LootClassification contract.\\n\\nThe LootStats(_TBD_) contract can be used to get \\\"bag\\\" level stats for Loot bag's tokenID.\\n\\nSo a typical use might be:\\n\\n// get stats for loot bag# 1234\\n{\\n    LootStats stats = \\n        LootStats(_TBD_);\\n\\n    uint256 level = stats.getLevel(1234);\\n    uint256 greatness = stats.getGreatness(1234);\\n    uint256 rating = stats.getRating(1234);\\n    uint256 level = stats.getLevel([1234,1234,1234,1234,1234,1234,1234,1234]);\\n    uint256 greatness = stats.getGreatness([1234,1234,1234,1234,1234,1234,1234,1234]);\\n    uint256 rating = stats.getRating([1234,1234,1234,1234,1234,1234,1234,1234]);\\n\\n\\n}\\n*/\\ninterface ILootClassification {\\n    enum Type\\n    {\\n        Weapon,\\n        Chest,\\n        Head,\\n        Waist,\\n        Foot,\\n        Hand,\\n        Neck,\\n        Ring\\n    }\\n    enum Class\\n    {\\n        Warrior,\\n        Hunter,\\n        Mage,\\n        Any\\n    }\\n    function getLevel(Type lootType, uint256 index) external pure returns (uint256);\\n    function getClass(Type lootType, uint256 index) external pure returns (Class);\\n    function weaponComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function chestComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function headComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function waistComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function footComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function handComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function ringComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n    function neckComponents(uint256 tokenId) external pure returns (uint256[6] memory);\\n}\\n\\ncontract LootStats is Ownable\\n{\\n    ILootClassification private lootClassification;    \\n    address public lootClassificationAddress;\\n    ILootClassification.Type[8] private itemTypes = [ILootClassification.Type.Weapon, ILootClassification.Type.Chest, ILootClassification.Type.Head, ILootClassification.Type.Waist, ILootClassification.Type.Foot, ILootClassification.Type.Hand, ILootClassification.Type.Neck, ILootClassification.Type.Ring];\\n\\n    constructor(address lootClassification_) {\\n        lootClassificationAddress = lootClassification_;\\n        lootClassification = ILootClassification(lootClassificationAddress);\\n    }\\n\\n    function setLootClassification(address lootClassification_) public onlyOwner {\\n        lootClassificationAddress = lootClassification_;\\n        lootClassification = ILootClassification(lootClassificationAddress);\\n    }\\n\\n    function getLevel(uint256 tokenId) public view returns (uint256)\\n    {\\n        return getLevel([tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId]);\\n    }\\n\\n    function getLevel(uint256[8] memory tokenId) public view returns (uint256)\\n    {\\n        uint256 level;\\n        for(uint8 i=0; i < itemTypes.length; i++) {\\n            if (tokenId[i] == 0) \\n                level += 1;\\n            else\\n                level += getLevelByItem(itemTypes[i], tokenId[i]);    \\n        }     \\n    \\n        return level;\\n    }\\n\\n    function getGreatness(uint256 tokenId) public view returns (uint256)\\n    {\\n        return getGreatness([tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId]);\\n    }\\n\\n    function getGreatness(uint256[8] memory tokenId) public view returns (uint256)\\n    {\\n        uint256 greatness;\\n        for(uint8 i=0; i < itemTypes.length; i++) {\\n            if (tokenId[i] == 0) \\n                greatness += 15;\\n            else\\n                greatness += getGreatnessByItem(itemTypes[i], tokenId[i]);    \\n        }\\n\\n        return greatness;\\n    }\\n\\n    function getRating(uint256 tokenId) public view returns (uint256)\\n    {   \\n        return getRating([tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId]);\\n    }\\n\\n    function getRating(uint256[8] memory tokenId) public view returns (uint256)\\n    {   \\n        uint256 rating;\\n        for(uint8 i=0; i < itemTypes.length; i++) {\\n            if (tokenId[i] == 0) \\n                rating += 15;\\n            else\\n                rating += getRatingByItem(itemTypes[i], tokenId[i]);    \\n        }\\n\\n        return rating;\\n    }\\n\\n    function getNumberOfItemsInClass(ILootClassification.Class classType, uint256 tokenId) public view returns (uint256)\\n    {   \\n        return getNumberOfItemsInClass(classType, [tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId,tokenId]);\\n    }\\n\\n    function getNumberOfItemsInClass(ILootClassification.Class classType, uint256[8] memory tokenId) public view returns (uint256)\\n    {   \\n        uint256 count;\\n        for(uint8 i=0; i < itemTypes.length; i++) {\\n            if (classType == getClassByItem(itemTypes[i], tokenId[i])) {\\n                count++;\\n            }   \\n        }\\n        return count;\\n    }\\n\\n    function getGreatnessByItem(ILootClassification.Type lootType, uint256 tokenId) \\n        public view returns (uint256) \\n    {        \\n        return _getComponent(5, lootType, tokenId);\\n    }\\n\\n    function getLevelByItem(ILootClassification.Type lootType, uint256 tokenId)\\n        public view returns (uint256) \\n    {\\n        return lootClassification.getLevel(lootType, _getComponent(0, lootType, tokenId));\\n    }\\n\\n    function getRatingByItem(ILootClassification.Type lootType, uint256 tokenId) \\n        public view returns (uint256)\\n    {   \\n        return getLevelByItem(lootType, tokenId) * getGreatnessByItem(lootType, tokenId);\\n    }\\n\\n    function getClassByItem(ILootClassification.Type lootType, uint256 tokenId) \\n        public view returns (ILootClassification.Class) \\n    {\\n        return lootClassification.getClass(lootType, _getComponent(0, lootType, tokenId));\\n    }\\n    function _getComponent(uint256 componentId, ILootClassification.Type lootType, uint256 tokenId)\\n        internal view returns (uint256)\\n    {\\n        if (lootType == ILootClassification.Type.Weapon) {\\n            return lootClassification.weaponComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Chest) {\\n            return lootClassification.chestComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Head) {\\n            return lootClassification.headComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Waist) {\\n            return lootClassification.waistComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Foot) {\\n            return lootClassification.footComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Hand) {\\n            return lootClassification.handComponents(tokenId)[componentId];\\n        } else if (lootType == ILootClassification.Type.Ring) {\\n            return lootClassification.ringComponents(tokenId)[componentId];\\n        } else {\\n            return lootClassification.neckComponents(tokenId)[componentId];\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lootClassification_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Type\",\"name\":\"lootType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClassByItem\",\"outputs\":[{\"internalType\":\"enum ILootClassification.Class\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGreatness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tokenId\",\"type\":\"uint256[8]\"}],\"name\":\"getGreatness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Type\",\"name\":\"lootType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGreatnessByItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tokenId\",\"type\":\"uint256[8]\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Type\",\"name\":\"lootType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevelByItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Class\",\"name\":\"classType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfItemsInClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Class\",\"name\":\"classType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[8]\",\"name\":\"tokenId\",\"type\":\"uint256[8]\"}],\"name\":\"getNumberOfItemsInClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tokenId\",\"type\":\"uint256[8]\"}],\"name\":\"getRating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILootClassification.Type\",\"name\":\"lootType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRatingByItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootClassificationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lootClassification_\",\"type\":\"address\"}],\"name\":\"setLootClassification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LootStats", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000004190ef3d7c91c881d335725b6bb5d45236b22ae", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}