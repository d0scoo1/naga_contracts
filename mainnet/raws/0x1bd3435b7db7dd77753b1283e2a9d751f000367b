{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.24;\r\n  \r\n//@title WitToken\r\n//@author(luoyuanq233@gmail.com) \r\n//@dev \u8be5\u5408\u7ea6\u53c2\u8003\u81eaopenzeppelin\u7684erc20\u5b9e\u73b0\r\n//1.\u4f7f\u7528openzeppelin\u7684SafeMath\u5e93\u9632\u6b62\u8fd0\u7b97\u6ea2\u51fa\r\n//2.\u4f7f\u7528openzeppelin\u7684Ownable,Roles,RBAC\u6765\u505a\u6743\u9650\u63a7\u5236,\u81ea\u5b9a\u4e49\u4e86ceo,coo,cro\u7b49\u89d2\u8272  \r\n//3.ERC20\u6269\u5c55\u4e86ERC20Basic\uff0c\u5b9e\u73b0\u4e86\u6388\u6743\u8f6c\u79fb\r\n//4.BasicToken,StandardToken,PausableToken\u5747\u662ferc20\u7684\u5177\u4f53\u5b9e\u73b0\r\n//5.BlackListToken\u52a0\u5165\u9ed1\u540d\u5355\u65b9\u6cd5\r\n//6.TwoPhaseToken\u53ef\u4ee5\u53d1\u884c\u548c\u8d4e\u56de\u8d44\u4ea7,\u5e76\u91c7\u7528\u7ecf\u529e\u590d\u6838\u7684\u4e8c\u9636\u6bb5\u63d0\u4ea4\r\n//7.UpgradedStandardToken\u53c2\u8003\u81eaTetherUSD\u5408\u7ea6,\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5408\u7ea6\u5347\u7ea7erc20\u7684\u65b9\u6cd5\r\n//8.\u53ef\u4ee5\u8bbe\u7f6e\u4ea4\u6613\u7684\u624b\u7eed\u8d39\u7387\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   constructor() public {\r\n      owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n  /**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr) internal {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr) internal {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr) view internal {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr) view internal returns (bool) {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n *      Supports unlimited numbers of roles and addresses.\r\n *      See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC is Ownable {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_CEO = \"ceo\";\r\n  string public constant ROLE_COO = \"coo\";//\u8fd0\u8425\r\n  string public constant ROLE_CRO = \"cro\";//\u98ce\u63a7\r\n  string public constant ROLE_MANAGER = \"manager\";//\u7ecf\u529e\u5458\r\n  string public constant ROLE_REVIEWER = \"reviewer\";//\u5ba1\u6838\u5458\r\n  \r\n  /**\r\n   * @dev constructor. Sets msg.sender as ceo by default\r\n   */\r\n  constructor() public{\r\n    addRole(msg.sender, ROLE_CEO);\r\n  }\r\n  \r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName) view internal {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName) view public returns (bool) {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  function ownerAddCeo(address addr) onlyOwner public {\r\n    addRole(addr, ROLE_CEO);\r\n  }\r\n  \r\n  function ownerRemoveCeo(address addr) onlyOwner public{\r\n    removeRole(addr, ROLE_CEO);\r\n  }\r\n\r\n  function ceoAddCoo(address addr) onlyCEO public {\r\n    addRole(addr, ROLE_COO);\r\n  }\r\n  \r\n  function ceoRemoveCoo(address addr) onlyCEO public{\r\n    removeRole(addr, ROLE_COO);\r\n  }\r\n  \r\n  function cooAddManager(address addr) onlyCOO public {\r\n    addRole(addr, ROLE_MANAGER);\r\n  }\r\n  \r\n  function cooRemoveManager(address addr) onlyCOO public {\r\n    removeRole(addr, ROLE_MANAGER);\r\n  }\r\n  \r\n  function cooAddReviewer(address addr) onlyCOO public {\r\n    addRole(addr, ROLE_REVIEWER);\r\n  }\r\n  \r\n  function cooRemoveReviewer(address addr) onlyCOO public {\r\n    removeRole(addr, ROLE_REVIEWER);\r\n  }\r\n  \r\n  function cooAddCro(address addr) onlyCOO public {\r\n    addRole(addr, ROLE_CRO);\r\n  }\r\n  \r\n  function cooRemoveCro(address addr) onlyCOO public {\r\n    removeRole(addr, ROLE_CRO);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName) internal {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName) internal {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev modifier to scope access to ceo\r\n   * // reverts\r\n   */\r\n  modifier onlyCEO() {\r\n    checkRole(msg.sender, ROLE_CEO);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to coo\r\n   * // reverts\r\n   */\r\n  modifier onlyCOO() {\r\n    checkRole(msg.sender, ROLE_COO);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev modifier to scope access to cro\r\n   * // reverts\r\n   */\r\n  modifier onlyCRO() {\r\n    checkRole(msg.sender, ROLE_CRO);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev modifier to scope access to manager\r\n   * // reverts\r\n   */\r\n  modifier onlyMANAGER() {\r\n    checkRole(msg.sender, ROLE_MANAGER);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev modifier to scope access to reviewer\r\n   * // reverts\r\n   */\r\n  modifier onlyREVIEWER() {\r\n    checkRole(msg.sender, ROLE_REVIEWER);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, RBAC {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n  \r\n  uint256 public basisPointsRate;//\u624b\u7eed\u8d39\u7387 \r\n  uint256 public maximumFee;//\u6700\u5927\u624b\u7eed\u8d39 \r\n  address public assetOwner;//\u6536\u53d6\u7684\u624b\u7eed\u8d39\u548c\u589e\u53d1\u7684\u8d44\u4ea7\u90fd\u5230\u8fd9\u4e2a\u5730\u5740\u4e0a, \u8d4e\u56de\u8d44\u4ea7\u65f6\u4f1a\u4ece\u8fd9\u4e2a\u5730\u5740\u9500\u6bc1\u8d44\u4ea7 \r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\r\n    if (fee > maximumFee) {\r\n        fee = maximumFee;\r\n    }\r\n    uint256 sendAmount = _value.sub(fee);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n    if (fee > 0) {\r\n        balances[assetOwner] = balances[assetOwner].add(fee);\r\n        emit Transfer(msg.sender, assetOwner, fee);\r\n    }\r\n    \r\n    emit Transfer(msg.sender, _to, sendAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken  {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\r\n        if (fee > maximumFee) {\r\n            fee = maximumFee;\r\n        }\r\n    uint256 sendAmount = _value.sub(fee);\r\n    \r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(sendAmount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    if (fee > 0) {\r\n            balances[assetOwner] = balances[assetOwner].add(fee);\r\n            emit Transfer(_from, assetOwner, fee);\r\n        }\r\n    emit Transfer(_from, _to, sendAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is RBAC {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the ceo to pause, triggers stopped state\r\n   */\r\n  function pause() onlyCEO whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the ceo to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyCEO whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract BlackListToken is PausableToken  {\r\n\r\n  \r\n    function getBlackListStatus(address _maker) external view returns (bool) {\r\n        return isBlackListed[_maker];\r\n    }\r\n\r\n    mapping (address => bool) public isBlackListed;\r\n    \r\n    function addBlackList (address _evilUser) public onlyCRO {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyCRO {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    function destroyBlackFunds (address _blackListedUser) public onlyCEO {\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint dirtyFunds = balanceOf(_blackListedUser);\r\n        balances[_blackListedUser] = 0;\r\n        totalSupply_ = totalSupply_.sub(dirtyFunds);\r\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n    event AddedBlackList(address _user);\r\n\r\n    event RemovedBlackList(address _user);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* \u589e\u53d1\u548c\u8d4e\u56detoken\u7531\u7ecf\u529e\u4eba\u548c\u590d\u6838\u4eba\u914d\u5408\u5b8c\u6210\r\n* 1.\u7531\u7ecf\u529e\u4eba\u89d2\u8272\u5148\u6267\u884csubmitIssue\u6216submitRedeem;\r\n* 2.\u590d\u6838\u4eba\u89d2\u8272\u518d\u6765\u6267\u884ccomfirmIsses\u6216comfirmRedeem;\r\n* 3.\u4e24\u8005\u63d0\u4ea4\u7684\u53c2\u6570\u4e00\u81f4\uff0c\u5219\u589e\u53d1\u548c\u8d4e\u56de\u624d\u80fd\u6210\u529f\r\n* 4.\u7ecf\u529e\u4eba\u63d0\u4ea4\u6570\u636e\u540e\uff0c\u590d\u6838\u4eba\u6267\u884c\u6210\u529f\u540e\uff0c\u9700\u8981\u7ecf\u529e\u4eba\u518d\u6b21\u63d0\u4ea4\u624d\u80fd\u518d\u6b21\u6267\u884c\r\n**/\r\ncontract TwoPhaseToken is BlackListToken{\r\n    \r\n    //\u4fdd\u5b58\u7ecf\u529e\u4eba\u63d0\u4ea4\u7684\u53c2\u6570\r\n    struct MethodParam {\r\n        string method; //\u65b9\u6cd5\u540d\r\n        uint value;  //\u589e\u53d1\u6216\u8005\u8d4e\u56de\u7684\u6570\u91cf\r\n        bool state;  //true\u8868\u793a\u7ecf\u529e\u4eba\u6709\u63d0\u4ea4\u6570\u636e,\u590d\u6838\u4eba\u6267\u884c\u6210\u529f\u540e\u53d8\u4e3afalse\r\n    }\r\n    \r\n    mapping (string => MethodParam) params;\r\n    \r\n    //\u65b9\u6cd5\u540d\u5e38\u91cf \r\n    string public constant ISSUE_METHOD = \"issue\";\r\n    string public constant REDEEM_METHOD = \"redeem\";\r\n    \r\n    \r\n    //\u7ecf\u529e\u4eba\u63d0\u4ea4\u589e\u53d1\u6570\u91cf\r\n    function submitIssue(uint _value) public onlyMANAGER {\r\n        params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);\r\n        emit SubmitIsses(msg.sender,_value);\r\n    }\r\n    \r\n    //\u590d\u6838\u4eba\u7b2c\u4e8c\u6b21\u786e\u8ba4\u589e\u53d1\u6570\u91cf\u5e76\u6267\u884c\r\n    function comfirmIsses(uint _value) public onlyREVIEWER {\r\n       \r\n        require(params[ISSUE_METHOD].value == _value);\r\n        require(params[ISSUE_METHOD].state == true);\r\n        \r\n        balances[assetOwner]=balances[assetOwner].add(_value);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        params[ISSUE_METHOD].state=false; \r\n        emit ComfirmIsses(msg.sender,_value);\r\n    }\r\n    \r\n    //\u7ecf\u529e\u4eba\u63d0\u4ea4\u8d4e\u56de\u6570\u91cf\r\n    function submitRedeem(uint _value) public onlyMANAGER {\r\n        params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);\r\n         emit SubmitRedeem(msg.sender,_value);\r\n    }\r\n    \r\n    //\u590d\u6838\u4eba\u7b2c\u4e8c\u6b21\u786e\u8ba4\u8d4e\u56de\u6570\u91cf\u5e76\u6267\u884c\r\n    function comfirmRedeem(uint _value) public onlyREVIEWER {\r\n       \r\n       require(params[REDEEM_METHOD].value == _value);\r\n       require(params[REDEEM_METHOD].state == true);\r\n       \r\n       balances[assetOwner]=balances[assetOwner].sub(_value);\r\n       totalSupply_ = totalSupply_.sub(_value);\r\n       params[REDEEM_METHOD].state=false;\r\n       emit ComfirmIsses(msg.sender,_value);\r\n    }\r\n    \r\n    //\u6839\u636e\u65b9\u6cd5\u540d\uff0c\u67e5\u770b\u7ecf\u529e\u4eba\u63d0\u4ea4\u7684\u53c2\u6570\r\n    function getMethodValue(string _method) public view returns(uint){\r\n        return params[_method].value;\r\n    }\r\n    \r\n    //\u6839\u636e\u65b9\u6cd5\u540d\uff0c\u67e5\u770b\u7ecf\u529e\u4eba\u662f\u5426\u6709\u63d0\u4ea4\u6570\u636e\r\n    function getMethodState(string _method) public view returns(bool) {\r\n      return params[_method].state;\r\n    }\r\n   \r\n     event SubmitRedeem(address submit, uint _value);\r\n     event ComfirmRedeem(address comfirm, uint _value);\r\n     event SubmitIsses(address submit, uint _value);\r\n     event ComfirmIsses(address comfirm, uint _value);\r\n\r\n    \r\n}\r\n\r\n\r\n\r\ncontract UpgradedStandardToken {\r\n    // those methods are called by the legacy contract\r\n    function totalSupplyByLegacy() public view returns (uint256);\r\n    function balanceOfByLegacy(address who) public view returns (uint256);\r\n    function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);\r\n    function allowanceByLegacy(address owner, address spender) public view returns (uint256);\r\n    function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);\r\n    function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);\r\n    function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);\r\n    function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ncontract WitToken is TwoPhaseToken {\r\n    string  public  constant name = \"Wealth in Tokens\";\r\n    string  public  constant symbol = \"WIT\";\r\n    uint8   public  constant decimals = 18;\r\n    address public upgradedAddress;\r\n    bool public deprecated;\r\n\r\n    modifier validDestination( address to ) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    constructor ( uint _totalTokenAmount ) public {\r\n        basisPointsRate = 0;\r\n        maximumFee = 0;\r\n        totalSupply_ = _totalTokenAmount;\r\n        balances[msg.sender] = _totalTokenAmount;\r\n        deprecated = false;\r\n        assetOwner = msg.sender;\r\n        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);\r\n    }\r\n    \r\n    \r\n    \r\n     // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n     function totalSupply() public view returns (uint256) {\r\n         if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();\r\n        } else {\r\n            return totalSupply_;\r\n        }\r\n    }\r\n    \r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n         if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);\r\n        } else {\r\n           return super.balanceOf(_owner);\r\n        }\r\n    }\r\n\r\n    \r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        require(!isBlackListed[msg.sender]);\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\r\n        } else {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);\r\n        } else {\r\n           return super.allowance(_owner, _spender);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        require(!isBlackListed[_from]);\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\r\n        } else {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n       \r\n    }\r\n    \r\n    \r\n     // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n     function approve(address _spender, uint256 _value) public returns (bool) {\r\n          if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\r\n        } else {\r\n            return super.approve(_spender, _value);\r\n        } \r\n    }\r\n    \r\n    \r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function increaseApproval(address _spender, uint _value) public returns (bool) {\r\n         if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);\r\n        } else {\r\n            return super.increaseApproval(_spender, _value);\r\n        } \r\n    }\r\n\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function decreaseApproval(address _spender, uint _value) public returns (bool) {\r\n        if (deprecated) {\r\n            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);\r\n        } else {\r\n            return super.decreaseApproval(_spender, _value);\r\n        } \r\n   }\r\n   \r\n   \r\n    // deprecate current contract in favour of a new one\r\n    function deprecate(address _upgradedAddress) public onlyCEO whenPaused {\r\n        deprecated = true;\r\n        upgradedAddress = _upgradedAddress;\r\n        emit Deprecate(_upgradedAddress);\r\n    }\r\n    \r\n    // Called when contract is deprecated\r\n    event Deprecate(address newAddress);\r\n    \r\n    \r\n   /**\r\n   * @dev Set up transaction fees\r\n   * @param newBasisPoints  A few ten-thousandth (\u8bbe\u7f6e\u624b\u7eed\u8d39\u7387\u4e3a\u4e07\u5206\u4e4b\u51e0)\r\n   * @param newMaxFee Maximum fee (\u8bbe\u7f6e\u6700\u5927\u624b\u7eed\u8d39,\u4e0d\u9700\u8981\u6dfb\u52a0decimals)\r\n   */\r\n    function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {\r\n       \r\n        basisPointsRate = newBasisPoints;\r\n        maximumFee = newMaxFee.mul(uint(10)**decimals);\r\n        emit FeeParams(basisPointsRate, maximumFee);\r\n    }\r\n    \r\n\r\n    function transferAssetOwner(address newAssetOwner) public onlyCEO {\r\n      require(newAssetOwner != address(0));\r\n      assetOwner = newAssetOwner;\r\n      emit TransferAssetOwner(assetOwner, newAssetOwner);\r\n    }\r\n    \r\n    event TransferAssetOwner(address assetOwner, address newAssetOwner);\r\n    \r\n     // Called if contract ever adds fees\r\n    event FeeParams(uint feeBasisPoints, uint maxFee);\r\n    \r\n    \r\n    \r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_CRO\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooAddReviewer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_method\",\"type\":\"string\"}],\"name\":\"getMethodState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAssetOwner\",\"type\":\"address\"}],\"name\":\"transferAssetOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"comfirmRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ownerRemoveCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooAddManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_REVIEWER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ceoAddCoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REDEEM_METHOD\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooRemoveManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ownerAddCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setFeeParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_COO\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"comfirmIsses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_method\",\"type\":\"string\"}],\"name\":\"getMethodValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooRemoveReviewer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooAddCro\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISSUE_METHOD\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MANAGER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ceoRemoveCoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cooRemoveCro\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"assetOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAssetOwner\",\"type\":\"address\"}],\"name\":\"TransferAssetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"FeeParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"submit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SubmitRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"comfirm\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ComfirmRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"submit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SubmitIsses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"comfirm\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ComfirmIsses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "WitToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://faa480f580d18a6be64c1dfb7c204a8a01a0dafc3f190cc7e233dd054b96d3ea"}]}