{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\"},\"LDCStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\n\\r\\ncontract LDCStakingRewards is IERC721Receiver {\\r\\n\\r\\n    uint256 public constant ONE_DAY_IN_SECONDS = 86400;\\r\\n    uint256 public LDCTokensPerDayStaked = 3e18;\\r\\n    mapping(uint256 =\\u003e stakingInfo) public nftStakes;\\r\\n    mapping(address =\\u003e uint256[]) public stakedNftsByAddress;\\r\\n    address private owner;\\r\\n    IERC20 public immutable LDCToken;\\r\\n    IERC721 public immutable LDCNFT;\\r\\n    bool public stakingEnabled;\\r\\n\\r\\n    struct stakingInfo {\\r\\n        address nftOwner;\\r\\n        uint64 initTimestamp;\\r\\n        uint128 rewardsClaimed;\\r\\n    }\\r\\n\\r\\n    event Staked(address user, uint256 NFTid);\\r\\n    event Unstaked(address user, uint256 NFTid);\\r\\n    event Claimed(address user, uint256 rewardAmount);\\r\\n\\r\\n    constructor(address _LDCToken, address _LDCNFT) {\\r\\n        /* \\r\\n            Once the contract is deployed, the owner of the LDCToken contract \\r\\n            must assign this contract (LDCStakingRewards) the MINTER_ROLE\\r\\n\\r\\n            MINTER_ROLE is required so users can get their rewards through the claimRewards() function\\r\\n        */\\r\\n        owner = msg.sender;\\r\\n        LDCToken = IERC20(_LDCToken);\\r\\n        LDCNFT = IERC721(_LDCNFT); // https://etherscan.io/address/0xacc908bbcd7f50f2e07afaec5455b73aea1d4f7d#code\\r\\n        stakingEnabled = true; // Staking will be enabled as soon as the contract is deployed\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"New owner is the zero address\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @info Used to enable/disable the staking function\\r\\n        If stakingEnabled users will not be able to stake their NFTs\\r\\n        Current staked NFTs can still be claimed\\r\\n    */\\r\\n    function toggleStaking() external onlyOwner {\\r\\n        stakingEnabled = !stakingEnabled;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param newRewardsPerDay the new amount of LilDudeClub tokens that will be rewarded per day of stake\\r\\n    */\\r\\n    function updateRewardsPerDay(uint256 newRewardsPerDay) external onlyOwner {\\r\\n        LDCTokensPerDayStaked = newRewardsPerDay;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param NFTid the id of the LDC collection NFT\\r\\n\\r\\n        @info In order to call this function msg.sender should ERC721.approve this contract address\\r\\n        as the NFT will be transferred to this smart contract during the staking period\\r\\n    */\\r\\n\\r\\n    function stakeLDC(uint256 NFTid) external {\\r\\n        require(stakingEnabled, \\\"Staking is currently disabled\\\");\\r\\n\\r\\n        nftStakes[NFTid] = stakingInfo({\\r\\n            nftOwner: msg.sender,\\r\\n            initTimestamp: uint64(block.timestamp),\\r\\n            rewardsClaimed: 0\\r\\n        });\\r\\n\\r\\n        stakedNftsByAddress[msg.sender].push(NFTid);\\r\\n\\r\\n        // Transferring the NFT to this contract\\r\\n        LDCNFT.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            NFTid,\\r\\n            bytes(\\\"stake\\\")\\r\\n        );\\r\\n\\r\\n        emit Staked(msg.sender, NFTid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param NFTid array of ids of the LDC collection NFT\\r\\n\\r\\n        @info Works the same way as stakeLDC() but allows to stake multiple NFTs at once\\r\\n        In order to call this function msg.sender should ERC721.approve this contract address\\r\\n        for each of the NFTs staked\\r\\n    */\\r\\n    function stakeMultipleLDC(uint256[] calldata NFTid) external {\\r\\n        require(stakingEnabled, \\\"Staking is currently disabled\\\");\\r\\n        \\r\\n        uint256 len = NFTid.length;\\r\\n        for (uint256 i; i \\u003c len; ++i) {\\r\\n            nftStakes[NFTid[i]] = stakingInfo({\\r\\n                nftOwner: msg.sender,\\r\\n                initTimestamp: uint64(block.timestamp),\\r\\n                rewardsClaimed: 0\\r\\n            });\\r\\n\\r\\n            stakedNftsByAddress[msg.sender].push(NFTid[i]);\\r\\n\\r\\n            // Transferring the NFT to this contract\\r\\n            LDCNFT.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                NFTid[i],\\r\\n                bytes(\\\"stake\\\")\\r\\n            );\\r\\n            emit Staked(msg.sender, NFTid[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param NFTid the id of the LDC collection NFT\\r\\n\\r\\n        @info Claims the rewards and then unstake the NFTid\\r\\n    */\\r\\n    function unstakeLDC(uint256 NFTid) external {\\r\\n        require(nftStakes[NFTid].nftOwner == msg.sender, \\\"You do not own this NFT\\\");\\r\\n        \\r\\n        // Claiming the rewards for this NFT\\r\\n        uint256 totalDaysStaked = (block.timestamp - nftStakes[NFTid].initTimestamp) / ONE_DAY_IN_SECONDS;\\r\\n        uint256 tokensToMintAndSend = uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n        uint256 tokensAlreadyRewarded = uint128(nftStakes[NFTid].rewardsClaimed);\\r\\n        uint256 finalReward = tokensToMintAndSend - tokensAlreadyRewarded;\\r\\n\\r\\n        // Updating the stakedNftsByAddress array\\r\\n        uint256 indexToRemove;\\r\\n        uint256 arrayLength = stakedNftsByAddress[msg.sender].length;\\r\\n        for (uint256 i; i \\u003c arrayLength; ++i) {\\r\\n            if (stakedNftsByAddress[msg.sender][i] == NFTid){\\r\\n                indexToRemove = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (indexToRemove != arrayLength - 1){\\r\\n             // Moving the last element of the array to the position that we need to remove, then deleting the last position\\r\\n            stakedNftsByAddress[msg.sender][indexToRemove] = stakedNftsByAddress[msg.sender][arrayLength - 1];\\r\\n        }\\r\\n        stakedNftsByAddress[msg.sender].pop();\\r\\n\\r\\n        delete nftStakes[NFTid];\\r\\n\\r\\n        // Transferring the reward tokens\\r\\n        if (finalReward \\u003e 0){\\r\\n            LDCToken.mint(msg.sender, finalReward);\\r\\n        }\\r\\n\\r\\n        // Giving the user back his previously staked NFT\\r\\n        LDCNFT.safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            NFTid,\\r\\n            bytes(\\\"unstake\\\")\\r\\n        );\\r\\n\\r\\n        emit Unstaked(msg.sender, NFTid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param NFTid array of ids of the LDC collection NFT to unstake\\r\\n\\r\\n        @info Claims the rewards and then unstakes the NTFs of the NFTid array\\r\\n    */\\r\\n    function unstakeMultipleLDC(uint256[] calldata NFTid) external {\\r\\n        uint256 len = NFTid.length;\\r\\n        uint256 totalDaysStaked;\\r\\n        uint256 tokensToMintAndSend;\\r\\n        uint256 tokensAlreadyRewarded;\\r\\n        uint256 indexToRemove;\\r\\n        uint256 arrayLength;\\r\\n        for (uint256 i; i \\u003c len; ++i) {\\r\\n            require(nftStakes[NFTid[i]].nftOwner == msg.sender, \\\"You do not own this NFT\\\");\\r\\n            totalDaysStaked = (block.timestamp - nftStakes[NFTid[i]].initTimestamp) / ONE_DAY_IN_SECONDS;\\r\\n            tokensToMintAndSend += uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n            tokensAlreadyRewarded += uint128(nftStakes[NFTid[i]].rewardsClaimed);\\r\\n            delete nftStakes[NFTid[i]];\\r\\n\\r\\n            // Updating the stakedNftsByAddress array\\r\\n            arrayLength = stakedNftsByAddress[msg.sender].length;\\r\\n            for (uint256 j; j \\u003c arrayLength; ++j) {\\r\\n                if (stakedNftsByAddress[msg.sender][j] == NFTid[i]){\\r\\n                    indexToRemove = j;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (indexToRemove != arrayLength - 1){\\r\\n                // Moving the last element of the array to the position that we need to remove, then deleting the last position\\r\\n                stakedNftsByAddress[msg.sender][indexToRemove] = stakedNftsByAddress[msg.sender][arrayLength - 1];\\r\\n            }\\r\\n            stakedNftsByAddress[msg.sender].pop();\\r\\n        }\\r\\n\\r\\n        // Transferring the reward tokens\\r\\n        uint256 finalReward = tokensToMintAndSend - tokensAlreadyRewarded;\\r\\n        if(finalReward \\u003e 0){\\r\\n            LDCToken.mint(msg.sender, finalReward);\\r\\n        }\\r\\n\\r\\n        // Giving the user back his previously staked NFTs\\r\\n        for (uint256 i; i \\u003c len; ++i) {\\r\\n            LDCNFT.safeTransferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                NFTid[i],\\r\\n                bytes(\\\"unstake\\\")\\r\\n            );\\r\\n            emit Unstaked(msg.sender, NFTid[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @param NFTid the id of the LDC collection NFT that was previously staked\\r\\n    */\\r\\n    function claimRewards() external {\\r\\n        uint256[] memory allStakedTokens = getCurrentStakedTokensByUser(msg.sender);\\r\\n        uint256 len = allStakedTokens.length;\\r\\n        require(len \\u003e 0, \\\"No NFTs currently staked\\\");\\r\\n        uint128 tokensToMintAndSend;\\r\\n        uint128 tokensAlreadyRewarded;\\r\\n        uint256 totalDaysStaked;\\r\\n        for (uint256 i; i \\u003c len; ++i) {\\r\\n            totalDaysStaked = (block.timestamp - nftStakes[allStakedTokens[i]].initTimestamp) / ONE_DAY_IN_SECONDS;\\r\\n            // 3 tokens per day and per NFT staked\\r\\n            tokensToMintAndSend += uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n            tokensAlreadyRewarded += uint128(nftStakes[allStakedTokens[i]].rewardsClaimed);\\r\\n            nftStakes[allStakedTokens[i]].rewardsClaimed = uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n        }\\r\\n\\r\\n        uint256 finalReward = tokensToMintAndSend - tokensAlreadyRewarded;\\r\\n        require(finalReward \\u003e 0, \\\"No rewards available yet\\\");\\r\\n        LDCToken.mint(msg.sender, finalReward);\\r\\n        emit Claimed(msg.sender, finalReward);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Number of NFTs currently staked in the contract\\r\\n    */\\r\\n    function getCurrentTotalStakedTokens() public view returns (uint256)\\r\\n    {\\r\\n        return LDCNFT.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Allows the users to check the token IDs they have currently staked in the contract\\r\\n    */\\r\\n    function getCurrentStakedTokensByUser(address user) public view returns (uint256[] memory)\\r\\n    {\\r\\n        return stakedNftsByAddress[user];\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Allows the users to see their total pending rewards\\r\\n    */\\r\\n    function getPendingRewards(address user) public view returns (uint256)\\r\\n    {\\r\\n        uint256[] memory allStakedTokens = getCurrentStakedTokensByUser(user);\\r\\n        uint256 len = allStakedTokens.length;\\r\\n        require(len \\u003e 0, \\\"No NFTs currently staked\\\");\\r\\n        uint128 tokensToMintAndSend;\\r\\n        uint128 tokensAlreadyRewarded;\\r\\n        uint256 totalDaysStaked;\\r\\n        for (uint256 i; i \\u003c len; ++i) {\\r\\n            totalDaysStaked = (block.timestamp - nftStakes[allStakedTokens[i]].initTimestamp) / ONE_DAY_IN_SECONDS;\\r\\n            // 3 tokens per day and per NFT staked\\r\\n            tokensToMintAndSend += uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n            tokensAlreadyRewarded += uint128(nftStakes[allStakedTokens[i]].rewardsClaimed);\\r\\n        }\\r\\n        uint256 finalReward = tokensToMintAndSend - tokensAlreadyRewarded;\\r\\n        return finalReward;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Allows the users to see their total pending rewards\\r\\n    */\\r\\n    function getPendingRewardsByNFT(uint256 NFTid) public view returns (uint256)\\r\\n    {\\r\\n        uint256 totalDaysStaked = (block.timestamp - nftStakes[NFTid].initTimestamp) / ONE_DAY_IN_SECONDS;\\r\\n        uint256 tokensToMintAndSend = uint128(totalDaysStaked * LDCTokensPerDayStaked);\\r\\n        uint256 tokensAlreadyRewarded = uint128(nftStakes[NFTid].rewardsClaimed);\\r\\n        return tokensToMintAndSend - tokensAlreadyRewarded;\\r\\n    }\\r\\n\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LDCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LDCNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTid\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTid\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LDCNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDCToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDCTokensPerDayStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentStakedTokensByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTid\",\"type\":\"uint256\"}],\"name\":\"getPendingRewardsByNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftStakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"initTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"rewardsClaimed\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTid\",\"type\":\"uint256\"}],\"name\":\"stakeLDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"NFTid\",\"type\":\"uint256[]\"}],\"name\":\"stakeMultipleLDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedNftsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTid\",\"type\":\"uint256\"}],\"name\":\"unstakeLDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"NFTid\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMultipleLDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardsPerDay\",\"type\":\"uint256\"}],\"name\":\"updateRewardsPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LDCStakingRewards", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000885a76eabe7cc9b230f071233a7b8c6d89566f15000000000000000000000000acc908bbcd7f50f2e07afaec5455b73aea1d4f7d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0578d048d2f80d20e221a92cc26e7a3f09cd52ddf9e1f9d3d20e37eac8971fc1"}]}