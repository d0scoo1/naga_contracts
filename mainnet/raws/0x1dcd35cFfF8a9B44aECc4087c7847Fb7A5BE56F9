{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PoolTemplate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n/**\\n * @author InsureDAO\\n * @title InsureDAO pool template contract\\n * SPDX-License-Identifier: GPL-3.0\\n */\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./InsureDAOERC20.sol\\\";\\nimport \\\"./interfaces/IPoolTemplate.sol\\\";\\nimport \\\"./interfaces/IUniversalMarket.sol\\\";\\n\\nimport \\\"./interfaces/IParameters.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IIndexTemplate.sol\\\";\\n\\ncontract PoolTemplate is InsureDAOERC20, IPoolTemplate, IUniversalMarket {\\n    /**\\n     * EVENTS\\n     */\\n    event Deposit(address indexed depositor, uint256 amount, uint256 mint);\\n    event WithdrawRequested(\\n        address indexed withdrawer,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);\\n    event Unlocked(uint256 indexed id, uint256 amount);\\n    event Insured(\\n        uint256 indexed id,\\n        uint256 amount,\\n        bytes32 target,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address insured,\\n        address agent,\\n        uint256 premium\\n    );\\n    event Redeemed(\\n        uint256 indexed id,\\n        address insured,\\n        bytes32 target,\\n        uint256 amount,\\n        uint256 payout\\n    );\\n    event CoverApplied(\\n        uint256 pending,\\n        uint256 payoutNumerator,\\n        uint256 payoutDenominator,\\n        uint256 incidentTimestamp,\\n        bytes32 merkleRoot,\\n        string rawdata,\\n        string memo\\n    );\\n    event BountyPaid(uint256 amount, address contributor, uint256[] ids);\\n\\n    event CreditIncrease(address indexed depositor, uint256 credit);\\n    event CreditDecrease(address indexed withdrawer, uint256 credit);\\n    event MarketStatusChanged(MarketStatus statusValue);\\n    event Paused(bool paused);\\n    event MetadataChanged(string metadata);\\n\\n    /**\\n     * Storage\\n     */\\n    /// @notice Market setting\\n    bool public initialized;\\n    bool public override paused;\\n    string public metadata;\\n\\n    /// @notice External contract call addresses\\n    IParameters public parameters;\\n    IRegistry public registry;\\n    IVault public vault;\\n\\n    /// @notice Market variables\\n    uint256 public attributionDebt; //pool's attribution for indices\\n    uint256 public override lockedAmount; //Liquidity locked when utilized\\n    uint256 public override totalCredit; //Liquidity from index\\n    uint256 public rewardPerCredit; //Times MAGIC_SCALE_1E6. To avoid reward decimal truncation *See explanation below.\\n    uint256 public pendingEnd; //pending time when paying out\\n\\n    /// @notice Market variables for margin account\\n    struct IndexInfo {\\n        uint256 credit; //How many credit (equal to liquidity) the index has allocated\\n        uint256 rewardDebt; // Reward debt. *See explanation below.\\n        uint256 index; //index number\\n        bool exist; //true if the index has allocated credit\\n    }\\n\\n    mapping(address => IndexInfo) public indices;\\n    address[] public indexList;\\n\\n    //\\n    // * We do some fancy math for premium calculation of indices.\\n    // Basically, any point in time, the amount of premium entitled to an index but is pending to be distributed is:\\n    //\\n    //   pending reward = (index.credit * rewardPerCredit) - index.rewardDebt\\n    //\\n    // When the pool receives premium, it updates rewardPerCredit\\n    //\\n    // Whenever an index deposits, withdraws credit to a pool, Here's what happens:\\n    //   1. The index receives the pending reward sent to the index vault.\\n    //   2. The index's rewardDebt get updated.\\n    //\\n    // This mechanism is widely used (e.g. SushiSwap: MasterChef.sol)\\n    //\\n\\n    ///@notice Market status transition management\\n    MarketStatus public override marketStatus;\\n\\n    ///@notice user's withdrawal status management\\n    struct Withdrawal {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n    mapping(address => Withdrawal) public withdrawalReq;\\n\\n    ///@notice insurance status management\\n    struct Insurance {\\n        uint256 id; //each insuance has their own id\\n        uint48 startTime; //timestamp of starttime\\n        uint48 endTime; //timestamp of endtime\\n        uint256 amount; //insured amount\\n        bytes32 target; //target id in bytes32\\n        address insured; //the address holds the right to get insured\\n        address agent; //address have control. can be different from insured.\\n        bool status; //true if insurance is not expired or redeemed\\n    }\\n    mapping(uint256 => Insurance) public insurances;\\n    uint256 public allInsuranceCount;\\n\\n    ///@notice incident status management\\n    struct Incident {\\n        uint256 payoutNumerator;\\n        uint256 payoutDenominator;\\n        uint256 incidentTimestamp;\\n        bytes32 merkleRoot;\\n    }\\n    Incident public incident;\\n    uint256 private constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == parameters.getOwner(),\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        initialized = true;\\n    }\\n\\n    /**\\n     * Initialize interaction\\n     */\\n\\n    /**\\n     * @notice Initialize market\\n     * This function registers market conditions.\\n     * references[0] = target governance token address\\n     * references[1] = underlying token address\\n     * references[2] = registry\\n     * references[3] = parameter\\n     * conditions[0] = minimim deposit amount defined by the factory\\n     * conditions[1] = initial deposit amount defined by the creator\\n     * @param _metaData arbitrary string to store market information\\n     * @param _conditions array of conditions\\n     * @param _references array of references\\n     */\\n    function initialize(\\n        address _depositor,\\n        string calldata _metaData,\\n        uint256[] calldata _conditions,\\n        address[] calldata _references\\n    ) external override {\\n        require(\\n            !initialized &&\\n                bytes(_metaData).length != 0 &&\\n                _references[0] != address(0) &&\\n                _references[1] != address(0) &&\\n                _references[2] != address(0) &&\\n                _references[3] != address(0) &&\\n                _conditions[0] <= _conditions[1],\\n            \\\"INITIALIZATION_BAD_CONDITIONS\\\"\\n        );\\n        initialized = true;\\n\\n        string memory _name = \\\"InsureDAO Insurance LP\\\";\\n        string memory _symbol = \\\"iNsure\\\";\\n        \\n        try this.getTokenMetadata(_references[0]) returns (string memory name_, string memory symbol_) {\\n            _name = name_;\\n            _symbol = symbol_;\\n        } catch {}\\n\\n        uint8 _decimals = IERC20Metadata(_references[1]).decimals();\\n\\n        initializeToken(_name, _symbol, _decimals);\\n\\n        registry = IRegistry(_references[2]);\\n        parameters = IParameters(_references[3]);\\n        vault = IVault(parameters.getVault(_references[1]));\\n\\n        metadata = _metaData;\\n\\n        marketStatus = MarketStatus.Trading;\\n\\n        if (_conditions[1] != 0) {\\n            _depositFrom(_conditions[1], _depositor);\\n        }\\n    }\\n\\n    function getTokenMetadata(address _token) external view returns (string memory _name, string memory _symbol) {\\n        _name = string(abi.encodePacked(\\\"InsureDAO \\\", IERC20Metadata(_token).name(), \\\" Insurance LP\\\"));\\n        _symbol = string(abi.encodePacked(\\\"i\\\", IERC20Metadata(_token).symbol()));\\n    }\\n\\n    /**\\n     * Pool interactions\\n     */\\n\\n    /**\\n     * @notice A liquidity provider supplies tokens to the pool and receives iTokens\\n     * @param _amount amount of tokens to deposit\\n     * @return _mintAmount the amount of iTokens minted from the transaction\\n     */\\n    function deposit(uint256 _amount) external returns (uint256 _mintAmount) {\\n        _mintAmount = _depositFrom(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Internal deposit function that allows third party to deposit\\n     * @param _amount amount of tokens to deposit\\n     * @param _from deposit beneficiary's address\\n     * @return _mintAmount the amount of iTokens minted from the transaction\\n     */\\n    function _depositFrom(uint256 _amount, address _from)\\n        internal\\n        returns (uint256 _mintAmount)\\n    {\\n        require(_amount != 0, \\\"ERROR: DEPOSIT_ZERO\\\");\\n        require(\\n            marketStatus == MarketStatus.Trading,\\n            \\\"ERROR: DEPOSIT_DISABLED(1)\\\"\\n        );\\n        require(\\n            !paused,\\n            \\\"ERROR: DEPOSIT_DISABLED(2)\\\"\\n        );\\n\\n        _mintAmount = worth(_amount);\\n\\n        vault.addValue(_amount, _from, address(this));\\n\\n        emit Deposit(_from, _amount, _mintAmount);\\n\\n        //mint iToken\\n        _mint(_from, _mintAmount);\\n    }\\n\\n    /**\\n     * @notice A liquidity provider request withdrawal of collateral\\n     * @param _amount amount of iTokens to burn\\n     */\\n    function requestWithdraw(uint256 _amount) external {\\n        require(_amount != 0, \\\"ERROR: REQUEST_ZERO\\\");\\n        require(balanceOf(msg.sender) >= _amount, \\\"ERROR: REQUEST_EXCEED_BALANCE\\\");\\n        \\n        uint256 _unlocksAt = block.timestamp + parameters.getLockup(address(this));\\n\\n        withdrawalReq[msg.sender].timestamp = _unlocksAt;\\n        withdrawalReq[msg.sender].amount = _amount;\\n        emit WithdrawRequested(msg.sender, _amount, _unlocksAt);\\n    }\\n\\n    /**\\n     * @notice A liquidity provider burns iTokens and receives collateral from the pool\\n     * @param _amount amount of iTokens to burn\\n     * @return _retVal the amount underlying tokens returned\\n     */\\n    function withdraw(uint256 _amount) external returns (uint256 _retVal) {\\n        require(\\n            marketStatus == MarketStatus.Trading,\\n            \\\"ERROR: WITHDRAWAL_MARKET_PENDING\\\"\\n        );\\n\\n        Withdrawal memory request = withdrawalReq[msg.sender];\\n\\n        require(\\n            request.timestamp < block.timestamp,\\n            \\\"ERROR: WITHDRAWAL_QUEUE\\\"\\n        );\\n        require(\\n            request.timestamp + parameters.getWithdrawable(address(this)) > block.timestamp,\\n            \\\"WITHDRAWAL_NO_ACTIVE_REQUEST\\\"\\n        );\\n        require(\\n            request.amount >= _amount,\\n            \\\"WITHDRAWAL_EXCEEDED_REQUEST\\\"\\n        );\\n        require(_amount != 0, \\\"ERROR: WITHDRAWAL_ZERO\\\");\\n\\n        uint256 _supply = totalSupply();\\n        require(_supply != 0, \\\"ERROR: NO_AVAILABLE_LIQUIDITY\\\");\\n\\n        uint256 _liquidity = originalLiquidity();\\n        _retVal = (_amount * _liquidity) / _supply;\\n\\n        require(\\n            _retVal <= _availableBalance(),\\n            \\\"WITHDRAW_INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        //reduce requested amount\\n        unchecked {\\n            withdrawalReq[msg.sender].amount -= _amount;\\n        }\\n\\n        //Burn iToken\\n        _burn(msg.sender, _amount);\\n\\n        //Withdraw liquidity\\n        vault.withdrawValue(_retVal, msg.sender);\\n\\n        emit Withdraw(msg.sender, _amount, _retVal);\\n    }\\n\\n    /**\\n     * @notice Unlocks an array of insurances\\n     * @param _ids array of ids to unlock\\n     */\\n    function unlockBatch(uint256[] calldata _ids) external {\\n        require(marketStatus == MarketStatus.Trading, \\\"ERROR: UNLOCK_BAD_COINDITIONS\\\");\\n        uint256 idsLength = _ids.length;\\n        for (uint256 i; i < idsLength;) {\\n            _unlock(_ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param _id id of the insurance policy to unlock liquidity\\n     */\\n    function unlock(uint256 _id) external {\\n        require(marketStatus == MarketStatus.Trading, \\\"ERROR: UNLOCK_BAD_COINDITIONS\\\");\\n        _unlock(_id);\\n    }\\n\\n    /**\\n     * @notice Unlock funds locked in the expired insurance (for internal usage)\\n     * @param _id id of the insurance policy to unlock liquidity\\n     */\\n    function _unlock(uint256 _id) internal {\\n        require(\\n            insurances[_id].status &&\\n                insurances[_id].endTime + parameters.getGrace(address(this)) <\\n                block.timestamp,\\n            \\\"ERROR: UNLOCK_BAD_COINDITIONS\\\"\\n        );\\n        insurances[_id].status = false;\\n\\n        lockedAmount = lockedAmount - insurances[_id].amount;\\n\\n        emit Unlocked(_id, insurances[_id].amount);\\n    }\\n\\n    /**\\n     * Index interactions\\n     */\\n\\n    /**\\n     * @notice Register an index that can allocate credit to the pool\\n     * @param _index index number of an index pool to get registered in the pool\\n     */\\n\\n    function registerIndex(uint256 _index)external override{\\n        require(\\n            IRegistry(registry).isListed(msg.sender),\\n            \\\"ERROR: UNREGISTERED_INDEX\\\"\\n        );\\n        require(\\n            _index <= parameters.getMaxList(address(this)),\\n            \\\"ERROR: EXCEEEDED_MAX_LIST\\\"\\n        );\\n        uint256 _length = indexList.length;\\n        if (_length <= _index) {\\n            require(_length == _index, \\\"ERROR: BAD_INDEX\\\");\\n            indexList.push(msg.sender);\\n            indices[msg.sender].exist = true;\\n            indices[msg.sender].index = _index;\\n        } else {\\n            address _indexAddress = indexList[_index];\\n            if (_indexAddress != address(0) && _indexAddress != msg.sender) {\\n                require(indices[msg.sender].credit == 0,\\\"ERROR: ALREADY_ALLOCATED\\\");\\n                require(indices[_indexAddress].credit == 0,\\\"ERROR: WITHDRAW_CREDIT_FIRST\\\");\\n\\n                indices[_indexAddress].index = 0;\\n                indices[_indexAddress].exist = false;\\n                indices[msg.sender].index = _index;\\n                indices[msg.sender].exist = true;\\n                indexList[_index] = msg.sender;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allocate credit from an index. Allocated credits are deemed as equivalent liquidity as real token deposits.\\n     * @param _credit credit (liquidity amount) to be added to this pool\\n     * @return _pending pending preium for the caller index\\n     */\\n\\n    function allocateCredit(uint256 _credit)\\n        external\\n        override\\n        returns (uint256 _pending)\\n    {\\n        IndexInfo storage _index = indices[msg.sender];\\n        require(\\n            _index.exist,\\n            \\\"ALLOCATE_CREDIT_BAD_CONDITIONS\\\"\\n        );\\n\\n        uint256 _rewardPerCredit = rewardPerCredit;\\n\\n        if (_index.credit != 0){\\n            _pending = _sub(\\n                (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,\\n                _index.rewardDebt\\n            );\\n            if (_pending != 0) {\\n                vault.transferAttribution(_pending, msg.sender);\\n                attributionDebt -= _pending;\\n            }\\n        }\\n        if (_credit != 0) {\\n            totalCredit += _credit;\\n            _index.credit += _credit;\\n            emit CreditIncrease(msg.sender, _credit);\\n        }\\n        _index.rewardDebt =\\n            (_index.credit * _rewardPerCredit) /\\n            MAGIC_SCALE_1E6;\\n    }\\n\\n    /**\\n     * @notice An index withdraw credit and earn accrued premium\\n     * @param _credit credit (liquidity amount) to be withdrawn from this pool\\n     * @return _pending pending preium for the caller index\\n     */\\n    function withdrawCredit(uint256 _credit)\\n        external\\n        override\\n        returns (uint256 _pending)\\n    {\\n        require(\\n            marketStatus == MarketStatus.Trading,\\n            \\\"POOL_IS_IN_TRADING_STATUS\\\"\\n        );\\n\\n        IndexInfo storage _index = indices[msg.sender];\\n\\n        require(\\n            _index.exist &&\\n            _index.credit >= _credit &&\\n            _credit <= _availableBalance(),\\n            \\\"WITHDRAW_CREDIT_BAD_CONDITIONS\\\"\\n        );\\n\\n        uint256 _rewardPerCredit = rewardPerCredit;\\n\\n        //calculate acrrued premium\\n        _pending = _sub(\\n            (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,\\n            _index.rewardDebt\\n        );\\n\\n        //Withdraw liquidity\\n        if (_credit != 0) {\\n            totalCredit -= _credit;\\n            unchecked {\\n                _index.credit -= _credit;\\n            }\\n            emit CreditDecrease(msg.sender, _credit);\\n        }\\n\\n        //withdraw acrrued premium\\n        if (_pending != 0) {\\n            vault.transferAttribution(_pending, msg.sender);\\n            attributionDebt -= _pending;\\n        }\\n        \\n        _index.rewardDebt =\\n                (_index.credit * _rewardPerCredit) /\\n                MAGIC_SCALE_1E6;\\n    }\\n\\n    /**\\n     * Insurance interactions\\n     */\\n\\n    /**\\n     * @notice Get insured for the specified amount for specified span\\n     * @param _amount target amount to get covered\\n     * @param _maxCost maximum cost to pay for the premium. revert if the premium is higher\\n     * @param _span length to get covered(e.g. 7 days)\\n     * @param _target Insurance type id. eg Smart Contract Hacking Cover = 0x00..00\\n     * @return id of the insurance policy\\n     */\\n    function insure(\\n        uint256 _amount,\\n        uint256 _maxCost,\\n        uint256 _span,\\n        bytes32 _target,\\n        address _for,\\n        address _agent\\n    ) external returns (uint256) {\\n        require(!paused, \\\"ERROR: INSURE_MARKET_PAUSED\\\");\\n        require(_for != address(0), \\\"ERROR: ZERO_ADDRESS\\\");\\n        require(_agent != address(0), \\\"ERROR: ZERO_ADDRESS\\\");\\n        require(\\n            marketStatus == MarketStatus.Trading,\\n            \\\"ERROR: INSURE_MARKET_PENDING\\\"\\n        );\\n        require(\\n            _amount <= _availableBalance(),\\n            \\\"INSURE_EXCEEDED_AVAIL_BALANCE\\\"\\n        );\\n\\n        require(_span <= 365 days, \\\"ERROR: INSURE_EXCEEDED_MAX_SPAN\\\");\\n        require(\\n            parameters.getMinDate(address(this)) <= _span,\\n            \\\"ERROR: INSURE_SPAN_BELOW_MIN\\\"\\n        );\\n\\n        //Distribute premium and fee\\n        uint256 _premium = getPremium(_amount, _span);\\n        require(_premium <= _maxCost, \\\"ERROR: INSURE_EXCEEDED_MAX_COST\\\");\\n        \\n        uint256 _endTime = _span + block.timestamp;\\n        uint256 _fee = parameters.getFeeRate(address(this));\\n        \\n        //current liquidity\\n        uint256 _liquidity = totalLiquidity();\\n        uint256 _totalCredit = totalCredit;\\n\\n        //accrue premium/fee\\n        uint256[2] memory _newAttribution = vault.addValueBatch(\\n            _premium,\\n            msg.sender,\\n            [address(this), parameters.getOwner()],\\n            [MAGIC_SCALE_1E6 - _fee, _fee]\\n        );\\n\\n        //Lock covered amount\\n        uint256 _id = allInsuranceCount;\\n        lockedAmount += _amount;\\n        insurances[_id] = Insurance(\\n            _id,\\n            (uint48)(block.timestamp),\\n            (uint48)(_endTime),\\n            _amount,\\n            _target,\\n            _for,\\n            _agent,\\n            true\\n        );\\n        \\n        unchecked {\\n            ++allInsuranceCount;\\n        }\\n\\n        //Calculate liquidity for index\\n        if (_totalCredit != 0 && _liquidity != 0) {\\n            uint256 _attributionForIndex = (_newAttribution[0] * _totalCredit) / _liquidity;\\n            attributionDebt += _attributionForIndex;\\n            rewardPerCredit += ((_attributionForIndex * MAGIC_SCALE_1E6) /\\n                _totalCredit);\\n        }\\n\\n        emit Insured(\\n            _id,\\n            _amount,\\n            _target,\\n            block.timestamp,\\n            _endTime,\\n            _for,\\n            _agent,\\n            _premium\\n        );\\n\\n        return _id;\\n    }\\n\\n    /**\\n     * @notice Redeem an insurance policy\\n     * @param _id the id of the insurance policy\\n     * @param _merkleProof merkle proof (similar to \\\"verify\\\" function of MerkleProof.sol of OpenZeppelin\\n     * Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol\\n     */\\n    function redeem(uint256 _id, uint256 _loss, bytes32[] calldata _merkleProof) external {\\n        require(\\n            marketStatus == MarketStatus.Payingout,\\n            \\\"ERROR: NO_APPLICABLE_INCIDENT\\\"\\n        );\\n        \\n        Insurance memory _insurance = insurances[_id];\\n        require(_insurance.status, \\\"ERROR: INSURANCE_NOT_ACTIVE\\\");\\n        require(_insurance.insured == msg.sender || _insurance.agent == msg.sender, \\\"ERROR: NOT_YOUR_INSURANCE\\\");\\n        uint48 _incidentTimestamp = (uint48)(incident.incidentTimestamp);\\n        require(\\n            _insurance.startTime <= _incidentTimestamp && _insurance.endTime >= _incidentTimestamp,\\n            \\\"ERROR: INSURANCE_NOT_APPLICABLE\\\"\\n        );\\n\\n        bytes32 _targets = incident.merkleRoot;\\n        require(\\n            MerkleProof.verify(\\n                _merkleProof,\\n                _targets,\\n                keccak256(\\n                    abi.encodePacked(_insurance.target, _insurance.insured, _loss)\\n                )\\n            ) ||\\n                MerkleProof.verify(\\n                    _merkleProof,\\n                    _targets,\\n                    keccak256(abi.encodePacked(_insurance.target, address(0), _loss))\\n                ),\\n            \\\"ERROR: INSURANCE_EXEMPTED\\\"\\n        );\\n        insurances[_id].status = false;\\n        lockedAmount -= _insurance.amount;\\n\\n\\n        _loss = _loss * incident.payoutNumerator / incident.payoutDenominator;\\n        uint256 _payoutAmount = _insurance.amount > _loss ? _loss : _insurance.amount;\\n\\n        vault.borrowValue(_payoutAmount, _insurance.insured);\\n\\n        emit Redeemed(\\n            _id,\\n            _insurance.insured,\\n            _insurance.target,\\n            _insurance.amount,\\n            _payoutAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Get how much premium for the specified amount and span\\n     * @param _amount amount to get insured\\n     * @param _span span to get covered\\n     */\\n    function getPremium(uint256 _amount, uint256 _span)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            parameters.getPremium(\\n                _amount,\\n                _span,\\n                totalLiquidity(),\\n                lockedAmount,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * Reporting interactions\\n     */\\n\\n    /**\\n     * @notice Decision to make a payout\\n     * @param _pending length of time to allow policyholders to redeem their policy\\n     * @param _payoutNumerator Numerator of the payout *See below\\n     * @param _payoutDenominator Denominator of the payout *See below\\n     * @param _incidentTimestamp Unixtimestamp of the incident\\n     * @param _merkleRoot Merkle root of the payout id list\\n     * @param _rawdata raw data before the data set is coverted to merkle tree (to be emi\uff54ted within event)\\n     * @param _memo additional memo for the payout report (to be emmited within event)\\n     * payout ratio is determined by numerator/denominator (e.g. 50/100 = 50% payout\\n     */\\n    function applyCover(\\n        uint256 _pending,\\n        uint256 _payoutNumerator,\\n        uint256 _payoutDenominator,\\n        uint256 _incidentTimestamp,\\n        bytes32 _merkleRoot,\\n        string calldata _rawdata,\\n        string calldata _memo\\n    ) external override onlyOwner {\\n        require(_incidentTimestamp < block.timestamp, \\\"ERROR: INCIDENT_DATE\\\");\\n\\n        incident.payoutNumerator = _payoutNumerator;\\n        incident.payoutDenominator = _payoutDenominator;\\n        incident.incidentTimestamp = _incidentTimestamp;\\n        incident.merkleRoot = _merkleRoot;\\n        marketStatus = MarketStatus.Payingout;\\n        pendingEnd = block.timestamp + _pending;\\n\\n        uint256 indexLength = indexList.length;\\n        for (uint256 i; i < indexLength;) {\\n            if (indices[indexList[i]].credit != 0) {\\n                IIndexTemplate(indexList[i]).lock();\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit CoverApplied(\\n            _pending,\\n            _payoutNumerator,\\n            _payoutDenominator,\\n            _incidentTimestamp,\\n            _merkleRoot,\\n            _rawdata,\\n            _memo\\n        );\\n        emit MarketStatusChanged(MarketStatus.Payingout);\\n    }\\n\\n    function applyBounty(\\n        uint256 _amount,\\n        address _contributor,\\n        uint256[] calldata _ids\\n    )external override onlyOwner {\\n        require(marketStatus == MarketStatus.Trading, \\\"ERROR: NOT_TRADING_STATUS\\\");\\n\\n        //borrow value just like redeem()\\n        vault.borrowValue(_amount, _contributor);\\n\\n        _liquidation();\\n\\n        //unlock policies\\n        uint256 totalAmountToUnlock;\\n        for (uint256 i; i < _ids.length; ++i) {\\n            uint _id = _ids[i];\\n            require(insurances[_id].status);\\n\\n            uint unlockAmount = insurances[_id].amount;\\n\\n            insurances[_id].status = false;\\n            totalAmountToUnlock += unlockAmount;\\n            emit Unlocked(_id, unlockAmount);\\n        }\\n        lockedAmount -= totalAmountToUnlock;\\n\\n        emit BountyPaid(_amount, _contributor, _ids) ;\\n    }\\n\\n    /**\\n     * @notice Anyone can resume the market after a pending period ends\\n     */\\n    function resume() external {\\n        require(\\n            marketStatus == MarketStatus.Payingout &&\\n                pendingEnd < block.timestamp,\\n            \\\"ERROR: UNABLE_TO_RESUME\\\"\\n        );\\n\\n        _liquidation();\\n\\n        marketStatus = MarketStatus.Trading;\\n\\n        uint256 indexLength = indexList.length;\\n        for (uint256 i; i < indexLength;) {\\n            IIndexTemplate(indexList[i]).adjustAlloc();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit MarketStatusChanged(MarketStatus.Trading);\\n    }\\n\\n    function _liquidation()internal{\\n        uint256 _totalLiquidity = totalLiquidity();\\n        uint256 _totalCredit = totalCredit;\\n        uint256 _debt = vault.debts(address(this));\\n        uint256 _deductionFromIndex;\\n        \\n        if (_totalLiquidity != 0) {\\n            _deductionFromIndex = _debt * _totalCredit / _totalLiquidity;\\n        }\\n        \\n        uint256 _actualDeduction;\\n        uint256 indexLength = indexList.length;\\n        for (uint256 i; i < indexLength;) {\\n            address _index = indexList[i];\\n            uint256 _credit = indices[_index].credit;\\n\\n            if (_credit != 0) {\\n                uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /\\n                    _totalCredit;\\n                uint256 _redeemAmount = _deductionFromIndex * _shareOfIndex / MAGIC_SCALE_1E6;\\n                _actualDeduction += IIndexTemplate(_index).compensate(\\n                    _redeemAmount\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 _deductionFromPool = _debt -\\n            _deductionFromIndex;\\n        uint256 _shortage = _deductionFromIndex  -\\n            _actualDeduction;\\n            \\n        if (_deductionFromPool != 0) {\\n            vault.offsetDebt(_deductionFromPool, address(this));\\n        }\\n\\n        vault.transferDebt(_shortage);\\n    }\\n\\n    /**\\n     * Utilities\\n     */\\n\\n    /**\\n     * @notice Get the exchange rate of LP tokens against underlying asset(scaled by MAGIC_SCALE_1E6)\\n     * @return The value against the underlying tokens balance.\\n     */\\n    function rate() external view returns (uint256) {\\n        uint256 _supply = totalSupply();\\n        uint256 originalLiquidity = originalLiquidity();\\n        \\n        if (originalLiquidity != 0 && _supply != 0) {\\n            return (originalLiquidity * MAGIC_SCALE_1E6) / _supply;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @param _owner the target address to look up value\\n     * @return The balance of underlying tokens for the specified address\\n     */\\n    function valueOfUnderlying(address _owner)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _balance = balanceOf(_owner);\\n        uint256 _totalSupply = totalSupply();\\n        \\n        if (_balance != 0 || _totalSupply != 0) {\\n            return (_balance * originalLiquidity()) / _totalSupply;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the accrued value for an index\\n     * @param _index the address of index\\n     * @return The pending premium for the specified index\\n     */\\n    function pendingPremium(address _index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _credit = indices[_index].credit;\\n        if (_credit != 0) {\\n            return\\n                _sub(\\n                    (_credit * rewardPerCredit) / MAGIC_SCALE_1E6,\\n                    indices[_index].rewardDebt\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token number for the specified underlying value\\n     * @param _value the amount of the underlying\\n     * @return _amount the number of the iTokens corresponding to _value\\n     */\\n    function worth(uint256 _value) public view returns (uint256 _amount) {\\n    \\n        uint256 _supply = totalSupply();\\n        uint256 _originalLiquidity = originalLiquidity();\\n        if (_supply != 0 && _originalLiquidity != 0) {\\n            _amount = (_value * _supply) / _originalLiquidity;\\n        } else if (_supply != 0 && _originalLiquidity == 0) {\\n            _amount = _value * _supply;\\n        } else {\\n            _amount = _value;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get allocated credit & available balance\\n     * @param _index address of an index\\n     * @return The balance of credit allocated by the specified index\\n     */\\n    function pairValues(address _index)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return (indices[_index].credit, _availableBalance());\\n    }\\n\\n    /**\\n     * @notice Returns the amount of underlying tokens available for withdrawals\\n     * @return available liquidity of this pool\\n     */\\n    function availableBalance()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _availableBalance();\\n    }\\n\\n    function _availableBalance()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _totalLiquidity = totalLiquidity();\\n        if (_totalLiquidity != 0) {\\n            return _totalLiquidity - lockedAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the utilization rate for this pool. Scaled by 1e6 (100% = 1e6)\\n     * @return utilization rate\\n     */\\n    function utilizationRate() external view override returns (uint256) {\\n        uint256 _lockedAmount = lockedAmount;\\n        uint256 _totalLiquidity = totalLiquidity();\\n        \\n        if (_lockedAmount != 0 && _totalLiquidity != 0) {\\n            return (_lockedAmount * MAGIC_SCALE_1E6) / _totalLiquidity;\\n        }\\n    }\\n\\n    /**\\n     * @notice Pool's Liquidity + Liquidity from Index (how much can the pool sell cover)\\n     * @return total liquidity of this pool\\n     */\\n    function totalLiquidity() public view override returns (uint256) {\\n        return originalLiquidity() + totalCredit;\\n    }\\n\\n    /**\\n     * @notice Pool's Liquidity\\n     * @return total liquidity of this pool\\n     */\\n    function originalLiquidity() public view returns (uint256) {\\n        return\\n            vault.underlyingValue(address(this)) -\\n            vault.attributionValue(attributionDebt);\\n    }\\n\\n    /**\\n     * Admin functions\\n     */\\n\\n    /**\\n     * @notice Used for changing settlementFeeRecipient\\n     * @param _state true to set paused and vice versa\\n     */\\n    function setPaused(bool _state) external override onlyOwner {\\n        if (paused != _state) {\\n            paused = _state;\\n            emit Paused(_state);\\n        }\\n    }\\n\\n    /**\\n     * @notice Change metadata string\\n     * @param _metadata new metadata string\\n     */\\n    function changeMetadata(string calldata _metadata)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        metadata = _metadata;\\n        emit MetadataChanged(_metadata);\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Internal function to offset withdraw request and latest balance\\n     * @param from the account who send\\n     * @param to a\\n     * @param amount the amount of tokens to offset\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from != address(0)) {\\n            uint256 reqAmount = withdrawalReq[from].amount;\\n            if (reqAmount != 0){\\n                uint256 _after = balanceOf(from) - amount;\\n                if (_after < reqAmount) {\\n                    withdrawalReq[from].amount = _after;\\n                }\\n            } \\n        }  \\n    }\\n\\n    /**\\n     * @notice Internal function for safe division\\n     */\\n    function _divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        uint256 c = a / b;\\n        if (a % b != 0) ++c;\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Internal function for overflow free subtraction\\n     */\\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            unchecked {return a - b;}\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InsureDAOERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract InsureDAOERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    bool tokenInitialized;\\n    string private _name = \\\"InsureDAO LP Token\\\";\\n    string private _symbol = \\\"iLP\\\";\\n    uint8 private _decimals = 18;\\n\\n    function initializeToken(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal {\\n        /***\\n         *@notice initialize token. Only called internally.\\n         *\\n         */\\n        require(!tokenInitialized, \\\"Token is already initialized\\\");\\n        tokenInitialized = true;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        if (amount != 0) {\\n            uint256 currentAllowance = _allowances[sender][msg.sender];\\n            if (currentAllowance != type(uint256).max) {\\n                require(\\n                    currentAllowance >= amount,\\n                    \\\"Transfer amount > allowance\\\"\\n                );\\n                unchecked {\\n                    _approve(sender, msg.sender, currentAllowance - amount);\\n                }\\n            }\\n            \\n            _transfer(sender, recipient, amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        if (addedValue != 0) {\\n            _approve(\\n                msg.sender,\\n                spender,\\n                _allowances[msg.sender][spender] + addedValue\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        if (subtractedValue != 0) {\\n            uint256 currentAllowance = _allowances[msg.sender][spender];\\n            require(\\n                currentAllowance >= subtractedValue,\\n                \\\"Decreased allowance below zero\\\"\\n            );\\n\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        if (amount != 0) {\\n            require(sender != address(0), \\\"Transfer from the zero address\\\");\\n            require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n\\n            _beforeTokenTransfer(sender, recipient, amount);\\n\\n            uint256 senderBalance = _balances[sender];\\n            require(\\n                senderBalance >= amount,\\n                \\\"Transfer amount exceeds balance\\\"\\n            );\\n\\n            unchecked {\\n                _balances[sender] = senderBalance - amount;\\n            }\\n\\n            _balances[recipient] += amount;\\n\\n            emit Transfer(sender, recipient, amount);\\n\\n            _afterTokenTransfer(sender, recipient, amount);\\n        }\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            require(account != address(0), \\\"Mint to the zero address\\\");\\n\\n            _beforeTokenTransfer(address(0), account, amount);\\n\\n            _totalSupply += amount;\\n            _balances[account] += amount;\\n            emit Transfer(address(0), account, amount);\\n\\n            _afterTokenTransfer(address(0), account, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            require(account != address(0), \\\"Burn from the zero address\\\");\\n\\n            _beforeTokenTransfer(account, address(0), amount);\\n\\n            uint256 accountBalance = _balances[account];\\n            require(accountBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[account] = accountBalance - amount;\\n            }\\n\\n            _totalSupply -= amount;\\n\\n            emit Transfer(account, address(0), amount);\\n\\n            _afterTokenTransfer(account, address(0), amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolTemplate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\nabstract contract IPoolTemplate {\\n\\n    enum MarketStatus {\\n        Trading,\\n        Payingout\\n    }\\n    function registerIndex(uint256 _index)external virtual;\\n    function allocateCredit(uint256 _credit)\\n        external\\n        virtual\\n        returns (uint256 _mintAmount);\\n\\n    function pairValues(address _index)\\n        external\\n        view\\n        virtual\\n        returns (uint256, uint256);\\n\\n    function withdrawCredit(uint256 _credit)\\n        external\\n        virtual\\n        returns (uint256 _retVal);\\n\\n    function marketStatus() external view virtual returns(MarketStatus);\\n    function availableBalance() external view virtual returns (uint256 _balance);\\n\\n    function utilizationRate() external view virtual returns (uint256 _rate);\\n    function totalLiquidity() public view virtual returns (uint256 _balance);\\n    function totalCredit() external view virtual returns (uint256);\\n    function lockedAmount() external view virtual returns (uint256);\\n\\n    function valueOfUnderlying(address _owner)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function pendingPremium(address _index)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function paused() external view virtual returns (bool);\\n\\n    //onlyOwner\\n    function applyCover(\\n        uint256 _pending,\\n        uint256 _payoutNumerator,\\n        uint256 _payoutDenominator,\\n        uint256 _incidentTimestamp,\\n        bytes32 _merkleRoot,\\n        string calldata _rawdata,\\n        string calldata _memo\\n    ) external virtual;\\n\\n    function applyBounty(\\n        uint256 _amount,\\n        address _contributor,\\n        uint256[] calldata _ids\\n    )external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniversalMarket.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IUniversalMarket {\\n    function initialize(\\n        address _depositor,\\n        string calldata _metaData,\\n        uint256[] calldata _conditions,\\n        address[] calldata _references\\n    ) external;\\n\\n    //onlyOwner\\n    function setPaused(bool state) external;\\n    function changeMetadata(string calldata _metadata) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IParameters.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\nabstract contract IParameters {\\n    function setVault(address _token, address _vault) external virtual;\\n\\n    function setLockup(address _address, uint256 _target) external virtual;\\n\\n    function setGrace(address _address, uint256 _target) external virtual;\\n\\n    function setMinDate(address _address, uint256 _target) external virtual;\\n\\n    function setUpperSlack(address _address, uint256 _target) external virtual;\\n\\n    function setLowerSlack(address _address, uint256 _target) external virtual;\\n\\n    function setWithdrawable(address _address, uint256 _target)\\n        external\\n        virtual;\\n\\n    function setPremiumModel(address _address, address _target)\\n        external\\n        virtual;\\n\\n    function setFeeRate(address _address, uint256 _target) external virtual;\\n\\n    function setMaxList(address _address, uint256 _target) external virtual;\\n\\n    function setCondition(bytes32 _reference, bytes32 _target) external virtual;\\n\\n    function getOwner() external view virtual returns (address);\\n\\n    function getVault(address _token) external view virtual returns (address);\\n\\n    function getPremium(\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _totalLiquidity,\\n        uint256 _lockedAmount,\\n        address _target\\n    ) external view virtual returns (uint256);\\n\\n    function getFeeRate(address _target) external view virtual returns (uint256);\\n\\n    function getUpperSlack(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getLowerSlack(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getLockup(address _target) external view virtual returns (uint256);\\n\\n    function getWithdrawable(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getGrace(address _target) external view virtual returns (uint256);\\n\\n    function getMinDate(address _target) external view virtual returns (uint256);\\n\\n    function getMaxList(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getCondition(bytes32 _reference)\\n        external\\n        view\\n        virtual\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IVault {\\n    function addValueBatch(\\n        uint256 _amount,\\n        address _from,\\n        address[2] memory _beneficiaries,\\n        uint256[2] memory _shares\\n    ) external returns (uint256[2] memory _allocations);\\n\\n    function addValue(\\n        uint256 _amount,\\n        address _from,\\n        address _attribution\\n    ) external returns (uint256 _attributions);\\n\\n    function withdrawValue(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function transferValue(uint256 _amount, address _destination)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function withdrawAttribution(uint256 _attribution, address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function withdrawAllAttribution(address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function transferAttribution(uint256 _amount, address _destination)\\n        external;\\n\\n    function attributionOf(address _target) external view returns (uint256);\\n\\n    function underlyingValue(address _target) external view returns (uint256);\\n\\n    function attributionValue(uint256 _attribution)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function utilize() external returns (uint256 _amount);\\n    function valueAll() external view returns (uint256);\\n\\n\\n    function token() external returns (address);\\n\\n    function borrowValue(uint256 _amount, address _to) external;\\n\\n    /*\\n    function borrowAndTransfer(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n    */\\n\\n    function offsetDebt(uint256 _amount, address _target)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function repayDebt(uint256 _amount, address _target) external;\\n\\n    function debts(address _debtor) external view returns (uint256);\\n\\n    function transferDebt(uint256 _amount) external;\\n\\n    //onlyOwner\\n    function withdrawRedundant(address _token, address _to) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setKeeper(address _keeper) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IRegistry {\\n    function isListed(address _market) external view returns (bool);\\n\\n    function getCDS(address _address) external view returns (address);\\n\\n    function confirmExistence(address _template, address _target)\\n        external\\n        view\\n        returns (bool);\\n\\n    //onlyOwner\\n    function setFactory(address _factory) external;\\n\\n    function supportMarket(address _market) external;\\n\\n    function setExistence(address _template, address _target) external;\\n\\n    function setCDS(address _address, address _cds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexTemplate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IIndexTemplate {\\n    function compensate(uint256) external returns (uint256 _compensated);\\n\\n    function lock() external;\\n\\n    function resume() external;\\n\\n    function adjustAlloc() external;\\n\\n    //onlyOwner\\n    function setLeverage(uint256 _target) external;\\n    function set(\\n        uint256 _indexA,\\n        uint256 _indexB,\\n        address _pool,\\n        uint256 _allocPoint\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"BountyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incidentTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rawdata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"CoverApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"CreditDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"CreditIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insured\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"Insured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IPoolTemplate.MarketStatus\",\"name\":\"statusValue\",\"type\":\"uint8\"}],\"name\":\"MarketStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insured\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retVal\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allInsuranceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"allocateCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"applyBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incidentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_rawdata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"applyCover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attributionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"changeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"}],\"name\":\"getPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incident\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incidentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaData\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_conditions\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_references\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"insured\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_target\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"insure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"enum IPoolTemplate.MarketStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"}],\"name\":\"pairValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"contract IParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"}],\"name\":\"pendingPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"registerIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"valueOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_retVal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_credit\",\"type\":\"uint256\"}],\"name\":\"withdrawCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"worth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolTemplate", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}