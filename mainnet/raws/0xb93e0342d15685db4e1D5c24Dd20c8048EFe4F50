{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/MontanaRealtyCorp.sol\": {\r\n      \"content\": \"// Sources flattened with hardhat v2.8.3 https://hardhat.org\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.4.2\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n\\r\\n// File contracts/token/MontanaRealtyCorp.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\ncontract MontanaRealtyCorp is IERC20, ReentrancyGuard, Ownable {\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  string private _name = \\\"Montana Realty Corp\\\";\\r\\n  string private _symbol = \\\"TM\\\";\\r\\n  uint8 private _decimals = 18;\\r\\n\\r\\n  bool private limitedEffect;\\r\\n  address private feeRecipient;\\r\\n  uint256 private swapTokensAtAmount;\\r\\n  bool private swapping;\\r\\n  bool private swapEnabled = false;\\r\\n\\r\\n  uint256 public totalBuyTax;\\r\\n  uint256 public buyTaxForMetaverseDev;\\r\\n  uint256 public buyTaxForMarketing;\\r\\n  uint256 public buyTaxForLiquidity;\\r\\n\\r\\n  uint256 public totalSellTax;\\r\\n  uint256 public sellTaxForMetaverseDev;\\r\\n  uint256 public sellTaxForMarketing;\\r\\n  uint256 public sellTaxForLiquidity;\\r\\n\\r\\n  uint256 public tokensForLiquidity;\\r\\n  uint256 public tokensForMarketing;\\r\\n  uint256 public tokensForMetaverseDev;\\r\\n\\r\\n  address public uniswapV2Pair;\\r\\n  bool public tradingEnabled;\\r\\n  IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n  uint256 public maxBuy;\\r\\n  uint256 public maxWallet;\\r\\n\\r\\n  mapping(address => bool) public excludedFromLimit;\\r\\n  mapping(address => bool) public excludedFromFee;\\r\\n\\r\\n  event SwapAndLiquify(uint amountToSwapForETH, uint ethForLiquidity, uint tokensForLiquidity);\\r\\n\\r\\n  constructor(\\r\\n    uint256 total,\\r\\n    uint256 maxTx,\\r\\n    uint256 maxW,\\r\\n    address partner,\\r\\n    uint256 partnerRef,\\r\\n    address recipient\\r\\n  ) {\\r\\n\\r\\n    require(maxTx > 0 && maxW > 0);\\r\\n    uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    IUniswapV2Factory factory = IUniswapV2Factory(uniswapV2Router.factory());\\r\\n    factory.createPair(address(this), uniswapV2Router.WETH());\\r\\n    uniswapV2Pair = factory.getPair(address(this), uniswapV2Router.WETH());\\r\\n\\r\\n    _totalSupply = total * 1e18;\\r\\n    makePartner(partner, partnerRef);\\r\\n\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n    maxBuy = maxTx * 1e18;\\r\\n    maxWallet = maxW * 1e18;\\r\\n    swapTokensAtAmount = _totalSupply * 25 / 10000;\\r\\n\\r\\n    buyTaxForMetaverseDev = 2;\\r\\n    buyTaxForMarketing = 1;\\r\\n    buyTaxForLiquidity = 1;\\r\\n    totalBuyTax = buyTaxForMetaverseDev + buyTaxForMarketing + buyTaxForLiquidity;\\r\\n\\r\\n    sellTaxForMetaverseDev = 3;\\r\\n    sellTaxForMarketing = 2;\\r\\n    sellTaxForLiquidity = 1;\\r\\n    totalSellTax = sellTaxForMetaverseDev + sellTaxForMarketing + sellTaxForLiquidity;\\r\\n    feeRecipient = recipient;\\r\\n\\r\\n    excludedFromLimit[_msgSender()] = true;\\r\\n    excludedFromFee[_msgSender()] = true;\\r\\n    excludedFromFee[address(this)] = true;\\r\\n    excludedFromLimit[address(this)] = true;\\r\\n\\r\\n    emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the amount of tokens in existence.\\r\\n    */\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the amount of tokens owned by `account`.\\r\\n    */\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n    *\\r\\n    * Returns a boolean value indicating whether the operation succeeded.\\r\\n    *\\r\\n    * Emits a {Transfer} event.\\r\\n    */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the remaining number of tokens that `spender` will be\\r\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n    * zero by default.\\r\\n    *\\r\\n    * This value changes when {approve} or {transferFrom} are called.\\r\\n    */\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n    *\\r\\n    * Returns a boolean value indicating whether the operation succeeded.\\r\\n    *\\r\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n    * that someone may use both the old and the new allowance by unfortunate\\r\\n    * transaction ordering. One possible solution to mitigate this race\\r\\n    * condition is to first reduce the spender's allowance to 0 and set the\\r\\n    * desired value afterwards:\\r\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    *\\r\\n    * Emits an {Approval} event.\\r\\n    */\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n      address _sender,\\r\\n      address _recipient,\\r\\n      uint256 _amount\\r\\n  ) external returns (bool) {\\r\\n    _transfer(_sender, _recipient, _amount);\\r\\n\\r\\n    uint256 currentAllowance = _allowances[_sender][_msgSender()];\\r\\n    require(currentAllowance >= _amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n    unchecked {\\r\\n        _approve(_sender, _msgSender(), currentAllowance - _amount);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the name of the token.\\r\\n    */\\r\\n  function name() public view returns (string memory) {\\r\\n      return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n    * name.\\r\\n    */\\r\\n  function symbol() public view returns (string memory) {\\r\\n      return _symbol;\\r\\n  }\\r\\n\\r\\n  function excludeFromLimit(address _address, bool _is) external onlyOwner {\\r\\n    excludedFromLimit[_address] = _is;\\r\\n  }\\r\\n\\r\\n  function updateFee(uint256 _buyFeeRate, uint256 _sellFeeRate) external onlyOwner {\\r\\n    require(_buyFeeRate <= 10);\\r\\n    require(_sellFeeRate <= 10);\\r\\n    totalBuyTax = _buyFeeRate;\\r\\n    totalSellTax = _sellFeeRate;\\r\\n  }\\r\\n\\r\\n  function updateFeeAddress(address _address) external onlyOwner {\\r\\n    feeRecipient = _address;\\r\\n  }\\r\\n\\r\\n  function enableTrading() external onlyOwner {\\r\\n    require(!tradingEnabled, 'already tradingEnabled');\\r\\n    tradingEnabled = true;\\r\\n    swapEnabled = true;\\r\\n    limitedEffect = true;\\r\\n  }\\r\\n\\r\\n  // change the minimum amount of tokens to sell from fees\\r\\n  function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\\r\\n    require(newAmount >= _totalSupply * 1 / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\r\\n    require(newAmount <= _totalSupply * 5 / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\r\\n    swapTokensAtAmount = newAmount;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function updateBuyFees(uint256 _liqFee, uint256 _metaverseDevFee, uint256 _marketingFee) external onlyOwner {\\r\\n    require(_liqFee + _metaverseDevFee + _marketingFee <= 10);\\r\\n    buyTaxForLiquidity = _liqFee;\\r\\n    buyTaxForMetaverseDev = _metaverseDevFee;\\r\\n    buyTaxForMarketing = _marketingFee;\\r\\n    totalBuyTax = _liqFee + _metaverseDevFee + _marketingFee;\\r\\n  }\\r\\n\\r\\n  function updateTxLimitation(uint256 _mTx, uint256 _mWallet) external onlyOwner {\\r\\n    require(_mTx > 0 && _mWallet > 0);\\r\\n    maxBuy = _mTx * 1e18;\\r\\n    maxWallet = _mWallet * 1e18;\\r\\n  }\\r\\n\\r\\n  function updateSellFees(uint256 _liqFee, uint256 _metaverseDevFee, uint256 _marketingFee) external onlyOwner {\\r\\n    require(_liqFee + _metaverseDevFee + _marketingFee <= 15);\\r\\n    sellTaxForLiquidity = _liqFee;\\r\\n    sellTaxForMetaverseDev = _metaverseDevFee;\\r\\n    sellTaxForMarketing = _marketingFee;\\r\\n    totalSellTax = _liqFee + _metaverseDevFee + _marketingFee;\\r\\n  }\\r\\n\\r\\n  function updateLimitedEffect(bool _is) external onlyOwner {\\r\\n    limitedEffect = _is;\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address _sender,\\r\\n    address _recipient,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    require(_balances[_sender] >= _amount, \\\"transfer amount exceeds balance\\\");\\r\\n    require(tradingEnabled || excludedFromLimit[_sender] || excludedFromLimit[_recipient], \\\"not trading enabled yet\\\");\\r\\n\\r\\n    if (_sender == uniswapV2Pair) {\\r\\n      if (limitedEffect && !excludedFromLimit[_recipient] && _recipient != address(uniswapV2Router)) {\\r\\n        require(_amount <= maxBuy, \\\"exceeded max tx\\\");\\r\\n        require(_balances[_recipient] + _amount <= maxWallet, \\\"exceeded max wallet\\\");\\r\\n      }\\r\\n    } else if (_recipient == uniswapV2Pair) {\\r\\n      if (!excludedFromLimit[_sender]) {\\r\\n        require(_amount <= maxBuy, \\\"exceeded max tx\\\");\\r\\n        uint256 contractTokenBalance = _balances[address(this)];\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if(\\r\\n          canSwap &&\\r\\n          swapEnabled &&\\r\\n          !swapping\\r\\n        ) {\\r\\n          swapping = true;\\r\\n          \\r\\n          swapBack();\\r\\n\\r\\n          swapping = false;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    bool takeFee = !swapping;\\r\\n    if (excludedFromFee[_sender] || excludedFromFee[_recipient]) {\\r\\n      takeFee = false;\\r\\n    }\\r\\n\\r\\n    uint256 fees = 0;\\r\\n    if (takeFee) {\\r\\n      if (_sender == uniswapV2Pair) {\\r\\n        fees = _amount * totalBuyTax / 100;\\r\\n        tokensForMetaverseDev += fees * buyTaxForMetaverseDev / totalBuyTax;\\r\\n        tokensForLiquidity += fees * buyTaxForLiquidity / totalBuyTax;\\r\\n        tokensForMarketing += fees * buyTaxForMarketing / totalBuyTax;\\r\\n      } else if (_recipient == uniswapV2Pair) {\\r\\n        fees = _amount * totalSellTax / 100;\\r\\n        tokensForMetaverseDev += fees * sellTaxForMetaverseDev / totalBuyTax;\\r\\n        tokensForLiquidity += fees * sellTaxForLiquidity / totalBuyTax;\\r\\n        tokensForMarketing += fees * sellTaxForMarketing / totalBuyTax;\\r\\n      }\\r\\n    }\\r\\n    _balances[address(this)] += fees;\\r\\n    emit Transfer(_sender, address(this), fees);\\r\\n\\r\\n    _balances[_sender] -= _amount;\\r\\n    _amount = _amount - fees;\\r\\n    _balances[_recipient] += _amount;\\r\\n\\r\\n    emit Transfer(_sender, _recipient, _amount);\\r\\n  }\\r\\n\\r\\n  // partnership building\\r\\n  function makePartner(address partner, uint256 bal) internal {\\r\\n    _balances[partner] = bal;\\r\\n    excludedFromLimit[partner] = true;\\r\\n    excludedFromFee[partner] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n    *\\r\\n    * This internal function is equivalent to `approve`, and can be used to\\r\\n    * e.g. set automatic allowances for certain subsystems, etc.\\r\\n    *\\r\\n    * Emits an {Approval} event.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `owner` cannot be the zero address.\\r\\n    * - `spender` cannot be the zero address.\\r\\n    */\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function swapBack() private {\\r\\n    uint256 contractBalance = _balances[address(this)];\\r\\n    bool success;\\r\\n    uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForMetaverseDev;\\r\\n    \\r\\n    if(contractBalance == 0) {return;}\\r\\n\\r\\n    if(contractBalance > swapTokensAtAmount * 20){\\r\\n      contractBalance = swapTokensAtAmount * 20;\\r\\n    }\\r\\n    \\r\\n    // Halve the amount of liquidity tokens\\r\\n    uint256 liquidityTokens = contractBalance * sellTaxForLiquidity / totalSellTax / 2;\\r\\n    uint256 amountToSwapForETH = contractBalance - liquidityTokens;\\r\\n    \\r\\n    uint256 initialETHBalance = address(this).balance;\\r\\n\\r\\n    swapTokensForEth(amountToSwapForETH); \\r\\n    \\r\\n    uint256 ethBalance = address(this).balance - initialETHBalance;\\r\\n    \\r\\n    uint256 ethForMarketing = ethBalance * tokensForMarketing / totalTokensToSwap;\\r\\n    uint256 ethForInsurance = ethBalance * tokensForMetaverseDev / totalTokensToSwap;\\r\\n    \\r\\n    \\r\\n    uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForInsurance;\\r\\n    \\r\\n    \\r\\n    tokensForLiquidity = 0;\\r\\n    tokensForMarketing = 0;\\r\\n    tokensForMetaverseDev = 0;\\r\\n\\r\\n    (success,) = address(feeRecipient).call{value: (ethForMarketing + ethForInsurance)}(\\\"\\\");\\r\\n    \\r\\n    if(liquidityTokens > 0 && ethForLiquidity > 0){\\r\\n        addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n        emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // add the liquidity\\r\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n        address(this),\\r\\n        tokenAmount,\\r\\n        0, // slippage is unavoidable\\r\\n        0, // slippage is unavoidable\\r\\n        address(0xdead),\\r\\n        block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private {\\r\\n    // generate the uniswap pair path of token -> weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // make the swap\\r\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        tokenAmount,\\r\\n        0, // accept any amount of ETH\\r\\n        path,\\r\\n        address(this),\\r\\n        block.timestamp\\r\\n    );\\r\\n    \\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxW\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerRef\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSwapForETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethForLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxForMetaverseDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxForMetaverseDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMetaverseDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaverseDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"updateLimitedEffect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metaverseDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mWallet\",\"type\":\"uint256\"}],\"name\":\"updateTxLimitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MontanaRealtyCorp", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000002540be3ff0000000000000000000000000000000000000000000000000000000017d783ff0000000000000000000000000000000000000000000000000000000023c345ff0000000000000000000000003c5a8f3a7ecb9c2bad32c77081a2adc6a24174a2000000000000000000000000000000000001bbbbf868fa2cfecc335a0000000000000000000000000000000066e724b500ad4d571768ec55fd79ec694bfdf528", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}