{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GenesisRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IGenesisAdventurer {\\n    function getWeapon(uint256 tokenId) external view returns (string memory);\\n    function getChest(uint256 tokenId) external view returns (string memory);\\n    function getHead(uint256 tokenId) external view returns (string memory);\\n    function getWaist(uint256 tokenId) external view returns (string memory);\\n    function getFoot(uint256 tokenId) external view returns (string memory);\\n    function getHand(uint256 tokenId) external view returns (string memory);\\n    function getNeck(uint256 tokenId) external view returns (string memory);\\n    function getRing(uint256 tokenId) external view returns (string memory);\\n    function getOrder(uint256 tokenId) external view returns (string memory);\\n    function getOrderColor(uint256 tokenId) external view returns (string memory);\\n    function getOrderCount(uint256 tokenId) external view returns (string memory);\\n    function getLootTokenIds(uint256 tokenId) external pure returns(uint256[8] memory);\\n    function getName(uint256 tokenId) external view returns (string memory);\\n}\\n\\ninterface ILootStats {\\n    enum Class\\n    {\\n        Warrior,\\n        Hunter,\\n        Mage,\\n        Any\\n    }\\n    function getLevel(uint256[8] memory tokenId) external view returns (uint256);\\n    function getGreatness(uint256[8] memory tokenId) external view returns (uint256);\\n    function getRating(uint256[8] memory tokenId) external view returns (uint256);\\n    function getNumberOfItemsInClass(Class classType, uint256[8] memory tokenId) external view returns (uint256);\\n}\\n\\ncontract GenesisRenderer is Ownable {\\n    address public genesisAdventurerAddress;\\n    address public lootStatsAddress;\\n    address public genesisNamingAddress;\\n    IGenesisAdventurer private ga;\\n    ILootStats private stats;\\n\\n    constructor(address genesisAdventurer_, address lootStats_) {\\n        setGenesisAdventurer(genesisAdventurer_);\\n        setLootStats(lootStats_);\\n    }\\n\\n    function setGenesisAdventurer(address addr_) public onlyOwner {\\n        genesisAdventurerAddress = addr_;\\n        ga = IGenesisAdventurer(addr_);\\n    }\\n\\n    function setLootStats(address addr_) public onlyOwner {\\n        lootStatsAddress = addr_;\\n        stats = ILootStats(lootStatsAddress);\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n\\n      string[27] memory parts;\\n      string memory name = ga.getName(tokenId);\\n      uint256[8] memory lootTokenIds = ga.getLootTokenIds(tokenId);\\n      \\n      parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; widht: 350px} .italic {font-style: italic} .dark { fill: #000; fill-opacity: .5}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#000\\\"/><rect y=\\\"300\\\" width=\\\"350\\\" height=\\\"50\\\" fill=\\\"';\\n      parts[1] = ga.getOrderColor(tokenId);\\n      parts[2] = '\\\"/><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n      parts[3] = ga.getWeapon(tokenId);\\n      parts[4] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n      parts[5] = ga.getChest(tokenId);\\n      parts[6] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n      parts[7] = ga.getHead(tokenId);\\n      parts[8] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\n      parts[9] = ga.getWaist(tokenId);\\n      parts[10] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\n      parts[11] = ga.getFoot(tokenId);\\n      parts[12] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n      parts[13] = ga.getHand(tokenId);\\n      parts[14] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n      parts[15] = ga.getNeck(tokenId);\\n      parts[16] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n      parts[17] = ga.getRing(tokenId);\\n      parts[18] = '</text><text x=\\\"10\\\" y=\\\"320\\\" class=\\\"base italic\\\">';\\n      parts[19] = name;\\n      parts[20] = '</text><text x=\\\"340\\\" y=\\\"340\\\" class=\\\"base dark\\\" text-anchor=\\\"end\\\">';\\n      parts[21] = ga.getOrder(tokenId);\\n      parts[22] = ' ';\\n      parts[23] = ga.getOrderCount(tokenId);\\n      parts[24] = '</text><text x=\\\"10\\\" y=\\\"340\\\" class=\\\"base dark\\\">Rating ';\\n      parts[25] = _toString(stats.getRating(lootTokenIds));\\n      parts[26] = ' / 720</text></svg>';\\n\\n      string memory image = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4]));\\n      image = string(abi.encodePacked(image, parts[5], parts[6], parts[7], parts[8], parts[9], parts[10]));\\n      image = string(abi.encodePacked(image, parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n      image = string(abi.encodePacked(image, parts[17], parts[18], parts[19], parts[20], parts[21], parts[22]));\\n      image = string(abi.encodePacked(image, parts[23], parts[24], parts[25], parts[26]));\\n      string memory attributes = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Order\\\", \\\"value\\\": \\\"', ga.getOrder(tokenId),'\\\"},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Greatness\\\", \\\"value\\\": ', _toString(stats.getGreatness(lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": ', _toString(stats.getLevel(lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Rating\\\", \\\"value\\\": ', _toString(stats.getRating(lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Number of Warrior Items\\\", \\\"value\\\": ', _toString(stats.getNumberOfItemsInClass(ILootStats.Class.Warrior, lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Number of Hunter Items\\\", \\\"value\\\": ', _toString(stats.getNumberOfItemsInClass(ILootStats.Class.Hunter, lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Number of Mage Items\\\", \\\"value\\\": ', _toString(stats.getNumberOfItemsInClass(ILootStats.Class.Mage, lootTokenIds)),'},'));\\n      attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\": \\\"Generation\\\", \\\"value\\\": \\\"Genesis\\\"}'));\\n      string memory json = string(abi.encodePacked('{\\\"name\\\": \\\"', name, '\\\", \\\"description\\\": \\\"This item is a Genesis Adventurer used in Loot (for Adventurers)\\\", '));\\n      json = string(abi.encodePacked(json, '\\\"attributes\\\": [', attributes,'], '));\\n      json = string(abi.encodePacked(json, '\\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\\\"}'));\\n      json = string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json))));\\n      return json;\\n    }\\n\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    } \\n}\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genesisAdventurer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lootStats_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"genesisAdventurerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisNamingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootStatsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setGenesisAdventurer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setLootStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenesisRenderer", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008db687aceb92c66f013e1d614137238cc698fedb000000000000000000000000886944f49fa10448c573abf3d5f85f4bd81a7730", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}