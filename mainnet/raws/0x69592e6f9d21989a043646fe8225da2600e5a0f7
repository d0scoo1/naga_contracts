{"status": "1", "message": "OK", "result": [{"SourceCode": "// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/CosmosToken.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract CosmosERC20 is ERC20 {\r\n\tuint256 private MAX_UINT = 2**256 - 1;\r\n\r\n\taddress public gravity;\r\n\r\n\tuint8 private cosmosDecimals;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n\tmodifier onlyGravity() {\r\n\t\trequire(msg.sender == gravity, \"Not gravity\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress _gravityAddress,\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol,\r\n\t\tuint8 _decimals\r\n\t) public ERC20(_name, _symbol)  {\r\n\t\tcosmosDecimals = _decimals;\r\n\t\tgravity = _gravityAddress;\r\n\t\t_mint(_gravityAddress, MAX_UINT);\r\n\r\n\t}\r\n\r\n\r\n\t// This is not an accurate total supply. Instead this is the total supply\r\n\t// of the given cosmos asset on Ethereum at this moment in time. Keeping\r\n\t// a totally accurate supply would require constant updates from the Cosmos\r\n\t// side, while in theory this could be piggy-backed on some existing bridge\r\n\t// operation it's a lot of complextiy to add so we chose to forgoe it.\r\n\t\r\n\t/**\r\n\t * @dev Returns the number of tokens not currently held by the gravity address\r\n\t *\r\n\r\n\t */\t\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn MAX_UINT - balanceOf(gravity);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Sets the gravity contract to a new address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `msg.sender` must be the current gravity contract\r\n\t */\r\n\tfunction setGravityContract(address _gravityAddress) external onlyGravity {\r\n\r\n\t\tgravity = _gravityAddress;\r\n\t }\r\n\r\n\t/**\r\n\t * @dev Overrides the decimal function in the base ERC20 contract. \r\n\t * This override is needed to Ethereum wallets display tokens consistently\r\n\t * with how Cosmos wallets display the native version of the token.\r\n\t */\r\n\r\n   function decimals()public view override returns (uint8){\r\n\t   return cosmosDecimals;\r\n   }\r\n\r\n}\r\n\r\n\r\n// File contracts/Gravity.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror InvalidSignature();\r\nerror InvalidValsetNonce(uint256 newNonce, uint256 currentNonce);\r\nerror InvalidBatchNonce(uint256 newNonce, uint256 currentNonce);\r\nerror InvalidLogicCallNonce(uint256 newNonce, uint256 currentNonce);\r\nerror InvalidLogicCallTransfers();\r\nerror InvalidLogicCallFees();\r\nerror InvalidSendToCosmos();\r\nerror IncorrectCheckpoint();\r\nerror MalformedNewValidatorSet();\r\nerror MalformedCurrentValidatorSet();\r\nerror MalformedBatch();\r\nerror InsufficientPower(uint256 cumulativePower, uint256 powerThreshold);\r\nerror BatchTimedOut();\r\nerror LogicCallTimedOut();\r\n\r\n// This is being used purely to avoid stack too deep errors\r\nstruct LogicCallArgs {\r\n\t// Transfers out to the logic contract\r\n\tuint256[] transferAmounts;\r\n\taddress[] transferTokenContracts;\r\n\t// The fees (transferred to msg.sender)\r\n\tuint256[] feeAmounts;\r\n\taddress[] feeTokenContracts;\r\n\t// The arbitrary logic call\r\n\taddress logicContractAddress;\r\n\tbytes payload;\r\n\t// Invalidation metadata\r\n\tuint256 timeOut;\r\n\tbytes32 invalidationId;\r\n\tuint256 invalidationNonce;\r\n}\r\n\r\n// This is used purely to avoid stack too deep errors\r\n// represents everything about a given validator set\r\nstruct ValsetArgs {\r\n\t// the validators in this set, represented by an Ethereum address\r\n\taddress[] validators;\r\n\t// the powers of the given validators in the same order as above\r\n\tuint256[] powers;\r\n\t// the nonce of this validator set\r\n\tuint256 valsetNonce;\r\n\t// the reward amount denominated in the below reward token, can be\r\n\t// set to zero\r\n\tuint256 rewardAmount;\r\n\t// the reward token, should be set to the zero address if not being used\r\n\taddress rewardToken;\r\n}\r\n\r\nstruct ValSignature {\r\n\tuint8 v;\r\n\tbytes32 r;\r\n\tbytes32 s;\r\n}\r\n\r\ncontract Gravity is ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// These are updated often\r\n\tbytes32 public state_lastValsetCheckpoint;\r\n\tmapping(address => uint256) public state_lastBatchNonces;\r\n\tmapping(bytes32 => uint256) public state_invalidationMapping;\r\n\tuint256 public state_lastValsetNonce = 0;\r\n\t// event nonce zero is reserved by the Cosmos module as a special\r\n\t// value indicating that no events have yet been submitted\r\n\tuint256 public state_lastEventNonce = 1;\r\n\r\n\t// These are set once at initialization\r\n\tuint256 public state_powerThreshold;\r\n\t// This is set once at initialization\r\n\tbytes32 public immutable state_gravityId;\r\n\r\n\t// TransactionBatchExecutedEvent and SendToCosmosEvent both include the field _eventNonce.\r\n\t// This is incremented every time one of these events is emitted. It is checked by the\r\n\t// Cosmos module to ensure that all events are received in order, and that none are lost.\r\n\t//\r\n\t// ValsetUpdatedEvent does not include the field _eventNonce because it is never submitted to the Cosmos\r\n\t// module. It is purely for the use of relayers to allow them to successfully submit batches.\r\n\tevent TransactionBatchExecutedEvent(\r\n\t\tuint256 indexed _batchNonce,\r\n\t\taddress indexed _token,\r\n\t\tuint256 _eventNonce\r\n\t);\r\n\tevent SendToCosmosEvent(\r\n\t\taddress indexed _tokenContract,\r\n\t\taddress indexed _sender,\r\n\t\tbytes32 indexed _destination,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _eventNonce\r\n\t);\r\n\tevent ERC20DeployedEvent(\r\n\t\t// FYI: Can't index on a string without doing a bunch of weird stuff\r\n\t\tstring _cosmosDenom,\r\n\t\taddress indexed _tokenContract,\r\n\t\tstring _name,\r\n\t\tstring _symbol,\r\n\t\tuint8 _decimals,\r\n\t\tuint256 _eventNonce\r\n\t);\r\n\tevent ValsetUpdatedEvent(\r\n\t\tuint256 indexed _newValsetNonce,\r\n\t\tuint256 _eventNonce,\r\n\t\tuint256 _rewardAmount,\r\n\t\taddress _rewardToken,\r\n\t\taddress[] _validators,\r\n\t\tuint256[] _powers\r\n\t);\r\n\tevent LogicCallEvent(\r\n\t\tbytes32 _invalidationId,\r\n\t\tuint256 _invalidationNonce,\r\n\t\tbytes _returnData,\r\n\t\tuint256 _eventNonce\r\n\t);\r\n\r\n\t// TEST FIXTURES\r\n\t// These are here to make it easier to measure gas usage. They should be removed before production\r\n\tfunction testMakeCheckpoint(ValsetArgs calldata _valsetArgs, bytes32 _gravityId) external pure {\r\n\t\tmakeCheckpoint(_valsetArgs, _gravityId);\r\n\t}\r\n\r\n\tfunction testCheckValidatorSignatures(\r\n\t\tValsetArgs calldata _currentValset,\r\n\t\tValSignature[] calldata _sigs,\r\n\t\tbytes32 _theHash,\r\n\t\tuint256 _powerThreshold\r\n\t) external pure {\r\n\t\tcheckValidatorSignatures(_currentValset, _sigs, _theHash, _powerThreshold);\r\n\t}\r\n\r\n\t// END TEST FIXTURES\r\n\r\n\tfunction lastBatchNonce(address _erc20Address) external view returns (uint256) {\r\n\t\treturn state_lastBatchNonces[_erc20Address];\r\n\t}\r\n\r\n\tfunction lastLogicCallNonce(bytes32 _invalidation_id) external view returns (uint256) {\r\n\t\treturn state_invalidationMapping[_invalidation_id];\r\n\t}\r\n\r\n\t// Utility function to verify geth style signatures\r\n\tfunction verifySig(\r\n\t\taddress _signer,\r\n\t\tbytes32 _theHash,\r\n\t\tValSignature calldata _sig\r\n\t) private pure returns (bool) {\r\n\t\tbytes32 messageDigest = keccak256(\r\n\t\t\tabi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _theHash)\r\n\t\t);\r\n\t\treturn _signer == ECDSA.recover(messageDigest, _sig.v, _sig.r, _sig.s);\r\n\t}\r\n\r\n\r\n\t// Utility function to determine that a validator set and signatures are well formed\r\n\tfunction validateValset(ValsetArgs calldata _valset, ValSignature[] calldata _sigs) private pure {\r\n\t\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\r\n\t\tif (\r\n\t\t\t_valset.validators.length != _valset.powers.length ||\r\n\t\t\t_valset.validators.length != _sigs.length\r\n\t\t) {\r\n\t\t\trevert MalformedCurrentValidatorSet();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t// Make a new checkpoint from the supplied validator set\r\n\t// A checkpoint is a hash of all relevant information about the valset. This is stored by the contract,\r\n\t// instead of storing the information directly. This saves on storage and gas.\r\n\t// The format of the checkpoint is:\r\n\t// h(gravityId, \"checkpoint\", valsetNonce, validators[], powers[])\r\n\t// Where h is the keccak256 hash function.\r\n\t// The validator powers must be decreasing or equal. This is important for checking the signatures on the\r\n\t// next valset, since it allows the caller to stop verifying signatures once a quorum of signatures have been verified.\r\n\tfunction makeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\t// bytes32 encoding of the string \"checkpoint\"\r\n\t\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\r\n\r\n\t\tbytes32 checkpoint = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\t_gravityId,\r\n\t\t\t\tmethodName,\r\n\t\t\t\t_valsetArgs.valsetNonce,\r\n\t\t\t\t_valsetArgs.validators,\r\n\t\t\t\t_valsetArgs.powers,\r\n\t\t\t\t_valsetArgs.rewardAmount,\r\n\t\t\t\t_valsetArgs.rewardToken\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn checkpoint;\r\n\t}\r\n\r\n\r\n\tfunction checkValidatorSignatures(\r\n\t\t// The current validator set and their powers\r\n\t\tValsetArgs calldata _currentValset,\r\n\t\t// The current validator's signatures\r\n\t\tValSignature[] calldata _sigs,\r\n\t\t// This is what we are checking they have signed\r\n\t\tbytes32 _theHash,\r\n\t\tuint256 _powerThreshold\r\n\t) private pure {\r\n\t\tuint256 cumulativePower = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _currentValset.validators.length; i++) {\r\n\t\t\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\r\n\t\t\t// (In a valid signature, it is either 27 or 28)\r\n\t\t\tif (_sigs[i].v != 0) {\r\n\t\t\t\t// Check that the current validator has signed off on the hash\r\n\t\t\t\tif (!verifySig(_currentValset.validators[i], _theHash, _sigs[i])) {\r\n\t\t\t\t\trevert InvalidSignature();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Sum up cumulative power\r\n\t\t\t\tcumulativePower = cumulativePower + _currentValset.powers[i];\r\n\r\n\t\t\t\t// Break early to avoid wasting gas\r\n\t\t\t\tif (cumulativePower > _powerThreshold) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that there was enough power\r\n\t\tif (cumulativePower <= _powerThreshold) {\r\n\t\t\trevert InsufficientPower(cumulativePower, _powerThreshold);\r\n\t\t}\r\n\t\t// Success\r\n\t}\r\n\t// This updates the valset by checking that the validators in the current valset have signed off on the\r\n\t// new valset. The signatures supplied are the signatures of the current valset over the checkpoint hash\r\n\t// generated from the new valset.\r\n\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\r\n\t// the new valset.\r\nfunction updateValset(\r\n\t\t// The new version of the validator set\r\n\t\tValsetArgs calldata _newValset,\r\n\t\t// The current validators that approve the change\r\n\t\tValsetArgs calldata _currentValset,\r\n\t\t// These are arrays of the parts of the current validator's signatures\r\n\t\tValSignature[] calldata _sigs\r\n\t) external {\r\n\t\t// CHECKS\r\n\r\n\t\t// Check that the valset nonce is greater than the old one\r\n\t\tif (_newValset.valsetNonce <= _currentValset.valsetNonce) {\r\n\t\t\trevert InvalidValsetNonce({\r\n\t\t\t\tnewNonce: _newValset.valsetNonce,\r\n\t\t\t\tcurrentNonce: _currentValset.valsetNonce\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Check that the valset nonce is less than a million nonces forward from the old one\r\n\t\t// this makes it difficult for an attacker to lock out the contract by getting a single\r\n\t\t// bad validator set through with uint256 max nonce\r\n\t\tif (_newValset.valsetNonce > _currentValset.valsetNonce + 1000000) {\r\n\t\t\trevert InvalidValsetNonce({\r\n\t\t\t\tnewNonce: _newValset.valsetNonce,\r\n\t\t\t\tcurrentNonce: _currentValset.valsetNonce\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Check that new validators and powers set is well-formed\r\n\t\tif (\r\n\t\t\t_newValset.validators.length != _newValset.powers.length ||\r\n\t\t\t_newValset.validators.length == 0\r\n\t\t) {\r\n\t\t\trevert MalformedNewValidatorSet();\r\n\t\t}\r\n\r\n\t\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\r\n\t\tvalidateValset(_currentValset, _sigs);\r\n\r\n\t\t// Check cumulative power to ensure the contract has sufficient power to actually\r\n\t\t// pass a vote\r\n\t\tuint256 cumulativePower = 0;\r\n\t\tfor (uint256 i = 0; i < _newValset.powers.length; i++) {\r\n\t\t\tcumulativePower = cumulativePower + _newValset.powers[i];\r\n\t\t\tif (cumulativePower > state_powerThreshold) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (cumulativePower <= state_powerThreshold) {\r\n\t\t\trevert InsufficientPower({\r\n\t\t\t\tcumulativePower: cumulativePower,\r\n\t\t\t\tpowerThreshold: state_powerThreshold\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Check that the supplied current validator set matches the saved checkpoint\r\n\t\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\r\n\t\t\trevert IncorrectCheckpoint();\r\n\t\t}\r\n\r\n\t\t// Check that enough current validators have signed off on the new validator set\r\n\t\tbytes32 newCheckpoint = makeCheckpoint(_newValset, state_gravityId);\r\n\r\n\t\tcheckValidatorSignatures(_currentValset, _sigs, newCheckpoint, state_powerThreshold);\r\n\r\n\t\t// ACTIONS\r\n\r\n\t\t// Stored to be used next time to validate that the valset\r\n\t\t// supplied by the caller is correct.\r\n\t\tstate_lastValsetCheckpoint = newCheckpoint;\r\n\r\n\t\t// Store new nonce\r\n\t\tstate_lastValsetNonce = _newValset.valsetNonce;\r\n\r\n\t\t// Send submission reward to msg.sender if reward token is a valid value\r\n\t\tif (_newValset.rewardToken != address(0) && _newValset.rewardAmount != 0) {\r\n\t\t\tIERC20(_newValset.rewardToken).safeTransfer(msg.sender, _newValset.rewardAmount);\r\n\t\t}\r\n\r\n\t\t// LOGS\r\n\r\n\t\tstate_lastEventNonce = state_lastEventNonce + 1;\r\n\t\temit ValsetUpdatedEvent(\r\n\t\t\t_newValset.valsetNonce,\r\n\t\t\tstate_lastEventNonce,\r\n\t\t\t_newValset.rewardAmount,\r\n\t\t\t_newValset.rewardToken,\r\n\t\t\t_newValset.validators,\r\n\t\t\t_newValset.powers\r\n\t\t);\r\n\t}\r\n\r\n\t// submitBatch processes a batch of Cosmos -> Ethereum transactions by sending the tokens in the transactions\r\n\t// to the destination addresses. It is approved by the current Cosmos validator set.\r\n\t// Anyone can call this function, but they must supply valid signatures of state_powerThreshold of the current valset over\r\n\t// the batch.\r\n\tfunction submitBatch(\r\n\t\t// The validators that approve the batch\r\n\t\tValsetArgs calldata _currentValset,\r\n\t\t// These are arrays of the parts of the validators signatures\r\n\t\tValSignature[] calldata _sigs,\r\n\t\t// The batch of transactions\r\n\t\tuint256[] calldata _amounts,\r\n\t\taddress[] calldata _destinations,\r\n\t\tuint256[] calldata _fees,\r\n\t\tuint256 _batchNonce,\r\n\t\taddress _tokenContract,\r\n\t\t// a block height beyond which this batch is not valid\r\n\t\t// used to provide a fee-free timeout\r\n\t\tuint256 _batchTimeout\r\n\t) external nonReentrant {\r\n\t\t// CHECKS scoped to reduce stack depth\r\n\t\t{\r\n\t\t\t// Check that the batch nonce is higher than the last nonce for this token\r\n\t\t\tif (_batchNonce <= state_lastBatchNonces[_tokenContract]) {\r\n\t\t\t\trevert InvalidBatchNonce({\r\n\t\t\t\t\tnewNonce: _batchNonce,\r\n\t\t\t\t\tcurrentNonce: state_lastBatchNonces[_tokenContract]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the batch nonce is less than one million nonces forward from the old one\r\n\t\t\t// this makes it difficult for an attacker to lock out the contract by getting a single\r\n\t\t\t// bad batch through with uint256 max nonce\r\n\t\t\tif (_batchNonce > state_lastBatchNonces[_tokenContract] + 1000000) {\r\n\t\t\t\trevert InvalidBatchNonce({\r\n\t\t\t\t\tnewNonce: _batchNonce,\r\n\t\t\t\t\tcurrentNonce: state_lastBatchNonces[_tokenContract]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the block height is less than the timeout height\r\n\t\t\tif (block.number >= _batchTimeout) {\r\n\t\t\t\trevert BatchTimedOut();\r\n\t\t\t}\r\n\r\n\t\t\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\r\n\t\t\tvalidateValset(_currentValset, _sigs);\r\n\r\n\t\t\t// Check that the supplied current validator set matches the saved checkpoint\r\n\t\t\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\r\n\t\t\t\trevert IncorrectCheckpoint();\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the transaction batch is well-formed\r\n\t\t\tif (_amounts.length != _destinations.length || _amounts.length != _fees.length) {\r\n\t\t\t\trevert MalformedBatch();\r\n\t\t\t}\r\n\r\n\t\t\t// Check that enough current validators have signed off on the transaction batch and valset\r\n\t\t\tcheckValidatorSignatures(\r\n\t\t\t\t_currentValset,\r\n\t\t\t\t_sigs,\r\n\t\t\t\t// Get hash of the transaction batch and checkpoint\r\n\t\t\t\tkeccak256(\r\n\t\t\t\t\tabi.encode(\r\n\t\t\t\t\t\tstate_gravityId,\r\n\t\t\t\t\t\t// bytes32 encoding of \"transactionBatch\"\r\n\t\t\t\t\t\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\r\n\t\t\t\t\t\t_amounts,\r\n\t\t\t\t\t\t_destinations,\r\n\t\t\t\t\t\t_fees,\r\n\t\t\t\t\t\t_batchNonce,\r\n\t\t\t\t\t\t_tokenContract,\r\n\t\t\t\t\t\t_batchTimeout\r\n\t\t\t\t\t)\r\n\t\t\t\t),\r\n\t\t\t\tstate_powerThreshold\r\n\t\t\t);\r\n\r\n\t\t\t// ACTIONS\r\n\r\n\t\t\t// Store batch nonce\r\n\t\t\tstate_lastBatchNonces[_tokenContract] = _batchNonce;\r\n\r\n\t\t\t{\r\n\t\t\t\t// Send transaction amounts to destinations\r\n\t\t\t\tuint256 totalFee;\r\n\t\t\t\tfor (uint256 i = 0; i < _amounts.length; i++) {\r\n\t\t\t\t\tIERC20(_tokenContract).safeTransfer(_destinations[i], _amounts[i]);\r\n\t\t\t\t\ttotalFee = totalFee + _fees[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Send transaction fees to msg.sender\r\n\t\t\t\tIERC20(_tokenContract).safeTransfer(msg.sender, totalFee);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// LOGS scoped to reduce stack depth\r\n\t\t{\r\n\t\t\tstate_lastEventNonce = state_lastEventNonce + 1;\r\n\t\t\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, state_lastEventNonce);\r\n\t\t}\r\n\t}\t\r\n\r\n\t// This makes calls to contracts that execute arbitrary logic\r\n\t// First, it gives the logic contract some tokens\r\n\t// Then, it gives msg.senders tokens for fees\r\n\t// Then, it calls an arbitrary function on the logic contract\r\n\t// invalidationId and invalidationNonce are used for replay prevention.\r\n\t// They can be used to implement a per-token nonce by setting the token\r\n\t// address as the invalidationId and incrementing the nonce each call.\r\n\t// They can be used for nonce-free replay prevention by using a different invalidationId\r\n\t// for each call.\r\n\tfunction submitLogicCall(\r\n\t\t// The validators that approve the call\r\n\t\tValsetArgs calldata _currentValset,\r\n\t\t// These are arrays of the parts of the validators signatures\r\n\t\tValSignature[] calldata _sigs,\r\n\t\tLogicCallArgs memory _args\r\n\t) external nonReentrant {\r\n\t\t// CHECKS scoped to reduce stack depth\r\n\t\t{\r\n\t\t\t// Check that the call has not timed out\r\n\t\t\tif (block.number >= _args.timeOut) {\r\n\t\t\t\trevert LogicCallTimedOut();\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the invalidation nonce is higher than the last nonce for this invalidation Id\r\n\t\t\tif (state_invalidationMapping[_args.invalidationId] >= _args.invalidationNonce) {\r\n\t\t\t\trevert InvalidLogicCallNonce({\r\n\t\t\t\t\tnewNonce: _args.invalidationNonce,\r\n\t\t\t\t\tcurrentNonce: state_invalidationMapping[_args.invalidationId]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// note the lack of nonce skipping check, it's not needed here since an attacker\r\n\t\t\t// will never be able to fill the invalidationId space, therefore a nonce lockout\r\n\t\t\t// is simply not possible\r\n\r\n\t\t\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\r\n\t\t\tvalidateValset(_currentValset, _sigs);\r\n\r\n\t\t\t// Check that the supplied current validator set matches the saved checkpoint\r\n\t\t\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\r\n\t\t\t\trevert IncorrectCheckpoint();\r\n\t\t\t}\r\n\r\n\t\t\tif (_args.transferAmounts.length != _args.transferTokenContracts.length) {\r\n\t\t\t\trevert InvalidLogicCallTransfers();\r\n\t\t\t}\r\n\r\n\t\t\tif (_args.feeAmounts.length != _args.feeTokenContracts.length) {\r\n\t\t\t\trevert InvalidLogicCallFees();\r\n\t\t\t}\r\n\t\t}\r\n\t\t{\r\n\t\t\tbytes32 argsHash = keccak256(\r\n\t\t\t\tabi.encode(\r\n\t\t\t\t\tstate_gravityId,\r\n\t\t\t\t\t// bytes32 encoding of \"logicCall\"\r\n\t\t\t\t\t0x6c6f67696343616c6c0000000000000000000000000000000000000000000000,\r\n\t\t\t\t\t_args.transferAmounts,\r\n\t\t\t\t\t_args.transferTokenContracts,\r\n\t\t\t\t\t_args.feeAmounts,\r\n\t\t\t\t\t_args.feeTokenContracts,\r\n\t\t\t\t\t_args.logicContractAddress,\r\n\t\t\t\t\t_args.payload,\r\n\t\t\t\t\t_args.timeOut,\r\n\t\t\t\t\t_args.invalidationId,\r\n\t\t\t\t\t_args.invalidationNonce\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\t// Check that enough current validators have signed off on the transaction batch and valset\r\n\t\t\tcheckValidatorSignatures(\r\n\t\t\t\t_currentValset,\r\n\t\t\t\t_sigs,\r\n\t\t\t\t// Get hash of the transaction batch and checkpoint\r\n\t\t\t\targsHash,\r\n\t\t\t\tstate_powerThreshold\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// ACTIONS\r\n\r\n\t\t// Update invaldiation nonce\r\n\t\tstate_invalidationMapping[_args.invalidationId] = _args.invalidationNonce;\r\n\r\n\t\t// Send tokens to the logic contract\r\n\t\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\r\n\t\t\tIERC20(_args.transferTokenContracts[i]).safeTransfer(\r\n\t\t\t\t_args.logicContractAddress,\r\n\t\t\t\t_args.transferAmounts[i]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Make call to logic contract\r\n\t\tbytes memory returnData = Address.functionCall(_args.logicContractAddress, _args.payload);\r\n\r\n\t\t// Send fees to msg.sender\r\n\t\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\r\n\t\t\tIERC20(_args.feeTokenContracts[i]).safeTransfer(msg.sender, _args.feeAmounts[i]);\r\n\t\t}\r\n\r\n\t\t// LOGS scoped to reduce stack depth\r\n\t\t{\r\n\t\t\tstate_lastEventNonce = state_lastEventNonce + 1;\r\n\t\t\temit LogicCallEvent(\r\n\t\t\t\t_args.invalidationId,\r\n\t\t\t\t_args.invalidationNonce,\r\n\t\t\t\treturnData,\r\n\t\t\t\tstate_lastEventNonce\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sendToCosmos(\r\n\t\taddress _tokenContract,\r\n\t\tbytes32 _destination,\r\n\t\tuint256 _amount\r\n\t) public nonReentrant {\r\n\t\t// we snapshot our current balance of this token\r\n\t\tuint256 ourStartingBalance = IERC20(_tokenContract).balanceOf(address(this));\r\n\r\n\t\t// attempt to transfer the user specified amount\r\n\t\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n\t\t// check what this particular ERC20 implementation actually gave us, since it doesn't\r\n\t\t// have to be at all related to the _amount\r\n\t\tuint256 ourEndingBalance = IERC20(_tokenContract).balanceOf(address(this));\r\n\r\n\t\t// a very strange ERC20 may trigger this condition, if we didn't have this we would\r\n\t\t// underflow, so it's mostly just an error message printer\r\n\t\tif (ourEndingBalance <= ourStartingBalance) {\r\n\t\t\trevert InvalidSendToCosmos();\r\n\t\t}\r\n\r\n\t\tstate_lastEventNonce = state_lastEventNonce + 1;\r\n\r\n\t\t// emit to Cosmos the actual amount our balance has changed, rather than the user\r\n\t\t// provided amount. This protects against a small set of wonky ERC20 behavior, like\r\n\t\t// burning on send but not tokens that for example change every users balance every day.\r\n\t\temit SendToCosmosEvent(\r\n\t\t\t_tokenContract,\r\n\t\t\tmsg.sender,\r\n\t\t\t_destination,\r\n\t\t\tourEndingBalance - ourStartingBalance,\r\n\t\t\tstate_lastEventNonce\r\n\t\t);\r\n\t}\r\n\r\n\tfunction deployERC20(\r\n\t\tstring calldata _cosmosDenom,\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\tuint8 _decimals\r\n\t) external {\r\n\t\t// Deploy an ERC20 with entire supply granted to Gravity.sol\r\n\t\tCosmosERC20 erc20 = new CosmosERC20(address(this), _name, _symbol, _decimals);\r\n\r\n\t\t// Fire an event to let the Cosmos module know\r\n\t\tstate_lastEventNonce = state_lastEventNonce.add(1);\r\n\t\temit ERC20DeployedEvent(\r\n\t\t\t_cosmosDenom,\r\n\t\t\taddress(erc20),\r\n\t\t\t_name,\r\n\t\t\t_symbol,\r\n\t\t\t_decimals,\r\n\t\t\tstate_lastEventNonce\r\n\t\t);\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t// A unique identifier for this gravity instance to use in signatures\r\n\t\tbytes32 _gravityId,\r\n\t\t// How much voting power is needed to approve operations\r\n\t\tuint256 _powerThreshold,\r\n\t\t// The validator set\r\n\t\taddress[] memory _validators,\r\n\t\tuint256[] memory _powers\r\n\t) public {\r\n\t\t// CHECKS\r\n\r\n\t\t// Check that validators, powers, and signatures (v,r,s) set is well-formed\r\n\t\tif (_validators.length != _powers.length) {\r\n\t\t\trevert MalformedCurrentValidatorSet();\r\n\t\t}\r\n\r\n\t\t// Check cumulative power to ensure the contract has sufficient power to actually\r\n\t\t// pass a vote\r\n\t\tuint256 cumulativePower = 0;\r\n\t\tfor (uint256 i = 0; i < _powers.length; i++) {\r\n\t\t\tcumulativePower = cumulativePower + _powers[i];\r\n\t\t\tif (cumulativePower > _powerThreshold) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (cumulativePower <= _powerThreshold) {\r\n\t\t\trevert InsufficientPower({\r\n\t\t\t\tcumulativePower: cumulativePower,\r\n\t\t\t\tpowerThreshold: _powerThreshold\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tValsetArgs memory _valset;\r\n\t\t_valset = ValsetArgs(_validators, _powers, 0, 0, address(0));\r\n\r\n\t\tbytes32 newCheckpoint = makeCheckpoint(_valset, _gravityId);\r\n\r\n\t\t// ACTIONS\r\n\r\n\t\tstate_gravityId = _gravityId;\r\n\t\tstate_powerThreshold = _powerThreshold;\r\n\t\tstate_lastValsetCheckpoint = newCheckpoint;\r\n\r\n\t\t// LOGS\r\n\r\n\t\temit ValsetUpdatedEvent(\r\n\t\t\tstate_lastValsetNonce,\r\n\t\t\tstate_lastEventNonce,\r\n\t\t\t0,\r\n\t\t\taddress(0),\r\n\t\t\t_validators,\r\n\t\t\t_powers\r\n\t\t);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BatchTimedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCheckpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powerThreshold\",\"type\":\"uint256\"}],\"name\":\"InsufficientPower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidBatchNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLogicCallFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidLogicCallNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLogicCallTransfers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSendToCosmos\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidValsetNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LogicCallTimedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedBatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedCurrentValidatorSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedNewValidatorSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"ERC20DeployedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_invalidationId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_invalidationNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"LogicCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToCosmosEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_invalidation_id\",\"type\":\"bytes32\"}],\"name\":\"lastLogicCallNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToCosmos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_gravityId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"state_invalidationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValSignature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValSignature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"transferAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"transferTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"feeTokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"logicContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timeOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"invalidationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"invalidationNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct LogicCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"submitLogicCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValSignature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"testCheckValidatorSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_valsetArgs\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_gravityId\",\"type\":\"bytes32\"}],\"name\":\"testMakeCheckpoint\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_newValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct ValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValSignature[]\",\"name\":\"_sigs\",\"type\":\"tuple[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gravity", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "736f6d6d656c6965722d3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8f5c28f00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000700000000000000000000000021c1e236688fc78580371cae42e0e22fc9a9696f000000000000000000000000b369b35bcf48257f5cc0ad688350dae80bbc994a0000000000000000000000005299d547188b9351ad7e479e1eb2343e4557807200000000000000000000000087e454966552f7e5c675b7ec5fdb3489b81c6c51000000000000000000000000ebbb780845f68920a805f1d69ab4af7d0efc7df5000000000000000000000000fba500406fce5e9c6bf394d2701dcfc3845d4b6d00000000000000000000000009e8e999459728b20be51e8be9eda6ac04cb93ee000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000b7d4878600000000000000000000000000000000000000000000000000000000186b431e0000000000000000000000000000000000000000000000000000000010429b0c0000000000000000000000000000000000000000000000000000000008ba9a470000000000000000000000000000000000000000000000000000000008ba9a470000000000000000000000000000000000000000000000000000000008ba9a4700000000000000000000000000000000000000000000000000000000054dcb77", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0cc737c893f4f801f620d372b01df0f8d6fe82c9585b72e83600f517f252d7a"}]}