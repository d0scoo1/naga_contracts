{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NftPaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Derived from OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\n/// @title Creat00r Blacklist NftPaymentSplitter\\n/// @author Bitstrays Team\\n\\n//////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                  //\\n//                                                                                  //\\n//                                 ,\u2584\u2584                                              //\\n//                                 \u2593\u2588\u2588\u2588\u2584\u2584\u2593\u2588\u2588\u2584                                       //\\n//                            ,\u2554\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u258c     \u2551\u2588\u2588\u2588\u2588\u0393                                 //\\n//                         \u2554\u2588\u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u258c     \u2551\u2588\u2588\u2588\u2588      \u255f\u2588\u2588\u2584                        //\\n//                      \u2553\u2588\u2580\u2559     ]\u2588\u2588\u2588\u2588\u2588\u2588     \u2551\u2588\u2588\u2588\u258c      \u255f\u2588\u2588\u2588\u2588\u2588\u2593,                    //\\n//                   ,\u2584\u2588\u2580        \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2310    \u2551\u2588\u2588\u2588\u258c      \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584                  //\\n//                  \u2584\u2588\u2559          \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2592    \u2551\u2588\u2588\u2588\u258c       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584                //\\n//                \u2553\u2588\u2580            \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2551\u2588\u2588\u2588\u2592       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584              //\\n//               \u2590\u2588              \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2551\u2588\u2588\u2588\u2592       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588             //\\n//              \u2584\u2588               \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2551\u2588\u2588\u2588\u2592       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            //\\n//             \u2554\u2588                \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2551\u2588\u2588\u2588\u258c       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           //\\n//            ,\u2588\u2310                \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2310    \u2551\u2588\u2588\u2588\u258c      \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          //\\n//            \u2551\u258c                 \u2559\u2588\u2588\u2588\u2588\u2588\u2588     \u2551\u2588\u2588\u2588\u258c      \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          //\\n//            \u2588\u258c                  \u2588\u2588\u2588\u2588\u2588\u258c     \u2551\u2588\u2588\u2588\u2588      \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c         //\\n//           ]\u2588     ]\u2584            \u255f\u2588\u2588\u2588\u2588\u258c     \u2551\u2588\u2588\u2588\u2588\u2592    ]\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2559\u255f\u2588\u2588\u2588\u2588\u258c         //\\n//           \u2590\u2588     \u2590\u2588             \u2588\u2588\u2588\u2588      \u2551\u2588\u2588\u2588\u2588\u2588    \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2588\u2588\u2588\u2588\u258c         //\\n//            \u2593\u2592     \u2588\u2592            \u2514\u2580\u2580       \u2551\u2588\u2588\u2588\u2588\u2588\u2588,,\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u255f\u2588\u2588\u2588\u2588\u258c         //\\n//            \u255f\u258c     \u2551\u2588                      \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ]\u2588\u2588\u2588\u2588\u2588\u2310         //\\n//            \u2559\u2588      \u255f\u2588                     \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u255c \u2563\u2588\u2588\u2588\u2588\u258c          //\\n//             \u255f\u258c      \u256b\u258c                    \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310 \u2593\u2588\u2588\u2588\u2588\u2588           //\\n//              \u256b\u258c      \u255a\u2588\u00b5                  \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 ,\u2593\u2588\u2588\u2588\u2588\u2588`           //\\n//               \u255f\u2588      \u2514\u2580\u2588                 \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588` \u2584\u2588\u2588\u2588\u2588\u2588\u2588             //\\n//                \u255a\u2588\u00b5      `\u2580\u2588\u2584              \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2580              //\\n//                 `\u2588\u2588        \u2559\u2580\u2588\u2584,          \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559 ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2559               //\\n//                   \u2559\u2588\u2584         `\u2559\u2580\u2588\u2588\u2584\u2584\u2566\u2553\u2553,\u2553\u255a\u2580\u2580\u2580\u2580\u2580\u2559  ,\u2557\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2559                 //\\n//                     \\\"\u2580\u2588\u2566              \u2559\u2559\u2559\u2559\u2554\u2584\u2584\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                    //\\n//                        \u2559\u2580\u2588\u2584,              \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580                       //\\n//                           `\u2559\u2580\u2588\u2584\u2566\u2553         \u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2559                           //\\n//                                 \u2559\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2593                                       //\\n//                                                                                  //\\n//                                                                                  //\\n//////////////////////////////////////////////////////////////////////////////////////\\n\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title NftPaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of NFT holders. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n * This contract is derived from the openzeppelin payment splitter and modified for NFT payment splitting.\\n *\\n * The split will be equal parts. The way this is specified is by assigning each\\n * NFT to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n * There are only two types of shares the owner shares and the NFT holder share.\\n */\\ncontract NftPaymentSplitter is Context, Ownable {\\n    using ERC165Checker for address;\\n\\n    event PayeeAdded(uint256 tokenId, uint256 shares);\\n    event PaymentReleased(uint256 tokenId, address to, uint256 amount);\\n    event ERC20PaymentReleased(\\n        uint256 tokenId,\\n        IERC20 indexed token,\\n        address to,\\n        uint256 amount\\n    );\\n    event UnclaimedPaymentReleased(uint256 tokenId, address to, uint256 amount);\\n    event UnclaimedERC20PaymentReleased(\\n        uint256 tokenId,\\n        IERC20 indexed token,\\n        address to,\\n        uint256 amount\\n    );\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n    uint256 private _maxSupply;\\n    uint256 private _sharesPerToken;\\n    uint256 private _totalSharesOffset; //offset for unitialized tokenids\\n    address public creat00rWallet;\\n    address public dev1Wallet;\\n    address public dev2Wallet;\\n\\n    uint32 private constant _creat00rId = 0;\\n    uint32 private constant _dev1Id = 334;\\n    uint32 private constant _dev2Id = 335;\\n\\n\\n    bytes4 public constant IID_IERC721 = type(IERC721).interfaceId;\\n    IERC721 public immutable nftCollection;\\n\\n    mapping(uint256 => uint256) private _shares;\\n    mapping(uint256 => uint256) private _released;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(uint256 => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `NftPaymentSplitter` where each tokenId in `nftCollection_`  is assigned\\n     * the same shared defined in `sharesPerToken_`. The `creat00rShare_` and `creat00rAddress_` are\\n     * used for the collection owner to define a bigger share propotion. \\n     *\\n     * Note\\n     * creat00rShare_ is using the tokenId 0 which may not work for collections where the tokenId 0 exists\\n     * this can be easy modified if required\\n     */\\n    constructor(\\n        uint256 maxSupply_,\\n        uint256 sharesPerToken_,\\n        uint256[] memory creat00rsShare_,\\n        address[] memory creat00rWallets_,\\n        address nftCollection_\\n    ) payable {\\n        require(\\n            nftCollection_ != address(0),\\n            \\\"ERC721 collection address can't be zero address\\\"\\n        );\\n        require(\\n            nftCollection_.supportsInterface(IID_IERC721),\\n            \\\"collection address does not support ERC721\\\"\\n        );\\n        require(maxSupply_ > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        _maxSupply = maxSupply_;\\n        _sharesPerToken = sharesPerToken_;\\n\\n        _totalSharesOffset = maxSupply_ * sharesPerToken_;\\n        nftCollection = IERC721(nftCollection_);\\n\\n        _setupCreat00rShares(creat00rsShare_, creat00rWallets_);\\n\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _calculateTotalShares();\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev calculate the total shares using offset (maxSupply_ * sharesPerToken_)\\n     * offset will be reduce until 0 once everyone claimed once\\n     *\\n     */\\n    function _calculateTotalShares() internal view returns (uint256) {\\n        return _totalShares + _totalSharesOffset;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an NFT tokenId.\\n     */\\n    function shares(uint256 tokenId) public view returns (uint256) {\\n        uint256 tokenShares = _shares[tokenId];\\n        // if shares are unitialized but within range return default allocation\\n        if (tokenShares == 0 && tokenId <= _maxSupply) {\\n            tokenShares = _sharesPerToken;\\n        }\\n        return tokenShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee (NFT tokenId).\\n     */\\n    function released(uint256 tokenId) public view returns (uint256) {\\n        return _released[tokenId];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee (NFT tokenId). `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _erc20Released[token][tokenId];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `tokenId` holder of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     * Initializes payee (NFT tokenId) during first release\\n     */\\n    function release(uint256 tokenId) public virtual {\\n        require(\\n            tokenId <= _maxSupply || _isCreat00r(tokenId),\\n            \\\"PaymentSplitter: tokenId is outside range\\\"\\n        );\\n        if (_shares[tokenId] == 0) {\\n            _addPayee(tokenId, _sharesPerToken);\\n        }\\n        require(_shares[tokenId] > 0, \\\"PaymentSplitter: tokenId has no shares\\\");\\n\\n        address payable account;\\n        if (_isCreat00r(tokenId)) {\\n            account = payable(_getCreat00r(tokenId));\\n        } else {\\n            account = payable(nftCollection.ownerOf(tokenId));\\n        }\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(\\n            tokenId,\\n            totalReceived,\\n            released(tokenId)\\n        );\\n\\n        require(payment != 0, \\\"PaymentSplitter: tokenId is not due payment\\\");\\n\\n        _released[tokenId] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(tokenId, account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `tokenId` holder of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     * Initializes payee (NFT tokenId) during first release.\\n     */\\n    function release(IERC20 token, uint256 tokenId) public virtual {\\n        require(\\n            tokenId <= _maxSupply || _isCreat00r(tokenId),\\n            \\\"PaymentSplitter: tokenId is outside range\\\"\\n        );\\n        if (_shares[tokenId] == 0) {\\n            _addPayee(tokenId, _sharesPerToken);\\n        }\\n        require(_shares[tokenId] > 0, \\\"PaymentSplitter: tokenId has no shares\\\");\\n\\n        address account;\\n        if (_isCreat00r(tokenId)) {\\n            account = _getCreat00r(tokenId);\\n        } else {\\n            account = nftCollection.ownerOf(tokenId);\\n        }\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) +\\n            totalReleased(token);\\n        uint256 payment = _pendingPayment(\\n            tokenId,\\n            totalReceived,\\n            released(token, tokenId)\\n        );\\n\\n        require(payment != 0, \\\"PaymentSplitter: tokenId is not due payment\\\");\\n\\n        _erc20Released[token][tokenId] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(tokenId, token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        uint256 tokenId,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return\\n            (totalReceived * _shares[tokenId]) /\\n            _calculateTotalShares() -\\n            alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * reduce _totalSharesOffset for each tokenId until 0.\\n     * Only called once per tokenId/owner\\n     * @param tokenId nft tokenId\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(uint256 tokenId, uint256 shares_) private {\\n        require(\\n            tokenId <= _maxSupply || _isCreat00r(tokenId),\\n            \\\"PaymentSplitter: tokenId must be < _maxSupply\\\"\\n        );\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(\\n            _shares[tokenId] == 0,\\n            \\\"PaymentSplitter: tokenId already has shares\\\"\\n        );\\n\\n        _shares[tokenId] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        if (!_isCreat00r(tokenId) && _totalSharesOffset - shares_ >= 0) {\\n            _totalSharesOffset = _totalSharesOffset - shares_;\\n        }\\n        emit PayeeAdded(tokenId, shares_);\\n    }\\n\\n    function _isCreat00r(uint256 tokenId) internal pure returns (bool){\\n        return (tokenId == _creat00rId || tokenId == _dev1Id || tokenId == _dev2Id);\\n    }\\n\\n\\n    function _getCreat00r(uint256 tokenId) internal view returns (address){\\n        if(tokenId == _creat00rId) {\\n            return creat00rWallet; \\n        }\\n        if(tokenId == _dev1Id) {\\n            return dev1Wallet; \\n        }\\n        if(tokenId == _dev2Id) {\\n            return dev2Wallet; \\n        }\\n        revert(\\\"Invalid creat00r tokenId\\\");\\n    }\\n\\n    function _setupCreat00rShares(uint256[] memory creat00rsShare_, address[] memory creat00rWallets_) internal {\\n        require(creat00rsShare_.length == creat00rWallets_.length);\\n        require(creat00rWallets_.length == 3);\\n \\n        require(creat00rsShare_[0]>creat00rsShare_[1] && creat00rsShare_[0]>creat00rsShare_[2]);\\n\\n        creat00rWallet = creat00rWallets_[0];\\n        _addPayee(_creat00rId, creat00rsShare_[0]);\\n        dev1Wallet = creat00rWallets_[1];\\n        _addPayee(_dev1Id, creat00rsShare_[1]);\\n        dev2Wallet = creat00rWallets_[2];\\n        _addPayee(_dev2Id, creat00rsShare_[2]);\\n    }\\n\\n    /**\\n     * @notice\\n     *  function to update _creat00rAddress\\n     *  opensea ever shuts down or is compromised\\n     * @dev Only callable by the owner.\\n     * @param creat00rWallet_ nft tokenId\\n     */\\n    function setCreat00rAddress(address creat00rWallet_) external onlyOwner {\\n        require(creat00rWallet_ != address(0), \\\"Zero Address not allowed\\\");\\n        creat00rWallet = creat00rWallet_;\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer for `tokenIds` of the amount of Ether they are owed to creat00r, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     * Only allow payout if list of tokenIds does not exists (NFT's have not been minted)\\n     * (valid tokenIds's range 1-100)\\n     */\\n    function releaseUnlcaimed(uint256[] memory tokenIds) external onlyOwner {\\n        (bool success, bytes memory result) = address(nftCollection).call(abi.encodeWithSignature(\\\"claimExpiration()\\\", msg.sender));\\n        uint claimExpiration = abi.decode(result, (uint));\\n        require(success && claimExpiration < block.timestamp, \\\"nftCollection claim window still active\\\");\\n        uint256 totalPayment = 0;\\n        bool isValidUnclaimedList = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(tokenId <= 100, \\\"Invalid claim id range[1,100]\\\");\\n            try nftCollection.ownerOf(tokenId) {\\n                isValidUnclaimedList = false;\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                if (_shares[tokenId] == 0) {\\n                    _addPayee(tokenId, _sharesPerToken);\\n                }\\n                require(_shares[tokenId] > 0, \\\"PaymentSplitter: tokenId has no shares\\\");\\n                uint256 totalReceived = address(this).balance + totalReleased() - totalPayment;\\n                uint256 payment = _pendingPayment(\\n                    tokenId,\\n                    totalReceived,\\n                    released(tokenId)\\n                );\\n\\n                _released[tokenId] += payment;\\n                _totalReleased += payment;\\n                totalPayment += payment;\\n                emit UnclaimedPaymentReleased(\\n                    tokenId,\\n                    creat00rWallet,\\n                    payment\\n                );\\n            }\\n        }\\n        require(\\n            totalPayment != 0,\\n            \\\"PaymentSplitter: tokenId is not due payment\\\"\\n        );\\n        require(isValidUnclaimedList, \\\"Invalid list of unclaimed token\\\");\\n        Address.sendValue(payable(creat00rWallet), totalPayment);\\n    }\\n\\n\\n    /**\\n     * @dev Triggers a transfer for `tokenIds` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     * Only allow payout if list of tokenIds does not exists (NFT's have not been minted).\\n     * (valid tokenIds's range 1-100)\\n     */\\n    function releaseUnlcaimed(IERC20 token, uint256[] memory tokenIds)\\n        external\\n        onlyOwner\\n    {   \\n        (bool success, bytes memory result) = address(nftCollection).call(abi.encodeWithSignature(\\\"claimExpiration()\\\", msg.sender));\\n        uint claimExpiration = abi.decode(result, (uint));\\n        require(success && claimExpiration < block.timestamp, \\\"nftCollection claim window still active\\\");\\n        uint256 totalPayment = 0;\\n        bool isValidUnclaimedList = true;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(tokenId <= 100, \\\"Invalid claim id range[1,100]\\\");\\n            try nftCollection.ownerOf(tokenId) {\\n                isValidUnclaimedList = false;\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                if (_shares[tokenId] == 0) {\\n                    _addPayee(tokenId, _sharesPerToken);\\n                }\\n                uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token) - totalPayment;\\n                uint256 payment = _pendingPayment(\\n                    tokenId,\\n                    totalReceived,\\n                    released(token, tokenId)\\n                );\\n\\n                //skip update storage since we have nothing to pay\\n                _erc20Released[token][tokenId] += payment;\\n                _erc20TotalReleased[token] += payment;\\n                totalPayment += payment;\\n                emit UnclaimedERC20PaymentReleased(\\n                    tokenId,\\n                    token,\\n                    creat00rWallet,\\n                    payment\\n                );\\n            }\\n        }\\n        require(\\n            totalPayment != 0,\\n            \\\"PaymentSplitter: account is not due payment\\\"\\n        );\\n        require(isValidUnclaimedList, \\\"List contains existing tokenIds\\\");\\n        SafeERC20.safeTransfer(token, creat00rWallet, totalPayment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesPerToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"creat00rsShare_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"creat00rWallets_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nftCollection_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnclaimedERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnclaimedPaymentReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IID_IERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creat00rWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"releaseUnlcaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"releaseUnlcaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creat00rWallet_\",\"type\":\"address\"}],\"name\":\"setCreat00rAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NftPaymentSplitter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000014d00000000000000000000000000000000000000000000000000000000000005dd00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000093aa6adfe693006ae1ed6cf872f1a3e9d104807f000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000705870000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000000000000000000300000000000000000000000068cc483258863ad252996a9d3408abe222bfb9a10000000000000000000000004abf641523d6a51bd8ad205a0b412ed7a40cd355000000000000000000000000a433be091330a91f43da97ae37b6442da34b86d0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}