{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ncontract Ownable {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        m_Owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }    \r\n    function transferOwnership(address _address) public virtual {\r\n        require(msg.sender == m_Owner);\r\n        m_Owner = _address;\r\n        emit OwnershipTransferred(msg.sender, _address);\r\n    }                                                                                        \r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ninterface Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\ninterface Router {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\r\n}\r\ninterface Pair { \r\n    function token0() external returns (address);\r\n    function token1() external returns (address);\r\n}\r\ninterface ERC20 { \r\n    function balanceOf(address _address) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\ninterface WETH9 {\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ncontract FTPLiqLock is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address m_USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address m_BackupBurn = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    mapping (address => address) private m_Router;\r\n    mapping (address => uint256) private m_PairRelease;\r\n    mapping (address => address) private m_PayoutAddress;\r\n    mapping (address => uint256) private m_StartingBalance;\r\n    \r\n    event Lock (address Pair, address Token1, address Token2, address Payout, uint256 Release);\r\n    event LockExtended (address Pair, uint256 Release);\r\n    event BurnFailure (string Error);\r\n\r\n    constructor() {}\r\n    receive() external payable {}\r\n    \r\n    // You can use this contract to autolock upon addLiquidity(). * coding required * Reference FairTokenProject deployed contracts\r\n    // Locks can be WETH or USDC based pairs.\r\n    // Locks can be from Uniswap or Sushiswap.(Or any uniswap clone)\r\n    // Developer can only receive funds equal to what was present at time of the lock. \r\n    // Token supply that would normally be returned to locking party is instead burned.\r\n    // Unused LP tokens are burned.\r\n    // Example: Developer locks with 5 ETH in the pair, Developer is issued 500 LP tokens as keys, LP tokens get locked with this contract\r\n    //          Lock expires with 50 ETH in the pair, Developer withdraws (removes liquidity), Contract uses 50 LP keys to return 5 ETH to Developer\r\n    //          Remaining 450 LP Keys are sent to the burn address, the 10% of the tokens in pair that were withdrawn are also burned.\r\n    function lockTokens(address _pair, uint256 _epoch, address _tokenPayout, address _router) external {\r\n        address _factory = Router(_router).factory();\r\n        address _weth = Router(_router).WETH();\r\n        require(Factory(_factory).getPair(Pair(_pair).token0(), Pair(_pair).token1()) == _pair, \"Please only deposit valid pair tokens\");\r\n        require(Pair(_pair).token0() == _weth || Pair(_pair).token0() == m_USDC || Pair(_pair).token1() == _weth || Pair(_pair).token1() == m_USDC, \"Only ETH or USDC pairs\");\r\n        uint256 _balance = ERC20(_pair).balanceOf(msg.sender);\r\n        require(_balance.mul(100).div(ERC20(_pair).totalSupply()) >= 99, \"Caller must hold all UniV2 tokens\");\r\n        m_PairRelease[_pair] = _epoch;\r\n        m_PayoutAddress[_pair] = _tokenPayout;\r\n        m_Router[_pair] = _router;\r\n        ERC20(_pair).transferFrom(address(msg.sender), address(this), _balance);\r\n        if(Pair(_pair).token0() == m_USDC || Pair(_pair).token1() == m_USDC)\r\n            m_StartingBalance[_pair] = ERC20(m_USDC).balanceOf(_pair);\r\n        else\r\n            m_StartingBalance[_pair] = ERC20(_weth).balanceOf(_pair);\r\n        \r\n        emit Lock(_pair, Pair(_pair).token0(), Pair(_pair).token1(), _tokenPayout, _epoch);\r\n    }    \r\n    function releaseTokens(address _pair) external {\r\n        uint256 _pairBalance = ERC20(_pair).balanceOf(address(this));\r\n        require(msg.sender == m_PayoutAddress[_pair]);\r\n        require(_pairBalance > 0, \"No tokens to release\");\r\n        require(block.timestamp > m_PairRelease[_pair], \"Lock expiration not reached\");\r\n        address _router = m_Router[_pair];\r\n        address _contract;\r\n        address _weth = Router(_router).WETH();\r\n        if(Pair(_pair).token0() == _weth || Pair(_pair).token0() == m_USDC)\r\n            _contract = Pair(_pair).token1();\r\n        else\r\n            _contract = Pair(_pair).token0();\r\n        uint256 _factor = 0;\r\n        uint256 _share = 0;\r\n\r\n        // Calculates balances and removes appropriate amount of liquidity to give developer initial balance.\r\n        if (Pair(_pair).token0() == m_USDC || Pair(_pair).token1() == m_USDC) {\r\n            uint256 _USDBalance = ERC20(m_USDC).balanceOf(_pair);\r\n            uint256 _starting = m_StartingBalance[_pair];\r\n            _factor = _USDBalance.div(_starting);\r\n            _share = _pairBalance.div(_factor);\r\n            ERC20(_pair).approve(_router, _share);\r\n            (uint256 _USDFunds,) = Router(_router).removeLiquidity(m_USDC, _contract, _share, _starting.sub(1), 0, address(this), block.timestamp); //sub(1) due to LP burn on initial addLiquidity\r\n            ERC20(m_USDC).transfer(m_PayoutAddress[_pair], _USDFunds);\r\n        }\r\n        else {\r\n            uint256 _wethBalance = ERC20(_weth).balanceOf(_pair);\r\n            uint256 _starting = m_StartingBalance[_pair];\r\n            _factor = _wethBalance.div(_starting);\r\n            _share = _pairBalance.div(_factor);\r\n            ERC20(_pair).approve(_router, _share);\r\n            (uint256 _wethFunds,) = Router(_router).removeLiquidity(_weth, _contract, _share, _starting.sub(1), 0, address(this), block.timestamp); //sub(1) due to LP burn on initial addLiquidity\r\n            WETH9(_weth).withdraw(_wethFunds);\r\n            payable(m_PayoutAddress[_pair]).transfer(_wethFunds);    \r\n        }\r\n\r\n        // Burns the portion of supply that was removed, attempts address 0 then dead address finally leaves tokens in this contract as a last resort.\r\n        try ERC20(_contract).transfer(address(0), ERC20(_contract).balanceOf(address(this))) {\r\n        } catch Error(string memory _err) {\r\n            emit BurnFailure(_err);\r\n            try ERC20(_contract).transfer(m_BackupBurn, ERC20(_contract).balanceOf(address(this))) {\r\n            } catch Error(string memory _err2) {\r\n                emit BurnFailure(_err2);\r\n                emit BurnFailure(\"Excess tokens locked in FTPLiqLock as last resort\");\r\n            }\r\n        }\r\n\r\n        // Burns remaining Keys, if any.\r\n        uint256 _remaining = ERC20(_pair).balanceOf(address(this));\r\n        if(_remaining > 0)\r\n            ERC20(_pair).transfer(address(0), _remaining);\r\n    }    \r\n    // Developer may choose to burn at any time.\r\n    function burnKeys(address _pair) external {\r\n        require(msg.sender == m_PayoutAddress[_pair]);\r\n        m_StartingBalance[_pair] = 0;\r\n        ERC20(_pair).transfer(address(0), ERC20(_pair).balanceOf(address(this)));\r\n    }\r\n    function extendLock(address _pair, uint256 _epoch) external {\r\n        uint256 _pairBalance = ERC20(_pair).balanceOf(address(this));\r\n        require(_pairBalance > 0);\r\n        require(msg.sender == m_PayoutAddress[_pair]);\r\n        require(_epoch > m_PairRelease[_pair]);\r\n        m_PairRelease[_pair] = _epoch;\r\n        emit LockExtended(_pair, _epoch);\r\n    }\r\n    function getLockedTokens(address _pair) external view returns (uint256 ReleaseDate, address PayoutAddress, uint256 StartingBalance) {\r\n        return (m_PairRelease[_pair], m_PayoutAddress[_pair], m_StartingBalance[_pair]);\r\n    }\r\n    function updateUSDC(address _address) external {\r\n        require(msg.sender == owner());\r\n        m_USDC = _address;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Error\",\"type\":\"string\"}],\"name\":\"BurnFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Payout\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Release\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Release\",\"type\":\"uint256\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"burnKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"PayoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"StartingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenPayout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FTPLiqLock", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e2361cf4dfe69d25a09dacbab41b67bddbd9e2b2630ad49545b46de9e3ce2507"}]}