{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bot/EvaFlowRandomChecker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by Openflow.network core team.\\npragma solidity ^0.8.0;\\nimport {IEvabaseConfig} from \\\"../interfaces/IEvabaseConfig.sol\\\";\\nimport {IEvaFlow} from \\\"../interfaces/IEvaFlow.sol\\\";\\nimport {IEvaFlowController, EvaFlowMeta} from \\\"../interfaces/IEvaFlowController.sol\\\";\\nimport \\\"../lib/MathConv.sol\\\";\\nimport {KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\nimport {IEvaFlowChecker} from \\\"../interfaces/IEvaFlowChecker.sol\\\";\\n\\ncontract EvaFlowRandomChecker is IEvaFlowChecker {\\n    IEvabaseConfig public config;\\n\\n    uint32 private constant _GAS_SAVE = 60_000;\\n    uint256 private constant _TIME_SOLT = 12 seconds;\\n\\n    constructor(address _config) {\\n        require(_config != address(0), \\\"addess is 0x\\\");\\n        config = IEvabaseConfig(_config);\\n    }\\n\\n    struct Args {\\n        uint256 flowCount;\\n        uint256 startIndex;\\n        uint256 keeperCount;\\n        uint256 keepbotId;\\n        uint256 maxCheck;\\n        IEvaFlowController controller;\\n        KeepNetWork network;\\n    }\\n\\n    function check(\\n        uint256 keepbotId,\\n        uint256 lastMoveTime,\\n        KeepNetWork keepNetWork\\n    ) external override returns (bool needExec, bytes memory execData) {\\n        // solhint-disable avoid-tx-origin\\n        require(tx.origin == address(0), \\\"only for off-chain\\\");\\n        Args memory args;\\n        args.controller = IEvaFlowController(config.control());\\n        args.flowCount = args.controller.getAllVaildFlowSize(keepNetWork);\\n\\n        if (args.flowCount > 0) {\\n            args.keepbotId = keepbotId;\\n            args.network = keepNetWork;\\n            args.maxCheck = config.batchFlowNum();\\n            args.keeperCount = config.keepBotSizes(keepNetWork);\\n            require(args.keeperCount > 0, \\\"keeper is zero\\\");\\n            require(args.maxCheck > 0, \\\"max check is zero\\\");\\n            args.startIndex = _selectBeginIndex(args.flowCount, lastMoveTime);\\n\\n            (uint256[] memory flows, bytes[] memory datas) = _checkFlows(args);\\n\\n            if (flows.length > 0) {\\n                needExec = true;\\n                execData = abi.encode(flows, datas);\\n            }\\n        }\\n    }\\n\\n    function _selectBeginIndex(uint256 count, uint256 lastMoveTime) internal view returns (uint256) {\\n        // solhint-disable\\n        if (block.timestamp - lastMoveTime >= _TIME_SOLT) {\\n            return uint256(keccak256(abi.encodePacked(block.timestamp))) % count;\\n        } else {\\n            return uint256(keccak256(abi.encodePacked(lastMoveTime))) % count;\\n        }\\n    }\\n\\n    function _checkFlows(Args memory args) internal returns (uint256[] memory flows, bytes[] memory datas) {\\n        uint256 mod = (args.flowCount % args.keeperCount);\\n        uint256 max = args.flowCount / args.keeperCount;\\n        max += mod > 0 && args.keepbotId <= mod ? 1 : 0;\\n        if (max > args.maxCheck) {\\n            max = args.maxCheck;\\n        }\\n        uint256[] memory flowsAll = new uint256[](max);\\n        bytes[] memory datasAll = new bytes[](max);\\n\\n        uint256 needExecCount;\\n        uint256 keepIndex = args.keepbotId - 1;\\n        for (uint256 i = keepIndex; i < max * args.keeperCount; i += args.keeperCount) {\\n            uint256 nextIndex = i % args.flowCount;\\n            uint256 flowId = args.controller.getIndexVaildFlow(nextIndex, args.network);\\n            EvaFlowMeta memory meta = args.controller.getFlowMetas(flowId);\\n            try IEvaFlow(meta.lastVersionflow).check(meta.checkData) returns (bool needExec, bytes memory executeData) {\\n                if (needExec) {\\n                    (bool success, ) = address(args.controller).call{value: 0}(\\n                        abi.encodeWithSelector(IEvaFlowController.execFlow.selector, address(this), flowId, executeData)\\n                    );\\n                    if (success) {\\n                        flowsAll[needExecCount] = flowId;\\n                        datasAll[needExecCount] = executeData;\\n                        needExecCount++;\\n                    }\\n                }\\n                // solhint-disable\\n            } catch {} //ignore error\\n\\n            if (gasleft() <= _GAS_SAVE) {\\n                break;\\n            }\\n        }\\n\\n        // remove empty item\\n        flows = new uint256[](needExecCount);\\n        datas = new bytes[](needExecCount);\\n        for (uint256 i = 0; i < needExecCount; i++) {\\n            flows[i] = flowsAll[i];\\n            datas[i] = datasAll[i];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvabaseConfig.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\nimport {KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\nstruct KeepInfo {\\n    bool isActive;\\n    KeepNetWork keepNetWork;\\n}\\n\\ninterface IEvabaseConfig {\\n    event AddKeeper(address indexed user, address keeper, KeepNetWork keepNetWork);\\n    event RemoveKeeper(address indexed user, address keeper);\\n    event AddBatchKeeper(address indexed user, address[] keeper, KeepNetWork[] keepNetWork);\\n    event RemoveBatchKeeper(address indexed user, address[] keeper);\\n\\n    event SetControl(address indexed user, address control);\\n    event SetBatchFlowNum(address indexed user, uint32 num);\\n\\n    function getBytes32Item(bytes32 key) external view returns (bytes32);\\n\\n    function getAddressItem(bytes32 key) external view returns (address);\\n\\n    function control() external view returns (address);\\n\\n    function isKeeper(address query) external view returns (bool);\\n\\n    function batchFlowNum() external view returns (uint32);\\n\\n    function keepBotSizes(KeepNetWork keepNetWork) external view returns (uint32);\\n\\n    function getKeepBot(address add) external view returns (KeepInfo memory);\\n\\n    function isActiveControler(address add) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaFlow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\ninterface IEvaFlow {\\n    function check(bytes memory checkData) external view returns (bool needExecute, bytes memory executeData);\\n\\n    function execute(bytes memory executeData) external returns (bool canDestoryFlow);\\n\\n    function needClose(bytes memory checkData) external returns (bool yes);\\n\\n    function close(bytes memory checkData) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaFlowController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\nimport {FlowStatus, KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\n//struct\\nstruct EvaFlowMeta {\\n    FlowStatus flowStatus;\\n    KeepNetWork keepNetWork;\\n    address admin;\\n    address lastKeeper;\\n    address lastVersionflow;\\n    uint256 lastExecNumber;\\n    uint256 maxVaildBlockNumber;\\n    string flowName;\\n    bytes checkData;\\n}\\n\\nstruct EvaUserMeta {\\n    uint120 ethBal;\\n    uint120 gasTokenBal; //keep\\n    uint8 vaildFlowsNum;\\n}\\n\\nstruct MinConfig {\\n    address feeRecived;\\n    address feeToken;\\n    uint64 minGasFundForUser;\\n    uint64 minGasFundOneFlow;\\n    uint16 ppb;\\n    uint16 blockCountPerTurn;\\n}\\n\\ninterface IEvaFlowController {\\n    event FlowOperatorChanged(address op, bool removed);\\n    event FlowCreated(address indexed user, uint256 indexed flowId, address flowAdd, bytes checkData, uint256 fee);\\n    event FlowUpdated(address indexed user, uint256 flowId, address flowAdd);\\n    event FlowClosed(address indexed user, uint256 flowId);\\n    event FlowExecuteSuccess(\\n        address indexed user,\\n        uint256 indexed flowId,\\n        uint120 payAmountByETH,\\n        uint120 payAmountByFeeToken,\\n        uint256 gasUsed\\n    );\\n    event FlowExecuteFailed(\\n        address indexed user,\\n        uint256 indexed flowId,\\n        uint120 payAmountByETH,\\n        uint120 payAmountByFeeToken,\\n        uint256 gasUsed,\\n        string reason\\n    );\\n\\n    event SetMinConfig(\\n        address indexed user,\\n        address feeRecived,\\n        address feeToken,\\n        uint64 minGasFundForUser,\\n        uint64 minGasFundOneFlow,\\n        uint16 ppb,\\n        uint16 blockCountPerTurn\\n    );\\n\\n    function registerFlow(\\n        string memory name,\\n        KeepNetWork keepNetWork,\\n        address flow,\\n        bytes memory checkdata\\n    ) external payable returns (uint256 flowId);\\n\\n    function closeFlow(uint256 flowId) external;\\n\\n    function closeFlowWithGas(uint256 flowId, uint256 before) external;\\n\\n    function execFlow(\\n        address keeper,\\n        uint256 flowId,\\n        bytes memory inputData\\n    ) external;\\n\\n    function depositFund(address flowAdmin) external payable;\\n\\n    function withdrawFund(address recipient, uint256 amount) external;\\n\\n    function withdrawPayment(uint256 amount) external;\\n\\n    function getIndexVaildFlow(uint256 index, KeepNetWork keepNetWork) external view returns (uint256 value);\\n\\n    function getAllVaildFlowSize(KeepNetWork keepNetWork) external view returns (uint256 size);\\n\\n    function getFlowMetas(uint256 index) external view returns (EvaFlowMeta memory);\\n\\n    function getFlowMetaSize() external view returns (uint256);\\n\\n    function batchExecFlow(address keeper, bytes memory data) external;\\n\\n    function getFlowCheckInfo(uint256 flowId) external view returns (address flow, bytes memory checkData);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MathConv.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\n/* solhint-disable */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary MathConv {\\n    function toU120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"to120-overflow\\\");\\n        return uint120(value);\\n    }\\n\\n    function toU96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"to96-overflow\\\");\\n        return uint96(value);\\n    }\\n\\n    function toU64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"to64-overflow\\\");\\n        return uint64(value);\\n    }\\n\\n    function toU8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"to8-overflow\\\");\\n        return uint8(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/EvabaseHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\nenum CompareOperator {\\n    Eq,\\n    Ne,\\n    Ge,\\n    Gt,\\n    Le,\\n    Lt\\n}\\n\\nenum FlowStatus {\\n    Active, //\u53ef\u6267\u884c\\n    Closed,\\n    Expired,\\n    Completed,\\n    Unknown\\n}\\n\\nenum KeepNetWork {\\n    ChainLink,\\n    Evabase,\\n    Gelato,\\n    Others\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaFlowChecker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//author: Evabase core team\\n\\npragma solidity ^0.8.0;\\nimport {KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\ninterface IEvaFlowChecker {\\n    function check(\\n        uint256 keepbotId,\\n        uint256 lastMoveTime,\\n        KeepNetWork keepNetWork\\n    ) external returns (bool needExec, bytes memory execData);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keepbotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastMoveTime\",\"type\":\"uint256\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"needExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IEvabaseConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EvaFlowRandomChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d184542faf47350e7042e31a74af188803dc9907", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}