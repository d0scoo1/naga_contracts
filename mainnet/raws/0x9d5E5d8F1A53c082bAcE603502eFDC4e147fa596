{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: \r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/TrustListTools.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract TrustListInterface{\r\n  function is_trusted(address addr) public returns(bool);\r\n}\r\n\r\ncontract TrustListTools{\r\n  TrustListInterface public trustlist;\r\n  constructor(address _list) public {\r\n    //require(_list != address(0x0));\r\n    trustlist = TrustListInterface(_list);\r\n  }\r\n\r\n  modifier is_trusted(address addr){\r\n    require(trustlist.is_trusted(addr), \"not a trusted issuer\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/core/EFAgent.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract EFAgent is TrustListTools {\r\n    constructor (address trustlist_addr) public TrustListTools(trustlist_addr) {\r\n    }\r\n\r\n    // to be used for ERC20\r\n    function exec(address callee, bytes calldata payload) external is_trusted(msg.sender) returns (bytes memory)  {\r\n        (bool success, bytes memory returnData) = address(callee).call(payload);\r\n        require(success, \"callee return failed when executing payload\");\r\n        return returnData;\r\n    }\r\n\r\n    // fallback function for receive ETH\r\n    event ReceiveETH(uint256);\r\n    function() external payable {\r\n        emit ReceiveETH(msg.value);\r\n    }\r\n\r\n    // to be used for ETH\r\n    function exec(address callee, uint256 ETH_amount, bytes calldata payload) external payable is_trusted(msg.sender) returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = address(callee).call.value(ETH_amount)(payload);\r\n        require(success, \"callee return failed when executing payload\");\r\n        return returnData;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"ETH_amount\",\"type\":\"uint256\"},{\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustlist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"trustlist_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ReceiveETH\",\"type\":\"event\"}]", "ContractName": "EFAgent", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008753cca1497643d25997ddd9a68b524862ae5aa8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2ec549b9491408938c511ca43369530b7adc0d9e0dc58ad9cc58a188591a05f5"}]}