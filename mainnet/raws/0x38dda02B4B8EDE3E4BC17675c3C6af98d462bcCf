{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ZooIDO.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract ZooIDO is Ownable \\r\\n{\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tIERC20 public zoo;                                                          // Zoo token.\\r\\n\\tIERC20 public dai;                                                          // Dai token.\\r\\n\\r\\n\\taddress public team;                                                        // Zoodao team address.\\r\\n\\r\\n\\tenum Phase\\r\\n\\t{\\r\\n\\t\\tZeroPhase,\\r\\n\\t\\tFirstPhase,\\r\\n\\t\\tSecondPhase,\\r\\n\\t\\tClaimLockPhase,\\r\\n\\t\\tUnlockPhase\\r\\n\\t}\\r\\n\\r\\n\\tuint256 public idoStart;                                                    // Start date of Ido.\\r\\n\\tuint256 public zeroPhaseDuration;                                           // Time before IDO starts.\\r\\n\\tuint256 public firstPhaseDuration = 5 days;                                 // Duration of whitelist buy phase.\\r\\n\\tuint256 public secondPhaseDuration = 3 days;                               // Duration of non whitelist buy phase.\\r\\n\\tuint256 public thirdPhaseDuration = 17 days;                                // Duration of zoo tokens lock from start of ido.\\r\\n\\r\\n\\tuint256 public saleLimit = 800 * 10 ** 18;                                  // Amount of dai allowed to spend.\\r\\n\\tuint256 public zooRate = 5;                                                 // Rate of zoo for dai.\\r\\n\\tuint256 public zooAllocatedTotal;                                           // Amount of total allocated zoo.\\r\\n\\t\\r\\n\\tmapping (address => uint256) public amountAllowed;                          // Amount of dai allowed to spend for each whitelisted person.\\r\\n\\r\\n\\tmapping (address => uint256) public zooAllocated;                           // Amount of zoo allocated for each person.\\r\\n\\r\\n\\tmapping (address => uint256) public nonWhiteListLimit;                      // Records if user already take part in not whitelisted IDO.\\r\\n\\r\\n\\tevent DaiInvested(uint256 indexed daiAmount);                               // Records amount of dai spent.\\r\\n\\r\\n\\tevent ZooClaimed(uint256 indexed zooAmount);                                // Records amount of zoo claimed.\\r\\n\\r\\n\\tevent TeamClaimed(uint256 indexed daiAmount, uint256 indexed zooAmount);    // Records amount of dai and zoo claimed by team.\\r\\n\\r\\n\\t/// @notice Contract constructor.\\r\\n\\t/// @param _zoo - address of zoo token.\\r\\n\\t/// @param _dai - address of dai token.\\r\\n\\t/// @param _team - address of team.\\r\\n\\t/// @param _zeroPhaseDuration - time until Ido start.\\r\\n\\tconstructor (\\r\\n\\t\\taddress _zoo,\\r\\n\\t\\taddress _dai,\\r\\n\\t\\taddress _team,\\r\\n\\t\\tuint256 _zeroPhaseDuration\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tzoo = IERC20(_zoo);\\r\\n\\t\\tdai = IERC20(_dai);\\r\\n\\r\\n\\t\\tteam = _team;\\r\\n\\t\\tzeroPhaseDuration = _zeroPhaseDuration;\\r\\n\\t\\tidoStart = block.timestamp + zeroPhaseDuration;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to add addresses to whitelist.\\r\\n\\t/// @notice Sets amount of dai allowed to spent.\\r\\n\\t/// @notice so, u can spend up to saleLimit with more than 1 transaction.\\r\\n\\tfunction batchAddToWhiteList(address[] calldata users) external onlyOwner {\\r\\n\\t\\tfor (uint i = 0; i < users.length; i++) {\\r\\n\\t\\t\\tamountAllowed[users[i]] = saleLimit;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to buy zoo tokens for dai.\\r\\n\\t/// @notice Sends dai and sets amount of zoo to claim after claim date.\\r\\n\\t/// @notice Requires to be in whitelist.\\r\\n\\t/// @param amount - amount of dai spent.\\r\\n\\tfunction whitelistedBuy(uint256 amount) external\\r\\n\\t{\\r\\n\\t\\trequire(getCurrentPhase() == Phase.FirstPhase, \\\"Wrong phase!\\\");         // Requires first phase.\\r\\n\\t\\trequire(amountAllowed[msg.sender] >= amount, \\\"amount exceeds limit\\\");   // Requires allowed amount left to spent.\\r\\n\\t\\tuint256 amountZoo = amount.mul(zooRate);                                // Amount of zoo to buy.\\r\\n\\t\\trequire(unallocatedZoo() >= amountZoo, \\\"Not enough zoo\\\");               // Requires to be enough unallocated zoo.\\r\\n\\t\\tdai.transferFrom(msg.sender, address(this), amount);                    // Dai transfers from msg.sender to this contract.\\r\\n\\t\\tzooAllocated[msg.sender] += amountZoo;                                  // Records amount of zoo allocated to this person.\\r\\n\\t\\tzooAllocatedTotal = zooAllocatedTotal.add(amountZoo);                   // Records total amount of allocated zoo.\\r\\n\\r\\n\\t\\tamountAllowed[msg.sender] = amountAllowed[msg.sender].sub(amount);      // Decreases amount of allowed dai to spend.\\r\\n\\r\\n\\t\\temit DaiInvested(amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to buy rest of zoo for non whitelisted.\\r\\n\\t/// @param amount - amount of DAI to spend.\\r\\n\\tfunction notWhitelistedBuy(uint256 amount) external\\r\\n\\t{\\r\\n\\t\\trequire(getCurrentPhase() == Phase.SecondPhase, \\\"Wrong phase!\\\");        // Requires second phase.\\r\\n\\t\\tuint256 amountZoo = amount.mul(zooRate);                                // Amount of zoo to buy.\\r\\n\\t\\trequire(unallocatedZoo() >= amountZoo, \\\"Not enough zoo\\\");               // Requires to be enough unallocated zoo.\\r\\n\\t\\trequire(nonWhiteListLimit[msg.sender] + amount <= saleLimit, \\\"reached sale limit\\\");//Requires amount to spend less than limit.\\r\\n\\r\\n\\t\\tdai.transferFrom(msg.sender, address(this), amount);                    // Dai transfers from msg.sender to this contract.\\r\\n\\r\\n\\t\\tnonWhiteListLimit[msg.sender] += amount;                                // Records amount of dai spent.\\r\\n\\t\\tzooAllocated[msg.sender] += amountZoo;                                  // Records amount of zoo allocated to this person.\\r\\n\\t\\tzooAllocatedTotal += amountZoo;                                         // Records total amount of allocated zoo.\\r\\n\\r\\n\\t\\temit DaiInvested(amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to see amount of not allocated zoo tokens.\\r\\n\\t/// @return availableZoo - amount of zoo available to buy.\\r\\n\\tfunction unallocatedZoo() public view returns(uint256 availableZoo)\\r\\n\\t{\\r\\n\\t\\tavailableZoo = zoo.balanceOf(address(this)).sub(zooAllocatedTotal);     // All Zoo on contract minus allocated to users.\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to claim zoo.\\r\\n\\t/// @notice sents all the zoo tokens bought to caller address.\\r\\n\\tfunction claimZoo() external\\r\\n\\t{\\r\\n\\t\\trequire(getCurrentPhase() == Phase.UnlockPhase, \\\"Wrong phase!\\\");        // Rquires unlock phase. \\r\\n\\t\\trequire(zooAllocated[msg.sender] > 0, \\\"zero zoo allocated\\\");            // Requires amount of dai spent more than zero.\\r\\n\\r\\n\\t\\tuint256 zooAmount = zooAllocated[msg.sender];                           // Amount of zoo to claim.\\r\\n\\r\\n\\t\\tzooAllocated[msg.sender] = 0;                                           // Sets amount of allocated zoo for this user to zero.\\r\\n\\t\\tzooAllocatedTotal.sub(zooAmount);                                       // Reduces amount of total zoo allocated.\\r\\n\\r\\n\\t\\tzoo.transfer(msg.sender, zooAmount);                                    // Transfers zoo.\\r\\n\\r\\n\\t\\temit ZooClaimed(zooAmount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Function to claim dai and unsold zoo from IDO to team.\\r\\n\\tfunction teamClaim() external \\r\\n\\t{\\r\\n\\t\\trequire(getCurrentPhase() == Phase.ClaimLockPhase || getCurrentPhase() == Phase.UnlockPhase, \\\"Wrong phase!\\\");// Requires end of sale.\\r\\n\\r\\n\\t\\tuint256 daiAmount = dai.balanceOf(address(this));                       // Sets dai amount for all tokens invested.\\r\\n\\t\\tuint256 zooAmount = unallocatedZoo();                                   // Sets zoo amount for all unallocated zoo tokens.\\r\\n\\r\\n\\t\\tdai.transfer(team, daiAmount);                                          // Sends all the dai to team address.\\r\\n\\t\\tzoo.transfer(team, zooAmount);                                          // Sends all the zoo left to team address.\\r\\n\\r\\n\\t\\temit TeamClaimed(daiAmount, zooAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentPhase() public view returns (Phase)\\r\\n\\t{\\r\\n\\t\\tif (block.timestamp < idoStart)                                         // before start\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn Phase.ZeroPhase;\\r\\n\\t\\t}\\r\\n\\t\\telse if (block.timestamp < idoStart + firstPhaseDuration)               // from start to phase 1 end.\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn Phase.FirstPhase;\\r\\n\\t\\t}\\r\\n\\t\\telse if (block.timestamp < idoStart + firstPhaseDuration + secondPhaseDuration) // from phase 1 end to ido end(second phase)\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn Phase.SecondPhase;\\r\\n\\t\\t}\\r\\n\\t\\telse if (block.timestamp < idoStart + firstPhaseDuration + secondPhaseDuration + thirdPhaseDuration) // from ido end to claimLock end.\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn Phase.ClaimLockPhase;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn Phase.UnlockPhase;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zoo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zeroPhaseDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"DaiInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"zooAmount\",\"type\":\"uint256\"}],\"name\":\"TeamClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"zooAmount\",\"type\":\"uint256\"}],\"name\":\"ZooClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchAddToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimZoo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPhaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"enum ZooIDO.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonWhiteListLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notWhitelistedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondPhaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdPhaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unallocatedZoo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableZoo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whitelistedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroPhaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zoo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zooAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooAllocatedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zooRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZooIDO", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000009f098b155d561fc9f7bccc97038b7e3d20baf740000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000047515585ef943f8e56c17ba0f50fb7e28ce1c4dc0000000000000000000000000000000000000000000000000000000000000e10", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}