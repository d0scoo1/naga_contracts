{"status": "1", "message": "OK", "result": [{"SourceCode": "/// SPDX-License-Identifier: AGPL-3.0\r\n\r\n// One day, someone is going to try very hard to prevent you\r\n// from accessing one of these storage slots.\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface Dmap {\r\n    error LOCKED();\r\n    event Set(\r\n        address indexed zone,\r\n        bytes32 indexed name,\r\n        bytes32 indexed meta,\r\n        bytes32 indexed data\r\n    ) anonymous;\r\n\r\n    function set(bytes32 name, bytes32 meta, bytes32 data) external;\r\n    function get(bytes32 slot) external view returns (bytes32 meta, bytes32 data);\r\n}\r\n\r\ncontract _dmap_ {\r\n    error LOCKED();\r\n    uint256 constant LOCK = 0x1;\r\n    constructor(address rootzone) { assembly {\r\n        sstore(0, LOCK)\r\n        sstore(1, shl(96, rootzone))\r\n    }}\r\n    fallback() external payable { assembly {\r\n        if eq(36, calldatasize()) {\r\n            mstore(0, sload(calldataload(4)))\r\n            mstore(32, sload(add(1, calldataload(4))))\r\n            return(0, 64)\r\n        }\r\n        let name := calldataload(4)\r\n        let meta := calldataload(36)\r\n        let data := calldataload(68)\r\n        mstore(0, caller())\r\n        mstore(32, name)\r\n        let slot := keccak256(0, 64)\r\n        log4(0, 0, caller(), name, meta, data)\r\n        sstore(add(slot, 1), data)\r\n        if iszero(or(xor(100, calldatasize()), and(LOCK, sload(slot)))) {\r\n            sstore(slot, meta)\r\n            return(0, 0)\r\n        }\r\n        if eq(100, calldatasize()) {\r\n            mstore(0, shl(224, 0xa1422f69))\r\n            revert(0, 4)\r\n        }\r\n        revert(0, 0)\r\n    }}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootzone\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LOCKED\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "_dmap_", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000022ea9ba506e38ef6093b6ab53e48bbd60f86832", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://475e238f09c07b2df011287cd0b887d9e0864657776ab6a3484c43f79237fefa"}]}