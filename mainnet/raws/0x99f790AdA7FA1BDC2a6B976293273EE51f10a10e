{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CDSTemplate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n/**\\n * @author InsureDAO\\n * @title InsureDAO CDS template contract\\n * SPDX-License-Identifier: GPL-3.0\\n */\\n\\nimport \\\"./interfaces/IUniversalMarket.sol\\\";\\nimport \\\"./InsureDAOERC20.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IParameters.sol\\\";\\nimport \\\"./interfaces/ICDSTemplate.sol\\\";\\n\\ncontract CDSTemplate is InsureDAOERC20, ICDSTemplate, IUniversalMarket {\\n    /**\\n     * EVENTS\\n     */\\n    event Deposit(address indexed depositor, uint256 amount, uint256 mint);\\n    event Fund(address indexed depositor, uint256 amount, uint256 attribution);\\n    event Defund(\\n        address indexed depositor,\\n        uint256 amount,\\n        uint256 attribution\\n    );\\n\\n    event WithdrawRequested(\\n        address indexed withdrawer,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);\\n    event Compensated(address indexed index, uint256 amount);\\n    event Paused(bool paused);\\n    event MetadataChanged(string metadata);\\n\\n    /**\\n     * Storage\\n     */\\n    /// @notice Market setting\\n    bool public initialized;\\n    bool public paused;\\n    string public metadata;\\n\\n    /// @notice External contract call addresses\\n    IParameters public parameters;\\n    IRegistry public registry;\\n    IVault public vault;\\n    uint256 public surplusPool;\\n    uint256 public crowdPool;\\n    uint256 private constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation\\n\\n    ///@notice user status management\\n    struct Withdrawal {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n    mapping(address => Withdrawal) public withdrawalReq;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == parameters.getOwner(),\\n            \\\"ERROR: ONLY_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        initialized = true;\\n    }\\n\\n    /**\\n     * Initialize interaction\\n     */\\n\\n    /**\\n     * @notice Initialize market\\n     * This function registers market conditions.\\n     * references[0] = underlying token address\\n     * references[1] = registry\\n     * references[2] = parameter\\n     * @param _metaData arbitrary string to store market information\\n     * @param _conditions array of conditions\\n     * @param _references array of references\\n     */\\n    function initialize(\\n        address _depositor,\\n        string calldata _metaData,\\n        uint256[] calldata _conditions,\\n        address[] calldata _references\\n    ) external override{\\n        require(\\n            !initialized &&\\n                bytes(_metaData).length != 0 &&\\n                _references[0] != address(0) &&\\n                _references[1] != address(0) &&\\n                _references[2] != address(0),\\n            \\\"INITIALIZATION_BAD_CONDITIONS\\\"\\n        );\\n\\n        initialized = true;\\n\\n        initializeToken(\\\"InsureDAO-Reserve\\\", \\\"iReserve\\\", IERC20Metadata(_references[0]).decimals());\\n\\n        parameters = IParameters(_references[2]);\\n        vault = IVault(parameters.getVault(_references[0]));\\n        registry = IRegistry(_references[1]);\\n\\n        metadata = _metaData;\\n    }\\n\\n    /**\\n     * Pool initeractions\\n     */\\n\\n    /**\\n     * @notice A liquidity provider supplies collatral to the pool and receives iTokens\\n     * @param _amount amount of token to deposit\\n     */\\n    function deposit(uint256 _amount) external returns (uint256 _mintAmount) {\\n        require(!paused, \\\"ERROR: PAUSED\\\");\\n        require(_amount != 0, \\\"ERROR: DEPOSIT_ZERO\\\");\\n\\n        //deposit and pay fees\\n        uint256 _liquidity = vault.attributionValue(crowdPool); //get USDC balance with crowdPool's attribution\\n        uint256 _supply = totalSupply();\\n\\n        crowdPool += vault.addValue(_amount, msg.sender, address(this)); //increase attribution\\n\\n        if (_supply != 0) {\\n            _mintAmount = _liquidity == 0 ? _amount * _supply : (_amount * _supply) / _liquidity;\\n        } else {\\n            _mintAmount = _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _amount, _mintAmount);\\n\\n        //mint iToken\\n        _mint(msg.sender, _mintAmount);\\n    }\\n\\n    /**\\n     * @notice A depositor supplies fund to the pool without receiving iTokens\\n     * @param _amount amount of token to deposit\\n     */\\n    function fund(uint256 _amount) external {\\n        require(!paused, \\\"ERROR: PAUSED\\\");\\n\\n        //deposit and pay fees\\n        uint256 _attribution = vault.addValue(\\n            _amount,\\n            msg.sender,\\n            address(this)\\n        );\\n\\n        surplusPool += _attribution;\\n\\n        emit Fund(msg.sender, _amount, _attribution);\\n    }\\n\\n    function defund(address _to, uint256 _amount) external override onlyOwner {\\n        require(!paused, \\\"ERROR: PAUSED\\\");\\n\\n        uint256 _attribution = vault.withdrawValue(_amount, _to);\\n        surplusPool -= _attribution;\\n\\n        emit Defund(_to, _amount, _attribution);\\n    }\\n\\n    /**\\n     * @notice A liquidity provider request withdrawal of collateral\\n     * @param _amount amount of iToken to burn\\n     */\\n    function requestWithdraw(uint256 _amount) external {\\n        require(_amount != 0, \\\"ERROR: REQUEST_ZERO\\\");\\n        require(balanceOf(msg.sender) >= _amount, \\\"ERROR: REQUEST_EXCEED_BALANCE\\\");\\n\\n        uint256 _unlocksAt = block.timestamp + parameters.getLockup(address(this));\\n\\n        withdrawalReq[msg.sender].timestamp = _unlocksAt;\\n        withdrawalReq[msg.sender].amount = _amount;\\n\\n        emit WithdrawRequested(msg.sender, _amount, _unlocksAt);\\n    }\\n\\n    /**\\n     * @notice A liquidity provider burns iToken and receives collatral from the pool\\n     * @param _amount amount of iToken to burn\\n     * @return _retVal the amount underlying token returned\\n     */\\n    function withdraw(uint256 _amount) external returns (uint256 _retVal) {\\n        require(!paused, \\\"ERROR: PAUSED\\\");\\n        require(_amount != 0, \\\"ERROR: WITHDRAWAL_ZERO\\\");\\n        \\n        Withdrawal memory request = withdrawalReq[msg.sender];\\n        \\n        require(\\n            request.timestamp <\\n                block.timestamp,\\n            \\\"ERROR: WITHDRAWAL_QUEUE\\\"\\n        );\\n        require(\\n            request.timestamp +\\n                parameters.getWithdrawable(address(this)) >\\n                block.timestamp,\\n            \\\"WITHDRAWAL_NO_ACTIVE_REQUEST\\\"\\n        );\\n        require(\\n            request.amount >= _amount,\\n            \\\"WITHDRAWAL_EXCEEDED_REQUEST\\\"\\n        );\\n\\n        //Calculate underlying value\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply != 0) {\\n            _retVal = (vault.attributionValue(crowdPool) * _amount) / _totalSupply;\\n        }\\n\\n\\n        //reduce requested amount\\n        withdrawalReq[msg.sender].amount -= _amount;\\n\\n        //Burn iToken\\n        _burn(msg.sender, _amount);\\n\\n        //Withdraw liquidity\\n        crowdPool -= vault.withdrawValue(_retVal, msg.sender);\\n        emit Withdraw(msg.sender, _amount, _retVal);\\n    }\\n\\n    /**\\n     * Insurance interactions\\n     */\\n\\n    /**\\n     * @notice Compensate the shortage if an index is insolvent\\n     * @param _amount amount of underlier token to compensate shortage within index\\n     */\\n    function compensate(uint256 _amount)\\n        external\\n        override\\n        returns (uint256 _compensated)\\n    {\\n        require(registry.isListed(msg.sender), \\\"ERROR:UNREGISTERED\\\");\\n        \\n        uint256 _available = vault.underlyingValue(address(this));\\n        uint256 _crowdAttribution = crowdPool;\\n        uint256 _attributionLoss;\\n\\n        //when CDS cannot afford, pay as much as possible\\n        _compensated = _available >= _amount ? _amount : _available;\\n        _attributionLoss = vault.transferValue(_compensated, msg.sender);\\n        emit Compensated(msg.sender, _compensated);\\n\\n        uint256 _crowdPoolLoss =\\n            (_crowdAttribution * _attributionLoss) /\\n            (_crowdAttribution + surplusPool);\\n\\n        crowdPool -= _crowdPoolLoss;\\n        surplusPool -= (_attributionLoss - _crowdPoolLoss);\\n    }\\n\\n    /**\\n     * Utilities\\n     */\\n\\n    /**\\n     * @notice total Liquidity of the pool (how much can the pool sell cover)\\n     * @return available liquidity of this pool\\n     */\\n    function totalLiquidity() external view returns (uint256) {\\n        return vault.underlyingValue(address(this));\\n    }\\n\\n    /**\\n     * @notice Get the exchange rate of LP token against underlying asset(scaled by MAGIC_SCALE_1E6, if MAGIC_SCALE_1E6, the value of iToken vs underlier is 1:1)\\n     * @return The value against the underlying token balance.\\n     */\\n    function rate() external view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply != 0) {\\n            return\\n                (vault.attributionValue(crowdPool) * MAGIC_SCALE_1E6) / _totalSupply;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @param _owner the target address to look up value\\n     * @return The balance of underlying token for the specified address\\n     */\\n    function valueOfUnderlying(address _owner) external view returns (uint256) {\\n        uint256 _balance = balanceOf(_owner);\\n        uint256 _totalSupply = totalSupply();\\n        \\n        if (_balance != 0 || _totalSupply != 0) {\\n            return _balance * vault.attributionValue(crowdPool) / _totalSupply;\\n        }\\n    }\\n\\n    /**\\n     * Admin functions\\n     */\\n\\n    /**\\n     * @notice Change metadata string\\n     * @param _metadata new metadata string\\n     */\\n    function changeMetadata(string calldata _metadata)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        metadata = _metadata;\\n        emit MetadataChanged(_metadata);\\n    }\\n\\n    /**\\n     * @notice Used for changing settlementFeeRecipient\\n     * @param _state true to set paused and vice versa\\n     */\\n    function setPaused(bool _state) external override onlyOwner {\\n        if (paused != _state) {\\n            paused = _state;\\n            emit Paused(_state);\\n        }\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Internal function to offset withdraw request and latest balance\\n     * @param from the account who send\\n     * @param to a\\n     * @param amount the amount of token to offset\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from != address(0)) {\\n            uint256 _after = balanceOf(from) - amount;\\n            if (_after < withdrawalReq[from].amount) {\\n                withdrawalReq[from].amount = _after;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniversalMarket.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IUniversalMarket {\\n    function initialize(\\n        address _depositor,\\n        string calldata _metaData,\\n        uint256[] calldata _conditions,\\n        address[] calldata _references\\n    ) external;\\n\\n    //onlyOwner\\n    function setPaused(bool state) external;\\n    function changeMetadata(string calldata _metadata) external;\\n}\\n\"\r\n    },\r\n    \"contracts/InsureDAOERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract InsureDAOERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    bool tokenInitialized;\\n    string private _name = \\\"InsureDAO LP Token\\\";\\n    string private _symbol = \\\"iLP\\\";\\n    uint8 private _decimals = 18;\\n\\n    function initializeToken(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal {\\n        /***\\n         *@notice initialize token. Only called internally.\\n         *\\n         */\\n        require(!tokenInitialized, \\\"Token is already initialized\\\");\\n        tokenInitialized = true;\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        if (amount != 0) {\\n            uint256 currentAllowance = _allowances[sender][msg.sender];\\n            if (currentAllowance != type(uint256).max) {\\n                require(\\n                    currentAllowance >= amount,\\n                    \\\"Transfer amount > allowance\\\"\\n                );\\n                unchecked {\\n                    _approve(sender, msg.sender, currentAllowance - amount);\\n                }\\n            }\\n            \\n            _transfer(sender, recipient, amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        if (addedValue != 0) {\\n            _approve(\\n                msg.sender,\\n                spender,\\n                _allowances[msg.sender][spender] + addedValue\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        if (subtractedValue != 0) {\\n            uint256 currentAllowance = _allowances[msg.sender][spender];\\n            require(\\n                currentAllowance >= subtractedValue,\\n                \\\"Decreased allowance below zero\\\"\\n            );\\n\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        if (amount != 0) {\\n            require(sender != address(0), \\\"Transfer from the zero address\\\");\\n            require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n\\n            _beforeTokenTransfer(sender, recipient, amount);\\n\\n            uint256 senderBalance = _balances[sender];\\n            require(\\n                senderBalance >= amount,\\n                \\\"Transfer amount exceeds balance\\\"\\n            );\\n\\n            unchecked {\\n                _balances[sender] = senderBalance - amount;\\n            }\\n\\n            _balances[recipient] += amount;\\n\\n            emit Transfer(sender, recipient, amount);\\n\\n            _afterTokenTransfer(sender, recipient, amount);\\n        }\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            require(account != address(0), \\\"Mint to the zero address\\\");\\n\\n            _beforeTokenTransfer(address(0), account, amount);\\n\\n            _totalSupply += amount;\\n            _balances[account] += amount;\\n            emit Transfer(address(0), account, amount);\\n\\n            _afterTokenTransfer(address(0), account, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            require(account != address(0), \\\"Burn from the zero address\\\");\\n\\n            _beforeTokenTransfer(account, address(0), amount);\\n\\n            uint256 accountBalance = _balances[account];\\n            require(accountBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[account] = accountBalance - amount;\\n            }\\n\\n            _totalSupply -= amount;\\n\\n            emit Transfer(account, address(0), amount);\\n\\n            _afterTokenTransfer(account, address(0), amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IVault {\\n    function addValueBatch(\\n        uint256 _amount,\\n        address _from,\\n        address[2] memory _beneficiaries,\\n        uint256[2] memory _shares\\n    ) external returns (uint256[2] memory _allocations);\\n\\n    function addValue(\\n        uint256 _amount,\\n        address _from,\\n        address _attribution\\n    ) external returns (uint256 _attributions);\\n\\n    function withdrawValue(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function transferValue(uint256 _amount, address _destination)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function withdrawAttribution(uint256 _attribution, address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function withdrawAllAttribution(address _to)\\n        external\\n        returns (uint256 _retVal);\\n\\n    function transferAttribution(uint256 _amount, address _destination)\\n        external;\\n\\n    function attributionOf(address _target) external view returns (uint256);\\n\\n    function underlyingValue(address _target) external view returns (uint256);\\n\\n    function attributionValue(uint256 _attribution)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function utilize() external returns (uint256 _amount);\\n    function valueAll() external view returns (uint256);\\n\\n\\n    function token() external returns (address);\\n\\n    function borrowValue(uint256 _amount, address _to) external;\\n\\n    /*\\n    function borrowAndTransfer(uint256 _amount, address _to)\\n        external\\n        returns (uint256 _attributions);\\n    */\\n\\n    function offsetDebt(uint256 _amount, address _target)\\n        external\\n        returns (uint256 _attributions);\\n\\n    function repayDebt(uint256 _amount, address _target) external;\\n\\n    function debts(address _debtor) external view returns (uint256);\\n\\n    function transferDebt(uint256 _amount) external;\\n\\n    //onlyOwner\\n    function withdrawRedundant(address _token, address _to) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setKeeper(address _keeper) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface IRegistry {\\n    function isListed(address _market) external view returns (bool);\\n\\n    function getCDS(address _address) external view returns (address);\\n\\n    function confirmExistence(address _template, address _target)\\n        external\\n        view\\n        returns (bool);\\n\\n    //onlyOwner\\n    function setFactory(address _factory) external;\\n\\n    function supportMarket(address _market) external;\\n\\n    function setExistence(address _template, address _target) external;\\n\\n    function setCDS(address _address, address _cds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IParameters.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\nabstract contract IParameters {\\n    function setVault(address _token, address _vault) external virtual;\\n\\n    function setLockup(address _address, uint256 _target) external virtual;\\n\\n    function setGrace(address _address, uint256 _target) external virtual;\\n\\n    function setMinDate(address _address, uint256 _target) external virtual;\\n\\n    function setUpperSlack(address _address, uint256 _target) external virtual;\\n\\n    function setLowerSlack(address _address, uint256 _target) external virtual;\\n\\n    function setWithdrawable(address _address, uint256 _target)\\n        external\\n        virtual;\\n\\n    function setPremiumModel(address _address, address _target)\\n        external\\n        virtual;\\n\\n    function setFeeRate(address _address, uint256 _target) external virtual;\\n\\n    function setMaxList(address _address, uint256 _target) external virtual;\\n\\n    function setCondition(bytes32 _reference, bytes32 _target) external virtual;\\n\\n    function getOwner() external view virtual returns (address);\\n\\n    function getVault(address _token) external view virtual returns (address);\\n\\n    function getPremium(\\n        uint256 _amount,\\n        uint256 _term,\\n        uint256 _totalLiquidity,\\n        uint256 _lockedAmount,\\n        address _target\\n    ) external view virtual returns (uint256);\\n\\n    function getFeeRate(address _target) external view virtual returns (uint256);\\n\\n    function getUpperSlack(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getLowerSlack(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getLockup(address _target) external view virtual returns (uint256);\\n\\n    function getWithdrawable(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getGrace(address _target) external view virtual returns (uint256);\\n\\n    function getMinDate(address _target) external view virtual returns (uint256);\\n\\n    function getMaxList(address _target)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getCondition(bytes32 _reference)\\n        external\\n        view\\n        virtual\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICDSTemplate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\ninterface ICDSTemplate {\\n    function compensate(uint256) external returns (uint256 _compensated);\\n\\n    //onlyOwner\\n    function defund(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attribution\",\"type\":\"uint256\"}],\"name\":\"Defund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attribution\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retVal\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"changeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"compensate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_compensated\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"defund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaData\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_conditions\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_references\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"contract IParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"valueOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_retVal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CDSTemplate", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}