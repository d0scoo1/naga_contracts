{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Treasury.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\nimport \\\"./IPair.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\n\\ncontract Treasury is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\n    address public lsc;\\n\\n    modifier onlyLsc() {\\n        require(_msgSender() == lsc);\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrLsc() {\\n        require(_msgSender() == owner() || _msgSender() == lsc);\\n        _;\\n    }\\n\\n    struct Pool {\\n        string name;\\n        address router;\\n        address pair;\\n        uint percentage;\\n        uint amountOfLPTokens;\\n        uint amountLiquidity;\\n    }\\n\\n    struct FindPoolArgs {\\n        uint amountLiquidity;\\n        uint expectedToken;\\n        uint expectedBlxm;\\n        uint liquidityInPools;\\n        uint[] currentAmounts0;\\n        uint[] currentAmounts1;\\n    }\\n\\n    uint public constant MINIMUM_LIQUIDITY = 1000;\\n    uint private constant PERCENT_PRECISION = 10000000000000000;\\n\\n    mapping(uint => Pool) public pools;\\n    uint public numberOfPools;\\n\\n    uint public maximumBuffer;\\n    uint public minimumCash;\\n    uint public balancingThresholdPercent;\\n    uint private threshold;\\n\\n    address public token1Address;\\n    address public token0Address;\\n    // token0 bsc 0x139E61EA6e1cb2504cf50fF83B39A03c79850548\\n    // token1 bsc 0x1c326fCB30b38116573284160BE0F9Ee62Dd562F\\n    // suhsi lp 0x48dA8e025841663eC62d9A5deac921A1137840d1\\n    // uni lp 0x47EBF7c41f8EF6F786819A51dB2765f3179ad4b8\\n    // eth and blxm contract balances\\n    uint public reserve1;\\n    uint public reserve0;\\n    // minimum amount of liquidity that has to stay in contract\\n    uint public cash;\\n    // amount of liquidity that is not stored in cash and will be transferred to pools if buffer >= maximumBuffer,\\n    uint public buffer;\\n\\n    mapping(address => uint) public balances;\\n\\n    address[] public tokenReceivers;\\n\\n    uint sentReserve0;\\n    uint sentReserve1;\\n    mapping(uint => uint) sentLPTokens;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function initialize(address _lsc, address _token0, address _token1, uint _minimumCash, uint _maximumBuffer, uint _balancingThresholdPercent) initializer public {\\n        __Ownable_init();\\n        lsc = _lsc;\\n        maximumBuffer = _maximumBuffer;\\n        minimumCash = _minimumCash;\\n        token1Address = _token1;\\n        token0Address = _token0;\\n        balancingThresholdPercent = _balancingThresholdPercent;\\n        threshold = _balancingThresholdPercent * PERCENT_PRECISION;\\n    }\\n\\n    function add_liquidity(uint amountBlxm, uint amountToken, address to) external onlyLsc {\\n        (uint liquidity) = calculate_liquidity_amount(\\n            amountToken,\\n            amountBlxm\\n        );\\n        updateBalance(liquidity, to);\\n        reserve1 += amountToken;\\n        reserve0 += amountBlxm;\\n        cash += liquidity;\\n        if (cash > minimumCash) {\\n            buffer += cash - minimumCash;\\n            cash = minimumCash;\\n        }\\n        if (buffer >= maximumBuffer) {\\n            send_tokens_investment_buffer();\\n        }\\n    }\\n\\n    function send_tokens_investment(uint amount0, uint amount1, uint poolIndex) public onlyOwner {\\n        require(reserve0 >= amount0 || reserve1 >= amount1, \\\"Not enough tokens\\\");\\n        (uint depositedToken, uint depositedBlxm) = send_tokens_to_pool(pools[poolIndex], amount1, amount0);\\n        (uint depositedLiquidity) = calculate_liquidity_amount(\\n            depositedToken,\\n            depositedBlxm\\n        );\\n        reserve0 -= amount0;\\n        reserve1 -= amount1;\\n        uint reservesLiquidity = calculate_liquidity_amount(reserve0, reserve1);\\n        if (reservesLiquidity > minimumCash) {\\n            cash = minimumCash;\\n            buffer = reservesLiquidity - minimumCash;\\n        } else {\\n            cash = reservesLiquidity;\\n            buffer = 0;\\n        }\\n        pools[poolIndex].amountLiquidity += depositedLiquidity;\\n    }\\n\\n    function retrieve_tokens(uint amountLpTokens, uint poolIndex) public onlyOwner {\\n        Pool storage pool = pools[poolIndex];\\n        require(pool.amountOfLPTokens >= amountLpTokens, \\\"Not enough liquidity in pool\\\");\\n        (uint amountBlxm, uint amountToken) = retrieve_tokens_from_pool(amountLpTokens, pool.pair, pool.router);\\n        pool.amountOfLPTokens -= amountLpTokens;\\n        reserve1 += amountToken;\\n        reserve0 += amountBlxm;\\n        uint reservesLiquidity = calculate_liquidity_amount(reserve0, reserve1);\\n        if (reservesLiquidity > minimumCash) {\\n            cash = minimumCash;\\n            buffer = reservesLiquidity - minimumCash;\\n        } else {\\n            cash = reservesLiquidity;\\n            buffer = 0;\\n        }\\n        (,,,,uint[] memory currentAmounts0, uint[] memory currentAmounts1) = get_total_amounts();\\n        pool.amountLiquidity = calculate_liquidity_amount(currentAmounts0[poolIndex], currentAmounts1[poolIndex]);\\n    }\\n\\n    function update_pools_liquidity(uint[] memory currentAmounts0, uint[] memory currentAmounts1) private {\\n        for (uint i = 0; i < numberOfPools; i++) {\\n            pools[i].amountLiquidity = calculate_liquidity_amount(currentAmounts0[i], currentAmounts1[i]);\\n        }\\n    }\\n\\n    function get_tokens(uint reward, uint requestedAmount0, uint requestedAmount1, address payable to) external onlyLsc returns (uint sentToken, uint sentBlxm) {\\n        require(IERC20(token0Address).balanceOf(address(this)) - (reserve0) >= reward, \\\"Not enough reward\\\");\\n        if (requestedAmount0 > reserve0 || requestedAmount1 > reserve1) {\\n            (uint amount0, uint amount1,,,uint[] memory currentAmounts0, uint[] memory currentAmounts1) = get_total_amounts();\\n            update_pools_liquidity(currentAmounts0, currentAmounts1);\\n            require(requestedAmount0 <= amount0 && requestedAmount1 <= amount1, \\\"No enough tokens to retreive\\\");\\n            uint liquidityInPools = calculate_liquidity_amount(amount0 - reserve0, amount1 - reserve1);\\n            uint expectedTokenToRetrieve = Math.min(minimumCash * (amount1 - reserve1) / liquidityInPools + requestedAmount1 - reserve1, amount1 - reserve1);\\n            uint expectedBlxmToRetrieve = Math.min(minimumCash * (amount0 - reserve0) / liquidityInPools + requestedAmount0 - reserve0, amount0 - reserve0);\\n            uint liquidityToRetrieve = calculate_liquidity_amount(expectedTokenToRetrieve, expectedBlxmToRetrieve);\\n            // fill over from pools\\n            FindPoolArgs memory args;\\n            args.amountLiquidity = liquidityToRetrieve;\\n            args.expectedToken = expectedTokenToRetrieve;\\n            args.expectedBlxm = expectedBlxmToRetrieve;\\n            args.liquidityInPools = liquidityInPools;\\n            args.currentAmounts0 = currentAmounts0;\\n            args.currentAmounts1 = currentAmounts1;\\n            (uint[] memory poolsIndexes, uint[] memory amountsToRemove) = find_pool_to_fill_reserves(args);\\n            for (uint i = 0; i < poolsIndexes.length; i++) {\\n                Pool storage pool = pools[poolsIndexes[i]];\\n                uint tokensToRetreive = pool.amountOfLPTokens * amountsToRemove[i] / pool.amountLiquidity;\\n                if (tokensToRetreive > pool.amountOfLPTokens) {\\n                    tokensToRetreive = pool.amountOfLPTokens;\\n                }\\n                (uint amountBlxm, uint amountToken) = retrieve_tokens_from_pool(tokensToRetreive, pool.pair, pool.router);\\n                pool.amountOfLPTokens -= tokensToRetreive;\\n                pool.amountLiquidity -= amountsToRemove[i];\\n                reserve1 += amountToken;\\n                reserve0 += amountBlxm;\\n            }\\n        }\\n        if (reserve1 > requestedAmount1) {\\n            reserve1 -= requestedAmount1;\\n            sentToken = requestedAmount1;\\n            IERC20(token1Address).transfer(to, requestedAmount1);\\n        } else {\\n            IERC20(token1Address).transfer(to, reserve1);\\n            sentToken = reserve1;\\n            reserve1 = 0;\\n        }\\n        if (reserve0 > requestedAmount0) {\\n            reserve0 -= requestedAmount0;\\n            sentBlxm = requestedAmount0 + reward;\\n            IERC20(token0Address).transfer(to, requestedAmount0 + reward);\\n        } else {\\n            IERC20(token0Address).transfer(to, reserve0 + reward);\\n            sentBlxm = reserve0 + reward;\\n            reserve0 = 0;\\n        }\\n\\n        uint reservesLiquidity = calculate_liquidity_amount(reserve0, reserve1);\\n        if (reservesLiquidity > minimumCash) {\\n            cash = minimumCash;\\n            buffer = reservesLiquidity - minimumCash;\\n        } else {\\n            cash = reservesLiquidity;\\n            buffer = 0;\\n        }\\n    }\\n\\n    function get_total_amounts() public view onlyOwnerOrLsc returns (\\n        uint amount0,\\n        uint amount1,\\n        uint[] memory,\\n        uint[] memory,\\n        uint[] memory,\\n        uint[] memory\\n    ) {\\n        uint[] memory totalAmounts0 = new uint[](numberOfPools);\\n        uint[] memory totalAmounts1 = new uint[](numberOfPools);\\n        uint[] memory currentAmounts0 = new uint[](numberOfPools);\\n        uint[] memory currentAmounts1 = new uint[](numberOfPools);\\n        amount0 = reserve0;\\n        amount1 = reserve1;\\n        for (uint i = 0; i < numberOfPools; i++) {\\n            Pool storage pool = pools[i];\\n            uint totalSupply = IPair(pool.pair).totalSupply();\\n            uint112 reserve0Pool;\\n            uint112 reserve1Pool;\\n            if (token0Address < token1Address) {\\n                (reserve0Pool, reserve1Pool,) = IPair(pool.pair).getReserves();\\n            } else {\\n                (reserve1Pool, reserve0Pool,) = IPair(pool.pair).getReserves();\\n            }\\n            totalAmounts0[i] = reserve0Pool;\\n            totalAmounts1[i] = reserve1Pool;\\n            currentAmounts0[i] = reserve0Pool * pool.amountOfLPTokens / totalSupply;\\n            currentAmounts1[i] = reserve1Pool * pool.amountOfLPTokens / totalSupply;\\n            amount0 += reserve0Pool * pool.amountOfLPTokens / totalSupply;\\n            amount1 += reserve1Pool * pool.amountOfLPTokens / totalSupply;\\n        }\\n        return (amount0, amount1, totalAmounts0, totalAmounts1, currentAmounts0, currentAmounts1);\\n    }\\n\\n    function get_nominal_amounts() public view returns (\\n        uint amount0,\\n        uint amount1\\n    ) {\\n        amount0 = reserve0 + sentReserve0;\\n        amount1 = reserve1 + sentReserve1;\\n        for (uint i = 0; i < numberOfPools; i++) {\\n            Pool storage pool = pools[i];\\n            uint totalSupply = IPair(pool.pair).totalSupply();\\n            uint112 reserve0Pool;\\n            uint112 reserve1Pool;\\n            if (token0Address < token1Address) {\\n                (reserve0Pool, reserve1Pool,) = IPair(pool.pair).getReserves();\\n            } else {\\n                (reserve1Pool, reserve0Pool,) = IPair(pool.pair).getReserves();\\n            }\\n            amount0 += reserve0Pool * (pool.amountOfLPTokens + sentLPTokens[i]) / totalSupply;\\n            amount1 += reserve1Pool * (pool.amountOfLPTokens + sentLPTokens[i]) / totalSupply;\\n        }\\n        return (amount0, amount1);\\n    }\\n\\n    function set_maximum_buffer(uint _buffer) public onlyOwner {\\n        maximumBuffer = _buffer;\\n    }\\n\\n    function set_minimum_cash(uint _cash) public onlyOwner {\\n        minimumCash = _cash;\\n    }\\n\\n    function set_balancing_threshold_percent(uint new_percent) public onlyOwner {\\n        balancingThresholdPercent = new_percent;\\n        threshold = new_percent * PERCENT_PRECISION;\\n    }\\n\\n    function add_new_investment_product(string memory name, address router, address pair, uint[] memory newPercentages) public onlyOwner {\\n        require(newPercentages.length == numberOfPools + 1, \\\"New percentages should be provided for all products\\\");\\n        uint totalPercent;\\n        for (uint i; i < newPercentages.length; i++) {\\n            totalPercent += newPercentages[i];\\n            pools[i].percentage = newPercentages[i];\\n        }\\n        require(totalPercent == 100, \\\"Total percent of all products must be 100\\\");\\n        pools[numberOfPools] = Pool(name, router, pair, newPercentages[numberOfPools], 0, 0);\\n        numberOfPools += 1;\\n    }\\n\\n    function remove_investment_product(uint index, uint[] memory newPercentages) public onlyOwner {\\n        require(newPercentages.length == numberOfPools - 1, \\\"New percentages should be provided for all products\\\");\\n        require(index < numberOfPools, \\\"Index is out of pools range\\\");\\n        require(pools[index].amountOfLPTokens == 0, \\\"Pool is not empty\\\");\\n        uint totalPercent;\\n        for (uint i = index; i < numberOfPools - 1; i++) {\\n            pools[i] = pools[i + 1];\\n        }\\n        delete pools[numberOfPools - 1];\\n        numberOfPools--;\\n        for (uint i; i < newPercentages.length; i++) {\\n            totalPercent += newPercentages[i];\\n            pools[i].percentage = newPercentages[i];\\n        }\\n        require(totalPercent == 100, \\\"Total percent of all products must be 100\\\");\\n    }\\n\\n    function change_pools_percentages(uint[] memory newPercentages) public onlyOwner {\\n        require(newPercentages.length == numberOfPools, \\\"New percentages should be provided for all products\\\");\\n        uint totalPercent;\\n        for (uint i; i < newPercentages.length; i++) {\\n            totalPercent += newPercentages[i];\\n            pools[i].percentage = newPercentages[i];\\n        }\\n        require(totalPercent == 100, \\\"Total percent of all products must be 100\\\");\\n    }\\n\\n    function send_lp_tokens(uint receiverIndex, uint poolIndex, uint amount) public onlyOwner {\\n        require(receiverIndex < tokenReceivers.length && poolIndex < numberOfPools, \\\"Index is out range\\\");\\n        Pool storage pool = pools[poolIndex];\\n        require(amount <= pools[poolIndex].amountOfLPTokens, \\\"Not enough tokens\\\");\\n        IERC20(pool.pair).transfer(tokenReceivers[receiverIndex], amount);\\n        pool.amountOfLPTokens -= amount;\\n        sentLPTokens[poolIndex] += amount;\\n    }\\n\\n    function send_reserve_tokens(uint receiverIndex, uint amount0, uint amount1) public onlyOwner {\\n        require(receiverIndex < tokenReceivers.length, \\\"Index is out range\\\");\\n        require(amount0 <= reserve0 && amount1 <= reserve1, \\\"Not enough tokens\\\");\\n        IERC20(token0Address).transfer(tokenReceivers[receiverIndex], amount0);\\n        IERC20(token1Address).transfer(tokenReceivers[receiverIndex], amount1);\\n        reserve0 -= amount0;\\n        reserve1 -= amount1;\\n        sentReserve0 += amount0;\\n        sentReserve1 += amount1;\\n        uint liquidity = calculate_liquidity_amount(reserve0, reserve1);\\n        cash = Math.min(liquidity, minimumCash);\\n        buffer = liquidity - cash;\\n    }\\n\\n    function add_token_receiver(address receiver) public onlyOwner {\\n        tokenReceivers.push(receiver);\\n    }\\n\\n    function remove_token_receiver(uint index) public onlyOwner {\\n        require(index < tokenReceivers.length, \\\"Index is out of array range\\\");\\n        for (uint i = index; i < tokenReceivers.length - 1; i++) {\\n            tokenReceivers[i] = tokenReceivers[i + 1];\\n        }\\n        tokenReceivers.pop();\\n    }\\n\\n    function set_lp_amount(uint index, uint amountOfLP) public onlyOwner {\\n        require(index < numberOfPools, \\\"Index is out of array range\\\");\\n        require(amountOfLP > pools[index].amountOfLPTokens, \\\"Set amount is lower than current\\\");\\n        sentLPTokens[index] -= Math.min(amountOfLP - pools[index].amountOfLPTokens, sentLPTokens[index]);\\n        pools[index].amountOfLPTokens = amountOfLP;\\n    }\\n\\n    function set_reserves_amount(uint amount0, uint amount1) public onlyOwner {\\n        require(amount0 >= reserve0 && amount1 >= reserve1, \\\"Set amount is lower than current\\\");\\n        sentReserve0 -= Math.min(amount0 - reserve0, sentReserve0);\\n        sentReserve1 -= Math.min(amount1 - reserve1, sentReserve1);\\n        reserve0 = amount0;\\n        reserve1 = amount1;\\n        uint liquidity = calculate_liquidity_amount(amount0, amount1);\\n        cash = Math.min(liquidity, minimumCash);\\n        buffer = liquidity - cash;\\n    }\\n\\n    function find_pool_to_add(uint amountLiquidity, uint amountAll0, uint amountAll1) private view returns (uint[] memory, uint[] memory){\\n        uint liquidityInPools = calculate_liquidity_amount(amountAll0 - reserve0, amountAll1 - reserve1);\\n        Pool memory poolToAdd = pools[0];\\n        uint poolIndex;\\n        uint poolMismatch;\\n        // find most imbalanced pool\\n        for (uint i = 0; i < numberOfPools; i++) {\\n            uint currentPoolPercentage = pools[i].amountLiquidity * PERCENT_PRECISION * 100 / Math.max(liquidityInPools, 1);\\n            if (pools[i].percentage * PERCENT_PRECISION > currentPoolPercentage &&\\n                (pools[i].percentage * PERCENT_PRECISION - currentPoolPercentage > poolMismatch ||\\n                (pools[i].percentage * PERCENT_PRECISION - currentPoolPercentage == poolMismatch && pools[i].percentage > poolToAdd.percentage))\\n            ) {\\n                poolToAdd = pools[i];\\n                poolMismatch = pools[i].percentage * PERCENT_PRECISION - currentPoolPercentage;\\n                poolIndex = i;\\n            }\\n        }\\n        uint finalLiquidity = liquidityInPools + amountLiquidity;\\n        uint[] memory poolIndexes;\\n        uint[] memory amountsToAdd;\\n        // check if adding liquidity to one pool leads to disbalance\\n        if ((poolToAdd.amountLiquidity + amountLiquidity) * PERCENT_PRECISION * 100 / finalLiquidity > poolToAdd.percentage * PERCENT_PRECISION &&\\n            (poolToAdd.amountLiquidity + amountLiquidity) * PERCENT_PRECISION * 100 / finalLiquidity - poolToAdd.percentage * PERCENT_PRECISION > threshold) {\\n            // balance pools\\n            poolIndexes = new uint[](numberOfPools);\\n            amountsToAdd = new uint[](numberOfPools);\\n            for (uint i = 0; i < numberOfPools; i++) {\\n                poolIndexes[i] = i;\\n                amountsToAdd[i] = finalLiquidity * pools[i].percentage / 100 - pools[i].amountLiquidity;\\n            }\\n        } else {\\n            poolIndexes = new uint[](1);\\n            amountsToAdd = new uint[](1);\\n            poolIndexes[0] = poolIndex;\\n            amountsToAdd[0] = amountLiquidity;\\n        }\\n        return (poolIndexes, amountsToAdd);\\n    }\\n\\n    function send_tokens_investment_buffer() private {\\n        (uint amount0,\\n        uint amount1,\\n        uint[] memory totalAmounts0,\\n        uint[] memory totalAmounts1,\\n        uint[] memory currentAmounts0,\\n        uint[] memory currentAmounts1\\n        ) = get_total_amounts();\\n        update_pools_liquidity(currentAmounts0, currentAmounts1);\\n        uint depositedTokenAll;\\n        uint depositedBlxmAll;\\n        uint depositedLiquidityAll;\\n        (uint[] memory poolIndexes, uint[] memory amountsToAdd) = find_pool_to_add(buffer, amount0, amount1);\\n        for (uint i = 0; i < poolIndexes.length; i++) {\\n            uint amountToken = reserve1 * amountsToAdd[i] / (buffer + cash);\\n            uint amountBlxm = amountToken * totalAmounts0[i] / totalAmounts1[i];\\n            if (amountBlxm > reserve0) {\\n                amountBlxm = reserve0 * amountsToAdd[i] / (buffer + cash);\\n                amountToken = amountBlxm * totalAmounts1[i] / totalAmounts0[i];\\n            }\\n            uint poolIndex = poolIndexes[i];\\n            (uint depositedToken, uint depositedBlxm) = send_tokens_to_pool(pools[poolIndex], amountToken, amountBlxm);\\n            (uint depositedLiquidity) = calculate_liquidity_amount(\\n                depositedToken,\\n                depositedBlxm\\n            );\\n            pools[poolIndex].amountLiquidity += depositedLiquidity;\\n            depositedTokenAll += depositedToken;\\n            depositedBlxmAll += depositedBlxm;\\n            depositedLiquidityAll += depositedLiquidity;\\n        }\\n        reserve1 -= depositedTokenAll;\\n        reserve0 -= depositedBlxmAll;\\n        cash = calculate_liquidity_amount(reserve0, reserve1);\\n        if (cash > minimumCash) {\\n            buffer = cash - minimumCash;\\n            cash = minimumCash;\\n        } else {\\n            buffer = 0;\\n        }\\n    }\\n\\n    function send_tokens_to_pool(Pool storage pool, uint amountToken, uint amountBlxm) private returns (uint depositedToken, uint depositedBlxm) {\\n        IERC20(token1Address).approve(pool.router, amountToken);\\n        IERC20(token0Address).approve(pool.router, Math.min(amountBlxm + (amountBlxm * 5 / 100), reserve0));\\n        (uint addedAmountToken, uint addedAmountBlxm, uint lpTokens) = ISwap(pool.router).addLiquidity(\\n            token1Address,\\n            token0Address,\\n            amountToken,\\n            Math.min(amountBlxm + (amountBlxm * 5 / 100), reserve0),\\n            amountToken - (amountToken * 5 / 100),\\n            amountBlxm - (amountBlxm * 5 / 100),\\n            address(this),\\n            block.timestamp + 300\\n        );\\n        pool.amountOfLPTokens += lpTokens;\\n        return (addedAmountToken, addedAmountBlxm);\\n    }\\n\\n\\n    function calculate_liquidity_amount(uint amount0, uint amount1) private pure returns (uint liquidity) {\\n        liquidity = Math.sqrt(amount0 * amount1);\\n    }\\n\\n    function is_possible_to_balance_on_get(uint finalLiquidity, uint expectedToken, uint expectedBlxm, uint[] memory currentAmounts0, uint[] memory currentAmounts1) private view returns (bool) {\\n        uint sumToken;\\n        uint sumBlxm;\\n        for (uint i = 0; i < numberOfPools; i++) {\\n            if (finalLiquidity * pools[i].percentage / 100 > pools[i].amountLiquidity) {\\n                return false;\\n            }\\n            uint amountToRemove = pools[i].amountLiquidity - finalLiquidity * pools[i].percentage / 100;\\n            uint poolToRemoveLiquidity = Math.max(amountToRemove * currentAmounts1[i] * expectedBlxm / (currentAmounts0[i] * expectedToken), amountToRemove * currentAmounts0[i] * expectedToken / (currentAmounts1[i] * expectedBlxm));\\n            poolToRemoveLiquidity = Math.min(poolToRemoveLiquidity, pools[i].amountLiquidity);\\n            sumToken += poolToRemoveLiquidity * currentAmounts1[i] / pools[i].amountLiquidity;\\n            sumBlxm += poolToRemoveLiquidity * currentAmounts0[i] / pools[i].amountLiquidity;\\n        }\\n        if (sumToken < expectedToken || sumBlxm < expectedBlxm) return false;\\n        return true;\\n    }\\n\\n    function find_pool_to_fill_reserves(FindPoolArgs memory args) private view returns (uint[] memory, uint[] memory) {\\n        uint[] memory poolsIndexes;\\n        uint[] memory amountsToRemove;\\n        if (args.liquidityInPools - args.amountLiquidity == 0) {\\n            poolsIndexes = new uint[](numberOfPools);\\n            amountsToRemove = new uint[](numberOfPools);\\n            for (uint i = 0; i < numberOfPools; i++) {\\n                poolsIndexes[i] = i;\\n                amountsToRemove[i] = pools[i].amountLiquidity;\\n            }\\n        } else {\\n            Pool memory poolToRemove = pools[0];\\n            uint poolMismatch;\\n            uint poolIndex;\\n            for (uint i = 0; i < numberOfPools; i++) {\\n                uint poolPercentage = pools[i].amountLiquidity * PERCENT_PRECISION * 100 / args.liquidityInPools;\\n                if (poolPercentage > pools[i].percentage * PERCENT_PRECISION &&\\n                    (poolPercentage - pools[i].percentage * PERCENT_PRECISION > poolMismatch ||\\n                    (poolPercentage - pools[i].percentage * PERCENT_PRECISION == poolMismatch && pools[i].percentage > poolToRemove.percentage))\\n                ) {\\n                    poolToRemove = pools[i];\\n                    poolMismatch = poolPercentage - pools[i].percentage * PERCENT_PRECISION;\\n                    poolIndex = i;\\n                }\\n            }\\n            uint liq = Math.max(\\n                args.amountLiquidity * args.currentAmounts1[poolIndex] * args.expectedBlxm / args.currentAmounts0[poolIndex] * args.expectedToken,\\n                args.amountLiquidity * args.currentAmounts0[poolIndex] * args.expectedToken / args.currentAmounts1[poolIndex] * args.expectedBlxm\\n            );\\n            // recalculate poolToRemove.amountLiquidity\\n            if (poolToRemove.amountLiquidity < liq ||\\n                (poolToRemove.percentage * PERCENT_PRECISION > (poolToRemove.amountLiquidity - liq) * PERCENT_PRECISION * 100 / (args.liquidityInPools - args.amountLiquidity) &&\\n                poolToRemove.percentage * PERCENT_PRECISION - (poolToRemove.amountLiquidity - liq) * PERCENT_PRECISION * 100 / (args.liquidityInPools - args.amountLiquidity) > threshold)\\n            ) {\\n                poolsIndexes = new uint[](numberOfPools);\\n                amountsToRemove = new uint[](numberOfPools);\\n                bool isPossibleToBalance = is_possible_to_balance_on_get(args.liquidityInPools - args.amountLiquidity, args.expectedToken, args.expectedBlxm, args.currentAmounts0, args.currentAmounts1);\\n                for (uint i = 0; i < numberOfPools; i++) {\\n                    poolsIndexes[i] = i;\\n                    if (isPossibleToBalance) {\\n                        amountsToRemove[i] = pools[i].amountLiquidity - (args.liquidityInPools - args.amountLiquidity) * pools[i].percentage / 100;\\n                        amountsToRemove[i] = Math.max(amountsToRemove[i] * args.currentAmounts1[i] * args.expectedBlxm / (args.currentAmounts0[i] * args.expectedToken), amountsToRemove[i] * args.currentAmounts0[i] * args.expectedToken / (args.currentAmounts1[i] * args.expectedBlxm));\\n                        amountsToRemove[i] = Math.min(amountsToRemove[i], pools[i].amountLiquidity);\\n                    } else {\\n                        amountsToRemove[i] = args.amountLiquidity * pools[i].amountLiquidity / args.liquidityInPools;\\n                    }\\n                }\\n            } else {\\n                poolsIndexes = new uint[](1);\\n                amountsToRemove = new uint[](1);\\n                poolsIndexes[0] = poolIndex;\\n                amountsToRemove[0] = liq;\\n            }\\n        }\\n        return (poolsIndexes, amountsToRemove);\\n    }\\n\\n    function retrieve_tokens_from_pool(uint lp, address pair, address router) private returns (uint amountBlxm, uint amountToken) {\\n        IPair(pair).approve(router, lp);\\n        return ISwap(router).removeLiquidity(token0Address, token1Address, lp, 0, 0, address(this), block.timestamp + 300);\\n    }\\n\\n    function updateBalance(uint newBalance, address sender) private {\\n        balances[sender] = balances[sender] + newBalance;\\n    }\\n\\n    receive() payable external {}\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/ISwap.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\n\\ninterface ISwap {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n}\\n\"\r\n    },\r\n    \"contracts/IPair.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\n\\ninterface IPair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\n\\ninterface IERC20 {\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address tokenOwner) external view returns (uint balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function allowance(address owner, address spender) external returns (uint256);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        z = x > y ? x : y;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBlxm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"add_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"add_new_investment_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"add_token_receiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancingThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"change_pools_percentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_nominal_amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount1\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"get_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sentToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentBlxm\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_total_amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lsc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balancingThresholdPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lsc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfLPTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"remove_investment_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"remove_token_receiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"retrieve_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send_lp_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"send_reserve_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"send_tokens_investment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_percent\",\"type\":\"uint256\"}],\"name\":\"set_balancing_threshold_percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfLP\",\"type\":\"uint256\"}],\"name\":\"set_lp_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"set_maximum_buffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cash\",\"type\":\"uint256\"}],\"name\":\"set_minimum_cash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"set_reserves_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Treasury", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}