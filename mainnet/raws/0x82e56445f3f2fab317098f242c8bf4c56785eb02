{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n    address private immutable _CACHED_THIS;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _CACHED_THIS = address(this);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth is Context {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner, \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner.\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract $SOCIAL is Context, IERC20, Auth, EIP712 {\r\n    string private constant NAME = \"SocialDAO\";\r\n    string private constant SYMBOL = \"$SOCIAL\";\r\n    uint8 private constant DECIMALS = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant MAX_SUPPLY = 1e12 * 1e9; // 1T Supply\r\n    uint256 private constant R_MAX = (MAX - (MAX % MAX_SUPPLY));\r\n    \r\n    // for DAO\r\n    uint256 public constant AMOUNT_DAO_PERC = 20;\r\n    // for staking\r\n    uint256 public constant AMOUNT_STAKING_PERC = 10;\r\n    // for liquidity providers\r\n    uint256 public constant AMOUNT_LP_PERC = 20;\r\n\r\n    uint256 private _tTotal = (MAX_SUPPLY/100) * (AMOUNT_DAO_PERC + AMOUNT_STAKING_PERC + AMOUNT_LP_PERC);\r\n    uint256 private _rTotal = (R_MAX/100) * (AMOUNT_DAO_PERC + AMOUNT_STAKING_PERC + AMOUNT_LP_PERC);\r\n\r\n    bool private inSwap = false;\r\n    bool private _startTxn;\r\n    uint32 private _initialBlocks;\r\n    uint104 private swapLimit = uint104(MAX_SUPPLY / 1000);\r\n    uint104 private _tOwnedBurnAddress;\r\n\r\n    uint256 private constant STAKING_BLOCKS_COUNT = 6450 * 5; //5 days\r\n\r\n    struct Airdrop {\r\n        uint128 blockNo;\r\n        uint128 amount;\r\n    }\r\n\r\n    mapping(address => Airdrop) private _airdrop;\r\n\r\n    mapping(bytes32 => bool) private _claimedHash;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tMaintenance;\r\n        uint256 tReflection;\r\n    }\r\n    \r\n    struct Fee {\r\n        uint64 buyMaintenanceFee;\r\n        uint64 buyReflectionFee;\r\n        \r\n        uint64 sellMaintenanceFee;\r\n        uint64 sellReflectionFee;\r\n    }\r\n\r\n    Fee private _buySellFee = Fee(8,2,8,2);\r\n    \r\n    address payable private _maintenanceAddress;\r\n    address private _csigner;\r\n\r\n    address payable constant private BURN_ADDRESS = payable(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    IUniswapV2Router02 private immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    address private immutable WETH;\r\n\r\n    bytes32 private constant AIRDROP_CALL_HASH_TYPE = keccak256(\"airdrop(address receiver,uint256 amount)\");\r\n    \r\n    constructor(address addrDAO, address addrStaking, address addrLP, address maintainer, address signer) Auth(_msgSender()) EIP712(SYMBOL, \"1\") {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), MAX_SUPPLY);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WETH);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), MAX);\r\n\r\n        _maintenanceAddress = payable(maintainer);\r\n        \r\n        //Initial distribution\r\n        _rOwned[addrDAO] = (R_MAX/100) * AMOUNT_DAO_PERC;\r\n        _rOwned[addrStaking] = (R_MAX/100) * AMOUNT_STAKING_PERC;\r\n        _rOwned[addrLP] = (R_MAX/100) * AMOUNT_LP_PERC;\r\n\r\n        _isExcludedFromFee[addrDAO] = true;\r\n        _isExcludedFromFee[addrStaking] = true;\r\n        _isExcludedFromFee[addrLP] = true;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[maintainer] = true;\r\n\r\n        _csigner = signer;\r\n        emit Transfer(address(0), addrDAO, MAX_SUPPLY * AMOUNT_DAO_PERC / 100);\r\n        emit Transfer(address(0), addrStaking, MAX_SUPPLY * AMOUNT_STAKING_PERC / 100);\r\n        emit Transfer(address(0), addrLP, MAX_SUPPLY * AMOUNT_LP_PERC / 100);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {return NAME;}\r\n    function symbol() override external pure returns (string memory) {return SYMBOL;}\r\n    function decimals() override external pure returns (uint8) {return DECIMALS;}\r\n    function totalSupply() external view override returns (uint256) {return _tTotal;}\r\n    function balanceOf(address account) external view override returns (uint256) {return tokenFromReflection(_rOwned[account]);}\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) external view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n    \r\n    function getFee(bool initialBlocks) internal view returns (Fee memory) {\r\n        return initialBlocks ? Fee(99,0,99,0) : _buySellFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0) && to != address(0), \"ERC20: transfer involving the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_startTxn || _isExcludedFromFee[to] || _isExcludedFromFee[from], \"Transfers not allowed\");\r\n\r\n        Fee memory currentFee;\r\n            \r\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n            currentFee = getFee(block.number <= _initialBlocks);\r\n        } else if (!inSwap && from != uniswapV2Pair && !_isExcludedFromFee[from]) { //sells, transfers (except for buys)\r\n            currentFee = getFee(block.number <= _initialBlocks);\r\n\r\n            if (swapLimit > 0 && tokenFromReflection(_rOwned[address(this)]) > swapLimit) {\r\n                _convertTokensForFee(swapLimit);\r\n            }\r\n            \r\n            uint256 contractETHBalance = address(this).balance;\r\n            if (contractETHBalance > 0) _distributeFee(contractETHBalance);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, currentFee);\r\n    }\r\n\r\n    function _convertTokensForFee(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, _maintenanceAddress, block.timestamp);\r\n    }\r\n\r\n    function _distributeFee(uint256 amount) private {\r\n        _maintenanceAddress.transfer(amount);\r\n    }\r\n\r\n    function startTxn(uint32 initialBlocks) external onlyOwner {\r\n        require(!_startTxn && initialBlocks < 100, \"Already started or block count too long\");\r\n        _startTxn = true;\r\n        _initialBlocks = uint32(block.number) + initialBlocks;\r\n    }\r\n\r\n    function triggerSwap(uint256 perc) external onlyOwner {\r\n        _convertTokensForFee(tokenFromReflection(_rOwned[address(this)]) * perc / 100);\r\n    }\r\n    \r\n    function collectFee() external onlyOwner {\r\n        _distributeFee(address(this).balance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, Fee memory currentFee) private {\r\n        if (sender == uniswapV2Pair){\r\n            _transferStandardBuy(sender, recipient, amount, currentFee);\r\n        }\r\n        else {\r\n            _transferStandardSell(sender, recipient, amount, currentFee);\r\n        }\r\n    }\r\n\r\n    function _transferStandardBuy(address sender, address recipient, uint256 tAmount, Fee memory currentFee) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 rMaintenance) = _getValuesBuy(tAmount, currentFee);\r\n        \r\n        _rOwned[sender] -= rAmount;\r\n        _rOwned[recipient] += rTransferAmount;\r\n        _rOwned[address(this)] += rMaintenance;\r\n        _rTotal -= rReflection;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferStandardSell(address sender, address recipient, uint256 tAmount, Fee memory currentFee) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 rMaintenance) = _getValuesSell(tAmount, currentFee);\r\n\r\n        Airdrop memory airdrop = _airdrop[sender];\r\n        uint256 rOwnedSender = _rOwned[sender];\r\n\r\n        if (airdrop.blockNo > block.number) {\r\n            require(rAmount <= \r\n                rOwnedSender - airdrop.amount * ((airdrop.blockNo - block.number) * (rAmount / tAmount) / STAKING_BLOCKS_COUNT), \"Tokens locked for staking\");\r\n        }\r\n\r\n        _rOwned[sender] = rOwnedSender - rAmount;\r\n        _rOwned[recipient] += rTransferAmount;\r\n        _rOwned[address(this)] += rMaintenance;\r\n\r\n        if (recipient == BURN_ADDRESS) {\r\n            _tOwnedBurnAddress += uint104(tTransferAmount);\r\n        }\r\n\r\n        _rTotal -= rReflection;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _getValuesBuy(uint256 tAmount, Fee memory currentFee) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        FeeBreakdown memory buyFees;\r\n        (buyFees.tTransferAmount, buyFees.tMaintenance, buyFees.tReflection) = _getTValues(tAmount, currentFee.buyMaintenanceFee, currentFee.buyReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 rMaintenance) = _getRValues(tAmount, buyFees.tMaintenance, buyFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, buyFees.tTransferAmount, rMaintenance);\r\n    }\r\n\r\n    function _getValuesSell(uint256 tAmount, Fee memory currentFee) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        FeeBreakdown memory sellFees;\r\n        (sellFees.tTransferAmount, sellFees.tMaintenance, sellFees.tReflection) = _getTValues(tAmount, currentFee.sellMaintenanceFee, currentFee.sellReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 rMaintenance) = _getRValues(tAmount, sellFees.tMaintenance, sellFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, sellFees.tTransferAmount, rMaintenance);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 maintenanceFee, uint256 reflectionFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tMaintenance = tAmount * maintenanceFee / 100;\r\n        uint256 tReflection = tAmount * reflectionFee / 100;\r\n        uint256 tTransferAmount = tAmount - tMaintenance - tReflection;\r\n        return (tTransferAmount, tMaintenance, tReflection);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tMaintenance, uint256 tReflection, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rMaintenance = tMaintenance * currentRate;\r\n        uint256 rReflection = tReflection * currentRate;\r\n        uint256 rTransferAmount = rAmount - rMaintenance - rReflection;\r\n        return (rAmount, rTransferAmount, rReflection, rMaintenance);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n\r\n        uint256 rOwnedBurnAddress = _rOwned[BURN_ADDRESS];\r\n        uint256 tOwnedBurnAddress = _tOwnedBurnAddress;\r\n\r\n        if (rOwnedBurnAddress > rSupply || \r\n            tOwnedBurnAddress > tSupply || \r\n            (rSupply / tSupply) > (rSupply - rOwnedBurnAddress) \r\n        ) return (rSupply, tSupply);\r\n\r\n        return (rSupply - rOwnedBurnAddress, tSupply - tOwnedBurnAddress);\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool toggle) external onlyOwner {\r\n        _isExcludedFromFee[account] = toggle;\r\n    }\r\n        \r\n    function updateSwapLimit(uint104 amount) external onlyOwner {\r\n        swapLimit = amount;\r\n    }\r\n    \r\n    function updateFeeReceiver(address payable maintenanceAddress) external onlyOwner {\r\n        _maintenanceAddress = maintenanceAddress;\r\n        _isExcludedFromFee[maintenanceAddress] = true;\r\n    }\r\n\r\n    function updateSigner(address signer) external onlyOwner {\r\n        _csigner = signer;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function updateTaxes(Fee memory fees) external onlyOwner {\r\n        require((fees.buyMaintenanceFee + fees.buyReflectionFee < 20) && \r\n            (fees.sellMaintenanceFee + fees.sellReflectionFee < 20), \"Fees must be less than 20%\");\r\n        _buySellFee = fees;\r\n    }\r\n    \r\n    function recoverStuckTokens(address addr, uint256 amount) external onlyOwner {\r\n        IERC20(addr).transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function airdropCollectedByAddress(address account) public view returns (Airdrop memory) {\r\n        return _airdrop[account];\r\n    }\r\n\r\n    function airdropCollectedByHash(bytes32 hash) public view returns (bool) {\r\n        return _claimedHash[hash];\r\n    }\r\n\r\n    function claim(bytes32 hash, uint256 amount, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(!_claimedHash[hash] && _airdrop[_msgSender()].blockNo == 0, \"$SOCIAL: Claimed\");\r\n        uint256 claimAmount = amount * (10 ** DECIMALS);\r\n        require(_tTotal + claimAmount <= MAX_SUPPLY, \"$SOCIAL: Exceed max supply\");\r\n \r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", \r\n            _hashTypedDataV4(keccak256(abi.encode(AIRDROP_CALL_HASH_TYPE, hash, _msgSender(), amount)))\r\n        ));\r\n        require(ecrecover(digest, v, r, s) == _csigner, \"$SOCIAL: Invalid signer\");\r\n        \r\n        _airdropTokens(hash, _msgSender(), uint128(claimAmount));\r\n    }\r\n\r\n    function _airdropTokens(bytes32 hash, address account, uint128 amount) internal virtual {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 rMaintenance) = _getValuesBuy(amount, _buySellFee);\r\n\r\n        _airdrop[account].blockNo = uint128(block.number + STAKING_BLOCKS_COUNT);\r\n        _airdrop[account].amount = uint128(tTransferAmount);\r\n        _claimedHash[hash] = true;\r\n\r\n        _tTotal += amount;\r\n        _rOwned[address(this)] += rMaintenance;\r\n        _rTotal = _rTotal + rAmount - rReflection;\r\n        _rOwned[account] += rTransferAmount;\r\n        \r\n        emit Transfer(address(0), account, tTransferAmount);\r\n    }\r\n\r\n    function vestedTokens(address account) public view returns (uint256 tokenBalance, uint256 tTokenVested, uint256 vestingBlocks) {\r\n        Airdrop memory airdrop = _airdrop[account];\r\n        tokenBalance = tokenFromReflection(_rOwned[account]);\r\n        tTokenVested = tokenBalance;\r\n        vestingBlocks = 0;\r\n\r\n        if (airdrop.blockNo > block.number) {\r\n            uint256 rTokenVested = _rOwned[account] - airdrop.amount * (((airdrop.blockNo - block.number) * _getRate()) / STAKING_BLOCKS_COUNT);\r\n            tTokenVested = tokenFromReflection(rTokenVested);\r\n            vestingBlocks = airdrop.blockNo - block.number;\r\n        }\r\n\r\n        return (tokenBalance, tTokenVested, vestingBlocks);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addrStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addrLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMOUNT_DAO_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_LP_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_STAKING_PERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"airdropCollectedByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"blockNo\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct $SOCIAL.Airdrop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"airdropCollectedByHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"initialBlocks\",\"type\":\"uint32\"}],\"name\":\"startTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"triggerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"maintenanceAddress\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"updateSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"buyMaintenanceFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"buyReflectionFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sellMaintenanceFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sellReflectionFee\",\"type\":\"uint64\"}],\"internalType\":\"struct $SOCIAL.Fee\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tTokenVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "$SOCIAL", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000e49e777e77ecc77706312765b8e1816ad83d5f7a00000000000000000000000065a64a9866429c1b7d8160bf917a8891abce43e4000000000000000000000000de2f74f11534f1e6d33b6a2acedcce7e8f78a034000000000000000000000000d72defc70b9308184cfd9c0ff85a7ad91ec1c1d200000000000000000000000037ff351b21fdc73df394642bfe7da501a4cd5fc9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8076a16343f7f27a983b33449f5a22698d71e99a571f1ef2d6b8dc745823b37"}]}