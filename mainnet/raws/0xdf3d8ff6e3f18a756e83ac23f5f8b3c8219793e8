{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Detect whether or not a contract implements a specific method signature\r\n * @dev Works by scanning bytecode for PUSH4 operations\r\n * @author yearn.finance\r\n */\r\n\r\nlibrary Introspection {\r\n  function implementsMethodSignature(address _address, string memory _signature)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    bytes4 _selector = bytes4(keccak256(bytes(_signature)));\r\n    uint256 contractSize;\r\n    assembly {\r\n      contractSize := extcodesize(_address)\r\n    }\r\n    bytes memory code = new bytes(contractSize);\r\n    assembly {\r\n      extcodecopy(_address, add(code, 0x20), 0, contractSize)\r\n    }\r\n    uint256 ptr = 0;\r\n    while (ptr < contractSize) {\r\n      // PUSH4 0x000000 (selector)\r\n      if (code[ptr] == 0x63) {\r\n        bytes memory selectorBytes = new bytes(64);\r\n        selectorBytes[0] = code[ptr + 1];\r\n        selectorBytes[1] = code[ptr + 2];\r\n        selectorBytes[2] = code[ptr + 3];\r\n        selectorBytes[3] = code[ptr + 4];\r\n        bytes4 selector = abi.decode(selectorBytes, (bytes4));\r\n        if (selector == _selector) {\r\n          return true;\r\n        }\r\n      }\r\n      ptr++;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function implementsInterface(address _address, string[] memory _interface)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    for (uint256 methodIdx = 0; methodIdx < _interface.length; methodIdx++) {\r\n      string memory method = _interface[methodIdx];\r\n      bool methodIsImplemented = implementsMethodSignature(_address, method);\r\n      if (!methodIsImplemented) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_interface\",\"type\":\"string[]\"}],\"name\":\"implementsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"}],\"name\":\"implementsMethodSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Introspection", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e47a7820508cf4e4f464c5451fc530fd4cbe8433fcfad7293572fdd26de0b398"}]}