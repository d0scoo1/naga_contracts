{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/WedreamEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\n/**\\n * WEDREAM ESCROW CONTRACT\\n * Learn more about this Project on https://auction.wedream.world/\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./BidValidator.sol\\\";\\nimport \\\"./LibBid.sol\\\";\\n\\n\\ncontract WedreamEscrow is BidValidator, IERC721Receiver, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter public tokenRegistryId;\\n\\n    uint256 public withdrawalLockedUntil;\\n    uint256 public auctionStartsAt;\\n    uint256 public auctionEndsAt;\\n    uint256 public escrowSharePercentage;\\n\\n    mapping(uint256 => TokenRegistryEntry) public tokenRegistry;\\n    mapping(address => uint256[]) public tokenIdsByAddress;\\n    mapping(address => uint256) public tokenCountByAddress;\\n\\n    struct TokenRegistryEntry {\\n        address tokenContract;\\n        uint256 tokenIdentifier;\\n        address tokenOwner;\\n        uint256 minimumPrice;\\n    }\\n\\n    // Events\\n    event TokenWithdrawal(\\n        uint256 tokenRegistryId,\\n        address tokenContract,\\n        uint256 tokenIdentifier,\\n        address withdrawalInitiator,\\n        address withdrawalReceiver\\n    );\\n\\n    event MinmumPriceChange(\\n        uint256 tokenRegistryId,\\n        uint256 oldMiniumPrice,\\n        uint256 newMiniumPrice,\\n        address priceChanger\\n    );\\n\\n    event FulfillBid(\\n        uint256 tokenRegistryId,\\n        address tokenContract,\\n        uint256 tokenIdentifier,\\n        address tokenReceiver,\\n        uint256 minimumPrice,\\n        uint256 paidAmount\\n    );\\n\\n    constructor() public {\\n        ESCROW_WALLET = 0x901E0FDaf9326A7B962793d2518aB4cC6E4FeF04;\\n        escrowSharePercentage = 250;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}. Also registers token in our TokenRegistry.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address, // operator not required\\n        address tokenOwnerAddress,\\n        uint256 tokenIdentifier,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        tokenRegistryId.increment();\\n        tokenRegistry[tokenRegistryId.current()] = TokenRegistryEntry(\\n            msg.sender,\\n            tokenIdentifier,\\n            tokenOwnerAddress,\\n            0\\n        );\\n        tokenIdsByAddress[tokenOwnerAddress].push(tokenRegistryId.current());\\n        tokenCountByAddress[tokenOwnerAddress]++;\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Function withdrawal a specific token from the registry.\\n     * Requirements:\\n     * - Token must be owned by this contract.\\n     * - Token was owned by msg.sender before.\\n     * - It is allowed to withdrawal tokens at this moment.\\n     *\\n     * @param _tokenRegistryId Id in the token registry\\n     * @param _tokenContract ERC721 Contract Address\\n     * @param _tokenIdentifier Identifier of token on the contract\\n     */\\n    function withdrawalToken(\\n        uint256 _tokenRegistryId,\\n        address _tokenContract,\\n        uint256 _tokenIdentifier\\n    ) public virtual {\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenOwner == msg.sender,\\n            \\\"WedreamEscrow: Invalid Sender\\\"\\n        );\\n\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier ==\\n                _tokenIdentifier &&\\n                tokenRegistry[_tokenRegistryId].tokenContract == _tokenContract,\\n            \\\"WedreamEscrow: Invalid Registry Entry\\\"\\n        );\\n\\n        require(\\n            (block.timestamp < auctionStartsAt ||\\n                withdrawalLockedUntil < block.timestamp),\\n            \\\"WedreamEscrow: Withdrawal currently not allowed\\\"\\n        );\\n\\n        transferToken(\\n            tokenRegistry[_tokenRegistryId].tokenContract,\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier,\\n            tokenRegistry[_tokenRegistryId].tokenOwner\\n        );\\n\\n        emit TokenWithdrawal(\\n            _tokenRegistryId,\\n            tokenRegistry[_tokenRegistryId].tokenContract,\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier,\\n            msg.sender,\\n            tokenRegistry[_tokenRegistryId].tokenOwner\\n        );\\n\\n        delete tokenRegistry[_tokenRegistryId];\\n    }\\n\\n    /**\\n     * @dev Function to set the token on sale and add a minimum price. Tokens\\n     * with minimum Price 0 are not allowed to be sold.\\n     *\\n     * Requirements:\\n     * - `msg.sender` needs to be owner of token in our registry\\n     * - Withdrawals are allowed / Auction is not running\\n     *\\n     * @param _tokenRegistryId Id in the token registry\\n     * @param _tokenContract ERC721 Contract Address\\n     * @param _tokenIdentifier Identifier of token on the contract\\n     * @param minimumPrice New minimum price in wei\\n     */\\n    function setMinimumPrice(\\n        uint256 _tokenRegistryId,\\n        address _tokenContract,\\n        uint256 _tokenIdentifier,\\n        uint256 minimumPrice\\n    ) external {\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenOwner == msg.sender,\\n            \\\"WedreamEscrow: Invalid Sender\\\"\\n        );\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier ==\\n                _tokenIdentifier &&\\n                tokenRegistry[_tokenRegistryId].tokenContract == _tokenContract,\\n            \\\"WedreamEscrow: Invalid Registry Entry\\\"\\n        );\\n        require(\\n            (block.timestamp < auctionStartsAt ||\\n                withdrawalLockedUntil < block.timestamp),\\n            \\\"WedreamEscrow: Minimum Price Change is currently not allowed\\\"\\n        );\\n\\n        uint256 oldPrice = tokenRegistry[_tokenRegistryId].minimumPrice;\\n        tokenRegistry[_tokenRegistryId].minimumPrice = minimumPrice;\\n\\n        emit MinmumPriceChange(\\n            _tokenRegistryId,\\n            oldPrice,\\n            minimumPrice,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to set the token on sale and add a minimum price. Tokens\\n     * with minimum Price 0 are not allowed to be sold. This is a Emergency Function.\\n     *\\n     * Requirements:\\n     * - `msg.sender` needs to admin of contract\\n     *\\n     * @param _tokenRegistryId Id in the token registry\\n     * @param _tokenContract ERC721 Contract Address\\n     * @param _tokenIdentifier Identifier of token on the contract\\n     * @param minimumPrice New minimum price in wei\\n     */\\n    function adminSetMinimumPrice(\\n        uint256 _tokenRegistryId,\\n        address _tokenContract,\\n        uint256 _tokenIdentifier,\\n        uint256 minimumPrice\\n    ) external onlyOwner {\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier ==\\n                _tokenIdentifier &&\\n                tokenRegistry[_tokenRegistryId].tokenContract == _tokenContract,\\n            \\\"WedreamEscrow: Invalid Registry Entry\\\"\\n        );\\n\\n        uint256 oldPrice = tokenRegistry[_tokenRegistryId].minimumPrice;\\n        tokenRegistry[_tokenRegistryId].minimumPrice = minimumPrice;\\n\\n        emit MinmumPriceChange(\\n            _tokenRegistryId,\\n            oldPrice,\\n            minimumPrice,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to change the Auction Period and withdrawal Locking\\n     * Requirements:\\n     * - `msg.sender` needs to admin of contract\\n     * - Dates must be in right order _auctionStartsAt < _auctionEndsAt < _withdrawalLockedUntil\\n     *\\n     * @param _auctionStartsAt Timestamp when auction starts (no minimum price changes, no withdrawals)\\n     * @param _auctionEndsAt Timestamp when auction ends (earlierst when the bids can be fulfilled)\\n     * @param _withdrawalLockedUntil Timestamp until when previous token owner withdrawal and minimum price changes are not possible\\n     */\\n    function adminChangePeriods(\\n        uint256 _auctionStartsAt,\\n        uint256 _auctionEndsAt,\\n        uint256 _withdrawalLockedUntil\\n    ) external onlyOwner {\\n        require(\\n            (_auctionStartsAt < _auctionEndsAt && _auctionEndsAt < _withdrawalLockedUntil),\\n            \\\"WedreamEscrow: Invalid dates order\\\"\\n        );\\n        auctionStartsAt = _auctionStartsAt;\\n        auctionEndsAt = _auctionEndsAt;\\n        withdrawalLockedUntil = _withdrawalLockedUntil;\\n    }\\n\\n    /**\\n     * @dev Function to change the escrow share percentage\\n     *\\n     * Requirements:\\n     * - `msg.sender` needs to admin of contract\\n     * - _escrowSharePercentage can't be more than 10000 (=100%)\\n     * @param _escrowSharePercentage basis points of share that is sent to the contract owner, default: 250 (=2.5%)\\n     */\\n    function adminChangeEscrowSharePercentage(\\n        uint256 _escrowSharePercentage\\n    ) external onlyOwner {\\n        require(\\n            (_escrowSharePercentage <= 10000),\\n            \\\"WedreamEscrow: Invalid share percentage (> 10000)\\\"\\n        );\\n        escrowSharePercentage = _escrowSharePercentage;\\n    }\\n\\n    /**\\n     * @dev ESCROW_WALLET is used to verify bids integrity. With this function the owner can change it.\\n     *\\n     * Requirements:\\n     * - `msg.sender` needs to admin of contract\\n     *\\n     * @param _escrow_wallet Public Address of Signer Wallet\\n     */\\n    function adminChangeEscrowWallet(\\n        address _escrow_wallet\\n    ) external onlyOwner {\\n        ESCROW_WALLET = _escrow_wallet;\\n    }\\n\\n    /**\\n     * @dev Withrawal all Funds sent to the contract to Owner.\\n     * Should never happen but just in case...\\n     *\\n     * Requirements:\\n     * - `msg.sender` needs to be Owner and payable\\n     */\\n    function adminWithdrawalEth() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n\\n    /**\\n     * @dev Emergency Admin function to withdrawal a specific token from the registry.\\n     * Requirements:\\n     * - Token must be owned by this contract.\\n     * - msg.sender is owner.\\n     *\\n     * @param _tokenRegistryId Id in the token registry.\\n     * @param _tokenContract ERC721 Contract Address\\n     * @param _tokenIdentifier Identifier of token on the contract\\n     */\\n    function adminWithdrawalToken(\\n        uint256 _tokenRegistryId,\\n        address _tokenContract,\\n        uint256 _tokenIdentifier\\n    ) public virtual onlyOwner {\\n        require(\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier ==\\n                _tokenIdentifier &&\\n                tokenRegistry[_tokenRegistryId].tokenContract == _tokenContract,\\n            \\\"WedreamEscrow: Invalid Registry Entry\\\"\\n        );\\n\\n        transferToken(\\n            tokenRegistry[_tokenRegistryId].tokenContract,\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier,\\n            tokenRegistry[_tokenRegistryId].tokenOwner\\n        );\\n\\n        emit TokenWithdrawal(\\n            _tokenRegistryId,\\n            tokenRegistry[_tokenRegistryId].tokenContract,\\n            tokenRegistry[_tokenRegistryId].tokenIdentifier,\\n            msg.sender,\\n            tokenRegistry[_tokenRegistryId].tokenOwner\\n        );\\n\\n        delete tokenRegistry[_tokenRegistryId];\\n    }\\n\\n    /**\\n     * @dev Function for auction winner to fulfill the bid. Token is exchanged with ETH minus {escrowSharePercentage} fee\\n     * Requirements:\\n     * - minimumPrice needs to be more than 0\\n     * - ETH send must match the bid value\\n     * - transaction needs to be sent by the bidder wallet\\n     * - TokenContract and TokenIdentifier has to match our TokenRegistryEntry\\n     * - Auction must have ended\\n     *\\n     * @param acceptedBidSignature id in the token registry signed by ESCROW_WALLET\\n     * @param bidData Struct of Bid\\n     */\\n    function fulfillBid(\\n        bytes memory acceptedBidSignature,\\n        LibBid.Bid memory bidData\\n    ) public payable {\\n\\n        require(\\n            tokenRegistry[bidData.tokenRegistryId].minimumPrice > 0,\\n            \\\"WedreamEscrow: Token is not on Sale\\\"\\n        );\\n        require(\\n            msg.value >= tokenRegistry[bidData.tokenRegistryId].minimumPrice,\\n            \\\"WedreamEscrow: Reserve Price not met\\\"\\n        );\\n        require(\\n            msg.value == bidData.amount,\\n            \\\"WedreamEscrow: Amount send does not match bid\\\"\\n        );\\n        require(\\n            msg.sender == bidData.winnerWallet,\\n            \\\"WedreamEscrow: Wrong Wallet\\\"\\n        );\\n        require(\\n            tokenRegistry[bidData.tokenRegistryId].tokenContract ==\\n                bidData.tokenContract,\\n            \\\"WedreamEscrow: Mismatch of Token Data (Contract)\\\"\\n        );\\n        require(\\n            tokenRegistry[bidData.tokenRegistryId].tokenIdentifier ==\\n                bidData.tokenIdentifier,\\n            \\\"WedreamEscrow: Mismatch of Token Data (Identifier)\\\"\\n        );\\n\\n        require(\\n            (auctionEndsAt < block.timestamp),\\n            \\\"WedreamEscrow: Auction still running\\\"\\n        );\\n\\n        validateBid(bidData, acceptedBidSignature);\\n\\n        uint256 totalReceived = msg.value;\\n        uint256 escrowPayout = (totalReceived * escrowSharePercentage) / 10000;\\n        uint256 ownerPayout = totalReceived - escrowPayout;\\n        payable(owner()).transfer(escrowPayout);\\n        payable(tokenRegistry[bidData.tokenRegistryId].tokenOwner).transfer(ownerPayout);\\n\\n\\n        transferToken(\\n            tokenRegistry[bidData.tokenRegistryId].tokenContract,\\n            tokenRegistry[bidData.tokenRegistryId].tokenIdentifier,\\n            msg.sender\\n        );\\n\\n        emit FulfillBid(\\n            bidData.tokenRegistryId,\\n            tokenRegistry[bidData.tokenRegistryId].tokenContract,\\n            tokenRegistry[bidData.tokenRegistryId].tokenIdentifier,\\n            msg.sender,\\n            tokenRegistry[bidData.tokenRegistryId].minimumPrice,\\n            msg.value\\n        );\\n\\n        delete tokenRegistry[bidData.tokenRegistryId];\\n    }\\n\\n    /**\\n     * @dev Function to send a Token owned by this contract to an address\\n     * Requirements:\\n     * - Token must be owned by this contract.\\n     *\\n     * @param tokenContractAddress ERC721 Contract Address\\n     * @param tokenIdentifier Identifier on the token contract\\n     * @param tokenReceiver Receiver of the NFT\\n     */\\n    function transferToken(\\n        address tokenContractAddress,\\n        uint256 tokenIdentifier,\\n        address tokenReceiver\\n    ) private {\\n        require(\\n            IERC721(tokenContractAddress).ownerOf(tokenIdentifier) ==\\n                address(this),\\n            \\\"WedreamEscrow: NFT is not owned by Escrow Contract\\\"\\n        );\\n\\n        IERC721(tokenContractAddress).safeTransferFrom(\\n            address(this),\\n            tokenReceiver,\\n            tokenIdentifier\\n        );\\n    }\\n}\"\r\n    },\r\n    \"/contracts/LibBid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Bid Struct definition used to validate EIP712.\\n *\\n */\\nlibrary LibBid {\\n    bytes32 private constant BID_TYPE =\\n        keccak256(\\n            \\\"Bid(address winnerWallet,address tokenContract,uint256 tokenIdentifier,uint256 tokenRegistryId,uint256 amount)\\\"\\n        );\\n\\n    struct Bid {\\n        address winnerWallet;\\n        address tokenContract;\\n        uint256 tokenIdentifier;\\n        uint256 tokenRegistryId;\\n        uint256 amount;\\n    }\\n\\n    function bidHash(Bid memory bid) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    BID_TYPE,\\n                    bid.winnerWallet,\\n                    bid.tokenContract,\\n                    bid.tokenIdentifier,\\n                    bid.tokenRegistryId,\\n                    bid.amount\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/BidValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./LibBid.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev EIP712 based contract module which validates a Bid.\\n * The signer is {ESCROW_WALLET} and checks for integrity of\\n * the bid. {bid} is struct defined in LibBid.\\n *\\n */\\nabstract contract BidValidator is EIP712 {\\n    constructor() EIP712(\\\"WedreamEscrow\\\", \\\"1\\\") {}\\n\\n    // Wallet that signs our bides\\n    address public ESCROW_WALLET;\\n\\n    /**\\n     * @dev Validates if {bid} was signed by {ESCROW_WALLET} and created {signature}.\\n     *\\n     * @param bid Struct with bid properties\\n     * @param signature Signature to decode and compare\\n     */\\n    function validateBid(LibBid.Bid memory bid, bytes memory signature)\\n        internal\\n        view\\n    {\\n        bytes32 bidHash = LibBid.bidHash(bid);\\n        bytes32 digest = _hashTypedDataV4(bidHash);\\n        address signer = ECDSA.recover(digest, signature);\\n\\n        require(\\n            signer == ESCROW_WALLET,\\n            \\\"BidValidator: Bid signature verification error\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRegistryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdentifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"FulfillBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRegistryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMiniumPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMiniumPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceChanger\",\"type\":\"address\"}],\"name\":\"MinmumPriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRegistryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIdentifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawalInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawalReceiver\",\"type\":\"address\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ESCROW_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_escrowSharePercentage\",\"type\":\"uint256\"}],\"name\":\"adminChangeEscrowSharePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow_wallet\",\"type\":\"address\"}],\"name\":\"adminChangeEscrowWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalLockedUntil\",\"type\":\"uint256\"}],\"name\":\"adminChangePeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRegistryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"name\":\"adminSetMinimumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdrawalEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRegistryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdentifier\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowSharePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"acceptedBidSignature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"winnerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRegistryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibBid.Bid\",\"name\":\"bidData\",\"type\":\"tuple\"}],\"name\":\"fulfillBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRegistryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"name\":\"setMinimumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRegistryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdentifier\",\"type\":\"uint256\"}],\"name\":\"withdrawalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WedreamEscrow", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}