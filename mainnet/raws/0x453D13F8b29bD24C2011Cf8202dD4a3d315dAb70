{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity =0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function tokenCustodian(uint tokenId) external view returns (address);\r\n}\r\n\r\ninterface ICollectionToken is IERC721Metadata {\r\n    struct Collection {\r\n        uint collectionId;\r\n        string name;\r\n        uint maxCollectionSize;\r\n        bool isDigitalObject;\r\n        uint[] tokens;\r\n    }\r\n\r\n    function tokenToCollection(uint tokenId) external view returns (uint);\r\n    function collection(uint collectionId) external view returns (Collection memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC20Permit is IERC20 {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IERC2981 {\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\ninterface IAggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) + value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) - value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint private _guardCounter;\r\n\r\n    constructor () {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ncontract HardStakingNFTAuctionCudstodial is ReentrancyGuard, Ownable, IERC721Receiver {\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum AuctionType {\r\n        Custodian,      // 0\r\n        NonCustodian,   // 1\r\n        NonCustodianKYC // 2\r\n    }\r\n\r\n    struct Auction {\r\n        uint tokenId;\r\n        uint auctionEnd;\r\n        uint topBid;\r\n        uint allBids;\r\n        address topBidder;\r\n        bool isWithdrawn;\r\n        bool isEnded;\r\n        address owner;\r\n        string description;\r\n        bool canceled;\r\n        AuctionType auctionType;\r\n        bool isDigitalObject;\r\n        bool isFirstAuction;\r\n    }\r\n\r\n    struct TokenAuctionParams {\r\n        uint auctionRoundDuration;\r\n        uint successAuctionFeePercentage;\r\n        AuctionType prevAuctionType;\r\n        AuctionType auctionType;\r\n    }\r\n\r\n    struct Stake {\r\n        uint lockTime;\r\n        uint stakeAmount;\r\n        bool isWithdrawn;\r\n        bool isCustodian;\r\n    }\r\n\r\n    ICollectionToken public immutable auctionToken;\r\n    IERC20 public purchaseToken;\r\n    address public custodianAdmin;\r\n    uint public constant MIN_AUCTION_DURATION = 4320 minutes;\r\n    uint public minAuctionStartPrice;\r\n    uint public nextBidStepPercentage;\r\n\r\n    uint public defaultAuctionDuration;\r\n    uint public lastAuctionId;\r\n    mapping(uint => Auction) public auctions;\r\n    mapping(uint => TokenAuctionParams) public tokenAuctionParams;\r\n    mapping(uint => uint) public tokenLastAuctionId;\r\n    mapping(uint => bool) public approvedAuctionsForCustodian;\r\n    mapping(uint => bool) public providedKYCForNonCustodian;\r\n\r\n    mapping(address => mapping(uint => Stake)) public userStakes;\r\n    mapping(address => uint[]) internal _userAuctions;\r\n    mapping(address => uint[]) internal _userCustodianStakes;\r\n\r\n    uint internal _totalSupply;\r\n    mapping(address => uint) internal _balances;\r\n\r\n    event Staked(address indexed user, uint amount, uint indexed auctionId, uint indexed tokenId);\r\n    event NewAuction(uint indexed auctionId, uint indexed tokenId, uint indexed collectionId, AuctionType auctionType, bool isDigitalObject, bool isFirstAuction);\r\n    event AuctionInited(uint indexed auctionId, uint auctionEnd, uint indexed tokenId);\r\n    event NewTopBid(uint indexed auctionId, uint indexed tokenId, uint bidAmount, address indexed bidder);\r\n    event Withdraw(address indexed user, uint amount);\r\n    event AuctionTokenWithdraw(address indexed winner, address previousOwner, uint bidAmount, uint fee, uint indexed tokenId, uint indexed auctionId);\r\n    event AuctionProcessingKYC(address indexed winner, address previousOwner, uint bidAmount, uint indexed tokenId, uint indexed auctionId);\r\n    event RescueAuctionToken(address indexed to, uint indexed auctionId, uint indexed tokenId, bool wasAuctionFinished);\r\n    event ApproveAuctionForCustodian(uint indexed auctionId, bool indexed isApproved);\r\n    event UpdateCustodianAdmin(address indexed oldCustodianAdmin, address indexed newCustodianAdmin);\r\n    event UpdateTokenAuctionParams(uint indexed tokenId, uint indexed auctionRoundDuration, uint indexed successAuctionFeePercentage, AuctionType prevAuctionType, AuctionType auctionType);\r\n    event UpdatePriceFeed(address indexed priceFeed);\r\n    event UpdateMinAuctionStartPrice(uint indexed newMinAuctionStartPrice);\r\n    event UpdateDefaultAuctionDuration(uint indexed newDefaultAuctionDuration);\r\n    event UpdateNextBidStepPercentage(uint indexed newNextBidStepPercentage);\r\n    event RescueToken(address indexed to, address token, uint amount);\r\n\r\n    constructor(\r\n        address _auctionToken,\r\n        address _custodianAdmin,\r\n        address _purchaseToken\r\n    ) {\r\n        require(Address.isContract(_auctionToken), \"NFTAuction: Not contract(s)\");\r\n        require(Address.isContract(_purchaseToken), \"NFTAuction: Not contract(s)\");\r\n        require(_custodianAdmin != address(0), \"NFTAuction: Zero custodian admin address\");\r\n        auctionToken = ICollectionToken(_auctionToken);\r\n        custodianAdmin = _custodianAdmin;\r\n        nextBidStepPercentage = 1050e17; //5% or 1.05\r\n        purchaseToken = IERC20(_purchaseToken);\r\n        defaultAuctionDuration = 4320 minutes;\r\n    }\r\n\r\n    modifier onlyCustodianAdmin {\r\n        require(msg.sender == custodianAdmin, \"NFTAuction: Caller is not the custodian admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrCustodianAdmin {\r\n        require(msg.sender == owner || msg.sender == custodianAdmin, \"NFTAuction: Caller is not the custodian admin nor owner\");\r\n        _;\r\n    }\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external pure override returns (bytes4) {\r\n        //equal to return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function userAuctions(address user) external view returns (uint[] memory auctionIds) {\r\n        return _userAuctions[user];\r\n    }\r\n\r\n    function userCustodianStakes(address user) external view returns (uint[] memory auctionIds) {\r\n        return _userCustodianStakes[user];\r\n    }\r\n\r\n    function userCustodianStakeCounts(address user) external view returns (uint) {\r\n        return _userCustodianStakes[user].length;\r\n    }\r\n\r\n    function userUnwithdrawnAuctions(address user) external view returns (uint[] memory auctionIds) {\r\n        uint unwithdrawnStakesCnt;\r\n        for (uint i; i < _userAuctions[user].length; i++) {\r\n            uint auctionId = _userAuctions[user][i];\r\n            if (!isAuctionActive(auctionId) \r\n                && userStakes[user][auctionId].stakeAmount > 0 \r\n                && auctions[auctionId].topBidder != user)\r\n                unwithdrawnStakesCnt++;\r\n        }\r\n        auctionIds = new uint[](unwithdrawnStakesCnt);\r\n        unwithdrawnStakesCnt = 0;\r\n        for (uint i; i < _userAuctions[user].length; i++) {\r\n            uint auctionId = _userAuctions[user][i];\r\n            if (!isAuctionActive(auctionId) \r\n                && userStakes[user][auctionId].stakeAmount > 0 \r\n                && auctions[auctionId].topBidder != user) {\r\n                auctionIds[unwithdrawnStakesCnt] = _userAuctions[user][i];\r\n                unwithdrawnStakesCnt++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function availableForWithdraw(address user, uint auctionId) public view returns (uint stake) {\r\n        if (!isAuctionActive(auctionId) && auctions[auctionId].topBidder != user) {\r\n            stake = userStakes[user][auctionId].stakeAmount;\r\n        }\r\n    }\r\n\r\n    function getNextBidMinAmount(uint auctionId) external view returns (uint nextBid) {\r\n        Auction storage auction = auctions[auctionId];\r\n        if (auction.auctionEnd != 0 && auction.auctionEnd > block.timestamp) {\r\n            nextBid = auction.topBid * nextBidStepPercentage / 1e20;\r\n        } else if (auction.auctionEnd <= block.timestamp) {\r\n            nextBid = 0;\r\n        } else {\r\n            nextBid = auction.topBid;\r\n        }\r\n    }\r\n\r\n    function isAuctionActive(uint auctionId) public view returns (bool) {\r\n        return block.timestamp < auctions[auctionId].auctionEnd;\r\n    }\r\n\r\n    function getLastSalePrice(uint tokenId) external view returns (uint) {\r\n        uint auctionId = tokenLastAuctionId[tokenId];\r\n        if (auctionId == 0) return 0;\r\n        if (auctions[auctionId].auctionEnd > block.timestamp) {\r\n            return auctions[auctionId].topBid;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function stake(uint auctionId, uint amount) external virtual {\r\n        _stake(auctionId, amount, msg.sender);\r\n    }\r\n\r\n    function stakeFor(uint auctionId, uint amount, address user) external virtual {\r\n        _stake(auctionId, amount, user);\r\n    }\r\n\r\n    function withdraw(uint auctionId) public {\r\n        _withdraw(auctionId);\r\n    }\r\n\r\n    function withdrawByTokenId(uint tokenId) external {\r\n        uint auctionId = tokenLastAuctionId[tokenId];\r\n        withdraw(auctionId);\r\n    }\r\n\r\n    function withdrawForAuctions(uint[] memory auctionIds) external {\r\n        for (uint i; i < auctionIds.length; i++) {\r\n            withdraw(auctionIds[i]);\r\n        }\r\n    }\r\n\r\n    function processSuccesfullAuction(uint auctionId) public { \r\n        Auction storage auction = auctions[auctionId];\r\n        require(auction.auctionEnd != 0, \"NFTAuction: Auction is not started\");\r\n        require(auction.auctionEnd < block.timestamp, \"NFTAuction: Auction is not finished\");\r\n        require(!auction.isEnded, \"NFTAuction: Auction already ended\");\r\n        require(auction.auctionType != AuctionType.NonCustodianKYC || (auction.auctionType == AuctionType.NonCustodianKYC && (msg.sender == owner || msg.sender == custodianAdmin)), \"NFTAuction: Non-custodian KYC auction can be processed by custodian admin or owner\");\r\n        bool isCustodial = auction.auctionType == AuctionType.Custodian;\r\n        if (isCustodial) {\r\n            require(msg.sender == custodianAdmin || msg.sender == owner, \"NFTAuction: Caller is not the custodian admin nor owner\");\r\n            require(approvedAuctionsForCustodian[auctionId], \"NFTAuction: Not approved auction for processing by custodian\");\r\n        }\r\n\r\n        address winner = auction.topBidder;        \r\n        uint tokenId = auction.tokenId;\r\n        bool isFirstAuction = auction.isFirstAuction;\r\n        address tokenCustodian = auctionToken.tokenCustodian(tokenId);\r\n        if (winner == address(0)) {\r\n            auctionToken.transferFrom(address(this), owner, tokenId);\r\n            emit RescueAuctionToken(owner, auctionId, tokenId, true);\r\n        } else if (auction.auctionType != AuctionType.NonCustodianKYC || (auction.auctionType == AuctionType.NonCustodianKYC && auction.isWithdrawn && providedKYCForNonCustodian[auctionId])) {\r\n            auctionToken.transferFrom(address(this), winner, tokenId);\r\n            \r\n            uint stakeAmount = auction.topBid;\r\n\r\n            uint bidFinalAmount;\r\n            uint successFee;\r\n            uint successAuctionFeePercentage = tokenAuctionParams[tokenId].successAuctionFeePercentage;\r\n            if (successAuctionFeePercentage != 0 && !isFirstAuction) {\r\n                successFee = stakeAmount * successAuctionFeePercentage / 1e20;\r\n                require(stakeAmount > successFee, \"NFTAuction: successFee is greater than stakeAmount\");\r\n                bidFinalAmount = stakeAmount - successFee;\r\n                if (!isCustodial)\r\n                    purchaseToken.safeTransfer(tokenCustodian, successFee);\r\n            } else {\r\n                bidFinalAmount = stakeAmount;\r\n            }\r\n\r\n            if (!isFirstAuction) {\r\n                (address author, uint royaltyAmount) = IERC2981(address(auctionToken)).royaltyInfo(tokenId, stakeAmount);\r\n                if (royaltyAmount > 0 && royaltyAmount < bidFinalAmount) {\r\n                    if (!isCustodial) purchaseToken.safeTransfer(author, royaltyAmount);\r\n                    bidFinalAmount -= royaltyAmount;\r\n                }\r\n            }\r\n\r\n            address finalBidReceiver = isFirstAuction ? tokenCustodian : auction.owner;\r\n            if (!isCustodial) {\r\n                purchaseToken.safeTransfer(finalBidReceiver, bidFinalAmount);\r\n                \r\n                _totalSupply -= stakeAmount;\r\n                _balances[winner] -= stakeAmount;\r\n                userStakes[winner][auctionId].isWithdrawn = true;\r\n            }\r\n            auction.isEnded = true;\r\n\r\n            emit AuctionTokenWithdraw(winner, finalBidReceiver, bidFinalAmount, successFee, tokenId, auctionId);\r\n        } else {\r\n            emit AuctionProcessingKYC(winner, auction.owner, auction.topBid, tokenId, auctionId);\r\n        }\r\n        auction.isWithdrawn = true;\r\n    }\r\n\r\n    function endKYCAuction(uint auctionId, bool kycResult) external onlyCustodianAdmin {\r\n        require(auctionId <= lastAuctionId, \"NFTAuction: No such auction Id\");\r\n        require(auctions[auctionId].auctionType == AuctionType.NonCustodianKYC, \"NFTAuction: Not a non-custodian KYC auction\");\r\n        require(auctions[auctionId].isWithdrawn && !auctions[auctionId].isEnded, \"NFTAuction: Already ended or processSuccesfullAuction not used yet\");\r\n        \r\n        providedKYCForNonCustodian[auctionId] = kycResult;\r\n        if (!kycResult) {\r\n            auctionToken.transferFrom(address(this), auctions[auctionId].owner, auctions[auctionId].tokenId);\r\n            uint stakeAmount = auctions[auctionId].topBid;\r\n            address winner = auctions[auctionId].topBidder; \r\n\r\n            purchaseToken.safeTransfer(custodianAdmin, stakeAmount);\r\n            _totalSupply -= stakeAmount;\r\n            _balances[winner] -= stakeAmount;\r\n            userStakes[winner][auctionId].isWithdrawn = true;\r\n            auctions[auctionId].isEnded = true;\r\n        }\r\n        else processSuccesfullAuction(auctionId);\r\n    }\r\n\r\n    function startNewAuctions(uint[] memory tokenIds, uint[] memory startBidAmounts, AuctionType[] memory auctionTypes, string[] memory descriptions) external { \r\n        require(tokenIds.length == startBidAmounts.length, \"NFTAuction: Wrong lengths\");\r\n        require(tokenIds.length == auctionTypes.length, \"NFTAuction: Wrong lengths\");\r\n        require(tokenIds.length == descriptions.length, \"NFTAuction: Wrong lengths\");\r\n        for (uint i; i < tokenIds.length; i++) {\r\n            startNewAuction(tokenIds[i], startBidAmounts[i], descriptions[i], auctionTypes[i]);\r\n        }\r\n    }\r\n\r\n    function startNewAuction(uint tokenId, uint startBidAmount, uint roundDuration, uint successAuctionFeePercentage, string memory description, AuctionType auctionType) onlyOwner public {\r\n        _updateTokenAuctionParams(tokenId, roundDuration, successAuctionFeePercentage, auctionType);\r\n        startNewAuction(tokenId, startBidAmount, description, auctionType);\r\n    }\r\n\r\n    function startNewAuction(uint tokenId, uint startBidAmount, string memory description, AuctionType auctionType) public {\r\n        bool isFirstAuction = tokenLastAuctionId[tokenId] == 0;\r\n        require(isFirstAuction || tokenAuctionParams[tokenId].auctionType == auctionType, \"NFTAuction: subsequent auctions for token should have same custodial setting\");\r\n\r\n        auctionToken.transferFrom(msg.sender, address(this), tokenId);\r\n        if(startBidAmount < minAuctionStartPrice) startBidAmount = minAuctionStartPrice;\r\n\r\n        uint auctionId = ++lastAuctionId;\r\n        tokenLastAuctionId[tokenId] = auctionId;\r\n        uint collectionId = auctionToken.tokenToCollection(tokenId);\r\n        bool isDigitalObject = auctionToken.collection(collectionId).isDigitalObject; \r\n\r\n        tokenAuctionParams[tokenId].auctionType == auctionType;\r\n\r\n        auctions[auctionId].tokenId = tokenId;\r\n        auctions[auctionId].description = description;\r\n        auctions[auctionId].topBid = startBidAmount;\r\n        auctions[auctionId].owner = msg.sender;\r\n        auctions[auctionId].auctionType = auctionType;\r\n        auctions[auctionId].isFirstAuction = isFirstAuction;\r\n        if (isDigitalObject)\r\n            auctions[auctionId].isDigitalObject = true; \r\n\r\n        emit NewAuction(auctionId, collectionId, tokenId, auctionType, isDigitalObject, isFirstAuction);\r\n    }\r\n\r\n    function rescueUnbiddenTokenByTokenId(uint tokenId) external {\r\n        uint auctionId = tokenLastAuctionId[tokenId];\r\n        rescueUnbiddenToken(auctionId);\r\n    }\r\n\r\n    function rescueUnbiddenToken(uint auctionId) public { \r\n        Auction storage auction = auctions[auctionId];\r\n        require(auction.auctionEnd == 0, \"NFTAuction: Token is already bidden\");\r\n        require(!auction.canceled, \"NFTAuction: Token is already rescued\");\r\n        require(auction.owner == msg.sender, \"NFTAuction: Not token owner\");\r\n        auction.canceled = true;\r\n        auctionToken.transferFrom(address(this), msg.sender, auction.tokenId);\r\n        emit RescueAuctionToken(msg.sender, auctionId, auction.tokenId, false);\r\n    }\r\n\r\n    function _stake(uint auctionId, uint amount, address user) internal virtual nonReentrant {\r\n        require(auctionId <= lastAuctionId, \"NFTAuction: No such auction Id\");\r\n        Auction storage auction = auctions[auctionId];\r\n        require(!auction.canceled, \"NFTAuction: Auction is canceled\");\r\n        if (auction.auctionEnd == 0) _initAuction(auctionId);\r\n        else require(auction.auctionEnd > block.timestamp, \"NFTAuction: Round is finished\");\r\n\r\n        uint nextMinBid;\r\n        if (auction.topBidder != address(0)) {\r\n            nextMinBid = auction.topBid * nextBidStepPercentage / 1e20;\r\n        } else {\r\n            nextMinBid = auction.topBid;\r\n        }\r\n\r\n        uint totalAmount = amount;\r\n\r\n        uint previousStakeForCurrentAuction = userStakes[user][auctionId].stakeAmount;\r\n        if (previousStakeForCurrentAuction == 0) {\r\n            _userAuctions[user].push(auctionId);\r\n            userStakes[user][auctionId].lockTime = auction.auctionEnd;\r\n            if (auction.auctionType == AuctionType.Custodian) userStakes[user][auctionId].isCustodian = true;\r\n        } else {\r\n            totalAmount += previousStakeForCurrentAuction;\r\n        }\r\n        require(totalAmount >= nextMinBid, \"NFTAuction: Not enough amount for a bid\");\r\n        \r\n        userStakes[user][auctionId].stakeAmount = totalAmount;\r\n\r\n        if(auction.auctionType == AuctionType.Custodian) {\r\n            address tokenCustodian = auctionToken.tokenCustodian(auction.tokenId);\r\n            purchaseToken.safeTransferFrom(msg.sender, tokenCustodian, amount);\r\n            _userCustodianStakes[user].push(auctionId);\r\n        } else {\r\n            purchaseToken.safeTransferFrom(msg.sender, address(this), amount);\r\n            _balances[user] += amount;\r\n            _totalSupply += amount;\r\n        }\r\n        \r\n        auction.topBid = totalAmount;\r\n        auction.topBidder = user;\r\n        auction.allBids += amount;\r\n        emit NewTopBid(auctionId, auction.tokenId, totalAmount, user);  \r\n        emit Staked(user, amount, auctionId, auction.tokenId);\r\n    }\r\n\r\n    function _withdraw(uint auctionId) internal virtual nonReentrant {\r\n        require(auctions[auctionId].auctionType != AuctionType.Custodian, \"NFTAuction: Custodian return stakes on custodial auctions\");\r\n        address user = msg.sender;\r\n        require(!userStakes[user][auctionId].isWithdrawn, \"NFTAuction: Already withdrawn\");\r\n        require(userStakes[user][auctionId].lockTime < block.timestamp, \"NFTAuction: Locked\");\r\n        require(auctions[auctionId].isWithdrawn, \"NFTAuction: processSuccesfullAuction not executed yet\");\r\n        require(auctions[auctionId].topBidder != user, \"NFTAuction: Winner can withdraw using processSuccesfullAuction\");\r\n\r\n        uint amount = userStakes[user][auctionId].stakeAmount;\r\n        require(amount > 0, \"NFTAuction: Stake amount should be more then 0\");\r\n        purchaseToken.safeTransfer(user, amount);\r\n\r\n        _totalSupply -= amount;\r\n        _balances[user] -= amount;\r\n        userStakes[user][auctionId].isWithdrawn = true;\r\n        emit Withdraw(user, amount);\r\n    }\r\n\r\n    function _initAuction(uint auctionId) internal {\r\n        uint auctionRoundDuration = tokenAuctionParams[auctions[auctionId].tokenId].auctionRoundDuration;\r\n        if (auctionRoundDuration == 0)\r\n            auctionRoundDuration = defaultAuctionDuration;\r\n        uint auctionEnd = block.timestamp + auctionRoundDuration;\r\n        auctions[auctionId].auctionEnd = auctionEnd;\r\n        emit AuctionInited(auctionId, auctionEnd, auctions[auctionId].tokenId);\r\n    }\r\n\r\n\r\n\r\n    /* === CUSTODIAN ACTIONS === */\r\n\r\n    function updateCustodianAdmin(address newAdmin) external onlyOwnerOrCustodianAdmin {\r\n        require(newAdmin != address(0), \"NFTAuction: Zero address\");\r\n        emit UpdateCustodianAdmin(custodianAdmin, newAdmin);\r\n        custodianAdmin = newAdmin;\r\n    }\r\n\r\n\r\n    /* === OWNER ACTIONS === */\r\n\r\n    function approveAuctionForCustodian(uint auctionId, bool isApproved) external onlyOwner { \r\n        require(auctionId <= lastAuctionId, \"NFTAuction: No such auction Id\");\r\n        require(auctions[auctionId].auctionType == AuctionType.Custodian, \"NFTAuction: Not a custodial auction\");\r\n        approvedAuctionsForCustodian[auctionId] = isApproved;\r\n        emit ApproveAuctionForCustodian(auctionId, isApproved);\r\n    }\r\n\r\n    function updateMinAuctionStartPrice(uint newMinAuctionStartPrice) external onlyOwner {\r\n        require(newMinAuctionStartPrice > 0, \"NFTAuction: New min stake amount must be greater than 0\");\r\n        minAuctionStartPrice = newMinAuctionStartPrice;\r\n        emit UpdateMinAuctionStartPrice(newMinAuctionStartPrice);\r\n    }\r\n\r\n    function updateDefaultAuctionDuration(uint newDefaultAuctionDuration) external onlyOwner {\r\n        require(newDefaultAuctionDuration >= MIN_AUCTION_DURATION, \"NFTAuction: Auction duration is too short\");\r\n        defaultAuctionDuration = newDefaultAuctionDuration;\r\n        emit UpdateDefaultAuctionDuration(newDefaultAuctionDuration);\r\n    }\r\n\r\n    function updateTokenAuctionParams(uint tokenId, uint auctionRoundDuration, uint successAuctionFeePercentage, AuctionType auctionType) external onlyOwner {\r\n        _updateTokenAuctionParams(tokenId, auctionRoundDuration, successAuctionFeePercentage, auctionType);\r\n    }\r\n\r\n    function _updateTokenAuctionParams(uint tokenId, uint auctionRoundDuration, uint successAuctionFeePercentage, AuctionType auctionType) private {\r\n        require(auctionRoundDuration >= MIN_AUCTION_DURATION, \"NFTAuction: Auction duration is too short\");\r\n        if (successAuctionFeePercentage > 0) { //successAuctionFeePercentage can be a zero value\r\n            require(successAuctionFeePercentage < 1e20, \"NFTAuction: successAuctionFeePercentage must be lower than 1e20\");\r\n        }\r\n        bool isFirstAuction = tokenLastAuctionId[tokenId] == 0;\r\n        if (!isFirstAuction && auctionType != AuctionType.Custodian && auctionType != tokenAuctionParams[tokenId].auctionType) {\r\n            require(tokenAuctionParams[tokenId].auctionType != AuctionType.Custodian, \"NFTAuction: token auctions can be only custodian\");\r\n            require(tokenAuctionParams[tokenId].prevAuctionType == AuctionType.Custodian, \"NFTAuction: token auction type cannot be changed to this type\");\r\n        }\r\n        tokenAuctionParams[tokenId].auctionRoundDuration = auctionRoundDuration;\r\n        tokenAuctionParams[tokenId].successAuctionFeePercentage = successAuctionFeePercentage;\r\n        if (tokenAuctionParams[tokenId].prevAuctionType != auctionType)\r\n            tokenAuctionParams[tokenId].prevAuctionType = tokenAuctionParams[tokenId].auctionType;\r\n        tokenAuctionParams[tokenId].auctionType = auctionType;\r\n        emit UpdateTokenAuctionParams(tokenId, auctionRoundDuration, successAuctionFeePercentage, tokenAuctionParams[tokenId].prevAuctionType, auctionType);\r\n    }\r\n    \r\n    function updateNextBidStepPercentage(uint newNextBidStepPercentage) external onlyOwner {\r\n        require(newNextBidStepPercentage >= 1e20);\r\n        nextBidStepPercentage = newNextBidStepPercentage;\r\n        emit UpdateNextBidStepPercentage(newNextBidStepPercentage);\r\n    }\r\n\r\n    function rescue(address to, address tokenAddress, uint amount) external onlyOwner {\r\n        require(to != address(0), \"NFTAuction: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"NFTAuction: Cannot rescue 0\");\r\n        \r\n        IERC20(tokenAddress).safeTransfer(to, amount);\r\n        emit RescueToken(to, address(tokenAddress), amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_custodianAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_purchaseToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApproveAuctionForCustodian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionInited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionProcessingKYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionTokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDigitalObject\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFirstAuction\",\"type\":\"bool\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NewTopBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasAuctionFinished\",\"type\":\"bool\"}],\"name\":\"RescueAuctionToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCustodianAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCustodianAdmin\",\"type\":\"address\"}],\"name\":\"UpdateCustodianAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDefaultAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultAuctionDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinAuctionStartPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateMinAuctionStartPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newNextBidStepPercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateNextBidStepPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"UpdatePriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionRoundDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"successAuctionFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"prevAuctionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"name\":\"UpdateTokenAuctionParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"approveAuctionForCustodian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedAuctionsForCustodian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionToken\",\"outputs\":[{\"internalType\":\"contract ICollectionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allBids\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isDigitalObject\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFirstAuction\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"availableForWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custodianAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"kycResult\",\"type\":\"bool\"}],\"name\":\"endKYCAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getNextBidMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextBid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isAuctionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBidStepPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"processSuccesfullAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providedKYCForNonCustodian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"rescueUnbiddenToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rescueUnbiddenTokenByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"name\":\"startNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successAuctionFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"name\":\"startNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startBidAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType[]\",\"name\":\"auctionTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"}],\"name\":\"startNewAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAuctionParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionRoundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successAuctionFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"prevAuctionType\",\"type\":\"uint8\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLastAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateCustodianAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"updateDefaultAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinAuctionStartPrice\",\"type\":\"uint256\"}],\"name\":\"updateMinAuctionStartPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNextBidStepPercentage\",\"type\":\"uint256\"}],\"name\":\"updateNextBidStepPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionRoundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successAuctionFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"enum HardStakingNFTAuctionCudstodial.AuctionType\",\"name\":\"auctionType\",\"type\":\"uint8\"}],\"name\":\"updateTokenAuctionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"auctionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userCustodianStakeCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userCustodianStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"auctionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCustodian\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnwithdrawnAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"auctionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"auctionIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawForAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HardStakingNFTAuctionCudstodial", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000087f2d33bbb4c0e3089ca60d5de729b46627bdfe200000000000000000000000001b13bb497b0288e0182f2e717841c465c6b4df1000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://694acd5d89c018fac034129de7acd19bcdee6e7ce882c1824fcca7410187e644"}]}