{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/VerifySignaturePool01.sol\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n/* Signature Verification\r\n\r\nHow to Sign and Verify\r\n# Signing\r\n1. Create message to sign\r\n2. Hash the message\r\n3. Sign the hash (off chain, keep your private key secret)\r\n\r\n# Verify\r\n1. Recreate hash from the original message\r\n2. Recover signer from signature and hash\r\n3. Compare recovered signer to claimed signer\r\n*/\r\n\r\ncontract VerifySignaturePool01 {\r\n    /* 1. Unlock MetaMask account\r\n    ethereum.enable()\r\n    */\r\n\r\n    /* 2. Get message hash to sign\r\n    getMessageHash(\r\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\r\n        123,\r\n        \"coffee and donuts\",\r\n        1\r\n    )\r\n\r\n    hash = \"0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\"\r\n    */\r\n    function getMessageHash(\r\n        address nft,\r\n        uint punkID,\r\n        uint valuation,\r\n        uint expireAtBlock\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(nft, punkID, valuation, expireAtBlock));\r\n    }\r\n\r\n    /* 3. Sign message hash\r\n    # using browser\r\n    account = \"copy paste account of signer here\"\r\n    ethereum.request({ method: \"personal_sign\", params: [account, hash]}).then(console.log)\r\n\r\n    # using web3\r\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\r\n\r\n    Signature will be different for different accounts\r\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\r\n    */\r\n    function getEthSignedMessageHash(bytes32 _messageHash)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        /*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash)\r\n            );\r\n    }\r\n\r\n    /* 4. Verify signature\r\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\r\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\r\n    amount = 123\r\n    message = \"coffee and donuts\"\r\n    nonce = 1\r\n    signature =\r\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\r\n    */\r\n    function verify(\r\n        address nft,\r\n        uint punkID,\r\n        uint valuation,\r\n        uint expireAtBlock,\r\n        address _signer,\r\n        bytes memory signature\r\n    ) public pure returns (bool) {\r\n        bytes32 messageHash = getMessageHash(nft,punkID, valuation, expireAtBlock);\r\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\r\n\r\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n    }\r\n\r\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        require(sig.length == 65, \"invalid signature length\");\r\n\r\n        assembly {\r\n            /*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // implicitly return (r, s, v)\r\n    }\r\n}\r\n// File: contracts/ERC721LendingPoolETH01.sol\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721LendingPoolETH01 is\r\n    VerifySignaturePool01,\r\n    OwnableUpgradeable,\r\n    IERC721Receiver,\r\n    PausableUpgradeable\r\n{\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) public pure override returns (bytes4) {\r\n        return\r\n            bytes4(\r\n                keccak256(\"onERC721Received(address,address,uint256,bytes)\")\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Pool Constants\r\n     */\r\n    address public _valuationSigner;\r\n\r\n    address public _supportedCollection;\r\n\r\n\r\n    struct PoolParams {\r\n        uint32 interestBPS1000000XBlock;\r\n        uint32 collateralFactorBPS;\r\n    }\r\n\r\n    mapping(uint256 => PoolParams) public durationSeconds_poolParam;\r\n\r\n    /**\r\n     * Pool Setup\r\n     */\r\n\r\n    function initialize(address supportedCollection) public initializer {\r\n        __Ownable_init();\r\n        __Pausable_init();\r\n        _supportedCollection = supportedCollection;\r\n    }\r\n\r\n    function setDurationParam(uint256 duration, PoolParams calldata ppm)\r\n        public\r\n        onlyOwner\r\n    {\r\n        durationSeconds_poolParam[duration] = ppm;\r\n    }\r\n\r\n    function setValuationSigner(address valuationSigner) public onlyOwner {\r\n        _valuationSigner = valuationSigner;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n      _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n      _unpause();\r\n    }\r\n\r\n    /**\r\n     * Storage and Events\r\n     */\r\n\r\n    struct LoanTerms {\r\n        uint256 loanStartBlock;\r\n        uint256 loanExpireTimestamp;\r\n        uint32 interestBPS1000000XBlock;\r\n        uint32 maxLTVBPS;\r\n        uint256 borrowedWei;\r\n        uint256 returnedWei;\r\n        uint256 accuredInterestWei;\r\n        uint256 repaidInterestWei;\r\n        address borrower;\r\n    }\r\n\r\n    mapping(uint256 => LoanTerms) public _loans;\r\n    event LoanInitiated(\r\n        address indexed user,\r\n        address indexed erc721,\r\n        uint256 indexed nftID,\r\n        LoanTerms loan\r\n    );\r\n    event LoanTermsChanged(\r\n        address indexed user,\r\n        address indexed erc721,\r\n        uint256 indexed nftID,\r\n        LoanTerms oldTerms,\r\n        LoanTerms newTerms\r\n    );\r\n    event Liquidation(\r\n        address indexed user,\r\n        address indexed erc721,\r\n        uint256 indexed nftID,\r\n        uint256 liquidated_at,\r\n        address liquidator,\r\n        uint256 reason\r\n    );\r\n\r\n    /**\r\n     * View functions\r\n     */\r\n\r\n    function nftHasLoan(uint256 nftID) internal view returns (bool) {\r\n        return _loans[nftID].borrowedWei > _loans[nftID].returnedWei;\r\n    }\r\n\r\n    function outstanding(uint256 nftID) public view returns (uint256) {\r\n        // do not lump the interest\r\n        if (_loans[nftID].borrowedWei <= _loans[nftID].returnedWei) return 0;\r\n        uint256 newAccuredInterestWei = ((block.number -\r\n            _loans[nftID].loanStartBlock) *\r\n            (_loans[nftID].borrowedWei - _loans[nftID].returnedWei) *\r\n            _loans[nftID].interestBPS1000000XBlock) / 10000000000;\r\n        return\r\n            (_loans[nftID].borrowedWei - _loans[nftID].returnedWei) +\r\n            (_loans[nftID].accuredInterestWei -\r\n                _loans[nftID].repaidInterestWei) +\r\n            newAccuredInterestWei;\r\n    }\r\n\r\n    function isUnHealthyLoan(uint256 nftID)\r\n        public\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        require(nftHasLoan(nftID), \"nft does not have active loan\");\r\n        bool isExpired = block.timestamp > _loans[nftID].loanExpireTimestamp &&\r\n            outstanding(nftID) > 0;\r\n        return (isExpired, 0);\r\n    }\r\n\r\n    /**\r\n     * Loan origination\r\n     */\r\n\r\n    function borrowETH(\r\n        uint256 valuation,\r\n        uint256 nftID,\r\n        uint256 loanDurationSeconds,\r\n        uint256 expireAtBlock,\r\n        uint256 borrowedWei,\r\n        bytes memory signature\r\n    ) public whenNotPaused {\r\n        require(\r\n            verify(\r\n                _supportedCollection,\r\n                nftID,\r\n                valuation,\r\n                expireAtBlock,\r\n                _valuationSigner,\r\n                signature\r\n            ),\r\n            \"SignatureVerifier: fake valuation provided!\"\r\n        );\r\n        require(!nftHasLoan(nftID), \"NFT already has loan!\");\r\n        uint32 maxLTVBPS = durationSeconds_poolParam[loanDurationSeconds]\r\n            .collateralFactorBPS;\r\n        require(maxLTVBPS > 0, \"Duration not supported\");\r\n        require(\r\n            IERC721(_supportedCollection).ownerOf(nftID) == msg.sender,\r\n            \"Stealer!\"\r\n        );\r\n        require(block.number < expireAtBlock, \"Valuation expired\");\r\n        require(\r\n            borrowedWei <= (valuation * maxLTVBPS) / 10_000,\r\n            \"Can't borrow more than max LTV\"\r\n        );\r\n        require(borrowedWei < address(this).balance, \"not enough money\");\r\n        \r\n        _loans[nftID] = LoanTerms(\r\n            block.number,\r\n            block.timestamp + loanDurationSeconds,\r\n            durationSeconds_poolParam[loanDurationSeconds].interestBPS1000000XBlock,\r\n            maxLTVBPS,\r\n            borrowedWei,\r\n            0,\r\n            0,\r\n            0,\r\n            msg.sender\r\n        );\r\n        emit LoanInitiated(\r\n            msg.sender,\r\n            _supportedCollection,\r\n            nftID,\r\n            _loans[nftID]\r\n        );\r\n        IERC721(_supportedCollection).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            nftID\r\n        );\r\n\r\n        (bool success, ) = msg.sender.call{value: borrowedWei}(\"\");\r\n        require(success, \"cannot send ether\");\r\n    }\r\n\r\n    /**\r\n     * Repay\r\n     */\r\n\r\n    // repay change loan terms, renew loan start, fix interest to borrowed amount, dont renew loan expiry\r\n    function repayETH(uint256 nftID) public payable whenNotPaused {\r\n        require(nftHasLoan(nftID), \"NFT does not have active loan\");\r\n        uint256 repayAmount = msg.value;\r\n        LoanTerms memory oldLoanTerms = _loans[nftID];\r\n        // require(repayAmount > outstanding(nftID), \"repay amount exceed outstanding\");\r\n        if (repayAmount >= outstanding(nftID)) {\r\n            uint256 toBeTransferred = repayAmount - outstanding(nftID);\r\n            repayAmount = outstanding(nftID);\r\n            // _loans[nftID].accuredInterestWei =\r\n            //     outstanding(nftID) -\r\n            //     _loans[nftID].borrowedWei;\r\n            _loans[nftID].returnedWei = _loans[nftID].borrowedWei;\r\n            // _loans[nftID].repaidInterestWei = _loans[nftID].accuredInterestWei;\r\n            IERC721(_supportedCollection).transferFrom(\r\n                address(this),\r\n                _loans[nftID].borrower,\r\n                nftID\r\n            );\r\n            (bool success, ) = msg.sender.call{value: toBeTransferred}(\"\");\r\n            require(success, \"cannot send ether\");\r\n        } else {\r\n            // lump in interest\r\n            //_loans[nftID].previousBorrowedWei = _loans[nftID].borrowedWei;\r\n            _loans[nftID].accuredInterestWei +=\r\n                ((block.number - _loans[nftID].loanStartBlock) *\r\n                    (_loans[nftID].borrowedWei - _loans[nftID].returnedWei) *\r\n                    _loans[nftID].interestBPS1000000XBlock) /\r\n                10000000000;\r\n            uint256 outstandingInterest = _loans[nftID].accuredInterestWei -\r\n                _loans[nftID].repaidInterestWei;\r\n            if (repayAmount > outstandingInterest) {\r\n                _loans[nftID].repaidInterestWei = _loans[nftID]\r\n                    .accuredInterestWei;\r\n                _loans[nftID].returnedWei += (repayAmount -\r\n                    outstandingInterest);\r\n            } else {\r\n                _loans[nftID].repaidInterestWei += repayAmount;\r\n            }\r\n            // restart interest calculation\r\n            _loans[nftID].loanStartBlock = block.number;\r\n        }\r\n        emit LoanTermsChanged(\r\n            _loans[nftID].borrower,\r\n            _supportedCollection,\r\n            nftID,\r\n            oldLoanTerms,\r\n            _loans[nftID]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Liquidation\r\n     ( warning! If it is not only owner. miners can always fast forward the clock by 15 seconds to liquidate anything before us)\r\n     */\r\n\r\n    function liquidateLoan(uint256 nftID) public onlyOwner {\r\n        require(nftHasLoan(nftID), \"nft does not have active loan\");\r\n        (bool unhealthy, uint256 reason) = isUnHealthyLoan(nftID);\r\n        require(unhealthy, \"can't liquidate this loan\");\r\n        LoanTerms memory oldLoanTerms = _loans[nftID];\r\n        _loans[nftID].returnedWei = _loans[nftID].borrowedWei;\r\n        emit Liquidation(\r\n            _loans[nftID].borrower,\r\n            _supportedCollection,\r\n            nftID,\r\n            block.timestamp,\r\n            msg.sender,\r\n            reason\r\n        );\r\n        IERC721(_supportedCollection).safeTransferFrom(\r\n            address(this),\r\n            owner(),\r\n            nftID\r\n        );\r\n        emit LoanTermsChanged(\r\n            _loans[nftID].borrower,\r\n            _supportedCollection,\r\n            nftID,\r\n            oldLoanTerms,\r\n            _loans[nftID]\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n        // React to receiving ether\r\n    }\r\n\r\n    /**\r\n     * Admin functions\r\n     */\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        (bool success, ) = owner().call{value: amount}(\"\");\r\n        require(success, \"cannot send ether\");\r\n    }\r\n\r\n    function withdrawERC20(address currency, uint256 amount) public onlyOwner {\r\n        IERC20(currency).transfer(owner(), amount);\r\n    }\r\n\r\n    function withdrawERC721(address collection, uint256 nftID)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            !(collection == _supportedCollection && nftHasLoan(nftID)),\r\n            \"no stealing\"\r\n        );\r\n        IERC721(collection).safeTransferFrom(address(this), owner(), nftID);\r\n    }\r\n\r\n    /**\r\n     * Pool is not supposed to be used again after calling this function\r\n     */\r\n    function emergencyWithdrawLoanCollateral(uint256 nftID, bytes memory signature, uint8 withdrawToOwner)\r\n        public\r\n        whenPaused onlyOwner\r\n    {\r\n        require(\r\n            nftHasLoan(nftID),\r\n            \"could be withdrawn using withdrawERC721\"\r\n        );\r\n        require(\r\n            verify(\r\n                _supportedCollection,\r\n                nftID,\r\n                238888 + withdrawToOwner,\r\n                238888 + withdrawToOwner,\r\n                _loans[nftID].borrower,\r\n                signature\r\n            ),\r\n            \"SignatureVerifier: fake signature provided!\"\r\n        );\r\n        if (withdrawToOwner == 1) {\r\n          IERC721(_supportedCollection).safeTransferFrom(address(this), owner(), nftID);\r\n        } else if (withdrawToOwner == 0) {\r\n          IERC721(_supportedCollection).safeTransferFrom(address(this), _loans[nftID].borrower, nftID);\r\n        }\r\n        \r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidated_at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanExpireTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLTVBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"borrowedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuredInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC721LendingPoolETH01.LoanTerms\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"LoanInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanExpireTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLTVBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"borrowedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuredInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC721LendingPoolETH01.LoanTerms\",\"name\":\"oldTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanExpireTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLTVBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"borrowedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuredInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC721LendingPoolETH01.LoanTerms\",\"name\":\"newTerms\",\"type\":\"tuple\"}],\"name\":\"LoanTermsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanExpireTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLTVBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"borrowedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuredInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidInterestWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_supportedCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_valuationSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDurationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"durationSeconds_poolParam\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"collateralFactorBPS\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"withdrawToOwner\",\"type\":\"uint8\"}],\"name\":\"emergencyWithdrawLoanCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAtBlock\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supportedCollection\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"isUnHealthyLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"outstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"interestBPS1000000XBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"collateralFactorBPS\",\"type\":\"uint32\"}],\"internalType\":\"struct ERC721LendingPoolETH01.PoolParams\",\"name\":\"ppm\",\"type\":\"tuple\"}],\"name\":\"setDurationParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuationSigner\",\"type\":\"address\"}],\"name\":\"setValuationSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC721LendingPoolETH01", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9e81baf7dbe876dd29f6cefadac0597d6c699355ee86977f027e322e42e03a7b"}]}