{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface IStakable {\r\n\tfunction stakedBalanceOf(address account) external view returns (uint256);\r\n    function getStake(address account) external view returns (uint256, uint256, uint256);\r\n    function stake(address account, uint256 amount, uint256 unstakeTime, bool isPlayer, uint256 adjustedStake) external;\r\n    function unstake(address account, uint256 unstakeAmount, bool isPlayer, uint256 adjustedStake) external;\r\n    function sync(address account, uint256 adjustedStake) external;\r\n    function toggleStaking() external;\r\n    event Stake(address indexed staker, uint256 amount, uint256 stakeTime, uint256 stakeExpire);\r\n    event Unstake(address indexed staker, uint256 amount, uint256 stakeAmountRemaining);\r\n    event Adjust(address indexed staker, uint256 oldStake, uint256 newStake);\r\n    event ToggleStaking(bool enabled);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBattleFish is IERC20, IStakable {\r\n\tevent ChangeBuyTax(uint256 prevTax, uint256 newTax);\r\n    event ChangeSellTax(uint256 prevTax, uint256 newTax);\r\n    event ChangeRewards(uint256 prevRew, uint256 newRew);\r\n    event SetStakingContract(address stakingCon);\r\n    event SetPool(address isNowPool);\r\n    event FailsafeTokenSwap(uint256 amount);\r\n    event FailsafeETHTransfer(uint256 amount);\r\n    event FreezeMint(uint256 mintLockTime);\r\n    event ThawMint(uint256 mintLockTime);\r\n\r\n    function freezeMint(uint256 timestamp) external;\r\n    function thawMint() external;\r\n    function mint(uint256 amount, address recipient) external;\r\n    function setStakingContract(address addr) external;\r\n    function getStakingContract() external view returns (address);\r\n    function setBuyTax(uint8 newTax) external;\r\n    function setSellTax(uint8 newTax) external;\r\n    function setRewards(uint8 newRewards) external;\r\n    function setPool(address addr) external;\r\n    function isPool(address addr) external view returns (bool);\r\n    function failsafeTokenSwap(uint256 amount) external;\r\n    function failsafeETHtransfer() external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract BattleFish is IBattleFish, Context {\r\n    /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * ===== Variables =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    \r\n    // Fair Launch\r\n    bool private _trading; // Trading stage, used for fair launch\r\n    uint256 private _timeWalletQuantityLimit = 2000000000;\r\n    uint256 private _timeTxCountLimit = 2000000000;\r\n    uint256 private _gasLimit;\r\n    mapping (address => bool) private _oneTx;\r\n    mapping (address => uint256) private _buyCounter;\r\n\r\n    // States\r\n    bool private _swapping;\r\n    bool public stakingEnabled = false;\r\n    bool public mintLocked = true;\r\n    uint public mintLockTime = 1651438800;\r\n\r\n    // Mappings\r\n    mapping (address => bool) private _isPool;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _stakedBalances;\r\n    mapping (address => uint256) private _stakeExpireTime;\r\n    mapping (address => uint256) private _stakeBeginTime;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // ERC20\r\n    uint256 private _totalSupply = 10 * 10**6 * 10**9; \r\n    string private constant _name = \"Battle.Fish\";\r\n    string private constant _symbol = \"$BATTLE\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    // Tax and staking\r\n    uint8 private _buyTax = 10;\r\n    uint8 private _sellTax = 10;\r\n    uint8 private _stakingRewards = 20;\r\n\r\n    // Addresses\r\n    address immutable private _lp;\r\n    address payable immutable private _vault;\r\n    address payable immutable private _multiSig;\r\n    address payable private _stakingContract;\r\n    address private constant _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 private UniV2Router;\r\n\r\n    constructor(address vault, address multiSig) {\r\n        require(vault != address(0) && multiSig != address(0), \"$BATTLE: cannot assign privilege to zero address\");\r\n        _lp = multiSig;\r\n        _balances[multiSig] = _totalSupply;\r\n        UniV2Router = IUniswapV2Router02(_uniRouter);\r\n        _vault = payable(vault);\r\n        _multiSig = payable(multiSig);\r\n    }\r\n\r\n    modifier onlyMultiSig {\r\n        require (_msgSender() == _multiSig, \"$BATTLE: unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier lockSwap {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * =====   ERC20   =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require (_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer exceeds balance\");\r\n        require(amount > 0, \"$BATTLE: cannot transfer zero\");\r\n        require(!(_isPool[sender] && _isPool[recipient]), \"$BATTLE: cannot transfer pool to pool\");\r\n\r\n        if (!_trading) {\r\n            require(sender == _lp, \"$BATTLE: trading disabled\");\r\n        }\r\n        \r\n        unchecked {\r\n            _balances[sender] -= amount;\r\n        }\r\n\r\n        uint256 taxedAmount = amount;\r\n        uint256 tax = 0;\r\n    \r\n        if (_isPool[sender] == true && recipient != _lp && recipient != _uniRouter) {\r\n            tax = amount * _buyTax / 100;\r\n            taxedAmount = amount - tax;\r\n            _balances[address(this)] += tax;\r\n            if (block.timestamp < _timeTxCountLimit) {\r\n                require(tx.gasprice <= _gasLimit || sender == _lp, \"$BATTLE: excessive gas\");\r\n                require(!_oneTx[tx.origin], \"$BATTLE: transaction count limit\");\r\n                _buyCounter[tx.origin] += taxedAmount;\r\n                _oneTx[tx.origin] = true;\r\n            }\r\n            if (block.timestamp < _timeWalletQuantityLimit) {\r\n                require((_balances[recipient] + taxedAmount) <= 50000000000000, \"$BATTLE: exceeds wallet limit\");\r\n            }\r\n        }\r\n        if (_isPool[recipient] == true && sender != _lp && sender != _uniRouter){ \r\n            tax = amount * _sellTax / 100;\r\n            taxedAmount = amount - tax;\r\n            _balances[address(this)] += tax;\r\n\r\n            if (_balances[address(this)] > 100 * 10**9 && !_swapping) {\r\n                uint256 _swapAmount = _balances[address(this)];\r\n                if (_swapAmount > amount * 40 / 100) _swapAmount = amount * 40 / 100;\r\n                _tokensToETH(_swapAmount);\r\n            }\r\n        }\r\n    \r\n        _balances[recipient] += taxedAmount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * =====  Staking  =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    function stakedBalanceOf(address account) external view override returns (uint256) {\r\n        return _stakedBalances[account];    \r\n    }\r\n\r\n    function getStake(address account) external view override returns (uint256, uint256, uint256) {\r\n        if (stakingEnabled && _stakedBalances[account] > 0)\r\n            return (_stakedBalances[account], _stakeBeginTime[account], _stakeExpireTime[account]);\r\n        else return (0,0,0);\r\n    }\r\n\r\n    function stake(address account, uint256 amount, uint256 unstakeTime, bool isPlayer, uint256 adjustedStake) external override {\r\n        require (_msgSender() == _stakingContract, \"$BATTLE: must stake through staking contract\");\r\n        require (account != address(0), \"$BATTLE: cannot stake zero address\");\r\n        require (stakingEnabled, \"$BATTLE: staking currently not enabled\"); \r\n\r\n        if (isPlayer)\r\n        { \r\n            if (_stakedBalances[account] != adjustedStake){\r\n                emit Adjust(account, _stakedBalances[account], adjustedStake);\r\n                _stakedBalances[account] = adjustedStake;\r\n            }\r\n        }\r\n\r\n        require (unstakeTime > (block.timestamp + 86100),\"$BATTLE: minimum stake time 23 hours 55 min\"); \r\n        require (unstakeTime >= _stakeExpireTime[account], \"$BATTLE: new stake time cannot be shorter\");\r\n        require (_balances[account] >= amount, \"$BATTLE: stake exceeds available balance\");\r\n        if (_stakedBalances[account] == 0) require (amount > 0, \"$BATTLE: cannot stake 0 tokens\");\r\n\r\n        _balances[account] = _balances[account] - amount;\r\n        _balances[_stakingContract] = _balances[_stakingContract] + amount;\r\n        _stakedBalances[account] = _stakedBalances[account] + amount;\r\n\r\n        _stakeExpireTime[account] = unstakeTime;\r\n        _stakeBeginTime[account] = block.timestamp;\r\n\r\n        emit Stake(account, amount, block.timestamp, unstakeTime);\r\n    }\r\n\r\n    function unstake(address account, uint256 unstakeAmount, bool isPlayer, uint256 adjustedStake) external override {\r\n        require (_msgSender() == _stakingContract, \"$BATTLE: must unstake through staking contract\");\r\n        require (account != address(0), \"$BATTLE: cannot unstake zero address\");\r\n        require(unstakeAmount > 0, \"$BATTLE: cannot unstake zero tokens\");\r\n\r\n        if (isPlayer)\r\n        { \r\n            if (_stakedBalances[account] != adjustedStake){\r\n                emit Adjust(account, _stakedBalances[account], adjustedStake);\r\n                _stakedBalances[account] = adjustedStake;\r\n            }\r\n        }\r\n\r\n        require(unstakeAmount <= _stakedBalances[account], \"$BATTLE: unstake exceeds staked balance\");\r\n        \r\n        _stakedBalances[account] = _stakedBalances[account] - unstakeAmount;\r\n        _balances[account] = _balances[account] + unstakeAmount;\r\n        _balances[_stakingContract] = _balances[_stakingContract] - unstakeAmount;\r\n        \r\n        emit Unstake(account, unstakeAmount, _stakedBalances[account]);\r\n    }\r\n\r\n    function sync(address account, uint256 adjustedStake) external override {\r\n        require (_msgSender() == _stakingContract, \"$BATTLE: unauthorized\");\r\n        require (account != address(0), \"$BATTLE: cannot sync zero address\");\r\n        emit Adjust(account, _stakedBalances[account], adjustedStake);\r\n        _stakedBalances[account] = adjustedStake;\r\n    }\r\n\r\n    function toggleStaking() external override onlyMultiSig {\r\n        require (_stakingContract != address(0), \"$BATTLE: staking contract not set\");\r\n        if (stakingEnabled == true) stakingEnabled = false;\r\n        else stakingEnabled = true;\r\n        emit ToggleStaking(stakingEnabled);\r\n    }\r\n\r\n    function setStakingContract(address addr) external override onlyMultiSig {\r\n        require(addr != address(0), \"$BATTLE: cannot be zero address\");\r\n        _stakingContract = payable(addr);\r\n        emit SetStakingContract(addr);\r\n    }\r\n\r\n    function getStakingContract() external view override returns (address) {\r\n        return _stakingContract;\r\n    }\r\n\r\n    /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * =====  Minting  =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    function freezeMint(uint256 timestamp) external override onlyMultiSig {\r\n        require (timestamp > mintLockTime, \"$BATTLE: cannot reduce lock time\");\r\n        mintLocked = true;\r\n        mintLockTime = timestamp;\r\n\r\n        emit FreezeMint(mintLockTime);\r\n    }\r\n\r\n    function thawMint() external override onlyMultiSig {\r\n        require (block.timestamp >= mintLockTime, \"$BATTLE: still frozen\");\r\n        mintLocked = false;\r\n        mintLockTime = block.timestamp + 86400;\r\n\r\n        emit ThawMint(mintLockTime);\r\n    } \r\n\r\n    function mint(uint256 amount, address recipient) external override onlyMultiSig {\r\n        require (block.timestamp > mintLockTime && mintLocked == false, \"$BATTLE: still frozen\");\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        emit Transfer(address(0), recipient, amount);\r\n    }\r\n    \r\n    /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * =====    Tax    =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    function setBuyTax(uint8 newTax) external override onlyMultiSig {\r\n        require (newTax <= 10, \"$BATTLE: tax cannot exceed 10%\");\r\n        emit ChangeBuyTax(_buyTax, newTax);\r\n        _buyTax = newTax;\r\n    }\r\n\r\n    function setSellTax(uint8 newTax) external override onlyMultiSig {\r\n        require (newTax <= 10, \"$BATTLE: tax cannot exceed 10%\");\r\n        emit ChangeSellTax(_sellTax, newTax);\r\n        _sellTax = newTax;\r\n    }\r\n\r\n    function setRewards(uint8 newRewards) external override onlyMultiSig {\r\n        require (newRewards >= 20, \"$BATTLE: rewards minimum 20%\");\r\n        require (newRewards <= 100, \"$BATTLE: rewards maximum 100%\");\r\n        emit ChangeRewards(_stakingRewards, newRewards);\r\n        _stakingRewards = newRewards;\r\n    }\r\n\r\n    function setPool(address addr) external override onlyMultiSig {\r\n        require(addr != address(0), \"$BATTLE: zero address cannot be pool\");\r\n        _isPool[addr] = true;\r\n        emit SetPool(addr);\r\n    }\r\n    \r\n    function isPool(address addr) external view override returns (bool){\r\n        return _isPool[addr];\r\n    }\r\n\r\n     /**\r\n     * =====================\r\n     * =====================\r\n     * =====           =====\r\n     * =====  Utility  =====\r\n     * =====           =====\r\n     * =====================\r\n     * =====================\r\n     */\r\n    function _transferETH(uint256 amount, address payable _to) private {\r\n        (bool sent,) = _to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function _tokensToETH(uint256 amount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniV2Router.WETH();\r\n\r\n        _approve(address(this), _uniRouter, amount);\r\n        UniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n\r\n        if (address(this).balance > 0) \r\n        {\r\n            if (stakingEnabled) {\r\n                uint stakingShare = address(this).balance * _stakingRewards / 100;\r\n                _transferETH(stakingShare, _stakingContract);\r\n            }\r\n            _transferETH(address(this).balance, _vault);\r\n        }\r\n    }\r\n    \r\n    function failsafeTokenSwap(uint256 amount) external override onlyMultiSig {\r\n        _tokensToETH(amount);\r\n        emit FailsafeTokenSwap(amount);\r\n    }\r\n\r\n    function failsafeETHtransfer() external override onlyMultiSig {\r\n        emit FailsafeETHTransfer(address(this).balance);\r\n        (bool sent,) = _msgSender().call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function timeToBattle(uint256 gasLimit) external onlyMultiSig {\r\n        require(!_trading, \"$BATTLE: trading already enabled\");\r\n        _trading = true;\r\n        _timeWalletQuantityLimit = block.timestamp + 30 minutes;\r\n        _timeTxCountLimit = block.timestamp + 5 minutes;\r\n        _gasLimit = gasLimit;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiSig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"Adjust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"ChangeBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevRew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRew\",\"type\":\"uint256\"}],\"name\":\"ChangeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"ChangeSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailsafeETHTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailsafeTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintLockTime\",\"type\":\"uint256\"}],\"name\":\"FreezeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"isNowPool\",\"type\":\"address\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingCon\",\"type\":\"address\"}],\"name\":\"SetStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeExpire\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintLockTime\",\"type\":\"uint256\"}],\"name\":\"ThawMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ToggleStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmountRemaining\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeETHtransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"failsafeTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRewards\",\"type\":\"uint8\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPlayer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"adjustedStake\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adjustedStake\",\"type\":\"uint256\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thawMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"timeToBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPlayer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"adjustedStake\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BattleFish", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000053accb7934126a62403dced9b557e78f7db1acb40000000000000000000000008ed852dbe439284b6e864fd71e40c1aad0767850", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de00bab191865c3490739bbe2c0f63fd9967d3f0d6cc2168c450117313fff2ce"}]}