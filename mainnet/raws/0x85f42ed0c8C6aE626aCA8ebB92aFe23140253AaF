{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract TokenVesting is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMath for uint16;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant SECONDS_PER_WEEK = 604800;\\n\\n    struct VestingSchedule {\\n        bool isValid;\\n        uint256 startTime;\\n        uint256 amount;\\n        uint16 duration;\\n        uint16 delay;\\n        uint16 weeksClaimed;\\n        uint256 totalClaimed;\\n        address recipient;\\n    }\\n\\n    event VestingAdded(\\n        address indexed recipient,\\n        uint256 vestingId,\\n        uint256 startTime,\\n        uint256 amount,\\n        uint16 duration,\\n        uint16 delay\\n    );\\n    event VestingTokensClaimed(address indexed recipient, uint256 vestingId, uint256 amountClaimed);\\n    event VestingRemoved(address recipient, uint256 vestingId, uint256 amountVested, uint256 amountNotVested);\\n    event VestingRecipientUpdated(uint256 vestingId, address oldRecipient, address newRecipient);\\n    event TokenWithdrawn(address indexed recipient, uint256 tokenAmount);\\n\\n    IERC20 public immutable token;\\n\\n    mapping(uint256 => VestingSchedule) public vestingSchedules;\\n    mapping(address => uint256) private activeVesting;\\n    uint256 public totalVestingCount;\\n    uint256 public totalVestingAmount;\\n    bool public allocInitialized;\\n\\n    constructor(IERC20 _token, address aragonAgent) {\\n        require(address(aragonAgent) != address(0), \\\"invalid aragon agent address\\\");\\n        require(address(_token) != address(0), \\\"invalid token address\\\");\\n        token = _token;\\n        _transferOwnership(aragonAgent);\\n    }\\n\\n    function addVestingSchedule(\\n        address _recipient,\\n        uint256 _startTime,\\n        uint256 _amount,\\n        uint16 _durationInWeeks,\\n        uint16 _delayInWeeks\\n    ) public onlyOwner {\\n        require(_amount <= token.balanceOf(address(this)) - totalVestingAmount, \\\"Insufficient token balance\\\");\\n        require(activeVesting[_recipient] == 0, \\\"active vesting already exists\\\");\\n\\n        uint256 amountVestedPerWeek = _amount.div(_durationInWeeks);\\n        require(amountVestedPerWeek > 0, \\\"amountVestedPerWeek > 0\\\");\\n\\n        VestingSchedule memory vesting = VestingSchedule({\\n            isValid: true,\\n            startTime: _startTime == 0 ? currentTime() : _startTime,\\n            amount: _amount,\\n            duration: _durationInWeeks,\\n            delay: _delayInWeeks,\\n            weeksClaimed: 0,\\n            totalClaimed: 0,\\n            recipient: _recipient\\n        });\\n\\n        totalVestingCount++;\\n        vestingSchedules[totalVestingCount] = vesting;\\n        activeVesting[_recipient] = totalVestingCount;\\n        emit VestingAdded(_recipient, totalVestingCount, vesting.startTime, _amount, _durationInWeeks, _delayInWeeks);\\n        totalVestingAmount += _amount;\\n    }\\n\\n    function getActiveVesting(address _recipient) public view returns (uint256) {\\n        return activeVesting[_recipient];\\n    }\\n\\n    function calculateVestingClaim(uint256 _vestingId) public view returns (uint16, uint256) {\\n        require(_vestingId > 0, \\\"invalid vestingId\\\");\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingId];\\n        return _calculateVestingClaim(vestingSchedule);\\n    }\\n\\n    function _calculateVestingClaim(VestingSchedule storage vestingSchedule) internal view returns (uint16, uint256) {\\n        if (currentTime() < vestingSchedule.startTime || !vestingSchedule.isValid) {\\n            return (0, 0);\\n        }\\n\\n        uint256 elapsedTime = currentTime().sub(vestingSchedule.startTime);\\n        uint256 elapsedWeeks = elapsedTime.div(SECONDS_PER_WEEK);\\n\\n        if (elapsedWeeks < vestingSchedule.delay) {\\n            return (uint16(elapsedWeeks), 0);\\n        }\\n\\n        if (elapsedWeeks >= vestingSchedule.duration + vestingSchedule.delay) {\\n            uint256 remainingVesting = vestingSchedule.amount.sub(vestingSchedule.totalClaimed);\\n            return (vestingSchedule.duration, remainingVesting);\\n        } else {\\n            uint16 claimableWeeks = uint16(elapsedWeeks.sub(vestingSchedule.delay));\\n            uint16 weeksVested = uint16(claimableWeeks.sub(vestingSchedule.weeksClaimed));\\n            uint256 amountVestedPerWeek = vestingSchedule.amount.div(uint256(vestingSchedule.duration));\\n            uint256 amountVested = uint256(weeksVested.mul(amountVestedPerWeek));\\n            return (weeksVested, amountVested);\\n        }\\n    }\\n\\n    function claimVestedTokens() external {\\n        uint256 _vestingId = activeVesting[msg.sender];\\n        require(_vestingId > 0, \\\"no active vesting found\\\");\\n\\n        uint16 weeksVested;\\n        uint256 amountVested;\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingId];\\n\\n        require(vestingSchedule.recipient == msg.sender, \\\"only recipient can claim\\\");\\n\\n        (weeksVested, amountVested) = _calculateVestingClaim(vestingSchedule);\\n        require(amountVested > 0, \\\"amountVested is 0\\\");\\n\\n        vestingSchedule.weeksClaimed = uint16(vestingSchedule.weeksClaimed.add(weeksVested));\\n        vestingSchedule.totalClaimed = uint256(vestingSchedule.totalClaimed.add(amountVested));\\n\\n        require(token.balanceOf(address(this)) >= amountVested, \\\"no tokens\\\");\\n        token.safeTransfer(vestingSchedule.recipient, amountVested);\\n        emit VestingTokensClaimed(vestingSchedule.recipient, _vestingId, amountVested);\\n    }\\n\\n    function removeVestingSchedule(uint256 _vestingId) external onlyOwner {\\n        require(_vestingId > 0, \\\"invalid vestingId\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingId];\\n        require(activeVesting[vestingSchedule.recipient] == _vestingId, \\\"inactive vesting\\\");\\n        address recipient = vestingSchedule.recipient;\\n        uint16 weeksVested;\\n        uint256 amountVested;\\n        (weeksVested, amountVested) = _calculateVestingClaim(vestingSchedule);\\n\\n        uint256 amountNotVested = (vestingSchedule.amount.sub(vestingSchedule.totalClaimed)).sub(amountVested);\\n\\n        vestingSchedule.isValid = false;\\n        activeVesting[recipient] = 0;\\n\\n        require(token.balanceOf(address(this)) >= amountVested, \\\"not enough balance\\\");\\n        token.safeTransfer(recipient, amountVested);\\n\\n        totalVestingAmount -= amountNotVested;\\n        emit VestingRemoved(recipient, _vestingId, amountVested, amountNotVested);\\n    }\\n\\n    function updateVestingRecipient(uint256 _vestingId, address recipient) external onlyOwner {\\n        require(_vestingId > 0, \\\"invalid vestingId\\\");\\n        require(activeVesting[recipient] == 0, \\\"recipient has an active vesting\\\");\\n        require(address(recipient) != address(0), \\\"invalid recipient address\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingId];\\n        require(activeVesting[vestingSchedule.recipient] == _vestingId, \\\"inactive vesting\\\");\\n        activeVesting[vestingSchedule.recipient] = 0;\\n\\n        emit VestingRecipientUpdated(_vestingId, vestingSchedule.recipient, recipient);\\n\\n        vestingSchedule.recipient = recipient;\\n        activeVesting[recipient] = _vestingId;\\n    }\\n\\n    function currentTime() public view virtual returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp;\\n    }\\n\\n    function tokensVestedPerWeek(uint256 _vestingId) public view returns (uint256) {\\n        require(_vestingId > 0, \\\"invalid vestingId\\\");\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingId];\\n        return vestingSchedule.amount.div(uint256(vestingSchedule.duration));\\n    }\\n\\n    function withdrawToken(address recipient, uint256 amount) external onlyOwner {\\n        require(recipient != address(0), \\\"invalid token address\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        require(amount <= balance, \\\"amount should not exceed balance\\\");\\n        token.safeTransfer(recipient, amount);\\n        emit TokenWithdrawn(recipient, amount);\\n    }\\n\\n    function initializeAllocation(uint256 startTime) external onlyOwner {\\n        require(!allocInitialized, \\\"allocation already initialized.\\\");\\n\\n        // Early Contributors\\n        addVestingSchedule(0x07A8c46530ADf39bbd2791ac5f5e477011C42A9f, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0xa23CB57ccC903e18dd5B4399826B7FC8c68D0C9C, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0xC31cc7B4a202eAFfd571D0895033ffa7986d181f, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x84a9a19dC122e472493E3E21d25469Be8b3d47Fc, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x5132d87c57598c4d10A9ab188DdCCc061531cc99, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0x29488965c47A61f476a798B40a669cf7cdBcF805, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0xb2695290A04d2a61b1fE6c89EaF9298B3534d3bD, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x9E59Ea877e5aDB95cF6a82618a910F855568d6ff, startTime, 4768000 * 10**18, 50, 0);\\n        addVestingSchedule(0xa665a0507Ad4B0571B12B1f59FA7e8d2BF63C65F, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0xC6b6896A9e0131820b10B586dadBAc4E9ACfb86A, startTime, 596000 * 10**18, 50, 0);\\n        addVestingSchedule(0x32802F989B4348A51DD0E61D23B78BE1a0543469, startTime, 1788000 * 10**18, 50, 0);\\n        addVestingSchedule(0x09443af3e8bf03899A40d6026480fAb0E44D518E, startTime, 1192000 * 10**18, 50, 0);\\n        addVestingSchedule(0xCA63CD425d0e78fFE05a84c330Bfee691242113d, startTime, 2384000 * 10**18, 50, 0);\\n        addVestingSchedule(0x3eF7f258816F6e2868566276647e3776616CBF4d, startTime, 23840000 * 10**18, 50, 0);\\n        addVestingSchedule(0x1e550B93a628Dc2bD7f6A592f23867241e562AeE, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0x3BB9378a2A29279aA82c00131a6046aa0b5F6A79, startTime, 17880000 * 10**18, 50, 0);\\n        addVestingSchedule(0x6AB0a3F3B01653295c0DC2eCeD5c4EaD099c3f9D, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x31476BE87e39722488b9B228284B1Fe0A6deD88c, startTime, 23840000 * 10**18, 50, 0);\\n        addVestingSchedule(0xB66e29158d18c34097a199624e5B126703B346C3, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x33f4BeBbc43Bc5725F4eD64629E7022a46eD9146, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0x61F85f43e275Fda8b5E122C7738Fe188C92385c0, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0xfE8420a2758c303ADC5f6C3125FDa7E9eD96A1E3, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x2630b80F4fD862aca4010fBFeFA2081FC631D20C, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x58791B7d2CFC8310f7D2032B99B3e9DfFAAe4f17, startTime, 1192000 * 10**18, 50, 0);\\n        addVestingSchedule(0xDD1b2aeD364f3532A90dAcB5d9ba8D47b11Cdea3, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x58d0f3dA9C97dE3c39f481e146f3568081d328a2, startTime, 1788000 * 10**18, 50, 0);\\n        addVestingSchedule(0xC71F1e087AadfBaE3e8578b5eFAFDeC8aFA95a16, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x683E0fCB25A2A84Bf9f5850a47d88Ad9c38C2a2f, startTime, 17880000 * 10**18, 50, 0);\\n        addVestingSchedule(0x1856D5e4767737a4051ae61c7852acdF8DFFb27b, startTime, 8940000 * 10**18, 50, 0);\\n        addVestingSchedule(0xDeCf6cC45e4F1816fC75C3b2AeD1e7BF02C43E52, startTime, 596000 * 10**18, 50, 0);\\n        addVestingSchedule(0x77aB3a45Fb6A48Ed390ae75D7812e4BD8ACe5A17, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x99F229481Bbb6245BA2763f224f733A7Cd784f0c, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x55E1e020Ca8f589b691Dbc3E9CBCe8845a400f97, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x4caeDdE6188c8c452556A141aA463999b4cF2ffc, startTime, 1788000 * 10**18, 50, 0);\\n        addVestingSchedule(0xb9FeCf6dC7F8891721d98825De85516e67922772, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0xf83A22e3eF017AdA8f4DCE1D534532d6e7000795, startTime, 23840000 * 10**18, 50, 0);\\n        addVestingSchedule(0xDA51f23515Bf0FF319FfD5727e22C1Aa114B392C, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0xC7fC3d9820c9803d788369E9129ACA7C16abe96D, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0xb8F03E0a03673B5e9E094880EdE376Dc2caF4286, startTime, 11920000 * 10**18, 50, 0);\\n        addVestingSchedule(0x0cf02f3a7B424dD8AA57A550B3c0362aa0146E95, startTime, 2980000 * 10**18, 50, 0);\\n        addVestingSchedule(0x05AE0683d8B39D13950c053E70538f5810737bC5, startTime, 1192000 * 10**18, 50, 0);\\n        addVestingSchedule(0xf2d876D0621Ee340aFcD37ea6F49733982b08bC2, startTime, 23840000 * 10**18, 50, 0);\\n        addVestingSchedule(0x1887D97F9C875108Aa6bE109B282f87A666472f2, startTime, 3576000 * 10**18, 50, 0);\\n        addVestingSchedule(0xB7A210a2786fF2B22786e4C082d2a6FF6775CB68, startTime, 5960000 * 10**18, 50, 0);\\n        addVestingSchedule(0x480F32b9B5BBCD188501C9FA74FE23D6Eb037BDf, startTime, 5960000 * 10**18, 50, 0);\\n\\n        // Ecosystem Development\\n        addVestingSchedule(0xdBB0FfAFD38A61A1C06BA0C40761355F9F50a01E, startTime, 2384000 * 10**18, 104, 0);\\n        addVestingSchedule(0xe4382f06191cb158515A763E2ED5c573d7b3E4C0, startTime, 1192000 * 10**18, 104, 0);\\n        addVestingSchedule(0xB9BbB220D5eB660BBB634805dfF8cBDacb732cB4, startTime, 4768000 * 10**18, 104, 0);\\n        addVestingSchedule(0xf4a3F5bC8FAD4C49f0a0102b410Dcbfa29406D50, startTime, 5960000 * 10**18, 104, 0);\\n        addVestingSchedule(0x4Eee8BA6724Ca5cEc0E1433B9f613936C774b9F5, startTime, 11920000 * 10**18, 104, 0);\\n\\n        // Advisors\\n        addVestingSchedule(0x3cEaFDFcA243AEfef6c2360B549B22b9c118744e, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0xa11f5Aecf3D5d5A17FF16dA1dDdc2bA43A6c5Fe1, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0x747dfb7D6D27671B4e3E98087f00e6B023d0AAb7, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0xDA223201df90Fe53CA5C9282BE932F876F6FA2F1, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0xaBBDe42239e98FE42e732961F25cf0cfFF68e107, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0xd051a1170e3c336D95397208ae58Fa4b22e92A97, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0x9796260c3D8E52f2c053D27Dcb382b7f2a504522, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0xCc7357203C0D1C0D64eD7C5605a495C8FBEBAC8c, startTime, 2980000 * 10**18, 104, 12);\\n        addVestingSchedule(0x88C3531B54Dde2438b10107e352551521B4319bD, startTime, 2980000 * 10**18, 104, 12);\\n\\n        // ASM Gnosis Safe\\n        addVestingSchedule(0xEcbc5C456D9508A441254A6dA7d51C693A206eCf, startTime, 381440000 * 10**18, 104, 12);\\n\\n        allocInitialized = true;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aragonAgent\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"delay\",\"type\":\"uint16\"}],\"name\":\"VestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"VestingRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNotVested\",\"type\":\"uint256\"}],\"name\":\"VestingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"VestingTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_durationInWeeks\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_delayInWeeks\",\"type\":\"uint16\"}],\"name\":\"addVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"calculateVestingClaim\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getActiveVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"initializeAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"removeVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"tokensVestedPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"updateVestingRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"delay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"weeksClaimed\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000823556202e86763853b40e9cde725f412e29468900000000000000000000000020d9c1e8a1efe490d1e0ef4dfa47b6390266b537", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}