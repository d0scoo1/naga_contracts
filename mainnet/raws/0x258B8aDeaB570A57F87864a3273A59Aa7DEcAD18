{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LPStakingRewardsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./LPStakingRewards.sol\\\";\\n\\ncontract LPStakingRewardsFactory is Ownable {\\n    address public immutable treasuryAddress;\\n    mapping(address => address) public stakingRewards;\\n\\n    event LPStakingRewardsCreated(\\n        address indexed stakingRewards,\\n        address indexed stakingToken,\\n        address rewardsToken,\\n        uint256 rewardRate,\\n        uint256 periodFinish\\n    );\\n\\n    constructor(address _treasuryAddress) {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    function createLPStakingRewards(\\n        address _stakingToken,\\n        address _rewardsToken,\\n        uint256 _rewardRate,\\n        uint256 _periodFinish\\n    ) external onlyOwner {\\n        require(\\n            stakingRewards[_stakingToken] == address(0) ||\\n                LPStakingRewards(stakingRewards[_stakingToken])\\n                    .lastTimeRewardApplicable() <\\n                block.timestamp,\\n            \\\"already exists\\\"\\n        );\\n\\n        LPStakingRewards rewards = new LPStakingRewards(\\n            treasuryAddress,\\n            _stakingToken,\\n            _rewardsToken,\\n            _rewardRate,\\n            _periodFinish\\n        );\\n\\n        rewards.transferOwnership(msg.sender);\\n\\n        stakingRewards[_stakingToken] = address(rewards);\\n\\n        emit LPStakingRewardsCreated(\\n            address(rewards),\\n            _stakingToken,\\n            _rewardsToken,\\n            _rewardRate,\\n            _periodFinish\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LPStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on https://github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./OpenZeppelin/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20Min.sol\\\";\\nimport \\\"./interfaces/IVaultMin.sol\\\";\\n\\ncontract LPStakingRewards is Ownable {\\n    IVaultMin public immutable treasury;\\n    IERC20Min public immutable stakingToken;\\n    address public immutable rewardsToken;\\n    uint256 public immutable periodFinish;\\n\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(\\n        address _treasuryAddress,\\n        address _stakingToken,\\n        address _rewardsToken,\\n        uint256 _rewardRate,\\n        uint256 _periodFinish\\n    ) {\\n        treasury = IVaultMin(_treasuryAddress);\\n        stakingToken = IERC20Min(_stakingToken);\\n        rewardsToken = _rewardsToken;\\n        rewardRate = _rewardRate;\\n        periodFinish = _periodFinish;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\\n                rewardRate *\\n                1e18) / _totalSupply);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            ((_balances[account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\\n            rewards[account];\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n\\n        _;\\n    }\\n\\n    function stake(uint256 _amount) external updateReward(msg.sender) {\\n        require(_amount > 0, \\\"cannot stake 0\\\");\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        _totalSupply += _amount;\\n        _balances[msg.sender] += _amount;\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external updateReward(msg.sender) {\\n        require(_amount > 0, \\\"cannot withdraw 0\\\");\\n        _totalSupply -= _amount;\\n        _balances[msg.sender] -= _amount;\\n        stakingToken.transfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    function getReward() external updateReward(msg.sender) returns (uint256) {\\n        uint256 reward = rewards[msg.sender];\\n        rewards[msg.sender] = 0;\\n        treasury.transfer(rewardsToken, msg.sender, reward);\\n        emit RewardPaid(msg.sender, reward);\\n        return reward;\\n    }\\n\\n    function setRewardRate(uint256 _rewardRate)\\n        external\\n        updateReward(address(0))\\n        onlyOwner\\n    {\\n        rewardRate = _rewardRate;\\n        emit RewardRateSet(rewardRate);\\n    }\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardRateSet(uint256 rewardRate);\\n}\\n\"\r\n    },\r\n    \"contracts/OpenZeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Min.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Min {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultMin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\ninterface IVaultMin {\\n    function transfer(address _token, address _to, uint256 _value) external;\\n}\"\r\n    },\r\n    \"contracts/OpenZeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"LPStakingRewardsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodFinish\",\"type\":\"uint256\"}],\"name\":\"createLPStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LPStakingRewardsFactory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000948f4796358c73f9598e7399d2971b6fb8fea9be", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}