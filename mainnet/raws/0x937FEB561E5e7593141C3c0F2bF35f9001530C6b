{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: contracts/SmolGame.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract SmolGame is Ownable {\r\n    address payable public treasury;\r\n    uint256 public serviceFeeWei;\r\n\r\n    function _payServiceFee() internal {\r\n        if (serviceFeeWei > 0) {\r\n            require(msg.value >= serviceFeeWei, 'not able to pay service fee');\r\n            address payable _treasury = treasury == address(0)\r\n            ? payable(owner())\r\n            : treasury;\r\n            (bool success, ) = _treasury.call{ value: serviceFeeWei }('');\r\n            require(success, 'could not pay service fee');\r\n        }\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = payable(_treasury);\r\n    }\r\n\r\n    function setServiceFeeWei(uint256 _feeWei) external onlyOwner {\r\n        serviceFeeWei = _feeWei;\r\n    }\r\n\r\n    function withdrawTokens(address _tokenAddy, uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        IERC20 _token = IERC20(_tokenAddy);\r\n        _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\r\n        require(_amount > 0, 'make sure there is a balance available to withdraw');\r\n        _token.transfer(owner(), _amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 _amountWei) external onlyOwner {\r\n        _amountWei = _amountWei == 0 ? address(this).balance : _amountWei;\r\n        payable(owner()).call{ value: _amountWei }('');\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n// File: contracts/smoltingvfc.sol\r\n\r\n/**************************************************************\r\nsmolting classic (SMOLC)\r\nWS: https://smoltingclassic.com/\r\n*************************************************************/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SmoltingClassic is ERC20, Ownable, SmolGame, VRFConsumerBaseV2 {\r\n    uint256 private constant ONE_HOUR = 60 * 60;\r\n    uint256 private constant PERCENT_DENOMENATOR = 1000;\r\n    address private constant DEAD = address(0xdead);\r\n\r\n    VRFCoordinatorV2Interface vrfCoord;\r\n    LinkTokenInterface link;\r\n    uint64 private _vrfSubscriptionId;\r\n    bytes32 private _vrfKeyHash;\r\n    uint16 private _vrfNumBlocks = 3;\r\n    uint32 private _vrfCallbackGasLimit = 600000;\r\n    mapping(uint256 => address) private _wagerInit;\r\n    mapping(address => uint256) private _wagerInitAmount;\r\n    uint256 private _wagerBalance;\r\n\r\n    uint256 public coinFlipMinBalancePerc = (PERCENT_DENOMENATOR * 50) / 100; // 50% user's balance\r\n    uint256 public coinFlipWinPercentage = (PERCENT_DENOMENATOR * 95) / 100; // 95% wager amount\r\n    uint256 public coinFlipMinWagerAbsolute;\r\n    uint256 public coinFlipMaxWagerAbsolute;\r\n    uint256 public coinFlipsWon;\r\n    uint256 public coinFlipsLost;\r\n    uint256 public coinFlipAmountWon;\r\n    uint256 public coinFlipAmountLost;\r\n    mapping(address => uint256) public coinFlipsUserWon;\r\n    mapping(address => uint256) public coinFlipsUserLost;\r\n    mapping(address => uint256) public coinFlipUserAmountWon;\r\n    mapping(address => uint256) public coinFlipUserAmountLost;\r\n    mapping(address => bool) public lastCoinFlipWon;\r\n\r\n    uint256 public coinFlipMinWhaleWagerAbsolute = 500 * 10**18;\r\n    uint256 public coinFlipMaxWhaleWagerAbsolute;\r\n    uint64 public deadblocks = 2;\r\n    mapping(address => bool) public isCoinFlipWhale;\r\n    bool private _addingLP;\r\n\r\n    mapping(address => uint256) public lastGameWin;\r\n    uint256 public gameWinSellPenaltyTimeSeconds = 60 * 60; // 1 hour\r\n    uint256 public gameWinSellPenaltyMultiplier = 6;\r\n\r\n    uint256 public minTransferForSideEffectsToRecipient;\r\n\r\n    uint256 public biggestBuyRewardPercentage = (PERCENT_DENOMENATOR * 50) / 100; // 50%\r\n    mapping(uint256 => address) public biggestBuyer;\r\n    mapping(uint256 => uint256) public biggestBuyerAmount;\r\n    mapping(uint256 => uint256) public biggestBuyerPaid;\r\n\r\n    address private _lpReceiver;\r\n    address private _nukeRecipient = DEAD;\r\n    uint256 public lpNukeBuildup;\r\n    uint256 public nukePercentPerSell = (PERCENT_DENOMENATOR * 5) / 100; // 5%\r\n    bool public lpNukeEnabled = true;\r\n\r\n    mapping(address => bool) private _isTaxExcluded;\r\n    mapping(address => bool) private _isLimitless;\r\n\r\n    uint256 public taxLp = (PERCENT_DENOMENATOR * 3) / 100; // 3%\r\n    uint256 public taxBuyer = (PERCENT_DENOMENATOR * 1) / 100; // 1%\r\n\r\n    uint256 public maxTx = (PERCENT_DENOMENATOR * 1) / 100; //1%\r\n    uint256 public maxWallet = (PERCENT_DENOMENATOR * 1) / 100; //2%\r\n    bool public enableLimits = true;\r\n\r\n    uint256 public sellTaxUnwageredMultiplier = 4; // init 16% (4% * 4)\r\n    uint256 private _totalTax;\r\n    bool private _taxesOff;\r\n    mapping(address => bool) public canSellWithoutElevation;\r\n\r\n    uint256 private _liquifyRate = (PERCENT_DENOMENATOR * 1) / 100; // 1%\r\n    uint256 public launchTime;\r\n    uint256 private _launchBlock;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    mapping(address => bool) private _isBot;\r\n\r\n    mapping(address => bool) public isGameContract;\r\n\r\n    bool private _swapEnabled = true;\r\n    bool private _swapping = false;\r\n\r\n    event InitiatedCoinFlip(\r\n        address indexed wagerer,\r\n        uint256 indexed requestId,\r\n        uint256 amountWagered\r\n    );\r\n    event SettledCoinFlip(\r\n        address indexed wagerer,\r\n        uint256 indexed requestId,\r\n        uint256 amountWagered,\r\n        bool didUserWin\r\n    );\r\n\r\n    modifier onlyGame() {\r\n        require(isGameContract[_msgSender()], 'not a smol game');\r\n        _;\r\n    }\r\n\r\n    modifier swapLock() {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    constructor(\r\n        address _vrfCoordinator,\r\n        uint64 _subscriptionId,\r\n        address _linkToken,\r\n        bytes32 _keyHash\r\n    ) ERC20('Smolting Classic', 'SMOLC') VRFConsumerBaseV2(_vrfCoordinator) {\r\n        _mint(address(this), 1_000_000 * 10**18);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _setTotalTax();\r\n        _isTaxExcluded[address(this)] = true;\r\n        _isTaxExcluded[msg.sender] = true;\r\n        _isLimitless[address(this)] = true;\r\n        _isLimitless[msg.sender] = true;\r\n\r\n        vrfCoord = VRFCoordinatorV2Interface(_vrfCoordinator);\r\n        link = LinkTokenInterface(_linkToken);\r\n        _vrfSubscriptionId = _subscriptionId;\r\n        _vrfKeyHash = _keyHash;\r\n    }\r\n\r\n    // _percent: 1 == 0.1%, 1000 = 100%\r\n    function lnchtkn(uint16 _percent) external payable onlyOwner {\r\n        require(_percent <= PERCENT_DENOMENATOR, 'must be between 0-100%');\r\n        require(launchTime == 0, 'already launched');\r\n        require(_percent == 0 || msg.value > 0, 'need ETH for initial LP');\r\n        deadblocks = 0;\r\n        _addingLP = true;\r\n\r\n        uint256 _lpSupply = (totalSupply() * _percent) / PERCENT_DENOMENATOR;\r\n        uint256 _leftover = totalSupply() - _lpSupply;\r\n        if (_lpSupply > 0) {\r\n            _addLp(_lpSupply, msg.value);\r\n        }\r\n        if (_leftover > 0) {\r\n            _transfer(address(this), owner(), _leftover);\r\n        }\r\n        launchTime = block.timestamp;\r\n        _launchBlock = block.number;\r\n        _addingLP = false;\r\n    }\r\n\r\n    // coinFlipMinBalancePerc <= _percent <= 1000\r\n    function flipCoin(uint16 _percent) external payable {\r\n        require(balanceOf(msg.sender) > 0, 'must have a bag to wager');\r\n        require(\r\n            _percent >= coinFlipMinBalancePerc && _percent <= PERCENT_DENOMENATOR,\r\n            'must wager between the minimum and your entire bag'\r\n        );\r\n        uint256 _finalWagerAmount = (balanceOf(msg.sender) * _percent) /\r\n        PERCENT_DENOMENATOR;\r\n\r\n        if (isCoinFlipWhale[msg.sender]) {\r\n            require(\r\n                _finalWagerAmount >= coinFlipMinWhaleWagerAbsolute,\r\n                'does not meet minimum whale amount requirements'\r\n            );\r\n            require(\r\n                coinFlipMaxWhaleWagerAbsolute == 0 ||\r\n                _finalWagerAmount <= coinFlipMaxWhaleWagerAbsolute,\r\n                'exceeds maximum whale amount requirements'\r\n            );\r\n        } else {\r\n            require(\r\n                _finalWagerAmount >= coinFlipMinWagerAbsolute,\r\n                'does not meet minimum amount requirements'\r\n            );\r\n            require(\r\n                coinFlipMaxWagerAbsolute == 0 ||\r\n                _finalWagerAmount <= coinFlipMaxWagerAbsolute,\r\n                'exceeds maximum amount requirements'\r\n            );\r\n        }\r\n        require(_wagerInitAmount[msg.sender] == 0, 'already initiated');\r\n\r\n        _transfer(msg.sender, address(this), _finalWagerAmount);\r\n        _wagerBalance += _finalWagerAmount;\r\n\r\n        uint256 requestId = vrfCoord.requestRandomWords(\r\n            _vrfKeyHash,\r\n            _vrfSubscriptionId,\r\n            _vrfNumBlocks,\r\n            _vrfCallbackGasLimit,\r\n            uint16(1)\r\n        );\r\n\r\n        _wagerInit[requestId] = msg.sender;\r\n        _wagerInitAmount[msg.sender] = _finalWagerAmount;\r\n        canSellWithoutElevation[msg.sender] = true;\r\n\r\n        _payServiceFee();\r\n        emit InitiatedCoinFlip(msg.sender, requestId, _finalWagerAmount);\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\r\n    internal\r\n    override\r\n    {\r\n        _settleCoinFlip(requestId, randomWords[0]);\r\n    }\r\n\r\n    function manualFulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) external onlyOwner {\r\n        _settleCoinFlip(requestId, randomWords[0]);\r\n    }\r\n\r\n    function _settleCoinFlip(uint256 requestId, uint256 randomNumber) private {\r\n        address _user = _wagerInit[requestId];\r\n        require(_user != address(0), 'coin flip record does not exist');\r\n\r\n        uint256 _amountWagered = _wagerInitAmount[_user];\r\n        uint256 _amountToWin = (_amountWagered * coinFlipWinPercentage) /\r\n        PERCENT_DENOMENATOR;\r\n        bool _didUserWin = randomNumber % 2 == 0;\r\n\r\n        if (_didUserWin) {\r\n            _transfer(address(this), _user, _amountWagered);\r\n            _mint(_user, _amountToWin);\r\n            coinFlipsWon++;\r\n            coinFlipAmountWon += _amountToWin;\r\n            coinFlipsUserWon[_user]++;\r\n            coinFlipUserAmountWon[_user] += _amountToWin;\r\n            lastCoinFlipWon[_user] = true;\r\n        } else {\r\n            _burn(address(this), _amountWagered);\r\n            coinFlipsLost++;\r\n            coinFlipAmountLost += _amountWagered;\r\n            coinFlipsUserLost[_user]++;\r\n            coinFlipUserAmountLost[_user] += _amountWagered;\r\n            lastCoinFlipWon[_user] = false;\r\n        }\r\n        _wagerBalance -= _amountWagered;\r\n        // reset to allow wagering again\r\n        _wagerInitAmount[_user] = 0;\r\n        emit SettledCoinFlip(\r\n            _user,\r\n            requestId,\r\n            _amountWagered,\r\n            lastCoinFlipWon[_user]\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        bool _isOwner = sender == owner() || recipient == owner();\r\n        uint256 contractTokenBalance = balanceOf(address(this)) - _wagerBalance;\r\n\r\n        bool _isContract = sender == address(this) || recipient == address(this);\r\n        bool _isBuy = sender == uniswapV2Pair && recipient != address(uniswapV2Router);\r\n        bool _isSell = recipient == uniswapV2Pair;\r\n        bool _isSwap = _isBuy || _isSell;\r\n        bool _taxIsElevated = !canSellWithoutElevation[sender];\r\n        uint256 _hourAfterLaunch = getHour();\r\n\r\n        if (_isSwap && enableLimits) {\r\n            bool _skipCheck = _addingLP || _isLimitless[recipient] || _isLimitless[sender];\r\n            uint256 _maxTx = totalSupply() * maxTx / PERCENT_DENOMENATOR;\r\n            require(_maxTx >= amount || _skipCheck, \"Tx amount exceed limit\");\r\n            if (_isBuy) {\r\n                uint256 _maxWallet = totalSupply() * maxWallet / PERCENT_DENOMENATOR;\r\n                require(_maxWallet >= balanceOf(recipient) + amount || _skipCheck, \"Total amount exceed wallet limit\");\r\n            }\r\n        }\r\n        if (_isBuy) {\r\n            canSellWithoutElevation[recipient] = false;\r\n            if (block.number <= _launchBlock + deadblocks) {\r\n                _isBot[recipient] = true;\r\n            } else if (amount > biggestBuyerAmount[_hourAfterLaunch]) {\r\n                biggestBuyer[_hourAfterLaunch] = recipient;\r\n                biggestBuyerAmount[_hourAfterLaunch] = amount;\r\n            }\r\n        } else {\r\n            require(!_isBot[recipient], 'Stop botting!');\r\n            require(!_isBot[sender], 'Stop botting!');\r\n            require(!_isBot[_msgSender()], 'Stop botting!');\r\n\r\n            if (\r\n                !_isSell &&\r\n            !_isContract &&\r\n            amount > minTransferForSideEffectsToRecipient\r\n            ) {\r\n                canSellWithoutElevation[recipient] = false;\r\n                if (lastGameWin[recipient] < lastGameWin[sender]) {\r\n                    lastGameWin[recipient] = lastGameWin[sender];\r\n                }\r\n            }\r\n        }\r\n\r\n        _checkAndPayBiggestBuyer(_hourAfterLaunch);\r\n\r\n        uint256 _minSwap = (balanceOf(uniswapV2Pair) * _liquifyRate) /\r\n        PERCENT_DENOMENATOR;\r\n        bool _overMin = contractTokenBalance >= _minSwap;\r\n        if (\r\n            _swapEnabled &&\r\n            !_swapping &&\r\n            !_isOwner &&\r\n            _overMin &&\r\n            launchTime != 0 &&\r\n            sender != uniswapV2Pair\r\n        ) {\r\n            _swap(_minSwap);\r\n        }\r\n\r\n        uint256 tax = 0;\r\n        if (\r\n            launchTime != 0 &&\r\n            _isSwap &&\r\n            !_taxesOff &&\r\n            !(_isTaxExcluded[sender] || _isTaxExcluded[recipient])\r\n        ) {\r\n            tax = (amount * _totalTax) / PERCENT_DENOMENATOR;\r\n            if (tax > 0) {\r\n                if (_isSell) {\r\n                    if (\r\n                        block.timestamp <\r\n                        lastGameWin[recipient] + gameWinSellPenaltyTimeSeconds\r\n                    ) {\r\n                        tax *= gameWinSellPenaltyMultiplier;\r\n                    } else if (_taxIsElevated) {\r\n                        tax *= sellTaxUnwageredMultiplier;\r\n                    }\r\n                }\r\n                super._transfer(sender, address(this), tax);\r\n            }\r\n        }\r\n\r\n        super._transfer(sender, recipient, amount - tax);\r\n\r\n        if (_isSell && sender != address(this)) {\r\n            lpNukeBuildup +=\r\n            ((amount - tax) * nukePercentPerSell) /\r\n            PERCENT_DENOMENATOR;\r\n        }\r\n    }\r\n\r\n    function _swap(uint256 _amountToSwap) private swapLock {\r\n        uint256 balBefore = address(this).balance;\r\n        uint256 liquidityTokens = (_amountToSwap * taxLp) / _totalTax / 2;\r\n        uint256 tokensToSwap = _amountToSwap - liquidityTokens;\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokensToSwap);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokensToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 balToProcess = address(this).balance - balBefore;\r\n        if (balToProcess > 0) {\r\n            _processFees(balToProcess, liquidityTokens);\r\n        }\r\n    }\r\n\r\n    function _addLp(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            _lpReceiver == address(0) ? owner() : _lpReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _processFees(uint256 amountETH, uint256 amountLpTokens) private {\r\n        uint256 lpETH = (amountETH * taxLp) / _totalTax;\r\n        if (amountLpTokens > 0) {\r\n            _addLp(amountLpTokens, lpETH);\r\n        }\r\n    }\r\n\r\n    function _lpTokenNuke(uint256 _amount) private {\r\n        // cannot nuke more than 20% of token supply in pool\r\n        if (_amount > 0 && _amount <= (balanceOf(uniswapV2Pair) * 20) / 100) {\r\n            if (_nukeRecipient == DEAD) {\r\n                _burn(uniswapV2Pair, _amount);\r\n            } else {\r\n                super._transfer(uniswapV2Pair, _nukeRecipient, _amount);\r\n            }\r\n            IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n            pair.sync();\r\n        }\r\n    }\r\n\r\n    function _checkAndPayBiggestBuyer(uint256 _currentHour) private {\r\n        uint256 _prevHour = _currentHour - 1;\r\n        if (\r\n            _currentHour > 1 &&\r\n            biggestBuyerAmount[_prevHour] > 0 &&\r\n            biggestBuyerPaid[_prevHour] == 0\r\n        ) {\r\n            uint256 _before = address(this).balance;\r\n            if (_before > 0) {\r\n                uint256 _buyerAmount = (_before * biggestBuyRewardPercentage) /\r\n                PERCENT_DENOMENATOR;\r\n                biggestBuyerPaid[_prevHour] = _buyerAmount;\r\n                payable(biggestBuyer[_prevHour]).call{ value: _buyerAmount }('');\r\n                require(\r\n                    address(this).balance >= _before - _buyerAmount,\r\n                    'too much ser'\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function gameMint(address _wallet, uint256 _amount) external onlyGame {\r\n        lastGameWin[_wallet] = block.timestamp;\r\n        _mint(_wallet, _amount);\r\n    }\r\n\r\n    function gameBurn(address _wallet, uint256 _amount) external onlyGame {\r\n        _burn(_wallet, _amount);\r\n    }\r\n\r\n    function nukeLpTokenFromBuildup() external {\r\n        require(\r\n            msg.sender == owner() || lpNukeEnabled,\r\n            'not owner or nuking is disabled'\r\n        );\r\n        require(lpNukeBuildup > 0, 'must be a build up to nuke');\r\n        _lpTokenNuke(lpNukeBuildup);\r\n        lpNukeBuildup = 0;\r\n    }\r\n\r\n    function manualNukeLpTokens(uint256 _percent) external onlyOwner {\r\n        require(_percent <= 200, 'cannot burn more than 20% dex balance');\r\n        _lpTokenNuke((balanceOf(uniswapV2Pair) * _percent) / PERCENT_DENOMENATOR);\r\n    }\r\n\r\n    function payBiggestBuyer(uint256 _hour) external onlyOwner {\r\n        _checkAndPayBiggestBuyer(_hour);\r\n    }\r\n\r\n    // starts at 1 and increments forever every hour after launch\r\n    function getHour() public view returns (uint256) {\r\n        uint256 secondsSinceLaunch = block.timestamp - launchTime;\r\n        return 1 + (secondsSinceLaunch / ONE_HOUR);\r\n    }\r\n\r\n    function isBotBlacklisted(address account) external view returns (bool) {\r\n        return _isBot[account];\r\n    }\r\n\r\n    function blacklistBot(address account) external onlyOwner {\r\n        require(account != address(uniswapV2Router), 'cannot blacklist router');\r\n        require(account != uniswapV2Pair, 'cannot blacklist pair');\r\n        require(!_isBot[account], 'user is already blacklisted');\r\n        _isBot[account] = true;\r\n    }\r\n\r\n    function forgiveBot(address account) external onlyOwner {\r\n        require(_isBot[account], 'user is not blacklisted');\r\n        _isBot[account] = false;\r\n    }\r\n\r\n    function _setTotalTax() private {\r\n        _totalTax = taxLp + taxBuyer;\r\n        require(\r\n            _totalTax <= (PERCENT_DENOMENATOR * 25) / 100,\r\n            'tax cannot be above 25%'\r\n        );\r\n        require(\r\n            _totalTax * sellTaxUnwageredMultiplier <=\r\n            (PERCENT_DENOMENATOR * 49) / 100,\r\n            'total cannot be more than 49%'\r\n        );\r\n    }\r\n\r\n    function setTaxLp(uint256 _tax) external onlyOwner {\r\n        taxLp = _tax;\r\n        _setTotalTax();\r\n    }\r\n\r\n    function setMaxWallet(uint256 _maxWallet) external onlyOwner {\r\n        require(_maxWallet >= 10, 'max wallet cannot be below 0.1%');\r\n        maxWallet = _maxWallet;\r\n    }\r\n    function setMaxTx(uint256 _maxTx) external onlyOwner {\r\n        require(_maxTx >= 10, 'max tx cannot be below 0.1%');\r\n        maxTx = _maxTx;\r\n    }\r\n\r\n    function setTaxBuyer(uint256 _tax) external onlyOwner {\r\n        taxBuyer = _tax;\r\n        _setTotalTax();\r\n    }\r\n\r\n    function setSellTaxUnwageredMultiplier(uint256 _mult) external onlyOwner {\r\n        require(\r\n            _totalTax * _mult <= (PERCENT_DENOMENATOR * 49) / 100,\r\n            'cannot be more than 49%'\r\n        );\r\n        sellTaxUnwageredMultiplier = _mult;\r\n    }\r\n\r\n    function setGameWinSellPenaltyMultiplier(uint256 _mult) external onlyOwner {\r\n        require(\r\n            _totalTax * _mult <= (PERCENT_DENOMENATOR * 49) / 100,\r\n            'total cannot be more than 49%'\r\n        );\r\n        gameWinSellPenaltyMultiplier = _mult;\r\n    }\r\n\r\n    function setLpReceiver(address _wallet) external onlyOwner {\r\n        _lpReceiver = _wallet;\r\n    }\r\n\r\n    function setCoinFlipMinBalancePerc(uint256 _percentage) external onlyOwner {\r\n        require(_percentage <= PERCENT_DENOMENATOR, 'cannot exceed 100%');\r\n        coinFlipMinBalancePerc = _percentage;\r\n    }\r\n\r\n    function setCoinFlipMinWagerAbsolute(uint256 _amount) external onlyOwner {\r\n        coinFlipMinWagerAbsolute = _amount;\r\n    }\r\n\r\n    function setCoinFlipMaxWagerAbsolute(uint256 _amount) external onlyOwner {\r\n        coinFlipMaxWagerAbsolute = _amount;\r\n    }\r\n\r\n    function setCoinFlipMinWhaleWagerAbsolute(uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        coinFlipMinWhaleWagerAbsolute = _amount;\r\n    }\r\n\r\n    function setCoinFlipMaxWhaleWagerAbsolute(uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        coinFlipMaxWhaleWagerAbsolute = _amount;\r\n    }\r\n\r\n    function setIsCoinFlipWhale(address _user, bool _isWhale) external onlyOwner {\r\n        isCoinFlipWhale[_user] = _isWhale;\r\n    }\r\n\r\n    function setCoinFlipWinPercentage(uint256 _percentage) external onlyOwner {\r\n        require(_percentage <= PERCENT_DENOMENATOR, 'cannot exceed 100%');\r\n        coinFlipWinPercentage = _percentage;\r\n    }\r\n\r\n    function setIsGameContract(address _game, bool _isGame) external onlyOwner {\r\n        isGameContract[_game] = _isGame;\r\n    }\r\n\r\n    function setEnableLimits(bool _enable) external onlyOwner {\r\n        enableLimits = _enable;\r\n    }\r\n\r\n    function setLiquifyRate(uint256 _rate) external onlyOwner {\r\n        require(_rate <= PERCENT_DENOMENATOR / 10, 'cannot be more than 10%');\r\n        _liquifyRate = _rate;\r\n    }\r\n\r\n    function setIsTaxExcluded(address _wallet, bool _isExcluded)\r\n    external\r\n    onlyOwner\r\n    {\r\n        _isTaxExcluded[_wallet] = _isExcluded;\r\n    }\r\n\r\n    function setTaxesOff(bool _areOff) external onlyOwner {\r\n        _taxesOff = _areOff;\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n        _swapEnabled = _enabled;\r\n    }\r\n\r\n    function setNukePercentPerSell(uint256 _percent) external onlyOwner {\r\n        require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');\r\n        nukePercentPerSell = _percent;\r\n    }\r\n\r\n    function setLpNukeEnabled(bool _isEnabled) external onlyOwner {\r\n        lpNukeEnabled = _isEnabled;\r\n    }\r\n\r\n    function setBiggestBuyRewardPercentage(uint256 _percent) external onlyOwner {\r\n        require(_percent <= PERCENT_DENOMENATOR, 'cannot be more than 100%');\r\n        biggestBuyRewardPercentage = _percent;\r\n    }\r\n\r\n    function setNukeRecipient(address _recipient) external onlyOwner {\r\n        require(_recipient != address(0), 'cannot be zero address');\r\n        _nukeRecipient = _recipient;\r\n    }\r\n\r\n    function setGameWinSellPenaltyTimeSeconds(uint256 _seconds) external onlyOwner {\r\n        gameWinSellPenaltyTimeSeconds = _seconds;\r\n    }\r\n\r\n    function setMinTransferForSideEffectsToRecipient(uint256 _amount) external onlyOwner {\r\n        minTransferForSideEffectsToRecipient = _amount;\r\n    }\r\n\r\n    function setVrfSubscriptionId(uint64 _subId) external onlyOwner {\r\n        _vrfSubscriptionId = _subId;\r\n    }\r\n\r\n    function setVrfNumBlocks(uint16 _numBlocks) external onlyOwner {\r\n        _vrfNumBlocks = _numBlocks;\r\n    }\r\n\r\n    function setVrfCallbackGasLimit(uint32 _gas) external onlyOwner {\r\n        _vrfCallbackGasLimit = _gas;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wagerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWagered\",\"type\":\"uint256\"}],\"name\":\"InitiatedCoinFlip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wagerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWagered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"didUserWin\",\"type\":\"bool\"}],\"name\":\"SettledCoinFlip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biggestBuyRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biggestBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biggestBuyerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biggestBuyerPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklistBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canSellWithoutElevation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipAmountLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipAmountWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipMaxWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipMaxWhaleWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipMinBalancePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipMinWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipMinWhaleWagerAbsolute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinFlipUserAmountLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinFlipUserAmountWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipWinPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipsLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinFlipsUserLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinFlipsUserWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinFlipsWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadblocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"flipCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"forgiveBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameWinSellPenaltyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameWinSellPenaltyTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBotBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCoinFlipWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGameContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCoinFlipWon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastGameWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"lnchtkn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpNukeBuildup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpNukeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"manualFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"manualNukeLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransferForSideEffectsToRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nukeLpTokenFromBuildup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nukePercentPerSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hour\",\"type\":\"uint256\"}],\"name\":\"payBiggestBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxUnwageredMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBiggestBuyRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipMaxWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipMaxWhaleWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipMinBalancePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipMinWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipMinWhaleWagerAbsolute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setCoinFlipWinPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mult\",\"type\":\"uint256\"}],\"name\":\"setGameWinSellPenaltyMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setGameWinSellPenaltyTimeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"}],\"name\":\"setIsCoinFlipWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isGame\",\"type\":\"bool\"}],\"name\":\"setIsGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setLiquifyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setLpNukeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setLpReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTransferForSideEffectsToRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setNukePercentPerSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setNukeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mult\",\"type\":\"uint256\"}],\"name\":\"setSellTaxUnwageredMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeWei\",\"type\":\"uint256\"}],\"name\":\"setServiceFeeWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setTaxBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setTaxLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_areOff\",\"type\":\"bool\"}],\"name\":\"setTaxesOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gas\",\"type\":\"uint32\"}],\"name\":\"setVrfCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_numBlocks\",\"type\":\"uint16\"}],\"name\":\"setVrfNumBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"setVrfSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SmoltingClassic", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e6990900000000000000000000000000000000000000000000000000000000000000cb000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7298b2297d2b9e7141fa475b9cb044be205d1c8cd144b2efd84f30a9ad8118b5"}]}