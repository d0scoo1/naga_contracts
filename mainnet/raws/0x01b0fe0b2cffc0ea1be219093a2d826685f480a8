{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT OR Apache-2.0\r\n//Albert Banez\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/FashionCrypto.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\nabstract contract WithLimitedSupply {\r\n    using Counters for Counters.Counter;\r\n    /// @dev Emitted when the supply of this collection changes\r\n    event SupplyChanged(uint256 indexed supply);\r\n\r\n    // Keeps track of how many we have minted\r\n    Counters.Counter private _tokenCount;\r\n\r\n    /// @dev The maximum count of tokens this token tracker will hold.\r\n    uint256 private _totalSupply;\r\n\r\n    /// Instanciate the contract\r\n    /// @param totalSupply_ how many tokens this collection should hold\r\n    constructor (uint256 totalSupply_) {\r\n        _totalSupply = totalSupply_;\r\n    }\r\n\r\n    /// @dev Get the max Supply\r\n    /// @return the maximum token count\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev Get the current token count\r\n    /// @return the created token count\r\n    function tokenCount() public view returns (uint256) {\r\n        return _tokenCount.current();\r\n    }\r\n\r\n    /// @dev Check whether tokens are still available\r\n    /// @return the available token count\r\n    function availableTokenCount() public view returns (uint256) {\r\n        return totalSupply() - tokenCount();\r\n    }\r\n\r\n    /// @dev Increment the token count and fetch the latest count\r\n    /// @return the next token id\r\n    function nextToken() internal virtual returns (uint256) {\r\n        uint256 token = _tokenCount.current();\r\n\r\n        _tokenCount.increment();\r\n\r\n        return token;\r\n    }\r\n\r\n    /// @dev Check whether another token is still available\r\n    modifier ensureAvailability() {\r\n        require(availableTokenCount() > 0, \"No more tokens available\");\r\n        _;\r\n    }\r\n\r\n    /// @param amount Check whether number of tokens are still available\r\n    /// @dev Check whether tokens are still available\r\n    modifier ensureAvailabilityFor(uint256 amount) {\r\n        require(availableTokenCount() >= amount, \"Requested number of tokens not available\");\r\n        _;\r\n    }\r\n\r\n    /// Update the supply for the collection\r\n    /// @param _supply the new token supply.\r\n    /// @dev create additional token supply for this collection.\r\n    function _setSupply(uint256 _supply) internal virtual {\r\n        require(_supply > tokenCount(), \"Can't set the supply to less than the current token count\");\r\n        _totalSupply = _supply;\r\n\r\n        emit SupplyChanged(totalSupply());\r\n    }\r\n}\r\n\r\n\r\nabstract contract RandomlyAssigned is WithLimitedSupply {\r\n    // Used for random index assignment\r\n    mapping(uint256 => uint256) private tokenMatrix;\r\n\r\n    // The initial token ID\r\n    uint256 private startFrom;\r\n\r\n    //uint256 public preSaleStartTime = 1653390000; //May 24, 8PM\r\n    //uint256 public preSaleEndTime = 1653940800; //May 30, 8PM\r\n\r\n    //Changing the startIndex\r\n    event startIndexChange(uint oldValue, uint256 newValue);\r\n\r\n    /// Instanciate the contract\r\n    /// @param _totalSupply how many tokens this collection should hold\r\n    /// @param _startFrom the tokenID with which to start counting\r\n    constructor (uint256 _totalSupply, uint256 _startFrom)\r\n        WithLimitedSupply(_totalSupply)\r\n    {\r\n        startFrom = _startFrom;\r\n    }\r\n\r\n    /// Get the next token ID\r\n    /// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\r\n    /// @return the next token ID\r\n    function nextToken() internal override ensureAvailability returns (uint256) {\r\n        uint256 maxIndex = totalSupply() - tokenCount();\r\n        uint256 random = uint256(keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                block.coinbase,\r\n                block.difficulty,\r\n                block.gaslimit,\r\n                block.timestamp\r\n            )\r\n        )) % maxIndex;\r\n\r\n        uint256 value = 0;\r\n        if (tokenMatrix[random] == 0) {\r\n            // If this matrix position is empty, set the value to the generated random number.\r\n            value = random;\r\n        } else {\r\n            // Otherwise, use the previously stored number from the matrix.\r\n            value = tokenMatrix[random];\r\n        }\r\n\r\n        // If the last available tokenID is still unused...\r\n        if (tokenMatrix[maxIndex - 1] == 0) {\r\n            // ...store that ID in the current matrix position.\r\n            tokenMatrix[random] = maxIndex - 1;\r\n        } else {\r\n            // ...otherwise copy over the stored number to the current matrix position.\r\n            tokenMatrix[random] = tokenMatrix[maxIndex - 1];\r\n        }\r\n\r\n        // Increment counts\r\n        super.nextToken();\r\n\r\n        return value + startFrom;\r\n    }\r\n\r\n    function _setStartFrom(uint256 index) internal virtual {\r\n        uint256 prevStarFrom =startFrom;\r\n        startFrom = index;\r\n        emit startIndexChange(prevStarFrom, index);\r\n    }\r\n}\r\n\r\ncontract FashionCrypto is ERC721, Ownable, WithLimitedSupply  {\r\n    using Strings for uint256;\r\n    string public baseURI= \"https://fashioncrypto.io/data/fashion/json/\";\r\n    string baseExtension = \".json\";\r\n\r\n    uint256 public cost = 0.05 ether;\r\n    address public ownerAddress = 0xcff635D73F4Cd7C4005cFC3FE7cc01bb60F42FDd;\r\n    bool public blnSale = true;\r\n    bool public blnWhitelisted = true;\r\n    uint256 public startIndex = 50;\r\n    uint256 public endIndex = 250;\r\n    uint256[] private usedTokenId;\r\n    uint8 public batchMintMaxAmount = 5;    \r\n    uint8 public whiteOneMax = 10;    \r\n    uint8 public whiteTwoMax = 1;    \r\n\r\naddress[] private whitelistedAddressesOne =[0xcff635D73F4Cd7C4005cFC3FE7cc01bb60F42FDd, 0xe03895910e1190d846AeD3BEB317A84E1Ff892d2,\r\n0x4e48783F618ecB06ddFB07D36c49119C2b82F0F4,\r\n0xc20873d40e6F75BF6C39F3BB48bFC1847f335dE2,\r\n0xaA3FcbF8ac0B093C20978EE025e25D95943B7a27,\r\n0x5b2e7eCB43E61B30a7d0B3B698C430b204C22dBD,\r\n0xBA8B0Ea93F9c7cf473e7f99E3bD52AFD37fa55eF,\r\n0xBb209d8F0497e7b64813a7F91960a88d182331E9,\r\n0x7B56dEB150df9dD428C1770fFDf334468f92a444,\r\n0xbaDF8a6bA6EbF14E7690cb95782f5e492Cc47d75,\r\n0x2224BC00EAD1d90365d860ed0C6A21363dA40784,\r\n0x8872485d20694495aEccb098692270C3Ee419935,\r\n0x0fF745e8Df3BCef82D59A8b8fB9cE8c542534136,\r\n0x62017eb3cBc67F977A4bf962cF2Dc49C537f6cCa,\r\n0xF133Ee684d71aA470D7B3ef2868cafaBa53E473e,\r\n0xdf2cd7b522aaeF6dC418CF83cc1e815C1E2Bf8B0,\r\n0x2e2489628CD9f1B98DfB83BB57DA2d0C10109019,\r\n0x9119cc7143250C43b82A02f63BaCF7bDea930669,\r\n0xbA87461c49666f72AFC1D2D805aF6dEB2E193A70,\r\n0x575848A2a2fBf466d31a42820c90F7a71950192D,\r\n0x2a1D69a0830f6094ec318d93A8779dB877871736,\r\n0x500A9D4b9463dA8ef6885b13A66c32916a68af7a,\r\n0x04606154dA2844fa6147F54e3A035651CEB2b197,\r\n0xb6c5feC131aC371456B92B406C25948A83AcaBC1,\r\n0x1cfe6cFD5DbEFD1a5B09524c949e4c4A606972Da,\r\n0x2E8b6a975F7B0edCfe78A2E377329B6c575DC50F,\r\n0x875B1A1Dd84Edf1012fa0d7A0c997425Fda12eFf,\r\n0x138B5C84ba91ea4b95739A527e340489FeF2FE28,\r\n0x3E0034B5D25bdB668EEc68e2643A2DFcFE786766,\r\n0x5DE51b7944c766b1CAdce299463059bdEc38C1BF,\r\n0x23EbD54Fd65825e06a6e5AACc1A0b523BFeb748e,\r\n0xc30d117D16f6eB743BB0019e7863671919368cD1,\r\n0x1557299331AAe614896e4fDC82D882C62Fb62302,\r\n0x108C04d9145c93fE9E3B07Ad27698EDFd5e6e498,\r\n0x4f355A9C74Bd22A90fa32DE4cD129da1999520aA,\r\n0x6cB9C2c61908658e3C9875C864B5e2CAb2f21a4c,\r\n0xE8b7a54AC34D1bA55Fd0E92a79136E7A225C2451,\r\n0xf81Ef872db0ff70bDD3D7b729Ff0440E72b33b18,\r\n0x2eFe4fA1D55880879800638021632F6b9c6F088C,\r\n0xC88f6A403D1F2Ff76c6aB4a71ece88aA6321A40E,\r\n0xd45D61a7762Ed1236b275caDA5f1171D74E008ab,\r\n0x1da10F21F60920d940506939148Cac505315a707,\r\n0xf4a33929872B87BB67dDCAC38548c808DD38F2ae,\r\n0x545FF76F9Ee769B144cb79146c1069cfa0ef2A9f,\r\n0xda4486A591B4543562713cE1413f34b44D3af45A,\r\n0xBD3b7cCd7F58C40DD1150d3487f854f468357D4c,\r\n0x869A83C3D912318fb8FcAC6ADadDaA50c2F373f6,\r\n0xfef634E9Adc613871DE7FE764c38101d8fE85d68,\r\n0x04f7244581360ae45eE6d136dd9ec64926c9386C,\r\n0x012Bf606c1f1AB362A62dBC3e3d3e937027e198D,\r\n0xB18cCecd1FbEBC7C3E30Cc70983720D9d672e8ca,\r\n0x2834e08F4EeCd7b63A6FEFb8eBAadB3fDD277602,\r\n0xE944b8ebBDE99A4D29Ba3faC1931435352d07956,\r\n0xA0DbD3771a4fB21B517BbEa198bC335A44601A4E,\r\n0x2CCc19E242e2f4C2541DAD341be3792Ac0eEd010,\r\n0x16a20ac1719E1F68d663de5504fe58fE9b1ed758,\r\n0xa1ce1e761695fCdB0288d94d3bc08e825064C0a3,\r\n0x67DC869ef404607977833B7810310bA1466324B4,\r\n0x73EB4c1DADb5cee393DA1e80b9a7098fa5afd437,\r\n0x0955C6965Df31558C5D2a7A0F66631c16Dd42980,\r\n0xBE19aa80959bc7c85970AEe306Ecef2cC03844E2,\r\n0x87d7C97B5a69c26C5CBC99b1B27937eDf5ccA10d,\r\n0x5ad430F7eeB9af006001fd21F9Ab27E1b994b506,\r\n0x513db322a397701BF624B517B00291F82B665884,\r\n0x520F3AFd4d156e71Fc26F330AcA6f89E083ff524,\r\n0xF24c2c1A7d479F6B50D6c2065Da97366Ec9Fe39F,\r\n0xe11394F5F5BD7244e73A253B2081Ba5BAA7d2432,\r\n0xf5a9B8Ea9fb71aB2dA81A866d6877b4dd717f9d1,\r\n0x0a1D634e51809b93ae943c9faf6027F117315d7E,\r\n0xeaF63e1917F0B67b8dB58513115764b96Bf90320,\r\n0xD6Fe2aC29E9A8ba1ed61B7689BFA864b31E8f3E6,\r\n0xe2338c6f7148b792CE76a56F6Ff22aFaEbb9c4EA,\r\n0xEF64c2Ac694185DBe61bC74E1505f28C86AB3AC0,\r\n0x669f900DeA5cA376d9a7B6ceDB7D1ec744A24102,\r\n0x0458f111cA216AdA7bB69bD673fF18c2816AeA27,\r\n0xC5D55B32F0D317882c0aAa3b0A963d8CBe094C7c,\r\n0xabe3E2EBd4784Dba6a80Fe341713Fc0532C219fb,\r\n0x9C1c8a2F2AcCc64DAd1C6bd26F0B36aa65Fce219,\r\n0x0A621d9bFf0E8d7978aD40282CBD28944Fef94df,\r\n0xaBc8c7DD623eA76780f9aaA11f429B9602A6ae15,\r\n0x0996Bb48A27E684414B151FfA0e902fB19543021,\r\n0x4AA5C3269420f3D82a96B515a6C470d3fb7db3Fd,\r\n0x31d226B0B94c3d13Cb067960f74e7f1e8aFd2EFD,\r\n0x919aED549781C36882952751AD2A6c33527C0260,\r\n0x4dBE58c21566Ebe2E48E009D4754461b606D990c,\r\n0x3A7546280C77611191e06637adCD0250A2C719Aa,\r\n0xC992BA0cE9aFdADfed23F1C3c654022e9E180686,\r\n0xb49E763A51236602402b3E858Ee76c319F7c27dD,\r\n0x83057f7bFb2d97eA7A9463F683db758aDCA71e8B,\r\n0x251417D5F3315134ffC2295f80D7BfddDB698c14,\r\n0xfB42cDc1EBa64d062Bf50644044aB5fE0E1282E8,\r\n0x4Ab3190Dee3D3191df678A9e324f5D243E0a8B54,\r\n0xd9344A213EAb0A9e8F15Dd3BBb2fDBdba35be368,\r\n0x65d51D3554c6908A75712F1312C971281C8Dd79A,\r\n0xB14Fa6697A7250f237291b56882331567cEFa3d4,\r\n0x29d25f171EDfD17B5bB0b66628fB5286b7D29aea,\r\n0xa3e371b5A01D8ce593A03f7248f42045d84A69F7,\r\n0x13A6FCF17523451716E768fBCf23C150E81d3A24,\r\n0x4eD3A923bD2DeEfaB72cd10E1152C2B5bbeF8506,\r\n0xB4384bbEdDe91d50e257A364f8341B4E73Cb4231,\r\n0xC907C13B7761575C403a6A79f04f9B3fAC6A6D03,\r\n0x5ed20622a0037972644aF6B04E73e80A30C984d2,\r\n0xf9BbD6b7a6224684f40A322232F7A011B96b873D,\r\n0x03E6c622e80b728e93e721AfB51480cbcbc18A60,\r\n0x2d1F22eAaeE458F7aFa58e29d71C746e2C326C27,\r\n0x32E62E30F4c2e93B2D458c99d01e6A129B0da931,\r\n0x87B6E64e98579fd7FB00bb9cEb76170faa8BACf7,\r\n0x8A1182A263A55B4eB07dEEDC301815076739Bd53,\r\n0x9bF8C690917b1a1D87a415a53636D3b0B9DFEBeA,\r\n0xdF5f4DCA715d7F0CA82502E3DA3f3100d0A5fec0,\r\n0x660e3533d3B089e48dEdc8b93A276a88258976a7,\r\n0x5A01887De253D6142ee7db6530F6F749dfE83b76,\r\n0x9f944958481BA262628957688DE6F4c3aAd9D805,\r\n0x34cE42EeB1548d521cE52D4d3Fafe7ccD8629E68,\r\n0xfc9b689b07776E3dcE406b8CDCFa4872AE3c9939,\r\n0xBB0DF31b908053Ee001053E667EEf5b79d1a7E55,\r\n0x1C0fbf1E1fD170010eca7016E6A9431Ca7c41D81,\r\n0xDAc33C13D2631a89B966E259b4Dfce38E21F05b9\r\n];\r\n    address[] private whitelistedAddressesTwo =[0xB5F442aAA72d1a56A5431C459d94cC228de3b7eD,\r\n0xA2EeC290592930350CC553Ef3a22Fa77CF9Bb058,\r\n0x75950A08c633C9cfC14dF1F3E04058bB0DDacF85,\r\n0xBa2e3b65A5E005cA8C8d3f36f4ba7Db9fE9F5948,\r\n0xA94D609db541E1E21FD1179a63Ac41A651584EDb,\r\n0xa8A5c10c39b6e0e42E09f288C1d122151550A722,\r\n0x5Bf7f1552a8e2E02ab42969a267A30F927eFAd60,\r\n0xc0c4ae2be965f660E109002d176D624B21c1CF13,\r\n0x22d0a06717E2bA3A232c371C50CD55DbB7879CC7,\r\n0x9044D452dC7A3506f363E6e8299c201ae344eA4A,\r\n0x3DF9b94f7717ADC8F331E25cC967038a1e58ad53,\r\n0xf5b529386e563cc25990E59afB5800f16d8F1189,\r\n0xC14031baa3fC1E4eC64E12A4279126Be2157D76d,\r\n0x051311C1D26443D6D87eb6A13A55ece32C97a7Ab,\r\n0x1a2dE0E9dEdb22376626d5dda00f238C56cA4835,\r\n0x3ac1C033c6ED5a4fb02014Cb984Aa3A055649E03,\r\n0xFB06C94A6Da258E787AA9260E38832278080319c,\r\n0x7a83B7EDB98956e7bC1aa107677354ea91608A38,\r\n0xF1DD9a61234Bb81e28c42A8F76CC3D2f02F8FaB7,\r\n0x61cC678Ac7AE5FD6A807480A7F229c1614fc6788,\r\n0xd64539430357Bb87066e8e0AF5EbBF962CD9588b,\r\n0xCB9DCD60980a74F27f381f93241A8b0Bf4B4A024,\r\n0x72aa1F778dA7D960f6eA60D3c6Dcb9a0F76D0408,\r\n0x8D5B11d815A6f35054b1B73e283FEA61b60737Be,\r\n0xc1d423aE49fba66AA713610811d13e0BECf213c6,\r\n0xA0a4A879B767EA2d6B23f7120F86f455c4E0A0cB,\r\n0x35d6Cd57f4B6D561ad52f8aB5E9E10E6c159aa5C,\r\n0x60f4Fbe6F706A67Bc560b4b7EecBb8f74193c658,\r\n0x38BBe79305f908DD87a4417347ffE5C4A0Ea0Ec9,\r\n0x2c120a611029B6E0d7d3827855592d3491191475,\r\n0xAeE79B5D2a67A18Ca2Fe9a4E614D633f9dD7969E,\r\n0x282C247EFC6408814A57ee1c2a0974042A54530e,\r\n0xd8C84502264E9E0505e34AFe480bC3eCa62Fdd1b,\r\n0x1851f43e431B74D1875FA966E26CB6a637790010,\r\n0xd5965bA259aFf23080eacEECEf99dd80afc51B70,\r\n0x123718c9F9B9c48048DA9A1134f9fCEa8E86a0D5,\r\n0x8dD6ACDA4459de971a385B00DF177Cf41006a027,\r\n0xe44659d918Ef53440C249bB5fA19ADbFfc057F82,\r\n0xDD1132316Ac5cD0c1f358CbC06d930b8A674270B,\r\n0xb4C006781B17a28fb68EB3B0D08c443E64A92cC1,\r\n0x7134bdcDE26EC21021579175Cb9C60a4C93e97E6,\r\n0x76F511623a40F35462Fda74847140bE5F1b23cE6,\r\n0xfCBA7891121114F6FcF9cd2549bE4Ee7208454f4,\r\n0x1fD6f1274AFBe571b66d19A8e8E1917a5e370E6e,\r\n0xCd1fe3f3361E1A49b3CC415e7B2D0BF0C83d35ad,\r\n0xFf2b935C5635A5aF779F8f040c4EEE6A1Fc772f2,\r\n0xDdEF9F37Db1012D93E027A59752a1Eb084652498,\r\n0x27dA21ab92aF4427f749F7aE282Cd3b9f29190Dd,\r\n0x88684818e4Db145B3E4D8DF61192F96A0ca12F2F,\r\n0x7C062b42720C5A16F67825476dEe09b3a2Dc13B1,\r\n0x0C85E48e616fdd33720c00baE14668e833C82DEC,\r\n0x119cE2117315b238c233c46a57Cd44d3F06B2fa9,\r\n0x5f80f73d93895B89BDA6d47ab374a33ef0F62380,\r\n0x2ae1f63142D9D81A65D882261A903ca4D06B5Bbe,\r\n0x3C407D6c0Bca77456EC7AfeEbdaad81E8b23aB31,\r\n0xC575cFaccbcC497C05936e70fCfC1a42D69F4CC0,\r\n0x3b609939B50d10Cf822274C62Daa9c6053ce0F74,\r\n0x6fC264D1AdacA3557d67d7A72a737F89dba13552,\r\n0x6327191Ea83a372eC049633665FB679a233835dA,\r\n0x6e04B6ac4bB1bd33E0490d126bCAd3c8e3C4f78D,\r\n0x6A501447C443b9aA58E91eF4505B24FF25940fE1,\r\n0x0445E3d6742F3Fd10a3781093e4f90bEFFaED31a,\r\n0x8bA7f68C6d89b7D232ffcf5f58719996799Bb8a2,\r\n0x657D736e04ccD506541f5A12044480eC93D2a308,\r\n0x9A00f5f51EF96d1e8414D620c077Ead407c28AE2,\r\n0x5ee9595c4912085B5A10CC884ee3D155920C35De,\r\n0xF19d298D79Da876F93893b9df830F94865E28662,\r\n0xa15Fab718b0cB25F82d61F58c014bD88a87EEED2,\r\n0xF72fa7Cdf36b3F58Eae1da8929B1F67972504aF8,\r\n0xB3Ec4C6C6B6aCa3DCe1ac400A9De37B8757e4B4C,\r\n0x9452297493f5c9d65BEca47f1e6d5Aac13dED2f7,\r\n0x6758608Ffc82E3c9F3520B94a0c77e8Ae2F6Bf7A,\r\n0x581d40199937e70C5f5757547f230d790B00EB85,\r\n0x02B3BF262Df4A97CE27383654C8858E73413F590,\r\n0x6C6A9F4C1B227e9507B1f7680e7B5734a0529802,\r\n0x82Ab0c87270Cc177B73b0d3e5cFD48a8f8FFD10d,\r\n0x4Dc68B875279eFb0D0c1c3292d79848AF402c0FA,\r\n0xf3F2F4c0c22F97A295091A4BE7f18a9F797E30Ae,\r\n0x764394B7cde04489f436Ac6E1F272Aae62fA65a1,\r\n0x251Fb2Fd729707dF6aF0C709681EFD25371cE8A9,\r\n0x04D2CB63c907421E5FC215d4064A31f41156f4B9,\r\n0x6c07aE8e5213115996867427B5DB8eDfc722900C,\r\n0xC641b1ff7aD7fAd7D37ff9B2854DcBCd167212E7,\r\n0x69512b193a2Fe70073b4c59cB9E27199B921DAc6,\r\n0x78C2493597D3e767279e03F0d3Fea8E126329dE0,\r\n0xcc811e52f35e758A24e0FEaA2b7439Bc21Ee4d21,\r\n0x31C9BcE1020Ac0880E285C36CE8a89693a9F13A4,\r\n0x4Ae2C32f298Db0dA192Cb225863bB797BbD9d1fb,\r\n0xFb2F62d691CA8c9dD07cd859aa0Ac2930d558F66,\r\n0xD6474B0b45834646FB3BD7e5F9c7096d97b66676,\r\n0xC5cE03F7A4de6c44198C5b84549c45F4F1af8d87,\r\n0x42D358F92Bd5d96D96c810625A5a13A483D149D7,\r\n0x17C30c09Ab306e10a2e9999e89BB1883C9835E5a,\r\n0x761225B1800af40fa73Ca615bb588cF63dD85BC7,\r\n0x47443460C613C9323b1bF54D42B2903fAFc11664,\r\n0x7179B654D852a93169db56dcDfBCea19Be1406Ca,\r\n0xccc105058D1528D3E3bC3490713da97c37377976,\r\n0x9bEDC4CE02dAdd1Eaac86362Dae44B909bFb24C4,\r\n0xe6a9b136C17745573D43569c22aBBde34f1512a9,\r\n0xe7552c4D4B655a100048689a32C41E92019217E9,\r\n0x519114e1f68Dd9aa14AE60a14519F4698cC5Ef4e,\r\n0x6F814B38fE1b1E3B6d7b323b66B500b97513CBb0,\r\n0x1c24732509eFd844B5F398C4a3c6e255744FDE0f,\r\n0x24e8cBCEce8eC14120Ae18d168Ceea059c6a4d3a,\r\n0xfaC8EE3E18a18d9AE90831B1F60d513A6839D7EB,\r\n0x271010FeEaC18Bc0C1f9082533A96EaCa2e30201,\r\n0x0A8A034C161d9Cda052f40Eff0b24D6A6a05fdC9,\r\n0xB1dc395a592856F7B5A9ae53B98aF8a64BDf6c85,\r\n0x5fFFf27BCCD898a8B88D5FA431600bb6c7b94117,\r\n0x92D3B546902f7ab1d7A595Dc3CF9F4C834C02fD4,\r\n0x28012C04EC61d20Bcf6612F9313b4cC7089716Dc,\r\n0x37a7679B309f62aE78C41092A60a0E7c994d7400,\r\n0x22443d3ec9aF561C49d8389B9CB06069b7b3d304,\r\n0x80ea006315A1c8278419BED1951c4fC047581641,\r\n0xE30363483d911f59176B83c976637b5A8FBdC9cD,\r\n0x834792b23B13035b8c38d8F37c9486099d5c2971,\r\n0x561eE7C9fCb2EFEEa5B7Bf3C55deA36B15C07Bdf,\r\n0x200404D036525Ce6F2056ce4c4cF8E25CC50B6d6,\r\n0xD3De7FD8BF1667D97Bb9aaE7bA738EfDf34641dC,\r\n0xDE7BC955c03aD2fc66955De7E4E84528260923bC,\r\n0xC622b5FB8046950A4E56E98FE2b2a0E97340B82C,\r\n0xBC5353f7a98412dC4583a8DBEFF5da3267aA264F,\r\n0x6D3b5F1191Da580f88D40B911D471991199836FE,\r\n0xA46666810794069Cc6eE3CEDb1AA62904dB24553,\r\n0x1D08f4F40cC8Ae7eA0B37115B2b48620a43Bf403,\r\n0xf18977B29C1F87F9871B8a7a5aF1e4059e39b9FE,\r\n0x86170f6B17B8bC41C0C06c8aa0C2d7754A3605C1,\r\n0x5a18a5a696c7f1b1D2c097D05d5e479D8f3eaEb6,\r\n0x1203D4615D87E159Df82401C7acC89b59b5C64F6,\r\n0xd1fEC8Da7edcfd651fBcBdE789aA27b38055F102,\r\n0x4C843a3D077C353533b81aD2435268C8611fDF16,\r\n0xDB8bc40369dACb601C21B2dc978F4988F51101cb,\r\n0xA75747f401d938593b8124e6eb08e910c16B20Da,\r\n0x37e0ec7fD9568a45dE59200aE69F01F8A69D59dF,\r\n0xB5457E56C5154536A6ABEe2654Cfa32efCAF5956,\r\n0x8661A1D4199A7b5372A488F6FaF590F179F98Dca,\r\n0x9896021a2D4E9124BE5827a2792d02189f26D798,\r\n0x0ab865AF5ab3c0854AfF619907c72A04E9c70DD7,\r\n0x16CDE6ef425fdF7997525E38C31b2FC2Ad0b44bb,\r\n0xCd33cfb6337032de97b74E1CBBFad835a9a4B9ce,\r\n0xe18Ba83765406fcAE655f57dE36c40B64C6d2c2e,\r\n0x845C9f3E5F63B739b27E92f50cAf55E695AFc902,\r\n0xc12cf671656eb6E835B31A907A33a4a00AF00165,\r\n0x93C3228B964b37947a4c7dA3E9FFf513dED3fF49,\r\n0x133B2f8476af944c434454695313082215d5c4b3,\r\n0x32474092852f1DA9f95A96fAF0FF3D254dfb1F91,\r\n0x3612397C7bED3d2E9337d46827e869A7B13eC3eb,\r\n0x760228f299677B1023b02Cbb1B9cf7147e077174,\r\n0x9b57E1B617343F29b6386c00d14e5189e38EdA71,\r\n0x0825Cf6a4115b770b4fd65373ff10ed51680E5Ee,\r\n0xa6bC0614Ae72d8189f53700e5B9b62D23bF115bC,\r\n0x8C41F8BB5b83De10AC8fbcd3CfC6ead69f84aD87,\r\n0xA21f6bC5BC20f221f16f85FfCA8eDF0Ec6637ecE,\r\n0x81A20A1c885a574a01d77b9847AA4f1D99EcDd3a,\r\n0xd17Ab43D8f8E55eaB25725A5988Cea80d172102A,\r\n0xF7789a8815FF679576943c8b57FA136C9dfF0754,\r\n0x69Dfe997A1185f22B0B0a786247afcf36b670817,\r\n0xE285834728BD7259791c6E6f63Ed0bAbA36Fa151,\r\n0xF728e65fF04a2185ac5508dC83a6f3634Af2ad4B,\r\n0xA84AefA8CF9377Fd80D9d0ccCC89A13fc308E206,\r\n0xA57394Fb12D0aB830E80dCC55B45114629F78b30,\r\n0xB00c93AB586Deed458864f262B0493194B02Ba84,\r\n0xebe8f27c2DE46c1DF567990c9720Dc169AA86300,\r\n0x981a1E7A9C337600c414889163117b1CF2De48Aa,\r\n0xbD7E7FDF65633c54f13e751b5cb0fdf561237B70,\r\n0x2fb975cd9Bd2Af43F2f7b7C03B63d29d9C83FB37,\r\n0x34509b079D54A602998A289A1FF3a27601a46A4A,\r\n0x7C043d5C962cfaf39A84367731dCd804eb03bA08,\r\n0x6678eB423E5F954A8d7ab47Fa3373F9F743C1686,\r\n0x44dA0Db572bD33d689e4D8Fab8b5D93192794016,\r\n0x5a3d6C4642E7F575030a6e9B41Bcc60719AF2A18\r\n];\r\n\r\n    constructor() ERC721(\"FASHIONCRYPTO_Genesis\", \"FCG\")  \r\n     WithLimitedSupply(9999)\r\n    {\r\n    }\r\n\r\n    function mint(uint256[] memory tokenId) ensureAvailability public payable     {\r\n        require(blnSale == true, \"Not Sales Period.\");\r\n        require(tokenId.length <= batchMintMaxAmount, \"Maximum of tokens to buy at once exceeded.\");\r\n        require(msg.value == cost * tokenId.length, \"Price must be equal to listing price.\");\r\n        \r\n        if(blnWhitelisted == true){\r\n            bool isWhiteListedOne =isAddressWhitelistedOne(msg.sender);\r\n            bool isWhiteListedTwo =isAddressWhitelistedTwo(msg.sender);\r\n            require(isWhiteListedOne || isWhiteListedTwo, \"Not on the whitelist! Cannot buy during PreSales Period.\");\r\n\r\n            if(isWhiteListedOne){\r\n                require(balanceOf(msg.sender) + tokenId.length <= whiteOneMax, \"Max mint per address exceeded!\");\r\n            }else if(isWhiteListedTwo){\r\n                require(balanceOf(msg.sender) + tokenId.length <= whiteTwoMax, \"Max mint per address exceeded!\");\r\n            }\r\n\r\n            for(uint256 i=0; i <= tokenId.length-1; i++){\r\n                if (tokenId[i] >= startIndex && tokenId[i] <= endIndex){\r\n                    _safeMint(msg.sender, tokenId[i]);\r\n                    usedTokenId.push(tokenId[i]);\r\n                    super.nextToken();\r\n                }\r\n            }\r\n        }else{\r\n            for(uint256 i=0; i <= tokenId.length-1; i++){\r\n                if (tokenId[i] >= startIndex && tokenId[i] <= endIndex){\r\n                    _safeMint(msg.sender, tokenId[i]);\r\n                    usedTokenId.push(tokenId[i]);\r\n                    super.nextToken();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mintOwner(uint256[] memory tokenId) ensureAvailability public  {\r\n        require(msg.sender == ownerAddress, \"Only Owner can use this method.\");\r\n\r\n        for(uint256 i=0; i <= tokenId.length-1; i++){\r\n            _safeMint(msg.sender, tokenId[i]);\r\n            usedTokenId.push(tokenId[i]);\r\n            super.nextToken();\r\n        }\r\n    }\r\n\r\n    function isAddressWhitelistedOne(address _user) private view returns (bool) {\r\n        uint i = 0;\r\n        while (i < whitelistedAddressesOne.length) {\r\n            if(whitelistedAddressesOne[i] == _user) {\r\n                return true;\r\n            }\r\n        i++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isAddressWhitelistedTwo(address _user) private view returns (bool) {\r\n        uint i = 0;\r\n        while (i < whitelistedAddressesTwo.length) {\r\n            if(whitelistedAddressesTwo[i] == _user) {\r\n                return true;\r\n            }\r\n        i++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    //internal\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        require(payable(msg.sender).send(address(this).balance));\r\n    }\r\n\r\n    function updateCost(uint256 costParam) public onlyOwner {\r\n        cost = costParam;\r\n    }\r\n\r\n    function updatebaseURI(string memory baseURIParam) public onlyOwner {\r\n        baseURI = baseURIParam;\r\n    }\r\n\r\n    function updateSale(bool saleParam) public onlyOwner {\r\n        blnSale = saleParam;\r\n    }\r\n\r\n    function updateWhitelisted(bool whitelistedParam) public onlyOwner {\r\n        blnWhitelisted = whitelistedParam;\r\n    }\r\n\r\n    function updateStartindex(uint256 startIndexParam) public onlyOwner {\r\n        startIndex = startIndexParam;\r\n    }\r\n\r\n    function updateEndindex(uint256 endIndexParam) public onlyOwner {\r\n        endIndex = endIndexParam;\r\n    }\r\n\r\n    function updateBatchMintMaxAmount(uint8 maxParam) public onlyOwner {\r\n        batchMintMaxAmount = maxParam;\r\n    }\r\n\r\n    function updateWhiteOneMax(uint8 whiteOneParam) public onlyOwner {\r\n        whiteOneMax = whiteOneParam;\r\n    }\r\n\r\n    function updateWhiteTwoMax(uint8 whiteTwoParam) public onlyOwner {\r\n        whiteTwoMax = whiteTwoParam;\r\n    }\r\n\r\n    //function updatepreSaleStartTime(uint256 preSaleStartTimeParam) public onlyOwner {\r\n    //    preSaleStartTime = preSaleStartTimeParam;\r\n    //}\r\n\r\n    //function updatepreSaleEndTime(uint256 preSaleEndTimeParam) public onlyOwner {\r\n    //    preSaleEndTime = preSaleEndTimeParam;\r\n    //}\r\n\t\r\n    function updatewhitelistedAddressesOne(address addressParam) public onlyOwner {\r\n        whitelistedAddressesOne.push(addressParam);\r\n    }\r\n\r\n    function updatewhitelistedAddressesTwo(address addressParam) public onlyOwner {\r\n        whitelistedAddressesTwo.push(addressParam);\r\n    }\r\n\r\n    function updateownerAddress(address addressParam) public onlyOwner {\r\n        ownerAddress = addressParam;\r\n    }\r\n\t\r\n    function fetchwhitelistedAddressesOne() public view returns (address[] memory) {\r\n        return whitelistedAddressesOne;\r\n    }\r\n\r\n    function fetchwhitelistedAddressesTwo() public view returns (address[] memory) {\r\n        return whitelistedAddressesTwo;\r\n    }\r\n\r\n    function fetchUsedTokenId() public view returns (uint256[] memory) {\r\n        return usedTokenId;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override\r\n        returns (string memory){\r\n            require(_exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n            );\r\n        string memory currentBaseURI = _baseURI();\r\n        return bytes(currentBaseURI).length >0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : \"\";\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchMintMaxAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blnSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blnWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchUsedTokenId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchwhitelistedAddressesOne\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchwhitelistedAddressesTwo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"mintOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxParam\",\"type\":\"uint8\"}],\"name\":\"updateBatchMintMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"costParam\",\"type\":\"uint256\"}],\"name\":\"updateCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endIndexParam\",\"type\":\"uint256\"}],\"name\":\"updateEndindex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"saleParam\",\"type\":\"bool\"}],\"name\":\"updateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndexParam\",\"type\":\"uint256\"}],\"name\":\"updateStartindex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"whiteOneParam\",\"type\":\"uint8\"}],\"name\":\"updateWhiteOneMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"whiteTwoParam\",\"type\":\"uint8\"}],\"name\":\"updateWhiteTwoMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistedParam\",\"type\":\"bool\"}],\"name\":\"updateWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURIParam\",\"type\":\"string\"}],\"name\":\"updatebaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressParam\",\"type\":\"address\"}],\"name\":\"updateownerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressParam\",\"type\":\"address\"}],\"name\":\"updatewhitelistedAddressesOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressParam\",\"type\":\"address\"}],\"name\":\"updatewhitelistedAddressesTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteOneMax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteTwoMax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "FashionCrypto", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f0b6c47cc6d241af6edc094df48c3e59598a121cbf3b95e125014e0ae5da22d"}]}