{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@beandao/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/Address.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    function isContract(address target) internal view returns (bool result) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := gt(extcodesize(target), 0)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/Ownership.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\n/**\\n * @title Ownership\\n * @author yoonsung.eth\\n * @notice \ub2e8\uc77c Ownership\uc744 \uac00\uc9c8 \uc218 \uc788\ub3c4\ub85d \ub3c4\uc640\uc8fc\ub294 \ucd94\uc0c1 \ucee8\ud2b8\ub799\ud2b8\\n * @dev constructor \uae30\ubc18 \ucee8\ud2b8\ub799\ud2b8\uc5d0\uc11c\ub294 \uc0dd\uc131 \uc2dc\uc810\uc5d0 owner\uac00 msg.sender\ub85c \uc9c0\uc815\ub418\uba70,\\n *      Proxy\ub85c \uc791\ub3d9\ub418\ub294 \ucee8\ud2b8\ub799\ud2b8\uc758 \uacbd\uc6b0 `__transferOwnership(address)`\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud638\ucd9c\ud558\uc5ec owner\ub97c \uc9c0\uc815\ud558\uc5ec\uc57c \ud55c\ub2e4.\\n */\\nabstract contract Ownership is IERC173 {\\n    address public override owner;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownership/Not-Authorized\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    function transferOwnership(address newOwner) external virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownership/Not-Allowed-Zero\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function resignOwnership() external virtual onlyOwner {\\n        delete owner;\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address prev = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(prev, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/Multicall.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/**\\n * @title Multicall\\n * @author yoonsung.eth\\n * @notice \ucee8\ud2b8\ub799\ud2b8\uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ud2b8\ub79c\uc7ad\uc158\uc744 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\uc2dc\ud0ac \uc218 \uc788\uc74c.\\n */\\nabstract contract Multicall is IMulticall {\\n    function multicall(bytes[] calldata callData) external override returns (bytes[] memory returnData) {\\n        returnData = new bytes[](callData.length);\\n        for (uint256 i = 0; i < callData.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(callData[i]);\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (!success) {\\n                // revert called without a message\\n                if (result.length < 68) revert();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            returnData[i] = result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-173 Contract Ownership Standard\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n */\\ninterface IERC173 {\\n    /**\\n     * @dev This emits when ownership of a contract changes.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Get the address of the owner\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Set the address of the new owner of the contract\\n     * @param newOwner The address of the new owner of the contract\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IMulticall.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMulticall {\\n    function multicall(bytes[] calldata callData) external returns (bytes[] memory returnData);\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IMint.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMint {\\n    function mint(uint256 value) external returns (bool);\\n\\n    function mintTo(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IERC2612.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC2612 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/Initializer.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\nabstract contract Initializer {\\n    using Address for address;\\n\\n    bool private _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized || !address(this).isContract(), \\\"Initializer/Already Initialized\\\");\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/StandardERC20.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@beandao/contracts/interfaces/IMint.sol\\\";\\nimport \\\"@beandao/contracts/interfaces/IBurn.sol\\\";\\nimport \\\"@beandao/contracts/interfaces/IERC165.sol\\\";\\nimport {Initializer} from \\\"@beandao/contracts/library/Initializer.sol\\\";\\nimport {Ownership, IERC173} from \\\"@beandao/contracts/library/Ownership.sol\\\";\\nimport {ERC20, IERC20} from \\\"@beandao/contracts/library/ERC20.sol\\\";\\nimport {ERC2612, IERC2612} from \\\"@beandao/contracts/library/ERC2612.sol\\\";\\nimport {Multicall, IMulticall} from \\\"@beandao/contracts/library/Multicall.sol\\\";\\n\\n/**\\n * @title StandardERC20\\n * @author yoonsung.eth\\n * @notice ERC20\uacfc ERC2612\ub97c \uae30\ubcf8\uc73c\ub85c, ERC165, ERC173 \uba85\uc138\ub97c \uad6c\ud604\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\\n */\\ncontract StandardERC20 is ERC20, ERC2612, Ownership, Multicall, Initializer, IERC165, IBurn, IMint {\\n    /**\\n     * @notice ERC20\uc744 \ucd08\uae30\ud654 \ud569\ub2c8\ub2e4. \ud1a0\ud070\uc758 \uc774\ub984, \uc2ec\ubcfc, \uc18c\uc218\uc810 \uc815\ubcf4\ub97c \ud544\uc694\ub85c \ud569\ub2c8\ub2e4. \uc774 \ud568\uc218\ub294 \uc2e4\ud589\ub420 \ub54c \ub2e8 \ud55c\ubc88\ub9cc \uc2e4\ud589\ub429\ub2c8\ub2e4.\\n     * \uc774 \ud568\uc218\uac00 \uc2e4\ud589\ub420 \ub54c \uc774 \ud568\uc218\ub97c \uc2e4\ud589\ud55c \ub2f9\uc0ac\uc790\uac00 \ud574\ub2f9 \ucee8\ud2b8\ub799\ud2b8\uc758 \uc18c\uc720\uad8c\uc744 \ubc1b\uac8c\ub429\ub2c8\ub2e4.\\n     * @param data \ud1a0\ud070 \uc774\ub984, \ud1a0\ud070 \uc2ec\ubcfc, \uc18c\uc218\uc810 \uc815\ubcf4\ub97c abi encode \ud558\uc5ec, bytes \ud615\ud0dc\ub85c \uc804\ub2ec\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4.\\n     */\\n    function initialize(bytes calldata data) external initializer {\\n        (name, symbol, decimals) = abi.decode(data, (string, string, uint8));\\n        version = \\\"1\\\";\\n        balanceOf[address(this)] = type(uint256).max;\\n        _initDomainSeparator(name, version);\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    function mint(uint256 value) external onlyOwner returns (bool) {\\n        totalSupply += value;\\n        unchecked {\\n            balanceOf[msg.sender] += value;\\n        }\\n        emit Transfer(address(0), msg.sender, value);\\n        return true;\\n    }\\n\\n    function mintTo(address to, uint256 value) external onlyOwner returns (bool) {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n        return true;\\n    }\\n\\n    function burn(uint256 value) external onlyOwner returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n        emit Transfer(msg.sender, address(0), value);\\n        return true;\\n    }\\n\\n    function burnFrom(address from, uint256 value) external onlyOwner returns (bool) {\\n        allowance[from][msg.sender] -= value;\\n        balanceOf[from] -= value;\\n        unchecked {\\n            totalSupply -= value;\\n        }\\n        emit Transfer(from, address(0), value);\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return\\n            type(IERC20).interfaceId == interfaceID ||\\n            type(IERC2612).interfaceId == interfaceID ||\\n            type(IERC173).interfaceId == interfaceID ||\\n            type(IERC165).interfaceId == interfaceID ||\\n            type(IMulticall).interfaceId == interfaceID ||\\n            type(IBurn).interfaceId == interfaceID ||\\n            type(IMint).interfaceId == interfaceID;\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/interfaces/IBurn.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBurn {\\n    function burn(uint256 value) external returns (bool);\\n\\n    function burnFrom(address from, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/ERC20.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract ERC20 is IERC20 {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function approve(address spender, uint256 value) external virtual returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external virtual returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual returns (bool) {\\n        allowance[from][msg.sender] -= value;\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual {\\n        balanceOf[from] -= value;\\n        unchecked {\\n            balanceOf[to] += value;\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 value\\n    ) internal virtual {\\n        require(spender != address(this), \\\"ERC20/Impossible-Approve-to-Self\\\");\\n        allowance[_owner][spender] = value;\\n        emit Approval(_owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/ERC2612.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EIP712.sol\\\";\\nimport \\\"../interfaces/IERC2612.sol\\\";\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\n\\n/**\\n * @title Permit\\n * @notice An alternative to approveWithAuthorization, provided for\\n * compatibility with the draft EIP2612 proposed by Uniswap.\\n * @dev Differences:\\n * - Uses sequential nonce, which restricts transaction submission to one at a\\n *   time, or else it will revert\\n * - Has deadline (= validBefore - 1) but does not have validAfter\\n * - Doesn't have a way to change allowance atomically to prevent ERC20 multiple\\n *   withdrawal attacks\\n */\\nabstract contract ERC2612 is ERC20, IERC2612 {\\n    bytes32 public immutable PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    string public version;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /**\\n     * @notice Initialize EIP712 Domain Separator\\n     * @param _name        name of contract\\n     * @param _version     version of contract\\n     */\\n    function _initDomainSeparator(string memory _name, string memory _version) internal {\\n        version = _version;\\n        DOMAIN_SEPARATOR = EIP712.hashDomainSeperator(_name, _version, address(this));\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @param owner     Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param value     Amount of allowance\\n     * @param deadline  The time at which this expires (unix time)\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        require(owner != address(0), \\\"ERC2612/Invalid-address-0\\\");\\n        require(deadline >= block.timestamp, \\\"ERC2612/Expired-time\\\");\\n\\n        unchecked {\\n            bytes32 digest = EIP712.hashMessage(\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            );\\n\\n            address recovered = ecrecover(digest, v, r, s);\\n            require(recovered != address(0) && recovered == owner, \\\"ERC2612/Invalid-Signature\\\");\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@beandao/contracts/library/EIP712.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EIP712 {\\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /**\\n     * @dev Calculates a EIP712 domain separator.\\n     * @param name The EIP712 domain name.\\n     * @param version The EIP712 domain version.\\n     * @param verifyingContract The EIP712 verifying contract.\\n     * @return result EIP712 domain separator.\\n     */\\n    function hashDomainSeperator(\\n        string memory name,\\n        string memory version,\\n        address verifyingContract\\n    ) internal view returns (bytes32 result) {\\n        bytes32 typehash = EIP712DOMAIN_TYPEHASH;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n            let chainId := chainid()\\n\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, typehash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n            result := keccak256(memPtr, 160)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n     * @param domainHash Hash of the domain domain separator data, computed with getDomainHash().\\n     * @param hashStruct The EIP712 hash struct.\\n     * @return result EIP712 hash applied to the given EIP712 Domain.\\n     */\\n    function hashMessage(bytes32 domainHash, bytes32 hashStruct) internal pure returns (bytes32 result) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000) // EIP191 header\\n            mstore(add(memPtr, 2), domainHash) // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\\n\\n            result := keccak256(memPtr, 66)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 42069,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resignOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StandardERC20", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "42069", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d32d2b0a862a7434a55f3a4ff7330cb336b891cc17a965515b27480b5ea34b47"}]}