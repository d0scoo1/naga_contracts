{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/FastWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./external/@openzeppelin/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFastWithdraw.sol\\\";\\r\\nimport \\\"./interfaces/IController.sol\\\";\\r\\nimport \\\"./interfaces/ISpool.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./shared/SpoolPausable.sol\\\";\\r\\n\\r\\n/**\\r\\n* @param  proportionateDeposit used to know how much fees to pay\\r\\n* @param userStrategyShares mapping of user address to strategy shares\\r\\n*/\\r\\nstruct VaultWithdraw {\\r\\n    uint256 proportionateDeposit;\\r\\n    mapping(address => uint256) userStrategyShares;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {IFastWithdraw} interface.\\r\\n *\\r\\n * @dev\\r\\n * The Fast Withdraw contract implements the logic to withdraw user shares without\\r\\n * the need to wait for the do hard work function in Spool to be executed.\\r\\n *\\r\\n * The vault maps strategy shares to users, so the user can claim them any at time.\\r\\n * Performance fee is still paid to the vault where the shares where initially taken from.\\r\\n */\\r\\ncontract FastWithdraw is IFastWithdraw, ReentrancyGuard, SpoolPausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice fee handler contracts, to manage the risk provider fees\\r\\n    address public immutable feeHandler;\\r\\n    /// @notice The Spool implementation\\r\\n    ISpool public immutable spool;\\r\\n    /// @notice mapping of users to vault withdraws\\r\\n    mapping (address => mapping(IVault => VaultWithdraw)) userVaultWithdraw;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the contract initial values\\r\\n     *\\r\\n     * @param _controller the controller contract\\r\\n     * @param _feeHandler the fee handler contract\\r\\n     * @param _spool the central spool contract\\r\\n     */\\r\\n    constructor(\\r\\n        IController _controller,\\r\\n        address _feeHandler,\\r\\n        ISpool _spool\\r\\n    )\\r\\n    SpoolPausable(_controller)\\r\\n    {\\r\\n        require(\\r\\n            _feeHandler != address(0) &&\\r\\n            _spool != ISpool(address(0)),\\r\\n            \\\"FastWithdraw::constructor: Fee Handler or FastWithdraw address cannot be 0\\\"\\r\\n        );\\r\\n\\r\\n        feeHandler = _feeHandler;\\r\\n        spool = _spool;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice get proportionate deposit and strategy shares for a user in vault \\r\\n     *\\r\\n     * @param user user address\\r\\n     * @param vault vault address\\r\\n     * @param strategies chosen strategies from selected vault\\r\\n     *\\r\\n     * @param proportionateDeposit used to know how much fees to pay\\r\\n     * @param strategyShares shares in each chosen strategy for user\\r\\n     * @return proportionateDeposit Proportionate deposit\\r\\n     * @return strategyShares Array of shares per strategy\\r\\n     */\\r\\n    function getUserVaultWithdraw(\\r\\n        address user,\\r\\n        IVault vault,\\r\\n        address[] calldata strategies\\r\\n    ) external view returns(uint256 proportionateDeposit, uint256[] memory strategyShares) {\\r\\n        VaultWithdraw storage vaultWithdraw = userVaultWithdraw[user][vault];\\r\\n\\r\\n        strategyShares = new uint256[](strategies.length);\\r\\n\\r\\n        for (uint256 i = 0; i < strategies.length; i++) {\\r\\n            strategyShares[i] = vaultWithdraw.userStrategyShares[strategies[i]];\\r\\n        }\\r\\n\\r\\n        return (vaultWithdraw.proportionateDeposit, strategyShares);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set user-strategy shares, previously owned by the vault.\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     * - Can only be called by a vault.\\r\\n     *\\r\\n     * @param vaultStrategies strategies from calling vault\\r\\n     * @param sharesWithdrawn shares removed from the vault \\r\\n     * @param proportionateDeposit used to know how much fees to pay\\r\\n     * @param user caller of withdrawFast function in the vault\\r\\n     * @param fastWithdrawParams parameters on how to execute fast withdraw\\r\\n     */\\r\\n    function transferShares(\\r\\n        address[] calldata vaultStrategies,\\r\\n        uint128[] calldata sharesWithdrawn,\\r\\n        uint256 proportionateDeposit,\\r\\n        address user,\\r\\n        FastWithdrawParams calldata fastWithdrawParams\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n    {\\r\\n        // save\\r\\n        _saveUserShares(vaultStrategies, sharesWithdrawn, proportionateDeposit, IVault(msg.sender), user);\\r\\n\\r\\n        // execute\\r\\n        if (fastWithdrawParams.doExecuteWithdraw) {\\r\\n            _executeWithdraw(user, IVault(msg.sender), vaultStrategies, fastWithdrawParams.slippages, fastWithdrawParams.swapData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Fast withdraw user shares for a vault.\\r\\n     * @dev Called after `transferShares` has been called by the vault and the user has\\r\\n     *      transfered the shares from vault to FastWithdraw contracts. Now user can execute\\r\\n     *      withdraw manually for strategies that belonged to the vault at any time immidiately.\\r\\n     *      When withdrawn, performance fees are paid to the vault at the same rate as standar witdraw.\\r\\n     * Requirements:\\r\\n     * - System must not be paused.\\r\\n     *\\r\\n     * @param vault Vault where fees are paid at withdraw\\r\\n     * @param strategies Array of strategy addresses to fast withdraw from\\r\\n     * @param slippages Array of slippage parameters to apply when withdrawing\\r\\n     * @param swapData Array containig data to swap unclaimed strategy reward tokens for underlying asset\\r\\n     */\\r\\n    function withdraw(\\r\\n        IVault vault,\\r\\n        address[] calldata strategies,\\r\\n        uint256[][] calldata slippages,\\r\\n        SwapData[][] calldata swapData\\r\\n    )\\r\\n        external\\r\\n        systemNotPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        _onlyVault(address(vault));\\r\\n        require(strategies.length > 0, \\\"FastWithdraw::withdraw: No strategies\\\");\\r\\n\\r\\n        _executeWithdraw(msg.sender, vault, strategies, slippages, swapData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Save user strategy shares to storage transfered from the vault\\r\\n     *\\r\\n     * @dev When user executes vault fast withdraw, shares ownership is transfered from the vault\\r\\n     *      to the FastWithdraw contract, where fast wihdraw can be executed by the user when desired.\\r\\n     *      As withdraws can use a lot of gas, storing shares supports immediate withdrawing from\\r\\n     *      strategies in multiple transactions in case maximum block gas limit would be reached.\\r\\n     *\\r\\n     * @param vaultStrategies Array of vault strategy addresses\\r\\n     * @param sharesWithdrawn Array of vault strategy share amounts transfered to the user\\r\\n     * @param proportionateDeposit Amount of user initial vault deposit, to claculate the performance fees\\r\\n     * @param vault Vault address of where the shares came from, required to pay the shares when actual withdraw is performed\\r\\n     * @param user User to whom strategy shares are assigned\\r\\n     */\\r\\n    function _saveUserShares(\\r\\n        address[] calldata vaultStrategies,\\r\\n        uint128[] calldata sharesWithdrawn,\\r\\n        uint256 proportionateDeposit,\\r\\n        IVault vault,\\r\\n        address user\\r\\n    ) private {\\r\\n        VaultWithdraw storage vaultWithdraw = userVaultWithdraw[user][vault];\\r\\n\\r\\n        vaultWithdraw.proportionateDeposit += proportionateDeposit;\\r\\n        \\r\\n        for (uint256 i = 0; i < vaultStrategies.length; i++) {\\r\\n            vaultWithdraw.userStrategyShares[vaultStrategies[i]] += sharesWithdrawn[i];\\r\\n        }\\r\\n\\r\\n        emit UserSharesSaved(user, address(vault));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Execute the fast widrawal for strategies.\\r\\n     * @dev Called after `transferShares` has been called by the vault and the user has\\r\\n     *      transfered the shares from vault to FastWithdraw contracts. Now user can execute\\r\\n     *      withdraw manually for strategies that belonged to the vault at any time immidiately.\\r\\n     *      When withdrawn, performance fees are paid to the vault at the same rate as standar witdraw\\r\\n     *\\r\\n     * @param user User performing the fast withdraw\\r\\n     * @param vault Vault where performance fees will pe paid\\r\\n     * @param strategies Array of strategy addresses to fast withdraw from\\r\\n     * @param slippages Array of slippage parameters to apply when withdrawing\\r\\n     * @param swapData Array containig data to swap unclaimed strategy reward tokens for underlying asset\\r\\n     */\\r\\n    function _executeWithdraw(\\r\\n        address user,\\r\\n        IVault vault,\\r\\n        address[] calldata strategies,\\r\\n        uint256[][] calldata slippages,\\r\\n        SwapData[][] calldata swapData\\r\\n    ) private {\\r\\n        require(strategies.length == slippages.length, \\\"FastWithdraw::_executeWithdraw: Strategies length should match slippages length\\\");\\r\\n        require(strategies.length == swapData.length, \\\"FastWithdraw::_executeWithdraw: Strategies length should match swap data length\\\");\\r\\n        require(!spool.isMidReallocation(), \\\"FastWithdraw::_executeWithdraw: Cannot fast withdraw mid reallocation\\\");\\r\\n        VaultWithdraw storage vaultWithdraw = userVaultWithdraw[user][vault];\\r\\n        \\r\\n        uint256 totalWithdrawn = 0;\\r\\n        for (uint256 i = 0; i < strategies.length; i++) {\\r\\n            uint256 strategyShares = vaultWithdraw.userStrategyShares[strategies[i]];\\r\\n\\r\\n            if(strategyShares > 0) {\\r\\n                totalWithdrawn += spool.fastWithdrawStrat(strategies[i], address(vault.underlying()), strategyShares, slippages[i], swapData[i]);\\r\\n                vaultWithdraw.userStrategyShares[strategies[i]] = 0;\\r\\n                emit StrategyWithdrawn(user, address(vault), strategies[i]);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        require(totalWithdrawn > 0, \\\"FastWithdraw::_executeWithdraw: Nothing withdrawn\\\");\\r\\n\\r\\n        // pay fees to the vault if user made profit\\r\\n        if (totalWithdrawn > vaultWithdraw.proportionateDeposit) {\\r\\n            uint256 profit = totalWithdrawn - vaultWithdraw.proportionateDeposit;\\r\\n\\r\\n            // take fees\\r\\n            uint256 fees = _payFeesAndTransfer(vault, profit);\\r\\n            totalWithdrawn -= fees;\\r\\n\\r\\n            vaultWithdraw.proportionateDeposit = 0;\\r\\n        } else {\\r\\n            vaultWithdraw.proportionateDeposit -= totalWithdrawn;\\r\\n        }\\r\\n\\r\\n        vault.underlying().safeTransfer(user, totalWithdrawn);\\r\\n        emit FastWithdrawExecuted(user, address(vault), totalWithdrawn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev call vault to calculate and pay fees\\r\\n     * @param vault Vault address\\r\\n     * @param profit Profit\\r\\n     */\\r\\n    function _payFeesAndTransfer(\\r\\n        IVault vault,\\r\\n        uint256 profit\\r\\n    ) private returns (uint256 fees) {\\r\\n        fees = vault.payFees(profit);\\r\\n        vault.underlying().safeTransfer(feeHandler, fees);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensures that the caller is a valid vault\\r\\n     * @param vault Vault address\\r\\n     */\\r\\n    function _onlyVault(address vault) private view {\\r\\n        require(\\r\\n            controller.validVault(vault),\\r\\n            \\\"FastWithdraw::_onlyVault: Can only be invoked by vault\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by a non-valid vault\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        _onlyVault(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IController {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function strategies(uint256 i) external view returns (address);\\n\\n    function validStrategy(address strategy) external view returns (bool);\\n\\n    function validVault(address vault) external view returns (bool);\\n\\n    function getStrategiesCount() external view returns(uint8);\\n\\n    function supportedUnderlying(IERC20 underlying)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function verifyStrategies(address[] calldata _strategies) external view;\\n\\n    function transferToSpool(\\n        address transferFrom,\\n        uint256 amount\\n    ) external;\\n\\n    function checkPaused() external view;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event EmergencyWithdrawStrategy(address indexed strategy);\\n    event EmergencyRecipientUpdated(address indexed recipient);\\n    event EmergencyWithdrawerUpdated(address indexed withdrawer, bool set);\\n    event PauserUpdated(address indexed user, bool set);\\n    event UnpauserUpdated(address indexed user, bool set);\\n    event VaultCreated(address indexed vault, address underlying, address[] strategies, uint256[] proportions,\\n        uint16 vaultFee, address riskProvider, int8 riskTolerance);\\n    event StrategyAdded(address strategy);\\n    event StrategyRemoved(address strategy);\\n    event VaultInvalid(address vault);\\n    event DisableStrategy(address strategy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFastWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ISwapData.sol\\\";\\n\\nstruct FastWithdrawParams {\\n    bool doExecuteWithdraw;\\n    uint256[][] slippages;\\n    SwapData[][] swapData;\\n}\\n\\ninterface IFastWithdraw {\\n    function transferShares(\\n        address[] calldata vaultStrategies,\\n        uint128[] calldata sharesWithdrawn,\\n        uint256 proportionateDeposit,\\n        address user,\\n        FastWithdrawParams calldata fastWithdrawParams\\n    ) external;\\n\\n        /* ========== EVENTS ========== */\\n\\n    event StrategyWithdrawn(address indexed user, address indexed vault, address indexed strategy);\\n    event UserSharesSaved(address indexed user, address indexed vault);\\n    event FastWithdrawExecuted(address indexed user, address indexed vault, uint256 totalWithdrawn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./spool/ISpoolExternal.sol\\\";\\nimport \\\"./spool/ISpoolReallocation.sol\\\";\\nimport \\\"./spool/ISpoolDoHardWork.sol\\\";\\nimport \\\"./spool/ISpoolStrategy.sol\\\";\\nimport \\\"./spool/ISpoolBase.sol\\\";\\n\\n/// @notice Utility Interface for central Spool implementation\\ninterface ISpool is ISpoolExternal, ISpoolReallocation, ISpoolDoHardWork, ISpoolStrategy, ISpoolBase {}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @notice Strict holding information how to swap the asset\\r\\n * @member slippage minumum output amount\\r\\n * @member path swap path, first byte represents an action (e.g. Uniswap V2 custom swap), rest is swap specific path\\r\\n */\\r\\nstruct SwapData {\\r\\n    uint256 slippage; // min amount out\\r\\n    bytes path; // 1st byte is action, then path \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./vault/IVaultRestricted.sol\\\";\\nimport \\\"./vault/IVaultIndexActions.sol\\\";\\nimport \\\"./vault/IRewardDrip.sol\\\";\\nimport \\\"./vault/IVaultBase.sol\\\";\\nimport \\\"./vault/IVaultImmutable.sol\\\";\\n\\ninterface IVault is IVaultRestricted, IVaultIndexActions, IRewardDrip, IVaultBase, IVaultImmutable {}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolBase {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getCompletedGlobalIndex() external view returns(uint24);\\n\\n    function getActiveGlobalIndex() external view returns(uint24);\\n\\n    function isMidReallocation() external view returns (bool);\\n\\n    /* ========== EVENTS ========== */\\n\\n    event ReallocationTableUpdated(\\n        uint24 indexed index,\\n        bytes32 reallocationTableHash\\n    );\\n\\n    event ReallocationTableUpdatedWithTable(\\n        uint24 indexed index,\\n        bytes32 reallocationTableHash,\\n        uint256[][] reallocationTable\\n    );\\n    \\n    event DoHardWorkCompleted(uint24 indexed index);\\n\\n    event SetAllocationProvider(address actor, bool isAllocationProvider);\\n    event SetIsDoHardWorker(address actor, bool isDoHardWorker);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolDoHardWork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface ISpoolDoHardWork {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event DoHardWorkStrategyCompleted(address indexed strat, uint256 indexed index);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolExternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../ISwapData.sol\\\";\\n\\ninterface ISpoolExternal {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function deposit(address strategy, uint128 amount, uint256 index) external;\\n\\n    function withdraw(address strategy, uint256 vaultProportion, uint256 index) external;\\n\\n    function fastWithdrawStrat(address strat, address underlying, uint256 shares, uint256[] calldata slippages, SwapData[] calldata swapData) external returns(uint128);\\n\\n    function redeem(address strat, uint256 index) external returns (uint128, uint128);\\n\\n    function redeemUnderlying(uint128 amount) external;\\n\\n    function redeemReallocation(address[] calldata vaultStrategies, uint256 depositProportions, uint256 index) external;\\n\\n    function removeShares(address[] calldata vaultStrategies, uint256 vaultProportion) external returns(uint128[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolReallocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolReallocation {\\n    event StartReallocation(uint24 indexed index);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolStrategy {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getUnderlying(address strat) external returns (uint128);\\n    \\n    function getVaultTotalUnderlyingAtIndex(address strat, uint256 index) external view returns(uint128);\\n\\n    function addStrategy(address strat) external;\\n\\n    function disableStrategy(address strategy, bool skipDisable) external;\\n\\n    function runDisableStrategy(address strategy) external;\\n\\n    function emergencyWithdraw(\\n        address strat,\\n        address withdrawRecipient,\\n        uint256[] calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IRewardDrip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDrip {\\n    /* ========== STRUCTS ========== */\\n\\n    // The reward configuration struct, containing all the necessary data of a typical Synthetix StakingReward contract\\n    struct RewardConfiguration {\\n        uint32 rewardsDuration;\\n        uint32 periodFinish;\\n        uint192 rewardRate; // rewards per second multiplied by accuracy\\n        uint32 lastUpdateTime;\\n        uint224 rewardPerTokenStored;\\n        mapping(address => uint256) userRewardPerTokenPaid;\\n        mapping(address => uint256) rewards;\\n    }\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getActiveRewards(address account) external;\\n    function tokenBlacklist(IERC20 token) view external returns(bool);\\n\\n    /* ========== EVENTS ========== */\\n    \\n    event RewardPaid(IERC20 token, address indexed user, uint256 reward);\\n    event RewardAdded(IERC20 indexed token, uint256 amount, uint256 duration);\\n    event RewardExtended(IERC20 indexed token, uint256 amount, uint256 leftover, uint256 duration, uint32 periodFinish);\\n    event RewardRemoved(IERC20 indexed token);\\n    event PeriodFinishUpdated(IERC20 indexed token, uint32 periodFinish);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IVaultDetails.sol\\\";\\n\\ninterface IVaultBase {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function initialize(VaultInitializable calldata vaultInitializable) external;\\n\\n    /* ========== STRUCTS ========== */\\n\\n    struct User {\\n        uint128 instantDeposit; // used for calculating rewards\\n        uint128 activeDeposit; // users deposit after deposit process and claim\\n        uint128 owed; // users owed underlying amount after withdraw has been processed and claimed\\n        uint128 withdrawnDeposits; // users withdrawn deposit, used to calculate performance fees\\n        uint128 shares; // users shares after deposit process and claim\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Claimed(address indexed member, uint256 claimAmount);\\n    event Deposit(address indexed member, uint256 indexed index, uint256 amount);\\n    event Withdraw(address indexed member, uint256 indexed index, uint256 shares);\\n    event WithdrawFast(address indexed member, uint256 shares);\\n    event StrategyRemoved(uint256 i, address strategy);\\n    event TransferVaultOwner(address owner);\\n    event LowerVaultFee(uint16 fee);\\n    event UpdateName(string name);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultDetails.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nstruct VaultDetails {\\n    address underlying;\\n    address[] strategies;\\n    uint256[] proportions;\\n    address creator;\\n    uint16 vaultFee;\\n    address riskProvider;\\n    int8 riskTolerance;\\n    string name;\\n}\\n\\nstruct VaultInitializable {\\n    string name;\\n    address owner;\\n    uint16 fee;\\n    address[] strategies;\\n    uint256[] proportions;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultImmutable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nstruct VaultImmutables {\\n    IERC20 underlying;\\n    address riskProvider;\\n    int8 riskTolerance;\\n}\\n\\ninterface IVaultImmutable {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function underlying() external view returns (IERC20);\\n\\n    function riskProvider() external view returns (address);\\n\\n    function riskTolerance() external view returns (int8);\\n}\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultIndexActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IVaultIndexActions {\\n\\n    /* ========== STRUCTS ========== */\\n\\n    struct IndexAction {\\n        uint128 depositAmount;\\n        uint128 withdrawShares;\\n    }\\n\\n    struct LastIndexInteracted {\\n        uint128 index1;\\n        uint128 index2;\\n    }\\n\\n    struct Redeem {\\n        uint128 depositShares;\\n        uint128 withdrawnAmount;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event VaultRedeem(uint indexed globalIndex);\\n    event UserRedeem(address indexed member, uint indexed globalIndex);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultRestricted.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IVaultRestricted {\\n    /* ========== FUNCTIONS ========== */\\n    \\n    function reallocate(\\n        address[] calldata vaultStrategies,\\n        uint256 newVaultProportions,\\n        uint256 finishedIndex,\\n        uint24 activeIndex\\n    ) external returns (uint256[] memory, uint256);\\n\\n    function payFees(uint256 profit) external returns (uint256 feesPaid);\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Reallocate(uint24 indexed index, uint256 newProportions);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/SpoolPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/// @title Facilitates checking if the system is paused or not\\nabstract contract SpoolPausable {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// @notice The controller contract that is consulted for a strategy's and vault's validity\\n    IController public immutable controller;\\n\\n    /**\\n     * @notice Sets initial values\\n     * @param _controller Controller contract address\\n     */\\n    constructor(IController _controller) {\\n        require(\\n            address(_controller) != address(0),\\n            \\\"SpoolPausable::constructor: Controller contract address cannot be 0\\\"\\n        );\\n\\n        controller = _controller;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @notice Throws if system is paused\\n    modifier systemNotPaused() {\\n        controller.checkPaused();\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"},{\"internalType\":\"contract ISpool\",\"name\":\"_spool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"FastWithdrawExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"UserSharesSaved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getUserVaultWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proportionateDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spool\",\"outputs\":[{\"internalType\":\"contract ISpool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultStrategies\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"sharesWithdrawn\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256\",\"name\":\"proportionateDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"doExecuteWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256[][]\",\"name\":\"slippages\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData[][]\",\"name\":\"swapData\",\"type\":\"tuple[][]\"}],\"internalType\":\"struct FastWithdrawParams\",\"name\":\"fastWithdrawParams\",\"type\":\"tuple\"}],\"name\":\"transferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"slippages\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData[][]\",\"name\":\"swapData\",\"type\":\"tuple[][]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FastWithdraw", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000466d6d23e116a1ab3d148872a8269b2fed91d33b000000000000000000000000b7be35c489accf37d9711cb0030af40fddfefc5c000000000000000000000000a5bee0212d4013ba8b452faea2eb9d597d7c73b1", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}