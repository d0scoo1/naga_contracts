{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LazlosRendering.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport './Types/Types.sol';\\n\\n/*\\n   __           _      _        ___ _                __ _                 \\n  / /  __ _ ___| | ___( )__    / _ (_)__________ _  / _\\\\ |__   ___  _ __  \\n / /  / _` |_  / |/ _ \\\\/ __|  / /_)/ |_  /_  / _` | \\\\ \\\\| '_ \\\\ / _ \\\\| '_ \\\\ \\n/ /__| (_| |/ /| | (_) \\\\__ \\\\ / ___/| |/ / / / (_| | _\\\\ \\\\ | | | (_) | |_) |\\n\\\\____/\\\\__,_/___|_|\\\\___/|___/ \\\\/    |_/___/___\\\\__,_| \\\\__/_| |_|\\\\___/| .__/ \\n                                                                   |_|    \\n\\nLazlosRendering is the rendering contract used for rendering tokenURI's in Lazlo's kitchen.\\n*/\\ncontract LazlosRendering is Ownable {\\n    using Strings for uint256;\\n\\n    address public ingredientsContractAddress;\\n    address public pizzasContractAddress;\\n    string public ingredientsIPFSHash;\\n    string public baseURI;\\n    string private ingredientsDescription;\\n    string private pizzaDescription;\\n\\n    function setIngredientsContractAddress(address addr) public onlyOwner {\\n        ingredientsContractAddress = addr;\\n    }\\n\\n    function setPizzasContractAddress(address addr) public onlyOwner {\\n        pizzasContractAddress = addr;\\n    }\\n\\n    function setIngredientsIPFSHash(string memory hash) public onlyOwner {\\n        ingredientsIPFSHash = hash;\\n    }\\n\\n    function setBaseURI(string memory uri) public onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function setIngredientsDescription(string memory description) public onlyOwner {\\n        ingredientsDescription = description;\\n    }\\n\\n    function setPizzaDescription(string memory description) public onlyOwner {\\n        pizzaDescription = description;\\n    }\\n\\n    function ingredientTokenMetadata(uint256 id) public view returns (string memory) {\\n        Ingredient memory ingredient = ILazlosIngredients(ingredientsContractAddress).getIngredient(id);\\n\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(abi.encodePacked(\\n                    '{\\\"name\\\":\\\"', ingredient.name,\\n                    '\\\",\\\"description\\\":\\\"', ingredientsDescription, '\\\",\\\"image\\\":\\\"https://gateway.pinata.cloud/ipfs/',\\n                    ingredientsIPFSHash, '/', id.toString(), '.png\\\"}'\\n                ))\\n            )\\n        );\\n    }\\n\\n    function pizzaTokenMetadata(uint256 id) external view returns (string memory) {\\n        Pizza memory pizza = ILazlosPizzas(pizzasContractAddress).pizza(id);\\n        uint256 numIngredients = ILazlosIngredients(ingredientsContractAddress).getNumIngredients();\\n        \\n        string memory propertiesString;\\n        for (uint256 ingredientId = 1; ingredientId <= numIngredients; ingredientId++) {\\n\\n            string memory comma = \\\",\\\";\\n            if (bytes(propertiesString).length == 0) {\\n                comma = \\\"\\\";\\n            }\\n\\n            Ingredient memory ingredient = ILazlosIngredients(ingredientsContractAddress).getIngredient(ingredientId);\\n            \\n            string memory traitType;\\n            string memory value;\\n            if (ingredient.ingredientType == IngredientType.Base ||\\n                ingredient.ingredientType == IngredientType.Sauce) {\\n                if (!(pizzaContainsIngredient(pizza, ingredientId))) {\\n                    continue;\\n                }\\n\\n                traitType = getIngredientTypeName(ingredientId);\\n                value = getIngredientName(ingredientId);\\n\\n            } else {\\n                traitType = getIngredientName(ingredientId);\\n\\n                if (pizzaContainsIngredient(pizza, ingredientId)) {\\n                    value = \\\"Yes\\\";\\n\\n                } else {\\n                    value = \\\"No\\\";\\n                }\\n            }\\n\\n            propertiesString = string(abi.encodePacked(\\n                propertiesString, comma, '{\\\"trait_type\\\":\\\"', traitType, '\\\",\\\"value\\\":\\\"', value, '\\\"}'\\n            ));\\n        }\\n\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(abi.encodePacked(\\n                    '{\\\"description\\\":\\\"', pizzaDescription, '\\\",\\\"image\\\":\\\"',\\n                    baseURI, '/tokens/', id.toString(), '/pizza_image.png\\\",\\\"attributes\\\":[',\\n                    propertiesString, ']}'\\n                ))\\n            )\\n        );\\n    }\\n\\n    function getIngredientName(uint256 ingredientTokenId) private view returns (string memory) {\\n        return ILazlosIngredients(ingredientsContractAddress).getIngredient(ingredientTokenId).name;\\n    }\\n\\n    function pizzaContainsIngredient(Pizza memory pizza, uint256 ingredientId) private pure returns (bool) {\\n        if (pizza.base == ingredientId) {\\n            return true;\\n        \\n        }\\n        \\n        if (pizza.sauce == ingredientId) {\\n            return true;\\n        \\n        }\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint16 cheese = pizza.cheeses[i];\\n            if (cheese == 0) {\\n                break;\\n            }\\n\\n            if (cheese == ingredientId) {\\n                return true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint16 meat = pizza.meats[i];\\n            if (meat == 0) {\\n                break;\\n            }\\n\\n            if (meat == ingredientId) {\\n                return true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint16 topping = pizza.toppings[i];\\n            if (topping == 0) {\\n                break;\\n            }\\n\\n            if (topping == ingredientId) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getIngredientTypeName(uint256 ingredientTokenId) private view returns (string memory) {\\n        Ingredient memory ingredient = ILazlosIngredients(ingredientsContractAddress).getIngredient(ingredientTokenId);\\n        \\n        if (ingredient.ingredientType == IngredientType.Base) {\\n            return \\\"Base\\\";\\n        \\n        } else if (ingredient.ingredientType == IngredientType.Sauce) {\\n            return \\\"Sauce\\\";\\n        \\n        } else if (ingredient.ingredientType == IngredientType.Cheese) {\\n            return \\\"Cheese\\\";\\n        \\n        } else if (ingredient.ingredientType == IngredientType.Meat) {\\n            return \\\"Meat\\\";\\n        \\n        } else {\\n            return \\\"Topping\\\";\\n        }\\n    }\\n\\n    function uintToByteString(uint256 a, uint256 fixedLen)\\n        internal\\n        pure\\n        returns (bytes memory _uintAsString)\\n    {\\n        uint256 j = a;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(fixedLen);\\n        j = fixedLen;\\n        if (a == 0) {\\n            bstr[0] = \\\"0\\\";\\n            len = 1;\\n        }\\n        while (j > len) {\\n            j = j - 1;\\n            bstr[j] = bytes1(\\\" \\\");\\n        }\\n        uint256 k = len;\\n        while (a != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(a - (a / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            a /= 10;\\n        }\\n        return bstr;\\n    }\\n}\\n\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Types/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nenum IngredientType {\\n    Base,\\n    Sauce,\\n    Cheese,\\n    Meat,\\n    Topping\\n}\\n\\nstruct Ingredient {\\n    string name;\\n    IngredientType ingredientType;\\n    address artist;\\n    uint256 price;\\n    uint256 supply;\\n    uint256 initialSupply;\\n}\\n\\nstruct Pizza {\\n    uint16 base;\\n    uint16 sauce;\\n    uint16[3] cheeses;\\n    uint16[4] meats;\\n    uint16[4] toppings;\\n}\\n\\ninterface ILazlosIngredients {\\n    function getNumIngredients() external view returns (uint256);\\n    function getIngredient(uint256 tokenId) external view returns (Ingredient memory);\\n    function increaseIngredientSupply(uint256 tokenId, uint256 amount) external;\\n    function decreaseIngredientSupply(uint256 tokenId, uint256 amount) external;\\n    function mintIngredients(address addr, uint256[] memory tokenIds, uint256[] memory amounts) external;\\n    function burnIngredients(address addr, uint256[] memory tokenIds, uint256[] memory amounts) external;\\n    function balanceOfAddress(address addr, uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface ILazlosPizzas {\\n    function bake(address baker, Pizza memory pizza) external returns (uint256);\\n    function rebake(address baker, uint256 pizzaTokenId, Pizza memory pizza) external;\\n    function pizza(uint256 tokenId) external view returns (Pizza memory);\\n    function burn(uint256 tokenId) external;\\n}\\n\\ninterface ILazlosRendering {\\n    function ingredientTokenMetadata(uint256 id) external view returns (string memory); \\n    function pizzaTokenMetadata(uint256 id) external view returns (string memory); \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ingredientTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ingredientsContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ingredientsIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pizzaTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pizzasContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setIngredientsContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setIngredientsDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"setIngredientsIPFSHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setPizzaDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPizzasContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LazlosRendering", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}