{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SentiMetaStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"./ISentiMetaStaking.sol\\\";\\r\\n\\r\\ncontract SentiMetaStaking is Ownable, ISentiMetaStaking {\\r\\n\\r\\n    // Events\\r\\n    event Stake(uint8 opType, address indexed owner, address indexed project, uint96 indexed tokenId, uint96 totalStaked);\\r\\n\\r\\n    // Target NFT contract (OnChainPixels)\\r\\n    IERC721Enumerable _targetContract;\\r\\n\\r\\n    /* Stake mapping */\\r\\n    mapping(address => uint96) _projectAddressToStakedCounts;\\r\\n    mapping(uint256 => TokenStake) _storageIdToToken;\\r\\n    mapping(uint96 => uint256) _tokenIdToStorageId;\\r\\n\\r\\n    /* Approval mapping */\\r\\n    mapping(address => mapping(address => address)) private _operatorApprovals;\\r\\n\\r\\n    constructor(address target_){\\r\\n        _targetContract = IERC721Enumerable(target_);\\r\\n    }\\r\\n\\r\\n    // Extensibility function to allow for er-targeting should the OnChainPixels contract ever need to be migrated\\r\\n    function updateTarget (address target_) external onlyOwner {\\r\\n        _targetContract = IERC721Enumerable(target_);\\r\\n    }\\r\\n\\r\\n    // Extracts an address from a uint256 sotage id\\r\\n    function _extractProjectAddressFromStorageId(uint256 storageId_) private pure returns (address) {\\r\\n        return address(uint160((storageId_ >> 96)));\\r\\n    }\\r\\n\\r\\n    // Creates a storage ID from an address and index\\r\\n    function _createStorageId(address projectAddress_, uint256 index_) private pure returns (uint256) {\\r\\n        return (uint256(uint160(projectAddress_)) << 96) + index_;\\r\\n    }\\r\\n\\r\\n    // Stakes at a new index\\r\\n    function _stake(uint96 tokenId_, address projectAddress_, address owner_) private {\\r\\n        uint256 newIndex = _projectAddressToStakedCounts[projectAddress_];\\r\\n        uint256 newStorageId = _createStorageId(projectAddress_, newIndex);\\r\\n\\r\\n        uint48 timestamp = uint48(block.timestamp);\\r\\n        _storageIdToToken[newStorageId] = TokenStake({\\r\\n            tokenId: tokenId_,\\r\\n            timestamp: timestamp\\r\\n        });\\r\\n        _tokenIdToStorageId[tokenId_] = newStorageId;\\r\\n        _projectAddressToStakedCounts[projectAddress_]++;\\r\\n\\r\\n        emit Stake(uint8(1), owner_, projectAddress_, tokenId_, _projectAddressToStakedCounts[projectAddress_]);\\r\\n    }\\r\\n\\r\\n    // Unstakes, moving last index to deleted index and removing the last enty (allowing reuse of indexes and preventing potential overflow)\\r\\n    function _unstake(address projectAddress_, uint256 storageId_, uint96 tokenId_, address owner_) private {\\r\\n        _projectAddressToStakedCounts[projectAddress_]--;\\r\\n        \\r\\n        uint256 lastIndex = _projectAddressToStakedCounts[projectAddress_];\\r\\n        uint256 lastStorageId = _createStorageId(projectAddress_, lastIndex);\\r\\n        uint96 lastTokenId = _storageIdToToken[lastStorageId].tokenId;\\r\\n\\r\\n        _storageIdToToken[storageId_] = _storageIdToToken[lastStorageId];\\r\\n        _tokenIdToStorageId[lastTokenId] = storageId_;\\r\\n        delete _storageIdToToken[lastStorageId];\\r\\n        delete _tokenIdToStorageId[tokenId_];\\r\\n\\r\\n        emit Stake(uint8(0), owner_, projectAddress_, tokenId_, uint96(lastIndex));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Stakes a tokenId_ against a projectAddress_\\r\\n    */\\r\\n    function stake(uint96 tokenId_, address projectAddress_) public override {\\r\\n        require(projectAddress_ != address(0), \\\"Project address must not be 0\\\");\\r\\n\\r\\n        address owner = _targetContract.ownerOf(tokenId_);\\r\\n        require(owner == msg.sender || isApprovedForProject(projectAddress_, owner, msg.sender), \\\"Must own token or be approved\\\");\\r\\n\\r\\n        uint256 storageId = _tokenIdToStorageId[tokenId_];\\r\\n\\r\\n        if(storageId == 0) {\\r\\n            _stake(tokenId_, projectAddress_, owner);\\r\\n        }\\r\\n        else {\\r\\n            address prevProjectAddress = _extractProjectAddressFromStorageId(storageId);\\r\\n\\r\\n            require(projectAddress_ != prevProjectAddress, \\\"Already staked\\\");\\r\\n\\r\\n            _unstake(prevProjectAddress, storageId, tokenId_, owner);\\r\\n\\r\\n            _stake(tokenId_, projectAddress_,owner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Untakes a tokenId_ from its currently staked project\\r\\n    */\\r\\n    function unstake(uint96 tokenId_) public override {\\r\\n        uint256 storageId = _tokenIdToStorageId[tokenId_];\\r\\n        require(storageId != 0, \\\"Token not staked\\\");\\r\\n\\r\\n        address projectAddress = _extractProjectAddressFromStorageId(storageId);\\r\\n\\r\\n        address owner = _targetContract.ownerOf(tokenId_);\\r\\n        require(owner == msg.sender || isApprovedForProject(projectAddress, owner, msg.sender), \\\"Must own token or be approved\\\");\\r\\n\\r\\n        _unstake(projectAddress, storageId, tokenId_, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Stakes multiple \\r\\n    */\\r\\n    function stakeMultiple(uint96[] calldata tokenIds_, address[] calldata projectAddresses_) external override {\\r\\n        require(tokenIds_.length == projectAddresses_.length, \\\"Invalid input lengths\\\");\\r\\n\\r\\n        for(uint256 i = 0; i < tokenIds_.length; i++) {\\r\\n            stake(tokenIds_[i], projectAddresses_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Untakes multiple \\r\\n    */\\r\\n    function unstakeMultiple(uint96[] calldata tokenIds_) external override {\\r\\n        require(tokenIds_.length > 0);\\r\\n\\r\\n        for(uint256 i = 0; i < tokenIds_.length; i++) {\\r\\n            unstake(tokenIds_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* APPROVALS */\\r\\n\\r\\n    /**\\r\\n        @dev Approves an address to be able to stake and unstake\\r\\n    */\\r\\n    function approveForProject(address projectAddress_, address operator_) external {\\r\\n        _operatorApprovals[msg.sender][projectAddress_] = operator_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Revokes address approval\\r\\n    */\\r\\n    function revokeProjectApproval(address projectAddress_) external {\\r\\n        delete _operatorApprovals[msg.sender][projectAddress_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Returns a boolean indicated whether am address is approved to stake/unstake by an owner\\r\\n    */\\r\\n    function isApprovedForProject(address projectAddress_, address owner_, address operator_) public view returns (bool) {\\r\\n        return (_operatorApprovals[owner_][projectAddress_] == operator_);\\r\\n    }\\r\\n\\r\\n    /* VIEW UTILITIES */\\r\\n\\r\\n    /**\\r\\n        @dev Gets a count of how many projects are staked against a project\\r\\n    */\\r\\n    function getCountByProjectAddress(address projectAddress_) external view override returns (uint256) {\\r\\n        return _projectAddressToStakedCounts[projectAddress_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Gets a tokenId at index that is staked against a project\\r\\n    */\\r\\n    function getTokenIdByProjectAddressAndIndex(address projectAddress_, uint96 index_) external view override returns (uint256) {\\r\\n        uint256 count = _projectAddressToStakedCounts[projectAddress_];\\r\\n        require(count > 0, \\\"No tokens staked\\\");\\r\\n        \\r\\n        uint256 storageId = _createStorageId(projectAddress_, index_);\\r\\n        return _storageIdToToken[storageId].tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Get project address that a token is currently staked against\\r\\n    */\\r\\n    function getProjectAddressByTokenId(uint96 tokenId_) public view override returns (address) {\\r\\n        uint256 storageId = _tokenIdToStorageId[tokenId_];\\r\\n        require(storageId != 0, \\\"Token not staked\\\");\\r\\n\\r\\n        address projectAddress = _extractProjectAddressFromStorageId(storageId);\\r\\n\\r\\n        return projectAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Get project addresses that an array of tokens are currently staked against\\r\\n    */\\r\\n    function getProjectAddressesByTokenIds(uint96[] calldata tokenIds_) external view override returns (address[] memory) {\\r\\n        address[] memory result = new address[](tokenIds_.length);\\r\\n        for(uint256 i = 0; i < tokenIds_.length; i++) {\\r\\n            result[i] = getProjectAddressByTokenId(tokenIds_[i]);\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Returns an array of booleans indicated whether the tokens are currently staked\\r\\n    */\\r\\n    function checkTokenIdsStaked(uint96[] calldata tokenIds_) external view override returns (bool[] memory) {\\r\\n        bool[] memory result = new bool[](tokenIds_.length);\\r\\n        for(uint256 i = 0; i < tokenIds_.length; i++) {\\r\\n            result[i] = (_tokenIdToStorageId[tokenIds_[i]] != 0);\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Returns an array of tokenIds that an account currently has staked\\r\\n    */\\r\\n    function getStakedTokenIdsOfOwner(address owner_) external view override returns (uint256[] memory) {\\r\\n        uint256 balance = _targetContract.balanceOf(owner_);\\r\\n\\r\\n        uint256 count = 0;\\r\\n        uint256[] memory allTokenIds = new uint256[](balance);  \\r\\n        for(uint256 i = 0; i < balance; i++) {\\r\\n            uint256 tokenId = _targetContract.tokenOfOwnerByIndex(owner_, i);\\r\\n            uint256 storageId = _tokenIdToStorageId[uint96(tokenId)];\\r\\n            allTokenIds[i] = tokenId;\\r\\n            if(storageId != 0) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 tokenCounter = 0;\\r\\n        uint256[] memory tokenIds = new uint256[](count);  \\r\\n        for(uint256 i = 0; i < allTokenIds.length; i++) {\\r\\n            uint256 storageId = _tokenIdToStorageId[uint96(allTokenIds[i])];\\r\\n            if(storageId != 0) {\\r\\n                tokenIds[tokenCounter] = allTokenIds[i];\\r\\n                tokenCounter++;\\r\\n            }\\r\\n\\r\\n            if(tokenCounter == count) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /* CONTRACT HELPER METHODS */\\r\\n\\r\\n    /**\\r\\n        @dev Returns a boolean indicating whether a token is staked against a particular project,\\r\\n        needed for wrapper contracts to verufy that a token is staked against 1 or more projects that it approves rewards for\\r\\n    */\\r\\n    function checkTokenIdStakedToProject(uint96 tokenId_, address projectAddress_) external view override returns (bool) {\\r\\n        uint256 storageId = _tokenIdToStorageId[tokenId_];\\r\\n        if(storageId == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        address projectAddress = _extractProjectAddressFromStorageId(storageId);\\r\\n        if(projectAddress != projectAddress_) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Returns the TokenStake instance containing the tokennId and timstamp of when it was staked against the project\\r\\n        allowing wrapper contracts to calculate the rewards\\r\\n    */\\r\\n    function getStakedTokenById(uint96 tokenId_) external view override returns (TokenStake memory) {\\r\\n        uint256 storageId = _tokenIdToStorageId[tokenId_];\\r\\n        require(storageId != 0, \\\"Token not staked\\\");\\r\\n\\r\\n        return _storageIdToToken[storageId];\\r\\n    }\\r\\n\\r\\n    /* Only used for unit tests via a wrapper contract but may also be used by other wrapper contracts in the future */\\r\\n    function getStorageIdByTokenId(uint96 tokenId_) external view returns (uint256) {\\r\\n        return _tokenIdToStorageId[tokenId_];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ISentiMetaStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface ISentiMetaStaking {\\r\\n    struct TokenStake {\\r\\n        uint48 timestamp;\\r\\n        uint96 tokenId;\\r\\n    }\\r\\n\\r\\n    function stake(uint96 tokenId_, address projectAddress_) external;\\r\\n\\r\\n    function unstake(uint96 tokenId_) external;\\r\\n\\r\\n    function stakeMultiple(uint96[] calldata tokenIds_, address[] calldata projectAddresss_) external;\\r\\n\\r\\n    function unstakeMultiple(uint96[] calldata tokenIds_) external;\\r\\n\\r\\n    function getCountByProjectAddress(address projectAddress_) external view returns (uint256);\\r\\n\\r\\n    function getTokenIdByProjectAddressAndIndex(address projectAddress_, uint96 index_) external view returns (uint256);\\r\\n\\r\\n    function getProjectAddressByTokenId(uint96 tokenId_) external view returns (address);\\r\\n\\r\\n    function getProjectAddressesByTokenIds(uint96[] calldata tokenIds_) external view returns (address[] memory);\\r\\n\\r\\n    function checkTokenIdsStaked(uint96[] calldata tokenIds_) external view returns (bool[] memory);\\r\\n\\r\\n    function getStakedTokenIdsOfOwner(address owner_) external view returns (uint256[] memory);\\r\\n\\r\\n    /* CONTRACT HELPER METHODS */\\r\\n    function checkTokenIdStakedToProject(uint96 tokenId_, address projectAddress_) external view returns (bool);\\r\\n\\r\\n    function getStakedTokenById(uint96 tokenId_) external view returns (TokenStake memory);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"tokenId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"totalStaked\",\"type\":\"uint96\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"approveForProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"}],\"name\":\"checkTokenIdStakedToProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"tokenIds_\",\"type\":\"uint96[]\"}],\"name\":\"checkTokenIdsStaked\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"}],\"name\":\"getCountByProjectAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"}],\"name\":\"getProjectAddressByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"tokenIds_\",\"type\":\"uint96[]\"}],\"name\":\"getProjectAddressesByTokenIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"}],\"name\":\"getStakedTokenById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint96\",\"name\":\"tokenId\",\"type\":\"uint96\"}],\"internalType\":\"struct ISentiMetaStaking.TokenStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"getStakedTokenIdsOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"}],\"name\":\"getStorageIdByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"index_\",\"type\":\"uint96\"}],\"name\":\"getTokenIdByProjectAddressAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"}],\"name\":\"revokeProjectApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"tokenIds_\",\"type\":\"uint96[]\"},{\"internalType\":\"address[]\",\"name\":\"projectAddresses_\",\"type\":\"address[]\"}],\"name\":\"stakeMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"tokenId_\",\"type\":\"uint96\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96[]\",\"name\":\"tokenIds_\",\"type\":\"uint96[]\"}],\"name\":\"unstakeMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"name\":\"updateTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SentiMetaStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "500000", "ConstructorArguments": "00000000000000000000000057ffcfca0b80089c266082b5499e45b30db7f7b6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}