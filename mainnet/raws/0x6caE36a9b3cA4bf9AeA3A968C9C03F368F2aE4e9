{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SurrealestateStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n// The NFT that can be staked here.\\ninterface IPPASurrealestates {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\n// A listening contract can implement this function to get notified any time a user stakes or unstakes.\\ninterface IStakingListener {\\n    function notifyChange(address account) external;\\n}\\n\\ncontract SurrealestateStaking is ERC721Holder, Ownable {\\n    constructor() public {}\\n\\n    IPPASurrealestates surrealestates;\\n    address surrealestateContractAddress;\\n\\n    // The period which people can lock their funds up for to get an xtra multiplier on rewards earned.\\n    uint256 stakingLockPeriod = 7776000; // 90 days in seconds.\\n\\n    // (UserAddress => (TokenID => Owned?))\\n    mapping(address => mapping(uint256 => bool)) public ownerships;\\n    // Helper list for easy lookup of what Surrealestates an individual has ever staked.\\n    mapping(address => uint256[]) public tokensTouched;\\n    // How many Surrealestates an individual is currently staking.\\n    mapping(address => uint256) public numStakedByAddress;\\n    // How many Surrealestates are locked in staking by this invididual.\\n    mapping(address => uint256) public numLockedByAddress;\\n    // Whether a token is currently recorded as locked.\\n    mapping(uint256 => bool) public lockedTokens;\\n    // (TokenID => Timestamp))\\n    mapping(uint256 => uint256) public tokenLockedUntil;\\n    // Any time a user interacts with the contract, their rewards up to that point will be calculated and saved.\\n    mapping(address => uint256) private _tokensEarnedBeforeLastRefresh;\\n    // Each user has a particular staking refresh timestamp (i.e. last time their rewards were calculated and saved)/\\n    mapping(address => uint256) private _stakingRefreshTimestamp;\\n    // Addresses that are allowed to do things like deduct tokens from a user's account or award earning multipliers.\\n    mapping(address => bool) public approvedManagers;\\n    // A multiplier defaults to 1 but can be set by a manager in the future for a particular address. This increases\\n    // the overall rate of earning.\\n    mapping(address => StakingMultiplier) public stakingMultiplier;\\n\\n    IStakingListener[] listeners;\\n\\n    struct StakingMultiplier {\\n        uint256 numeratorMinus1; // Store as \\\"minus 1\\\" because we want this to default to 1, but uninitialized vars default to 0.\\n        uint256 denominatorMinus1;\\n    }\\n\\n    // Number of seconds a surrealestate must be staked in order to earn 1 token.\\n    uint256 public earnPeriod = 60;\\n\\n    modifier onlyApprovedManager() {\\n        require(\\n            owner() == msg.sender || approvedManagers[msg.sender],\\n            \\\"Caller is not an approved manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * To stake a Surrealestate, the user sends the ERC721 token to this contract address, which invokes\\n     * this function.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override returns (bytes4) {\\n        require(\\n            msg.sender == surrealestateContractAddress,\\n            \\\"Can only receive Surrealestates NFTs\\\"\\n        );\\n        refreshTokensEarned(from);\\n\\n        ownerships[from][tokenId] = true;\\n        tokensTouched[from].push(tokenId);\\n        numStakedByAddress[from]++;\\n        _notifyAllListeners(from);\\n\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n\\n    function _notifyAllListeners(address account) internal {\\n        for (uint256 i = 0; i < listeners.length; i++) {\\n            listeners[i].notifyChange(account);\\n        }\\n    }\\n\\n    /**\\n     * User can lock their staking in for the stakingLockPeriod, which increases their multiplier.\\n     */\\n    function lockStaking(uint256 tokenId) public {\\n        require(\\n            ownerships[msg.sender][tokenId],\\n            \\\"Caller does not own the token\\\"\\n        );\\n        refreshTokensEarned(msg.sender);\\n        _lockStakingForSingleToken(tokenId);\\n    }\\n\\n    /**\\n     * Lock up staking for all tokens the user has.\\n     */\\n    function lockStakingForAll() public {\\n        refreshTokensEarned(msg.sender);\\n        for (uint256 i = 0; i < tokensTouched[msg.sender].length; i++) {\\n            uint256 tokenId = tokensTouched[msg.sender][i];\\n            if (ownerships[msg.sender][tokenId]) {\\n                _lockStakingForSingleToken(tokenId);\\n            }\\n        }\\n    }\\n\\n    function _lockStakingForSingleToken(uint256 tokenId) internal {\\n        if (tokenLockedUntil[tokenId] > block.timestamp) {\\n            // Token is already locked\\n            return;\\n        }\\n        if (!lockedTokens[tokenId]) {\\n            numLockedByAddress[msg.sender]++;\\n            lockedTokens[tokenId] = true;\\n        }\\n        tokenLockedUntil[tokenId] = block.timestamp + stakingLockPeriod;\\n    }\\n\\n    function refreshTokensEarned(address addr) internal {\\n        uint256 totalTokensEarned = calculateTokensEarned(addr);\\n        _tokensEarnedBeforeLastRefresh[addr] = totalTokensEarned;\\n        _stakingRefreshTimestamp[addr] = block.timestamp;\\n    }\\n\\n    function calculateTokensEarned(address addr) public view returns (uint256) {\\n        uint256 secondsStakedSinceLastRefresh = block.timestamp -\\n            _stakingRefreshTimestamp[addr];\\n\\n        uint256 earnPeriodsSinceLastRefresh = secondsStakedSinceLastRefresh /\\n            earnPeriod;\\n\\n        uint256 tokensEarnedAfterLastRefresh = (earnPeriodsSinceLastRefresh *\\n            (numStakedByAddress[addr] + numLockedByAddress[addr]) *\\n            (stakingMultiplier[addr].numeratorMinus1 + 1)) /\\n            (stakingMultiplier[addr].denominatorMinus1 + 1);\\n        return\\n            _tokensEarnedBeforeLastRefresh[addr] + tokensEarnedAfterLastRefresh;\\n    }\\n\\n    /**\\n     * To unstake, the user calls this function with the tokenID they want to unstake.\\n     */\\n    function unstake(uint256 tokenId) public {\\n        require(\\n            ownerships[msg.sender][tokenId],\\n            \\\"Caller is not currently staking the provided tokenId\\\"\\n        );\\n\\n        refreshTokensEarned(msg.sender);\\n        _unstakeSingle(tokenId);\\n        _notifyAllListeners(msg.sender);\\n    }\\n\\n    /**\\n     * User can unstake all their NFTs at once.\\n     */\\n    function unstakeAll() public {\\n        refreshTokensEarned(msg.sender);\\n        for (uint256 i = 0; i < tokensTouched[msg.sender].length; i++) {\\n            uint256 tokenId = tokensTouched[msg.sender][i];\\n            if (ownerships[msg.sender][tokenId]) {\\n                _unstakeSingle(tokenId);\\n            }\\n        }\\n        _notifyAllListeners(msg.sender);\\n    }\\n\\n    function _unstakeSingle(uint256 tokenId) internal {\\n        if (tokenLockedUntil[tokenId] > block.timestamp) {\\n            // Skip ones that are locked.\\n            return;\\n        }\\n\\n        // If we are past the token locktime, then we need to update the the lockedTokens map as well.\\n        if (lockedTokens[tokenId]) {\\n            lockedTokens[tokenId] = false;\\n            numLockedByAddress[msg.sender]--;\\n        }\\n\\n        surrealestates.transferFrom(address(this), msg.sender, tokenId);\\n\\n        ownerships[msg.sender][tokenId] = false;\\n        numStakedByAddress[msg.sender]--;\\n    }\\n\\n    function addApprovedManager(address managerAddr) public onlyOwner {\\n        approvedManagers[managerAddr] = true;\\n    }\\n\\n    function removeApprovedManager(address managerAddr) public onlyOwner {\\n        approvedManagers[managerAddr] = false;\\n    }\\n\\n    function setStakingLockPeriod(uint256 newPeriod)\\n        public\\n        onlyApprovedManager\\n    {\\n        stakingLockPeriod = newPeriod;\\n    }\\n\\n    function setEarnPeriod(uint256 newSeconds) public onlyApprovedManager {\\n        earnPeriod = newSeconds;\\n    }\\n\\n    function setEarningMultiplier(\\n        address addr,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public onlyApprovedManager {\\n        refreshTokensEarned(addr);\\n        stakingMultiplier[addr] = StakingMultiplier(\\n            numerator - 1,\\n            denominator - 1\\n        );\\n    }\\n\\n    function setSurrealestateContract(address newAddress) public onlyOwner {\\n        surrealestateContractAddress = newAddress;\\n        surrealestates = IPPASurrealestates(newAddress);\\n    }\\n\\n    function addStakingListener(address contractAddress) public onlyOwner {\\n        listeners.push(IStakingListener(contractAddress));\\n    }\\n\\n    function resetStakingListeners() public onlyOwner {\\n        delete listeners;\\n    }\\n\\n    // Only for use in emergency. Can be called by owner to unstake.\\n    function unstakeAllAsOwner(address addr) public onlyOwner {\\n        for (uint256 i = 0; i < tokensTouched[addr].length; i++) {\\n            uint256 tokenId = tokensTouched[addr][i];\\n            if (ownerships[addr][tokenId]) {\\n                surrealestates.transferFrom(address(this), addr, tokenId);\\n                ownerships[addr][tokenId] = false;\\n                numStakedByAddress[addr]--;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddr\",\"type\":\"address\"}],\"name\":\"addApprovedManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addStakingListener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateTokensEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStakingForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numLockedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numStakedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerships\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddr\",\"type\":\"address\"}],\"name\":\"removeApprovedManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetStakingListeners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSeconds\",\"type\":\"uint256\"}],\"name\":\"setEarnPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setEarningMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setStakingLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setSurrealestateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numeratorMinus1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominatorMinus1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensTouched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unstakeAllAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SurrealestateStaking", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}