{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: CC0-1.0\r\n//\r\n//\r\n//\r\n//\r\n// oooOooooo looka fren wats dis... shIneez?\r\n// YUMMZ many manY shineEz, deez mine now teeheeE\r\n// wat? wat it is?\r\n//\r\n// AAAAAAAUUUUUGGGHHHHH shineez on da blokcHin?\r\n// waaaaaaaaitttt you wan sum?\r\n// okieee fren, u use how uuu want teeheeE...\r\n//\r\n//\r\n//     _,   _,  __  ,  ___,,  , ,    _,  _,  ___,\r\n//    / _  / \\,'|_) | ' |  |\\ | |   / \\,/ \\,' |\r\n//   '\\_|`'\\_/ _|_)'|___|_,|'\\|'|__'\\_/'\\_/   |\r\n//     _|  '  '       '    '  `   ' '   '     '\r\n//    '      '      '            '          '\r\n//\r\n//               _    |.-\"\"-.)    /\\\r\n//              | \\   /   .= \\)  /  \\\r\n//              |  \\ / =. --  \\ /  ) |   '\r\n//     '        \\ ( \\   o\\/0   /     /\r\n//               \\_, '- /   \\   ,___/\r\n//                 /    \\__ /    \\\r\n//                 \\, ___/\\___,  /    '\r\n//          '       \\  ----     /            '\r\n//                   \\         /\r\n//      '             '--___--'\r\n//                       [ ]             '\r\n//              '       { }\r\n//                       [ ]    '             '\r\n//         '            { }\r\n//                       [ ]           '\r\n//\r\n//\r\n//\r\n// iNspired bY gObLiNtOwn, the lOOt pRojecT, sEttLementS...\r\n//\r\n// a Cc0 pRojeCt frOm imp0ster, zhOug & jAytHin stAyTHin...\r\n//\r\n//          ...enJoy... teEEhheeeEEEe...\r\n//\r\n//\r\n//\r\n//\r\n\r\n// File: @openzeppelin/contracts/utils/Base64.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides a set of functions to operate with Base64 strings.\r\n *\r\n * _Available since v4.5._\r\n */\r\nlibrary Base64 {\r\n\t/**\r\n\t * @dev Base64 Encoding/Decoding Table\r\n\t */\r\n\tstring internal constant _TABLE =\r\n\t\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n\t/**\r\n\t * @dev Converts a `bytes` to its Bytes64 `string` representation.\r\n\t */\r\n\tfunction encode(bytes memory data) internal pure returns (string memory) {\r\n\t\t/**\r\n\t\t * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\r\n\t\t * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\r\n\t\t */\r\n\t\tif (data.length == 0) return '';\r\n\r\n\t\t// Loads the table into memory\r\n\t\tstring memory table = _TABLE;\r\n\r\n\t\t// Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\r\n\t\t// and split into 4 numbers of 6 bits.\r\n\t\t// The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\r\n\t\t// - `data.length + 2`  -> Round up\r\n\t\t// - `/ 3`              -> Number of 3-bytes chunks\r\n\t\t// - `4 *`              -> 4 characters for each chunk\r\n\t\tstring memory result = new string(4 * ((data.length + 2) / 3));\r\n\r\n\t\tassembly {\r\n\t\t\t// Prepare the lookup table (skip the first \"length\" byte)\r\n\t\t\tlet tablePtr := add(table, 1)\r\n\r\n\t\t\t// Prepare result pointer, jump over length\r\n\t\t\tlet resultPtr := add(result, 32)\r\n\r\n\t\t\t// Run over the input, 3 bytes at a time\r\n\t\t\tfor {\r\n\t\t\t\tlet dataPtr := data\r\n\t\t\t\tlet endPtr := add(data, mload(data))\r\n\t\t\t} lt(dataPtr, endPtr) {\r\n\r\n\t\t\t} {\r\n\t\t\t\t// Advance 3 bytes\r\n\t\t\t\tdataPtr := add(dataPtr, 3)\r\n\t\t\t\tlet input := mload(dataPtr)\r\n\r\n\t\t\t\t// To write each character, shift the 3 bytes (18 bits) chunk\r\n\t\t\t\t// 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\r\n\t\t\t\t// and apply logical AND with 0x3F which is the number of\r\n\t\t\t\t// the previous character in the ASCII table prior to the Base64 Table\r\n\t\t\t\t// The result is then added to the table to get the character to write,\r\n\t\t\t\t// and finally write it in the result pointer but with a left shift\r\n\t\t\t\t// of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\r\n\r\n\t\t\t\tmstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1) // Advance\r\n\r\n\t\t\t\tmstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1) // Advance\r\n\r\n\t\t\t\tmstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1) // Advance\r\n\r\n\t\t\t\tmstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\r\n\t\t\t\tresultPtr := add(resultPtr, 1) // Advance\r\n\t\t\t}\r\n\r\n\t\t\t// When data `bytes` is not exactly 3 bytes long\r\n\t\t\t// it is padded with `=` characters at the end\r\n\t\t\tswitch mod(mload(data), 3)\r\n\t\t\tcase 1 {\r\n\t\t\t\tmstore8(sub(resultPtr, 1), 0x3d)\r\n\t\t\t\tmstore8(sub(resultPtr, 2), 0x3d)\r\n\t\t\t}\r\n\t\t\tcase 2 {\r\n\t\t\t\tmstore8(sub(resultPtr, 1), 0x3d)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\tbytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn '0';\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn '0x00';\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (string memory)\r\n\t{\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = '0';\r\n\t\tbuffer[1] = 'x';\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, 'Strings: hex length insufficient');\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n// File: @rari-capital/solmate/src/tokens/ERC721.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721 {\r\n\t/*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 indexed id\r\n\t);\r\n\r\n\tevent ApprovalForAll(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed operator,\r\n\t\tbool approved\r\n\t);\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                         METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tstring public name;\r\n\r\n\tstring public symbol;\r\n\r\n\tfunction tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                      ERC721 BALANCE/OWNER STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tmapping(uint256 => address) internal _ownerOf;\r\n\r\n\tmapping(address => uint256) internal _balanceOf;\r\n\r\n\tfunction ownerOf(uint256 id) public view virtual returns (address owner) {\r\n\t\trequire((owner = _ownerOf[id]) != address(0), 'NOT_MINTED');\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) public view virtual returns (uint256) {\r\n\t\trequire(owner != address(0), 'ZERO_ADDRESS');\r\n\r\n\t\treturn _balanceOf[owner];\r\n\t}\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                         ERC721 APPROVAL STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tmapping(uint256 => address) public getApproved;\r\n\r\n\tmapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tconstructor(string memory _name, string memory _symbol) {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t}\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tfunction approve(address spender, uint256 id) public virtual {\r\n\t\taddress owner = _ownerOf[id];\r\n\r\n\t\trequire(\r\n\t\t\tmsg.sender == owner || isApprovedForAll[owner][msg.sender],\r\n\t\t\t'NOT_AUTHORIZED'\r\n\t\t);\r\n\r\n\t\tgetApproved[id] = spender;\r\n\r\n\t\temit Approval(owner, spender, id);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual {\r\n\t\tisApprovedForAll[msg.sender][operator] = approved;\r\n\r\n\t\temit ApprovalForAll(msg.sender, operator, approved);\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id\r\n\t) public virtual {\r\n\t\trequire(from == _ownerOf[id], 'WRONG_FROM');\r\n\r\n\t\trequire(to != address(0), 'INVALID_RECIPIENT');\r\n\r\n\t\trequire(\r\n\t\t\tmsg.sender == from ||\r\n\t\t\t\tisApprovedForAll[from][msg.sender] ||\r\n\t\t\t\tmsg.sender == getApproved[id],\r\n\t\t\t'NOT_AUTHORIZED'\r\n\t\t);\r\n\r\n\t\t// Underflow of the sender's balance is impossible because we check for\r\n\t\t// ownership above and the recipient's balance can't realistically overflow.\r\n\t\tunchecked {\r\n\t\t\t_balanceOf[from]--;\r\n\r\n\t\t\t_balanceOf[to]++;\r\n\t\t}\r\n\r\n\t\t_ownerOf[id] = to;\r\n\r\n\t\tdelete getApproved[id];\r\n\r\n\t\temit Transfer(from, to, id);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id\r\n\t) public virtual {\r\n\t\ttransferFrom(from, to, id);\r\n\r\n\t\trequire(\r\n\t\t\tto.code.length == 0 ||\r\n\t\t\t\tERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, '') ==\r\n\t\t\t\tERC721TokenReceiver.onERC721Received.selector,\r\n\t\t\t'UNSAFE_RECIPIENT'\r\n\t\t);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id,\r\n\t\tbytes calldata data\r\n\t) public virtual {\r\n\t\ttransferFrom(from, to, id);\r\n\r\n\t\trequire(\r\n\t\t\tto.code.length == 0 ||\r\n\t\t\t\tERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n\t\t\t\tERC721TokenReceiver.onERC721Received.selector,\r\n\t\t\t'UNSAFE_RECIPIENT'\r\n\t\t);\r\n\t}\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId)\r\n\t\tpublic\r\n\t\tview\r\n\t\tvirtual\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn\r\n\t\t\tinterfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n\t\t\tinterfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n\t\t\tinterfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n\t}\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tfunction _mint(address to, uint256 id) internal virtual {\r\n\t\trequire(to != address(0), 'INVALID_RECIPIENT');\r\n\r\n\t\trequire(_ownerOf[id] == address(0), 'ALREADY_MINTED');\r\n\r\n\t\t// Counter overflow is incredibly unrealistic.\r\n\t\tunchecked {\r\n\t\t\t_balanceOf[to]++;\r\n\t\t}\r\n\r\n\t\t_ownerOf[id] = to;\r\n\r\n\t\temit Transfer(address(0), to, id);\r\n\t}\r\n\r\n\tfunction _burn(uint256 id) internal virtual {\r\n\t\taddress owner = _ownerOf[id];\r\n\r\n\t\trequire(owner != address(0), 'NOT_MINTED');\r\n\r\n\t\t// Ownership check above ensures no underflow.\r\n\t\tunchecked {\r\n\t\t\t_balanceOf[owner]--;\r\n\t\t}\r\n\r\n\t\tdelete _ownerOf[id];\r\n\r\n\t\tdelete getApproved[id];\r\n\r\n\t\temit Transfer(owner, address(0), id);\r\n\t}\r\n\r\n\t/*//////////////////////////////////////////////////////////////\r\n                        INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n\tfunction _safeMint(address to, uint256 id) internal virtual {\r\n\t\t_mint(to, id);\r\n\r\n\t\trequire(\r\n\t\t\tto.code.length == 0 ||\r\n\t\t\t\tERC721TokenReceiver(to).onERC721Received(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\taddress(0),\r\n\t\t\t\t\tid,\r\n\t\t\t\t\t''\r\n\t\t\t\t) ==\r\n\t\t\t\tERC721TokenReceiver.onERC721Received.selector,\r\n\t\t\t'UNSAFE_RECIPIENT'\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _safeMint(\r\n\t\taddress to,\r\n\t\tuint256 id,\r\n\t\tbytes memory data\r\n\t) internal virtual {\r\n\t\t_mint(to, id);\r\n\r\n\t\trequire(\r\n\t\t\tto.code.length == 0 ||\r\n\t\t\t\tERC721TokenReceiver(to).onERC721Received(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\taddress(0),\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tdata\r\n\t\t\t\t) ==\r\n\t\t\t\tERC721TokenReceiver.onERC721Received.selector,\r\n\t\t\t'UNSAFE_RECIPIENT'\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721TokenReceiver {\r\n\tfunction onERC721Received(\r\n\t\taddress,\r\n\t\taddress,\r\n\t\tuint256,\r\n\t\tbytes calldata\r\n\t) external virtual returns (bytes4) {\r\n\t\treturn ERC721TokenReceiver.onERC721Received.selector;\r\n\t}\r\n}\r\n\r\n// File: contracts/GoblinLoot.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract GoblinLoot is ERC721 {\r\n\tusing Strings for uint256;\r\n\r\n\tuint256 public constant MAX_SUPPLY = 5000;\r\n\tuint256 public constant MINT_DURATION = 48 hours;\r\n\tuint256 public totalSupply;\r\n\tuint256 public mintClosingTime;\r\n\tbool public mintIsActive;\r\n\taddress public tipWithdrawer;\r\n\r\n\taddress private imp0ster = 0x023006cED81c7Bf6D17A5bC1e1B40104114d0019;\r\n\taddress private zhoug = 0xc99547f73B0Aa2C69E56849e8986137776D72474;\r\n\r\n\t// -------------------------------------------------------------------------------------------------- kOonstrukktorr\r\n\tconstructor() ERC721('GoblinLoot', 'gObLooT') {\r\n\t\ttipWithdrawer = msg.sender;\r\n\t\tmintClosingTime = block.timestamp + MINT_DURATION;\r\n\t\tmintIsActive = true;\r\n\t\t_batchMint(imp0ster, 50);\r\n\t\t_batchMint(zhoug, 50);\r\n\t}\r\n\r\n\t// -------------------------------------------------------------------------------------------------- sLott KeYsss\r\n\tuint256 internal constant SLOT_WEAP = 1;\r\n\tuint256 internal constant SLOT_HEAD = 2;\r\n\tuint256 internal constant SLOT_BODY = 3;\r\n\tuint256 internal constant SLOT_HAND = 4;\r\n\tuint256 internal constant SLOT_FOOT = 5;\r\n\tuint256 internal constant SLOT_NECK = 6;\r\n\tuint256 internal constant SLOT_RING = 7;\r\n\tuint256 internal constant SLOT_TRI1 = 8;\r\n\tuint256 internal constant SLOT_TRI2 = 9;\r\n\r\n\t// -------------------------------------------------------------------------------------------------- matEriallss\r\n\tstring[] internal heavyMaterials = [\r\n\t\t'bone',\r\n\t\t'stone',\r\n\t\t'bronze',\r\n\t\t'wood',\r\n\t\t'rubber',\r\n\t\t'iron',\r\n\t\t'gold',\r\n\t\t'copper',\r\n\t\t'tin',\r\n\t\t'goblinsteel',\r\n\t\t'scrap'\r\n\t];\r\n\r\n\tstring[] internal lightMaterials = [\r\n\t\t'linen',\r\n\t\t'fur',\r\n\t\t'leather',\r\n\t\t'bark',\r\n\t\t'cotton',\r\n\t\t'cardboard',\r\n\t\t'hide',\r\n\t\t'scrap',\r\n\t\t'burlap',\r\n\t\t'goblinmail',\r\n\t\t'paper',\r\n\t\t'snakeskin '\r\n\t];\r\n\r\n\t// -------------------------------------------------------------------------------------------------- iTEMs\r\n\tstring[] internal weapons = [\r\n\t\t'club',\r\n\t\t'scythe',\r\n\t\t'hammer',\r\n\t\t'sickle',\r\n\t\t'longspear',\r\n\t\t'shortspear',\r\n\t\t'staff',\r\n\t\t'slingshot',\r\n\t\t'shortbow',\r\n\t\t'longbow',\r\n\t\t'mace',\r\n\t\t'dagger',\r\n\t\t'totem',\r\n\t\t'wand',\r\n\t\t'pickaxe',\r\n\t\t'hatchet',\r\n\t\t'maul',\r\n\t\t'knife'\r\n\t];\r\n\r\n\tstring[] internal headGear = [\r\n\t\t'cap',\r\n\t\t'hood',\r\n\t\t'helmet',\r\n\t\t'crown',\r\n\t\t'earring',\r\n\t\t'top hat',\r\n\t\t'bonnet',\r\n\t\t'kettle',\r\n\t\t'pot lid',\r\n\t\t'goggles',\r\n\t\t'monocle',\r\n\t\t'bowler',\r\n\t\t'eyepatch'\r\n\t];\r\n\r\n\tstring[] internal bodyGear = [\r\n\t\t'husk',\r\n\t\t'cloak',\r\n\t\t'pads',\r\n\t\t'pauldrons',\r\n\t\t'waistcoat',\r\n\t\t'loincloth',\r\n\t\t'trousers',\r\n\t\t'robe',\r\n\t\t'rags',\r\n\t\t'harness',\r\n\t\t'tunic',\r\n\t\t'wrappings',\r\n\t\t'cuirass',\r\n\t\t'crop top',\r\n\t\t'sash',\r\n\t\t'toga',\r\n\t\t'belt',\r\n\t\t'vest',\r\n\t\t'cape'\r\n\t];\r\n\r\n\tstring[] internal handGear = [\r\n\t\t'hooks',\r\n\t\t'gloves',\r\n\t\t'bracers',\r\n\t\t'gauntlets',\r\n\t\t'bangles',\r\n\t\t'knuckleguards',\r\n\t\t'bracelets',\r\n\t\t'claws',\r\n\t\t'handwraps',\r\n\t\t'mittens',\r\n\t\t'wristbands',\r\n\t\t'talons'\r\n\t];\r\n\r\n\tstring[] internal footGear = [\r\n\t\t'sandals',\r\n\t\t'boots',\r\n\t\t'footwraps',\r\n\t\t'greaves',\r\n\t\t'anklets',\r\n\t\t'shackles',\r\n\t\t'booties',\r\n\t\t'socks',\r\n\t\t'shinguards',\r\n\t\t'toe rings',\r\n\t\t'slippers',\r\n\t\t'shoes',\r\n\t\t'clogs'\r\n\t];\r\n\r\n\tstring[] internal necklaces = [\r\n\t\t'chain',\r\n\t\t'amulet',\r\n\t\t'locket',\r\n\t\t'pendant',\r\n\t\t'choker'\r\n\t];\r\n\r\n\tstring[] internal rings = [\r\n\t\t'gold ring',\r\n\t\t'silver ring',\r\n\t\t'bronze ring',\r\n\t\t'iron ring'\r\n\t];\r\n\r\n\tstring[] internal trinkets1 = [\r\n\t\t'pipe',\r\n\t\t'sundial',\r\n\t\t'clock',\r\n\t\t'bellows',\r\n\t\t'brush',\r\n\t\t'comb',\r\n\t\t'candle',\r\n\t\t'candlestick',\r\n\t\t'torch',\r\n\t\t'scratcher',\r\n\t\t'gaslamp',\r\n\t\t'shoehorn',\r\n\t\t'dice',\r\n\t\t'spoon',\r\n\t\t'periscope',\r\n\t\t'spyglass',\r\n\t\t'lute',\r\n\t\t'drum',\r\n\t\t'tamborine',\r\n\t\t'whistle',\r\n\t\t'pocketwatch',\r\n\t\t'compass',\r\n\t\t'whip'\r\n\t];\r\n\r\n\tstring[] internal trinkets2 = [\r\n\t\t'potato',\r\n\t\t'pickle',\r\n\t\t'ruby',\r\n\t\t'herb pouch',\r\n\t\t'tooth',\r\n\t\t'jawbone',\r\n\t\t'dandelions',\r\n\t\t'sapphire',\r\n\t\t'diamond',\r\n\t\t'mushroom',\r\n\t\t'emerald',\r\n\t\t'sardines',\r\n\t\t'sulfur',\r\n\t\t'seeds',\r\n\t\t'beans',\r\n\t\t'quicksilver',\r\n\t\t'skull',\r\n\t\t'blueberries',\r\n\t\t'egg',\r\n\t\t'meat',\r\n\t\t'oil',\r\n\t\t'chalk',\r\n\t\t'charcoal',\r\n\t\t'twigs',\r\n\t\t'sweets',\r\n\t\t'amethyst',\r\n\t\t'obsidian',\r\n\t\t'pebbles',\r\n\t\t'goo',\r\n\t\t'rose',\r\n\t\t'seaweed',\r\n\t\t'feathers'\r\n\t];\r\n\r\n\tstring[] internal trinkets3 = [\r\n\t\t'sailcloth',\r\n\t\t'cog',\r\n\t\t'rope',\r\n\t\t'vial',\r\n\t\t'flask',\r\n\t\t'jar',\r\n\t\t'gasket',\r\n\t\t'shears',\r\n\t\t'nails',\r\n\t\t'screws',\r\n\t\t'thread',\r\n\t\t'sewing needle',\r\n\t\t'mallet',\r\n\t\t'fishing rod',\r\n\t\t'grindstone',\r\n\t\t'bowl',\r\n\t\t'paintbrush',\r\n\t\t'scroll',\r\n\t\t'scraper',\r\n\t\t'???',\r\n\t\t'grappling hook',\r\n\t\t'sand',\r\n\t\t'stein',\r\n\t\t'teapot',\r\n\t\t'wineskin'\r\n\t];\r\n\r\n\t// -------------------------------------------------------------------------------------------------- preEefiX aN SUFfixxx\r\n\tstring[] internal jewelryPrefixes = [\r\n\t\t'crude',\r\n\t\t'flawed',\r\n\t\t'rusty',\r\n\t\t'perfect',\r\n\t\t'fine',\r\n\t\t'flawless',\r\n\t\t'noble',\r\n\t\t'embossed',\r\n\t\t'tainted',\r\n\t\t'chipped',\r\n\t\t'worn',\r\n\t\t'sooty',\r\n\t\t'stolen'\r\n\t];\r\n\r\n\tstring[] internal prefixes = [\r\n\t\t'sparkling',\r\n\t\t'shiny',\r\n\t\t'slick',\r\n\t\t'glowing',\r\n\t\t'polished',\r\n\t\t'damp',\r\n\t\t'blighty',\r\n\t\t'bloody',\r\n\t\t'thorny',\r\n\t\t'doomed',\r\n\t\t'gloomy',\r\n\t\t'grim',\r\n\t\t'makeshift',\r\n\t\t'noxious',\r\n\t\t'hairy',\r\n\t\t'mossy',\r\n\t\t'stinky',\r\n\t\t'dusty',\r\n\t\t'charred',\r\n\t\t'spiky',\r\n\t\t'cursed',\r\n\t\t'scaly',\r\n\t\t'crusty',\r\n\t\t'damned',\r\n\t\t'briny',\r\n\t\t'dirty',\r\n\t\t'slimy',\r\n\t\t'muddy',\r\n\t\t'lucky',\r\n\t\t\"artificer's\",\r\n\t\t\"wayfarer's\",\r\n\t\t\"thief's\",\r\n\t\t\"captain's\",\r\n\t\t\"henchman's\",\r\n\t\t\"daredevil's\",\r\n\t\t\"bandit's\",\r\n\t\t\"inspector's\",\r\n\t\t\"raider's\",\r\n\t\t\"miner's\",\r\n\t\t\"builder's\"\r\n\t];\r\n\r\n\tstring[] internal suffixes = [\r\n\t\t'of RRRAAAAAHHH',\r\n\t\t'of AAAUUUGGHHH',\r\n\t\t'of power',\r\n\t\t'of sneak',\r\n\t\t'of strike',\r\n\t\t'of smite',\r\n\t\t'of charm',\r\n\t\t'of trade',\r\n\t\t'of anger',\r\n\t\t'of rage',\r\n\t\t'of fury',\r\n\t\t'of ash',\r\n\t\t'of fear',\r\n\t\t'of havoc',\r\n\t\t'of rapture',\r\n\t\t'of terror',\r\n\t\t'of the cliffs',\r\n\t\t'of the swamp',\r\n\t\t'of the bog',\r\n\t\t'of the rift',\r\n\t\t'of the sewers',\r\n\t\t'of the woods',\r\n\t\t'of the caves',\r\n\t\t'of the grave'\r\n\t];\r\n\r\n\t// -------------------------------------------------------------------------------------------------- eRRorzZ aaN modIffieerss\r\n\terror MintInactive();\r\n\terror NotEnoughLoot();\r\n\terror NotAuthorized();\r\n\terror NotMinted();\r\n\r\n\tmodifier mintControl() {\r\n\t\t_;\r\n\t\tif (totalSupply == MAX_SUPPLY || block.timestamp > mintClosingTime) {\r\n\t\t\tmintIsActive = false;\r\n\t\t}\r\n\t}\r\n\r\n\t// -------------------------------------------------------------------------------------------------- wRiTez\r\n\tfunction _batchMint(address _recipient, uint256 _amount) private {\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i = 1; i < _amount + 1; ++i) {\r\n\t\t\t\t_safeMint(_recipient, totalSupply + i);\r\n\t\t\t}\r\n\t\t\ttotalSupply += _amount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction mint() public mintControl {\r\n\t\tif (!mintIsActive) revert MintInactive();\r\n\t\tif (totalSupply == MAX_SUPPLY) revert NotEnoughLoot();\r\n\t\tunchecked {\r\n\t\t\t++totalSupply;\r\n\t\t}\r\n\t\t_safeMint(msg.sender, totalSupply);\r\n\t}\r\n\r\n\tfunction mintThreeWithATip() public payable mintControl {\r\n\t\tif (!mintIsActive) revert MintInactive();\r\n\t\tif (totalSupply + 3 > MAX_SUPPLY) revert NotEnoughLoot();\r\n\t\tif (msg.value <= 0) revert NotAuthorized();\r\n\t\t_batchMint(msg.sender, 3);\r\n\t}\r\n\r\n\tfunction burn(uint256 _tokenId) public {\r\n\t\tif (\r\n\t\t\tmsg.sender != address(_ownerOf[_tokenId]) ||\r\n\t\t\tisApprovedForAll[_ownerOf[_tokenId]][msg.sender]\r\n\t\t) revert NotAuthorized();\r\n\t\t_burn(_tokenId);\r\n\t}\r\n\r\n\tfunction updateTipWithdrawer(address _newWithdrawer) public {\r\n\t\tif (msg.sender != tipWithdrawer) revert NotAuthorized();\r\n\t\ttipWithdrawer = _newWithdrawer;\r\n\t}\r\n\r\n\tfunction withdrawTips() external payable {\r\n\t\tif (msg.sender != tipWithdrawer) revert NotAuthorized();\r\n\t\t(bool os, ) = payable(tipWithdrawer).call{value: address(this).balance}('');\r\n\t\trequire(os);\r\n\t}\r\n\r\n\t// -------------------------------------------------------------------------------------------------- rEEdz\r\n\tfunction isHeavyMaterial(uint256 _key) internal pure returns (bool) {\r\n\t\treturn (_key == SLOT_WEAP || _key == SLOT_HEAD || _key == SLOT_HAND);\r\n\t}\r\n\r\n\tfunction isLightMaterial(uint256 _key) internal pure returns (bool) {\r\n\t\treturn (_key == SLOT_BODY || _key == SLOT_FOOT);\r\n\t}\r\n\r\n\tfunction isTrinket(uint256 _key) internal pure returns (bool) {\r\n\t\treturn (_key == SLOT_TRI1 || _key == SLOT_TRI2);\r\n\t}\r\n\r\n\tfunction isJewelry(uint256 _key) internal pure returns (bool) {\r\n\t\treturn (_key == SLOT_NECK || _key == SLOT_RING);\r\n\t}\r\n\r\n\tfunction random(uint256 _seedOne, uint256 _seedTwo)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\tuint256(\r\n\t\t\t\tkeccak256(\r\n\t\t\t\t\tabi.encodePacked('AUuuU', _seedOne, 'UuUu', _seedTwo, 'uUgHH')\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction join(string memory _itemOne, string memory _itemTwo)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (string memory)\r\n\t{\r\n\t\treturn string(abi.encodePacked(_itemOne, ' ', _itemTwo));\r\n\t}\r\n\r\n\tfunction pluck(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _slotKey,\r\n\t\tstring[] memory _sourceArray\r\n\t) internal view returns (string memory) {\r\n\t\tuint256 rand = random(_tokenId, _slotKey);\r\n\t\tuint256 AUUUGH = rand % 69;\r\n\t\tstring memory output = _sourceArray[rand % _sourceArray.length];\r\n\r\n\t\tif (isHeavyMaterial(_slotKey)) {\r\n\t\t\toutput = join(heavyMaterials[rand % heavyMaterials.length], output);\r\n\t\t}\r\n\r\n\t\tif (isLightMaterial(_slotKey)) {\r\n\t\t\toutput = join(lightMaterials[rand % lightMaterials.length], output);\r\n\t\t}\r\n\r\n\t\tif (isJewelry(_slotKey)) {\r\n\t\t\toutput = join(jewelryPrefixes[rand % jewelryPrefixes.length], output);\r\n\t\t}\r\n\r\n\t\t// no prefix or suffix\r\n\t\tif (AUUUGH < 23 || isTrinket(_slotKey)) {\r\n\t\t\treturn output;\r\n\t\t}\r\n\r\n\t\t// both prefix & suffix\r\n\t\tif (AUUUGH > 55) {\r\n\t\t\t// if jewelry, apply only the suffix\r\n\t\t\tif (isJewelry(_slotKey)) {\r\n\t\t\t\treturn join(output, suffixes[rand % suffixes.length]);\r\n\t\t\t}\r\n\r\n\t\t\treturn\r\n\t\t\t\tjoin(\r\n\t\t\t\t\tjoin(prefixes[rand % prefixes.length], output),\r\n\t\t\t\t\tsuffixes[rand % suffixes.length]\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\t// prefix only\r\n\t\tif (AUUUGH > 40 && !isJewelry(_slotKey)) {\r\n\t\t\treturn join(prefixes[rand % prefixes.length], output);\r\n\t\t}\r\n\r\n\t\t// suffix only\r\n\t\treturn join(output, suffixes[rand % suffixes.length]);\r\n\t}\r\n\r\n\tfunction getWeapon(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_WEAP, weapons);\r\n\t}\r\n\r\n\tfunction getHead(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_HEAD, headGear);\r\n\t}\r\n\r\n\tfunction getBody(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_BODY, bodyGear);\r\n\t}\r\n\r\n\tfunction getHand(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_HAND, handGear);\r\n\t}\r\n\r\n\tfunction getFoot(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_FOOT, footGear);\r\n\t}\r\n\r\n\tfunction getNeck(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_NECK, necklaces);\r\n\t}\r\n\r\n\tfunction getRing(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_RING, rings);\r\n\t}\r\n\r\n\tfunction getTrinket1(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_TRI1, trinkets1);\r\n\t}\r\n\r\n\tfunction getTrinket2(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_TRI2, trinkets2);\r\n\t}\r\n\r\n\tfunction getTrinket3(uint256 _tokenId) public view returns (string memory) {\r\n\t\treturn pluck(_tokenId, SLOT_TRI2, trinkets3);\r\n\t}\r\n\r\n\tfunction getShinee(uint256 _tokenId) public pure returns (uint256) {\r\n\t\treturn (random(_tokenId, 420) % 10) + 1;\r\n\t}\r\n\r\n\tfunction buildSVG(uint256 _tokenId) internal view returns (string memory) {\r\n\t\tstring[24] memory parts;\r\n\t\tparts[\r\n\t\t\t0\r\n\t\t] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: #AFB886; font-family: monospace; font-size: 16px; letter-spacing: -0.05em; }</style><rect width=\"100%\" height=\"100%\" fill=\"#242910\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\t\tparts[1] = getWeapon(_tokenId);\r\n\t\tparts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\t\tparts[3] = getHead(_tokenId);\r\n\t\tparts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\t\tparts[5] = getBody(_tokenId);\r\n\t\tparts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\t\tparts[7] = getHand(_tokenId);\r\n\t\tparts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\t\tparts[9] = getFoot(_tokenId);\r\n\t\tparts[10] = '</text><text x=\"10\" y=\"120\" class=\"base\">';\r\n\t\tparts[11] = getNeck(_tokenId);\r\n\t\tparts[12] = '</text><text x=\"10\" y=\"140\" class=\"base\">';\r\n\t\tparts[13] = getRing(_tokenId);\r\n\t\tparts[14] = '</text><text x=\"10\" y=\"160\" class=\"base\">';\r\n\t\tparts[15] = getTrinket1(_tokenId);\r\n\t\tparts[16] = '</text><text x=\"10\" y=\"180\" class=\"base\">';\r\n\t\tparts[17] = getTrinket2(_tokenId);\r\n\t\tparts[18] = '</text><text x=\"10\" y=\"200\" class=\"base\">';\r\n\t\tparts[19] = getTrinket3(_tokenId);\r\n\t\tparts[\r\n\t\t\t20\r\n\t\t] = '</text><text x=\"10\" y=\"220\" class=\"base\">---------------------';\r\n\t\tparts[21] = '</text><text x=\"10\" y=\"240\" class=\"base\">';\r\n\t\tparts[22] = Strings.toString(getShinee(_tokenId));\r\n\t\tparts[23] = ' shinee</text></svg>';\r\n\r\n\t\tstring memory svg = string(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\tparts[0],\r\n\t\t\t\tparts[1],\r\n\t\t\t\tparts[2],\r\n\t\t\t\tparts[3],\r\n\t\t\t\tparts[4],\r\n\t\t\t\tparts[5],\r\n\t\t\t\tparts[6],\r\n\t\t\t\tparts[7],\r\n\t\t\t\tparts[8]\r\n\t\t\t)\r\n\t\t);\r\n\t\tsvg = string(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\tsvg,\r\n\t\t\t\tparts[9],\r\n\t\t\t\tparts[10],\r\n\t\t\t\tparts[11],\r\n\t\t\t\tparts[12],\r\n\t\t\t\tparts[13],\r\n\t\t\t\tparts[14],\r\n\t\t\t\tparts[15],\r\n\t\t\t\tparts[16]\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn\r\n\t\t\tstring(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tsvg,\r\n\t\t\t\t\tparts[17],\r\n\t\t\t\t\tparts[18],\r\n\t\t\t\t\tparts[19],\r\n\t\t\t\t\tparts[20],\r\n\t\t\t\t\tparts[21],\r\n\t\t\t\t\tparts[22],\r\n\t\t\t\t\tparts[23]\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction buildAttr(string memory _traitType, string memory _value)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (string memory)\r\n\t{\r\n\t\treturn\r\n\t\t\tstring(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t'{\"trait_type\": \"',\r\n\t\t\t\t\t_traitType,\r\n\t\t\t\t\t'\", \"value\": \"',\r\n\t\t\t\t\t_value,\r\n\t\t\t\t\t'\"},'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction buildAttrList(uint256 _tokenId)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (string memory)\r\n\t{\r\n\t\tstring[12] memory parts;\r\n\t\tparts[0] = '[';\r\n\t\tparts[1] = buildAttr('weapon', getWeapon(_tokenId));\r\n\t\tparts[2] = buildAttr('head', getHead(_tokenId));\r\n\t\tparts[3] = buildAttr('body', getBody(_tokenId));\r\n\t\tparts[4] = buildAttr('hand', getHand(_tokenId));\r\n\t\tparts[5] = buildAttr('foot', getFoot(_tokenId));\r\n\t\tparts[6] = buildAttr('neck', getNeck(_tokenId));\r\n\t\tparts[7] = buildAttr('ring', getRing(_tokenId));\r\n\t\tparts[8] = buildAttr('trinket_one', getTrinket1(_tokenId));\r\n\t\tparts[9] = buildAttr('trinket_two', getTrinket2(_tokenId));\r\n\t\tparts[10] = buildAttr('trinket_three', getTrinket3(_tokenId));\r\n\t\tparts[11] = string(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t'{\"trait_type\": \"shinee\", \"value\": ',\r\n\t\t\t\tStrings.toString(getShinee(_tokenId)),\r\n\t\t\t\t', \"max_value\": 10}]'\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tstring memory output = string(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\tparts[0],\r\n\t\t\t\tparts[1],\r\n\t\t\t\tparts[2],\r\n\t\t\t\tparts[3],\r\n\t\t\t\tparts[4],\r\n\t\t\t\tparts[5],\r\n\t\t\t\tparts[6],\r\n\t\t\t\tparts[7],\r\n\t\t\t\tparts[8]\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn string(abi.encodePacked(output, parts[9], parts[10], parts[11]));\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId)\r\n\t\tpublic\r\n\t\tview\r\n\t\toverride\r\n\t\treturns (string memory)\r\n\t{\r\n\t\tif (_ownerOf[_tokenId] == address(0)) revert NotMinted();\r\n\r\n\t\tstring memory json = Base64.encode(\r\n\t\t\tbytes(\r\n\t\t\t\tstring(\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\t'{\"name\": \"sack #',\r\n\t\t\t\t\t\tStrings.toString(_tokenId),\r\n\t\t\t\t\t\t'\", \"description\": \"oooOooooo looka fren wats dis... shIneez?\\\\nYUMMZ\\\\n\\\\nmany manY shineEz, deez mine now teeheeE\\\\n\\\\nwat? wat it is?\\\\nAAAAAAAUUUUUGGGHHHHH shineez on da blokcHin?\\\\n\\\\nwaaaaaaaaitttt you wan sum?\\\\nokieee fren, u use how uuu want teeheeE\", \"image\": \"data:image/svg+xml;base64,',\r\n\t\t\t\t\t\tBase64.encode(bytes(buildSVG(_tokenId))),\r\n\t\t\t\t\t\t'\", \"attributes\": ',\r\n\t\t\t\t\t\tbuildAttrList(_tokenId),\r\n\t\t\t\t\t\t'}'\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tstring memory output = string(\r\n\t\t\tabi.encodePacked('data:application/json;base64,', json)\r\n\t\t);\r\n\t\treturn output;\r\n\t}\r\n\r\n\tfunction getSacksOwned(address _address)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256[] memory ownedIds)\r\n\t{\r\n\t\tuint256 balance = _balanceOf[_address];\r\n\t\tuint256 idCounter = 1;\r\n\t\tuint256 ownedCounter = 0;\r\n\t\townedIds = new uint256[](balance);\r\n\r\n\t\twhile (ownedCounter < balance && idCounter < MAX_SUPPLY + 1) {\r\n\t\t\taddress ownerAddress = _ownerOf[idCounter];\r\n\t\t\tif (ownerAddress == _address) {\r\n\t\t\t\townedIds[ownedCounter] = idCounter;\r\n\t\t\t\townedCounter++;\r\n\t\t\t}\r\n\t\t\tidCounter++;\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MintInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughLoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBody\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSacksOwned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownedIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getShinee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrinket1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrinket2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrinket3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintClosingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintThreeWithATip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipWithdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"updateTipWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "GoblinLoot", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8daf340bfacbc2fb551c37b85148e08c74c4151bd392cc6886c7f808b563c316"}]}