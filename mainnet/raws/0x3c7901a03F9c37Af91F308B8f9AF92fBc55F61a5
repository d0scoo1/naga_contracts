{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GNARSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {IGnarSeeder} from \\\"../interfaces/IGNARSeeder.sol\\\";\\r\\nimport {IGnarDescriptor} from \\\"../interfaces/IGNARDescriptor.sol\\\";\\r\\n\\r\\ncontract GNARSeeder is IGnarSeeder {\\r\\n    function generateSeed(uint256 gnarId, IGnarDescriptor descriptor)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (Seed memory)\\r\\n    {\\r\\n        uint256 pseudorandomness = uint256(\\r\\n            keccak256(abi.encodePacked(blockhash(block.number - 1), gnarId))\\r\\n        );\\r\\n\\r\\n        uint256 backgroundCount = descriptor.backgroundCount();\\r\\n        uint256 bodyCount = descriptor.bodyCount();\\r\\n        uint256 accessoryCount = descriptor.accessoryCount();\\r\\n        uint256 headCount = descriptor.headCount();\\r\\n        uint256 glassesCount = descriptor.glassesCount();\\r\\n        require(backgroundCount > 0, \\\"background is missing\\\");\\r\\n        require(bodyCount > 0, \\\"body is missing\\\");\\r\\n        require(accessoryCount > 0, \\\"accessories is missing\\\");\\r\\n        require(headCount > 0, \\\"head is missing\\\");\\r\\n        require(glassesCount > 0, \\\"glasses is missing\\\");\\r\\n\\r\\n        return\\r\\n            Seed({\\r\\n                background: uint48(uint48(pseudorandomness) % backgroundCount),\\r\\n                body: uint48(uint48(pseudorandomness >> 48) % bodyCount),\\r\\n                accessory: uint48(\\r\\n                    uint48(pseudorandomness >> 96) % accessoryCount\\r\\n                ),\\r\\n                head: uint48(uint48(pseudorandomness >> 144) % headCount),\\r\\n                glasses: uint48(uint48(pseudorandomness >> 192) % glassesCount)\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/interfaces/IGNARSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {IGnarDescriptor} from \\\"./IGNARDescriptor.sol\\\";\\r\\n\\r\\ninterface IGnarSeeder {\\r\\n    struct Seed {\\r\\n        uint48 background;\\r\\n        uint48 body;\\r\\n        uint48 accessory;\\r\\n        uint48 head;\\r\\n        uint48 glasses;\\r\\n    }\\r\\n\\r\\n    function generateSeed(uint256 nounId, IGnarDescriptor descriptor)\\r\\n        external\\r\\n        view\\r\\n        returns (Seed memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/interfaces/IGNARDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {IGnarSeeder} from \\\"./IGNARSeeder.sol\\\";\\r\\n\\r\\ninterface IGnarDescriptor {\\r\\n    event PartsLocked();\\r\\n\\r\\n    event DataURIToggled(bool enabled);\\r\\n\\r\\n    event BaseURIUpdated(string baseURI);\\r\\n\\r\\n    function arePartsLocked() external returns (bool);\\r\\n\\r\\n    function isDataURIEnabled() external returns (bool);\\r\\n\\r\\n    function baseURI() external returns (string memory);\\r\\n\\r\\n    function palettes(uint8 paletteIndex, uint256 colorIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function backgrounds(uint256 index) external view returns (string memory);\\r\\n\\r\\n    function bodies(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function accessories(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function heads(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function glasses(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function backgroundCount() external view returns (uint256);\\r\\n\\r\\n    function bodyCount() external view returns (uint256);\\r\\n\\r\\n    function accessoryCount() external view returns (uint256);\\r\\n\\r\\n    function headCount() external view returns (uint256);\\r\\n\\r\\n    function glassesCount() external view returns (uint256);\\r\\n\\r\\n    function addManyColorsToPalette(\\r\\n        uint8 paletteIndex,\\r\\n        string[] calldata newColors\\r\\n    ) external;\\r\\n\\r\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\r\\n\\r\\n    function addManyBodies(bytes[] calldata bodies) external;\\r\\n\\r\\n    function addManyAccessories(bytes[] calldata accessories) external;\\r\\n\\r\\n    function addManyHeads(bytes[] calldata heads) external;\\r\\n\\r\\n    function addManyGlasses(bytes[] calldata glasses) external;\\r\\n\\r\\n    function addColorToPalette(uint8 paletteIndex, string calldata color)\\r\\n        external;\\r\\n\\r\\n    function addBackground(string calldata background) external;\\r\\n\\r\\n    function addBody(bytes calldata body) external;\\r\\n\\r\\n    function addAccessory(bytes calldata accessory) external;\\r\\n\\r\\n    function addHead(bytes calldata head) external;\\r\\n\\r\\n    function addGlasses(bytes calldata glasses) external;\\r\\n\\r\\n    function lockParts() external;\\r\\n\\r\\n    function toggleDataURIEnabled() external;\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external;\\r\\n\\r\\n    function tokenURI(uint256 tokenId, IGnarSeeder.Seed memory seed)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function dataURI(uint256 tokenId, IGnarSeeder.Seed memory seed)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    function genericDataURI(\\r\\n        string calldata name,\\r\\n        string calldata description,\\r\\n        IGnarSeeder.Seed memory seed\\r\\n    ) external view returns (string memory);\\r\\n\\r\\n    function generateSVGImage(IGnarSeeder.Seed memory seed)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gnarId\",\"type\":\"uint256\"},{\"internalType\":\"contract IGnarDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"}],\"name\":\"generateSeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGnarSeeder.Seed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNARSeeder", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}