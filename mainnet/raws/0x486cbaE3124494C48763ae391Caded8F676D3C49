{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TimelockProposal3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.6;\\n\\ninterface IERC20 {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IFeeRecipient {\\n    function setFeeConverter(IFeeConverter _value) external;\\n    function convert(ILendingPair _pair, bytes memory _path, uint _minWildOutput) external;\\n}\\n\\ninterface IFeeConverter {\\n\\n  function convert(\\n    address          _incentiveRecipient,\\n    ILendingPair     _pair,\\n    bytes memory     _path,\\n    uint             _supplyTokenAmount,\\n    uint             _minWildOutput\\n  ) external returns(uint);\\n}\\n\\n\\ninterface ILendingPair {\\n  function lpToken(address _token) external view returns(IERC20);\\n}\\n\\ncontract TimelockProposal {\\n\\n    function execute() external {\\n\\n        ILendingPair mockPair = ILendingPair(0xF26220fEC80657eF72Eb5F9D5680DCAdc816e2A6);\\n        IFeeConverter mockConverter = IFeeConverter(0x4FaA3F160531D7878573B89Dddb26747d14Be27B);\\n        IFeeRecipient feeRecipient = IFeeRecipient(0x487502F921BA3DADAcF63dBF7a57a978C241B72C);\\n\\n        address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n        address snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n        address mkr = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\\n        address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n        address crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n        address inch = 0x111111111117dC0aa78b770fA6A738034120C302;\\n        address aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n        feeRecipient.setFeeConverter(mockConverter);\\n\\n        feeRecipient.convert(mockPair, abi.encodePacked(weth), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(snx), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(mkr), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(dai), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(crv), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(inch), 0);\\n        feeRecipient.convert(mockPair, abi.encodePacked(aave), 0);\\n\\n        // ** Fees from old FeeRecipient to MultiSig **\\n    }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TimelockProposal", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}