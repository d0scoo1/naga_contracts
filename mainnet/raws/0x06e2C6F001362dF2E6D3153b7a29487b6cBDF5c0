{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/LendPoolLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {IBNFT} from \\\"../interfaces/IBNFT.sol\\\";\\nimport {ILendPoolLoan} from \\\"../interfaces/ILendPoolLoan.sol\\\";\\nimport {ILendPool} from \\\"../interfaces/ILendPool.sol\\\";\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract LendPoolLoan is Initializable, ILendPoolLoan, ContextUpgradeable, IERC721ReceiverUpgradeable {\\n  using WadRayMath for uint256;\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n  ILendPoolAddressesProvider private _addressesProvider;\\n\\n  CountersUpgradeable.Counter private _loanIdTracker;\\n  mapping(uint256 => DataTypes.LoanData) private _loans;\\n\\n  // nftAsset + nftTokenId => loanId\\n  mapping(address => mapping(uint256 => uint256)) private _nftToLoanIds;\\n  mapping(address => uint256) private _nftTotalCollateral;\\n  mapping(address => mapping(address => uint256)) private _userNftCollateral;\\n\\n  /**\\n   * @dev Only lending pool can call functions marked by this modifier\\n   **/\\n  modifier onlyLendPool() {\\n    require(_msgSender() == address(_getLendPool()), Errors.CT_CALLER_MUST_BE_LEND_POOL);\\n    _;\\n  }\\n\\n  // called once by the factory at time of deployment\\n  function initialize(ILendPoolAddressesProvider provider) external initializer {\\n    __Context_init();\\n\\n    _addressesProvider = provider;\\n\\n    // Avoid having loanId = 0\\n    _loanIdTracker.increment();\\n\\n    emit Initialized(address(_getLendPool()));\\n  }\\n\\n  function initNft(address nftAsset, address bNftAddress) external override onlyLendPool {\\n    IERC721Upgradeable(nftAsset).setApprovalForAll(bNftAddress, true);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function createLoan(\\n    address initiator,\\n    address onBehalfOf,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address bNftAddress,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool returns (uint256) {\\n    require(_nftToLoanIds[nftAsset][nftTokenId] == 0, Errors.LP_NFT_HAS_USED_AS_COLLATERAL);\\n\\n    // index is expressed in Ray, so:\\n    // amount.wadToRay().rayDiv(index).rayToWad() => amount.rayDiv(index)\\n    uint256 amountScaled = amount.rayDiv(borrowIndex);\\n\\n    uint256 loanId = _loanIdTracker.current();\\n    _loanIdTracker.increment();\\n\\n    _nftToLoanIds[nftAsset][nftTokenId] = loanId;\\n\\n    // transfer underlying NFT asset to pool and mint bNFT to onBehalfOf\\n    IERC721Upgradeable(nftAsset).safeTransferFrom(_msgSender(), address(this), nftTokenId);\\n\\n    IBNFT(bNftAddress).mint(onBehalfOf, nftTokenId);\\n\\n    // Save Info\\n    DataTypes.LoanData storage loanData = _loans[loanId];\\n    loanData.loanId = loanId;\\n    loanData.state = DataTypes.LoanState.Active;\\n    loanData.borrower = onBehalfOf;\\n    loanData.nftAsset = nftAsset;\\n    loanData.nftTokenId = nftTokenId;\\n    loanData.reserveAsset = reserveAsset;\\n    loanData.scaledAmount = amountScaled;\\n\\n    _userNftCollateral[onBehalfOf][nftAsset] += 1;\\n\\n    _nftTotalCollateral[nftAsset] += 1;\\n\\n    emit LoanCreated(initiator, onBehalfOf, loanId, nftAsset, nftTokenId, reserveAsset, amount, borrowIndex);\\n\\n    return (loanId);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function updateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    uint256 amountAdded,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool {\\n    // Must use storage to change state\\n    DataTypes.LoanData storage loan = _loans[loanId];\\n\\n    // Ensure valid loan state\\n    require(loan.state == DataTypes.LoanState.Active, Errors.LPL_INVALID_LOAN_STATE);\\n\\n    uint256 amountScaled = 0;\\n\\n    if (amountAdded > 0) {\\n      amountScaled = amountAdded.rayDiv(borrowIndex);\\n      require(amountScaled != 0, Errors.LPL_INVALID_LOAN_AMOUNT);\\n\\n      loan.scaledAmount += amountScaled;\\n    }\\n\\n    if (amountTaken > 0) {\\n      amountScaled = amountTaken.rayDiv(borrowIndex);\\n      require(amountScaled != 0, Errors.LPL_INVALID_TAKEN_AMOUNT);\\n\\n      require(loan.scaledAmount >= amountScaled, Errors.LPL_AMOUNT_OVERFLOW);\\n      loan.scaledAmount -= amountScaled;\\n    }\\n\\n    emit LoanUpdated(\\n      initiator,\\n      loanId,\\n      loan.nftAsset,\\n      loan.nftTokenId,\\n      loan.reserveAsset,\\n      amountAdded,\\n      amountTaken,\\n      borrowIndex\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function repayLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address bNftAddress,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool {\\n    // Must use storage to change state\\n    DataTypes.LoanData storage loan = _loans[loanId];\\n\\n    // Ensure valid loan state\\n    require(loan.state == DataTypes.LoanState.Active, Errors.LPL_INVALID_LOAN_STATE);\\n\\n    // state changes and cleanup\\n    // NOTE: these must be performed before assets are released to prevent reentrance\\n    _loans[loanId].state = DataTypes.LoanState.Repaid;\\n\\n    _nftToLoanIds[loan.nftAsset][loan.nftTokenId] = 0;\\n\\n    require(_userNftCollateral[loan.borrower][loan.nftAsset] >= 1, Errors.LP_INVALIED_USER_NFT_AMOUNT);\\n    _userNftCollateral[loan.borrower][loan.nftAsset] -= 1;\\n\\n    require(_nftTotalCollateral[loan.nftAsset] >= 1, Errors.LP_INVALIED_NFT_AMOUNT);\\n    _nftTotalCollateral[loan.nftAsset] -= 1;\\n\\n    // burn bNFT and transfer underlying NFT asset to user\\n    IBNFT(bNftAddress).burn(loan.nftTokenId);\\n\\n    IERC721Upgradeable(loan.nftAsset).safeTransferFrom(address(this), _msgSender(), loan.nftTokenId);\\n\\n    emit LoanRepaid(initiator, loanId, loan.nftAsset, loan.nftTokenId, loan.reserveAsset, amount, borrowIndex);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function auctionLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address onBehalfOf,\\n    uint256 bidPrice,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool {\\n    // Must use storage to change state\\n    DataTypes.LoanData storage loan = _loans[loanId];\\n    address previousBidder = loan.bidderAddress;\\n    uint256 previousPrice = loan.bidPrice;\\n\\n    // Ensure valid loan state\\n    if (loan.bidStartTimestamp == 0) {\\n      require(loan.state == DataTypes.LoanState.Active, Errors.LPL_INVALID_LOAN_STATE);\\n\\n      loan.state = DataTypes.LoanState.Auction;\\n      loan.bidStartTimestamp = block.timestamp;\\n      loan.firstBidderAddress = onBehalfOf;\\n    } else {\\n      require(loan.state == DataTypes.LoanState.Auction, Errors.LPL_INVALID_LOAN_STATE);\\n\\n      require(bidPrice > loan.bidPrice, Errors.LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE);\\n    }\\n\\n    loan.bidBorrowAmount = borrowAmount;\\n    loan.bidderAddress = onBehalfOf;\\n    loan.bidPrice = bidPrice;\\n\\n    emit LoanAuctioned(\\n      initiator,\\n      loanId,\\n      loan.nftAsset,\\n      loan.nftTokenId,\\n      loan.bidBorrowAmount,\\n      borrowIndex,\\n      onBehalfOf,\\n      bidPrice,\\n      previousBidder,\\n      previousPrice\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function redeemLoan(\\n    address initiator,\\n    uint256 loanId,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool {\\n    // Must use storage to change state\\n    DataTypes.LoanData storage loan = _loans[loanId];\\n\\n    // Ensure valid loan state\\n    require(loan.state == DataTypes.LoanState.Auction, Errors.LPL_INVALID_LOAN_STATE);\\n\\n    uint256 amountScaled = amountTaken.rayDiv(borrowIndex);\\n    require(amountScaled != 0, Errors.LPL_INVALID_TAKEN_AMOUNT);\\n\\n    require(loan.scaledAmount >= amountScaled, Errors.LPL_AMOUNT_OVERFLOW);\\n    loan.scaledAmount -= amountScaled;\\n\\n    loan.state = DataTypes.LoanState.Active;\\n    loan.bidStartTimestamp = 0;\\n    loan.bidBorrowAmount = 0;\\n    loan.bidderAddress = address(0);\\n    loan.bidPrice = 0;\\n    loan.firstBidderAddress = address(0);\\n\\n    emit LoanRedeemed(initiator, loanId, loan.nftAsset, loan.nftTokenId, loan.reserveAsset, amountTaken, borrowIndex);\\n  }\\n\\n  /**\\n   * @inheritdoc ILendPoolLoan\\n   */\\n  function liquidateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address bNftAddress,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external override onlyLendPool {\\n    // Must use storage to change state\\n    DataTypes.LoanData storage loan = _loans[loanId];\\n\\n    // Ensure valid loan state\\n    require(loan.state == DataTypes.LoanState.Auction, Errors.LPL_INVALID_LOAN_STATE);\\n\\n    // state changes and cleanup\\n    // NOTE: these must be performed before assets are released to prevent reentrance\\n    _loans[loanId].state = DataTypes.LoanState.Defaulted;\\n    _loans[loanId].bidBorrowAmount = borrowAmount;\\n\\n    _nftToLoanIds[loan.nftAsset][loan.nftTokenId] = 0;\\n\\n    require(_userNftCollateral[loan.borrower][loan.nftAsset] >= 1, Errors.LP_INVALIED_USER_NFT_AMOUNT);\\n    _userNftCollateral[loan.borrower][loan.nftAsset] -= 1;\\n\\n    require(_nftTotalCollateral[loan.nftAsset] >= 1, Errors.LP_INVALIED_NFT_AMOUNT);\\n    _nftTotalCollateral[loan.nftAsset] -= 1;\\n\\n    // burn bNFT and transfer underlying NFT asset to user\\n    IBNFT(bNftAddress).burn(loan.nftTokenId);\\n\\n    IERC721Upgradeable(loan.nftAsset).safeTransferFrom(address(this), _msgSender(), loan.nftTokenId);\\n\\n    emit LoanLiquidated(\\n      initiator,\\n      loanId,\\n      loan.nftAsset,\\n      loan.nftTokenId,\\n      loan.reserveAsset,\\n      borrowAmount,\\n      borrowIndex\\n    );\\n  }\\n\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external pure override returns (bytes4) {\\n    operator;\\n    from;\\n    tokenId;\\n    data;\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  function borrowerOf(uint256 loanId) external view override returns (address) {\\n    return _loans[loanId].borrower;\\n  }\\n\\n  function getCollateralLoanId(address nftAsset, uint256 nftTokenId) external view override returns (uint256) {\\n    return _nftToLoanIds[nftAsset][nftTokenId];\\n  }\\n\\n  function getLoan(uint256 loanId) external view override returns (DataTypes.LoanData memory loanData) {\\n    return _loans[loanId];\\n  }\\n\\n  function getLoanCollateralAndReserve(uint256 loanId)\\n    external\\n    view\\n    override\\n    returns (\\n      address nftAsset,\\n      uint256 nftTokenId,\\n      address reserveAsset,\\n      uint256 scaledAmount\\n    )\\n  {\\n    return (\\n      _loans[loanId].nftAsset,\\n      _loans[loanId].nftTokenId,\\n      _loans[loanId].reserveAsset,\\n      _loans[loanId].scaledAmount\\n    );\\n  }\\n\\n  function getLoanReserveBorrowAmount(uint256 loanId) external view override returns (address, uint256) {\\n    uint256 scaledAmount = _loans[loanId].scaledAmount;\\n    if (scaledAmount == 0) {\\n      return (_loans[loanId].reserveAsset, 0);\\n    }\\n    uint256 amount = scaledAmount.rayMul(_getLendPool().getReserveNormalizedVariableDebt(_loans[loanId].reserveAsset));\\n\\n    return (_loans[loanId].reserveAsset, amount);\\n  }\\n\\n  function getLoanReserveBorrowScaledAmount(uint256 loanId) external view override returns (address, uint256) {\\n    return (_loans[loanId].reserveAsset, _loans[loanId].scaledAmount);\\n  }\\n\\n  function getLoanHighestBid(uint256 loanId) external view override returns (address, uint256) {\\n    return (_loans[loanId].bidderAddress, _loans[loanId].bidPrice);\\n  }\\n\\n  function getNftCollateralAmount(address nftAsset) external view override returns (uint256) {\\n    return _nftTotalCollateral[nftAsset];\\n  }\\n\\n  function getUserNftCollateralAmount(address user, address nftAsset) external view override returns (uint256) {\\n    return _userNftCollateral[user][nftAsset];\\n  }\\n\\n  function _getLendPool() internal view returns (ILendPool) {\\n    return ILendPool(_addressesProvider.getLendPool());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {IERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\ninterface IBNFT is IERC721MetadataUpgradeable, IERC721ReceiverUpgradeable, IERC721EnumerableUpgradeable {\\n  /**\\n   * @dev Emitted when an bNFT is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   **/\\n  event Initialized(address indexed underlyingAsset);\\n\\n  /**\\n   * @dev Emitted on mint\\n   * @param user The address initiating the burn\\n   * @param nftAsset address of the underlying asset of NFT\\n   * @param nftTokenId token id of the underlying asset of NFT\\n   * @param owner The owner address receive the bNFT token\\n   **/\\n  event Mint(address indexed user, address indexed nftAsset, uint256 nftTokenId, address indexed owner);\\n\\n  /**\\n   * @dev Emitted on burn\\n   * @param user The address initiating the burn\\n   * @param nftAsset address of the underlying asset of NFT\\n   * @param nftTokenId token id of the underlying asset of NFT\\n   * @param owner The owner address of the burned bNFT token\\n   **/\\n  event Burn(address indexed user, address indexed nftAsset, uint256 nftTokenId, address indexed owner);\\n\\n  /**\\n   * @dev Emitted on flashLoan\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param nftAsset address of the underlying asset of NFT\\n   * @param tokenId The token id of the asset being flash borrowed\\n   **/\\n  event FlashLoan(address indexed target, address indexed initiator, address indexed nftAsset, uint256 tokenId);\\n\\n  /**\\n   * @dev Initializes the bNFT\\n   * @param underlyingAsset The address of the underlying asset of this bNFT (E.g. PUNK for bPUNK)\\n   */\\n  function initialize(\\n    address underlyingAsset,\\n    string calldata bNftName,\\n    string calldata bNftSymbol\\n  ) external;\\n\\n  /**\\n   * @dev Mints bNFT token to the user address\\n   *\\n   * Requirements:\\n   *  - The caller must be contract address.\\n   *  - `nftTokenId` must not exist.\\n   *\\n   * @param to The owner address receive the bNFT token\\n   * @param tokenId token id of the underlying asset of NFT\\n   **/\\n  function mint(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Burns user bNFT token\\n   *\\n   * Requirements:\\n   *  - The caller must be contract address.\\n   *  - `tokenId` must exist.\\n   *\\n   * @param tokenId token id of the underlying asset of NFT\\n   **/\\n  function burn(uint256 tokenId) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the tokens within one transaction, as long as the tokens taken is returned.\\n   *\\n   * Requirements:\\n   *  - `nftTokenIds` must exist.\\n   *\\n   * @param receiverAddress The address of the contract receiving the tokens, implementing the IFlashLoanReceiver interface\\n   * @param nftTokenIds token ids of the underlying asset\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    uint256[] calldata nftTokenIds,\\n    bytes calldata params\\n  ) external;\\n\\n  /**\\n   * @dev Returns the owner of the `nftTokenId` token.\\n   *\\n   * Requirements:\\n   *  - `tokenId` must exist.\\n   *\\n   * @param tokenId token id of the underlying asset of NFT\\n   */\\n  function minterOf(uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendPoolLoan {\\n  /**\\n   * @dev Emitted on initialization to share location of dependent notes\\n   * @param pool The address of the associated lend pool\\n   */\\n  event Initialized(address indexed pool);\\n\\n  /**\\n   * @dev Emitted when a loan is created\\n   * @param user The address initiating the action\\n   */\\n  event LoanCreated(\\n    address indexed user,\\n    address indexed onBehalfOf,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is updated\\n   * @param user The address initiating the action\\n   */\\n  event LoanUpdated(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amountAdded,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is repaid by the borrower\\n   * @param user The address initiating the action\\n   */\\n  event LoanRepaid(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is auction by the liquidator\\n   * @param user The address initiating the action\\n   */\\n  event LoanAuctioned(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 borrowIndex,\\n    address bidder,\\n    uint256 price,\\n    address previousBidder,\\n    uint256 previousPrice\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is redeemed\\n   * @param user The address initiating the action\\n   */\\n  event LoanRedeemed(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is liquidate by the liquidator\\n   * @param user The address initiating the action\\n   */\\n  event LoanLiquidated(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  function initNft(address nftAsset, address bNftAddress) external;\\n\\n  /**\\n   * @dev Create store a loan object with some params\\n   * @param initiator The address of the user initiating the borrow\\n   * @param onBehalfOf The address receiving the loan\\n   */\\n  function createLoan(\\n    address initiator,\\n    address onBehalfOf,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address bNftAddress,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Update the given loan with some params\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The loan must be in state Active\\n   * @param initiator The address of the user initiating the borrow\\n   */\\n  function updateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    uint256 amountAdded,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Repay the given loan\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The caller must send in principal + interest\\n   *  - The loan must be in state Active\\n   *\\n   * @param initiator The address of the user initiating the repay\\n   * @param loanId The loan getting burned\\n   * @param bNftAddress The address of bNFT\\n   */\\n  function repayLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address bNftAddress,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Auction the given loan\\n   *\\n   * Requirements:\\n   *  - The price must be greater than current highest price\\n   *  - The loan must be in state Active or Auction\\n   *\\n   * @param initiator The address of the user initiating the auction\\n   * @param loanId The loan getting auctioned\\n   * @param bidPrice The bid price of this auction\\n   */\\n  function auctionLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address onBehalfOf,\\n    uint256 bidPrice,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Redeem the given loan with some params\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The loan must be in state Auction\\n   * @param initiator The address of the user initiating the borrow\\n   */\\n  function redeemLoan(\\n    address initiator,\\n    uint256 loanId,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Liquidate the given loan\\n   *\\n   * Requirements:\\n   *  - The caller must send in principal + interest\\n   *  - The loan must be in state Active\\n   *\\n   * @param initiator The address of the user initiating the auction\\n   * @param loanId The loan getting burned\\n   * @param bNftAddress The address of bNFT\\n   */\\n  function liquidateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address bNftAddress,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  function borrowerOf(uint256 loanId) external view returns (address);\\n\\n  function getCollateralLoanId(address nftAsset, uint256 nftTokenId) external view returns (uint256);\\n\\n  function getLoan(uint256 loanId) external view returns (DataTypes.LoanData memory loanData);\\n\\n  function getLoanCollateralAndReserve(uint256 loanId)\\n    external\\n    view\\n    returns (\\n      address nftAsset,\\n      uint256 nftTokenId,\\n      address reserveAsset,\\n      uint256 scaledAmount\\n    );\\n\\n  function getLoanReserveBorrowScaledAmount(uint256 loanId) external view returns (address, uint256);\\n\\n  function getLoanReserveBorrowAmount(uint256 loanId) external view returns (address, uint256);\\n\\n  function getLoanHighestBid(uint256 loanId) external view returns (address, uint256);\\n\\n  function getNftCollateralAmount(address nftAsset) external view returns (uint256);\\n\\n  function getUserNftCollateralAmount(address user, address nftAsset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param user The address initiating the deposit\\n   * @param amount The amount deposited\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the bTokens\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address indexed onBehalfOf,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param user The address initiating the withdrawal, owner of bTokens\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param amount The amount to be withdrawn\\n   * @param to Address that will receive the underlying\\n   **/\\n  event Withdraw(address indexed user, address indexed reserve, uint256 amount, address indexed to);\\n\\n  /**\\n   * @dev Emitted on borrow() when loan needs to be opened\\n   * @param user The address of the user initiating the borrow(), receiving the funds\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param amount The amount borrowed out\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param onBehalfOf The address that will be getting the loan\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address indexed onBehalfOf,\\n    uint256 borrowRate,\\n    uint256 loanId,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param user The address of the user initiating the repay(), providing the funds\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param amount The amount repaid\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param borrower The beneficiary of the repayment, getting his debt reduced\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Repay(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower's loan is auctioned.\\n   * @param user The address of the user initiating the auction\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param bidPrice The price of the underlying reserve given by the bidder\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param onBehalfOf The address that will be getting the NFT\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Auction(\\n    address user,\\n    address indexed reserve,\\n    uint256 bidPrice,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted on redeem()\\n   * @param user The address of the user initiating the redeem(), providing the funds\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param borrowAmount The borrow amount repaid\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Redeem(\\n    address user,\\n    address indexed reserve,\\n    uint256 borrowAmount,\\n    uint256 fineAmount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower's loan is liquidated.\\n   * @param user The address of the user initiating the auction\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param repayAmount The amount of reserve repaid by the liquidator\\n   * @param remainAmount The amount of reserve received by the borrower\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Liquidate(\\n    address user,\\n    address indexed reserve,\\n    uint256 repayAmount,\\n    uint256 remainAmount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendPool contract. The event is therefore replicated here so it\\n   * gets added to the LendPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying bTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 bUSDC\\n   * @param reserve The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the bTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of bTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address reserve,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent bTokens owned\\n   * E.g. User has 100 bUSDC, calls withdraw() and receives 100 USDC, burning the 100 bUSDC\\n   * @param reserve The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole bToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address reserve,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral\\n   * - E.g. User borrows 100 USDC, receiving the 100 USDC in his wallet\\n   *   and lock collateral asset in contract\\n   * @param reserveAsset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param onBehalfOf Address of the user who will receive the loan. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function borrow(\\n    address reserveAsset,\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function batchBorrow(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    address[] calldata nftAssets,\\n    uint256[] calldata nftTokenIds,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent loan owned\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount The amount to repay\\n   * @return The final amount repaid, loan is burned or not\\n   **/\\n  function repay(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount\\n  ) external returns (uint256, bool);\\n\\n  function batchRepay(\\n    address[] calldata nftAssets,\\n    uint256[] calldata nftTokenIds,\\n    uint256[] calldata amounts\\n  ) external returns (uint256[] memory, bool[] memory);\\n\\n  /**\\n   * @dev Function to auction a non-healthy position collateral-wise\\n   * - The caller (liquidator) want to buy collateral asset of the user getting liquidated\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param bidPrice The bid price of the liquidator want to buy the underlying NFT\\n   * @param onBehalfOf Address of the user who will get the underlying NFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of NFT\\n   *   is a different wallet\\n   **/\\n  function auction(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 bidPrice,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Redeem a NFT loan which state is in Auction\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount The amount to repay the debt\\n   * @param bidFine The amount of bid fine\\n   **/\\n  function redeem(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 bidFine\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise\\n   * - The caller (liquidator) buy collateral asset of the user getting liquidated, and receives\\n   *   the collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   **/\\n  function liquidate(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Validates and finalizes an bToken transfer\\n   * - Only callable by the overlying bToken of the `asset`\\n   * @param asset The address of the underlying asset of the bToken\\n   * @param from The user from which the bTokens are transferred\\n   * @param to The user receiving the bTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The bToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The bToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external view;\\n\\n  function getReserveConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  function getNftConfiguration(address asset) external view returns (DataTypes.NftConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getNftData(address asset) external view returns (DataTypes.NftData memory);\\n\\n  /**\\n   * @dev Returns the loan data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param reserveAsset The address of the Reserve\\n   * @return totalCollateralInETH the total collateral in ETH of the NFT\\n   * @return totalCollateralInReserve the total collateral in Reserve of the NFT\\n   * @return availableBorrowsInETH the borrowing power in ETH of the NFT\\n   * @return availableBorrowsInReserve the borrowing power in Reserve of the NFT\\n   * @return ltv the loan to value of the user\\n   * @return liquidationThreshold the liquidation threshold of the NFT\\n   * @return liquidationBonus the liquidation bonus of the NFT\\n   **/\\n  function getNftCollateralData(address nftAsset, address reserveAsset)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralInETH,\\n      uint256 totalCollateralInReserve,\\n      uint256 availableBorrowsInETH,\\n      uint256 availableBorrowsInReserve,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus\\n    );\\n\\n  /**\\n   * @dev Returns the debt data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param nftTokenId The token id of the NFT\\n   * @return loanId the loan id of the NFT\\n   * @return reserveAsset the address of the Reserve\\n   * @return totalCollateral the total power of the NFT\\n   * @return totalDebt the total debt of the NFT\\n   * @return availableBorrows the borrowing power left of the NFT\\n   * @return healthFactor the current health factor of the NFT\\n   **/\\n  function getNftDebtData(address nftAsset, uint256 nftTokenId)\\n    external\\n    view\\n    returns (\\n      uint256 loanId,\\n      address reserveAsset,\\n      uint256 totalCollateral,\\n      uint256 totalDebt,\\n      uint256 availableBorrows,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @dev Returns the auction data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param nftTokenId The token id of the NFT\\n   * @return loanId the loan id of the NFT\\n   * @return bidderAddress the highest bidder address of the loan\\n   * @return bidPrice the highest bid price in Reserve of the loan\\n   * @return bidBorrowAmount the borrow amount in Reserve of the loan\\n   * @return bidFine the penalty fine of the loan\\n   **/\\n  function getNftAuctionData(address nftAsset, uint256 nftTokenId)\\n    external\\n    view\\n    returns (\\n      uint256 loanId,\\n      address bidderAddress,\\n      uint256 bidPrice,\\n      uint256 bidBorrowAmount,\\n      uint256 bidFine\\n    );\\n\\n  function getNftLiquidatePrice(address nftAsset, uint256 nftTokenId)\\n    external\\n    view\\n    returns (uint256 liquidatePrice, uint256 paybackAmount);\\n\\n  function getNftsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Set the _pause state of a reserve\\n   * - Only callable by the LendPool contract\\n   * @param val `true` to pause the reserve, `false` to un-pause it\\n   */\\n  function setPause(bool val) external;\\n\\n  /**\\n   * @dev Returns if the LendPool is paused\\n   */\\n  function paused() external view returns (bool);\\n\\n  function getAddressesProvider() external view returns (ILendPoolAddressesProvider);\\n\\n  function initReserve(\\n    address asset,\\n    address bTokenAddress,\\n    address debtTokenAddress,\\n    address interestRateAddress\\n  ) external;\\n\\n  function initNft(address asset, address bNftAddress) external;\\n\\n  function setReserveInterestRateAddress(address asset, address rateAddress) external;\\n\\n  function setReserveConfiguration(address asset, uint256 configuration) external;\\n\\n  function setNftConfiguration(address asset, uint256 configuration) external;\\n\\n  function setMaxNumberOfReserves(uint256 val) external;\\n\\n  function setMaxNumberOfNfts(uint256 val) external;\\n\\n  function getMaxNumberOfReserves() external view returns (uint256);\\n\\n  function getMaxNumberOfNfts() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title LendPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Bend Governance\\n * @author Bend\\n **/\\ninterface ILendPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendPoolUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendPoolConfiguratorUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ReserveOracleUpdated(address indexed newAddress);\\n  event NftOracleUpdated(address indexed newAddress);\\n  event LendPoolLoanUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy, bytes encodedCallData);\\n  event BNFTRegistryUpdated(address indexed newAddress);\\n  event IncentivesControllerUpdated(address indexed newAddress);\\n  event UIDataProviderUpdated(address indexed newAddress);\\n  event BendDataProviderUpdated(address indexed newAddress);\\n  event WalletBalanceProviderUpdated(address indexed newAddress);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(\\n    bytes32 id,\\n    address impl,\\n    bytes memory encodedCallData\\n  ) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendPool() external view returns (address);\\n\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external;\\n\\n  function getLendPoolConfigurator() external view returns (address);\\n\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getReserveOracle() external view returns (address);\\n\\n  function setReserveOracle(address reserveOracle) external;\\n\\n  function getNFTOracle() external view returns (address);\\n\\n  function setNFTOracle(address nftOracle) external;\\n\\n  function getLendPoolLoan() external view returns (address);\\n\\n  function setLendPoolLoanImpl(address loan, bytes memory encodedCallData) external;\\n\\n  function getBNFTRegistry() external view returns (address);\\n\\n  function setBNFTRegistry(address factory) external;\\n\\n  function getIncentivesController() external view returns (address);\\n\\n  function setIncentivesController(address controller) external;\\n\\n  function getUIDataProvider() external view returns (address);\\n\\n  function setUIDataProvider(address provider) external;\\n\\n  function getBendDataProvider() external view returns (address);\\n\\n  function setBendDataProvider(address provider) external;\\n\\n  function getWalletBalanceProvider() external view returns (address);\\n\\n  function setWalletBalanceProvider(address provider) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors library\\n * @author Bend\\n * @notice Defines the error messages emitted by the different contracts of the Bend protocol\\n */\\nlibrary Errors {\\n  enum ReturnCode {\\n    SUCCESS,\\n    FAILED\\n  }\\n\\n  string public constant SUCCESS = \\\"0\\\";\\n\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"100\\\"; // 'The caller must be the pool admin'\\n  string public constant CALLER_NOT_ADDRESS_PROVIDER = \\\"101\\\";\\n  string public constant INVALID_FROM_BALANCE_AFTER_TRANSFER = \\\"102\\\";\\n  string public constant INVALID_TO_BALANCE_AFTER_TRANSFER = \\\"103\\\";\\n  string public constant CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST = \\\"104\\\";\\n\\n  //math library erros\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"200\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"201\\\";\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"202\\\";\\n\\n  //validation & check errors\\n  string public constant VL_INVALID_AMOUNT = \\\"301\\\"; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = \\\"302\\\"; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = \\\"303\\\"; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"304\\\"; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_BORROWING_NOT_ENABLED = \\\"305\\\"; // 'Borrowing is not enabled'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"306\\\"; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"307\\\"; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"308\\\"; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"309\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_ACTIVE_NFT = \\\"310\\\";\\n  string public constant VL_NFT_FROZEN = \\\"311\\\";\\n  string public constant VL_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"312\\\"; // 'User did not borrow the specified currency'\\n  string public constant VL_INVALID_HEALTH_FACTOR = \\\"313\\\";\\n  string public constant VL_INVALID_ONBEHALFOF_ADDRESS = \\\"314\\\";\\n  string public constant VL_INVALID_TARGET_ADDRESS = \\\"315\\\";\\n  string public constant VL_INVALID_RESERVE_ADDRESS = \\\"316\\\";\\n  string public constant VL_SPECIFIED_LOAN_NOT_BORROWED_BY_USER = \\\"317\\\";\\n  string public constant VL_SPECIFIED_RESERVE_NOT_BORROWED_BY_USER = \\\"318\\\";\\n  string public constant VL_HEALTH_FACTOR_HIGHER_THAN_LIQUIDATION_THRESHOLD = \\\"319\\\";\\n\\n  //lend pool errors\\n  string public constant LP_CALLER_NOT_LEND_POOL_CONFIGURATOR = \\\"400\\\"; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_IS_PAUSED = \\\"401\\\"; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"402\\\";\\n  string public constant LP_NOT_CONTRACT = \\\"403\\\";\\n  string public constant LP_BORROW_NOT_EXCEED_LIQUIDATION_THRESHOLD = \\\"404\\\";\\n  string public constant LP_BORROW_IS_EXCEED_LIQUIDATION_PRICE = \\\"405\\\";\\n  string public constant LP_NO_MORE_NFTS_ALLOWED = \\\"406\\\";\\n  string public constant LP_INVALIED_USER_NFT_AMOUNT = \\\"407\\\";\\n  string public constant LP_INCONSISTENT_PARAMS = \\\"408\\\";\\n  string public constant LP_NFT_IS_NOT_USED_AS_COLLATERAL = \\\"409\\\";\\n  string public constant LP_CALLER_MUST_BE_AN_BTOKEN = \\\"410\\\";\\n  string public constant LP_INVALIED_NFT_AMOUNT = \\\"411\\\";\\n  string public constant LP_NFT_HAS_USED_AS_COLLATERAL = \\\"412\\\";\\n  string public constant LP_DELEGATE_CALL_FAILED = \\\"413\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_EXTRA_DEBT = \\\"414\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_REDEEM_THRESHOLD = \\\"415\\\";\\n  string public constant LP_AMOUNT_GREATER_THAN_MAX_REPAY = \\\"416\\\";\\n\\n  //lend pool loan errors\\n  string public constant LPL_INVALID_LOAN_STATE = \\\"480\\\";\\n  string public constant LPL_INVALID_LOAN_AMOUNT = \\\"481\\\";\\n  string public constant LPL_INVALID_TAKEN_AMOUNT = \\\"482\\\";\\n  string public constant LPL_AMOUNT_OVERFLOW = \\\"483\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_LIQUIDATION_PRICE = \\\"484\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE = \\\"485\\\";\\n  string public constant LPL_BID_REDEEM_DURATION_HAS_END = \\\"486\\\";\\n  string public constant LPL_BID_USER_NOT_SAME = \\\"487\\\";\\n  string public constant LPL_BID_REPAY_AMOUNT_NOT_ENOUGH = \\\"488\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_HAS_END = \\\"489\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_NOT_END = \\\"490\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_BORROW = \\\"491\\\";\\n  string public constant LPL_INVALID_BIDDER_ADDRESS = \\\"492\\\";\\n  string public constant LPL_AMOUNT_LESS_THAN_BID_FINE = \\\"493\\\";\\n  string public constant LPL_INVALID_BID_FINE = \\\"494\\\";\\n\\n  //common token errors\\n  string public constant CT_CALLER_MUST_BE_LEND_POOL = \\\"500\\\"; // 'The caller of this function must be a lending pool'\\n  string public constant CT_INVALID_MINT_AMOUNT = \\\"501\\\"; //invalid amount to mint\\n  string public constant CT_INVALID_BURN_AMOUNT = \\\"502\\\"; //invalid amount to burn\\n  string public constant CT_BORROW_ALLOWANCE_NOT_ENOUGH = \\\"503\\\";\\n\\n  //reserve logic errors\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"601\\\"; // 'Reserve has already been initialized'\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"602\\\"; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"603\\\"; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"604\\\"; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"605\\\"; //  Variable borrow rate overflows uint128\\n\\n  //configure errors\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"700\\\"; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = \\\"701\\\"; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"702\\\"; // 'The caller must be the emergency admin'\\n  string public constant LPC_INVALIED_BNFT_ADDRESS = \\\"703\\\";\\n  string public constant LPC_INVALIED_LOAN_ADDRESS = \\\"704\\\";\\n  string public constant LPC_NFT_LIQUIDITY_NOT_0 = \\\"705\\\";\\n\\n  //reserve config errors\\n  string public constant RC_INVALID_LTV = \\\"730\\\";\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\\"731\\\";\\n  string public constant RC_INVALID_LIQ_BONUS = \\\"732\\\";\\n  string public constant RC_INVALID_DECIMALS = \\\"733\\\";\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\\"734\\\";\\n  string public constant RC_INVALID_REDEEM_DURATION = \\\"735\\\";\\n  string public constant RC_INVALID_AUCTION_DURATION = \\\"736\\\";\\n  string public constant RC_INVALID_REDEEM_FINE = \\\"737\\\";\\n  string public constant RC_INVALID_REDEEM_THRESHOLD = \\\"738\\\";\\n  string public constant RC_INVALID_MIN_BID_FINE = \\\"739\\\";\\n  string public constant RC_INVALID_MAX_BID_FINE = \\\"740\\\";\\n\\n  //address provider erros\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"760\\\"; // 'Provider is not registered'\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"761\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address bTokenAddress;\\n    address debtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct NftData {\\n    //stores the nft configuration\\n    NftConfigurationMap configuration;\\n    //address of the bNFT contract\\n    address bNftAddress;\\n    //the id of the nft. Represents the position in the list of the active nfts\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct NftConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 56: NFT is active\\n    //bit 57: NFT is frozen\\n    uint256 data;\\n  }\\n\\n  /**\\n   * @dev Enum describing the current state of a loan\\n   * State change flow:\\n   *  Created -> Active -> Repaid\\n   *                    -> Auction -> Defaulted\\n   */\\n  enum LoanState {\\n    // We need a default that is not 'Created' - this is the zero value\\n    None,\\n    // The loan data is stored, but not initiated yet.\\n    Created,\\n    // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n    Active,\\n    // The loan is in auction, higest price liquidator will got chance to claim it.\\n    Auction,\\n    // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n    Repaid,\\n    // The loan was delinquent and collateral claimed by the liquidator. This is a terminal state.\\n    Defaulted\\n  }\\n\\n  struct LoanData {\\n    //the id of the nft loan\\n    uint256 loanId;\\n    //the current state of the loan\\n    LoanState state;\\n    //address of borrower\\n    address borrower;\\n    //address of nft asset token\\n    address nftAsset;\\n    //the id of nft token\\n    uint256 nftTokenId;\\n    //address of reserve asset token\\n    address reserveAsset;\\n    //scaled borrow amount. Expressed in ray\\n    uint256 scaledAmount;\\n    //start time of first bid time\\n    uint256 bidStartTimestamp;\\n    //bidder address of higest bid\\n    address bidderAddress;\\n    //price of higest bid\\n    uint256 bidPrice;\\n    //borrow amount of loan\\n    uint256 bidBorrowAmount;\\n    //bidder address of first bid\\n    address firstBidderAddress;\\n  }\\n\\n  struct ExecuteDepositParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address to;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBatchBorrowParams {\\n    address initiator;\\n    address[] assets;\\n    uint256[] amounts;\\n    address[] nftAssets;\\n    uint256[] nftTokenIds;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n  }\\n\\n  struct ExecuteBatchRepayParams {\\n    address initiator;\\n    address[] nftAssets;\\n    uint256[] nftTokenIds;\\n    uint256[] amounts;\\n  }\\n\\n  struct ExecuteAuctionParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 bidPrice;\\n    address onBehalfOf;\\n  }\\n\\n  struct ExecuteRedeemParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n    uint256 bidFine;\\n  }\\n\\n  struct ExecuteLiquidateParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Bend\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return HALF_RAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return HALF_WAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - HALF_WAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + HALF_WAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - HALF_RAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + HALF_RAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"}],\"name\":\"LoanAuctioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"LoanRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"LoanUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"auctionLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"borrowerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bNftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"getCollateralLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.LoanState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"firstBidderAddress\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.LoanData\",\"name\":\"loanData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanCollateralAndReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserveAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanHighestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanReserveBorrowAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanReserveBorrowScaledAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"}],\"name\":\"getNftCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"}],\"name\":\"getUserNftCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bNftAddress\",\"type\":\"address\"}],\"name\":\"initNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"redeemLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"}],\"name\":\"updateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendPoolLoan", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}