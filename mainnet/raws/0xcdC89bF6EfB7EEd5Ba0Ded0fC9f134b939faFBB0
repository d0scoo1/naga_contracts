{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\npragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external;\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function esm()        public view returns (address) { return getChangelogAddress(\"MCD_ESM\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\n    function clipperMom() public view returns (address) { return getChangelogAddress(\"CLIPPER_MOM\"); }\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setChangelogAddress(bytes32 _key, address _val) public {}\n    function setChangelogVersion(string memory _version) public {}\n    function authorize(address _base, address _ward) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function updateCollateralPrice(bytes32 _ilk) public {}\n    function setContract(address _base, bytes32 _what, address _addr) public {}\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function increaseGlobalDebtCeiling(uint256 _amount) public {}\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\n    function removeIlkFromAutoLine(bytes32 _ilk) public {}\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {}\n    function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {}\n    function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {}\n    function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {}\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {}\n    function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {}\n    function whitelistOracleMedians(address _oracle) public {}\n    function addReaderToWhitelist(address _oracle, address _reader) public {}\n    function addReaderToWhitelistCall(address _oracle, address _reader) public {}\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {}\n    function addCollateralBase(\n        bytes32 _ilk,\n        address _gem,\n        address _join,\n        address _clip,\n        address _calc,\n        address _pip\n    ) public {}\n    function addNewCollateral(CollateralOpts memory co) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// lib/dss-interfaces/src/ERC/GemAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// A base ERC-20 abstract class\n// https://eips.ethereum.org/EIPS/eip-20\ninterface GemAbstract {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\n////// lib/dss-interfaces/src/dapp/DSAuthorityAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-auth\ninterface DSAuthorityAbstract {\n    function canCall(address, address, bytes4) external view returns (bool);\n}\n\ninterface DSAuthAbstract {\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSChiefAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-chief\ninterface DSChiefAbstract {\n    function live() external view returns (uint256);\n    function launch() external;\n    function slates(bytes32) external view returns (address[] memory);\n    function votes(address) external view returns (bytes32);\n    function approvals(address) external view returns (uint256);\n    function deposits(address) external view returns (address);\n    function GOV() external view returns (address);\n    function IOU() external view returns (address);\n    function hat() external view returns (address);\n    function MAX_YAYS() external view returns (uint256);\n    function lock(uint256) external;\n    function free(uint256) external;\n    function etch(address[] calldata) external returns (bytes32);\n    function vote(address[] calldata) external returns (bytes32);\n    function vote(bytes32) external;\n    function lift(address) external;\n    function setOwner(address) external;\n    function setAuthority(address) external;\n    function isUserRoot(address) external view returns (bool);\n    function setRootUser(address, bool) external;\n    function _root_users(address) external view returns (bool);\n    function _user_roles(address) external view returns (bytes32);\n    function _capability_roles(address, bytes4) external view returns (bytes32);\n    function _public_capabilities(address, bytes4) external view returns (bool);\n    function getUserRoles(address) external view returns (bytes32);\n    function getCapabilityRoles(address, bytes4) external view returns (bytes32);\n    function isCapabilityPublic(address, bytes4) external view returns (bool);\n    function hasUserRole(address, uint8) external view returns (bool);\n    function canCall(address, address, bytes4) external view returns (bool);\n    function setUserRole(address, uint8, bool) external;\n    function setPublicCapability(address, bytes4, bool) external;\n    function setRoleCapability(uint8, address, bytes4, bool) external;\n}\n\ninterface DSChiefFabAbstract {\n    function newChief(address, uint256) external returns (address);\n}\n\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-pause\ninterface DSPauseAbstract {\n    function owner() external view returns (address);\n    function authority() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n    function setDelay(uint256) external;\n    function plans(bytes32) external view returns (bool);\n    function proxy() external view returns (address);\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function drop(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\n////// lib/dss-interfaces/src/dapp/DSPauseProxyAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-pause\ninterface DSPauseProxyAbstract {\n    function owner() external view returns (address);\n    function exec(address, bytes calldata) external returns (bytes memory);\n}\n\n////// lib/dss-interfaces/src/dapp/DSRolesAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-roles\ninterface DSRolesAbstract {\n    function _root_users(address) external view returns (bool);\n    function _user_roles(address) external view returns (bytes32);\n    function _capability_roles(address, bytes4) external view returns (bytes32);\n    function _public_capabilities(address, bytes4) external view returns (bool);\n    function getUserRoles(address) external view returns (bytes32);\n    function getCapabilityRoles(address, bytes4) external view returns (bytes32);\n    function isUserRoot(address) external view returns (bool);\n    function isCapabilityPublic(address, bytes4) external view returns (bool);\n    function hasUserRole(address, uint8) external view returns (bool);\n    function canCall(address, address, bytes4) external view returns (bool);\n    function setRootUser(address, bool) external;\n    function setUserRole(address, uint8, bool) external;\n    function setPublicCapability(address, bytes4, bool) external;\n    function setRoleCapability(uint8, address, bytes4, bool) external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSRuneAbstract.sol\n\n// Copyright (C) 2020 Maker Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-spellbook\ninterface DSRuneAbstract {\n    // @return [address] A contract address conforming to DSPauseAbstract\n    function pause()    external view returns (address);\n    // @return [address] The address of the contract to be executed\n    // TODO: is `action()` a required field? Not all spells rely on a seconary contract.\n    function action()   external view returns (address);\n    // @return [bytes32] extcodehash of rune address\n    function tag()      external view returns (bytes32);\n    // @return [bytes] The `abi.encodeWithSignature()` result of the function to be called.\n    function sig()      external view returns (bytes memory);\n    // @return [uint256] Earliest time rune can execute\n    function eta()      external view returns (uint256);\n    // The schedule() function plots the rune in the DSPause\n    function schedule() external;\n    // @return [bool] true if the rune has been cast()\n    function done()     external view returns (bool);\n    // The cast() function executes the rune\n    function cast()     external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSSpellAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-spell\ninterface DSSpellAbstract {\n    function whom() external view returns (address);\n    function mana() external view returns (uint256);\n    function data() external view returns (bytes memory);\n    function done() external view returns (bool);\n    function cast() external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSThingAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-thing\ninterface DSThingAbstract {\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\ninterface DSTokenAbstract {\n    function name() external view returns (bytes32);\n    function symbol() external view returns (bytes32);\n    function decimals() external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function transfer(address, uint256) external returns (bool);\n    function allowance(address, address) external view returns (uint256);\n    function approve(address, uint256) external returns (bool);\n    function approve(address) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function push(address, uint256) external;\n    function pull(address, uint256) external;\n    function move(address, address, uint256) external;\n    function mint(uint256) external;\n    function mint(address,uint) external;\n    function burn(uint256) external;\n    function burn(address,uint) external;\n    function setName(bytes32) external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/dapp/DSValueAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/dapphub/ds-value/blob/master/src/value.sol\ninterface DSValueAbstract {\n    function has() external view returns (bool);\n    function val() external view returns (bytes32);\n    function peek() external view returns (bytes32, bool);\n    function read() external view returns (bytes32);\n    function poke(bytes32) external;\n    function void() external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/dss/AuthGemJoinAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-deploy/blob/master/src/join.sol\ninterface AuthGemJoinAbstract {\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function gem() external view returns (address);\n    function dec() external view returns (uint256);\n    function live() external view returns (uint256);\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/CatAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\ninterface CatAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function box() external view returns (uint256);\n    function litter() external view returns (uint256);\n    function ilks(bytes32) external view returns (address, uint256, uint256);\n    function live() external view returns (uint256);\n    function vat() external view returns (address);\n    function vow() external view returns (address);\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n    function bite(bytes32, address) external returns (uint256);\n    function claw(uint256) external;\n    function cage() external;\n}\n\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function keys() external view returns (bytes32[] memory);\n    function version() external view returns (string memory);\n    function ipfs() external view returns (string memory);\n    function setVersion(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setAddress(bytes32,address) external;\n    function removeAddress(bytes32) external;\n    function count() external view returns (uint256);\n    function get(uint256) external view returns (bytes32,address);\n    function list() external view returns (bytes32[] memory);\n    function getAddress(bytes32) external view returns (address);\n}\n\n// Helper function for returning address or abstract of Chainlog\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\ncontract ChainlogHelper {\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\n}\n\n////// lib/dss-interfaces/src/dss/ClipAbstract.sol\n\n/// ClipAbstract.sol -- Clip Interface\n\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ninterface ClipAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function ilk() external view returns (bytes32);\n    function vat() external view returns (address);\n    function dog() external view returns (address);\n    function vow() external view returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function buf() external view returns (uint256);\n    function tail() external view returns (uint256);\n    function cusp() external view returns (uint256);\n    function chip() external view returns (uint64);\n    function tip() external view returns (uint192);\n    function chost() external view returns (uint256);\n    function kicks() external view returns (uint256);\n    function active(uint256) external view returns (uint256);\n    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\n    function stopped() external view returns (uint256);\n    function file(bytes32,uint256) external;\n    function file(bytes32,address) external;\n    function kick(uint256,uint256,address,address) external returns (uint256);\n    function redo(uint256,address) external;\n    function take(uint256,uint256,uint256,address,bytes calldata) external;\n    function count() external view returns (uint256);\n    function list() external view returns (uint256[] memory);\n    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\n    function upchost() external;\n    function yank(uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\ninterface ClipperMomAbstract {\n    function owner() external view returns (address);\n    function authority() external view returns (address);\n    function locked(address) external view returns (uint256);\n    function tolerance(address) external view returns (uint256);\n    function spotter() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n    function setPriceTolerance(address, uint256) external;\n    function setBreaker(address, uint256, uint256) external;\n    function tripBreaker(address) external;\n}\n\n////// lib/dss-interfaces/src/dss/DaiAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\ninterface DaiAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function version() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n    function nonces(address) external view returns (uint256);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external view returns (bytes32);\n    function transfer(address, uint256) external;\n    function transferFrom(address, address, uint256) external returns (bool);\n    function mint(address, uint256) external;\n    function burn(address, uint256) external;\n    function approve(address, uint256) external returns (bool);\n    function push(address, uint256) external;\n    function pull(address, uint256) external;\n    function move(address, address, uint256) external;\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\n}\n\n////// lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/join.sol\ninterface DaiJoinAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address usr) external;\n    function deny(address usr) external;\n    function vat() external view returns (address);\n    function dai() external view returns (address);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/DogAbstract.sol\n\n/// DogAbstract.sol -- Dog Interface\n\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ninterface DogAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilks(bytes32) external view returns (address,uint256,uint256,uint256);\n    function vow() external view returns (address);\n    function live() external view returns (uint256);\n    function Hole() external view returns (uint256);\n    function Dirt() external view returns (uint256);\n    function file(bytes32,address) external;\n    function file(bytes32,uint256) external;\n    function file(bytes32,bytes32,uint256) external;\n    function file(bytes32,bytes32,address) external;\n    function chop(bytes32) external view returns (uint256);\n    function bark(bytes32,address,address) external returns (uint256);\n    function digs(bytes32,uint256) external;\n    function cage() external;\n}\n\n////// lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-auto-line/blob/master/src/DssAutoLine.sol\ninterface DssAutoLineAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\n////// lib/dss-interfaces/src/dss/DssCdpManager.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-cdp-manager/\ninterface DssCdpManagerAbstract {\n    function vat() external view returns (address);\n    function cdpi() external view returns (uint256);\n    function urns(uint256) external view returns (address);\n    function list(uint256) external view returns (uint256,uint256);\n    function owns(uint256) external view returns (address);\n    function ilks(uint256) external view returns (bytes32);\n    function first(address) external view returns (uint256);\n    function last(address) external view returns (uint256);\n    function count(address) external view returns (uint256);\n    function cdpCan(address, uint256, address) external returns (uint256);\n    function urnCan(address, address) external returns (uint256);\n    function cdpAllow(uint256, address, uint256) external;\n    function urnAllow(address, uint256) external;\n    function open(bytes32, address) external returns (uint256);\n    function give(uint256, address) external;\n    function frob(uint256, int256, int256) external;\n    function flux(uint256, address, uint256) external;\n    function flux(bytes32, uint256, address, uint256) external;\n    function move(uint256, address, uint256) external;\n    function quit(uint256, address) external;\n    function enter(address, uint256) external;\n    function shift(uint256, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/ESMAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/esm/blob/master/src/ESM.sol\ninterface ESMAbstract {\n    function gem() external view returns (address);\n    function end() external view returns (address);\n    function proxy() external view returns (address);\n    function min() external view returns (uint256);\n    function sum(address) external view returns (address);\n    function Sum() external view returns (uint256);\n    function revokesGovernanceAccess() external view returns (bool);\n    function fire() external;\n    function deny(address) external;\n    function join(uint256) external;\n    function burn() external;\n}\n\n////// lib/dss-interfaces/src/dss/ETHJoinAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/join.sol\ninterface ETHJoinAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address usr) external;\n    function deny(address usr) external;\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address) external payable;\n    function exit(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/EndAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/end.sol\ninterface EndAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function cat() external view returns (address);\n    function dog() external view returns (address);\n    function vow() external view returns (address);\n    function pot() external view returns (address);\n    function spot() external view returns (address);\n    function live() external view returns (uint256);\n    function when() external view returns (uint256);\n    function wait() external view returns (uint256);\n    function debt() external view returns (uint256);\n    function tag(bytes32) external view returns (uint256);\n    function gap(bytes32) external view returns (uint256);\n    function Art(bytes32) external view returns (uint256);\n    function fix(bytes32) external view returns (uint256);\n    function bag(address) external view returns (uint256);\n    function out(bytes32, address) external view returns (uint256);\n    function WAD() external view returns (uint256);\n    function RAY() external view returns (uint256);\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function cage() external;\n    function cage(bytes32) external;\n    function skip(bytes32, uint256) external;\n    function snip(bytes32, uint256) external;\n    function skim(bytes32, address) external;\n    function free(bytes32) external;\n    function thaw() external;\n    function flow(bytes32) external;\n    function pack(uint256) external;\n    function cash(bytes32, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/ExponentialDecreaseAbstract.sol\n\n/// ExponentialDecreaseAbstract.sol -- Exponential Decrease Interface\n\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ninterface ExponentialDecreaseAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function cut() external view returns (uint256);\n    function file(bytes32,uint256) external;\n    function price(uint256,uint256) external view returns (uint256);\n}\n\n////// lib/dss-interfaces/src/dss/FaucetAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/token-faucet/blob/master/src/RestrictedTokenFaucet.sol\ninterface FaucetAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function list(address) external view returns (uint256);\n    function hope(address) external;\n    function nope(address) external;\n    function amt(address) external view returns (uint256);\n    function done(address, address) external view returns (bool);\n    function gulp(address) external;\n    function gulp(address, address[] calldata) external;\n    function shut(address) external;\n    function undo(address, address) external;\n    function setAmt(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/FlapAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/flap.sol\ninterface FlapAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\n    function vat() external view returns (address);\n    function gem() external view returns (address);\n    function beg() external view returns (uint256);\n    function ttl() external view returns (uint48);\n    function tau() external view returns (uint48);\n    function kicks() external view returns (uint256);\n    function live() external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function kick(uint256, uint256) external returns (uint256);\n    function tick(uint256) external;\n    function tend(uint256, uint256, uint256) external;\n    function deal(uint256) external;\n    function cage(uint256) external;\n    function yank(uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/FlashAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-flash/blob/master/src/flash.sol\ninterface FlashAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function daiJoin() external view returns (address);\n    function dai() external view returns (address);\n    function vow() external view returns (address);\n    function max() external view returns (uint256);\n    function toll() external view returns (uint256);\n    function CALLBACK_SUCCESS() external view returns (bytes32);\n    function CALLBACK_SUCCESS_VAT_DAI() external view returns (bytes32);\n    function file(bytes32, uint256) external;\n    function maxFlashLoan(address) external view returns (uint256);\n    function flashFee(address, uint256) external view returns (uint256);\n    function flashLoan(address, address, uint256, bytes calldata) external returns (bool);\n    function vatDaiFlashLoan(address, uint256, bytes calldata) external returns (bool);\n    function convert() external;\n    function accrue() external;\n}\n\n////// lib/dss-interfaces/src/dss/FlipAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\ninterface FlipAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address usr) external;\n    function deny(address usr) external;\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n    function vat() external view returns (address);\n    function cat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function beg() external view returns (uint256);\n    function ttl() external view returns (uint48);\n    function tau() external view returns (uint48);\n    function kicks() external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\n    function tick(uint256) external;\n    function tend(uint256, uint256, uint256) external;\n    function dent(uint256, uint256, uint256) external;\n    function deal(uint256) external;\n    function yank(uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/FlipperMomAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\ninterface FlipperMomAbstract {\n    function owner() external view returns (address);\n    function authority() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n    function cat() external returns (address);\n    function rely(address) external;\n    function deny(address) external;\n}\n\n////// lib/dss-interfaces/src/dss/FlopAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/flop.sol\ninterface FlopAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\n    function vat() external view returns (address);\n    function gem() external view returns (address);\n    function beg() external view returns (uint256);\n    function pad() external view returns (uint256);\n    function ttl() external view returns (uint48);\n    function tau() external view returns (uint48);\n    function kicks() external view returns (uint256);\n    function live() external view returns (uint256);\n    function vow() external view returns (address);\n    function file(bytes32, uint256) external;\n    function kick(address, uint256, uint256) external returns (uint256);\n    function tick(uint256) external;\n    function dent(uint256, uint256, uint256) external;\n    function deal(uint256) external;\n    function cage() external;\n    function yank(uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/join.sol\ninterface GemJoinAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function gem() external view returns (address);\n    function dec() external view returns (uint256);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/GemJoinImplementationAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-deploy/blob/master/src/join.sol\ninterface GemJoinImplementationAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function gem() external view returns (address);\n    function dec() external view returns (uint256);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, uint256) external;\n    function setImplementation(address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/GemJoinManagedAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-gem-joins/blob/master/src/join-managed.sol\ninterface GemJoinManagedAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function ilk() external view returns (bytes32);\n    function gem() external view returns (address);\n    function dec() external view returns (uint256);\n    function live() external view returns (uint256);\n    function cage() external;\n    function join(address, uint256) external;\n    function exit(address, address, uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/GetCdpsAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-cdp-manager/blob/master/src/GetCdps.sol\ninterface GetCdpsAbstract {\n    function getCdpsAsc(address, address) external view returns (uint256[] memory, address[] memory, bytes32[] memory);\n    function getCdpsDesc(address, address) external view returns (uint256[] memory, address[] memory, bytes32[] memory);\n}\n\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/ilk-registry\ninterface IlkRegistryAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function vat() external view returns (address);\n    function dog() external view returns (address);\n    function cat() external view returns (address);\n    function spot() external view returns (address);\n    function ilkData(bytes32) external view returns (\n        uint96, address, address, uint8, uint96, address, address, string memory, string memory\n    );\n    function ilks() external view returns (bytes32[] memory);\n    function ilks(uint) external view returns (bytes32);\n    function add(address) external;\n    function remove(bytes32) external;\n    function update(bytes32) external;\n    function removeAuth(bytes32) external;\n    function file(bytes32, address) external;\n    function file(bytes32, bytes32, address) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, string calldata) external;\n    function count() external view returns (uint256);\n    function list() external view returns (bytes32[] memory);\n    function list(uint256, uint256) external view returns (bytes32[] memory);\n    function get(uint256) external view returns (bytes32);\n    function info(bytes32) external view returns (\n        string memory, string memory, uint256, uint256, address, address, address, address\n    );\n    function pos(bytes32) external view returns (uint256);\n    function class(bytes32) external view returns (uint256);\n    function gem(bytes32) external view returns (address);\n    function pip(bytes32) external view returns (address);\n    function join(bytes32) external view returns (address);\n    function xlip(bytes32) external view returns (address);\n    function dec(bytes32) external view returns (uint256);\n    function symbol(bytes32) external view returns (string memory);\n    function name(bytes32) external view returns (string memory);\n    function put(bytes32, address, address, uint256, uint256, address, address, string calldata, string calldata) external;\n}\n\n////// lib/dss-interfaces/src/dss/JugAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\ninterface JugAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function ilks(bytes32) external view returns (uint256, uint256);\n    function vat() external view returns (address);\n    function vow() external view returns (address);\n    function base() external view returns (address);\n    function init(bytes32) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, address) external;\n    function drip(bytes32) external returns (uint256);\n}\n\n////// lib/dss-interfaces/src/dss/LPOsmAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/univ2-lp-oracle\ninterface LPOsmAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function stopped() external view returns (uint256);\n    function bud(address) external view returns (uint256);\n    function dec0() external view returns (uint8);\n    function dec1() external view returns (uint8);\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n    function wat() external view returns (bytes32);\n    function hop() external view returns (uint32);\n    function src() external view returns (address);\n    function zzz() external view returns (uint64);\n    function change(address) external;\n    function step(uint256) external;\n    function stop() external;\n    function start() external;\n    function pass() external view returns (bool);\n    function poke() external;\n    function peek() external view returns (bytes32, bool);\n    function peep() external view returns (bytes32, bool);\n    function read() external view returns (bytes32);\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function link(uint256, address) external;\n}\n\n////// lib/dss-interfaces/src/dss/LerpAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-lerp/blob/master/src/Lerp.sol\ninterface LerpAbstract_1 {\n    function target() external view returns (address);\n    function what() external view returns (bytes32);\n    function start() external view returns (uint256);\n    function end() external view returns (uint256);\n    function duration() external view returns (uint256);\n    function done() external view returns (bool);\n    function startTime() external view returns (uint256);\n    function tick() external;\n    function ilk() external view returns (bytes32);\n}\n\n////// lib/dss-interfaces/src/dss/LerpFactoryAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-lerp/blob/master/src/LerpFactory.sol\ninterface LerpFactoryAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function lerps(bytes32) external view returns (address);\n    function active(uint256) external view returns (address);\n    function newLerp(bytes32, address, bytes32, uint256, uint256, uint256, uint256) external view returns (address);\n    function newIlkLerp(bytes32, address, bytes32, bytes32, uint256, uint256, uint256, uint256) external view returns (address);\n    function tall() external;\n    function count() external view returns (uint256);\n    function list() external view returns (address[] memory);\n}\n\n////// lib/dss-interfaces/src/dss/LinearDecreaseAbstract.sol\n\n/// LinearDecreaseAbstract.sol -- Linear Decrease Interface\n\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ninterface LinearDecreaseAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function tau() external view returns (uint256);\n    function file(bytes32,uint256) external;\n    function price(uint256,uint256) external view returns (uint256);\n}\n\n////// lib/dss-interfaces/src/dss/MedianAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/median\ninterface MedianAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function age() external view returns (uint32);\n    function wat() external view returns (bytes32);\n    function bar() external view returns (uint256);\n    function orcl(address) external view returns (uint256);\n    function bud(address) external view returns (uint256);\n    function slot(uint8) external view returns (address);\n    function read() external view returns (uint256);\n    function peek() external view returns (uint256, bool);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\n}\n\n////// lib/dss-interfaces/src/dss/MkrAuthorityAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/mkr-authority/blob/master/src/MkrAuthority.sol\ninterface MkrAuthorityAbstract {\n    function root() external returns (address);\n    function setRoot(address) external;\n    function wards(address) external returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function canCall(address, address, bytes4) external returns (bool);\n}\n\n////// lib/dss-interfaces/src/dss/OsmAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/osm\ninterface OsmAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function stopped() external view returns (uint256);\n    function src() external view returns (address);\n    function hop() external view returns (uint16);\n    function zzz() external view returns (uint64);\n    function bud(address) external view returns (uint256);\n    function stop() external;\n    function start() external;\n    function change(address) external;\n    function step(uint16) external;\n    function void() external;\n    function pass() external view returns (bool);\n    function poke() external;\n    function peek() external view returns (bytes32, bool);\n    function peep() external view returns (bytes32, bool);\n    function read() external view returns (bytes32);\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n}\n\n////// lib/dss-interfaces/src/dss/OsmMomAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/osm-mom\ninterface OsmMomAbstract {\n    function owner() external view returns (address);\n    function authority() external view returns (address);\n    function osms(bytes32) external view returns (address);\n    function setOsm(bytes32, address) external;\n    function setOwner(address) external;\n    function setAuthority(address) external;\n    function stop(bytes32) external;\n}\n\n////// lib/dss-interfaces/src/dss/PotAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\ninterface PotAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function pie(address) external view returns (uint256);\n    function Pie() external view returns (uint256);\n    function dsr() external view returns (uint256);\n    function chi() external view returns (uint256);\n    function vat() external view returns (address);\n    function vow() external view returns (address);\n    function rho() external view returns (uint256);\n    function live() external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function file(bytes32, address) external;\n    function cage() external;\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n\n////// lib/dss-interfaces/src/dss/PotHelper.sol\n/* pragma solidity >=0.5.12; */\n\n/* import { PotAbstract } from \"./PotAbstract.sol\"; */\n\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\ncontract PotHelper {\n\n    PotAbstract pa;\n\n    constructor(address _pot) public {\n        pa = PotAbstract(_pot);\n    }\n\n    // https://github.com/makerdao/dss/blob/master/src/pot.sol#L79\n    uint256 constant ONE = 10 ** 27;\n\n    function _mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function _rmul(uint x, uint y) internal pure returns (uint z) {\n        z = _mul(x, y) / ONE;\n    }\n\n    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n\n    // View function for calculating value of chi iff drip() is called in the same block.\n    function drop() external view returns (uint256) {\n        if (block.timestamp == pa.rho()) return pa.chi();\n        return _rmul(rpow(pa.dsr(), block.timestamp - pa.rho(), ONE), pa.chi());\n    }\n\n    // Pass the Pot Abstract for additional operations\n    function pot() external view returns (PotAbstract) {\n        return pa;\n    }\n}\n\n////// lib/dss-interfaces/src/dss/SpotAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\ninterface SpotAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function ilks(bytes32) external view returns (address, uint256);\n    function vat() external view returns (address);\n    function par() external view returns (uint256);\n    function live() external view returns (uint256);\n    function file(bytes32, bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function poke(bytes32) external;\n    function cage() external;\n}\n\n////// lib/dss-interfaces/src/dss/StairstepExponentialDecreaseAbstract.sol\n\n/// StairstepExponentialDecreaseAbstract.sol -- StairstepExponentialDecrease Interface\n\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ninterface StairstepExponentialDecreaseAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function step() external view returns (uint256);\n    function cut() external view returns (uint256);\n    function file(bytes32,uint256) external;\n    function price(uint256,uint256) external view returns (uint256);\n}\n\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\ninterface VatAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function can(address, address) external view returns (uint256);\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n    function urns(bytes32, address) external view returns (uint256, uint256);\n    function gem(bytes32, address) external view returns (uint256);\n    function dai(address) external view returns (uint256);\n    function sin(address) external view returns (uint256);\n    function debt() external view returns (uint256);\n    function vice() external view returns (uint256);\n    function Line() external view returns (uint256);\n    function live() external view returns (uint256);\n    function init(bytes32) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function cage() external;\n    function slip(bytes32, address, int256) external;\n    function flux(bytes32, address, address, uint256) external;\n    function move(address, address, uint256) external;\n    function frob(bytes32, address, address, address, int256, int256) external;\n    function fork(bytes32, address, address, int256, int256) external;\n    function grab(bytes32, address, address, address, int256, int256) external;\n    function heal(uint256) external;\n    function suck(address, address, uint256) external;\n    function fold(bytes32, address, int256) external;\n}\n\n////// lib/dss-interfaces/src/dss/VestAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-vest/blob/master/src/DssVest.sol\ninterface VestAbstract {\n    function TWENTY_YEARS() external view returns (uint256);\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function awards(uint256) external view returns (address, uint48, uint48, uint48, address, uint8, uint128, uint128);\n    function ids() external view returns (uint256);\n    function cap() external view returns (uint256);\n    function usr(uint256) external view returns (address);\n    function bgn(uint256) external view returns (uint256);\n    function clf(uint256) external view returns (uint256);\n    function fin(uint256) external view returns (uint256);\n    function mgr(uint256) external view returns (address);\n    function res(uint256) external view returns (uint256);\n    function tot(uint256) external view returns (uint256);\n    function rxd(uint256) external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);\n    function vest(uint256) external;\n    function vest(uint256, uint256) external;\n    function accrued(uint256) external view returns (uint256);\n    function unpaid(uint256) external view returns (uint256);\n    function restrict(uint256) external;\n    function unrestrict(uint256) external;\n    function yank(uint256) external;\n    function yank(uint256, uint256) external;\n    function move(uint256, address) external;\n    function valid(uint256) external view returns (bool);\n}\n\n////// lib/dss-interfaces/src/dss/VowAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\ninterface VowAbstract {\n    function wards(address) external view returns (uint256);\n    function rely(address usr) external;\n    function deny(address usr) external;\n    function vat() external view returns (address);\n    function flapper() external view returns (address);\n    function flopper() external view returns (address);\n    function sin(uint256) external view returns (uint256);\n    function Sin() external view returns (uint256);\n    function Ash() external view returns (uint256);\n    function wait() external view returns (uint256);\n    function dump() external view returns (uint256);\n    function sump() external view returns (uint256);\n    function bump() external view returns (uint256);\n    function hump() external view returns (uint256);\n    function live() external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function file(bytes32, address) external;\n    function fess(uint256) external;\n    function flog(uint256) external;\n    function heal(uint256) external;\n    function kiss(uint256) external;\n    function flop() external returns (uint256);\n    function flap() external returns (uint256);\n    function cage() external;\n}\n\n////// lib/dss-interfaces/src/sai/GemPitAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/pit.sol\ninterface GemPitAbstract {\n    function burn(address) external;\n}\n\n////// lib/dss-interfaces/src/sai/SaiMomAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/mom.sol\ninterface SaiMomAbstract {\n    function tub() external view returns (address);\n    function tap() external view returns (address);\n    function vox() external view returns (address);\n    function setCap(uint256) external;\n    function setMat(uint256) external;\n    function setTax(uint256) external;\n    function setFee(uint256) external;\n    function setAxe(uint256) external;\n    function setTubGap(uint256) external;\n    function setPip(address) external;\n    function setPep(address) external;\n    function setVox(address) external;\n    function setTapGap(uint256) external;\n    function setWay(uint256) external;\n    function setHow(uint256) external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/sai/SaiTapAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/tap.sol\ninterface SaiTapAbstract {\n    function sai() external view returns (address);\n    function sin() external view returns (address);\n    function skr() external view returns (address);\n    function vox() external view returns (address);\n    function tub() external view returns (address);\n    function gap() external view returns (uint256);\n    function off() external view returns (bool);\n    function fix() external view returns (uint256);\n    function joy() external view returns (uint256);\n    function woe() external view returns (uint256);\n    function fog() external view returns (uint256);\n    function mold(bytes32, uint256) external;\n    function heal() external;\n    function s2s() external returns (uint256);\n    function bid(uint256) external returns (uint256);\n    function ask(uint256) external returns (uint256);\n    function bust(uint256) external;\n    function boom(uint256) external;\n    function cage(uint256) external;\n    function cash(uint256) external;\n    function mock(uint256) external;\n    function vent() external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/sai/SaiTopAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/top.sol\ninterface SaiTopAbstract {\n    function vox() external view returns (address);\n    function tub() external view returns (address);\n    function tap() external view returns (address);\n    function sai() external view returns (address);\n    function sin() external view returns (address);\n    function skr() external view returns (address);\n    function gem() external view returns (address);\n    function fix() external view returns (uint256);\n    function fit() external view returns (uint256);\n    function caged() external view returns (uint256);\n    function cooldown() external view returns (uint256);\n    function era() external view returns (uint256);\n    function cage() external;\n    function flow() external;\n    function setCooldown(uint256) external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/sai/SaiTubAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/tub.sol\ninterface SaiTubAbstract {\n    function sai() external view returns (address);\n    function sin() external view returns (address);\n    function skr() external view returns (address);\n    function gem() external view returns (address);\n    function gov() external view returns (address);\n    function vox() external view returns (address);\n    function pip() external view returns (address);\n    function pep() external view returns (address);\n    function tap() external view returns (address);\n    function pit() external view returns (address);\n    function axe() external view returns (uint256);\n    function cap() external view returns (uint256);\n    function mat() external view returns (uint256);\n    function tax() external view returns (uint256);\n    function fee() external view returns (uint256);\n    function gap() external view returns (uint256);\n    function off() external view returns (bool);\n    function out() external view returns (bool);\n    function fit() external view returns (uint256);\n    function rho() external view returns (uint256);\n    function rum() external view returns (uint256);\n    function cupi() external view returns (uint256);\n    function cups(bytes32) external view returns (address, uint256, uint256, uint256);\n    function lad(bytes32) external view returns (address);\n    function ink(bytes32) external view returns (address);\n    function tab(bytes32) external view returns (uint256);\n    function rap(bytes32) external returns (uint256);\n    function din() external returns (uint256);\n    function air() external view returns (uint256);\n    function pie() external view returns (uint256);\n    function era() external view returns (uint256);\n    function mold(bytes32, uint256) external;\n    function setPip(address) external;\n    function setPep(address) external;\n    function setVox(address) external;\n    function turn(address) external;\n    function per() external view returns (uint256);\n    function ask(uint256) external view returns (uint256);\n    function bid(uint256) external view returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n    function chi() external returns (uint256);\n    function rhi() external returns (uint256);\n    function drip() external;\n    function tag() external view returns (uint256);\n    function safe(bytes32) external returns (bool);\n    function open() external returns (bytes32);\n    function give(bytes32, address) external;\n    function lock(bytes32, uint256) external;\n    function free(bytes32, uint256) external;\n    function draw(bytes32, uint256) external;\n    function wipe(bytes32, uint256) external;\n    function shut(bytes32) external;\n    function bite(bytes32) external;\n    function cage(uint256, uint256) external;\n    function flow() external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/sai/SaiVoxAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/sai/blob/master/src/vox.sol\ninterface SaiVoxAbstract {\n    function fix() external view returns (uint256);\n    function how() external view returns (uint256);\n    function tau() external view returns (uint256);\n    function era() external view returns (uint256);\n    function mold(bytes32, uint256) external;\n    function par() external returns (uint256);\n    function way() external returns (uint256);\n    function tell(uint256) external;\n    function tune(uint256) external;\n    function prod() external;\n    function authority() external view returns (address);\n    function owner() external view returns (address);\n    function setOwner(address) external;\n    function setAuthority(address) external;\n}\n\n////// lib/dss-interfaces/src/Interfaces.sol\n/* pragma solidity >=0.5.12; */\n\n/* import { GemAbstract } from \"./ERC/GemAbstract.sol\"; */\n\n/* import { DSAuthorityAbstract, DSAuthAbstract } from \"./dapp/DSAuthorityAbstract.sol\"; */\n/* import { DSChiefAbstract } from \"./dapp/DSChiefAbstract.sol\"; */\n/* import { DSPauseAbstract } from \"./dapp/DSPauseAbstract.sol\"; */\n/* import { DSPauseProxyAbstract } from \"./dapp/DSPauseProxyAbstract.sol\"; */\n/* import { DSRolesAbstract } from \"./dapp/DSRolesAbstract.sol\"; */\n/* import { DSSpellAbstract } from \"./dapp/DSSpellAbstract.sol\"; */\n/* import { DSRuneAbstract } from \"./dapp/DSRuneAbstract.sol\"; */\n/* import { DSThingAbstract } from \"./dapp/DSThingAbstract.sol\"; */\n/* import { DSTokenAbstract } from \"./dapp/DSTokenAbstract.sol\"; */\n/* import { DSValueAbstract } from \"./dapp/DSValueAbstract.sol\"; */\n\n/* import { AuthGemJoinAbstract } from \"./dss/AuthGemJoinAbstract.sol\"; */\n/* import { CatAbstract } from \"./dss/CatAbstract.sol\"; */\n/* import { ChainlogAbstract } from \"./dss/ChainlogAbstract.sol\"; */\n/* import { ChainlogHelper } from \"./dss/ChainlogAbstract.sol\"; */\n/* import { ClipAbstract } from \"./dss/ClipAbstract.sol\"; */\n/* import { ClipperMomAbstract } from \"./dss/ClipperMomAbstract.sol\"; */\n/* import { DaiAbstract } from \"./dss/DaiAbstract.sol\"; */\n/* import { DaiJoinAbstract } from \"./dss/DaiJoinAbstract.sol\"; */\n/* import { DogAbstract } from \"./dss/DogAbstract.sol\"; */\n/* import { DssAutoLineAbstract } from \"./dss/DssAutoLineAbstract.sol\"; */\n/* import { DssCdpManagerAbstract } from \"./dss/DssCdpManager.sol\"; */\n/* import { EndAbstract } from \"./dss/EndAbstract.sol\"; */\n/* import { ESMAbstract } from \"./dss/ESMAbstract.sol\"; */\n/* import { ETHJoinAbstract } from \"./dss/ETHJoinAbstract.sol\"; */\n/* import { ExponentialDecreaseAbstract } from \"./dss/ExponentialDecreaseAbstract.sol\"; */\n/* import { FaucetAbstract } from \"./dss/FaucetAbstract.sol\"; */\n/* import { FlapAbstract } from \"./dss/FlapAbstract.sol\"; */\n/* import { FlashAbstract } from \"./dss/FlashAbstract.sol\"; */\n/* import { FlipAbstract } from \"./dss/FlipAbstract.sol\"; */\n/* import { FlipperMomAbstract } from \"./dss/FlipperMomAbstract.sol\"; */\n/* import { FlopAbstract } from \"./dss/FlopAbstract.sol\"; */\n/* import { GemJoinAbstract } from \"./dss/GemJoinAbstract.sol\"; */\n/* import { GemJoinImplementationAbstract } from \"./dss/GemJoinImplementationAbstract.sol\"; */\n/* import { GemJoinManagedAbstract } from \"./dss/GemJoinManagedAbstract.sol\"; */\n/* import { GetCdpsAbstract } from \"./dss/GetCdpsAbstract.sol\"; */\n/* import { IlkRegistryAbstract } from \"./dss/IlkRegistryAbstract.sol\"; */\n/* import { JugAbstract } from \"./dss/JugAbstract.sol\"; */\n/* import { LerpAbstract } from \"./dss/LerpAbstract.sol\"; */\n/* import { LerpFactoryAbstract } from \"./dss/LerpFactoryAbstract.sol\"; */\n/* import { LinearDecreaseAbstract } from \"./dss/LinearDecreaseAbstract.sol\"; */\n/* import { LPOsmAbstract } from \"./dss/LPOsmAbstract.sol\"; */\n/* import { MkrAuthorityAbstract } from \"./dss/MkrAuthorityAbstract.sol\"; */\n/* import { MedianAbstract } from \"./dss/MedianAbstract.sol\"; */\n/* import { OsmAbstract } from \"./dss/OsmAbstract.sol\"; */\n/* import { OsmMomAbstract } from \"./dss/OsmMomAbstract.sol\"; */\n/* import { PotAbstract } from \"./dss/PotAbstract.sol\"; */\n/* import { PotHelper } from \"./dss/PotHelper.sol\"; */\n/* import { SpotAbstract } from \"./dss/SpotAbstract.sol\"; */\n/* import { StairstepExponentialDecreaseAbstract } from \"./dss/StairstepExponentialDecreaseAbstract.sol\"; */\n/* import { VatAbstract } from \"./dss/VatAbstract.sol\"; */\n/* import { VestAbstract } from \"./dss/VestAbstract.sol\"; */\n/* import { VowAbstract } from \"./dss/VowAbstract.sol\"; */\n\n/* import { GemPitAbstract } from \"./sai/GemPitAbstract.sol\"; */\n/* import { SaiMomAbstract } from \"./sai/SaiMomAbstract.sol\"; */\n/* import { SaiTapAbstract } from \"./sai/SaiTapAbstract.sol\"; */\n/* import { SaiTopAbstract } from \"./sai/SaiTopAbstract.sol\"; */\n/* import { SaiTubAbstract } from \"./sai/SaiTubAbstract.sol\"; */\n/* import { SaiVoxAbstract } from \"./sai/SaiVoxAbstract.sol\"; */\n\n////// src/DssSpell.sol\n//\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n/* import { VatAbstract, LerpFactoryAbstract, SpotAbstract} from \"dss-interfaces/Interfaces.sol\"; */\n\ninterface LerpAbstract_2 {\n    function tick() external returns (uint256);\n}\n\ncontract DssSpellAction is DssAction {\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/e27219d6d1b5a9751e3a7af48474643c657e3dfa/governance/votes/Executive%20vote%20-%20November%2019%2C%202021.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2021-11-19 MakerDAO Executive Spell | Hash: 0xbbd3dadbf88c6066ef0be6ca51bd3d795d06ccf20d67b66b5aa4675e8c097436\";\n\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n    //\n\n    // --- Rates ---\n    uint256 constant FOUR_PCT_RATE           = 1000000001243680656318820312;\n    uint256 constant SEVEN_PCT_RATE          = 1000000002145441671308778766;\n\n    // --- Math ---\n    uint256 constant MILLION                 = 10 ** 6;\n    uint256 constant RAY                     = 10 ** 27;\n\n    // --- WBTC-B ---\n    address constant MCD_JOIN_WBTC_B         = 0xfA8c996e158B80D77FbD0082BB437556A65B96E0;\n    address constant MCD_CLIP_WBTC_B         = 0xe30663C6f83A06eDeE6273d72274AE24f1084a22;\n    address constant MCD_CLIP_CALC_WBTC_B    = 0xeb911E99D7ADD1350DC39d84D60835BA9B287D96;\n\n    // --- Offboarding: Current Liquidation Ratio ---\n    uint256 constant CURRENT_AAVE_MAT        =  165 * RAY / 100;\n    uint256 constant CURRENT_BAL_MAT         =  165 * RAY / 100;\n    uint256 constant CURRENT_COMP_MAT        =  165 * RAY / 100;\n\n    // --- Offboarding: Target Liquidation Ratio ---\n    uint256 constant TARGET_AAVE_MAT         = 2100 * RAY / 100;\n    uint256 constant TARGET_BAL_MAT          = 2300 * RAY / 100;\n    uint256 constant TARGET_COMP_MAT         = 2000 * RAY / 100;\n\n    // --- OLD LERP FAB ---\n    address constant OLD_LERP_FAB            = 0x00B416da876fe42dd02813da435Cc030F0d72434;\n\n    // --- Offboarding: Increased Target Liquidation Ratios ---\n    uint256 constant TARGET_LRC_MAT          = 24300 * RAY / 100;\n    uint256 constant TARGET_BAT_MAT          = 11200 * RAY / 100;\n    uint256 constant TARGET_ZRX_MAT          =  5500 * RAY / 100;\n    uint256 constant TARGET_UNIV2LINKETH_MAT =  1600 * RAY / 100;\n\n    function _add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"DssSpellAction-add-overflow\");\n    }\n    function _sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"DssSpellAction-sub-underflow\");\n    }\n\n    function actions() public override {\n\n        // WBTC\n        address WBTC     = DssExecLib.getChangelogAddress(\"WBTC\");\n        address PIP_WBTC = DssExecLib.getChangelogAddress(\"PIP_WBTC\");\n\n        //  Add WBTC-B as a new Vault Type\n        //  https://vote.makerdao.com/polling/QmSL1kDq?network=mainnet#poll-detail (WBTC-B Onboarding)\n        //  https://vote.makerdao.com/polling/QmRUgsvi?network=mainnet#poll-detail (Stability Fee)\n        //  https://forum.makerdao.com/t/wbtc-b-collateral-onboarding-risk-assessment/11397\n        //  https://forum.makerdao.com/t/signal-request-new-iam-vault-type-for-wbtc-with-lower-lr/5736\n        DssExecLib.addNewCollateral(\n            CollateralOpts({\n                ilk:                   \"WBTC-B\",\n                gem:                   WBTC,\n                join:                  MCD_JOIN_WBTC_B,\n                clip:                  MCD_CLIP_WBTC_B,\n                calc:                  MCD_CLIP_CALC_WBTC_B,\n                pip:                   PIP_WBTC,\n                isLiquidatable:        true,\n                isOSM:                 true,\n                whitelistOSM:          true,\n                ilkDebtCeiling:        30 * MILLION,\n                minVaultAmount:        30000,\n                maxLiquidationAmount:  25 * MILLION,\n                liquidationPenalty:    1300,           // 13% penalty fee\n                ilkStabilityFee:       SEVEN_PCT_RATE, // 7% stability fee\n                startingPriceFactor:   12000,          // Auction price begins at 120% of oracle\n                breakerTolerance:      5000,           // Allows for a 50% hourly price drop before disabling liquidations\n                auctionDuration:       90 minutes,\n                permittedDrop:         4000,           // 40% price drop before reset\n                liquidationRatio:      13000,          // 130% collateralization\n                kprFlatReward:         300,            // 300 Dai\n                kprPctReward:          10              // 0.1%\n            })\n        );\n        DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_WBTC_B, 60 seconds, 9900);\n        DssExecLib.setIlkAutoLineParameters(\"WBTC-B\", 500 * MILLION, 30 * MILLION, 8 hours);\n\n        // Changelog\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_WBTC_B\", MCD_JOIN_WBTC_B);\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_WBTC_B\", MCD_CLIP_WBTC_B);\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_WBTC_B\", MCD_CLIP_CALC_WBTC_B);\n\n        DssExecLib.setChangelogVersion(\"1.9.10\");\n\n        //\n        // Collateral Offboarding\n        //\n\n        uint256 totalLineReduction;\n        uint256 line;\n        VatAbstract vat = VatAbstract(DssExecLib.vat());\n\n        // Offboard AAVE-A\n        // https://vote.makerdao.com/polling/QmPdvqZg?network=mainnet#poll-detail\n        // https://forum.makerdao.com/t/proposed-offboarding-collateral-parameters-2/11548\n        // https://forum.makerdao.com/t/signal-request-offboarding-matic-comp-aave-and-bal/11184\n\n        (,,,line,) = vat.ilks(\"AAVE-A\");\n        totalLineReduction = _add(totalLineReduction, line);\n        DssExecLib.setIlkLiquidationPenalty(\"AAVE-A\", 0);\n        DssExecLib.removeIlkFromAutoLine(\"AAVE-A\");\n        DssExecLib.setIlkDebtCeiling(\"AAVE-A\", 0);\n        DssExecLib.linearInterpolation({\n            _name:      \"AAVE-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"AAVE-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_AAVE_MAT,\n            _end:       TARGET_AAVE_MAT,\n            _duration:  30 days\n        });\n\n        // Offboard BAL-A\n        // https://vote.makerdao.com/polling/QmcwtUau?network=mainnet#poll-detail\n        // https://forum.makerdao.com/t/proposed-offboarding-collateral-parameters-2/11548\n        // https://forum.makerdao.com/t/signal-request-offboarding-matic-comp-aave-and-bal/11184\n\n        (,,,line,) = vat.ilks(\"BAL-A\");\n        totalLineReduction = _add(totalLineReduction, line);\n        DssExecLib.setIlkLiquidationPenalty(\"BAL-A\", 0);\n        DssExecLib.removeIlkFromAutoLine(\"BAL-A\");\n        DssExecLib.setIlkDebtCeiling(\"BAL-A\", 0);\n        DssExecLib.linearInterpolation({\n            _name:      \"BAL-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"BAL-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_BAL_MAT,\n            _end:       TARGET_BAL_MAT,\n            _duration:  30 days\n        });\n\n        // Offboard COMP-A\n        // https://vote.makerdao.com/polling/QmRDeGCn?network=mainnet#poll-detail\n        // https://forum.makerdao.com/t/proposed-offboarding-collateral-parameters-2/11548\n        // https://forum.makerdao.com/t/signal-request-offboarding-matic-comp-aave-and-bal/11184\n\n        (,,,line,) = vat.ilks(\"COMP-A\");\n        totalLineReduction = _add(totalLineReduction, line);\n        DssExecLib.setIlkLiquidationPenalty(\"COMP-A\", 0);\n        DssExecLib.removeIlkFromAutoLine(\"COMP-A\");\n        DssExecLib.setIlkDebtCeiling(\"COMP-A\", 0);\n        DssExecLib.linearInterpolation({\n            _name:      \"COMP-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"COMP-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_COMP_MAT,\n            _end:       TARGET_COMP_MAT,\n            _duration:  30 days\n        });\n\n        // Decrease Global Debt Ceiling in accordance with Offboarded Ilks\n        vat.file(\"Line\", _sub(vat.Line(), totalLineReduction));\n\n        // Increase Ilk Local Liquidation Limits (ilk.hole)\n        // https://vote.makerdao.com/polling/QmQN6FX8?network=mainnet#poll-detail\n        // https://forum.makerdao.com/t/auction-throughput-parameters-adjustments-nov-9-2021/11531\n        DssExecLib.setIlkMaxLiquidationAmount(\"ETH-A\",    65 * MILLION); // From 40M to 65M DAI\n        DssExecLib.setIlkMaxLiquidationAmount(\"ETH-B\",    30 * MILLION); // From 25M to 30M DAI\n        DssExecLib.setIlkMaxLiquidationAmount(\"ETH-C\",    35 * MILLION); // From 30M to 35M DAI\n        DssExecLib.setIlkMaxLiquidationAmount(\"WBTC-A\",   40 * MILLION); // From 25M to 40M DAI\n        DssExecLib.setIlkMaxLiquidationAmount(\"WSTETH-A\",  7 * MILLION); // From  3M to  7M DAI\n\n        // Increase WBTC-A Stability Fee (duty)\n        // https://vote.makerdao.com/polling/QmRUgsvi?network=mainnet#poll-detail\n        // https://forum.makerdao.com/t/mid-month-parameter-changes-proposal-ppg-omc-001-2021-11-10/11562\n        DssExecLib.setIlkStabilityFee(\"WBTC-A\", FOUR_PCT_RATE, true); // From 2.5% to 4%\n\n        // Increase LRC-A Target Liquidation Ratio (mat)\n        address LRC_LERP = LerpFactoryAbstract(OLD_LERP_FAB).lerps(\"LRC Offboarding\");\n        uint256 CURRENT_LRC_MAT = LerpAbstract_2(LRC_LERP).tick();\n        SpotAbstract(DssExecLib.spotter()).deny(LRC_LERP);\n        DssExecLib.linearInterpolation({\n            _name:      \"LRC-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"LRC-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_LRC_MAT,\n            _end:       TARGET_LRC_MAT,\n            _duration:  30 days\n        });\n\n        // Increase BAT-A Target Liquidation Ratio (mat)\n        address BAT_LERP = LerpFactoryAbstract(OLD_LERP_FAB).lerps(\"BAT Offboarding\");\n        uint256 CURRENT_BAT_MAT = LerpAbstract_2(BAT_LERP).tick();\n        SpotAbstract(DssExecLib.spotter()).deny(BAT_LERP);\n        DssExecLib.linearInterpolation({\n            _name:      \"BAT-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"BAT-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_BAT_MAT,\n            _end:       TARGET_BAT_MAT,\n            _duration:  30 days\n        });\n\n        // Increase ZRX-A Target Liquidation Ratio (mat)\n        address ZRX_LERP = LerpFactoryAbstract(OLD_LERP_FAB).lerps(\"ZRX Offboarding\");\n        uint256 CURRENT_ZRX_MAT = LerpAbstract_2(ZRX_LERP).tick();\n        SpotAbstract(DssExecLib.spotter()).deny(ZRX_LERP);\n        DssExecLib.linearInterpolation({\n            _name:      \"ZRX-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"ZRX-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_ZRX_MAT,\n            _end:       TARGET_ZRX_MAT,\n            _duration:  30 days\n        });\n\n        // Increase UNIV2LINKETH-A Target Liquidation Ratio (mat)\n        address UNIV2LINKETH_LERP = LerpFactoryAbstract(OLD_LERP_FAB).lerps(\"UNIV2LINKETH Offboarding\");\n        uint256 CURRENT_UNIV2LINKETH_MAT = LerpAbstract_2(UNIV2LINKETH_LERP).tick();\n        SpotAbstract(DssExecLib.spotter()).deny(UNIV2LINKETH_LERP);\n        DssExecLib.linearInterpolation({\n            _name:      \"UNIV2LINKETH-A Offboarding\",\n            _target:    DssExecLib.spotter(),\n            _ilk:       \"UNIV2LINKETH-A\",\n            _what:      \"mat\",\n            _startTime: block.timestamp,\n            _start:     CURRENT_UNIV2LINKETH_MAT,\n            _end:       TARGET_UNIV2LINKETH_MAT,\n            _duration:  30 days\n        });\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:fd88cee74f7d78697775abdae53f9da1559728e4", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}