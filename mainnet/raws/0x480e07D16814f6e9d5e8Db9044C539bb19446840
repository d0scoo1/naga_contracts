{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CriminalRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interfaces/ICriminalRecords.sol\\\";\\nimport \\\"./interfaces/ICounterfeitMoney.sol\\\";\\nimport \\\"./interfaces/IStolenNFT.sol\\\";\\n\\nerror BribeIsNotEnough();\\nerror CaseNotFound();\\nerror NotTheLaw();\\nerror ProcessingReport();\\nerror ReportAlreadyFiled();\\nerror SurrenderInstead();\\nerror SuspectNotWanted();\\nerror TheftNotReported();\\nerror ThiefGotAway();\\nerror ThiefIsHiding();\\n\\n/// @title Police HQ - tracking criminals - staying corrupt\\ncontract CriminalRecords is ICriminalRecords, Ownable {\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint8 public override maximumWanted = 50;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint8 public override sentence = 2;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint8 public override thiefCaughtChance = 40;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint32 public override reportDelay = 2 minutes;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint32 public override reportValidity = 24 hours;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint256 public override reward = 100 ether;\\n\\t/// @inheritdoc ICriminalRecords\\n\\tuint256 public override bribePerLevel = 100 ether;\\n\\n\\t/// ERC20 token used to pay bribes and rewards\\n\\tICounterfeitMoney public money;\\n\\t/// ERC721 token which is being monitored by the authorities\\n\\tIStolenNFT public stolenNFT;\\n\\t/// Contracts that cannot be sentenced\\n\\tmapping(address => bool) public aboveTheLaw;\\n\\t/// Officers / Contracts that can track and sentence others\\n\\tmapping(address => bool) public theLaw;\\n\\n\\t/// Tracking the reports for identification\\n\\tuint256 private _caseNumber;\\n\\t/// Tracking the crime reporters and the time since their last report\\n\\tmapping(address => Report) private _reports;\\n\\t/// Tracking the criminals and their wanted level\\n\\tmapping(address => uint8) private _wantedLevel;\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\taddress _stolenNft,\\n\\t\\taddress _money,\\n\\t\\taddress _stakingHideout,\\n\\t\\taddress _blackMarket\\n\\t) Ownable(_owner) {\\n\\t\\tstolenNFT = IStolenNFT(_stolenNft);\\n\\t\\tmoney = ICounterfeitMoney(_money);\\n\\n\\t\\ttheLaw[_stolenNft] = true;\\n\\t\\taboveTheLaw[address(0)] = true;\\n\\t\\taboveTheLaw[_stakingHideout] = true;\\n\\t\\taboveTheLaw[_blackMarket] = true;\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction bribe(address criminal, uint256 amount) public override returns (uint256) {\\n\\t\\tuint256 wantedLevel = _wantedLevel[criminal];\\n\\t\\tif (wantedLevel == 0) revert SuspectNotWanted();\\n\\t\\tif (amount < bribePerLevel) revert BribeIsNotEnough();\\n\\n\\t\\tuint256 levels = amount / bribePerLevel;\\n\\t\\tif (wantedLevel < levels) {\\n\\t\\t\\tlevels = wantedLevel;\\n\\t\\t}\\n\\t\\tuint256 cost = levels * bribePerLevel;\\n\\n\\t\\t_decreaseWanted(criminal, uint8(levels));\\n\\n\\t\\tmoney.burn(msg.sender, cost);\\n\\n\\t\\treturn levels;\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction bribeCheque(\\n\\t\\taddress criminal,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override returns (uint256) {\\n\\t\\tmoney.permit(criminal, address(this), amount, deadline, v, r, s);\\n\\t\\treturn bribe(criminal, amount);\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction reportTheft(uint256 stolenId) external override {\\n\\t\\taddress holder = stolenNFT.ownerOf(stolenId);\\n\\n\\t\\tif (msg.sender == holder) revert SurrenderInstead();\\n\\t\\tif (aboveTheLaw[holder]) revert ThiefIsHiding();\\n\\t\\tif (_wantedLevel[holder] == 0) revert SuspectNotWanted();\\n\\t\\tif (\\n\\t\\t\\t_reports[msg.sender].stolenId == stolenId &&\\n\\t\\t\\tblock.timestamp - _reports[msg.sender].timestamp <= reportValidity\\n\\t\\t) revert ReportAlreadyFiled();\\n\\n\\t\\t_reports[msg.sender] = Report(stolenId, block.timestamp);\\n\\n\\t\\temit Reported(msg.sender, holder, stolenId);\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction arrest() external override returns (bool) {\\n\\t\\tReport memory report = _reports[msg.sender];\\n\\t\\tif (report.stolenId == 0) revert TheftNotReported();\\n\\t\\tif (block.timestamp - report.timestamp < reportDelay) revert ProcessingReport();\\n\\t\\tif (block.timestamp - report.timestamp > reportValidity) revert ThiefGotAway();\\n\\n\\t\\tdelete _reports[msg.sender];\\n\\t\\t_caseNumber++;\\n\\n\\t\\taddress holder = stolenNFT.ownerOf(report.stolenId);\\n\\t\\tuint256 holderWanted = _wantedLevel[holder];\\n\\n\\t\\tuint256 kindaRandom = uint256(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t_caseNumber,\\n\\t\\t\\t\\t\\tholder,\\n\\t\\t\\t\\t\\tholderWanted,\\n\\t\\t\\t\\t\\treport.timestamp,\\n\\t\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\t\\tblockhash(block.number)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t) % 100; //0-100\\n\\n\\t\\t// Arrest is not possible if thief managed to hide or get rid of wanted level\\n\\t\\tbool arrested = !aboveTheLaw[holder] &&\\n\\t\\t\\tholderWanted > 0 &&\\n\\t\\t\\tkindaRandom < thiefCaughtChance + holderWanted;\\n\\n\\t\\tif (arrested) {\\n\\t\\t\\t_increaseWanted(holder, sentence);\\n\\n\\t\\t\\temit Arrested(msg.sender, holder, report.stolenId);\\n\\n\\t\\t\\tstolenNFT.swatted(report.stolenId);\\n\\n\\t\\t\\tmoney.print(msg.sender, reward * holderWanted);\\n\\t\\t}\\n\\n\\t\\treturn arrested;\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction crimeWitnessed(address criminal) external override onlyTheLaw {\\n\\t\\t_increaseWanted(criminal, sentence);\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction exchangeWitnessed(address from, address to) external override onlyTheLaw {\\n\\t\\tif (_wantedLevel[from] > 0 && from != to) {\\n\\t\\t\\t_increaseWanted(to, sentence);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction surrender(address criminal) external override onlyTheLaw {\\n\\t\\t_decreaseWanted(criminal, sentence);\\n\\t}\\n\\n\\t/// @notice Executed when a theft of a NFT was witnessed, increases the criminals wanted level\\n\\t/// @dev Can only be called by the current owner\\n\\t/// @param _maxWanted Maximum wanted level a thief can have\\n\\t/// @param _sentence The wanted level sentence given for a crime\\n\\t/// @param _reportDelay The time that has to pass between a users reports\\n\\t/// @param _thiefCaughtChance The chance a report will be successful\\n\\t/// @param _reward The reward if a citizen successfully reports a criminal\\n\\t/// @param _bribePerLevel How much to bribe to remove a wanted level\\n\\tfunction setWantedParameters(\\n\\t\\tuint8 _maxWanted,\\n\\t\\tuint8 _sentence,\\n\\t\\tuint8 _thiefCaughtChance,\\n\\t\\tuint32 _reportDelay,\\n\\t\\tuint32 _reportValidity,\\n\\t\\tuint256 _reward,\\n\\t\\tuint256 _bribePerLevel\\n\\t) external onlyOwner {\\n\\t\\tmaximumWanted = _maxWanted;\\n\\t\\tsentence = _sentence;\\n\\t\\tthiefCaughtChance = _thiefCaughtChance;\\n\\t\\treportDelay = _reportDelay;\\n\\t\\treportValidity = _reportValidity;\\n\\t\\treward = _reward;\\n\\t\\tbribePerLevel = _bribePerLevel;\\n\\n\\t\\temit WantedParamChange(\\n\\t\\t\\tmaximumWanted,\\n\\t\\t\\tsentence,\\n\\t\\t\\tthiefCaughtChance,\\n\\t\\t\\treportDelay,\\n\\t\\t\\treportValidity,\\n\\t\\t\\treward,\\n\\t\\t\\tbribePerLevel\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Set which addresses / contracts are above the law and cannot be sentenced / tracked\\n\\t/// @dev Can only be called by the current owner, can also be used to reset addresses\\n\\t/// @param badgeNumber Address which should be set\\n\\t/// @param state If the given address should be above the law or not\\n\\tfunction setAboveTheLaw(address badgeNumber, bool state) public onlyOwner {\\n\\t\\taboveTheLaw[badgeNumber] = state;\\n\\t\\temit Promotion(badgeNumber, true, state);\\n\\t}\\n\\n\\t/// @notice Set which addresses / contracts are authorized to sentence thief's\\n\\t/// @dev Can only be called by the current owner, can also be used to reset addresses\\n\\t/// @param badgeNumber Address which should be set\\n\\t/// @param state If the given address should authorized or not\\n\\tfunction setTheLaw(address badgeNumber, bool state) external onlyOwner {\\n\\t\\ttheLaw[badgeNumber] = state;\\n\\t\\temit Promotion(badgeNumber, false, state);\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction getReport(address reporter)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool\\n\\t\\t)\\n\\t{\\n\\t\\tif (_reports[reporter].stolenId == 0) revert CaseNotFound();\\n\\t\\tbool processed = block.timestamp - _reports[reporter].timestamp >= reportDelay &&\\n\\t\\t\\tblock.timestamp - _reports[reporter].timestamp <= reportValidity;\\n\\n\\t\\treturn (_reports[reporter].stolenId, _reports[reporter].timestamp, processed);\\n\\t}\\n\\n\\t/// @inheritdoc ICriminalRecords\\n\\tfunction getWanted(address criminal) external view override returns (uint256) {\\n\\t\\treturn _wantedLevel[criminal];\\n\\t}\\n\\n\\t/// @notice Increase a criminals wanted level, except if they are above the law\\n\\t/// @dev aboveTheLaw[criminal] avoids increasing e.g. the BlackMarkets wanted level on receiving a listing\\n\\t/// aboveTheLaw[msg.sender] avoids increasing e.g. the BlackMarket buyers wanted level\\n\\t/// @param criminal The caught criminal\\n\\t/// @param increase The amount the wanted level should be increased\\n\\tfunction _increaseWanted(address criminal, uint8 increase) internal {\\n\\t\\tif (aboveTheLaw[criminal] || aboveTheLaw[msg.sender]) return;\\n\\n\\t\\tuint8 currentLevel = _wantedLevel[criminal];\\n\\t\\tuint8 nextLevel;\\n\\n\\t\\tunchecked {\\n\\t\\t\\tnextLevel = currentLevel + increase;\\n\\t\\t}\\n\\t\\tif (nextLevel < currentLevel || nextLevel > maximumWanted) {\\n\\t\\t\\tnextLevel = maximumWanted;\\n\\t\\t}\\n\\n\\t\\t_wantedLevel[criminal] = nextLevel;\\n\\t\\temit Wanted(criminal, nextLevel);\\n\\t}\\n\\n\\t/// @notice Decrease a criminals wanted level, except if they are above the law\\n\\t/// @dev If current > max the maximumWanted will be used (in case the params changed)\\n\\t/// @param criminal The criminal\\n\\t/// @param decrease The amount the wanted level should be decreased\\n\\tfunction _decreaseWanted(address criminal, uint8 decrease) internal {\\n\\t\\tif (aboveTheLaw[criminal] || aboveTheLaw[msg.sender]) return;\\n\\n\\t\\tuint8 currentLevel = _wantedLevel[criminal];\\n\\t\\tuint8 nextLevel = 0;\\n\\n\\t\\tif (currentLevel > maximumWanted) {\\n\\t\\t\\tcurrentLevel = maximumWanted;\\n\\t\\t}\\n\\n\\t\\tunchecked {\\n\\t\\t\\tif (decrease < currentLevel) {\\n\\t\\t\\t\\tnextLevel = currentLevel - decrease;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_wantedLevel[criminal] = nextLevel;\\n\\t\\temit Wanted(criminal, nextLevel);\\n\\t}\\n\\n\\t/// @dev Modifier to only allow msg.senders that are the law to execute a function\\n\\tmodifier onlyTheLaw() {\\n\\t\\tif (!theLaw[msg.sender]) revert NotTheLaw();\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Emitted when theLaw/aboveTheLaw is set or unset\\n\\t/// @param user The user that got promoted / demoted\\n\\t/// @param aboveTheLaw Whether the user is set to be theLaw or aboveTheLaw\\n\\t/// @param state true if it was a promotion, false if it was a demotion\\n\\tevent Promotion(address indexed user, bool aboveTheLaw, bool state);\\n\\n\\t/// @notice Emitted when any wanted parameter is being changed\\n\\t/// @param maxWanted Maximum wanted level a thief can have\\n\\t/// @param sentence The wanted level sentence given for a crime\\n\\t/// @param thiefCaughtChance The chance a report will be successful\\n\\t/// @param reportDelay The time that has to pass between report and arrest\\n\\t/// @param reportValidity The time the report is valid for\\n\\t/// @param reward The reward if a citizen successfully reports a criminal\\n\\t/// @param bribePerLevel How much to bribe to remove a wanted level\\n\\tevent WantedParamChange(\\n\\t\\tuint8 maxWanted,\\n\\t\\tuint8 sentence,\\n\\t\\tuint256 thiefCaughtChance,\\n\\t\\tuint256 reportDelay,\\n\\t\\tuint256 reportValidity,\\n\\t\\tuint256 reward,\\n\\t\\tuint256 bribePerLevel\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror CallerNotTheOwner();\\nerror NewOwnerIsZeroAddress();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n\\taddress private _contractOwner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Initializes the given owner as the initial owner.\\n\\t */\\n\\tconstructor(address contractOwner_) {\\n\\t\\t_transferOwnership(contractOwner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _contractOwner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\tif (owner() != msg.sender) revert CallerNotTheOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\tif (newOwner == address(0)) revert NewOwnerIsZeroAddress();\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Internal function without access restriction.\\n\\t */\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _contractOwner;\\n\\t\\t_contractOwner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICriminalRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Police HQ - tracking criminals - staying corrupt\\ninterface ICriminalRecords {\\n\\t/// @notice Emitted when the wanted level of a criminal changes\\n\\t/// @param criminal The user that committed a crime\\n\\t/// @param level The criminals new wanted level\\n\\tevent Wanted(address indexed criminal, uint256 level);\\n\\n\\t/// @notice Emitted when a report against a criminal was filed\\n\\t/// @param snitch The user that reported the theft\\n\\t/// @param thief The user that got reported\\n\\t/// @param stolenId The tokenID of the stolen NFT\\n\\tevent Reported(address indexed snitch, address indexed thief, uint256 indexed stolenId);\\n\\n\\t/// @notice Emitted when a the criminal is arrested\\n\\t/// @param snitch The user that reported the theft\\n\\t/// @param thief The user that got reported\\n\\t/// @param stolenId The tokenID of the stolen NFT\\n\\tevent Arrested(address indexed snitch, address indexed thief, uint256 indexed stolenId);\\n\\n\\t/// @notice Struct to store the the details of a report\\n\\tstruct Report {\\n\\t\\tuint256 stolenId;\\n\\t\\tuint256 timestamp;\\n\\t}\\n\\n\\t/// @notice Maximum wanted level a thief can have\\n\\t/// @return The maximum wanted level\\n\\tfunction maximumWanted() external view returns (uint8);\\n\\n\\t/// @notice The wanted level sentence given for a crime\\n\\t/// @return The sentence\\n\\tfunction sentence() external view returns (uint8);\\n\\n\\t/// @notice The percentage between 0-100 a report is successful and the thief is caught\\n\\t/// @return The chance\\n\\tfunction thiefCaughtChance() external view returns (uint8);\\n\\n\\t/// @notice Time that has to pass between the report and the arrest of a criminal\\n\\t/// @return The time\\n\\tfunction reportDelay() external view returns (uint32);\\n\\n\\t/// @notice Time how long a report will be valid\\n\\t/// @return The time\\n\\tfunction reportValidity() external view returns (uint32);\\n\\n\\t/// @notice How much to bribe to remove a wanted level\\n\\t/// @return The cost of a bribe\\n\\tfunction bribePerLevel() external view returns (uint256);\\n\\n\\t/// @notice The reward if a citizen successfully reports a criminal\\n\\t/// @return The reward\\n\\tfunction reward() external view returns (uint256);\\n\\n\\t/// @notice Decrease the criminals wanted level by providing a bribe denominated in CounterfeitMoney\\n\\t/// @dev The decrease depends on {bribePerLevel}. If more CounterfeitMoney is given\\n\\t/// then needed it will not be transferred / burned.\\n\\t/// Emits a {Wanted} Event\\n\\t/// @param criminal The criminal whose wanted level should be reduced\\n\\t/// @param amount Amount of CounterfeitMoney available to pay the bribe\\n\\t/// @return Number of wanted levels that have been removed\\n\\tfunction bribe(address criminal, uint256 amount) external returns (uint256);\\n\\n\\t/// @notice Decrease the criminals wanted level by providing a bribe denominated in CounterfeitMoney and a valid EIP-2612 Permit\\n\\t/// @dev Same as {xref-ICriminalRecords-bribe-address-uint256-}[`bribe`], with additional signature parameters which\\n\\t/// allow the approval and transfer of CounterfeitMoney in a single Transaction using EIP-2612 Permits\\n\\t/// Emits a {Wanted} Event\\n\\t/// @param criminal The criminal whose wanted level should be reduced\\n\\t/// @param amount Amount of CounterfeitMoney available to pay the bribe\\n\\t/// @param deadline timestamp until when the given signature will be valid\\n\\t/// @param v The parity of the y co-ordinate of r of the signature\\n\\t/// @param r The x co-ordinate of the r value of the signature\\n\\t/// @param s The x co-ordinate of the s value of the signature\\n\\t/// @return Number of wanted levels that have been removed\\n\\tfunction bribeCheque(\\n\\t\\taddress criminal,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256);\\n\\n\\t/// @notice Report the theft of a stolen NFT, required to trigger an arrest\\n\\t/// @dev Emits a {Reported} Event\\n\\t/// @param stolenId The stolen NFTs tokenID that should be reported\\n\\tfunction reportTheft(uint256 stolenId) external;\\n\\n\\t/// @notice After previous report was filed the arrest can be triggered\\n\\t/// If the arrest is successful the stolen NFT will be returned / burned\\n\\t/// If the thief gets away another report has to be filed\\n\\t/// @dev Emits a {Arrested} and {Wanted} Event\\n\\t/// @return Returns true if the report was successful\\n\\tfunction arrest() external returns (bool);\\n\\n\\t/// @notice Returns the wanted level of a given criminal\\n\\t/// @param criminal The criminal whose wanted level should be returned\\n\\t/// @return The criminals wanted level\\n\\tfunction getWanted(address criminal) external view returns (uint256);\\n\\n\\t// @notice Returns whether report data and processing state\\n\\t/// @param reporter The reporter who reported the theft\\n\\t/// @return stolenId The reported stolen NFT\\n\\t/// @return timestamp The timestamp when the theft was reported\\n\\t/// @return processed true if the report has been processed, false if not reported / processed or expired\\n\\tfunction getReport(address reporter)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool\\n\\t\\t);\\n\\n\\t/// @notice Executed when a theft of a NFT was witnessed, increases the criminals wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param criminal The criminal who committed the crime\\n\\tfunction crimeWitnessed(address criminal) external;\\n\\n\\t/// @notice Executed when a transfer of a NFT was witnessed, increases the receivers wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param from The sender of the stolen NFT\\n\\t/// @param to The receiver of the stolen NFT\\n\\tfunction exchangeWitnessed(address from, address to) external;\\n\\n\\t/// @notice Allows the criminal to surrender and to decrease his wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param criminal The criminal who turned himself in\\n\\tfunction surrender(address criminal) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICounterfeitMoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title Counterfeit Money is just as good as \\\"real\\\" money\\n/// @dev ERC20 Token with dynamic supply, supporting EIP-2612 signatures for token approvals\\ninterface ICounterfeitMoney is IERC20, IERC20Permit {\\n\\t/// @notice Prints and sends a certain amount of CounterfeitMoney to an user\\n\\t/// @dev Emits an Transfer event from zero-address\\n\\t/// @param to The address receiving the freshly printed money\\n\\t/// @param amount The amount of money that will be printed\\n\\tfunction print(address to, uint256 amount) external;\\n\\n\\t/// @notice Burns and removes an approved amount of CounterfeitMoney from an user\\n\\t/// @dev Emits an Transfer event to zero-address\\n\\t/// @param from The address losing the CounterfeitMoney\\n\\t/// @param amount The amount of money that will be removed from the account\\n\\tfunction burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStolenNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"../tokens/IERC721Permit.sol\\\";\\n\\n/// @title Steal somebody's NFTs (with their permission of course)\\n/// @dev ERC721 Token supporting EIP-2612 signatures for token approvals\\ninterface IStolenNFT is IERC2981, IERC721Metadata, IERC721Enumerable, IERC721Permit {\\n\\t/// @notice Emitted when a user steals / mints a NFT\\n\\t/// @param thief The user who stole a NFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the minted StolenNFT\\n\\tevent Stolen(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress indexed originalContract,\\n\\t\\tuint256 indexed originalId,\\n\\t\\tuint256 stolenId\\n\\t);\\n\\n\\t/// @notice Emitted when a user was reported and gets his StolenNFT taken away / burned\\n\\t/// @param thief The user who returned the StolenNFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tevent Seized(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalContract,\\n\\t\\tuint256 originalId,\\n\\t\\tuint256 indexed stolenId\\n\\t);\\n\\n\\t/// @notice Struct to store the contract and token ID of the NFT that was stolen\\n\\tstruct NftData {\\n\\t\\tuint32 tokenRoyalty;\\n\\t\\tuint64 chainId;\\n\\t\\taddress contractAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\t/// @notice Steal / Mint an original NFT to create a StolenNFT\\n\\t/// @dev Emits a Stolen event\\n\\t/// @param originalChainId The chainId the NFT originates from, used to trace where the nft was stolen from\\n\\t/// @param originalAddress The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param mintFrom Optional address the StolenNFT will be minted and transferred from\\n\\t/// @param royaltyFee Optional royalty that should be payed to the original owner on secondary market sales\\n\\t/// @param uri Optional Metadata URI to overwrite / censor the original NFT\\n\\tfunction steal(\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalAddress,\\n\\t\\tuint256 originalId,\\n\\t\\taddress mintFrom,\\n\\t\\tuint32 royaltyFee,\\n\\t\\tstring memory uri\\n\\t) external payable returns (uint256);\\n\\n\\t/// @notice Allows the StolenNFT to be taken away / burned by the authorities\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction swatted(uint256 stolenId) external;\\n\\n\\t/// @notice Allows the holder to return / burn the StolenNFT\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction surrender(uint256 stolenId) external;\\n\\n\\t/// @notice Returns the stolenID for a given original NFT address and tokenID if stolen\\n\\t/// @param originalAddress The contract address of the original NFT\\n\\t/// @param originalId The tokenID of the original NFT\\n\\t/// @return The stolenID\\n\\tfunction getStolen(address originalAddress, uint256 originalId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/// @notice Returns the original NFT address and tokenID for a given stolenID if stolen\\n\\t/// @param stolenId The stolenID to lookup\\n\\t/// @return originalChainId The chain the NFT was stolen from\\n\\t/// @return originalAddress The contract address of the original NFT\\n\\t/// @return originalId The tokenID of the original NFT\\n\\tfunction getOriginal(uint256 stolenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint64,\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/IERC721Permit.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/**\\n * @dev Interface of extending the IERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 approval (see {IERC721-approval}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC721Permit is IERC20Permit {\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stolenNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_money\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingHideout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blackMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BribeIsNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CaseNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheLaw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProcessingReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReportAlreadyFiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurrenderInstead\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SuspectNotWanted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TheftNotReported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThiefGotAway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThiefIsHiding\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"snitch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"Arrested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"aboveTheLaw\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Promotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"snitch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"Reported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Wanted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxWanted\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sentence\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thiefCaughtChance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportValidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bribePerLevel\",\"type\":\"uint256\"}],\"name\":\"WantedParamChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aboveTheLaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arrest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bribe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"bribeCheque\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribePerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"}],\"name\":\"crimeWitnessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"exchangeWitnessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"getReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"}],\"name\":\"getWanted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumWanted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"money\",\"outputs\":[{\"internalType\":\"contract ICounterfeitMoney\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"reportTheft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportValidity\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentence\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"badgeNumber\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAboveTheLaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"badgeNumber\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTheLaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxWanted\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sentence\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_thiefCaughtChance\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_reportDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_reportValidity\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bribePerLevel\",\"type\":\"uint256\"}],\"name\":\"setWantedParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stolenNFT\",\"outputs\":[{\"internalType\":\"contract IStolenNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"criminal\",\"type\":\"address\"}],\"name\":\"surrender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"theLaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thiefCaughtChance\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CriminalRecords", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000ab6405423374236559f5969e93fcdaee3f14dd00000000000000000000000000e17b5ac5bd4a70436af32aee07ba9e2ae262e2ee0000000000000000000000005ae23249a4f7ec4f7087fa5ade0eb385240f8ccc0000000000000000000000008aa628416c25ea6c279f29e793382871081d934300000000000000000000000005f6ad680c3aaa15a03b8bd3abe16dd84fef9869", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}