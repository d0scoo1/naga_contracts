{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/governor/GovernorDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGovernor.sol\\\";\\nimport \\\"./GovernorStorage.sol\\\";\\n\\ncontract GovernorCharlieDelegator is GovernorCharlieDelegatorStorage, GovernorCharlieEvents, IGovernorCharlieDelegator {\\n  constructor(\\n    address ipt_,\\n    address implementation_,\\n    uint256 votingPeriod_,\\n    uint256 votingDelay_,\\n    uint256 proposalThreshold_,\\n    uint256 proposalTimelockDelay_,\\n    uint256 quorumVotes_,\\n    uint256 emergencyQuorumVotes_,\\n    uint256 emergencyVotingPeriod_,\\n    uint256 emergencyTimelockDelay_\\n  ) {\\n    delegateTo(\\n      implementation_,\\n      abi.encodeWithSignature(\\n        \\\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\\\",\\n        ipt_,\\n        votingPeriod_,\\n        votingDelay_,\\n        proposalThreshold_,\\n        proposalTimelockDelay_,\\n        quorumVotes_,\\n        emergencyQuorumVotes_,\\n        emergencyVotingPeriod_,\\n        emergencyTimelockDelay_\\n      )\\n    );\\n    address oldImplementation = implementation;\\n    implementation = implementation_;\\n    emit NewImplementation(oldImplementation, implementation);\\n  }\\n\\n  /**\\n   * @notice Called by itself via governance to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   */\\n  function _setImplementation(address implementation_) public override {\\n    require(msg.sender == address(this), \\\"governance proposal required\\\");\\n    require(implementation_ != address(0), \\\"invalid implementation address\\\");\\n\\n    address oldImplementation = implementation;\\n    implementation = implementation_;\\n\\n    emit NewImplementation(oldImplementation, implementation);\\n  }\\n\\n  /**\\n   * @notice Internal method to delegate execution to another contract\\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n   * @param callee The contract to delegatecall\\n   * @param data The raw data to delegatecall\\n   */\\n  function delegateTo(address callee, bytes memory data) internal {\\n    //solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\\n    //solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      if eq(success, 0) {\\n        revert(add(returnData, 0x20), returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback() external payable override {\\n    // delegate all other functions to current implementation\\n    //solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = implementation.delegatecall(msg.data);\\n\\n    //solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n\\n  receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"contracts/governance/governor/IGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Structs.sol\\\";\\n\\n/// @title interface to interact with TokenDelgator\\ninterface IGovernorCharlieDelegator {\\n  function _setImplementation(address implementation_) external;\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\\n/// @title interface to interact with TokenDelgate\\ninterface IGovernorCharlieDelegate {\\n  function initialize(\\n    address ipt_,\\n    uint256 votingPeriod_,\\n    uint256 votingDelay_,\\n    uint256 proposalThreshold_,\\n    uint256 proposalTimelockDelay_,\\n    uint256 quorumVotes_,\\n    uint256 emergencyQuorumVotes_,\\n    uint256 emergencyVotingPeriod_,\\n    uint256 emergencyTimelockDelay_\\n  ) external;\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory description,\\n    bool emergency\\n  ) external returns (uint256);\\n\\n  function queue(uint256 proposalId) external;\\n\\n  function execute(uint256 proposalId) external payable;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    uint256 eta\\n  ) external payable;\\n\\n  function cancel(uint256 proposalId) external;\\n\\n  function getActions(uint256 proposalId)\\n    external\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    );\\n\\n  function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\\n\\n  function state(uint256 proposalId) external view returns (ProposalState);\\n\\n  function castVote(uint256 proposalId, uint8 support) external;\\n\\n  function castVoteWithReason(\\n    uint256 proposalId,\\n    uint8 support,\\n    string calldata reason\\n  ) external;\\n\\n  function castVoteBySig(\\n    uint256 proposalId,\\n    uint8 support,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function isWhitelisted(address account) external view returns (bool);\\n\\n  function _setDelay(uint256 proposalTimelockDelay_) external;\\n\\n  function _setEmergencyDelay(uint256 emergencyTimelockDelay_) external;\\n\\n  function _setVotingDelay(uint256 newVotingDelay) external;\\n\\n  function _setVotingPeriod(uint256 newVotingPeriod) external;\\n\\n  function _setEmergencyVotingPeriod(uint256 newEmergencyVotingPeriod) external;\\n\\n  function _setProposalThreshold(uint256 newProposalThreshold) external;\\n\\n  function _setQuorumVotes(uint256 newQuorumVotes) external;\\n\\n  function _setEmergencyQuorumVotes(uint256 newEmergencyQuorumVotes) external;\\n\\n  function _setWhitelistAccountExpiration(address account, uint256 expiration) external;\\n\\n  function _setWhitelistGuardian(address account) external;\\n}\\n\\n/// @title interface which contains all events emitted by delegator & delegate\\ninterface GovernorCharlieEvents {\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 indexed id,\\n    address indexed proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 indexed startBlock,\\n    uint256 endBlock,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  /// @param voter The address which casted a vote\\n  /// @param proposalId The proposal id which was voted on\\n  /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\n  /// @param votes Number of votes which were cast by the voter\\n  /// @param reason The reason given for the vote by the voter\\n  event VoteCast(address indexed voter, uint256 indexed proposalId, uint8 support, uint256 votes, string reason);\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint256 indexed id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint256 indexed id, uint256 eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint256 indexed id);\\n\\n  /// @notice An event emitted when the voting delay is set\\n  event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n\\n  /// @notice An event emitted when the voting period is set\\n  event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n  /// @notice An event emitted when the emergency voting period is set\\n  event EmergencyVotingPeriodSet(uint256 oldEmergencyVotingPeriod, uint256 emergencyVotingPeriod);\\n\\n  /// @notice Emitted when implementation is changed\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /// @notice Emitted when proposal threshold is set\\n  event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n  /// @notice Emitted when pendingAdmin is changed\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /// @notice Emitted when whitelist account expiration is set\\n  event WhitelistAccountExpirationSet(address account, uint256 expiration);\\n\\n  /// @notice Emitted when the whitelistGuardian is set\\n  event WhitelistGuardianSet(address oldGuardian, address newGuardian);\\n\\n  /// @notice Emitted when the a new delay is set\\n  event NewDelay(uint256 oldTimelockDelay, uint256 proposalTimelockDelay);\\n\\n  /// @notice Emitted when the a new emergency delay is set\\n  event NewEmergencyDelay(uint256 oldEmergencyTimelockDelay, uint256 emergencyTimelockDelay);\\n\\n  /// @notice Emitted when the quorum is updated\\n  event NewQuorum(uint256 oldQuorumVotes, uint256 quorumVotes);\\n\\n  /// @notice Emitted when the emergency quorum is updated\\n  event NewEmergencyQuorum(uint256 oldEmergencyQuorumVotes, uint256 emergencyQuorumVotes);\\n\\n  /// @notice Emitted when a transaction is canceled\\n  event CancelTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n\\n  /// @notice Emitted when a transaction is executed\\n  event ExecuteTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n\\n  /// @notice Emitted when a transaction is queued\\n  event QueueTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/governance/governor/GovernorStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IIpt.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ncontract GovernorCharlieDelegatorStorage {\\n  /// @notice Active brains of Governor\\n  address public implementation;\\n}\\n\\n/**\\n * @title Storage for Governor Charlie Delegate\\n * @notice For future upgrades, do not change GovernorCharlieDelegateStorage. Create a new\\n * contract which implements GovernorCharlieDelegateStorage and following the naming convention\\n * GovernorCharlieDelegateStorageVX.\\n */\\n//solhint-disable-next-line max-states-count\\ncontract GovernorCharlieDelegateStorage is GovernorCharlieDelegatorStorage {\\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n  uint256 public quorumVotes;\\n\\n  /// @notice The number of votes in support of a proposal required in order for an emergency quorum to be reached and for a vote to succeed\\n  uint256 public emergencyQuorumVotes;\\n\\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n  uint256 public votingDelay;\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  uint256 public votingPeriod;\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  uint256 public proposalThreshold;\\n\\n  /// @notice Initial proposal id set at become\\n  uint256 public initialProposalId;\\n\\n  /// @notice The total number of proposals\\n  uint256 public proposalCount;\\n\\n  /// @notice The address of the Interest Protocol governance token\\n  IIpt public ipt;\\n\\n  /// @notice The official record of all proposals ever proposed\\n  mapping(uint256 => Proposal) public proposals;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint256) public latestProposalIds;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(bytes32 => bool) public queuedTransactions;\\n\\n  /// @notice The proposal holding period\\n  uint256 public proposalTimelockDelay;\\n\\n  /// @notice Stores the expiration of account whitelist status as a timestamp\\n  mapping(address => uint256) public whitelistAccountExpirations;\\n\\n  /// @notice Address which manages whitelisted proposals and whitelist accounts\\n  address public whitelistGuardian;\\n\\n  /// @notice The duration of the voting on a emergency proposal, in blocks\\n  uint256 public emergencyVotingPeriod;\\n\\n  /// @notice The emergency proposal holding period\\n  uint256 public emergencyTimelockDelay;\\n\\n  /// all receipts for proposal\\n  mapping(uint256 => mapping(address => Receipt)) public proposalReceipts;\\n\\n  /// @notice The emergency proposal holding period\\n  bool public initialized;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/governor/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nstruct Proposal {\\n  /// @notice Unique id for looking up a proposal\\n  uint256 id;\\n  /// @notice Creator of the proposal\\n  address proposer;\\n  /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n  uint256 eta;\\n  /// @notice the ordered list of target addresses for calls to be made\\n  address[] targets;\\n  /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n  uint256[] values;\\n  /// @notice The ordered list of function signatures to be called\\n  string[] signatures;\\n  /// @notice The ordered list of calldata to be passed to each call\\n  bytes[] calldatas;\\n  /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n  uint256 startBlock;\\n  /// @notice The block at which voting ends: votes must be cast prior to this block\\n  uint256 endBlock;\\n  /// @notice Current number of votes in favor of this proposal\\n  uint256 forVotes;\\n  /// @notice Current number of votes in opposition to this proposal\\n  uint256 againstVotes;\\n  /// @notice Current number of votes for abstaining for this proposal\\n  uint256 abstainVotes;\\n  /// @notice Flag marking whether the proposal has been canceled\\n  bool canceled;\\n  /// @notice Flag marking whether the proposal has been executed\\n  bool executed;\\n  /// @notice Whether the proposal is an emergency proposal\\n  bool emergency;\\n  /// @notice quorum votes requires\\n  uint256 quorumVotes;\\n  /// @notice time delay\\n  uint256 delay;\\n}\\n\\n/// @notice Ballot receipt record for a voter\\nstruct Receipt {\\n  /// @notice Whether or not a vote has been cast\\n  bool hasVoted;\\n  /// @notice Whether or not the voter supports the proposal or abstains\\n  uint8 support;\\n  /// @notice The number of votes the voter had, which were cast\\n  uint96 votes;\\n}\\n\\n/// @notice Possible states that a proposal may be in\\nenum ProposalState {\\n  Pending,\\n  Active,\\n  Canceled,\\n  Defeated,\\n  Succeeded,\\n  Queued,\\n  Expired,\\n  Executed\\n}\\n\"\r\n    },\r\n    \"contracts/governance/governor/IIpt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IIpt {\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ipt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalTimelockDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyQuorumVotes_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyVotingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyTimelockDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"CancelTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEmergencyVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emergencyVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"EmergencyVotingPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimelockDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEmergencyTimelockDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emergencyTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"NewEmergencyDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEmergencyQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emergencyQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"NewEmergencyQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"}],\"name\":\"NewQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"WhitelistAccountExpirationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"WhitelistGuardianSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GovernorCharlieDelegator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af239a6fab6a873c779f3f33dbd34104287b93e1000000000000000000000000df352c2fcb3cbfdbba619090e2a1deb9ac534a290000000000000000000000000000000000000000000000000000000000009d80000000000000000000000000000000000000000000000000000000000000335400000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000211654585005212800000000000000000000000000000000000000000000000000000000000000000019aa000000000000000000000000000000000000000000000000000000000000a8c0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xed6a213928db81a3a60bce25aaf199dbaf01dd25", "SwarmSource": ""}]}