{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TNCN is Owned {\r\n\r\n    string public name=\"CHULIAN CHINA\";\r\n    string public symbol=\"TNCN\";\r\n    uint8  public decimals=18;\r\n    uint256 public totalSupply;\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    uint minBalanceForAccounts;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    function TNCN() public {\r\n        totalSupply = 1000000000000000000000000000;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner public {\r\n        minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\r\n    }\r\n\r\n    /* Internal transfer, can only be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(!frozenAccount[msg.sender]);\r\n        if (msg.sender.balance<minBalanceForAccounts) {\r\n            sell((minBalanceForAccounts-msg.sender.balance)/sellPrice);\r\n        }\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(0, owner, mintedAmount);\r\n        emit Transfer(owner, target, mintedAmount);\r\n    }\r\n\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n\r\n    function buy() payable public returns (uint amount) {\r\n        amount = msg.value / buyPrice;\r\n        require(balanceOf[this] >= amount);\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[this] -= amount;\r\n        emit Transfer(this, msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    function sell(uint amount) public returns (uint revenue) {\r\n        require(balanceOf[msg.sender] >= amount);\r\n        balanceOf[this] += amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        revenue = amount * sellPrice;\r\n        msg.sender.transfer(revenue);\r\n        emit Transfer(msg.sender, this, amount);\r\n        return revenue;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "Owned", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c09d11a23a3da76b9810d9d51952c3b350f924d9e1bc5496ea402af91ac50e9a"}]}