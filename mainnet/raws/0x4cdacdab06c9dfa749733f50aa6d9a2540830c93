{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT \r\n// Note: SafeMath is not used as it's redundant since Solidity 0.8\r\n\r\n\r\n// ****** ARCADE Token ******\r\n//\r\n// Vesting contract for gradual release of pre-allocated private-sale tokens.\r\n// To be used with the provided dApp or directly through Etherscan.\r\n//\r\n// **************************\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    constructor(address _owner) { owner = _owner; }\r\n    modifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n    function transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner; emit OwnershipTransferred(newOwner); }\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n\r\ncontract ArcadeVesting is Auth {\r\n    address public vestedTokenContract;\r\n    IERC20 private _tokenContract;\r\n\r\n    uint256 public vestingStartTimestamp;\r\n    uint256 public vestingFinishTimestamp;\r\n    uint8 public initialReleasePercent;\r\n\r\n    bool vestingSettingsLocked;\r\n    bool vestingActive;\r\n\r\n    mapping (address => uint256) public tokensAllocated;\r\n    mapping (address => uint256) public tokensWithdrawn;\r\n    mapping (address => bool) public isBlacklisted;\r\n    mapping (address => string) public blacklistReason;\r\n\r\n    uint256 public totalTokensAllocated;\r\n    uint256 public totalTokensWithdrawn;\r\n    uint256 public vestedWalletsCount;\r\n    \r\n    event VestingStart(uint256 startTimestamp, uint256 endTimestamp, uint8 initialPercentRelease);\r\n    event Claim(address indexed claimer, uint256 value);\r\n    event AllTokensClaimed(address indexed wallet);\r\n    event TokenRecovery(address indexed claimer, uint256 value);\r\n    event BlacklistAdded(address indexed wallet, string reason);\r\n    event BlacklistRemoved(address indexed wallet, string reason);\r\n\r\n    constructor () Auth(msg.sender) {}\r\n\r\n    function setupVesting(address tokenContractAddress, uint256 startTimestamp, uint256 endTimestamp, uint8 initialReleasePct) external onlyOwner {\r\n        require(!vestingSettingsLocked, \"Vesting settings already locked\");\r\n        vestedTokenContract = tokenContractAddress;\r\n        _tokenContract = IERC20(vestedTokenContract);\r\n        require(initialReleasePct<100, \"Initial release percentage must be lower than 100\");\r\n\r\n        if (startTimestamp < block.timestamp) { vestingStartTimestamp = block.timestamp; }\r\n        else { vestingStartTimestamp = startTimestamp; }\r\n\r\n        require(endTimestamp > vestingStartTimestamp, \"End timestamp must be after start timestamp\");\r\n        require(endTimestamp < (vestingStartTimestamp + 365 days), \"Vesting time cannot be longer than 1 year\");\r\n\r\n        vestingFinishTimestamp = endTimestamp;\r\n\r\n        initialReleasePercent = initialReleasePct;\r\n    }\r\n\r\n    function settingsLock() external onlyOwner {\r\n        require(!vestingSettingsLocked, \"Vesting settings already locked\");\r\n        vestingSettingsLocked = true;\r\n    }\r\n\r\n    function settingsUnlock() external onlyOwner {\r\n        require(vestingSettingsLocked, \"Vesting settings not locked\");\r\n        require(!vestingActive, \"Vesting is already active\");\r\n        vestingSettingsLocked = false;\r\n    }\r\n\r\n\r\n    function blacklistAdd(address wallet, string memory reason) external onlyOwner {\r\n        require(!isBlacklisted[wallet], \"Wallet already blacklisted\");\r\n        isBlacklisted[wallet] = true;\r\n        blacklistReason[wallet] = reason;\r\n        emit BlacklistAdded(wallet, reason);\r\n    }\r\n\r\n    function blacklistRemove(address wallet, string memory reason) external onlyOwner {\r\n        require(isBlacklisted[wallet], \"Wallet is not blacklisted\");\r\n        isBlacklisted[wallet] = false;\r\n        blacklistReason[wallet] = reason;\r\n        emit BlacklistRemoved(wallet, reason);\r\n    }\r\n\r\n    function activateVesting() external onlyOwner {\r\n        //once vesting is active the settings can no longer be changed; be absolutely sure you got the settings and recipients right\r\n        require(vestingSettingsLocked, \"Vesting settings must be locked first\");\r\n        require(block.timestamp < vestingFinishTimestamp, \"Vesting period has already passed\");\r\n        require(!vestingActive, \"Vesting currently active, wait till end time\");\r\n        require(vestedWalletsCount > 0, \"Cannot activate with no vested wallets\");\r\n        \r\n        uint256 tokenBalance = _tokenContract.balanceOf( address(this) );\r\n        require(tokenBalance == totalTokensAllocated, \"Non-allocated tokens present\");\r\n        \r\n        vestingActive = true;\r\n        emit VestingStart(vestingStartTimestamp, vestingFinishTimestamp, initialReleasePercent); \r\n    }\r\n\r\n    function tokensRemaining(address wallet) external view returns (uint256) {\r\n        return tokensAllocated[wallet] - tokensWithdrawn[wallet];\r\n    }\r\n\r\n    function _tokensClaimable(address wallet) internal view returns (uint256) {\r\n        uint256 claimableTokens = 0;\r\n        uint256 vestingLength = vestingFinishTimestamp - vestingStartTimestamp;\r\n        if ( !isBlacklisted[msg.sender] && vestingActive && block.timestamp > vestingStartTimestamp ) {\r\n            uint256 timePassed = block.timestamp - vestingStartTimestamp;\r\n            if (timePassed >= vestingLength) { \r\n                //stop increasing claimable amount when timer hits final timestamp \r\n                claimableTokens = tokensAllocated[wallet] - tokensWithdrawn[wallet];\r\n            } else {\r\n                uint256 initialRelease = tokensAllocated[wallet] * initialReleasePercent / 100;\r\n                uint256 unlockedTimeTokens = (tokensAllocated[wallet] - initialRelease) * timePassed / vestingLength;\r\n                claimableTokens = initialRelease + unlockedTimeTokens - tokensWithdrawn[wallet];\r\n            }\r\n        }\r\n        return claimableTokens;\r\n    }\r\n\r\n    function tokensClaimable(address wallet) external view returns (uint256) {\r\n        return _tokensClaimable(wallet);\r\n    }\r\n\r\n    function getTokenBalance() external view returns (uint256) {\r\n        uint256 tokenBalance = _tokenContract.balanceOf(address(this));\r\n        return tokenBalance;\r\n    }\r\n\r\n    function getTokenDecimals() external view returns (uint8) {\r\n        uint8 tokenDecimals = _tokenContract.decimals();\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function addRecipient(address[] calldata recipients, uint256 tokenAmountWithoutDecimals) external onlyOwner {\r\n        //token amounts are to be input WITHOUT DECIMALS!!!\r\n        require(!vestingActive, \"Vesting is already active, wait till finished\");\r\n        require(recipients.length <= 500,\"Cannot set more than 500 recipients at a time\");\r\n\r\n        uint256 tokenBalance = _tokenContract.balanceOf( address(this) );\r\n        uint8 _decimals = _tokenContract.decimals();\r\n\r\n        for(uint i=0; i < recipients.length; i++){\r\n            require(tokensAllocated[ recipients[i] ] == 0, \"Recipient already has tokens allocated\");\r\n            uint256 _thisTokenAmount = tokenAmountWithoutDecimals * (10 ** _decimals);\r\n            require(_thisTokenAmount <= (tokenBalance - totalTokensAllocated), \"Not enough tokens available to allocate\");\r\n            totalTokensAllocated += _thisTokenAmount;\r\n            vestedWalletsCount += 1;\r\n            tokensAllocated[ recipients[i] ] = _thisTokenAmount;\r\n        }\r\n    }\r\n\r\n    function claimTokens() external {\r\n        require(!isBlacklisted[msg.sender], \"Wallet is blacklisted\");\r\n        _sendClaimedTokens(msg.sender);\r\n    }\r\n\r\n    function _sendClaimedTokens(address wallet) internal {\r\n        require(vestingActive && block.timestamp > vestingStartTimestamp, \"Claiming is not yet available\");\r\n        require(tokensAllocated[wallet] > tokensWithdrawn[wallet], \"No claimable tokens for this wallet\");\r\n\r\n        uint256 unlockedTokens = _tokensClaimable(wallet);\r\n        tokensWithdrawn[wallet] += unlockedTokens;\r\n        totalTokensWithdrawn += unlockedTokens;\r\n        _tokenContract.transfer(wallet, unlockedTokens);\r\n        emit Claim(wallet, unlockedTokens);\r\n\r\n        if (tokensWithdrawn[wallet] >= tokensAllocated[wallet]) {\r\n            //all tokens have been withdrawn, remove from vested wallets list\r\n            vestedWalletsCount -= 1;\r\n            emit AllTokensClaimed(wallet);\r\n        }\r\n    }   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AllTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BlacklistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BlacklistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"initialPercentRelease\",\"type\":\"uint8\"}],\"name\":\"VestingStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountWithoutDecimals\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklistAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistReason\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"blacklistRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialReleasePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settingsLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settingsUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"initialReleasePct\",\"type\":\"uint8\"}],\"name\":\"setupVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"tokensRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFinishTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArcadeVesting", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3dcc9e0859a844a427b5f7db6116ce066b1749707eb38dad585ccb53d018ec2d"}]}