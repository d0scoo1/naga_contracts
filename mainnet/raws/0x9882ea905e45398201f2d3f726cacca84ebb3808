{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/lens/Lens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RewardsLens.sol\\\";\\n\\n/// @title Lens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice This contract exposes an API to query on-chain data related to the Morpho Protocol, its markets and its users.\\ncontract Lens is RewardsLens {\\n    function initialize(address _morphoAddress) external initializer {\\n        morpho = IMorpho(_morphoAddress);\\n        comptroller = IComptroller(morpho.comptroller());\\n        rewardsManager = IRewardsManager(morpho.rewardsManager());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/RewardsLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/CompoundMath.sol\\\";\\n\\nimport \\\"./MarketsLens.sol\\\";\\n\\n/// @title RewardsLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Intermediary layer exposing endpoints to query live data related to the Morpho Protocol rewards distribution.\\nabstract contract RewardsLens is MarketsLens {\\n    using CompoundMath for uint256;\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when an invalid cToken address is passed to compute accrued rewards.\\n    error InvalidPoolToken();\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns the unclaimed COMP rewards for the given cToken addresses.\\n    /// @param _poolTokenAddresses The cToken addresses for which to compute the rewards.\\n    /// @param _user The address of the user.\\n    function getUserUnclaimedRewards(address[] calldata _poolTokenAddresses, address _user)\\n        external\\n        view\\n        returns (uint256 unclaimedRewards)\\n    {\\n        unclaimedRewards = rewardsManager.userUnclaimedCompRewards(_user);\\n\\n        for (uint256 i; i < _poolTokenAddresses.length; ) {\\n            address cTokenAddress = _poolTokenAddresses[i];\\n\\n            (bool isListed, , ) = comptroller.markets(cTokenAddress);\\n            if (!isListed) revert InvalidPoolToken();\\n\\n            unclaimedRewards += getAccruedSupplierComp(\\n                _user,\\n                cTokenAddress,\\n                morpho.supplyBalanceInOf(cTokenAddress, _user).onPool\\n            );\\n            unclaimedRewards += getAccruedBorrowerComp(\\n                _user,\\n                cTokenAddress,\\n                morpho.borrowBalanceInOf(cTokenAddress, _user).onPool\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// PUBLIC ///\\n\\n    /// @notice Returns the accrued COMP rewards of a user since the last update.\\n    /// @param _supplier The address of the supplier.\\n    /// @param _poolTokenAddress The cToken address.\\n    /// @param _balance The user balance of tokens in the distribution.\\n    /// @return The accrued COMP rewards.\\n    function getAccruedSupplierComp(\\n        address _supplier,\\n        address _poolTokenAddress,\\n        uint256 _balance\\n    ) public view returns (uint256) {\\n        uint256 supplyIndex = getUpdatedCompSupplyIndex(_poolTokenAddress);\\n        uint256 supplierIndex = rewardsManager.compSupplierIndex(_poolTokenAddress, _supplier);\\n\\n        if (supplierIndex == 0) return 0;\\n        return (_balance * (supplyIndex - supplierIndex)) / 1e36;\\n    }\\n\\n    /// @notice Returns the accrued COMP rewards of a user since the last update.\\n    /// @param _borrower The address of the borrower.\\n    /// @param _poolTokenAddress The cToken address.\\n    /// @param _balance The user balance of tokens in the distribution.\\n    /// @return The accrued COMP rewards.\\n    function getAccruedBorrowerComp(\\n        address _borrower,\\n        address _poolTokenAddress,\\n        uint256 _balance\\n    ) public view returns (uint256) {\\n        uint256 borrowIndex = getUpdatedCompBorrowIndex(_poolTokenAddress);\\n        uint256 borrowerIndex = rewardsManager.compBorrowerIndex(_poolTokenAddress, _borrower);\\n\\n        if (borrowerIndex == 0) return 0;\\n        return (_balance * (borrowIndex - borrowerIndex)) / 1e36;\\n    }\\n\\n    /// @notice Returns the updated COMP supply index.\\n    /// @param _poolTokenAddress The cToken address.\\n    /// @return The updated COMP supply index.\\n    function getUpdatedCompSupplyIndex(address _poolTokenAddress) public view returns (uint256) {\\n        IComptroller.CompMarketState memory localSupplyState = rewardsManager\\n        .getLocalCompSupplyState(_poolTokenAddress);\\n\\n        if (localSupplyState.block == block.number) return localSupplyState.index;\\n        else {\\n            IComptroller.CompMarketState memory supplyState = comptroller.compSupplyState(\\n                _poolTokenAddress\\n            );\\n\\n            uint256 deltaBlocks = block.number - supplyState.block;\\n            uint256 supplySpeed = comptroller.compSupplySpeeds(_poolTokenAddress);\\n\\n            if (deltaBlocks > 0 && supplySpeed > 0) {\\n                uint256 supplyTokens = ICToken(_poolTokenAddress).totalSupply();\\n                uint256 compAccrued = deltaBlocks * supplySpeed;\\n                uint256 ratio = supplyTokens > 0 ? (compAccrued * 1e36) / supplyTokens : 0;\\n\\n                return supplyState.index + ratio;\\n            }\\n\\n            return supplyState.index;\\n        }\\n    }\\n\\n    /// @notice Returns the updated COMP borrow index.\\n    /// @param _poolTokenAddress The cToken address.\\n    /// @return The updated COMP borrow index.\\n    function getUpdatedCompBorrowIndex(address _poolTokenAddress) public view returns (uint256) {\\n        IComptroller.CompMarketState memory localBorrowState = rewardsManager\\n        .getLocalCompBorrowState(_poolTokenAddress);\\n\\n        if (localBorrowState.block == block.number) return localBorrowState.index;\\n        else {\\n            IComptroller.CompMarketState memory borrowState = comptroller.compBorrowState(\\n                _poolTokenAddress\\n            );\\n            uint256 deltaBlocks = block.number - borrowState.block;\\n            uint256 borrowSpeed = comptroller.compBorrowSpeeds(_poolTokenAddress);\\n\\n            if (deltaBlocks > 0 && borrowSpeed > 0) {\\n                ICToken cToken = ICToken(_poolTokenAddress);\\n\\n                uint256 borrowAmount = cToken.totalBorrows().div(cToken.borrowIndex());\\n                uint256 compAccrued = deltaBlocks * borrowSpeed;\\n                uint256 ratio = borrowAmount > 0 ? (compAccrued * 1e36) / borrowAmount : 0;\\n\\n                return borrowState.index + ratio;\\n            }\\n\\n            return borrowState.index;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/MarketsLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RatesLens.sol\\\";\\n\\n/// @title MarketsLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Intermediary layer exposing endpoints to query live data related to the Morpho Protocol markets.\\nabstract contract MarketsLens is RatesLens {\\n    using CompoundMath for uint256;\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Checks if a market is created.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created and not paused, otherwise false.\\n    function isMarketCreated(address _poolTokenAddress) external view returns (bool) {\\n        return morpho.marketStatus(_poolTokenAddress).isCreated;\\n    }\\n\\n    /// @notice Checks if a market is created and not paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created and not paused, otherwise false.\\n    function isMarketCreatedAndNotPaused(address _poolTokenAddress) external view returns (bool) {\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        return marketStatus.isCreated && !marketStatus.isPaused;\\n    }\\n\\n    /// @notice Checks if a market is created and not paused or partially paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created, not paused and not partially paused, otherwise false.\\n    function isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolTokenAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        return marketStatus.isCreated && !marketStatus.isPaused && !marketStatus.isPartiallyPaused;\\n    }\\n\\n    /// @notice Returns all created markets.\\n    /// @return marketsCreated_ The list of market addresses.\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_) {\\n        return morpho.getAllMarkets();\\n    }\\n\\n    /// @notice For a given market, returns the average supply/borrow rates and amounts of underlying asset supplied and borrowed through Morpho, on the underlying pool and matched peer-to-peer.\\n    /// @dev The returned values are not updated.\\n    /// @param _poolTokenAddress The address of the market of which to get main data.\\n    /// @return avgSupplyRatePerBlock The average supply rate experienced on the given market.\\n    /// @return avgBorrowRatePerBlock The average borrow rate experienced on the given market.\\n    /// @return p2pSupplyAmount The total supplied amount matched peer-to-peer, including the supply delta (in underlying).\\n    /// @return p2pBorrowAmount The total borrowed amount matched peer-to-peer, including the borrow delta (in underlying).\\n    /// @return poolSupplyAmount The total supplied amount on the underlying pool, without the supply delta (in underlying).\\n    /// @return poolBorrowAmount The total borrowed amount on the underlying pool, without the borrow delta (in underlying).\\n    function getMainMarketData(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 avgSupplyRatePerBlock,\\n            uint256 avgBorrowRatePerBlock,\\n            uint256 p2pSupplyAmount,\\n            uint256 p2pBorrowAmount,\\n            uint256 poolSupplyAmount,\\n            uint256 poolBorrowAmount\\n        )\\n    {\\n        (avgSupplyRatePerBlock, p2pSupplyAmount, poolSupplyAmount) = getAverageSupplyRatePerBlock(\\n            _poolTokenAddress\\n        );\\n        (avgBorrowRatePerBlock, p2pBorrowAmount, poolBorrowAmount) = getAverageBorrowRatePerBlock(\\n            _poolTokenAddress\\n        );\\n    }\\n\\n    /// @notice Returns non-updated indexes, the block at which they were last updated and the total deltas of a given market.\\n    /// @param _poolTokenAddress The address of the market of which to get advanced data.\\n    /// @return p2pSupplyIndex The peer-to-peer supply index of the given market (in wad).\\n    /// @return p2pBorrowIndex The peer-to-peer borrow index of the given market (in wad).\\n    /// @return poolSupplyIndex The pool supply index of the given market (in wad).\\n    /// @return poolBorrowIndex The pool borrow index of the given market (in wad).\\n    /// @return lastUpdateBlockNumber The block number at which pool indexes were last updated.\\n    /// @return p2pSupplyDelta The total supply delta (in underlying).\\n    /// @return p2pBorrowDelta The total borrow delta (in underlying).\\n    function getAdvancedMarketData(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex,\\n            uint32 lastUpdateBlockNumber,\\n            uint256 p2pSupplyDelta,\\n            uint256 p2pBorrowDelta\\n        )\\n    {\\n        (p2pSupplyIndex, p2pBorrowIndex, poolSupplyIndex, poolBorrowIndex) = getIndexes(\\n            _poolTokenAddress,\\n            false\\n        );\\n\\n        Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n        p2pSupplyDelta = delta.p2pSupplyDelta.mul(poolSupplyIndex);\\n        p2pBorrowDelta = delta.p2pBorrowDelta.mul(poolBorrowIndex);\\n\\n        Types.LastPoolIndexes memory lastPoolIndexes = morpho.lastPoolIndexes(_poolTokenAddress);\\n        lastUpdateBlockNumber = lastPoolIndexes.lastUpdateBlockNumber;\\n    }\\n\\n    /// @notice Returns market's configuration.\\n    /// @return underlying_ The underlying token address.\\n    /// @return isCreated_ Whether the market is created or not.\\n    /// @return p2pDisabled_ Whether user are put in peer-to-peer or not.\\n    /// @return isPaused_ Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n    /// @return isPartiallyPaused_ Whether the market is partially paused or not (only supply and borrow are frozen).\\n    /// @return reserveFactor_ The reserve factor applied to this market.\\n    /// @return p2pIndexCursor_ The p2p index cursor applied to this market.\\n    /// @return collateralFactor_ The pool collateral factor also used by Morpho.\\n    function getMarketConfiguration(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            address underlying_,\\n            bool isCreated_,\\n            bool p2pDisabled_,\\n            bool isPaused_,\\n            bool isPartiallyPaused_,\\n            uint16 reserveFactor_,\\n            uint16 p2pIndexCursor_,\\n            uint256 collateralFactor_\\n        )\\n    {\\n        underlying_ = _poolTokenAddress == morpho.cEth()\\n            ? morpho.wEth()\\n            : ICToken(_poolTokenAddress).underlying();\\n\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        isCreated_ = marketStatus.isCreated;\\n        p2pDisabled_ = morpho.p2pDisabled(_poolTokenAddress);\\n        isPaused_ = marketStatus.isPaused;\\n        isPartiallyPaused_ = marketStatus.isPartiallyPaused;\\n\\n        Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n        reserveFactor_ = marketParams.reserveFactor;\\n        p2pIndexCursor_ = marketParams.p2pIndexCursor;\\n\\n        (, collateralFactor_, ) = comptroller.markets(_poolTokenAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/RatesLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../interfaces/IMorpho.sol\\\";\\n\\nimport \\\"../libraries/CompoundMath.sol\\\";\\n\\nimport \\\"./UsersLens.sol\\\";\\n\\n/// @title RatesLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Intermediary layer exposing endpoints to query live data related to the Morpho Protocol users and their positions.\\nabstract contract RatesLens is UsersLens {\\n    using CompoundMath for uint256;\\n\\n    /// STRUCTS ///\\n\\n    struct Indexes {\\n        uint256 p2pSupplyIndex;\\n        uint256 p2pBorrowIndex;\\n        uint256 poolSupplyIndex;\\n        uint256 poolBorrowIndex;\\n    }\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns the supply rate per block experienced on a market after having supplied the given amount on behalf of the given user.\\n    /// @dev Note: the returned supply rate is a lower bound: when supplying through Morpho-Compound,\\n    /// a supplier could be matched more than once instantly or later and thus benefit from a higher supply rate.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _user The address of the user on behalf of whom to supply.\\n    /// @param _amount The amount to supply.\\n    /// @return nextSupplyRatePerBlock An approximation of the next supply rate per block experienced after having supplied (in wad).\\n    /// @return balanceOnPool The total balance supplied on pool after having supplied (in underlying).\\n    /// @return balanceInP2P The total balance matched peer-to-peer after having supplied (in underlying).\\n    /// @return totalBalance The total balance supplied through Morpho (in underlying).\\n    function getNextUserSupplyRatePerBlock(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nextSupplyRatePerBlock,\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        Types.SupplyBalance memory supplyBalance = morpho.supplyBalanceInOf(\\n            _poolTokenAddress,\\n            _user\\n        );\\n\\n        Indexes memory indexes;\\n        (indexes.p2pSupplyIndex, , indexes.poolSupplyIndex, indexes.poolBorrowIndex) = getIndexes(\\n            _poolTokenAddress,\\n            true\\n        );\\n\\n        if (_amount > 0) {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            if (delta.p2pBorrowDelta > 0) {\\n                uint256 deltaInUnderlying = delta.p2pBorrowDelta.mul(indexes.poolBorrowIndex);\\n                uint256 matchedDelta = CompoundMath.min(deltaInUnderlying, _amount);\\n\\n                supplyBalance.inP2P += matchedDelta.div(indexes.p2pSupplyIndex);\\n                _amount -= matchedDelta;\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 firstPoolBorrowerBalance = morpho\\n            .borrowBalanceInOf(\\n                _poolTokenAddress,\\n                morpho.getHead(_poolTokenAddress, Types.PositionType.BORROWERS_ON_POOL)\\n            ).onPool;\\n\\n            if (firstPoolBorrowerBalance > 0) {\\n                uint256 borrowerBalanceInUnderlying = firstPoolBorrowerBalance.mul(\\n                    indexes.poolBorrowIndex\\n                );\\n                uint256 matchedP2P = CompoundMath.min(borrowerBalanceInUnderlying, _amount);\\n\\n                supplyBalance.inP2P += matchedP2P.div(indexes.p2pSupplyIndex);\\n                _amount -= matchedP2P;\\n            }\\n        }\\n\\n        if (_amount > 0) supplyBalance.onPool += _amount.div(indexes.poolSupplyIndex);\\n\\n        balanceOnPool = supplyBalance.onPool.mul(indexes.poolSupplyIndex);\\n        balanceInP2P = supplyBalance.inP2P.mul(indexes.p2pSupplyIndex);\\n        totalBalance = balanceOnPool + balanceInP2P;\\n\\n        nextSupplyRatePerBlock = _computeUserSupplyRatePerBlock(\\n            _poolTokenAddress,\\n            balanceOnPool,\\n            balanceInP2P,\\n            totalBalance\\n        );\\n    }\\n\\n    /// @notice Returns the borrow rate per block experienced on a market after having supplied the given amount on behalf of the given user.\\n    /// @dev Note: the returned borrow rate is an upper bound: when borrowing through Morpho-Compound,\\n    /// a borrower could be matched more than once instantly or later and thus benefit from a lower borrow rate.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _user The address of the user on behalf of whom to borrow.\\n    /// @param _amount The amount to borrow.\\n    /// @return nextBorrowRatePerBlock An approximation of the next borrow rate per block experienced after having supplied (in wad).\\n    /// @return balanceOnPool The total balance supplied on pool after having supplied (in underlying).\\n    /// @return balanceInP2P The total balance matched peer-to-peer after having supplied (in underlying).\\n    /// @return totalBalance The total balance supplied through Morpho (in underlying).\\n    function getNextUserBorrowRatePerBlock(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nextBorrowRatePerBlock,\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        Types.BorrowBalance memory borrowBalance = morpho.borrowBalanceInOf(\\n            _poolTokenAddress,\\n            _user\\n        );\\n\\n        Indexes memory indexes;\\n        (, indexes.p2pBorrowIndex, indexes.poolSupplyIndex, indexes.poolBorrowIndex) = getIndexes(\\n            _poolTokenAddress,\\n            true\\n        );\\n\\n        if (_amount > 0) {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            if (delta.p2pSupplyDelta > 0) {\\n                uint256 deltaInUnderlying = delta.p2pSupplyDelta.mul(indexes.poolSupplyIndex);\\n                uint256 matchedDelta = CompoundMath.min(deltaInUnderlying, _amount);\\n\\n                borrowBalance.inP2P += matchedDelta.div(indexes.p2pBorrowIndex);\\n                _amount -= matchedDelta;\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 firstPoolSupplierBalance = morpho\\n            .supplyBalanceInOf(\\n                _poolTokenAddress,\\n                morpho.getHead(_poolTokenAddress, Types.PositionType.SUPPLIERS_ON_POOL)\\n            ).onPool;\\n\\n            if (firstPoolSupplierBalance > 0) {\\n                uint256 supplierBalanceInUnderlying = firstPoolSupplierBalance.mul(\\n                    indexes.poolSupplyIndex\\n                );\\n                uint256 matchedP2P = CompoundMath.min(supplierBalanceInUnderlying, _amount);\\n\\n                borrowBalance.inP2P += matchedP2P.div(indexes.p2pBorrowIndex);\\n                _amount -= matchedP2P;\\n            }\\n        }\\n\\n        if (_amount > 0) borrowBalance.onPool += _amount.div(indexes.poolBorrowIndex);\\n\\n        balanceOnPool = borrowBalance.onPool.mul(indexes.poolBorrowIndex);\\n        balanceInP2P = borrowBalance.inP2P.mul(indexes.p2pBorrowIndex);\\n        totalBalance = balanceOnPool + balanceInP2P;\\n\\n        nextBorrowRatePerBlock = _computeUserBorrowRatePerBlock(\\n            _poolTokenAddress,\\n            balanceOnPool,\\n            balanceInP2P,\\n            totalBalance\\n        );\\n    }\\n\\n    /// PUBLIC ///\\n\\n    /// @notice Computes and returns the current supply rate per block experienced on average on a given market.\\n    /// @param _poolTokenAddress The market address.\\n    /// @return avgSupplyRate The market's average supply rate per block (in wad).\\n    /// @return p2pSupplyAmount The total supplied amount matched peer-to-peer, including the supply delta (in underlying).\\n    /// @return poolSupplyAmount The total supplied amount on the underlying pool, without the supply delta (in underlying).\\n    function getAverageSupplyRatePerBlock(address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 avgSupplyRate,\\n            uint256 p2pSupplyAmount,\\n            uint256 poolSupplyAmount\\n        )\\n    {\\n        (uint256 p2pSupplyRate, , uint256 poolSupplyRate, ) = getRatesPerBlock(_poolTokenAddress);\\n        (uint256 p2pSupplyIndex, , uint256 poolSupplyIndex, ) = getIndexes(_poolTokenAddress, true);\\n        Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n        ICToken poolToken = ICToken(_poolTokenAddress);\\n\\n        // don't need to subtract delta as it's already taken into account in the p2pSupplyRate.\\n        p2pSupplyAmount = delta.p2pSupplyAmount.mul(p2pSupplyIndex);\\n        poolSupplyAmount = poolToken.balanceOf(address(morpho)).mul(poolSupplyIndex);\\n\\n        uint256 totalSupply = p2pSupplyAmount + poolSupplyAmount;\\n        if (p2pSupplyAmount > 0)\\n            avgSupplyRate += p2pSupplyRate.mul(p2pSupplyAmount.div(totalSupply));\\n        if (poolSupplyAmount > 0)\\n            avgSupplyRate += poolSupplyRate.mul(poolSupplyAmount.div(totalSupply));\\n    }\\n\\n    /// @notice Computes and returns the current average borrow rate per block experienced on a given market.\\n    /// @param _poolTokenAddress The market address.\\n    /// @return avgBorrowRate The market's average borrow rate per block (in wad).\\n    /// @return p2pBorrowAmount The total borrowed amount matched peer-to-peer, including the borrow delta (in underlying).\\n    /// @return poolBorrowAmount The total borrowed amount on the underlying pool, without the borrow delta (in underlying).\\n    function getAverageBorrowRatePerBlock(address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 avgBorrowRate,\\n            uint256 p2pBorrowAmount,\\n            uint256 poolBorrowAmount\\n        )\\n    {\\n        (, uint256 p2pBorrowRate, , uint256 poolBorrowRate) = getRatesPerBlock(_poolTokenAddress);\\n        (, uint256 p2pBorrowIndex, , uint256 poolBorrowIndex) = getIndexes(_poolTokenAddress, true);\\n        Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n        ICToken poolToken = ICToken(_poolTokenAddress);\\n\\n        // don't need to subtract delta as it's already taken into account in the p2pSupplyRate.\\n        p2pBorrowAmount = delta.p2pBorrowAmount.mul(p2pBorrowIndex);\\n        poolBorrowAmount = poolToken.borrowBalanceStored(address(morpho)).mul(\\n            poolBorrowIndex.div(poolToken.borrowIndex())\\n        );\\n\\n        uint256 totalBorrow = p2pBorrowAmount + poolBorrowAmount;\\n        if (p2pBorrowAmount > 0)\\n            avgBorrowRate += p2pBorrowRate.mul(p2pBorrowAmount.div(totalBorrow));\\n        if (poolBorrowAmount > 0)\\n            avgBorrowRate += poolBorrowRate.mul(poolBorrowAmount.div(totalBorrow));\\n    }\\n\\n    /// @notice Computes and returns peer-to-peer and pool rates for a specific market.\\n    /// @dev Note: prefer using getAverageSupplyRatePerBlock & getAverageBorrowRatePerBlock to get the experienced supply/borrow rate instead of this.\\n    /// @param _poolTokenAddress The market address.\\n    /// @return p2pSupplyRate_ The market's peer-to-peer supply rate per block (in wad).\\n    /// @return p2pBorrowRate_ The market's peer-to-peer borrow rate per block (in wad).\\n    /// @return poolSupplyRate_ The market's pool supply rate per block (in wad).\\n    /// @return poolBorrowRate_ The market's pool borrow rate per block (in wad).\\n    function getRatesPerBlock(address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 p2pSupplyRate_,\\n            uint256 p2pBorrowRate_,\\n            uint256 poolSupplyRate_,\\n            uint256 poolBorrowRate_\\n        )\\n    {\\n        ICToken cToken = ICToken(_poolTokenAddress);\\n\\n        poolSupplyRate_ = cToken.supplyRatePerBlock();\\n        poolBorrowRate_ = cToken.borrowRatePerBlock();\\n        Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n\\n        uint256 p2pRate = ((MAX_BASIS_POINTS - marketParams.p2pIndexCursor) *\\n            poolSupplyRate_ +\\n            marketParams.p2pIndexCursor *\\n            poolBorrowRate_) / MAX_BASIS_POINTS;\\n\\n        Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n        (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex\\n        ) = getIndexes(_poolTokenAddress, false);\\n\\n        p2pSupplyRate_ = InterestRatesModel.computeP2PSupplyRatePerBlock(\\n            InterestRatesModel.P2PRateComputeParams({\\n                p2pRate: p2pRate,\\n                poolRate: poolSupplyRate_,\\n                poolIndex: poolSupplyIndex,\\n                p2pIndex: p2pSupplyIndex,\\n                p2pDelta: delta.p2pSupplyDelta,\\n                p2pAmount: delta.p2pSupplyAmount,\\n                reserveFactor: marketParams.reserveFactor\\n            })\\n        );\\n\\n        p2pBorrowRate_ = InterestRatesModel.computeP2PBorrowRatePerBlock(\\n            InterestRatesModel.P2PRateComputeParams({\\n                p2pRate: p2pRate,\\n                poolRate: poolBorrowRate_,\\n                poolIndex: poolBorrowIndex,\\n                p2pIndex: p2pBorrowIndex,\\n                p2pDelta: delta.p2pBorrowDelta,\\n                p2pAmount: delta.p2pBorrowAmount,\\n                reserveFactor: marketParams.reserveFactor\\n            })\\n        );\\n    }\\n\\n    /// @notice Returns the supply rate per block a given user is currently experiencing on a given market.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _user The user to compute the supply rate per block for.\\n    /// @return The supply rate per block the user is currently experiencing (in wad).\\n    function getCurrentUserSupplyRatePerBlock(address _poolTokenAddress, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        ) = getUpdatedUserSupplyBalance(_user, _poolTokenAddress);\\n\\n        return\\n            _computeUserSupplyRatePerBlock(\\n                _poolTokenAddress,\\n                balanceOnPool,\\n                balanceInP2P,\\n                totalBalance\\n            );\\n    }\\n\\n    /// @notice Returns the borrow rate per block a given user is currently experiencing on a given market.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _user The user to compute the borrow rate per block for.\\n    /// @return The borrow rate per block the user is currently experiencing (in wad).\\n    function getCurrentUserBorrowRatePerBlock(address _poolTokenAddress, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        ) = getUpdatedUserBorrowBalance(_user, _poolTokenAddress);\\n\\n        return\\n            _computeUserBorrowRatePerBlock(\\n                _poolTokenAddress,\\n                balanceOnPool,\\n                balanceInP2P,\\n                totalBalance\\n            );\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Returns the supply rate per block experienced on a market based on a given position distribution.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _balanceOnPool The amount of balance supplied on pool (in a unit common to `_balanceInP2P` and `_totalBalance`).\\n    /// @param _balanceInP2P The amount of balance matched peer-to-peer (in a unit common to `_balanceOnPool` and `_totalBalance`).\\n    /// @param _totalBalance The total amount of balance (should equal `_balanceOnPool + _balanceInP2P` but is used for saving gas).\\n    /// @return supplyRatePerBlock_ The supply rate per block experienced by the given position (in wad).\\n    function _computeUserSupplyRatePerBlock(\\n        address _poolTokenAddress,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P,\\n        uint256 _totalBalance\\n    ) internal view returns (uint256 supplyRatePerBlock_) {\\n        if (_totalBalance == 0) return 0;\\n\\n        (uint256 p2pSupplyRate, , uint256 poolSupplyRate, ) = getRatesPerBlock(_poolTokenAddress);\\n\\n        if (_balanceOnPool > 0)\\n            supplyRatePerBlock_ += poolSupplyRate.mul(_balanceOnPool.div(_totalBalance));\\n        if (_balanceInP2P > 0)\\n            supplyRatePerBlock_ += p2pSupplyRate.mul(_balanceInP2P.div(_totalBalance));\\n    }\\n\\n    /// @dev Returns the borrow rate per block experienced on a market based on a given position distribution.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _balanceOnPool The amount of balance supplied on pool (in a unit common to `_balanceInP2P` and `_totalBalance`).\\n    /// @param _balanceInP2P The amount of balance matched peer-to-peer (in a unit common to `_balanceOnPool` and `_totalBalance`).\\n    /// @param _totalBalance The total amount of balance (should equal `_balanceOnPool + _balanceInP2P` but is used for saving gas).\\n    /// @return borrowRatePerBlock_ The borrow rate per block experienced by the given position (in wad).\\n    function _computeUserBorrowRatePerBlock(\\n        address _poolTokenAddress,\\n        uint256 _balanceOnPool,\\n        uint256 _balanceInP2P,\\n        uint256 _totalBalance\\n    ) internal view returns (uint256 borrowRatePerBlock_) {\\n        if (_totalBalance == 0) return 0;\\n\\n        (, uint256 p2pBorrowRate, , uint256 poolBorrowRate) = getRatesPerBlock(_poolTokenAddress);\\n\\n        if (_balanceOnPool > 0)\\n            borrowRatePerBlock_ += poolBorrowRate.mul(_balanceOnPool.div(_totalBalance));\\n        if (_balanceInP2P > 0)\\n            borrowRatePerBlock_ += p2pBorrowRate.mul(_balanceInP2P.div(_totalBalance));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function borrowCaps(address) external view returns (uint256);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n\\n    function _setMintPaused(ICToken cToken, bool state) external returns (bool);\\n\\n    function _setBorrowPaused(ICToken cToken, bool state) external returns (bool);\\n\\n    function _setCollateralFactor(ICToken cToken, uint256 newCollateralFactorMantissa)\\n        external\\n        returns (uint256);\\n\\n    function _setCompSpeeds(\\n        ICToken[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) external;\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IInterestRatesManager.sol\\\";\\nimport \\\"./IRewardsManager.sol\\\";\\nimport \\\"./IPositionsManager.sol\\\";\\nimport \\\"./IIncentivesVault.sol\\\";\\n\\nimport \\\"../libraries/Types.sol\\\";\\n\\n// prettier-ignore\\ninterface IMorpho {\\n\\n    /// STORAGE ///\\n\\n    function defaultMaxGasForMatching() external view returns (Types.MaxGasForMatching memory);\\n    function maxSortedUsers() external view returns (uint256);\\n    function dustThreshold() external view returns (uint256);\\n    function supplyBalanceInOf(address, address) external view returns (Types.SupplyBalance memory);\\n    function borrowBalanceInOf(address, address) external view returns (Types.BorrowBalance memory);\\n    function enteredMarkets(address) external view returns (address);\\n    function deltas(address) external view returns (Types.Delta memory);\\n    function marketsCreated() external view returns (address[] memory);\\n    function marketParameters(address) external view returns (Types.MarketParameters memory);\\n    function p2pDisabled(address) external view returns (bool);\\n    function p2pSupplyIndex(address) external view returns (uint256);\\n    function p2pBorrowIndex(address) external view returns (uint256);\\n    function lastPoolIndexes(address) external view returns (Types.LastPoolIndexes memory);\\n    function marketStatus(address) external view returns (Types.MarketStatus memory);\\n    function comptroller() external view returns (IComptroller);\\n    function interestRatesManager() external view returns (IInterestRatesManager);\\n    function rewardsManager() external view returns (IRewardsManager);\\n    function positionsManager() external view returns (IPositionsManager);\\n    function incentiveVault() external view returns (IIncentivesVault);\\n    function treasuryVault() external view returns (address);\\n    function cEth() external view returns (address);\\n    function wEth() external view returns (address);\\n\\n    /// GETTERS ///\\n\\n    function updateP2PIndexes(address _poolTokenAddress) external;\\n    function getEnteredMarkets(address _user) external view returns (address[] memory enteredMarkets_);\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_);\\n    function getHead(address _poolTokenAddress, Types.PositionType _positionType) external view returns (address head);\\n    function getNext(address _poolTokenAddress, Types.PositionType _positionType, address _user) external view returns (address next);\\n\\n    /// GOVERNANCE ///\\n\\n    function setMaxSortedUsers(uint256 _newMaxSortedUsers) external;\\n    function setDefaultMaxGasForMatching(Types.MaxGasForMatching memory _maxGasForMatching) external;\\n    function setTreasuryVault(address _newTreasuryVaultAddress) external;\\n    function setIncentivesVault(address _newIncentivesVault) external;\\n    function setRewardsManager(address _rewardsManagerAddress) external;\\n    function setDustThreshold(uint256 _dustThreshold) external;\\n    function setP2PDisable(address _poolTokenAddress, bool _p2pDisabled) external;\\n    function setReserveFactor(address _poolTokenAddress, uint256 _newReserveFactor) external;\\n    function setP2PIndexCursor(address _poolTokenAddress, uint16 _p2pIndexCursor) external;\\n    function setPauseStatusForAllMarkets(bool _newStatus) external;\\n    function setPauseStatus(address _poolTokenAddress, bool _newStatus) external;\\n    function setPartialPauseStatus(address _poolTokenAddress, bool _newStatus) external;\\n    function setPauseStatus(address _poolTokenAddress) external;\\n    function setPartialPauseStatus(address _poolTokenAddress) external;\\n    function claimToTreasury(address _poolTokenAddress, uint256 _amount) external;\\n    function createMarket(address _poolTokenAddress, Types.MarketParameters calldata _params) external;\\n\\n    /// USERS ///\\n\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function withdraw(address _poolTokenAddress, uint256 _amount) external;\\n    function repay(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function liquidate(address _poolTokenBorrowedAddress, address _poolTokenCollateralAddress, address _borrower, uint256 _amount) external;\\n    function claimRewards(address[] calldata _cTokenAddresses, bool _tradeForMorphoToken) external returns (uint256 claimedAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/UsersLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../interfaces/IMorpho.sol\\\";\\n\\nimport \\\"../libraries/CompoundMath.sol\\\";\\n\\nimport \\\"./IndexesLens.sol\\\";\\n\\n/// @title UsersLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Intermediary layer exposing endpoints to query live data related to the Morpho Protocol users and their positions.\\nabstract contract UsersLens is IndexesLens {\\n    using CompoundMath for uint256;\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the Compound's oracle failed.\\n    error CompoundOracleFailed();\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns all markets entered by a given user.\\n    /// @param _user The address of the user.\\n    /// @return enteredMarkets_ The list of markets entered by this user.\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets_)\\n    {\\n        return morpho.getEnteredMarkets(_user);\\n    }\\n\\n    /// @notice Returns the maximum amount available to withdraw and borrow for `_user` related to `_poolTokenAddress` (in underlyings).\\n    /// @dev Note: must be called after calling `accrueInterest()` on the cToken to have the most up to date values.\\n    /// @param _user The user to determine the capacities for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return withdrawable The maximum withdrawable amount of underlying token allowed (in underlying).\\n    /// @return borrowable The maximum borrowable amount of underlying token allowed (in underlying).\\n    function getUserMaxCapacitiesForAsset(address _user, address _poolTokenAddress)\\n        external\\n        view\\n        returns (uint256 withdrawable, uint256 borrowable)\\n    {\\n        Types.LiquidityData memory data;\\n        Types.AssetLiquidityData memory assetData;\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            if (_poolTokenAddress != poolTokenEntered) {\\n                assetData = getUserLiquidityDataForAsset(_user, poolTokenEntered, true, oracle);\\n\\n                data.maxDebtValue += assetData.maxDebtValue;\\n                data.debtValue += assetData.debtValue;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        assetData = getUserLiquidityDataForAsset(_user, _poolTokenAddress, true, oracle);\\n\\n        data.maxDebtValue += assetData.maxDebtValue;\\n        data.debtValue += assetData.debtValue;\\n\\n        // Not possible to withdraw nor borrow.\\n        if (data.maxDebtValue < data.debtValue) return (0, 0);\\n\\n        uint256 differenceInUnderlying = (data.maxDebtValue - data.debtValue).div(\\n            assetData.underlyingPrice\\n        );\\n\\n        withdrawable = assetData.collateralValue.div(assetData.underlyingPrice);\\n        if (assetData.collateralFactor != 0) {\\n            withdrawable = CompoundMath.min(\\n                withdrawable,\\n                differenceInUnderlying.div(assetData.collateralFactor)\\n            );\\n        }\\n\\n        borrowable = differenceInUnderlying;\\n    }\\n\\n    /// @dev Computes the maximum repayable amount for a potential liquidation.\\n    /// @param _user The potential liquidatee.\\n    /// @param _poolTokenBorrowedAddress The address of the market to repay.\\n    /// @param _poolTokenCollateralAddress The address of the market to seize.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    function computeLiquidationRepayAmount(\\n        address _user,\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address[] calldata _updatedMarkets\\n    ) external view returns (uint256 toRepay) {\\n        address[] memory updatedMarkets = new address[](_updatedMarkets.length + 2);\\n\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbUpdatedMarkets; ) {\\n            updatedMarkets[i] = _updatedMarkets[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        updatedMarkets[updatedMarkets.length - 2] = _poolTokenBorrowedAddress;\\n        updatedMarkets[updatedMarkets.length - 1] = _poolTokenCollateralAddress;\\n        if (!isLiquidatable(_user, updatedMarkets)) return 0;\\n\\n        ICompoundOracle compoundOracle = ICompoundOracle(comptroller.oracle());\\n\\n        (, , uint256 totalCollateralBalance) = getUpdatedUserSupplyBalance(\\n            _user,\\n            _poolTokenCollateralAddress\\n        );\\n        (, , uint256 totalBorrowBalance) = getUpdatedUserBorrowBalance(\\n            _user,\\n            _poolTokenBorrowedAddress\\n        );\\n\\n        uint256 borrowedPrice = compoundOracle.getUnderlyingPrice(_poolTokenBorrowedAddress);\\n        uint256 collateralPrice = compoundOracle.getUnderlyingPrice(_poolTokenCollateralAddress);\\n        if (borrowedPrice == 0 || collateralPrice == 0) revert CompoundOracleFailed();\\n\\n        uint256 maxROIRepay = totalCollateralBalance.mul(collateralPrice).div(borrowedPrice).div(\\n            comptroller.liquidationIncentiveMantissa()\\n        );\\n\\n        uint256 maxRepayable = totalBorrowBalance.mul(comptroller.closeFactorMantissa());\\n\\n        toRepay = maxROIRepay > maxRepayable ? maxRepayable : maxROIRepay;\\n    }\\n\\n    /// @dev Computes the health factor of a given user, given a list of markets of which to compute virtually updated pool & peer-to-peer indexes.\\n    /// @param _user The user of whom to get the health factor.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return the health factor of the given user (in wad).\\n    function getUserHealthFactor(address _user, address[] calldata _updatedMarkets)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        (, uint256 debtValue, uint256 maxDebtValue) = getUserBalanceStates(_user, _updatedMarkets);\\n\\n        return maxDebtValue.div(debtValue);\\n    }\\n\\n    /// PUBLIC ///\\n\\n    /// @notice Returns the collateral value, debt value and max debt value of a given user.\\n    /// @param _user The user to determine liquidity for.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return collateralValue The collateral value of the user.\\n    /// @return debtValue The current debt value of the user.\\n    /// @return maxDebtValue The maximum possible debt value of the user.\\n    function getUserBalanceStates(address _user, address[] calldata _updatedMarkets)\\n        public\\n        view\\n        returns (\\n            uint256 collateralValue,\\n            uint256 debtValue,\\n            uint256 maxDebtValue\\n        )\\n    {\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            bool shouldUpdateIndexes;\\n            for (uint256 j; j < nbUpdatedMarkets; ) {\\n                if (_updatedMarkets[j] == poolTokenEntered) {\\n                    shouldUpdateIndexes = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                shouldUpdateIndexes,\\n                oracle\\n            );\\n\\n            collateralValue += assetData.collateralValue;\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the balance in underlying of a given user in a given market.\\n    /// @param _user The user to determine balances of.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return balanceOnPool The balance on pool of the user (in underlying).\\n    /// @return balanceInP2P The balance in peer-to-peer of the user (in underlying).\\n    /// @return totalBalance The total balance of the user (in underlying).\\n    function getUpdatedUserSupplyBalance(address _user, address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        (uint256 poolSupplyIndex, ) = _computeUpdatedPoolIndexes(_poolTokenAddress);\\n\\n        balanceOnPool = morpho.supplyBalanceInOf(_poolTokenAddress, _user).onPool.mul(\\n            poolSupplyIndex\\n        );\\n        balanceInP2P = morpho.supplyBalanceInOf(_poolTokenAddress, _user).inP2P.mul(\\n            getUpdatedP2PSupplyIndex(_poolTokenAddress)\\n        );\\n\\n        totalBalance = balanceOnPool + balanceInP2P;\\n    }\\n\\n    /// @notice Returns the borrow balance in underlying of a given user in a given market.\\n    /// @param _user The user to determine balances of.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return balanceOnPool The balance on pool of the user (in underlying).\\n    /// @return balanceInP2P The balance in peer-to-peer of the user (in underlying).\\n    /// @return totalBalance The total balance of the user (in underlying).\\n    function getUpdatedUserBorrowBalance(address _user, address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        (, uint256 newBorrowIndex) = _computeUpdatedPoolIndexes(_poolTokenAddress);\\n\\n        balanceOnPool = morpho.borrowBalanceInOf(_poolTokenAddress, _user).onPool.mul(\\n            newBorrowIndex\\n        );\\n        balanceInP2P = morpho.borrowBalanceInOf(_poolTokenAddress, _user).inP2P.mul(\\n            getUpdatedP2PBorrowIndex(_poolTokenAddress)\\n        );\\n\\n        totalBalance = balanceOnPool + balanceInP2P;\\n    }\\n\\n    /// @dev Returns the debt value, max debt value of a given user.\\n    /// @param _user The user to determine liquidity for.\\n    /// @param _poolTokenAddress The market to hypothetically withdraw/borrow in.\\n    /// @param _withdrawnAmount The number of tokens to hypothetically withdraw (in underlying).\\n    /// @param _borrowedAmount The amount of tokens to hypothetically borrow (in underlying).\\n    /// @return debtValue The current debt value of the user.\\n    /// @return maxDebtValue The maximum debt value possible of the user.\\n    function getUserHypotheticalBalanceStates(\\n        address _user,\\n        address _poolTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) public view returns (uint256 debtValue, uint256 maxDebtValue) {\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                true,\\n                oracle\\n            );\\n\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n            unchecked {\\n                ++i;\\n            }\\n\\n            if (_poolTokenAddress == poolTokenEntered) {\\n                if (_borrowedAmount > 0)\\n                    debtValue += _borrowedAmount.mul(assetData.underlyingPrice);\\n\\n                if (_withdrawnAmount > 0)\\n                    maxDebtValue -= _withdrawnAmount.mul(assetData.underlyingPrice).mul(\\n                        assetData.collateralFactor\\n                    );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the data related to `_poolTokenAddress` for the `_user`, by optionally computing virtually updated pool and peer-to-peer indexes.\\n    /// @param _user The user to determine data for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _computeUpdatedIndexes Whether to compute virtually updated pool and peer-to-peer indexes.\\n    /// @param _oracle The oracle used.\\n    /// @return assetData The data related to this asset.\\n    function getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolTokenAddress,\\n        bool _computeUpdatedIndexes,\\n        ICompoundOracle _oracle\\n    ) public view returns (Types.AssetLiquidityData memory assetData) {\\n        assetData.underlyingPrice = _oracle.getUnderlyingPrice(_poolTokenAddress);\\n        if (assetData.underlyingPrice == 0) revert CompoundOracleFailed();\\n\\n        (, assetData.collateralFactor, ) = comptroller.markets(_poolTokenAddress);\\n\\n        (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex\\n        ) = getIndexes(_poolTokenAddress, _computeUpdatedIndexes);\\n\\n        assetData.collateralValue = _computeUserSupplyBalanceInOf(\\n            _poolTokenAddress,\\n            _user,\\n            p2pSupplyIndex,\\n            poolSupplyIndex\\n        ).mul(assetData.underlyingPrice);\\n\\n        assetData.debtValue = _computeUserBorrowBalanceInOf(\\n            _poolTokenAddress,\\n            _user,\\n            p2pBorrowIndex,\\n            poolBorrowIndex\\n        ).mul(assetData.underlyingPrice);\\n\\n        assetData.maxDebtValue = assetData.collateralValue.mul(assetData.collateralFactor);\\n    }\\n\\n    /// @dev Checks whether the user has enough collateral to maintain such a borrow position.\\n    /// @param _user The user to check.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return whether or not the user is liquidatable.\\n    function isLiquidatable(address _user, address[] memory _updatedMarkets)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ICompoundOracle oracle = ICompoundOracle(comptroller.oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 maxDebtValue;\\n        uint256 debtValue;\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            bool shouldUpdateIndexes;\\n            for (uint256 j; j < nbUpdatedMarkets; ) {\\n                if (_updatedMarkets[j] == poolTokenEntered) {\\n                    shouldUpdateIndexes = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                shouldUpdateIndexes,\\n                oracle\\n            );\\n\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return debtValue > maxDebtValue;\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Returns the supply balance of `_user` in the `_poolTokenAddress` market.\\n    /// @dev Note: Compute the result with the index stored and not the most up to date one.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the supply amount.\\n    /// @return The supply balance of the user (in underlying).\\n    function _computeUserSupplyBalanceInOf(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _p2pSupplyIndex,\\n        uint256 _poolSupplyIndex\\n    ) internal view returns (uint256) {\\n        Types.SupplyBalance memory supplyBalance = morpho.supplyBalanceInOf(\\n            _poolTokenAddress,\\n            _user\\n        );\\n\\n        return\\n            supplyBalance.inP2P.mul(_p2pSupplyIndex) + supplyBalance.onPool.mul(_poolSupplyIndex);\\n    }\\n\\n    /// @dev Returns the borrow balance of `_user` in the `_poolTokenAddress` market.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the borrow amount.\\n    /// @return The borrow balance of the user (in underlying).\\n    function _computeUserBorrowBalanceInOf(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _p2pBorrowIndex,\\n        uint256 _poolBorrowIndex\\n    ) internal view returns (uint256) {\\n        Types.BorrowBalance memory borrowBalance = morpho.borrowBalanceInOf(\\n            _poolTokenAddress,\\n            _user\\n        );\\n\\n        return\\n            borrowBalance.inP2P.mul(_p2pBorrowIndex) + borrowBalance.onPool.mul(_poolBorrowIndex);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function initialize(address _morpho) external;\\n\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address _cTokenAddress)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address _cTokenAddress)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in pool supply unit).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in pool borrow unit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer supply unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer borrow unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/IndexesLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/InterestRatesModel.sol\\\";\\nimport \\\"../libraries/CompoundMath.sol\\\";\\n\\nimport \\\"./LensStorage.sol\\\";\\n\\n/// @title IndexesLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Intermediary layer exposing endpoints to query live data related to the Morpho Protocol market indexes & rates.\\nabstract contract IndexesLens is LensStorage {\\n    using CompoundMath for uint256;\\n\\n    /// PUBLIC ///\\n\\n    /// @notice Returns the updated peer-to-peer supply index.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newP2PSupplyIndex The updated peer-to-peer supply index.\\n    function getUpdatedP2PSupplyIndex(address _poolTokenAddress) public view returns (uint256) {\\n        if (block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber)\\n            return morpho.p2pSupplyIndex(_poolTokenAddress);\\n        else {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n            Types.LastPoolIndexes memory lastPoolIndexes = morpho.lastPoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            (uint256 newPoolSupplyIndex, uint256 newPoolBorrowIndex) = _computeUpdatedPoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            InterestRatesModel.GrowthFactors memory growthFactors = InterestRatesModel\\n            .computeGrowthFactors(\\n                newPoolSupplyIndex,\\n                newPoolBorrowIndex,\\n                lastPoolIndexes,\\n                marketParams.p2pIndexCursor\\n            );\\n\\n            return\\n                InterestRatesModel.computeP2PSupplyIndex(\\n                    InterestRatesModel.P2PIndexComputeParams({\\n                        poolGrowthFactor: growthFactors.poolSupplyGrowthFactor,\\n                        p2pGrowthFactor: growthFactors.p2pGrowthFactor,\\n                        lastPoolIndex: lastPoolIndexes.lastSupplyPoolIndex,\\n                        lastP2PIndex: morpho.p2pSupplyIndex(_poolTokenAddress),\\n                        p2pDelta: delta.p2pSupplyDelta,\\n                        p2pAmount: delta.p2pSupplyAmount,\\n                        reserveFactor: marketParams.reserveFactor\\n                    })\\n                );\\n        }\\n    }\\n\\n    /// @notice Returns the updated peer-to-peer borrow index.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newP2PBorrowIndex The updated peer-to-peer borrow index.\\n    function getUpdatedP2PBorrowIndex(address _poolTokenAddress) public view returns (uint256) {\\n        if (block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber)\\n            return morpho.p2pBorrowIndex(_poolTokenAddress);\\n        else {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n            Types.LastPoolIndexes memory lastPoolIndexes = morpho.lastPoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            (uint256 newPoolSupplyIndex, uint256 newPoolBorrowIndex) = _computeUpdatedPoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            InterestRatesModel.GrowthFactors memory growthFactors = InterestRatesModel\\n            .computeGrowthFactors(\\n                newPoolSupplyIndex,\\n                newPoolBorrowIndex,\\n                lastPoolIndexes,\\n                marketParams.p2pIndexCursor\\n            );\\n\\n            return\\n                InterestRatesModel.computeP2PBorrowIndex(\\n                    InterestRatesModel.P2PIndexComputeParams({\\n                        poolGrowthFactor: growthFactors.poolBorrowGrowthFactor,\\n                        p2pGrowthFactor: growthFactors.p2pGrowthFactor,\\n                        lastPoolIndex: lastPoolIndexes.lastBorrowPoolIndex,\\n                        lastP2PIndex: morpho.p2pBorrowIndex(_poolTokenAddress),\\n                        p2pDelta: delta.p2pBorrowDelta,\\n                        p2pAmount: delta.p2pBorrowAmount,\\n                        reserveFactor: marketParams.reserveFactor\\n                    })\\n                );\\n        }\\n    }\\n\\n    /// @notice Returns the updated peer-to-peer and pool indexes.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _computeUpdatedIndexes Whether to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return newP2PSupplyIndex The updated peer-to-peer supply index.\\n    /// @return newP2PBorrowIndex The updated peer-to-peer borrow index.\\n    /// @return newPoolSupplyIndex The updated pool supply index.\\n    /// @return newPoolBorrowIndex The updated pool borrow index.\\n    function getIndexes(address _poolTokenAddress, bool _computeUpdatedIndexes)\\n        public\\n        view\\n        returns (\\n            uint256 newP2PSupplyIndex,\\n            uint256 newP2PBorrowIndex,\\n            uint256 newPoolSupplyIndex,\\n            uint256 newPoolBorrowIndex\\n        )\\n    {\\n        if (!_computeUpdatedIndexes) {\\n            ICToken cToken = ICToken(_poolTokenAddress);\\n\\n            newPoolSupplyIndex = cToken.exchangeRateStored();\\n            newPoolBorrowIndex = cToken.borrowIndex();\\n        } else {\\n            (newPoolSupplyIndex, newPoolBorrowIndex) = _computeUpdatedPoolIndexes(\\n                _poolTokenAddress\\n            );\\n        }\\n\\n        if (\\n            !_computeUpdatedIndexes ||\\n            block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber\\n        ) {\\n            newP2PSupplyIndex = morpho.p2pSupplyIndex(_poolTokenAddress);\\n            newP2PBorrowIndex = morpho.p2pBorrowIndex(_poolTokenAddress);\\n        } else {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n            Types.LastPoolIndexes memory lastPoolIndexes = morpho.lastPoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            InterestRatesModel.GrowthFactors memory growthFactors = InterestRatesModel\\n            .computeGrowthFactors(\\n                newPoolSupplyIndex,\\n                newPoolBorrowIndex,\\n                lastPoolIndexes,\\n                marketParams.p2pIndexCursor\\n            );\\n\\n            newP2PSupplyIndex = InterestRatesModel.computeP2PSupplyIndex(\\n                InterestRatesModel.P2PIndexComputeParams({\\n                    poolGrowthFactor: growthFactors.poolSupplyGrowthFactor,\\n                    p2pGrowthFactor: growthFactors.p2pGrowthFactor,\\n                    lastPoolIndex: lastPoolIndexes.lastSupplyPoolIndex,\\n                    lastP2PIndex: morpho.p2pSupplyIndex(_poolTokenAddress),\\n                    p2pDelta: delta.p2pSupplyDelta,\\n                    p2pAmount: delta.p2pSupplyAmount,\\n                    reserveFactor: marketParams.reserveFactor\\n                })\\n            );\\n            newP2PBorrowIndex = InterestRatesModel.computeP2PBorrowIndex(\\n                InterestRatesModel.P2PIndexComputeParams({\\n                    poolGrowthFactor: growthFactors.poolBorrowGrowthFactor,\\n                    p2pGrowthFactor: growthFactors.p2pGrowthFactor,\\n                    lastPoolIndex: lastPoolIndexes.lastBorrowPoolIndex,\\n                    lastP2PIndex: morpho.p2pBorrowIndex(_poolTokenAddress),\\n                    p2pDelta: delta.p2pBorrowDelta,\\n                    p2pAmount: delta.p2pBorrowAmount,\\n                    reserveFactor: marketParams.reserveFactor\\n                })\\n            );\\n        }\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @dev Returns Compound's indexes, optionally computing their virtually updated values.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newPoolSupplyIndex_ The supply index.\\n    /// @return newPoolBorrowIndex_ The borrow index.\\n    function _computeUpdatedPoolIndexes(address _poolTokenAddress)\\n        internal\\n        view\\n        returns (uint256 newPoolSupplyIndex_, uint256 newPoolBorrowIndex_)\\n    {\\n        ICToken cToken = ICToken(_poolTokenAddress);\\n\\n        uint256 accrualBlockNumberPrior = cToken.accrualBlockNumber();\\n        if (block.number == accrualBlockNumberPrior)\\n            return (cToken.exchangeRateStored(), cToken.borrowIndex());\\n\\n        // Read the previous values out of storage\\n        uint256 cashPrior = cToken.getCash();\\n        uint256 totalSupply = cToken.totalSupply();\\n        uint256 borrowsPrior = cToken.totalBorrows();\\n        uint256 reservesPrior = cToken.totalReserves();\\n        uint256 borrowIndexPrior = cToken.borrowIndex();\\n\\n        // Calculate the current borrow interest rate\\n        uint256 borrowRateMantissa = cToken.borrowRatePerBlock();\\n        require(borrowRateMantissa <= 0.0005e16, \\\"borrow rate is absurdly high\\\");\\n\\n        uint256 blockDelta = block.number - accrualBlockNumberPrior;\\n\\n        // Calculate the interest accumulated into borrows and reserves and the new index.\\n        uint256 simpleInterestFactor = borrowRateMantissa * blockDelta;\\n        uint256 interestAccumulated = simpleInterestFactor.mul(borrowsPrior);\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n        uint256 totalReservesNew = cToken.reserveFactorMantissa().mul(interestAccumulated) +\\n            reservesPrior;\\n\\n        newPoolSupplyIndex_ = totalSupply > 0\\n            ? (cashPrior + totalBorrowsNew - totalReservesNew).div(totalSupply)\\n            : cToken.initialExchangeRateMantissa();\\n        newPoolBorrowIndex_ = simpleInterestFactor.mul(borrowIndexPrior) + borrowIndexPrior;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/InterestRatesModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CompoundMath.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\nlibrary InterestRatesModel {\\n    using CompoundMath for uint256;\\n\\n    uint256 public constant MAX_BASIS_POINTS = 10_000; // 100% (in basis points).\\n    uint256 public constant WAD = 1e18;\\n\\n    /// STRUCTS ///\\n\\n    struct GrowthFactors {\\n        uint256 poolSupplyGrowthFactor; // The pool's supply index growth factor (in wad).\\n        uint256 poolBorrowGrowthFactor; // The pool's borrow index growth factor (in wad).\\n        uint256 p2pGrowthFactor; // Morpho peer-to-peer's median index growth factor (in wad).\\n    }\\n\\n    struct P2PIndexComputeParams {\\n        uint256 poolGrowthFactor; // The pool's index growth factor (in wad).\\n        uint256 p2pGrowthFactor; // Morpho peer-to-peer's median index growth factor (in wad).\\n        uint112 lastPoolIndex; // The pool's last stored index.\\n        uint256 lastP2PIndex; // Morpho's last stored peer-to-peer index.\\n        uint256 p2pDelta; // The peer-to-peer delta for the given market (in pool unit).\\n        uint256 p2pAmount; // The peer-to-peer amount for the given market (in peer-to-peer unit).\\n        uint16 reserveFactor; // The reserve factor of the given market (in bps).\\n    }\\n\\n    struct P2PRateComputeParams {\\n        uint256 poolRate; // The pool's index growth factor (in wad).\\n        uint256 p2pRate; // Morpho peer-to-peer's median index growth factor (in wad).\\n        uint256 poolIndex; // The pool's last stored index.\\n        uint256 p2pIndex; // Morpho's last stored peer-to-peer index.\\n        uint256 p2pDelta; // The peer-to-peer delta for the given market (in pool unit).\\n        uint256 p2pAmount; // The peer-to-peer amount for the given market (in peer-to-peer unit).\\n        uint16 reserveFactor; // The reserve factor of the given market (in bps).\\n    }\\n\\n    /// @notice Computes and returns the new growth factors associated to a given pool's supply/borrow index & Morpho's peer-to-peer index.\\n    /// @param _newPoolSupplyIndex The pool's last current supply index.\\n    /// @param _newPoolBorrowIndex The pool's last current borrow index.\\n    /// @param _lastPoolIndexes The pool's last stored indexes.\\n    /// @param _p2pIndexCursor The peer-to-peer index cursor for the given market.\\n    /// @return growthFactors_ The pool's indexes growth factor (in wad).\\n    function computeGrowthFactors(\\n        uint256 _newPoolSupplyIndex,\\n        uint256 _newPoolBorrowIndex,\\n        Types.LastPoolIndexes memory _lastPoolIndexes,\\n        uint16 _p2pIndexCursor\\n    ) internal pure returns (GrowthFactors memory growthFactors_) {\\n        growthFactors_.poolSupplyGrowthFactor = _newPoolSupplyIndex.div(\\n            _lastPoolIndexes.lastSupplyPoolIndex\\n        );\\n        growthFactors_.poolBorrowGrowthFactor = _newPoolBorrowIndex.div(\\n            _lastPoolIndexes.lastBorrowPoolIndex\\n        );\\n        growthFactors_.p2pGrowthFactor =\\n            ((MAX_BASIS_POINTS - _p2pIndexCursor) *\\n                growthFactors_.poolSupplyGrowthFactor +\\n                _p2pIndexCursor *\\n                growthFactors_.poolBorrowGrowthFactor) /\\n            MAX_BASIS_POINTS;\\n    }\\n\\n    /// @notice Computes and returns the new peer-to-peer supply index of a market given its parameters.\\n    /// @param _params The computation parameters.\\n    /// @return newP2PSupplyIndex_ The updated peer-to-peer index.\\n    function computeP2PSupplyIndex(P2PIndexComputeParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PSupplyIndex_)\\n    {\\n        uint256 p2pSupplyGrowthFactor = _params.p2pGrowthFactor -\\n            (_params.reserveFactor * (_params.p2pGrowthFactor - _params.poolGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        if (_params.p2pAmount == 0 || _params.p2pDelta == 0) {\\n            newP2PSupplyIndex_ = _params.lastP2PIndex.mul(p2pSupplyGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.p2pDelta.mul(_params.lastPoolIndex)).div(\\n                    (_params.p2pAmount).mul(_params.lastP2PIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PSupplyIndex_ = _params.lastP2PIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pSupplyGrowthFactor) +\\n                    shareOfTheDelta.mul(_params.poolGrowthFactor)\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes and returns the new peer-to-peer borrow index of a market given its parameters.\\n    /// @param _params The computation parameters.\\n    /// @return newP2PBorrowIndex_ The updated peer-to-peer index.\\n    function computeP2PBorrowIndex(P2PIndexComputeParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PBorrowIndex_)\\n    {\\n        uint256 p2pBorrowGrowthFactor = _params.p2pGrowthFactor +\\n            (_params.reserveFactor * (_params.poolGrowthFactor - _params.p2pGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        if (_params.p2pAmount == 0 || _params.p2pDelta == 0) {\\n            newP2PBorrowIndex_ = _params.lastP2PIndex.mul(p2pBorrowGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.p2pDelta.mul(_params.lastPoolIndex)).div(\\n                    (_params.p2pAmount).mul(_params.lastP2PIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PBorrowIndex_ = _params.lastP2PIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pBorrowGrowthFactor) +\\n                    shareOfTheDelta.mul(_params.poolGrowthFactor)\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes and returns the peer-to-peer supply rate per block of a market given its parameters.\\n    /// @param _params The computation parameters.\\n    /// @return p2pSupplyRate_ The peer-to-peer supply rate per block.\\n    function computeP2PSupplyRatePerBlock(P2PRateComputeParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 p2pSupplyRate_)\\n    {\\n        p2pSupplyRate_ =\\n            _params.p2pRate -\\n            ((_params.p2pRate - _params.poolRate) * _params.reserveFactor) /\\n            MAX_BASIS_POINTS;\\n\\n        if (_params.p2pDelta > 0 && _params.p2pAmount > 0) {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.p2pDelta.mul(_params.poolIndex)).div(\\n                    (_params.p2pAmount).mul(_params.p2pIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            p2pSupplyRate_ =\\n                p2pSupplyRate_.mul(WAD - shareOfTheDelta) +\\n                _params.poolRate.mul(shareOfTheDelta);\\n        }\\n    }\\n\\n    /// @notice Computes and returns the peer-to-peer borrow rate per block of a market given its parameters.\\n    /// @param _params The computation parameters.\\n    /// @return p2pBorrowRate_ The peer-to-peer borrow rate per block.\\n    function computeP2PBorrowRatePerBlock(P2PRateComputeParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 p2pBorrowRate_)\\n    {\\n        p2pBorrowRate_ =\\n            _params.p2pRate +\\n            ((_params.poolRate - _params.p2pRate) * _params.reserveFactor) /\\n            MAX_BASIS_POINTS;\\n\\n        if (_params.p2pDelta > 0 && _params.p2pAmount > 0) {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.p2pDelta.mul(_params.poolIndex)).div(\\n                    (_params.p2pAmount).mul(_params.p2pIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            p2pBorrowRate_ =\\n                p2pBorrowRate_.mul(WAD - shareOfTheDelta) +\\n                _params.poolRate.mul(shareOfTheDelta);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/lens/LensStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../interfaces/IMorpho.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title LensStorage.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Base layer to the Morpho Protocol Lens, managing the upgradeable storage layout.\\nabstract contract LensStorage is Initializable {\\n    /// STORAGE ///\\n\\n    uint256 public constant MAX_BASIS_POINTS = 10_000; // 100% (in basis points).\\n    uint256 public constant WAD = 1e18;\\n\\n    IMorpho public morpho;\\n    IComptroller public comptroller;\\n    IRewardsManager public rewardsManager;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs the contract.\\n    /// @dev The contract is automatically marked as initialized when deployed so that nobody can highjack the implementation contract.\\n    constructor() initializer {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CompoundOracleFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"computeLiquidationRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toRepay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"getAccruedBorrowerComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"getAccruedSupplierComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getAdvancedMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketsCreated_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getAverageBorrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBorrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getAverageSupplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgSupplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupplyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentUserBorrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentUserSupplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEnteredMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enteredMarkets_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_computeUpdatedIndexes\",\"type\":\"bool\"}],\"name\":\"getIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newP2PSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newP2PBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPoolSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPoolBorrowIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getMainMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgSupplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgBorrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBorrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getMarketConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCreated_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"p2pDisabled_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyPaused_\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"p2pIndexCursor_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getNextUserBorrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextBorrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getNextUserSupplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextSupplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getRatesPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupplyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBorrowRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedCompBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedCompSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedP2PBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedP2PSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedUserBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedUserSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"getUserBalanceStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"getUserHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowedAmount\",\"type\":\"uint256\"}],\"name\":\"getUserHypotheticalBalanceStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_computeUpdatedIndexes\",\"type\":\"bool\"},{\"internalType\":\"contract ICompoundOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"getUserLiquidityDataForAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.AssetLiquidityData\",\"name\":\"assetData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUserMaxCapacitiesForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_morphoAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreatedAndNotPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreatedAndNotPausedNorPartiallyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morpho\",\"outputs\":[{\"internalType\":\"contract IMorpho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lens", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}