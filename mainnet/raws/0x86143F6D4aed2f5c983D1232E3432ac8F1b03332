{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/cover/CoverPurchase.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {ISecurityMatrix} from \\\"../secmatrix/ISecurityMatrix.sol\\\";\\nimport {Math} from \\\"../common/Math.sol\\\";\\nimport {Constant} from \\\"../common/Constant.sol\\\";\\nimport {ICoverConfig} from \\\"./ICoverConfig.sol\\\";\\nimport {ICoverData} from \\\"./ICoverData.sol\\\";\\nimport {ICoverQuotation} from \\\"./ICoverQuotation.sol\\\";\\nimport {ICoverQuotationData} from \\\"./ICoverQuotationData.sol\\\";\\nimport {ICapitalPool} from \\\"../pool/ICapitalPool.sol\\\";\\nimport {IPremiumPool} from \\\"../pool/IPremiumPool.sol\\\";\\nimport {IExchangeRate} from \\\"../exchange/IExchangeRate.sol\\\";\\nimport {IReferralProgram} from \\\"../referral/IReferralProgram.sol\\\";\\nimport {ICoverPurchase} from \\\"./ICoverPurchase.sol\\\";\\nimport {IProduct} from \\\"../product/IProduct.sol\\\";\\nimport {CoverLib} from \\\"./CoverLib.sol\\\";\\n\\ncontract CoverPurchase is ICoverPurchase, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    // the security matrix address\\n    address public smx;\\n    // the insur token address\\n    address public insur;\\n    // the cover data address\\n    address public data;\\n    // the cover config address\\n    address public cfg;\\n    // the cover quotation address\\n    address public quotation;\\n    // the cover quotation data address\\n    address public quotationData;\\n    // the exchange rate address\\n    address public exchangeRate;\\n    // the referral program address\\n    address public referralProgram;\\n    // the product address\\n    address public product;\\n\\n    // the overall capacity currency (e.g. USDT)\\n    address public capacityCurrency;\\n    // the overall capacity available amount (e.g. 10mil)\\n    uint256 public capacityAvailableAmount;\\n    // the number of blocks window size (e.g. 600 blocks)\\n    uint256 public capacityNumOfBlocksWindowSize;\\n    // the last window start block number\\n    uint256 public lastWindowStartBlockNumber;\\n    // the last window sold capacity amount\\n    uint256 public lastWindowSoldCapacityAmount;\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    function setup(\\n        address _securityMatrix,\\n        address _insurToken,\\n        address _coverDataAddress,\\n        address _coverCfgAddress,\\n        address _coverQuotationAddress,\\n        address _coverQuotationDataAddress,\\n        address _productAddress,\\n        address _exchangeRate,\\n        address _referralProgram\\n    ) external onlyOwner {\\n        require(_securityMatrix != address(0), \\\"S:1\\\");\\n        require(_insurToken != address(0), \\\"S:2\\\");\\n        require(_coverDataAddress != address(0), \\\"S:3\\\");\\n        require(_coverCfgAddress != address(0), \\\"S:4\\\");\\n        require(_coverQuotationAddress != address(0), \\\"S:5\\\");\\n        require(_coverQuotationDataAddress != address(0), \\\"S:6\\\");\\n        require(_productAddress != address(0), \\\"S:7\\\");\\n        require(_exchangeRate != address(0), \\\"S:8\\\");\\n        require(_referralProgram != address(0), \\\"S:9\\\");\\n        smx = _securityMatrix;\\n        insur = _insurToken;\\n        data = _coverDataAddress;\\n        cfg = _coverCfgAddress;\\n        quotation = _coverQuotationAddress;\\n        quotationData = _coverQuotationDataAddress;\\n        product = _productAddress;\\n        exchangeRate = _exchangeRate;\\n        referralProgram = _referralProgram;\\n    }\\n\\n    event SetOverallCapacityEvent(address indexed _currency, uint256 _availableAmount, uint256 _numOfBlocksWindowSize);\\n\\n    function setOverallCapacity(\\n        address _currency,\\n        uint256 _availableAmount,\\n        uint256 _numOfBlocksWindowSize\\n    ) external override onlyOwner {\\n        capacityCurrency = _currency;\\n        capacityAvailableAmount = _availableAmount;\\n        capacityNumOfBlocksWindowSize = _numOfBlocksWindowSize;\\n        emit SetOverallCapacityEvent(_currency, _availableAmount, _numOfBlocksWindowSize);\\n    }\\n\\n    function getOverallCapacity()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (capacityCurrency, capacityAvailableAmount, capacityNumOfBlocksWindowSize);\\n    }\\n\\n    modifier allowedCaller() {\\n        require((ISecurityMatrix(smx).isAllowdCaller(address(this), _msgSender())) || (_msgSender() == owner()), \\\"allowedCaller\\\");\\n        _;\\n    }\\n\\n    function prepareBuyCover(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        uint256[] memory usedAmounts,\\n        uint256[] memory totalAmounts,\\n        uint256 allTotalAmount,\\n        address[] memory currencies,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 premiumAmount,\\n            uint256[] memory helperParameters,\\n            uint256 discountPercentX10000,\\n            uint256[] memory insurRewardAmounts\\n        )\\n    {\\n        require(products.length == durationInDays.length, \\\"GPCHK: 1\\\");\\n        require(products.length == amounts.length, \\\"GPCHK: 2\\\");\\n        require(ICoverConfig(cfg).isValidCurrency(currencies[0]) && ICoverConfig(cfg).isValidCurrency(currencies[1]), \\\"GPCHK: 3\\\");\\n        require(owner != address(0), \\\"GPCHK: 4\\\");\\n        require(address(uint160(referralCode)) != address(0), \\\"GPCHK: 5\\\");\\n\\n        // calculate total amounts and total weights\\n        helperParameters = new uint256[](2);\\n        for (uint256 i = 0; i < products.length; i++) {\\n            uint256 productId = products[i];\\n            uint256 coverDuration = durationInDays[i];\\n            uint256 coverAmount = amounts[i];\\n            helperParameters[0] = helperParameters[0].add(coverAmount);\\n            helperParameters[1] = helperParameters[1].add(coverAmount.mul(coverDuration).mul(ICoverQuotationData(quotationData).getUnitCost(productId)));\\n        }\\n\\n        // calculate the cover premium amount\\n        (premiumAmount, discountPercentX10000) = ICoverQuotation(quotation).getPremium(products, durationInDays, amounts, usedAmounts, totalAmounts, allTotalAmount, currencies[0]);\\n        premiumAmount = IExchangeRate(exchangeRate).getTokenToTokenAmount(currencies[0], currencies[1], premiumAmount);\\n        require(premiumAmount > 0, \\\"GPCHK: 6\\\");\\n\\n        // calculate the cover owner and referral INSUR reward amounts\\n        require(rewardPercentages.length == 2, \\\"GPCHK: 7\\\");\\n        insurRewardAmounts = new uint256[](2);\\n        uint256 premiumAmount2Insur = IExchangeRate(exchangeRate).getTokenToTokenAmount(currencies[1], insur, premiumAmount);\\n        if (premiumAmount2Insur > 0 && owner != address(uint160(referralCode))) {\\n            // calculate the Cover Owner INSUR Reward Amount\\n            uint256 coverOwnerRewardPctg = CoverLib.getRewardPctg(cfg, rewardPercentages[0]);\\n            insurRewardAmounts[0] = CoverLib.getRewardAmount(premiumAmount2Insur, coverOwnerRewardPctg);\\n            // calculate the Referral INSUR Reward Amount\\n            uint256 referralRewardPctg = IReferralProgram(referralProgram).getRewardPctg(Constant.REFERRALREWARD_COVER, rewardPercentages[1]);\\n            insurRewardAmounts[1] = IReferralProgram(referralProgram).getRewardAmount(Constant.REFERRALREWARD_COVER, premiumAmount2Insur, referralRewardPctg);\\n        }\\n\\n        // check the overall capacity\\n        if (capacityCurrency != address(0)) {\\n            uint256 occuipedCapacityAmount = IExchangeRate(exchangeRate).getTokenToTokenAmount(currencies[0], capacityCurrency, helperParameters[0]);\\n            uint256 totalOccupiedCapacityAmount = capacityNumOfBlocksWindowSize.add(lastWindowStartBlockNumber) <= block.number ? occuipedCapacityAmount : occuipedCapacityAmount.add(lastWindowSoldCapacityAmount);\\n            require(totalOccupiedCapacityAmount <= capacityAvailableAmount, \\\"GPCHK: 8\\\");\\n        }\\n\\n        return (premiumAmount, helperParameters, discountPercentX10000, insurRewardAmounts);\\n    }\\n\\n    event BuyCoverEventV3(address indexed currency, address indexed owner, uint256 coverId, uint256 productId, uint256 durationInDays, uint256 extendedClaimDays, uint256 coverAmount, address indexed premiumCurrency, uint256 estimatedPremiumAmount, uint256 coverStatus, uint256 delayEffectiveDays);\\n\\n    event BuyCoverOwnerRewardEventV2(address indexed owner, uint256 rewardPctg, uint256 insurRewardAmt);\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        address premiumCurrency,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters\\n    ) external override allowedCaller {\\n        // check and update the overall capacity amount\\n        if (capacityCurrency != address(0)) {\\n            uint256 occuipedCapacityAmount = IExchangeRate(exchangeRate).getTokenToTokenAmount(currency, capacityCurrency, helperParameters[0]);\\n            if (capacityNumOfBlocksWindowSize.add(lastWindowStartBlockNumber) <= block.number) {\\n                lastWindowStartBlockNumber = block.number;\\n                lastWindowSoldCapacityAmount = occuipedCapacityAmount;\\n            } else {\\n                lastWindowSoldCapacityAmount = lastWindowSoldCapacityAmount.add(occuipedCapacityAmount);\\n            }\\n            require(lastWindowSoldCapacityAmount <= capacityAvailableAmount, \\\"CPBC: 1\\\");\\n        }\\n        // check and get the reward percentages if there is a valid referral code\\n        uint256[] memory rewardPctgs = new uint256[](2);\\n        if (owner != address(uint160(referralCode))) {\\n            uint256 premiumAmount2Insur = IExchangeRate(exchangeRate).getTokenToTokenAmount(premiumCurrency, insur, premiumAmount);\\n            // distribute the cover owner reward\\n            rewardPctgs[0] = CoverLib.getRewardPctg(cfg, helperParameters[2]);\\n            uint256 ownerRewardAmount = CoverLib.processCoverOwnerReward(data, owner, premiumAmount2Insur, rewardPctgs[0]);\\n            emit BuyCoverOwnerRewardEventV2(owner, rewardPctgs[0], ownerRewardAmount);\\n            // distribute the referral reward if the referral address is not the owner address\\n            rewardPctgs[1] = IReferralProgram(referralProgram).getRewardPctg(Constant.REFERRALREWARD_COVER, helperParameters[3]);\\n            IReferralProgram(referralProgram).processReferralReward(address(uint160(referralCode)), owner, Constant.REFERRALREWARD_COVER, premiumAmount2Insur, rewardPctgs[1]);\\n        }\\n        // create the expanded cover records (one per each cover item)\\n        _createCovers(owner, currency, premiumCurrency, premiumAmount, products, durationInDays, amounts, helperParameters, rewardPctgs);\\n    }\\n\\n    function _createCovers(\\n        address owner,\\n        address currency,\\n        address premiumCurrency,\\n        uint256 premiumAmount,\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        uint256[] memory helperParameters,\\n        uint256[] memory rewardPctgs\\n    ) internal {\\n        uint256 cumPremiumAmount = 0;\\n        for (uint256 index = 0; index < products.length; ++index) {\\n            uint256 estimatedPremiumAmount = 0;\\n            if (index == products.length.sub(1)) {\\n                estimatedPremiumAmount = premiumAmount.sub(cumPremiumAmount);\\n            } else {\\n                uint256 currentWeight = amounts[index].mul(durationInDays[index]).mul(ICoverQuotationData(quotationData).getUnitCost(products[index]));\\n                estimatedPremiumAmount = premiumAmount.mul(currentWeight).div(helperParameters[1]);\\n                cumPremiumAmount = cumPremiumAmount.add(estimatedPremiumAmount);\\n            }\\n            _createOneCover(owner, products[index], durationInDays[index], currency, amounts[index], premiumCurrency, estimatedPremiumAmount, rewardPctgs);\\n        }\\n    }\\n\\n    function _createOneCover(\\n        address owner,\\n        uint256 productId,\\n        uint256 durationInDays,\\n        address currency,\\n        uint256 amount,\\n        address premiumCurrency,\\n        uint256 estimatedPremiumAmount,\\n        uint256[] memory rewardPctgs\\n    ) internal {\\n        uint256 beginTimestamp = block.timestamp.add(IProduct(product).getProductDelayEffectiveDays(productId) * 1 days); // solhint-disable-line not-rely-on-time\\n        uint256 endTimestamp = beginTimestamp.add(durationInDays * 1 days);\\n        uint256 nextCoverId = ICoverData(data).increaseCoverCount(owner);\\n        ICoverData(data).setNewCoverDetails(owner, nextCoverId, productId, amount, currency, premiumCurrency, estimatedPremiumAmount, beginTimestamp, endTimestamp, endTimestamp.add(ICoverConfig(cfg).getMaxClaimDurationInDaysAfterExpired() * 1 days), Constant.COVERSTATUS_ACTIVE);\\n\\n        if (rewardPctgs[0] > 0) {\\n            ICoverData(data).setCoverRewardPctg(owner, nextCoverId, rewardPctgs[0]);\\n        }\\n\\n        if (rewardPctgs[1] > 0) {\\n            ICoverData(data).setCoverReferralRewardPctg(owner, nextCoverId, rewardPctgs[1]);\\n        }\\n\\n        uint256 delayEffectiveDays = IProduct(product).getProductDelayEffectiveDays(productId);\\n        emit BuyCoverEventV3(currency, owner, nextCoverId, productId, durationInDays, ICoverConfig(cfg).getMaxClaimDurationInDaysAfterExpired(), amount, premiumCurrency, estimatedPremiumAmount, Constant.COVERSTATUS_ACTIVE, delayEffectiveDays);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/secmatrix/ISecurityMatrix.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ISecurityMatrix {\\n    function isAllowdCaller(address _callee, address _caller) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/Math.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\n// a library for performing various math operations\\nlibrary Math {\\n    using SafeMathUpgradeable for uint256;\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x < y ? y : x;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y.div(2).add(1);\\n            while (x < z) {\\n                z = x;\\n                x = (y.div(x).add(x)).div(2);\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // power private function\\n    function pow(uint256 _base, uint256 _exponent) internal pure returns (uint256) {\\n        if (_exponent == 0) {\\n            return 1;\\n        } else if (_exponent == 1) {\\n            return _base;\\n        } else if (_base == 0 && _exponent != 0) {\\n            return 0;\\n        } else {\\n            uint256 z = _base;\\n            for (uint256 i = 1; i < _exponent; i++) {\\n                z = z.mul(_base);\\n            }\\n            return z;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Constant.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nlibrary Constant {\\n    // the standard 10**18 Amount Multiplier\\n    uint256 public constant MULTIPLIERX10E18 = 10**18;\\n\\n    // the valid ETH and DAI addresses (Rinkeby, TBD: Mainnet)\\n    address public constant BCNATIVETOKENADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // product status enumerations\\n    uint256 public constant PRODUCTSTATUS_ENABLED = 1;\\n    uint256 public constant PRODUCTSTATUS_DISABLED = 2;\\n\\n    // the cover status enumerations\\n    uint256 public constant COVERSTATUS_ACTIVE = 0;\\n    uint256 public constant COVERSTATUS_EXPIRED = 1;\\n    uint256 public constant COVERSTATUS_CLAIMINPROGRESS = 2;\\n    uint256 public constant COVERSTATUS_CLAIMDONE = 3;\\n    uint256 public constant COVERSTATUS_CANCELLED = 4;\\n\\n    // the claim status enumerations\\n    uint256 public constant CLAIMSTATUS_SUBMITTED = 0;\\n    uint256 public constant CLAIMSTATUS_INVESTIGATING = 1;\\n    uint256 public constant CLAIMSTATUS_PREPAREFORVOTING = 2;\\n    uint256 public constant CLAIMSTATUS_VOTING = 3;\\n    uint256 public constant CLAIMSTATUS_VOTINGCOMPLETED = 4;\\n    uint256 public constant CLAIMSTATUS_ABDISCRETION = 5;\\n    uint256 public constant CLAIMSTATUS_COMPLAINING = 6;\\n    uint256 public constant CLAIMSTATUS_COMPLAININGCOMPLETED = 7;\\n    uint256 public constant CLAIMSTATUS_ACCEPTED = 8;\\n    uint256 public constant CLAIMSTATUS_REJECTED = 9;\\n    uint256 public constant CLAIMSTATUS_PAYOUTREADY = 10;\\n    uint256 public constant CLAIMSTATUS_PAID = 11;\\n\\n    // the voting outcome status enumerations\\n    uint256 public constant OUTCOMESTATUS_NONE = 0;\\n    uint256 public constant OUTCOMESTATUS_ACCEPTED = 1;\\n    uint256 public constant OUTCOMESTATUS_REJECTED = 2;\\n\\n    // the referral reward type\\n    uint256 public constant REFERRALREWARD_NONE = 0;\\n    uint256 public constant REFERRALREWARD_COVER = 1;\\n    uint256 public constant REFERRALREWARD_STAKING = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/cover/ICoverConfig.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICoverConfig {\\n    function getAllValidCurrencyArray() external view returns (address[] memory);\\n\\n    function isValidCurrency(address currency) external view returns (bool);\\n\\n    function getMinDurationInDays() external view returns (uint256);\\n\\n    function getMaxDurationInDays() external view returns (uint256);\\n\\n    function getMinAmountOfCurrency(address currency) external view returns (uint256);\\n\\n    function getMaxAmountOfCurrency(address currency) external view returns (uint256);\\n\\n    function getCoverConfigDetails()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function getMaxClaimDurationInDaysAfterExpired() external view returns (uint256);\\n\\n    function getInsurTokenRewardPercentX10000() external view returns (uint256);\\n\\n    function getCancelCoverFeeRateX10000() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/cover/ICoverData.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICoverData {\\n    function getCoverCount(address owner) external view returns (uint256);\\n\\n    function increaseCoverCount(address owner) external returns (uint256);\\n\\n    function setNewCoverDetails(\\n        address owner,\\n        uint256 coverId,\\n        uint256 productId,\\n        uint256 amount,\\n        address currency,\\n        address premiumCurrency,\\n        uint256 premiumAmount,\\n        uint256 beginTimestamp,\\n        uint256 endTimestamp,\\n        uint256 maxClaimableTimestamp,\\n        uint256 coverStatus\\n    ) external;\\n\\n    function getCoverBeginTimestamp(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverBeginTimestamp(\\n        address owner,\\n        uint256 coverId,\\n        uint256 timestamp\\n    ) external;\\n\\n    function getCoverEndTimestamp(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverEndTimestamp(\\n        address owner,\\n        uint256 coverId,\\n        uint256 timestamp\\n    ) external;\\n\\n    function getCoverMaxClaimableTimestamp(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverMaxClaimableTimestamp(\\n        address owner,\\n        uint256 coverId,\\n        uint256 timestamp\\n    ) external;\\n\\n    function getCoverProductId(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverProductId(\\n        address owner,\\n        uint256 coverId,\\n        uint256 productId\\n    ) external;\\n\\n    function getCoverCurrency(address owner, uint256 coverId) external view returns (address);\\n\\n    function setCoverCurrency(\\n        address owner,\\n        uint256 coverId,\\n        address currency\\n    ) external;\\n\\n    function getCoverAmount(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverAmount(\\n        address owner,\\n        uint256 coverId,\\n        uint256 amount\\n    ) external;\\n\\n    function getAdjustedCoverStatus(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverStatus(\\n        address owner,\\n        uint256 coverId,\\n        uint256 coverStatus\\n    ) external;\\n\\n    function getEligibleClaimAmount(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function isValidClaim(\\n        address owner,\\n        uint256 coverId,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function getCoverEstimatedPremiumAmount(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverEstimatedPremiumAmount(\\n        address owner,\\n        uint256 coverId,\\n        uint256 amount\\n    ) external;\\n\\n    function getBuyCoverInsurTokenEarned(address owner) external view returns (uint256);\\n\\n    function increaseBuyCoverInsurTokenEarned(address owner, uint256 amount) external;\\n\\n    function decreaseBuyCoverInsurTokenEarned(address owner, uint256 amount) external;\\n\\n    function getTotalInsurTokenRewardAmount() external view returns (uint256);\\n\\n    function increaseTotalInsurTokenRewardAmount(uint256 amount) external;\\n\\n    function decreaseTotalInsurTokenRewardAmount(uint256 amount) external;\\n\\n    function getCoverRewardPctg(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverRewardPctg(\\n        address owner,\\n        uint256 coverId,\\n        uint256 rewardPctg\\n    ) external;\\n\\n    function getCoverClaimedAmount(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function increaseCoverClaimedAmount(\\n        address owner,\\n        uint256 coverId,\\n        uint256 amount\\n    ) external;\\n\\n    function getCoverReferralRewardPctg(address owner, uint256 coverId) external view returns (uint256);\\n\\n    function setCoverReferralRewardPctg(\\n        address owner,\\n        uint256 coverId,\\n        uint256 referralRewardPctg\\n    ) external;\\n\\n    function getCoverPremiumCurrency(address owner, uint256 coverId) external view returns (address);\\n\\n    function setCoverPremiumCurrency(\\n        address owner,\\n        uint256 coverId,\\n        address premiumCurrency\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cover/ICoverQuotation.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICoverQuotation {\\n    function getNetUnitCosts(\\n        uint256[] memory products,\\n        uint256[] memory usedAmounts,\\n        uint256[] memory totalAmounts,\\n        uint256 allTotalAmount\\n    ) external view returns (uint256[] memory);\\n\\n    function getGrossUnitCosts(\\n        uint256[] memory products,\\n        uint256[] memory usedAmounts,\\n        uint256[] memory totalAmounts,\\n        uint256 allTotalAmount\\n    ) external view returns (uint256[] memory);\\n\\n    function getPremium(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        uint256[] memory usedAmounts,\\n        uint256[] memory totalAmounts,\\n        uint256 allTotalAmount,\\n        address currency\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/cover/ICoverQuotationData.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICoverQuotationData {\\n    function getUnitCost(uint256 productId) external view returns (uint256);\\n\\n    function getDiscountFactorCount() external view returns (uint256);\\n\\n    function getDiscountFactor(uint256 numOfProducts) external view returns (uint256);\\n\\n    function getHighRiskCeilingProductScore() external view returns (uint256);\\n\\n    function getAdjustmentFactorCount() external view returns (uint256);\\n\\n    function getAdjustmentFactor(uint256 highRiskProductCount) external view returns (uint256);\\n\\n    function getTheta1Percent() external view returns (uint256);\\n\\n    function getTheta2Percent() external view returns (uint256);\\n\\n    function getRiskMarginPercent() external view returns (uint256);\\n\\n    function getExpenseMarginPercent() external view returns (uint256);\\n\\n    function getPremiumDiscountPercentX10000() external view returns (uint256);\\n\\n    function getPremiumNumOfDecimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/ICapitalPool.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICapitalPool {\\n    function canBuyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external view returns (bool);\\n\\n    function canBuyCover(uint256 _amount, address _token) external view returns (bool);\\n\\n    function buyCoverPerProduct(\\n        uint256 _productId,\\n        uint256 _amount,\\n        address _token\\n    ) external;\\n\\n    function hasTokenInStakersPool(address _token) external view returns (bool);\\n\\n    function getCapacityInfo() external view returns (uint256, uint256);\\n\\n    function getProductCapacityInfo(uint256[] memory _products)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function getProductCapacityRatio(uint256 _productId) external view returns (uint256);\\n\\n    function getBaseToken() external view returns (address);\\n\\n    function getCoverAmtPPMaxRatio() external view returns (uint256);\\n\\n    function getCoverAmtPPInBaseToken(uint256 _productId) external view returns (uint256);\\n\\n    function settlePaymentForClaim(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _claimId\\n    ) external;\\n\\n    function getStakingPercentageX10000() external view returns (uint256);\\n\\n    function getTVLinBaseToken() external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/IPremiumPool.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IPremiumPool {\\n    function addPremiumAmount(address _token, uint256 _amount) external payable;\\n\\n    function getPremiumPoolAmtInPaymentToken(address _paymentToken) external view returns (uint256);\\n\\n    function settlePayoutFromPremium(\\n        address _paymentToken,\\n        uint256 _settleAmt,\\n        address _claimToSettlementPool\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/IExchangeRate.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IExchangeRate {\\n    function getBaseCurrency() external view returns (address);\\n\\n    function setBaseCurrency(address _currency) external;\\n\\n    function getAllCurrencyArray() external view returns (address[] memory);\\n\\n    function addCurrencies(\\n        address[] memory _currencies,\\n        uint128[] memory _multipliers,\\n        uint128[] memory _rates\\n    ) external;\\n\\n    function removeCurrency(address _currency) external;\\n\\n    function getAllCurrencyRates() external view returns (uint256[] memory);\\n\\n    function updateAllCurrencies(uint128[] memory _rates) external;\\n\\n    function updateCurrency(address _currency, uint128 _rate) external;\\n\\n    function getTokenToTokenAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/referral/IReferralProgram.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IReferralProgram {\\n    function getReferralINSURRewardPctg(uint256 rewardType) external view returns (uint256);\\n\\n    function setReferralINSURRewardPctg(uint256 rewardType, uint256 percent) external;\\n\\n    function getReferralINSURRewardAmount() external view returns (uint256);\\n\\n    function getTotalReferralINSURRewardAmount() external view returns (uint256);\\n\\n    function getRewardPctg(uint256 rewardType, uint256 overwrittenRewardPctg) external view returns (uint256);\\n\\n    function getRewardAmount(\\n        uint256 rewardType,\\n        uint256 baseAmount,\\n        uint256 overwrittenRewardPctg\\n    ) external view returns (uint256);\\n\\n    function processReferralReward(\\n        address referrer,\\n        address referee,\\n        uint256 rewardType,\\n        uint256 baseAmount,\\n        uint256 rewardPctg\\n    ) external;\\n\\n    function unlockRewardByController(address referrer, address to) external returns (uint256);\\n\\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\\n\\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cover/ICoverPurchase.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface ICoverPurchase {\\n    function setOverallCapacity(\\n        address _currency,\\n        uint256 _availableAmount,\\n        uint256 _numOfBlocksWindowSize\\n    ) external;\\n\\n    function getOverallCapacity()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function prepareBuyCover(\\n        uint256[] memory products,\\n        uint256[] memory durationInDays,\\n        uint256[] memory amounts,\\n        uint256[] memory usedAmounts,\\n        uint256[] memory totalAmounts,\\n        uint256 allTotalAmount,\\n        address[] memory currencies,\\n        address owner,\\n        uint256 referralCode,\\n        uint256[] memory rewardPercentages\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256[] memory\\n        );\\n\\n    function buyCover(\\n        uint16[] memory products,\\n        uint16[] memory durationInDays,\\n        uint256[] memory amounts,\\n        address currency,\\n        address owner,\\n        uint256 referralCode,\\n        address premiumCurrency,\\n        uint256 premiumAmount,\\n        uint256[] memory helperParameters\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/product/IProduct.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\ninterface IProduct {\\n    function getProductCount() external view returns (uint256);\\n\\n    function getProductDelayEffectiveDays(uint256 productId) external view returns (uint256);\\n\\n    function getProductScore(uint256 productId) external view returns (uint256);\\n\\n    function getProductStatus(uint256 productId) external view returns (uint256);\\n\\n    function getProductDetails(uint256 productId)\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bytes32,\\n            bytes32,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAllProductDetails()\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            bytes32[] memory,\\n            bytes32[] memory,\\n            bytes32[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/cover/CoverLib.sol\": {\r\n      \"content\": \"/*\\n    Copyright (C) 2020 InsurAce.io\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see http://www.gnu.org/licenses/\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {Constant} from \\\"../common/Constant.sol\\\";\\nimport {ICoverConfig} from \\\"./ICoverConfig.sol\\\";\\nimport {ICoverData} from \\\"./ICoverData.sol\\\";\\nimport {Math} from \\\"../common/Math.sol\\\";\\n\\nlibrary CoverLib {\\n    using SafeMathUpgradeable for uint256;\\n\\n    function getRewardPctg(address coverCfg, uint256 overwrittenRewardPctg) internal view returns (uint256) {\\n        return overwrittenRewardPctg > 0 ? overwrittenRewardPctg : ICoverConfig(coverCfg).getInsurTokenRewardPercentX10000();\\n    }\\n\\n    function getRewardAmount(uint256 premiumAmount2Insur, uint256 rewardPctg) internal pure returns (uint256) {\\n        return rewardPctg <= 10000 ? premiumAmount2Insur.mul(rewardPctg).div(10**4) : 0;\\n    }\\n\\n    function processCoverOwnerReward(\\n        address coverData,\\n        address owner,\\n        uint256 premiumAmount2Insur,\\n        uint256 rewardPctg\\n    ) internal returns (uint256) {\\n        require(rewardPctg <= 10000, \\\"PCORWD: 1\\\");\\n        uint256 rewardAmount = getRewardAmount(premiumAmount2Insur, rewardPctg);\\n        if (rewardAmount > 0) {\\n            ICoverData(coverData).increaseTotalInsurTokenRewardAmount(rewardAmount);\\n            ICoverData(coverData).increaseBuyCoverInsurTokenEarned(owner, rewardAmount);\\n        }\\n        return rewardAmount;\\n    }\\n\\n    function getEarnedPremiumAmount(\\n        address coverData,\\n        address owner,\\n        uint256 coverId,\\n        uint256 premiumAmount\\n    ) internal view returns (uint256) {\\n        return premiumAmount.sub(getUnearnedPremiumAmount(coverData, owner, coverId, premiumAmount));\\n    }\\n\\n    function getUnearnedPremiumAmount(\\n        address coverData,\\n        address owner,\\n        uint256 coverId,\\n        uint256 premiumAmount\\n    ) internal view returns (uint256) {\\n        uint256 unearnedPremAmt = premiumAmount;\\n        uint256 cvAmt = ICoverData(coverData).getCoverAmount(owner, coverId);\\n        uint256 begin = ICoverData(coverData).getCoverBeginTimestamp(owner, coverId);\\n        uint256 end = ICoverData(coverData).getCoverEndTimestamp(owner, coverId);\\n        uint256 claimed = ICoverData(coverData).getCoverClaimedAmount(owner, coverId);\\n        if (claimed > 0) {\\n            unearnedPremAmt = unearnedPremAmt.mul(cvAmt.sub(claimed)).div(cvAmt);\\n        }\\n        uint256 totalRewardPctg = getTotalRewardPctg(coverData, owner, coverId);\\n        if (totalRewardPctg > 0) {\\n            unearnedPremAmt = unearnedPremAmt.mul(uint256(10000).sub(totalRewardPctg)).div(10000);\\n        }\\n        uint256 adjustedNowTimestamp = Math.max(block.timestamp, begin); // solhint-disable-line not-rely-on-time\\n        return unearnedPremAmt.mul(end.sub(adjustedNowTimestamp)).div(end.sub(begin));\\n    }\\n\\n    function getTotalRewardPctg(\\n        address coverData,\\n        address owner,\\n        uint256 coverId\\n    ) internal view returns (uint256) {\\n        return ICoverData(coverData).getCoverRewardPctg(owner, coverId).add(ICoverData(coverData).getCoverReferralRewardPctg(owner, coverId));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extendedClaimDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"premiumCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedPremiumAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverStatus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delayEffectiveDays\",\"type\":\"uint256\"}],\"name\":\"BuyCoverEventV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPctg\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insurRewardAmt\",\"type\":\"uint256\"}],\"name\":\"BuyCoverOwnerRewardEventV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_availableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numOfBlocksWindowSize\",\"type\":\"uint256\"}],\"name\":\"SetOverallCapacityEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"}],\"name\":\"buyCover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacityAvailableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacityCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacityNumOfBlocksWindowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cfg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverallCapacity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insur\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWindowSoldCapacityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWindowStartBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"products\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durationInDays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"allTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPercentages\",\"type\":\"uint256[]\"}],\"name\":\"prepareBuyCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"discountPercentX10000\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"insurRewardAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"product\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quotationData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralProgram\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numOfBlocksWindowSize\",\"type\":\"uint256\"}],\"name\":\"setOverallCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityMatrix\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insurToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverCfgAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverQuotationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverQuotationDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_productAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralProgram\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoverPurchase", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}