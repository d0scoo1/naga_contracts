{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RewardCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport {EventCenterLeveragePositionInterface} from \\\"./interfaces/IEventCenterLeveragePosition.sol\\\";\\nimport {AccountCenterInterface} from \\\"./interfaces/IAccountCenter.sol\\\";\\n\\ncontract RewardCenter is Ownable {\\n\\n\\n    mapping(address => bool) openAccountRewardRecord;\\n\\n    mapping(address => bool) openAccountRewardWhiteList;\\n\\n    mapping(uint256 => bytes32) merkelRoots;\\n\\n    mapping(uint256 => uint256) rewardAmounts;\\n\\n    bytes32 public accumRewardMerkelRoot;\\n\\n    address public rewardToken;\\n    uint256 public rewardAmountPerAccoutOpen;\\n    uint256 public totalOpenAccountRewardReleased;\\n    uint256 public totalPositionRewardReleased;\\n    uint256 public releasedRewardRound;\\n\\n    address public eventCenter;\\n    address public accountCenter;\\n\\n    address public aaveStakedTokenIncentivesController;\\n    address public aaveResolver;\\n\\n    event SetEventCenter(address indexed owner, address indexed eventCenter);\\n    event SetAccountCenter(\\n        address indexed owner,\\n        address indexed accountCenter\\n    );\\n\\n    event SetRewardToken(address indexed owner, address indexed token);\\n\\n    event SetOpenAccountReward(address indexed owner, uint256 amountPerAccout);\\n\\n\\n    event ReleasePositionReward(\\n        address indexed owner,\\n        uint256 epochRound,\\n        bytes32 merkelRoot\\n    );\\n\\n    event ClaimPositionReward(\\n        address indexed EOA,\\n        uint256 epochRound,\\n        uint256 amount\\n    );\\n\\n    event ClaimOpenAccountReward(\\n        address indexed EOA,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    function setEventCenter(address _eventCenter) public onlyOwner {\\n        require(\\n            _eventCenter != address(0),\\n            \\\"CHFRY: EventCenter address should not be 0\\\"\\n        );\\n        eventCenter = _eventCenter;\\n        emit SetEventCenter(msg.sender, eventCenter);\\n    }\\n\\n    function setAccountCenter(address _accountCenter) public onlyOwner {\\n        require(\\n            _accountCenter != address(0),\\n            \\\"CHFRY: EventCenter address should not be 0\\\"\\n        );\\n        accountCenter = _accountCenter;\\n        emit SetAccountCenter(msg.sender, accountCenter);\\n    }\\n\\n    function setRewardToken(address token) public onlyOwner {\\n        require(token != address(0), \\\"CHFRY: Reward Token should not be 0\\\");\\n        rewardToken = token;\\n        emit SetRewardToken(msg.sender, token);\\n    }\\n\\n    function addToWhiteList(address addr) public onlyOwner {\\n        require(addr != address(0), \\\"CHFRY: addr should not be 0\\\");\\n        openAccountRewardWhiteList[addr] = true;\\n    }\\n\\n    function setOpenAccountReward(uint256 _rewardAmountPerAccoutOpen)\\n        public\\n        onlyOwner\\n    {\\n        rewardAmountPerAccoutOpen = _rewardAmountPerAccoutOpen;\\n        emit SetOpenAccountReward(msg.sender, rewardAmountPerAccoutOpen);\\n    }\\n\\n    function claimOpenAccountReward(address EOA, address account) public {\\n        require(\\n            openAccountRewardWhiteList[msg.sender] == true,\\n            \\\"CHFRY: AccountCenter is not in white list\\\"\\n        );\\n        require(\\n            openAccountRewardRecord[account] == false,\\n            \\\"CHFRY: Open Accout reward already claimed\\\"\\n        );\\n        openAccountRewardRecord[account] = true;\\n        require(rewardToken != address(0), \\\"CHFRY: Reward Token not setup\\\");\\n        IERC20(rewardToken).transfer(EOA, rewardAmountPerAccoutOpen);\\n        EventCenterLeveragePositionInterface(eventCenter)\\n            .emitClaimOpenAccountRewardEvent(\\n                EOA,\\n                account,\\n                rewardAmountPerAccoutOpen\\n            );\\n    }\\n\\n    // Postition Reward\\n    function startNewPositionRewardEpoch(uint256 rewardAmount)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            EventCenterLeveragePositionInterface(eventCenter)\\n                .isInRewardEpoch() == false,\\n            \\\"CHFRY: already in reward epoch\\\"\\n        );\\n        EventCenterLeveragePositionInterface(eventCenter).startEpoch(\\n            rewardAmount\\n        );\\n    }\\n\\n    function releasePositionReward(uint256 epochRound, bytes32 merkelRoot)\\n        public\\n        onlyOwner\\n    {\\n        require(merkelRoot != bytes32(0), \\\"CHFRY: merkelRoot should not be 0\\\");\\n        uint256 round = EventCenterLeveragePositionInterface(eventCenter)\\n            .epochRound();\\n        require(epochRound <= round, \\\"CHFRY: this reward round is not start\\\");\\n        if (epochRound == round) {\\n            require(\\n                EventCenterLeveragePositionInterface(eventCenter)\\n                    .isInRewardEpoch() == false,\\n                \\\"CHFRY: this reward round is not end\\\"\\n            );\\n        }\\n        merkelRoots[epochRound] = merkelRoot;\\n        releasedRewardRound = releasedRewardRound + 1;\\n        EventCenterLeveragePositionInterface(eventCenter)\\n            .emitReleasePositionRewardEvent(msg.sender, epochRound, merkelRoot);\\n    }\\n\\n    function claimPositionReward(\\n        uint256 epochRound,\\n        uint256 amount,\\n        bytes32[] calldata proof\\n    ) public {\\n        require(\\n            merkelRoots[epochRound] != bytes32(0),\\n            \\\"CHFRY: this round reward is not released\\\"\\n        );\\n        bytes memory leafData = abi.encodePacked(msg.sender, amount);\\n        require(\\n            MerkleProof.verify(\\n                proof,\\n                merkelRoots[epochRound],\\n                keccak256(leafData)\\n            ) == true,\\n            \\\"CHFRY: MerkleProof Fail\\\"\\n        );\\n        IERC20(rewardToken).transfer(msg.sender, amount);\\n        EventCenterLeveragePositionInterface(eventCenter)\\n            .emitClaimPositionRewardEvent(msg.sender, epochRound, amount);\\n    }\\n\\n    function drainRewardToken(uint256 amount, address to) public onlyOwner {\\n        require(\\n            to != address(0),\\n            \\\"CHFRY: should not drain reward token to address(0)\\\"\\n        );\\n        IERC20(rewardToken).transfer(to, amount);\\n    }\\n\\n    function cleanRewardToken(address to) public onlyOwner {\\n        require(\\n            to != address(0),\\n            \\\"CHFRY: should not drain reward token to address(0)\\\"\\n        );\\n        IERC20(rewardToken).transfer(\\n            msg.sender,\\n            IERC20(rewardToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function latestEpochRound() public view returns (uint256) {\\n        return EventCenterLeveragePositionInterface(eventCenter).epochRound();\\n    }\\n\\n    function inEpoch() public view returns (bool) {\\n        return\\n            EventCenterLeveragePositionInterface(eventCenter).isInRewardEpoch();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEventCenterLeveragePosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface EventCenterLeveragePositionInterface {\\n    // function emitCreateAccountEvent(address EOA, address account) external;\\n\\n    function epochRound() external view returns (uint256);\\n\\n    function emitUseFlashLoanForLeverageEvent(address token, uint256 amount)\\n        external;\\n\\n    function emitOpenLongLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 pay,\\n        uint256 amountTargetToken,\\n        uint256 amountLeverageToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitCloseLongLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 gain,\\n        uint256 amountTargetToken,\\n        uint256 amountFlashLoan,\\n        uint256 amountRepay,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitOpenShortLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 pay,\\n        uint256 amountTargetToken,\\n        uint256 amountLeverageToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitCloseShortLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 gain,\\n        uint256 amountTargetToken,\\n        uint256 amountFlashLoan,\\n        uint256 amountWithDraw,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitAddMarginEvent(\\n        address leverageToken,\\n        uint256 amountLeverageToken\\n    ) external;\\n\\n    function emitRemoveMarginEvent(\\n        address leverageToken,\\n        uint256 amountLeverageToken\\n    ) external;\\n\\n    function startEpoch(uint256 _rewardAmount) external;\\n\\n    function isInRewardEpoch() external view returns (bool);\\n\\n    function emitWithDrawEvent(address token, uint256 amount) external;\\n\\n    function emitRepayEvent(address token, uint256 amount) external;\\n\\n    function emitReleasePositionRewardEvent(\\n        address owner,\\n        uint256 epochRound,\\n        bytes32 merkelRoot\\n    ) external;\\n\\n    function emitClaimPositionRewardEvent(\\n        address EOA,\\n        uint256 epochRound,\\n        uint256 amount\\n    ) external;\\n\\n    function emitClaimOpenAccountRewardEvent(\\n        address EOA,\\n        address account,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccountCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AccountCenterInterface {\\n    function accountCount() external view returns (uint256);\\n\\n    function accountTypeCount() external view returns (uint256);\\n\\n    function createAccount(uint256 accountTypeID)\\n        external\\n        returns (address _account);\\n\\n    function getAccount(uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account);\\n\\n    function getEOA(address account)\\n        external\\n        view\\n        returns (address payable _eoa);\\n\\n    function isSmartAccount(address _address)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function isSmartAccountofTypeN(address _address, uint256 accountTypeID)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function getAccountCountOfTypeN(uint256 accountTypeID)\\n        external\\n        view\\n        returns (uint256 count);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"EOA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimOpenAccountReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"EOA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPositionReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkelRoot\",\"type\":\"bytes32\"}],\"name\":\"ReleasePositionReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountCenter\",\"type\":\"address\"}],\"name\":\"SetAccountCenter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eventCenter\",\"type\":\"address\"}],\"name\":\"SetEventCenter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerAccout\",\"type\":\"uint256\"}],\"name\":\"SetOpenAccountReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetRewardToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aaveResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveStakedTokenIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumRewardMerkelRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EOA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimOpenAccountReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimPositionReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cleanRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drainRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestEpochRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochRound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkelRoot\",\"type\":\"bytes32\"}],\"name\":\"releasePositionReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedRewardRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmountPerAccoutOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountCenter\",\"type\":\"address\"}],\"name\":\"setAccountCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eventCenter\",\"type\":\"address\"}],\"name\":\"setEventCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmountPerAccoutOpen\",\"type\":\"uint256\"}],\"name\":\"setOpenAccountReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"startNewPositionRewardEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenAccountRewardReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionRewardReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardCenter", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}