{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/MoonForceLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IMoonForceSwapPair.sol\\\";\\nimport \\\"./interfaces/IERCBurn.sol\\\";\\nimport \\\"./interfaces/IMoonForceSwapFactory.sol\\\";\\nimport \\\"./interfaces/IMigrator.sol\\\";\\n\\ncontract MoonForceLocker is Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMoonForceSwapFactory public moonForceFactory;\\n\\n  struct UserInfo {\\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\\n  }\\n\\n  struct TokenLock {\\n    uint256 lockDate; // the date the token was locked\\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\\n    uint256 initialAmount; // the initial lock amount\\n    uint256 unlockDate; // the date the token can be withdrawn\\n    uint256 lockID; // lockID nonce per MoonForce pair\\n    address owner;\\n  }\\n\\n  mapping(address => UserInfo) private users;\\n\\n  EnumerableSet.AddressSet private lockedTokens;\\n  mapping(address => TokenLock[]) public tokenLocks; //map MoonForce pair to all its locks\\n  \\n  struct FeeStruct {\\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\\n    IERCBurn secondaryFeeToken; // UNCX or UNCL\\n    uint256 secondaryTokenFee; // optional, UNCX or UNCL\\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\\n    uint256 liquidityFee; // fee on MoonForce liquidity tokens\\n    uint256 referralPercent; // fee for referrals\\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\\n  }\\n    \\n  FeeStruct public gFees;\\n  EnumerableSet.AddressSet private feeWhitelist;\\n  \\n  address payable devaddr;\\n  \\n  IMigrator migrator;\\n\\n  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\\n  event onWithdraw(address lpToken, uint256 amount);\\n\\n  constructor(IMoonForceSwapFactory _moonForceFactory) public {\\n    devaddr = msg.sender;\\n    gFees.referralPercent = 250; // 25%\\n    gFees.ethFee = 1e18;\\n    gFees.secondaryTokenFee = 100e18;\\n    gFees.secondaryTokenDiscount = 200; // 20%\\n    gFees.liquidityFee = 10; // 1%\\n    gFees.referralHold = 10e18;\\n    gFees.referralDiscount = 100; // 10%\\n    moonForceFactory = _moonForceFactory;\\n  }\\n  \\n  function setDev(address payable _devaddr) public onlyOwner {\\n    devaddr = _devaddr;\\n  }\\n  \\n  /**\\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to moonForce v3\\n   */\\n  function setMigrator(IMigrator _migrator) public onlyOwner {\\n    migrator = _migrator;\\n  }\\n  \\n  function setSecondaryFeeToken(address _secondaryFeeToken) public onlyOwner {\\n    gFees.secondaryFeeToken = IERCBurn(_secondaryFeeToken);\\n  }\\n  \\n  /**\\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\\n   */\\n  function setReferralTokenAndHold(IERCBurn _referralToken, uint256 _hold) public onlyOwner {\\n    gFees.referralToken = _referralToken;\\n    gFees.referralHold = _hold;\\n  }\\n  \\n  function setFees(uint256 _referralPercent, uint256 _referralDiscount, uint256 _ethFee, uint256 _secondaryTokenFee, uint256 _secondaryTokenDiscount, uint256 _liquidityFee) public onlyOwner {\\n    gFees.referralPercent = _referralPercent;\\n    gFees.referralDiscount = _referralDiscount;\\n    gFees.ethFee = _ethFee;\\n    gFees.secondaryTokenFee = _secondaryTokenFee;\\n    gFees.secondaryTokenDiscount = _secondaryTokenDiscount;\\n    gFees.liquidityFee = _liquidityFee;\\n  }\\n  \\n  /**\\n   * @notice whitelisted accounts dont pay flatrate fees on locking\\n   */\\n  function whitelistFeeAccount(address _user, bool _add) public onlyOwner {\\n    if (_add) {\\n      feeWhitelist.add(_user);\\n    } else {\\n      feeWhitelist.remove(_user);\\n    }\\n  }\\n\\n  /**\\n   * @notice Creates a new lock\\n   * @param _lpToken the MoonForce token address\\n   * @param _amount amount of LP tokens to lock\\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\\n   * @param _referral the referrer address if any or address(0) for none\\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on MoonForce tokens\\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\\n   */\\n  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable nonReentrant {\\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\\n    require(_amount > 0, 'INSUFFICIENT');\\n\\n    // ensure this pair is a MoonForce pair by querying the factory\\n    IMoonForceSwapPair lpair = IMoonForceSwapPair(address(_lpToken));\\n    address factoryPairAddress = moonForceFactory.getPair(lpair.token0(), lpair.token1());\\n    require(factoryPairAddress == address(_lpToken), 'NOT ONE_FI LP');\\n\\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\\n    \\n    if (_referral != address(0) && address(gFees.referralToken) != address(0)) {\\n      require(gFees.referralToken.balanceOf(_referral) >= gFees.referralHold, 'INADEQUATE BALANCE');\\n    }\\n    \\n    // flatrate fees\\n    if (!feeWhitelist.contains(msg.sender)) {\\n      if (_fee_in_eth) { // charge fee in eth\\n        uint256 ethFee = gFees.ethFee;\\n        if (_referral != address(0)) {\\n          ethFee = ethFee.mul(1000 - gFees.referralDiscount).div(1000);\\n        }\\n        require(msg.value == ethFee, 'FEE NOT MET');\\n        uint256 devFee = ethFee;\\n        if (ethFee != 0 && _referral != address(0)) { // referral fee\\n          uint256 referralFee = devFee.mul(gFees.referralPercent).div(1000);\\n          _referral.transfer(referralFee);\\n          devFee = devFee.sub(referralFee);\\n        }\\n        devaddr.transfer(devFee);\\n      } else { // charge fee in token\\n        uint256 burnFee = gFees.secondaryTokenFee;\\n        if (_referral != address(0)) {\\n          burnFee = burnFee.mul(1000 - gFees.referralDiscount).div(1000);\\n        }\\n        TransferHelper.safeTransferFrom(address(gFees.secondaryFeeToken), address(msg.sender), address(this), burnFee);\\n        if (gFees.referralPercent != 0 && _referral != address(0)) { // referral fee\\n          uint256 referralFee = burnFee.mul(gFees.referralPercent).div(1000);\\n          TransferHelper.safeTransfer(address(gFees.secondaryFeeToken), _referral, referralFee);\\n          burnFee = burnFee.sub(referralFee);\\n        }\\n        gFees.secondaryFeeToken.burn(burnFee);\\n      }\\n    } else if (msg.value > 0){\\n      // refund eth if a whitelisted member sent it by mistake\\n      msg.sender.transfer(msg.value);\\n    }\\n    \\n    // percent fee\\n    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\\n    if (!_fee_in_eth && !feeWhitelist.contains(msg.sender)) { // fee discount for large lockers using secondary token\\n      liquidityFee = liquidityFee.mul(1000 - gFees.secondaryTokenDiscount).div(1000);\\n    }\\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\\n    uint256 amountLocked = _amount.sub(liquidityFee);\\n\\n    TokenLock memory token_lock;\\n    token_lock.lockDate = block.timestamp;\\n    token_lock.amount = amountLocked;\\n    token_lock.initialAmount = amountLocked;\\n    token_lock.unlockDate = _unlock_date;\\n    token_lock.lockID = tokenLocks[_lpToken].length;\\n    token_lock.owner = _withdrawer;\\n\\n    // record the lock for the MoonForcepair\\n    tokenLocks[_lpToken].push(token_lock);\\n    lockedTokens.add(_lpToken);\\n\\n    // record the lock for the user\\n    UserInfo storage user = users[_withdrawer];\\n    user.lockedTokens.add(_lpToken);\\n    uint256[] storage user_locks = user.locksForToken[_lpToken];\\n    user_locks.push(token_lock.lockID);\\n    \\n    emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\\n  }\\n  \\n  /**\\n   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n   */\\n  function relock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _unlock_date) external nonReentrant {\\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\\n    \\n    uint256 liquidityFee = userLock.amount.mul(gFees.liquidityFee).div(1000);\\n    uint256 amountLocked = userLock.amount.sub(liquidityFee);\\n    \\n    userLock.amount = amountLocked;\\n    userLock.unlockDate = _unlock_date;\\n\\n    // send MoonForce fee to dev address\\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\\n  }\\n  \\n  /**\\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n   */\\n  function withdraw (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\\n    require(_amount > 0, 'ZERO WITHDRAWL');\\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    require(userLock.unlockDate < block.timestamp, 'NOT YET');\\n    userLock.amount = userLock.amount.sub(_amount);\\n    \\n    // clean user storage\\n    if (userLock.amount == 0) {\\n      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\\n      userLocks[_index] = userLocks[userLocks.length-1];\\n      userLocks.pop();\\n      if (userLocks.length == 0) {\\n        users[msg.sender].lockedTokens.remove(_lpToken);\\n      }\\n    }\\n    \\n    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\\n    emit onWithdraw(_lpToken, _amount);\\n  }\\n  \\n  /**\\n   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\\n   */\\n  function incrementLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\\n    require(_amount > 0, 'ZERO AMOUNT');\\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    \\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\\n    \\n    // send MoonForce fee to dev address\\n    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\\n    uint256 amountLocked = _amount.sub(liquidityFee);\\n    \\n    userLock.amount = userLock.amount.add(amountLocked);\\n    \\n    emit onDeposit(_lpToken, msg.sender, amountLocked, userLock.lockDate, userLock.unlockDate);\\n  }\\n  \\n  /**\\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\\n   * and withdraw a smaller portion\\n   */\\n  function splitLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external payable nonReentrant {\\n    require(_amount > 0, 'ZERO AMOUNT');\\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    \\n    require(msg.value == gFees.ethFee, 'FEE NOT MET');\\n    devaddr.transfer(gFees.ethFee);\\n    \\n    userLock.amount = userLock.amount.sub(_amount);\\n    \\n    TokenLock memory token_lock;\\n    token_lock.lockDate = userLock.lockDate;\\n    token_lock.amount = _amount;\\n    token_lock.initialAmount = _amount;\\n    token_lock.unlockDate = userLock.unlockDate;\\n    token_lock.lockID = tokenLocks[_lpToken].length;\\n    token_lock.owner = msg.sender;\\n\\n    // record the lock for the MoonForcepair\\n    tokenLocks[_lpToken].push(token_lock);\\n\\n    // record the lock for the user\\n    UserInfo storage user = users[msg.sender];\\n    uint256[] storage user_locks = user.locksForToken[_lpToken];\\n    user_locks.push(token_lock.lockID);\\n  }\\n  \\n  /**\\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\\n   */\\n  function transferLockOwnership (address _lpToken, uint256 _index, uint256 _lockID, address payable _newOwner) external {\\n    require(msg.sender != _newOwner, 'OWNER');\\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    \\n    // record the lock for the new Owner\\n    UserInfo storage user = users[_newOwner];\\n    user.lockedTokens.add(_lpToken);\\n    uint256[] storage user_locks = user.locksForToken[_lpToken];\\n    user_locks.push(transferredLock.lockID);\\n    \\n    // remove the lock from the old owner\\n    uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\\n    userLocks[_index] = userLocks[userLocks.length-1];\\n    userLocks.pop();\\n    if (userLocks.length == 0) {\\n      users[msg.sender].lockedTokens.remove(_lpToken);\\n    }\\n    transferredLock.owner = _newOwner;\\n  }\\n  \\n  /**\\n   * @notice migrates liquidity to moonForce new version\\n   */\\n  function migrate (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\\n    require(address(migrator) != address(0), \\\"NOT SET\\\");\\n    require(_amount > 0, 'ZERO MIGRATION');\\n    \\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\\n    userLock.amount = userLock.amount.sub(_amount);\\n    \\n    // clean user storage\\n    if (userLock.amount == 0) {\\n      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\\n      userLocks[_index] = userLocks[userLocks.length-1];\\n      userLocks.pop();\\n      if (userLocks.length == 0) {\\n        users[msg.sender].lockedTokens.remove(_lpToken);\\n      }\\n    }\\n    \\n    TransferHelper.safeApprove(_lpToken, address(migrator), _amount);\\n    migrator.migrate(_lpToken, _amount, userLock.unlockDate, msg.sender);\\n  }\\n  \\n  function getNumLocksForToken (address _lpToken) external view returns (uint256) {\\n    return tokenLocks[_lpToken].length;\\n  }\\n  \\n  function getNumLockedTokens () external view returns (uint256) {\\n    return lockedTokens.length();\\n  }\\n  \\n  function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\\n    return lockedTokens.at(_index);\\n  }\\n  \\n  // user functions\\n  function getUserNumLockedTokens (address _user) external view returns (uint256) {\\n    UserInfo storage user = users[_user];\\n    return user.lockedTokens.length();\\n  }\\n  \\n  function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\\n    UserInfo storage user = users[_user];\\n    return user.lockedTokens.at(_index);\\n  }\\n  \\n  function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\\n    UserInfo storage user = users[_user];\\n    return user.locksForToken[_lpToken].length;\\n  }\\n  \\n  function getUserLockForTokenAtIndex (address _user, address _lpToken, uint256 _index) external view \\n  returns (uint256, uint256, uint256, uint256, uint256, address) {\\n    uint256 lockID = users[_user].locksForToken[_lpToken][_index];\\n    TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\\n    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\\n  }\\n  \\n  // whitelist\\n  function getWhitelistedUsersLength () external view returns (uint256) {\\n    return feeWhitelist.length();\\n  }\\n  \\n  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\\n    return feeWhitelist.at(_index);\\n  }\\n  \\n  function getUserWhitelistStatus (address _user) external view returns (bool) {\\n    return feeWhitelist.contains(_user);\\n  }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/interfaces/IMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMigrator {\\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/interfaces/IMoonForceSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IMoonForceSwapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, bool supportsTokenFee) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/interfaces/IERCBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERCBurn {\\n    function burn(uint256 _amount) external;\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/interfaces/IMoonForceSwapPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IMoonForceSwapPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\\n    with the addition of a transfer function to send eth or an erc20 token\\n*/\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n    \\n    // sends ETH or an erc20 token\\n    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\\n        if (!isERC20) {\\n            (bool success, /*memory data*/) = to.call{value: value}(\\\"\\\");\\n            require(success, 'TransferHelper: TRANSFER_FAILED');\\n        } else {\\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n        }\\n    }\\n}\"\r\n    },\r\n    \"MoonFORCE/MoonFORCE-contracts/ILO/contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMoonForceSwapFactory\",\"name\":\"_moonForceFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERCBurn\",\"name\":\"secondaryFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondaryTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryTokenDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralPercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IERCBurn\",\"name\":\"referralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralHold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockForTokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedUserAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_fee_in_eth\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonForceFactory\",\"outputs\":[{\"internalType\":\"contract IMoonForceSwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryTokenDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERCBurn\",\"name\":\"_referralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hold\",\"type\":\"uint256\"}],\"name\":\"setReferralTokenAndHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secondaryFeeToken\",\"type\":\"address\"}],\"name\":\"setSecondaryFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"splitLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"whitelistFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonForceLocker", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000a2f8f1fab81300c48208dc0ae540c6675d19f4cd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}