{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-05-04\r\n*/\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.4;\r\n\r\n/// @notice Kali DAO share manager interface\r\ninterface IKaliShareManager {\r\n    function mintShares(address to, uint256 amount) external payable;\r\n\r\n    function burnShares(address from, uint256 amount) external payable;\r\n}\r\n\r\n/// @notice Gas optimized reentrancy protection for smart contracts\r\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\r\n/// License-Identifier: AGPL-3.0-only\r\nabstract contract ReentrancyGuard {\r\n    error Reentrancy();\r\n    \r\n    uint256 private locked = 1;\r\n\r\n    modifier nonReentrant() {\r\n        if (locked != 1) revert Reentrancy();\r\n        \r\n        locked = 2;\r\n        _;\r\n        locked = 1;\r\n    }\r\n}\r\n\r\n/// @notice Kali DAO share manager extension\r\ncontract KaliShareManager is ReentrancyGuard {\r\n    /// -----------------------------------------------------------------------\r\n    /// Events\r\n    /// -----------------------------------------------------------------------\r\n\r\n    event ExtensionSet(\r\n        address indexed dao,\r\n        address[] managers,\r\n        bool[] approvals\r\n    );\r\n    event ExtensionCalled(\r\n        address indexed dao,\r\n        address indexed manager,\r\n        bytes[] updates\r\n    );\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Errors\r\n    /// -----------------------------------------------------------------------\r\n\r\n    error NoArrayParity();\r\n    error Forbidden();\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Mgmt Storage\r\n    /// -----------------------------------------------------------------------\r\n\r\n    mapping(address => mapping(address => bool)) public management;\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Mgmt Settings\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function setExtension(bytes calldata extensionData) external {\r\n        (address[] memory managers, bool[] memory approvals) = abi.decode(\r\n            extensionData,\r\n            (address[], bool[])\r\n        );\r\n\r\n        if (managers.length != approvals.length) revert NoArrayParity();\r\n\r\n        for (uint256 i; i < managers.length; ) {\r\n            management[msg.sender][managers[i]] = approvals[i];\r\n            // cannot realistically overflow\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit ExtensionSet(msg.sender, managers, approvals);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Mgmt Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function callExtension(address dao, bytes[] calldata extensionData)\r\n        external\r\n        nonReentrant\r\n    {\r\n        if (!management[dao][msg.sender]) revert Forbidden();\r\n\r\n        for (uint256 i; i < extensionData.length; ) {\r\n            (\r\n                address account,\r\n                uint256 amount,\r\n                bool mint\r\n            ) = abi.decode(extensionData[i], (address, uint256, bool));\r\n\r\n            if (mint) {\r\n                IKaliShareManager(dao).mintShares(\r\n                    account,\r\n                    amount\r\n                );\r\n            } else {\r\n                IKaliShareManager(dao).burnShares(\r\n                    account,\r\n                    amount\r\n                );\r\n            }\r\n            // cannot realistically overflow\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit ExtensionCalled(dao, msg.sender, extensionData);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArrayParity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"updates\",\"type\":\"bytes[]\"}],\"name\":\"ExtensionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"approvals\",\"type\":\"bool[]\"}],\"name\":\"ExtensionSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"extensionData\",\"type\":\"bytes[]\"}],\"name\":\"callExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"management\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"extensionData\",\"type\":\"bytes\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KaliShareManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54a2e557c4f06f30ad9075b6db398ff05e3e92026aa63ef8b80ecac279f4cc78"}]}