{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/vault/YieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {VersionedInitializable} from '../../protocol/libraries/sturdy-upgradeability/VersionedInitializable.sol';\\nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\\nimport {IPriceOracleGetter} from '../../interfaces/IPriceOracleGetter.sol';\\nimport {ISwapRouter} from '../../interfaces/ISwapRouter.sol';\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IERC20Detailed} from '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\\nimport {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {TransferHelper} from '../libraries/helpers/TransferHelper.sol';\\nimport {UniswapAdapter} from '../libraries/swap/UniswapAdapter.sol';\\nimport {CurveswapAdapter} from '../libraries/swap/CurveswapAdapter.sol';\\n\\n/**\\n * @title YieldManager\\n * @notice yield distributor by swapping from assets to stable coin\\n * @author Sturdy\\n **/\\n\\ncontract YieldManager is VersionedInitializable, Ownable {\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct AssetYield {\\n    address asset;\\n    uint256 amount;\\n  }\\n\\n  // the list of the available reserves, structured as a mapping for gas savings reasons\\n  mapping(uint256 => address) internal _assetsList;\\n  mapping(address => bool) internal _assetManaged;\\n  uint256 internal _assetsCount;\\n\\n  ILendingPoolAddressesProvider internal _addressesProvider;\\n\\n  uint256 private constant REVISION = 0x1;\\n\\n  address public _exchangeToken;\\n\\n  // tokenIn -> tokenOut -> Curve Pool Address\\n  mapping(address => mapping(address => address)) internal _curvePools;\\n\\n  uint256 private constant UNISWAP_FEE = 10000; // 1%\\n\\n  /**\\n   * @dev Emitted on setExchangeToken()\\n   * @param _token The address of token being used as an exchange token\\n   */\\n  event NewExchangeToken(address _token);\\n\\n  /**\\n   * @dev Emitted on registerAsset()\\n   * @param _asset The address of reward asset\\n   */\\n  event RegisterAsset(address _asset);\\n\\n  /**\\n   * @dev Emitted on unregisterAsset()\\n   * @param _asset The address of asset being removed from reward token list\\n   */\\n  event UnregisterAsset(address _asset);\\n\\n  /**\\n   * @dev Emitted on setCurvePool()\\n   * @param _tokenIn The address of token being swapped\\n   * @param _tokenOut The address of token being received\\n   * @param _pool The address of Curve Pool being used for swapping\\n   */\\n  event AddCurveSwapPool(address _tokenIn, address _tokenOut, address _pool);\\n\\n  modifier onlyAdmin() {\\n    require(_addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyYieldProcessor() {\\n    require(\\n      _addressesProvider.getAddress('YIELD_PROCESSOR') == msg.sender,\\n      Errors.CALLER_NOT_YIELD_PROCESSOR\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Function is invoked by the proxy contract when the Vault contract is deployed.\\n   * @param _provider The address of the provider\\n   **/\\n  function initialize(ILendingPoolAddressesProvider _provider) external initializer {\\n    _addressesProvider = _provider;\\n  }\\n\\n  function setExchangeToken(address _token) external payable onlyAdmin {\\n    require(_token != address(0), Errors.VT_INVALID_CONFIGURATION);\\n    _exchangeToken = _token;\\n\\n    emit NewExchangeToken(_token);\\n  }\\n\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  function registerAsset(address _asset) external payable onlyAdmin {\\n    require(_asset != address(0), Errors.VT_INVALID_CONFIGURATION);\\n    require(_assetManaged[_asset] != true, Errors.VT_INVALID_CONFIGURATION);\\n\\n    _assetsList[_assetsCount] = _asset;\\n    _assetManaged[_asset] = true;\\n    _assetsCount += 1;\\n\\n    emit RegisterAsset(_asset);\\n  }\\n\\n  function unregisterAsset(uint256 _index) external payable onlyAdmin {\\n    uint256 count = _assetsCount;\\n    require(_index < count, Errors.VT_INVALID_CONFIGURATION);\\n\\n    address _asset = _assetsList[_index];\\n    _assetManaged[_asset] = false;\\n\\n    emit UnregisterAsset(_asset);\\n\\n    count -= 1;\\n    if (_index == count) return;\\n\\n    _assetsList[_index] = _assetsList[count];\\n    _assetsCount = count;\\n  }\\n\\n  function getAssetCount() external view returns (uint256) {\\n    return _assetsCount;\\n  }\\n\\n  function getAssetInfo(uint256 _index) external view returns (address) {\\n    return _assetsList[_index];\\n  }\\n\\n  /**\\n   * @dev Function to set Curve Pool address for the swap\\n   * @param _tokenIn The address of token being exchanged\\n   * @param _tokenOut The address of token being received\\n   * @param _pool The address of the Curve pool to use for the swap\\n   */\\n  function setCurvePool(\\n    address _tokenIn,\\n    address _tokenOut,\\n    address _pool\\n  ) external payable onlyAdmin {\\n    require(_tokenIn != address(0), Errors.VT_INVALID_CONFIGURATION);\\n    require(_tokenOut != address(0), Errors.VT_INVALID_CONFIGURATION);\\n    require(_pool != address(0), Errors.VT_INVALID_CONFIGURATION);\\n\\n    _curvePools[_tokenIn][_tokenOut] = _pool;\\n\\n    emit AddCurveSwapPool(_tokenIn, _tokenOut, _pool);\\n  }\\n\\n  /**\\n   * @dev Function to get Curve Pool address for the swap\\n   * @param _tokenIn The address of token being sent\\n   * @param _tokenOut The address of token being received\\n   */\\n  function getCurvePool(address _tokenIn, address _tokenOut) external view returns (address) {\\n    return _curvePools[_tokenIn][_tokenOut];\\n  }\\n\\n  /**\\n   * @dev Distribute the yield of assets to suppliers.\\n   *      1. convert asset to exchange token(for now it's USDC) via Uniswap\\n   *      2. convert exchange token to other stables via Curve\\n   *      3. deposit to pool for suppliers\\n   * @param _offset assets array's start offset.\\n   * @param _count assets array's count when perform distribution.\\n   * @param _slippage The slippage of the swap 1% = 100\\n   * @param _paths The swapping path of uniswap\\n   **/\\n  function distributeYield(\\n    uint256 _offset,\\n    uint256 _count,\\n    uint256 _slippage,\\n    UniswapAdapter.Path[] calldata _paths\\n  ) external payable onlyYieldProcessor {\\n    require(_paths.length == _count, Errors.VT_SWAP_PATH_LENGTH_INVALID);\\n\\n    address token = _exchangeToken;\\n    ILendingPoolAddressesProvider provider = _addressesProvider;\\n\\n    // 1. convert from asset to exchange token via uniswap\\n    for (uint256 i; i < _count; ++i) {\\n      address asset = _assetsList[_offset + i];\\n      require(asset != address(0), Errors.UL_INVALID_INDEX);\\n      uint256 amount = IERC20Detailed(asset).balanceOf(address(this));\\n      UniswapAdapter.swapExactTokensForTokens(provider, asset, token, amount, _paths[i], _slippage);\\n    }\\n    uint256 exchangedAmount = IERC20Detailed(token).balanceOf(address(this));\\n\\n    // 2. convert from exchange token to other stable assets via curve swap\\n    AssetYield[] memory assetYields = _getAssetYields(exchangedAmount, provider);\\n\\n    _depositAssetYields(assetYields, provider, token, _slippage);\\n  }\\n\\n  /**\\n   * @dev deposit Yields to pool for suppliers\\n   **/\\n  function _depositAssetYields(\\n    AssetYield[] memory _assetYields,\\n    ILendingPoolAddressesProvider _provider,\\n    address _token,\\n    uint256 _slippage\\n  ) internal {\\n    uint256 length = _assetYields.length;\\n    for (uint256 i; i < length; ++i) {\\n      if (_assetYields[i].amount > 0) {\\n        uint256 amount;\\n\\n        if (_assetYields[i].asset == _token) {\\n          amount = _assetYields[i].amount;\\n        } else {\\n          address pool = _curvePools[_token][_assetYields[i].asset];\\n          require(pool != address(0), Errors.VT_INVALID_CONFIGURATION);\\n          amount = CurveswapAdapter.swapExactTokensForTokens(\\n            _provider,\\n            pool,\\n            _token,\\n            _assetYields[i].asset,\\n            _assetYields[i].amount,\\n            _slippage\\n          );\\n        }\\n        // 3. deposit Yield to pool for suppliers\\n        address lendingPool = _provider.getLendingPool();\\n        IERC20(_assetYields[i].asset).safeApprove(lendingPool, 0);\\n        IERC20(_assetYields[i].asset).safeApprove(lendingPool, amount);\\n        ILendingPool(lendingPool).depositYield(_assetYields[i].asset, amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the list of asset and asset's yield amount\\n   **/\\n  function _getAssetYields(uint256 _totalYieldAmount, ILendingPoolAddressesProvider provider)\\n    internal\\n    view\\n    returns (AssetYield[] memory)\\n  {\\n    // Get total borrowing asset volume and volumes and assets\\n    (\\n      uint256 totalVolume,\\n      uint256[] memory volumes,\\n      address[] memory assets,\\n      uint256 length\\n    ) = ILendingPool(provider.getLendingPool()).getBorrowingAssetAndVolumes();\\n\\n    if (totalVolume == 0) return new AssetYield[](0);\\n\\n    AssetYield[] memory assetYields = new AssetYield[](length);\\n    uint256 extraYieldAmount = _totalYieldAmount;\\n\\n    for (uint256 i; i < length; ++i) {\\n      assetYields[i].asset = assets[i];\\n      if (i == length - 1) {\\n        // without calculation, set remained extra amount\\n        assetYields[i].amount = extraYieldAmount;\\n      } else {\\n        // Distribute yieldAmount based on percent of asset volume\\n        assetYields[i].amount = _totalYieldAmount.percentMul(\\n          (volumes[i] * PercentageMath.PERCENTAGE_FACTOR) / totalVolume\\n        );\\n        extraYieldAmount -= assetYields[i].amount;\\n      }\\n    }\\n\\n    return assetYields;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Sturdy, inspiration from Aave\\n * @notice Defines the error messages emitted by the different contracts of the Sturdy protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string internal constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string internal constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string internal constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string internal constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string internal constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string internal constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string internal constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string internal constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string internal constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string internal constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string internal constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string internal constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string internal constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string internal constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string internal constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string internal constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string internal constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string internal constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string internal constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string internal constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string internal constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string internal constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string internal constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string internal constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string internal constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string internal constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string internal constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string internal constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string internal constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string internal constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string internal constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string internal constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string internal constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string internal constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string internal constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string internal constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string internal constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string internal constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string internal constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string internal constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string internal constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string internal constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string internal constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string internal constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string internal constant MATH_ADDITION_OVERFLOW = '49';\\n  string internal constant MATH_DIVISION_BY_ZERO = '50';\\n  string internal constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string internal constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string internal constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string internal constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string internal constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string internal constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string internal constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string internal constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string internal constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string internal constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string internal constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string internal constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string internal constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string internal constant RC_INVALID_LTV = '67';\\n  string internal constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string internal constant RC_INVALID_LIQ_BONUS = '69';\\n  string internal constant RC_INVALID_DECIMALS = '70';\\n  string internal constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string internal constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string internal constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string internal constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string internal constant UL_INVALID_INDEX = '77';\\n  string internal constant LP_NOT_CONTRACT = '78';\\n  string internal constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string internal constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string internal constant VT_COLLATERAL_DEPOSIT_REQUIRE_ETH = '81'; //Only accept ETH for collateral deposit\\n  string internal constant VT_COLLATERAL_DEPOSIT_INVALID = '82'; //Collateral deposit failed\\n  string internal constant VT_LIQUIDITY_DEPOSIT_INVALID = '83'; //Only accept USDC, USDT, DAI for liquidity deposit\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID = '84'; //Collateral withdraw failed\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID_AMOUNT = '85'; //Collateral withdraw has not enough amount\\n  string internal constant VT_CONVERT_ASSET_BY_CURVE_INVALID = '86'; //Convert asset by curve invalid\\n  string internal constant VT_PROCESS_YIELD_INVALID = '87'; //Processing yield is invalid\\n  string internal constant VT_TREASURY_INVALID = '88'; //Treasury is invalid\\n  string internal constant LP_ATOKEN_INIT_INVALID = '89'; //aToken invalid init\\n  string internal constant VT_FEE_TOO_BIG = '90'; //Fee is too big\\n  string internal constant VT_COLLATERAL_DEPOSIT_VAULT_UNAVAILABLE = '91';\\n  string internal constant LP_LIQUIDATION_CONVERT_FAILED = '92';\\n  string internal constant VT_DEPLOY_FAILED = '93'; // Vault deploy failed\\n  string internal constant VT_INVALID_CONFIGURATION = '94'; // Invalid vault configuration\\n  string internal constant VL_OVERFLOW_MAX_RESERVE_CAPACITY = '95'; // overflow max capacity of reserve\\n  string internal constant VT_WITHDRAW_AMOUNT_MISMATCH = '96'; // not performed withdraw 100%\\n  string internal constant VT_SWAP_MISMATCH_RETURNED_AMOUNT = '97'; //Returned amount is not enough\\n  string internal constant CALLER_NOT_YIELD_PROCESSOR = '98'; // 'The caller must be the pool admin'\\n  string internal constant VT_EXTRA_REWARDS_INDEX_INVALID = '99'; // Invalid extraRewards index\\n  string internal constant VT_SWAP_PATH_LENGTH_INVALID = '100'; // Invalid token or fee length\\n  string internal constant VT_SWAP_PATH_TOKEN_INVALID = '101'; // Invalid token information\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/sturdy-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Sturdy, inspiration from Aave\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the revision number of the contract\\n   * Needs to be defined in the inherited class as a constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns true if and only if the function is running in the constructor\\n   **/\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Sturdy Governance\\n * @author Sturdy, inspiration from Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event IncentiveControllerUpdated(address indexed newAddress);\\n  event IncentiveTokenUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external payable;\\n\\n  function setAddress(bytes32 id, address newAddress) external payable;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external payable;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external payable;\\n\\n  function getIncentiveController() external view returns (address);\\n\\n  function setIncentiveControllerImpl(address incentiveController) external payable;\\n\\n  function getIncentiveToken() external view returns (address);\\n\\n  function setIncentiveTokenImpl(address incentiveToken) external payable;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external payable;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external payable;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external payable;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external payable;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external payable;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositYield(address asset, uint256 amount) external;\\n\\n  function getYield(address asset, uint256 amount) external;\\n\\n  function getTotalBalanceOfAssetPair(address asset) external view returns (uint256, uint256);\\n\\n  function getBorrowingAssetAndVolumes()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256[] memory,\\n      address[] memory,\\n      uint256\\n    );\\n\\n  function registerVault(address _vaultAddress) external payable;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  function withdrawFrom(\\n    address asset,\\n    uint256 amount,\\n    address from,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address yieldAddress,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external payable;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external\\n    payable;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external payable;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external payable;\\n\\n  function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Sturdy price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n  /**\\n   * @dev returns the asset price in ETH\\n   * @param asset the address of the asset\\n   * @return the ETH price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public payable virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Sturdy, inspiration from Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    uint256 halfPercentage = percentage / 2;\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\nlibrary TransferHelper {\\n  /// @notice Transfers tokens from the targeted address to the given destination\\n  /// @notice Errors with 'STF' if transfer fails\\n  /// @param token The contract address of the token to be transferred\\n  /// @param from The originating address from which the tokens will be transferred\\n  /// @param to The destination address of the transfer\\n  /// @param value The amount to be transferred\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\n    );\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n  }\\n\\n  /// @notice Transfers tokens from msg.sender to a recipient\\n  /// @dev Errors with ST if transfer fails\\n  /// @param token The contract address of the token which will be transferred\\n  /// @param to The recipient of the transfer\\n  /// @param value The value of the transfer\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n    );\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n  }\\n\\n  /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n  /// @dev Errors with 'SA' if transfer fails\\n  /// @param token The contract address of the token to be approved\\n  /// @param to The target of the approval\\n  /// @param value The amount of the given token the target will be allowed to spend\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory data) = token.call(\\n      abi.encodeWithSelector(IERC20.approve.selector, to, value)\\n    );\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n  }\\n\\n  /// @notice Transfers ETH to the recipient address\\n  /// @dev Fails with `STE`\\n  /// @param to The destination of the transfer\\n  /// @param value The value to be transferred\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, 'STE');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/swap/UniswapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {ISwapRouter} from '../../../interfaces/ISwapRouter.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {ILendingPoolAddressesProvider} from '../../../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {PercentageMath} from '../../libraries/math/PercentageMath.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\n\\nlibrary UniswapAdapter {\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct Path {\\n    address[] tokens;\\n    uint256[] fees;\\n  }\\n\\n  function swapExactTokensForTokens(\\n    ILendingPoolAddressesProvider addressesProvider,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    Path calldata path,\\n    uint256 slippage // 2% = 200\\n  ) external returns (uint256) {\\n    // Check path is valid\\n    uint256 length = path.tokens.length;\\n    require(length > 1 && length - 1 == path.fees.length, Errors.VT_SWAP_PATH_LENGTH_INVALID);\\n    require(\\n      path.tokens[0] == assetToSwapFrom && path.tokens[length - 1] == assetToSwapTo,\\n      Errors.VT_SWAP_PATH_TOKEN_INVALID\\n    );\\n\\n    // Calculate expected amount of the outbound asset\\n    uint256 minAmountOut = _getMinAmount(\\n      addressesProvider,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      amountToSwap,\\n      slippage\\n    );\\n\\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\\n    address UNISWAP_ROUTER = addressesProvider.getAddress('uniswapRouter');\\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), amountToSwap);\\n\\n    uint256 receivedAmount;\\n    if (length > 2) {\\n      bytes memory _path;\\n\\n      for (uint256 i; i < length - 1; ++i) {\\n        _path = abi.encodePacked(_path, path.tokens[i], uint24(path.fees[i]));\\n      }\\n      _path = abi.encodePacked(_path, assetToSwapTo);\\n\\n      ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n        path: _path,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: amountToSwap,\\n        amountOutMinimum: minAmountOut\\n      });\\n\\n      // Executes the swap.\\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInput(params);\\n    } else {\\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n        tokenIn: assetToSwapFrom,\\n        tokenOut: assetToSwapTo,\\n        fee: uint24(path.fees[0]),\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: amountToSwap,\\n        amountOutMinimum: minAmountOut,\\n        sqrtPriceLimitX96: 0\\n      });\\n\\n      // Executes the swap.\\n      receivedAmount = ISwapRouter(UNISWAP_ROUTER).exactInputSingle(params);\\n    }\\n\\n    require(receivedAmount > 0, Errors.VT_SWAP_MISMATCH_RETURNED_AMOUNT);\\n    require(\\n      IERC20(assetToSwapTo).balanceOf(address(this)) >= receivedAmount,\\n      Errors.VT_SWAP_MISMATCH_RETURNED_AMOUNT\\n    );\\n\\n    return receivedAmount;\\n  }\\n\\n  function _getDecimals(address asset) internal view returns (uint256) {\\n    return IERC20Detailed(asset).decimals();\\n  }\\n\\n  function _getPrice(ILendingPoolAddressesProvider addressesProvider, address asset)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return IPriceOracleGetter(addressesProvider.getPriceOracle()).getAssetPrice(asset);\\n  }\\n\\n  function _getMinAmount(\\n    ILendingPoolAddressesProvider addressesProvider,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    uint256 slippage\\n  ) internal view returns (uint256) {\\n    uint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\\n    uint256 toAssetDecimals = _getDecimals(assetToSwapTo);\\n\\n    uint256 fromAssetPrice = _getPrice(addressesProvider, assetToSwapFrom);\\n    uint256 toAssetPrice = _getPrice(addressesProvider, assetToSwapTo);\\n\\n    uint256 minAmountOut = ((amountToSwap * fromAssetPrice * 10**toAssetDecimals) /\\n      (toAssetPrice * 10**fromAssetDecimals)).percentMul(\\n        PercentageMath.PERCENTAGE_FACTOR - slippage\\n      );\\n\\n    return minAmountOut;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/swap/CurveswapAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {ICurveAddressProvider} from '../../../interfaces/ICurveAddressProvider.sol';\\nimport {ICurveExchange} from '../../../interfaces/ICurveExchange.sol';\\nimport {ILendingPoolAddressesProvider} from '../../../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {PercentageMath} from '../../libraries/math/PercentageMath.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\n\\nlibrary CurveswapAdapter {\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  function swapExactTokensForTokens(\\n    ILendingPoolAddressesProvider addressesProvider,\\n    address poolAddress,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    uint256 slippage // 2% = 200\\n  ) external returns (uint256) {\\n    uint256 minAmountOut = _getMinAmount(\\n      addressesProvider,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      amountToSwap,\\n      slippage\\n    );\\n\\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\\n    address curveAddressProvider = addressesProvider.getAddress('CURVE_ADDRESS_PROVIDER');\\n    address curveExchange = ICurveAddressProvider(curveAddressProvider).get_address(2);\\n\\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), 0);\\n    IERC20(assetToSwapFrom).safeApprove(address(curveExchange), amountToSwap);\\n\\n    uint256 receivedAmount = ICurveExchange(curveExchange).exchange(\\n      poolAddress,\\n      assetToSwapFrom,\\n      assetToSwapTo,\\n      amountToSwap,\\n      minAmountOut,\\n      address(this)\\n    );\\n\\n    require(receivedAmount > 0, Errors.VT_SWAP_MISMATCH_RETURNED_AMOUNT);\\n    uint256 balanceOfAsset;\\n    if (assetToSwapTo == ETH) {\\n      balanceOfAsset = address(this).balance;\\n    } else {\\n      balanceOfAsset = IERC20(assetToSwapTo).balanceOf(address(this));\\n    }\\n    require(balanceOfAsset >= receivedAmount, Errors.VT_SWAP_MISMATCH_RETURNED_AMOUNT);\\n    return receivedAmount;\\n  }\\n\\n  function _getDecimals(address asset) internal view returns (uint256) {\\n    if (asset == ETH) {\\n      return 18;\\n    }\\n    return IERC20Detailed(asset).decimals();\\n  }\\n\\n  function _getPrice(ILendingPoolAddressesProvider addressesProvider, address asset)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    if (asset == ETH) {\\n      return 1e18;\\n    }\\n    return IPriceOracleGetter(addressesProvider.getPriceOracle()).getAssetPrice(asset);\\n  }\\n\\n  function _getMinAmount(\\n    ILendingPoolAddressesProvider addressesProvider,\\n    address assetToSwapFrom,\\n    address assetToSwapTo,\\n    uint256 amountToSwap,\\n    uint256 slippage\\n  ) internal view returns (uint256) {\\n    uint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\\n    uint256 toAssetDecimals = _getDecimals(assetToSwapTo);\\n\\n    uint256 fromAssetPrice = _getPrice(addressesProvider, assetToSwapFrom);\\n    uint256 toAssetPrice = _getPrice(addressesProvider, assetToSwapTo);\\n\\n    uint256 minAmountOut = ((amountToSwap * fromAssetPrice * 10**toAssetDecimals) /\\n      (toAssetPrice * 10**fromAssetDecimals)).percentMul(\\n        PercentageMath.PERCENTAGE_FACTOR - slippage\\n      );\\n\\n    return minAmountOut;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //address of the yield contract\\n    address yieldAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n  function uniswapV3SwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ICurveAddressProvider interface\\n * @notice Interface for the Curve Address Provider.\\n **/\\n\\ninterface ICurveAddressProvider {\\n  function get_address(uint256 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ICurveExchange {\\n  function exchange(\\n    address _pool,\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    uint256 _expected,\\n    address _receiver\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/protocol/libraries/swap/CurveswapAdapter.sol\": {\r\n        \"CurveswapAdapter\": \"0x0701fae0924f30acc9673d69f0274611090926b4\"\r\n      },\r\n      \"contracts/protocol/libraries/swap/UniswapAdapter.sol\": {\r\n        \"UniswapAdapter\": \"0xfe34b244b51fe4972ba827968e0dc4baa6f7575a\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"AddCurveSwapPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"NewExchangeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"RegisterAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"UnregisterAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_exchangeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UniswapAdapter.Path[]\",\"name\":\"_paths\",\"type\":\"tuple[]\"}],\"name\":\"distributeYield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAssetInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getCurvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setCurvePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setExchangeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unregisterAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "YieldManager", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}