{"status": "1", "message": "OK", "result": [{"SourceCode": "// \u5b9a\u4e49\u8bed\u8a00\u548c\u7248\u672c\r\npragma solidity ^0.4.16;\r\n\r\n// \u8c03\u7528\u4eba\u5408\u7ea6\r\ncontract owned {\r\n\r\n    //\u5730\u5740\r\n    address public owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //\u5fc5\u987b\u662f\u81ea\u5df1\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    //\u8f6c\u79fb\u6240\u6709\u6743\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// \u5b9a\u4e49\u4ee4\u724c\u63a5\u6536\u63a5\u53e3\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n// \u5408\u7ea6\u4e3b\u8981\u903b\u8f91\r\ncontract TokenERC20 {\r\n\r\n    // Public variables of the token\r\n    // \u4ee4\u724c\u7684\u516c\u5171\u53d8\u91cf\r\n    \r\n    // \u4ee4\u724c\u7684\u540d\u79f0\r\n    string public name;\r\n\r\n    // \u4ee4\u724c\u7684\u6807\u8bc6\r\n    string public symbol;\r\n\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    // \u5f3a\u70c8\u5efa\u8bae18\u4f4d\u5c0f\u6570\r\n    uint8 public decimals = 18;\r\n    \r\n    // \u603b\u4f9b\u5e94\u91cf\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    // \u521b\u5efa\u4e00\u4e2amap\u4fdd\u5b58\u6240\u6709\u4ee3\u5e01\u6301\u6709\u8005\u7684\u4f59\u989d\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // \u5730\u5740\u914d\u989d\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    // \u8fd9\u5c06\u5728\u533a\u5757\u94fe\u4e0a\u751f\u6210\u5c06\u901a\u77e5\u5ba2\u6237\u7684\u516c\u5171\u4e8b\u4ef6\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    // \u8fd9\u5c06\u5728\u533a\u5757\u94fe\u4e0a\u751f\u6210\u5c06\u901a\u77e5\u5ba2\u6237\u7684\u516c\u5171\u4e8b\u4ef6\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    // \u901a\u77e5\u5ba2\u6237\u9500\u6bc1\u7684\u603b\u91cf\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     * \u6784\u9020\u51fd\u6570\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public {               \r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens \u7ed9\u4ee4\u724c\u521b\u5efa\u8005\u6240\u6709\u521d\u59cb\u5316\u7684\u6570\u91cf\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     * \u5185\u90e8\u8f6c\u8d26\uff0c\u79c1\u6709\u51fd\u6570\uff0c\u5185\u90e8\u8c03\u7528\r\n     */\r\n    function _transfer( address _from, address _to, uint _value ) internal {\r\n\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        // \u68c0\u67e5\u5730\u5740\u683c\u5f0f\r\n        require(_to != 0x0);\r\n\r\n        // Check if the sender has enough\r\n        // \u68c0\u67e5\u8f6c\u8d26\u8005\u662f\u5426\u6709\u8db3\u591ftoken\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        // \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u6700\u5927\u91cf\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        // Subtract from the sender\r\n        // \u8f6c\u51fa\u4eba\u51cf\u5c11\r\n        balanceOf[_from] -= _value;\r\n\r\n        // Add the same to the recipient\r\n        // \u8f6c\u5165\u4eba\u589e\u52a0\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        // \u8be5\u65ad\u8a00\u7528\u4e8e\u4f7f\u7528\u9759\u6001\u5206\u6790\u6765\u67e5\u627e\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff0c\u4ed6\u4eec\u6c38\u8fdc\u4e0d\u5e94\u8be5\u5931\u8d25\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     * \u8f6c\u8d26\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer( address _to, uint256 _value ) public returns (bool success) {\r\n\r\n        //\u8fd9\u91cc\u6ce8\u610f\u53d1\u9001\u8005\u5c31\u662f\u5408\u7ea6\u8c03\u7528\u8005\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     * \u4ece\u53e6\u4e00\u4e2a\u5730\u5740\u8f6c\u79fb\u4e00\u5b9a\u914d\u989d\u7684token\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom( address _from, address _to, uint256 _value ) public returns (bool success) {\r\n\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance \u68c0\u67e5\u4ecefrom\u5730\u5740\u4e2d\u8f6c\u79fb\u4e00\u5b9a\u914d\u989d\u7684token\u5230to\u5730\u5740\r\n\r\n        allowance[_from][msg.sender] -= _value; //\u8f6c\u5165\u5730\u5740\u7684\u6570\u91cf\u51cf\u5c11\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     * \u8bbe\u7f6e\u914d\u989d\u7ed9\u5176\u4ed6\u5730\u5740\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve( address _spender, uint256 _value) public returns (bool success) {\r\n\r\n        allowance[msg.sender][_spender] = _value;   //\u8c03\u7528\u5730\u5740\u7ed9\u6307\u5b9a\u5730\u5740\u4e00\u5b9a\u6570\u91cf\u7684\u914d\u989d\r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     * \u8bbe\u7f6e\u914d\u989d\u7ed9\u5176\u4ed6\u5730\u5740\uff0c\u5e76\u4e14\u89e6\u53d1\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall( address _spender, uint256 _value, bytes _extraData ) public returns (bool success) {\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     * \u9500\u6bc1\u4ee4\u724c\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough \u68c0\u67e5\u9500\u6bc1\u5730\u5740\u4f59\u989d\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender \u8d26\u6237\u91cc\u51cf\u5c11\r\n        totalSupply -= _value;                      // Updates totalSupply \u603b\u4f9b\u5e94\u91cf\u51cf\u5c11\r\n        emit Burn(msg.sender, _value);              // \u9500\u6bc1\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     * \u4ece\u6307\u5b9a\u8d26\u6237\u9500\u6bc1\u4ee4\u724c\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender       \u5730\u5740\r\n     * @param _value the amount of money to burn    \u6570\u91cf\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough \u68c0\u67e5\u4f59\u989d\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance \u68c0\u67e5\u914d\u989d\r\n\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance \r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply \u603b\u4f9b\u5e94\u91cf\u51cf\u5c11\r\n        emit Burn(_from, _value);                           // \u9500\u6bc1\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n// \u9ad8\u7ea7\u7248\u672c\r\ncontract FOMOWINNER is owned, TokenERC20 {\r\n\r\n    // \u9500\u552e\u4ef7\u683c\r\n    uint256 public sellPrice;\r\n\r\n    // \u8d2d\u4e70\u4ef7\u683c\r\n    uint256 public buyPrice;\r\n\r\n    // \u5b9a\u4e49\u51bb\u7ed3\u8d26\u6237\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    // \u51bb\u7ed3\u6d88\u606f\u901a\u77e5\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    // \u6784\u9020\r\n    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    // \u8f6c\u8d26\uff0c\u5185\u90e8\u79c1\u6709\u51fd\u6570\r\n    function _transfer( address _from, address _to, uint _value  ) internal {\r\n        \r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead \u68c0\u67e5\u8f6c\u8d26\u5730\u5740\u683c\u5f0f\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough \u68c0\u67e5\u8f6c\u51fa\u5730\u5740\u4f59\u989d\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows           \u68c0\u67e5\u8f6c\u5165\u91d1\u989d\u4e0d\u80fd\u4e3a\u8d1f\r\n\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen  \u8f6c\u51fa\u5730\u5740\u4e0d\u5728\u51bb\u7ed3\u8d26\u6237\u4e2d\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen \u8f6c\u5165\u5730\u5740\u4e0d\u5728\u51bb\u7ed3\u8d26\u6237\u4e2d\r\n        balanceOf[_from] -= _value;                         // Subtract from the spender  \u8f6c\u51fa\u5730\u5740\u51cf\u5c11\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient \u8f6c\u5165\u5730\u5740\u589e\u52a0\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    /// \u84b8\u53d1\r\n    function mintToken( address target, uint256 mintedAmount ) onlyOwner public {\r\n\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    /// \u51bb\u7ed3\u8d26\u6237\r\n    function freezeAccount( address target, bool freeze ) onlyOwner public { \r\n\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    /// \u8bbe\u7f6e\u4ef7\u683c\uff0c\u9488\u5bf9eth\r\n    function setPrices( uint256 newSellPrice, uint256 newBuyPrice ) onlyOwner public {\r\n\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    /// \u4ece\u5408\u7ea6\u4e2d\u8d2d\u4e70\u4ee4\u724c\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;               // calculates the amount \u8ba1\u7b97\u6536\u5230\u7684eth\u80fd\u6362\u591a\u5c11token\r\n        _transfer(this, msg.sender, amount);              // makes the transfers  token\u8f6c\u8d26\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    /// \u5411\u5408\u7ea6\u5356\u51fa\u4ee4\u724c\r\n    function sell(uint256 amount) public {\r\n        address myAddress = this;\r\n        require(myAddress.balance >= amount * sellPrice); // checks if the contract has enough ether to buy \u68c0\u67e5\u5408\u7ea6\u5730\u5740\u662f\u5426\u6709\u8db3\u591f\u7684eth\r\n        _transfer(msg.sender, this, amount);              // makes the transfers  token\u8f6c\u8d26\r\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks \u5411\u5bf9\u65b9\u53d1\u9001eth\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "FOMOWINNER", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b464f4d4f2057494e4e45520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003464d570000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f2b036e2eef743b36d37b3ad677bb35b0636264992e2f339c03596885c0f67d6"}]}