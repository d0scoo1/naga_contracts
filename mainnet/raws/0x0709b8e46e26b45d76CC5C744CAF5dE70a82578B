{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PWN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.4;\\n\\nimport \\\"./PWNVault.sol\\\";\\nimport \\\"./PWNLOAN.sol\\\";\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PWN is Ownable {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNLOAN public LOAN;\\n    PWNVault public vault;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    // No events nor error defined\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * Constructor\\n     * @dev Establishes a connection with other pre-deployed components\\n     * @dev For the set up to work both PWNLOAN & PWNVault contracts have to called via `.setPWN(PWN.address)`\\n     * @param _PWNL Address of the PWNLOAN contract - defines LOAN tokens\\n     * @param _PWNV Address of the PWNVault contract - holds assets\\n     */\\n    constructor(\\n        address _PWNL,\\n        address _PWNV\\n    ) Ownable() {\\n        LOAN = PWNLOAN(_PWNL);\\n        vault = PWNVault(_PWNV);\\n    }\\n\\n    /**\\n     * revokeOffer\\n     * @notice Lender can use this function to revoke their off-chain offers\\n     * @dev Can be called only from address that signed the offer\\n     * @param _offerHash Offer typed struct hash\\n     * @param _signature Offer typed struct signature\\n     * @return True if successful\\n     */\\n    function revokeOffer(\\n        bytes32 _offerHash,\\n        bytes calldata _signature\\n    ) external returns (bool) {\\n        LOAN.revokeOffer(_offerHash, _signature, msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * createLoan\\n     * @notice Borrower can accept existing signed off-chain offer\\n     * @dev A UI should do an off-chain balance check on the lender side to make sure the call won't throw\\n     * @dev Loan asset has to be an ERC20 token, otherwise will transaction fail\\n     * @param _offer Offer struct with plain offer data. See { PWNLOAN.sol }\\n     * @param _signature Offer typed struct signed by lender\\n     * @return True if successful\\n     */\\n    function createLoan(\\n        PWNLOAN.Offer memory _offer,\\n        bytes memory _signature\\n    ) external returns (bool) {\\n        LOAN.create(_offer, _signature, msg.sender);\\n\\n        MultiToken.Asset memory collateral = MultiToken.Asset(\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offer.collateralId\\n        );\\n\\n        MultiToken.Asset memory LoanAsset = MultiToken.Asset(\\n            _offer.loanAssetAddress,\\n            MultiToken.Category.ERC20,\\n            _offer.loanAmount,\\n            0\\n        );\\n\\n        vault.pull(collateral, msg.sender);\\n        vault.pushFrom(LoanAsset, _offer.lender, msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * createFlexibleLoan\\n     * @notice Borrower can accept existing signed off-chain flexible offer\\n     * @dev A UI should do an off-chain balance check on the lender side to make sure the call won't throw\\n     * @dev LOAN asset has to be an ERC20 token, otherwise will transaction fail\\n     * @param _offer Flexible offer struct with plain flexible offer data. See { PWNLOAN.sol }\\n     * @param _offerValues Concrete values of a flexible offer set by borrower. See { PWNLOAN.sol }\\n     * @param _signature Flexible offer typed struct signed by lender\\n     * @return True if successful\\n     */\\n    function createFlexibleLoan(\\n        PWNLOAN.FlexibleOffer memory _offer,\\n        PWNLOAN.FlexibleOfferValues memory _offerValues,\\n        bytes memory _signature\\n    ) external returns (bool) {\\n        LOAN.createFlexible(_offer, _offerValues, _signature, msg.sender);\\n\\n        MultiToken.Asset memory collateral = MultiToken.Asset(\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offerValues.collateralId\\n        );\\n\\n        MultiToken.Asset memory LoanAsset = MultiToken.Asset(\\n            _offer.loanAssetAddress,\\n            MultiToken.Category.ERC20,\\n            _offerValues.loanAmount,\\n            0\\n        );\\n\\n        vault.pull(collateral, msg.sender);\\n        vault.pushFrom(LoanAsset, _offer.lender, msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * repayLoan\\n     * @notice The borrower can pay back the loan through this function\\n     * @dev The function assumes the asset (and amount to be paid back) to be returned is approved for PWNVault\\n     * @dev The function assumes the borrower has the full amount to be paid back in their account\\n     * @param _loanId LOAN ID of the loan being paid back\\n     * @return True if successful\\n     */\\n    function repayLoan(uint256 _loanId) external returns (bool) {\\n        LOAN.repayLoan(_loanId);\\n\\n        MultiToken.Asset memory LoanAsset = LOAN.getLoanAsset(_loanId);\\n        LoanAsset.amount = LOAN.getLoanRepayAmount(_loanId);\\n\\n        vault.pull(LoanAsset, msg.sender);\\n        vault.push(LOAN.getCollateral(_loanId), LOAN.getBorrower(_loanId));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * claimLoan\\n     * @dev The current LOAN owner can call this function if the loan is expired or paied back\\n     * @param _loanId LOAN ID of the loan to be claimed\\n     * @return True if successful\\n     */\\n    function claimLoan(uint256 _loanId) external returns (bool) {\\n        uint8 status = LOAN.getStatus(_loanId);\\n\\n        LOAN.claim(_loanId, msg.sender);\\n\\n        if (status == 3) {\\n            MultiToken.Asset memory LoanAsset = LOAN.getLoanAsset(_loanId);\\n            LoanAsset.amount = LOAN.getLoanRepayAmount(_loanId);\\n\\n            vault.push(LoanAsset, msg.sender);\\n        } else if (status == 4) {\\n            vault.push(LOAN.getCollateral(_loanId), msg.sender);\\n        } else {\\n            revert(\\\"Invalid status code\\\");\\n        }\\n\\n        LOAN.burn(_loanId, msg.sender);\\n\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/PWNVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.4;\\n\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract PWNVault is Ownable, IERC721Receiver, IERC1155Receiver {\\n    using MultiToken for MultiToken.Asset;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    address public PWN;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyPWN() {\\n        require(msg.sender == PWN, \\\"Caller is not the PWN\\\");\\n        _;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    event VaultPull(MultiToken.Asset asset, address indexed origin);\\n    event VaultPush(MultiToken.Asset asset, address indexed beneficiary);\\n    event VaultPushFrom(MultiToken.Asset asset, address indexed origin, address indexed beneficiary);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * PWN Vault constructor\\n     * @dev this contract holds balances of all locked collateral & paid back loan prior to their rightful claims\\n     * @dev in order for the vault to work it has to have an association with the PWN logic via `.setPWN(PWN.address)`\\n     */\\n    constructor() Ownable() IERC1155Receiver() {\\n    }\\n\\n    /**\\n     * pull\\n     * @dev function accessing an asset and pulling it INTO the vault\\n     * @dev the function assumes a prior token approval was made with the PWNVault.address to be approved\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @return true if successful\\n     */\\n    function pull(MultiToken.Asset memory _asset, address _origin) external onlyPWN returns (bool) {\\n        _asset.transferAssetFrom(_origin, address(this));\\n        emit VaultPull(_asset, _origin);\\n        return true;\\n    }\\n\\n    /**\\n     * push\\n     * @dev function pushing an asset FROM the vault, sending to a defined recipient\\n     * @dev this is used for claiming a paidback loan or defaulted collateral\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @param _beneficiary An address of the recipient of the asset - is set in the PWN logic contract\\n     * @return true if successful\\n     */\\n    function push(MultiToken.Asset memory _asset, address _beneficiary) external onlyPWN returns (bool) {\\n        _asset.transferAsset(_beneficiary);\\n        emit VaultPush(_asset, _beneficiary);\\n        return true;\\n    }\\n\\n    /**\\n     * pushFrom\\n     * @dev function pushing an asset FROM a lender, sending to a borrower\\n     * @dev this function assumes prior approval for the asset to be spend by the borrower address\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @param _origin An address of the lender who is providing the loan asset\\n     * @param _beneficiary An address of the recipient of the asset - is set in the PWN logic contract\\n     * @return true if successful\\n     */\\n    function pushFrom(MultiToken.Asset memory _asset, address _origin, address _beneficiary) external onlyPWN returns (bool) {\\n        _asset.transferAssetFrom(_origin, _beneficiary);\\n        emit VaultPushFrom(_asset, _origin, _beneficiary);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * @return `IERC721Receiver.onERC721Received.selector` if transfer is allowed\\n     */\\n    function onERC721Received(\\n        address /*operator*/,\\n        address /*from*/,\\n        uint256 /*tokenId*/,\\n        bytes calldata /*data*/\\n    ) override external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n    \\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     * To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address /*operator*/,\\n        address /*from*/,\\n        uint256 /*id*/,\\n        uint256 /*value*/,\\n        bytes calldata /*data*/\\n    ) override external pure returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n    \\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated. To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address /*operator*/,\\n        address /*from*/,\\n        uint256[] calldata /*ids*/,\\n        uint256[] calldata /*values*/,\\n        bytes calldata /*data*/\\n    ) override external pure returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * setPWN\\n     * @dev An essential setup function. Has to be called once PWN contract was deployed\\n     * @param _address Identifying the PWN contract\\n     */\\n    function setPWN(address _address) external onlyOwner {\\n        PWN = _address;\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(Ownable).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == this.PWN.selector\\n                            ^ this.pull.selector\\n                            ^ this.push.selector\\n                            ^ this.pushFrom.selector\\n                            ^ this.setPWN.selector; // PWN Vault\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PWNLOAN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.4;\\n\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract PWNLOAN is ERC1155, Ownable {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * Necessary msg.sender for all LOAN related manipulations\\n     */\\n    address public PWN;\\n\\n    /**\\n     * Incremental LOAN ID counter\\n     */\\n    uint256 public id;\\n\\n    /**\\n     * EIP-1271 valid signature magic value\\n     */\\n    bytes4 constant internal EIP1271_VALID_SIGNATURE = 0x1626ba7e;\\n\\n    /**\\n     * EIP-712 offer struct type hash\\n     */\\n    bytes32 constant internal OFFER_TYPEHASH = keccak256(\\n        \\\"Offer(address collateralAddress,uint8 collateralCategory,uint256 collateralAmount,uint256 collateralId,address loanAssetAddress,uint256 loanAmount,uint256 loanYield,uint32 duration,uint40 expiration,address lender,bytes32 nonce)\\\"\\n    );\\n\\n    /**\\n     * EIP-712 flexible offer struct type hash\\n     */\\n    bytes32 constant internal FLEXIBLE_OFFER_TYPEHASH = keccak256(\\n        \\\"FlexibleOffer(address collateralAddress,uint8 collateralCategory,uint256 collateralAmount,bytes32 collateralIdsWhitelistMerkleRoot,address loanAssetAddress,uint256 loanAmountMax,uint256 loanAmountMin,uint256 loanYieldMax,uint32 durationMax,uint32 durationMin,uint40 expiration,address lender,bytes32 nonce)\\\"\\n    );\\n\\n    /**\\n     * Construct defining a LOAN which is an acronym for: ... (TODO)\\n     * @param status 0 == none/dead || 2 == running/accepted offer || 3 == paid back || 4 == expired\\n     * @param borrower Address of the borrower - stays the same for entire lifespan of the token\\n     * @param duration Loan duration in seconds\\n     * @param expiration Unix timestamp (in seconds) setting up the default deadline\\n     * @param collateral Asset used as a loan collateral. Consisting of another `Asset` struct defined in the MultiToken library\\n     * @param asset Asset to be borrowed by lender to borrower. Consisting of another `Asset` struct defined in the MultiToken library\\n     * @param loanRepayAmount Amount of LOAN asset to be repaid\\n     */\\n    struct LOAN {\\n        uint8 status;\\n        address borrower;\\n        uint32 duration;\\n        uint40 expiration;\\n        MultiToken.Asset collateral;\\n        MultiToken.Asset asset;\\n        uint256 loanRepayAmount;\\n    }\\n\\n    /**\\n     * Construct defining an Offer\\n     * @param collateralAddress Address of an asset used as a collateral\\n     * @param collateralCategory Category of an asset used as a collateral (0 == ERC20, 1 == ERC721, 2 == ERC1155)\\n     * @param collateralAmount Amount of tokens used as a collateral, in case of ERC721 should be 1\\n     * @param collateralId Token id of an asset used as a collateral, in case of ERC20 should be 0\\n     * @param loanAssetAddress Address of an asset which is lended to borrower\\n     * @param loanAmount Amount of tokens which is offered as a loan to borrower\\n     * @param loanYield Amount of tokens which acts as a lenders loan interest. Borrower has to pay back borrowed amount + yield.\\n     * @param duration Loan duration in seconds\\n     * @param expiration Offer expiration timestamp in seconds\\n     * @param lender Address of a lender. This address has to sign an offer to be valid.\\n     * @param nonce Additional value to enable identical offers in time. Without it, it would be impossible to make again offer, which was once revoked.\\n     */\\n    struct Offer {\\n        address collateralAddress;\\n        MultiToken.Category collateralCategory;\\n        uint256 collateralAmount;\\n        uint256 collateralId;\\n        address loanAssetAddress;\\n        uint256 loanAmount;\\n        uint256 loanYield;\\n        uint32 duration;\\n        uint40 expiration;\\n        address lender;\\n        bytes32 nonce;\\n    }\\n\\n    /**\\n     * Construct defining an Flexible offer\\n     * @param collateralAddress Address of an asset used as a collateral\\n     * @param collateralCategory Category of an asset used as a collateral (0 == ERC20, 1 == ERC721, 2 == ERC1155)\\n     * @param collateralAmount Amount of tokens used as a collateral, in case of ERC721 should be 1\\n     * @param collateralIdsWhitelistMerkleRoot Root of a merkle tree constructed on array of whitelisted collateral ids\\n     * @param loanAssetAddress Address of an asset which is lended to borrower\\n     * @param loanAmountMax Max amount of tokens which is offered as a loan to borrower\\n     * @param loanAmountMin Min amount of tokens which is offered as a loan to borrower\\n     * @param loanYieldMax Amount of tokens which acts as a lenders loan interest for max duration.\\n     * @param durationMax Max loan duration in seconds\\n     * @param durationMin Min loan duration in seconds\\n     * @param expiration Offer expiration timestamp in seconds\\n     * @param lender Address of a lender. This address has to sign a flexible offer to be valid.\\n     * @param nonce Additional value to enable identical offers in time. Without it, it would be impossible to make again offer, which was once revoked.\\n     */\\n    struct FlexibleOffer {\\n        address collateralAddress;\\n        MultiToken.Category collateralCategory;\\n        uint256 collateralAmount;\\n        bytes32 collateralIdsWhitelistMerkleRoot;\\n        address loanAssetAddress;\\n        uint256 loanAmountMax;\\n        uint256 loanAmountMin;\\n        uint256 loanYieldMax;\\n        uint32 durationMax;\\n        uint32 durationMin;\\n        uint40 expiration;\\n        address lender;\\n        bytes32 nonce;\\n    }\\n\\n    /**\\n     * Construct defining an Flexible offer concrete values\\n     * @param collateralId Selected collateral id to be used as a collateral.\\n     * @param loanAmount Selected loan amount to be borrowed from lender.\\n     * @param duration Selected loan duration. Shorter duration reflexts into smaller loan yield for a lender.\\n     * @param merkleInclusionProof Proof of inclusion, that selected collateral id is whitelisted. This proof should create same hash as the merkle tree root given in flexible offer.\\n     */\\n    struct FlexibleOfferValues {\\n        uint256 collateralId;\\n        uint256 loanAmount;\\n        uint32 duration;\\n        bytes32[] merkleInclusionProof;\\n    }\\n\\n    /**\\n     * Mapping of all LOAN data by loan id\\n     */\\n    mapping (uint256 => LOAN) public LOANs;\\n\\n    /**\\n     * Mapping of revoked offers by offer struct typed hash\\n     */\\n    mapping (bytes32 => bool) public revokedOffers;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    event LOANCreated(uint256 indexed loanId, address indexed lender, bytes32 indexed offerHash);\\n    event OfferRevoked(bytes32 indexed offerHash);\\n    event PaidBack(uint256 loanId);\\n    event LOANClaimed(uint256 loanId);\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyPWN() {\\n        require(msg.sender == PWN, \\\"Caller is not the PWN\\\");\\n        _;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /*\\n     * PWN LOAN constructor\\n     * @dev Creates the PWN LOAN token contract - ERC1155 with extra use case specific features\\n     * @dev Once the PWN contract is set, you'll have to call `this.setPWN(PWN.address)` for this contract to work\\n     * @param _uri Uri to be used for finding the token metadata\\n     */\\n    constructor(string memory _uri) ERC1155(_uri) Ownable() {\\n\\n    }\\n\\n    /**\\n     * All contracts of this section can only be called by the PWN contract itself - once set via `setPWN(PWN.address)`\\n     */\\n\\n    /**\\n     * revokeOffer\\n     * @notice Revoke an offer\\n     * @dev Offer is revoked by lender or when offer is accepted by borrower to prevent accepting it twice\\n     * @param _offerHash Offer typed struct hash\\n     * @param _signature Offer typed struct signature\\n     * @param _sender Address of a message sender (lender)\\n     */\\n    function revokeOffer(\\n        bytes32 _offerHash,\\n        bytes calldata _signature,\\n        address _sender\\n    ) external onlyPWN {\\n        require(ECDSA.recover(_offerHash, _signature) == _sender, \\\"Sender is not an offer signer\\\");\\n        require(revokedOffers[_offerHash] == false, \\\"Offer is already revoked or has been accepted\\\");\\n\\n        revokedOffers[_offerHash] = true;\\n\\n        emit OfferRevoked(_offerHash);\\n    }\\n\\n    /**\\n     * create\\n     * @notice Creates the PWN LOAN token - ERC1155 with extra use case specific features from simple offer\\n     * @dev Contract wallets need to implement EIP-1271 to validate signature on the contract behalf\\n     * @param _offer Offer struct holding plain offer data\\n     * @param _signature Offer typed struct signature signed by lender\\n     * @param _sender Address of a message sender (borrower)\\n     */\\n    function create(\\n        Offer memory _offer,\\n        bytes memory _signature,\\n        address _sender\\n    ) external onlyPWN {\\n        bytes32 offerHash = keccak256(abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\", _eip712DomainSeparator(), hash(_offer)\\n        ));\\n\\n        _checkValidSignature(_offer.lender, offerHash, _signature);\\n        _checkValidOffer(_offer.expiration, offerHash);\\n\\n        revokedOffers[offerHash] = true;\\n\\n        uint256 _id = ++id;\\n\\n        LOAN storage loan = LOANs[_id];\\n        loan.status = 2;\\n        loan.borrower = _sender;\\n        loan.duration = _offer.duration;\\n        loan.expiration = uint40(block.timestamp) + _offer.duration;\\n        loan.collateral = MultiToken.Asset(\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offer.collateralId\\n        );\\n        loan.asset = MultiToken.Asset(\\n            _offer.loanAssetAddress,\\n            MultiToken.Category.ERC20,\\n            _offer.loanAmount,\\n            0\\n        );\\n        loan.loanRepayAmount = _offer.loanAmount + _offer.loanYield;\\n\\n        _mint(_offer.lender, _id, 1, \\\"\\\");\\n\\n        emit LOANCreated(_id, _offer.lender, offerHash);\\n    }\\n\\n    /**\\n     * createFlexible\\n     * @notice Creates the PWN LOAN token - ERC1155 with extra use case specific features from flexible offer\\n     * @dev Contract wallets need to implement EIP-1271 to validate signature on the contract behalf\\n     * @param _offer Flexible offer struct holding plain flexible offer data\\n     * @param _offerValues Concrete values of a flexible offer set by borrower\\n     * @param _signature FlexibleOffer typed struct signature signed by lender\\n     * @param _sender Address of a message sender (borrower)\\n     */\\n    function createFlexible(\\n        FlexibleOffer memory _offer,\\n        FlexibleOfferValues memory _offerValues,\\n        bytes memory _signature,\\n        address _sender\\n    ) external onlyPWN {\\n        bytes32 offerHash = keccak256(abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\", _eip712DomainSeparator(), hash(_offer)\\n        ));\\n\\n        _checkValidSignature(_offer.lender, offerHash, _signature);\\n        _checkValidOffer(_offer.expiration, offerHash);\\n\\n        // Flexible collateral id\\n        if (_offer.collateralIdsWhitelistMerkleRoot != bytes32(0x00)) {\\n            // Whitelisted collateral id\\n            bytes32 merkleTreeLeaf = keccak256(abi.encodePacked(_offerValues.collateralId));\\n            require(MerkleProof.verify(_offerValues.merkleInclusionProof, _offer.collateralIdsWhitelistMerkleRoot, merkleTreeLeaf), \\\"Selected collateral id is not contained in whitelist\\\");\\n        } // else: Any collateral id - collection offer\\n\\n        // Flexible amount\\n        require(_offer.loanAmountMin <= _offerValues.loanAmount && _offerValues.loanAmount <= _offer.loanAmountMax, \\\"Loan amount is not in offered range\\\");\\n\\n        // Flexible duration\\n        require(_offer.durationMin <= _offerValues.duration && _offerValues.duration <= _offer.durationMax, \\\"Loan duration is not in offered range\\\");\\n\\n        revokedOffers[offerHash] = true;\\n\\n        uint256 _id = ++id;\\n\\n        LOAN storage loan = LOANs[_id];\\n        loan.status = 2;\\n        loan.borrower = _sender;\\n        loan.duration = _offerValues.duration;\\n        loan.expiration = uint40(block.timestamp) + _offerValues.duration;\\n        loan.collateral = MultiToken.Asset(\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offerValues.collateralId\\n        );\\n        loan.asset = MultiToken.Asset(\\n            _offer.loanAssetAddress,\\n            MultiToken.Category.ERC20,\\n            _offerValues.loanAmount,\\n            0\\n        );\\n        loan.loanRepayAmount = countLoanRepayAmount(\\n            _offerValues.loanAmount,\\n            _offerValues.duration,\\n            _offer.loanYieldMax,\\n            _offer.durationMax\\n        );\\n\\n        _mint(_offer.lender, _id, 1, \\\"\\\");\\n\\n        emit LOANCreated(_id, _offer.lender, offerHash);\\n    }\\n\\n    /**\\n     * repayLoan\\n     * @notice Function to make proper state transition\\n     * @param _loanId ID of the LOAN which is paid back\\n     */\\n    function repayLoan(uint256 _loanId) external onlyPWN {\\n        require(getStatus(_loanId) == 2, \\\"Loan is not running and cannot be paid back\\\");\\n\\n        LOANs[_loanId].status = 3;\\n\\n        emit PaidBack(_loanId);\\n    }\\n\\n    /**\\n     * claim\\n     * @notice Function that would set the LOAN to the dead state if the token is in paidBack or expired state\\n     * @param _loanId ID of the LOAN which is claimed\\n     * @param _owner Address of the LOAN token owner\\n     */\\n    function claim(\\n        uint256 _loanId,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _loanId) == 1, \\\"Caller is not the loan owner\\\");\\n        require(getStatus(_loanId) >= 3, \\\"Loan can't be claimed yet\\\");\\n\\n        LOANs[_loanId].status = 0;\\n\\n        emit LOANClaimed(_loanId);\\n    }\\n\\n    /**\\n     * burn\\n     * @notice Function that would burn the LOAN token if the token is in dead state\\n     * @param _loanId ID of the LOAN which is burned\\n     * @param _owner Address of the LOAN token owner\\n     */\\n    function burn(\\n        uint256 _loanId,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _loanId) == 1, \\\"Caller is not the loan owner\\\");\\n        require(LOANs[_loanId].status == 0, \\\"Loan can't be burned at this stage\\\");\\n\\n        delete LOANs[_loanId];\\n        _burn(_owner, _loanId, 1);\\n    }\\n\\n    /**\\n     * countLoanRepayAmount\\n     * @notice Count a loan repay amount of flexible offer based on a loan amount and duration.\\n     * @notice The smaller the duration is, the smaller is the lenders yield.\\n     * @notice Loan repay amount is decreasing linearly from maximum duration and is fixing loans APR.\\n     * @param _loanAmount Selected amount of loan asset by borrower\\n     * @param _duration Selected loan duration by borrower\\n     * @param _loanYieldMax Yield for maximum loan duration set by lender in an offer\\n     * @param _durationMax Maximum loan duration set by lender in an offer\\n     */\\n    function countLoanRepayAmount(\\n        uint256 _loanAmount,\\n        uint32 _duration,\\n        uint256 _loanYieldMax,\\n        uint32 _durationMax\\n    ) public pure returns (uint256) {\\n        return _loanAmount + _loanYieldMax * _duration / _durationMax;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  ## VIEW FUNCTIONS                                       *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * getStatus\\n     * @dev used in contract calls & status checks and also in UI for elementary loan status categorization\\n     * @param _loanId LOAN ID checked for status\\n     * @return a status number\\n     */\\n    function getStatus(uint256 _loanId) public view returns (uint8) {\\n        if (LOANs[_loanId].expiration > 0 && LOANs[_loanId].expiration < block.timestamp && LOANs[_loanId].status != 3) {\\n            return 4;\\n        } else {\\n            return LOANs[_loanId].status;\\n        }\\n    }\\n\\n    /**\\n     * getExpiration\\n     * @dev utility function to find out exact expiration time of a particular LOAN\\n     * @dev for simple status check use `this.getStatus(did)` if `status == 4` then LOAN has expired\\n     * @param _loanId LOAN ID to be checked\\n     * @return unix time stamp in seconds\\n     */\\n    function getExpiration(uint256 _loanId) external view returns (uint40) {\\n        return LOANs[_loanId].expiration;\\n    }\\n\\n    /**\\n     * getDuration\\n     * @dev utility function to find out loan duration period of a particular LOAN\\n     * @param _loanId LOAN ID to be checked\\n     * @return loan duration period in seconds\\n     */\\n    function getDuration(uint256 _loanId) external view returns (uint32) {\\n        return LOANs[_loanId].duration;\\n    }\\n\\n    /**\\n     * getBorrower\\n     * @dev utility function to find out a borrower address of a particular LOAN\\n     * @param _loanId LOAN ID to be checked\\n     * @return address of the borrower\\n     */\\n    function getBorrower(uint256 _loanId) external view returns (address) {\\n        return LOANs[_loanId].borrower;\\n    }\\n\\n    /**\\n     * getCollateral\\n     * @dev utility function to find out collateral asset of a particular LOAN\\n     * @param _loanId LOAN ID to be checked\\n     * @return Asset construct - for definition see { MultiToken.sol }\\n     */\\n    function getCollateral(uint256 _loanId) external view returns (MultiToken.Asset memory) {\\n        return LOANs[_loanId].collateral;\\n    }\\n\\n    /**\\n     * getLoanAsset\\n     * @dev utility function to find out loan asset of a particular LOAN\\n     * @param _loanId LOAN ID to be checked\\n     * @return Asset construct - for definition see { MultiToken.sol }\\n     */\\n    function getLoanAsset(uint256 _loanId) external view returns (MultiToken.Asset memory) {\\n        return LOANs[_loanId].asset;\\n    }\\n\\n    /**\\n     * getLoanRepayAmount\\n     * @dev utility function to find out loan repay amount of a particular LOAN\\n     * @param _loanId LOAN ID to be checked\\n     * @return Amount of loan asset to be repaid\\n     */\\n    function getLoanRepayAmount(uint256 _loanId) external view returns (uint256) {\\n        return LOANs[_loanId].loanRepayAmount;\\n    }\\n\\n    /**\\n     * isRevoked\\n     * @dev utility function to find out if offer is revoked\\n     * @param _offerHash Offer typed struct hash\\n     * @return True if offer is revoked\\n     */\\n    function isRevoked(bytes32 _offerHash) external view returns (bool) {\\n        return revokedOffers[_offerHash];\\n    }\\n\\n    /*--------------------------------*|\\n    |*  ## SETUP FUNCTIONS            *|\\n    |*--------------------------------*/\\n\\n    /**\\n     * setPWN\\n     * @dev An essential setup function. Has to be called once PWN contract was deployed\\n     * @param _address Identifying the PWN contract\\n     */\\n    function setPWN(address _address) external onlyOwner {\\n        PWN = _address;\\n    }\\n\\n    /**\\n     * setUri\\n     * @dev An non-essential setup function. Can be called to adjust the LOAN token metadata URI\\n     * @param _newUri setting the new origin of LOAN metadata\\n     */\\n    function setUri(string memory _newUri) external onlyOwner {\\n        _setURI(_newUri);\\n    }\\n\\n    /*--------------------------------*|\\n    |*  ## PRIVATE FUNCTIONS          *|\\n    |*--------------------------------*/\\n\\n    /**\\n     * _eip712DomainSeparator\\n     * @notice Compose EIP712 domain separator\\n     * @dev Domain separator is composing to prevent repay attack in case of an Ethereum fork\\n     */\\n    function _eip712DomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(\\\"PWN\\\")),\\n            keccak256(bytes(\\\"1\\\")),\\n            block.chainid,\\n            address(this)\\n        ));\\n    }\\n\\n    /**\\n     * _checkValidSignature\\n     * @notice\\n     * @param _lender Address of a lender. This address has to sign an offer to be valid.\\n     * @param _offerHash Hash of an offer EIP-712 data struct\\n     * @param _signature Signed offer data\\n     */\\n    function _checkValidSignature(\\n        address _lender,\\n        bytes32 _offerHash,\\n        bytes memory _signature\\n    ) private view {\\n        if (_lender.code.length > 0) {\\n            require(IERC1271(_lender).isValidSignature(_offerHash, _signature) == EIP1271_VALID_SIGNATURE, \\\"Signature on behalf of contract is invalid\\\");\\n        } else {\\n            require(ECDSA.recover(_offerHash, _signature) == _lender, \\\"Lender address didn't sign the offer\\\");\\n        }\\n    }\\n\\n    /**\\n     * _checkValidOffer\\n     * @notice\\n     * @param _expiration Offer expiration timestamp in seconds\\n     * @param _offerHash Hash of an offer EIP-712 data struct\\n     */\\n    function _checkValidOffer(\\n        uint40 _expiration,\\n        bytes32 _offerHash\\n    ) private view {\\n        require(_expiration == 0 || block.timestamp < _expiration, \\\"Offer is expired\\\");\\n        require(revokedOffers[_offerHash] == false, \\\"Offer is revoked or has been accepted\\\");\\n    }\\n\\n    /**\\n     * hash offer\\n     * @notice Hash offer struct according to EIP-712\\n     * @param _offer Offer struct to be hashed\\n     * @return Offer struct hash\\n     */\\n    function hash(Offer memory _offer) private pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OFFER_TYPEHASH,\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offer.collateralId,\\n            _offer.loanAssetAddress,\\n            _offer.loanAmount,\\n            _offer.loanYield,\\n            _offer.duration,\\n            _offer.expiration,\\n            _offer.lender,\\n            _offer.nonce\\n        ));\\n    }\\n\\n    /**\\n     * hash offer\\n     * @notice Hash flexible offer struct according to EIP-712\\n     * @param _offer FlexibleOffer struct to be hashed\\n     * @return FlexibleOffer struct hash\\n     */\\n    function hash(FlexibleOffer memory _offer) private pure returns (bytes32) {\\n        // Need to divide encoding into smaller parts because of \\\"Stack to deep\\\" error\\n\\n        bytes memory encodedOfferCollateralData = abi.encode(\\n            _offer.collateralAddress,\\n            _offer.collateralCategory,\\n            _offer.collateralAmount,\\n            _offer.collateralIdsWhitelistMerkleRoot\\n        );\\n\\n        bytes memory encodedOfferLoanData = abi.encode(\\n            _offer.loanAssetAddress,\\n            _offer.loanAmountMax,\\n            _offer.loanAmountMin,\\n            _offer.loanYieldMax\\n        );\\n\\n        bytes memory encodedOfferOtherData = abi.encode(\\n            _offer.durationMax,\\n            _offer.durationMin,\\n            _offer.expiration,\\n            _offer.lender,\\n            _offer.nonce\\n        );\\n\\n        return keccak256(abi.encodePacked(\\n            FLEXIBLE_OFFER_TYPEHASH,\\n            encodedOfferCollateralData,\\n            encodedOfferLoanData,\\n            encodedOfferOtherData\\n        ));\\n    }\\n}\\n\"\r\n    },\r\n    \"@pwnfinance/multitoken/contracts/MultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nlibrary MultiToken {\\n\\n    /**\\n     * @title Category\\n     * @dev enum representation Asset category\\n     */\\n    enum Category {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    /**\\n     * @title Asset\\n     * @param assetAddress Address of the token contract defining the asset\\n     * @param category Corresponding asset category\\n     * @param amount Amount of fungible tokens or 0 -> 1\\n     * @param id TokenID of an NFT or 0\\n     */\\n    struct Asset {\\n        address assetAddress;\\n        Category category;\\n        uint256 amount;\\n        uint256 id;\\n    }\\n\\n    /**\\n     * transferAsset\\n     * @dev wrapping function for transfer calls on various token interfaces\\n     * @param _asset Struct defining all necessary context of a token\\n     * @param _dest Destination address\\n     */\\n    function transferAsset(Asset memory _asset, address _dest) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.transfer(_dest, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.safeTransferFrom(address(this), _dest, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            if (_asset.amount == 0) {\\n                _asset.amount = 1;\\n            }\\n            token.safeTransferFrom(address(this), _dest, _asset.id, _asset.amount, \\\"\\\");\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * transferAssetFrom\\n     * @dev wrapping function for transfer From calls on various token interfaces\\n     * @param _asset Struct defining all necessary context of a token\\n     * @param _source Account/address that provided the allowance\\n     * @param _dest Destination address\\n     */\\n    function transferAssetFrom(Asset memory _asset, address _source, address _dest) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.transferFrom(_source, _dest, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.safeTransferFrom(_source, _dest, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            if (_asset.amount == 0) {\\n                _asset.amount = 1;\\n            }\\n            token.safeTransferFrom(_source, _dest, _asset.id, _asset.amount, \\\"\\\");\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * balanceOf\\n     * @dev wrapping function for checking balances on various token interfaces\\n     * @param _asset Struct defining all necessary context of a token\\n     * @param _target Target address to be checked\\n     */\\n    function balanceOf(Asset memory _asset, address _target) internal view returns (uint256) {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            return token.balanceOf(_target);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            if (token.ownerOf(_asset.id) == _target) {\\n                return 1;\\n            } else {\\n                return 0;\\n            }\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            return token.balanceOf(_target, _asset.id);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * approveAsset\\n     * @dev wrapping function for approve calls on various token interfaces\\n     * @param _asset Struct defining all necessary context of a token\\n     * @param _target Target address to be checked\\n     */\\n    function approveAsset(Asset memory _asset, address _target) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.approve(_target, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.approve(_target, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            token.setApprovalForAll(_target, true);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * isValid\\n     * @dev checks that assets amount and id is valid in stated category\\n     * @dev this function don't check that stated category is indeed the category of a contract on a stated address\\n     * @param _asset Asset that is examined\\n     * @return True if assets amount and id is valid in stated category\\n     */\\n    function isValid(Asset memory _asset) internal pure returns (bool) {\\n        // ERC20 token has to have id set to 0\\n        if (_asset.category == Category.ERC20 && _asset.id != 0)\\n            return false;\\n\\n        // ERC721 token has to have amount set to 1\\n        if (_asset.category == Category.ERC721 && _asset.amount != 1)\\n            return false;\\n\\n        // Any categories have to have non-zero amount\\n        if (_asset.amount == 0)\\n            return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * isSameAs\\n     * @dev compare two assets, ignoring their amounts\\n     * @param _asset First asset to examine\\n     * @param _otherAsset Second asset to examine\\n     * @return True if both structs represents the same asset\\n     */\\n    function isSameAs(Asset memory _asset, Asset memory _otherAsset) internal pure returns (bool) {\\n        return\\n            _asset.assetAddress == _otherAsset.assetAddress &&\\n            _asset.category == _otherAsset.category &&\\n            _asset.id == _otherAsset.id;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PWNL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PWNV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOAN\",\"outputs\":[{\"internalType\":\"contract PWNLOAN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"claimLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"enum MultiToken.Category\",\"name\":\"collateralCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralIdsWhitelistMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanYieldMax\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"durationMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"durationMin\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct PWNLOAN.FlexibleOffer\",\"name\":\"_offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleInclusionProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct PWNLOAN.FlexibleOfferValues\",\"name\":\"_offerValues\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createFlexibleLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"enum MultiToken.Category\",\"name\":\"collateralCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanYield\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct PWNLOAN.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"revokeOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract PWNVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PWN", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cfe385287200f0c10a54100e9b22855a73664156000000000000000000000000b98efe56decceb1bec9faeeaf62500deb0953474", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}