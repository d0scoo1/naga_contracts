{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n  * @title Insurance Purchaser\r\n  * @author Ren\u00e9 Hochmuth\r\n  */\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address _account\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function decimals()\r\n        external\r\n        view\r\n        returns (uint8);\r\n}\r\n\r\ninterface ISeeder{\r\n\r\n    function getBatch()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    function getNextAvailableBatch()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    function getSeedSafe(\r\n        address origin,\r\n        uint256 identifier\r\n    )\r\n        external\r\n        view\r\n        returns(uint256);\r\n}\r\n\r\ninterface IRevealContract{\r\n\r\n    function enhancementCost(\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    function getEnhancementRequest(\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            address requester\r\n        );\r\n\r\n    function reveal(\r\n        uint256[] calldata tokenIds\r\n    )\r\n        external;\r\n}\r\n\r\ninterface IMainGame {\r\n\r\n    function getUserFighters(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory\r\n        );\r\n\r\n    function getUserHero(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function equip(\r\n        uint8 item,\r\n        uint256 id,\r\n        uint8 slot\r\n    )\r\n        external;\r\n\r\n    function unequip(\r\n        uint8 item,\r\n        uint8 slot\r\n    )\r\n        external;\r\n\r\n    function enhance(\r\n        uint8 item,\r\n        uint8 slot,\r\n        uint256 burnTokenId\r\n    )\r\n        external;\r\n\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ncontract RaidPartyInsuranceDeclaration {\r\n\r\n    IERC20 public immutable confettiToken;\r\n    IERC721 public immutable hero;\r\n    IERC721 public immutable fighter;\r\n\r\n    IRevealContract public immutable revealFighterContract;\r\n    IRevealContract public immutable revealHeroContract;\r\n    IMainGame public immutable mainGame;\r\n    ISeeder public immutable seeder;\r\n\r\n    address public immutable CONFETTI_TOKEN_ADDRESS;\r\n    address public immutable REVEAL_FIGHTER_CONTRACT_ADDRESS;\r\n    address public immutable REVEAL_HERO_CONTRACT_ADDRESS;\r\n    address public immutable MAIN_GAME_CONTRACT_ADDRESS;\r\n    address public immutable SEEDER_CONTRACT_ADDRESS;\r\n    address public immutable HERO_CONTRACT_ADDRESS;\r\n    address public immutable FIGHTER_CONTRACT_ADDRESS;\r\n\r\n    address public masterAddress;\r\n    uint256 public confettiReserves;\r\n\r\n    uint256 constant PRECISION = 10 ** 18;\r\n    address constant ZERO_ADDRESS = address(0x0);\r\n\r\n    uint256 public immutable MAX_FIGHTER_ENHANCECOST;\r\n    uint256 public immutable MAX_HERO_ENHANCECOST;\r\n    uint256 public immutable HERO_ENHANCE_RESERVE_NEEDED_CUTOFF;\r\n\r\n    uint256[] public heroReserves;\r\n    uint256[] public fighterReserves;\r\n\r\n    bool public registerAllowed = true;\r\n\r\n    mapping(uint256 => uint256) public batchNumberRegisterHero;\r\n    mapping(uint256 => uint256) public batchNumberRegisterFighter;\r\n\r\n    mapping(uint256 => uint256) public heroReservesPerBatch;\r\n    mapping(uint256 => uint256) public fighterReservesPerBatch;\r\n\r\n    mapping(uint256 => uint256) public lastEnhanceCostHeroByID;\r\n    mapping(uint256 => uint256) public lastEnhanceCostFighterByID;\r\n\r\n    mapping(uint256 => uint256) public insuranceCostHeroByEnhanceCost;\r\n    mapping(uint256 => uint256) public insuranceCostFighterByEnhanceCost;\r\n\r\n    mapping(uint256 => mapping(uint256 => bool)) public tokenIDClaimedInBatchHero;\r\n    mapping(uint256 => mapping(uint256 => bool)) public tokenIDClaimedInBatchFighter;\r\n\r\n    mapping(uint256 => uint256) public confettiReservesPerBatch;\r\n\r\n    modifier onlyMaster() {\r\n        require(\r\n            masterAddress == msg.sender,\r\n            \"RaidPartyInsurance: ACCESS_DENIED\"\r\n        );\r\n        _;\r\n     }\r\n\r\n    modifier registerAllowedCheck() {\r\n        require(\r\n            registerAllowed == true,\r\n            \"RaidPartyInsurance: REGISTER_NOT_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _CONFETTI_TOKEN_ADDRESS,\r\n        address _REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n        address _MAIN_GAME_CONTRACT_ADDRESS,\r\n        address _SEEDER_CONTRACT_ADDRESS,\r\n        address _HERO_CONTRACT_ADDRESS,\r\n        address _FIGHTER_CONTRACT_ADDRESS,\r\n        address _REVEAL_HERO_CONTRACT_ADDRESS\r\n    ) {\r\n        CONFETTI_TOKEN_ADDRESS = _CONFETTI_TOKEN_ADDRESS;\r\n        REVEAL_FIGHTER_CONTRACT_ADDRESS = _REVEAL_FIGHTER_CONTRACT_ADDRESS;\r\n        MAIN_GAME_CONTRACT_ADDRESS = _MAIN_GAME_CONTRACT_ADDRESS;\r\n        SEEDER_CONTRACT_ADDRESS = _SEEDER_CONTRACT_ADDRESS;\r\n        HERO_CONTRACT_ADDRESS = _HERO_CONTRACT_ADDRESS;\r\n        FIGHTER_CONTRACT_ADDRESS = _FIGHTER_CONTRACT_ADDRESS;\r\n        REVEAL_HERO_CONTRACT_ADDRESS = _REVEAL_HERO_CONTRACT_ADDRESS;\r\n\r\n        confettiToken = IERC20(\r\n            CONFETTI_TOKEN_ADDRESS\r\n        );\r\n\r\n        revealFighterContract = IRevealContract(\r\n            REVEAL_FIGHTER_CONTRACT_ADDRESS\r\n        );\r\n\r\n        revealHeroContract = IRevealContract(\r\n            REVEAL_HERO_CONTRACT_ADDRESS\r\n        );\r\n\r\n        mainGame = IMainGame(\r\n            MAIN_GAME_CONTRACT_ADDRESS\r\n        );\r\n\r\n        seeder = ISeeder(\r\n            SEEDER_CONTRACT_ADDRESS\r\n        );\r\n\r\n        hero = IERC721(\r\n            HERO_CONTRACT_ADDRESS\r\n        );\r\n\r\n        fighter = IERC721(\r\n            FIGHTER_CONTRACT_ADDRESS\r\n        );\r\n\r\n        MAX_FIGHTER_ENHANCECOST = 350 * PRECISION;\r\n        HERO_ENHANCE_RESERVE_NEEDED_CUTOFF = 1250 * PRECISION;\r\n        MAX_HERO_ENHANCECOST = 2250 * PRECISION;\r\n\r\n        insuranceCostFighterByEnhanceCost[25 * PRECISION] = 25 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[35 * PRECISION] = 34 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[50 * PRECISION] = 45 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[75 * PRECISION] = 61 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[100 * PRECISION] = 80 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[125 * PRECISION] = 101 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[150 * PRECISION] = 125 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[300 * PRECISION] = 220 * PRECISION;\r\n        insuranceCostFighterByEnhanceCost[350 * PRECISION] = 270 * PRECISION;\r\n\r\n        insuranceCostHeroByEnhanceCost[250 * PRECISION] = 50 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[500 * PRECISION] = 125 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[750 * PRECISION] = 225 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[1000 * PRECISION] = 350 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[1250 * PRECISION] = 1100 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[1500 * PRECISION] = 1350 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[1750 * PRECISION] = 1625 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[2000 * PRECISION] = 1925 * PRECISION;\r\n        insuranceCostHeroByEnhanceCost[2250 * PRECISION] = 2250 * PRECISION;\r\n    }\r\n}\r\n\r\ncontract RaidPartyInsuranceEvents {\r\n\r\n    event insurancePurchased(\r\n        address user,\r\n        bool isFighter,\r\n        uint256 enhanceCost,\r\n        uint256 batch,\r\n        uint256 cost\r\n    );\r\n\r\n    event insuranceClaimed(\r\n        address user,\r\n        bool isFighter,\r\n        bool nftCompensation,\r\n        uint256 tokensClaimed\r\n    );\r\n\r\n    event PassedBatchCheck(\r\n        uint256[] tokenIDs\r\n    );\r\n}\r\n\r\nabstract contract RaidPartyInsuranceHelper is\r\n    RaidPartyInsuranceDeclaration,\r\n    RaidPartyInsuranceEvents\r\n{\r\n    function _buyInsuranceFighter(\r\n        uint256 _tokenID,\r\n        uint256 _fighterPos\r\n    )\r\n        internal\r\n    {\r\n        uint256[] memory tokenIDarray = new uint256[](1);\r\n        tokenIDarray[0] = _tokenID;\r\n\r\n        (\r\n            uint256 batch,\r\n            uint256 nextBatch\r\n        ) = _getBatches();\r\n\r\n        require(\r\n            _checkPendingRevealFighter(_tokenID) == true,\r\n            \"RaidPartyInsuranceHelper: NO_PENDING_REVEAL\"\r\n        );\r\n\r\n        _sameBatchCheck(\r\n            REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n            tokenIDarray\r\n        );\r\n\r\n        _checkIfInMainGameFighter(\r\n            _tokenID,\r\n            _fighterPos,\r\n            msg.sender\r\n        );\r\n\r\n        require(\r\n            batchNumberRegisterFighter[_tokenID] < batch,\r\n            \"RaidPartyInsuranceHelper: ALREADY_REGISTERED\"\r\n        );\r\n\r\n        batchNumberRegisterFighter[_tokenID] = batch;\r\n\r\n        uint256 enhanceCost = _determineEnhanceCost(\r\n            REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n            _tokenID\r\n        );\r\n\r\n        require(\r\n            enhanceCost <= MAX_FIGHTER_ENHANCECOST,\r\n            \"RaidPartyInsuranceHelper: LEVEL_TOO_HIGH\"\r\n        );\r\n\r\n        lastEnhanceCostFighterByID[_tokenID] = enhanceCost;\r\n\r\n        fighterReservesPerBatch[nextBatch] += 1;\r\n        confettiReservesPerBatch[nextBatch] += enhanceCost;\r\n\r\n        uint256 insuranceCost = insuranceCostFighterByEnhanceCost[enhanceCost];\r\n\r\n        confettiReserves += insuranceCost;\r\n\r\n        _determineConfettiCoverageTotal();\r\n        _determineReserveCoverageTotalFighter();\r\n\r\n        confettiToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            insuranceCost\r\n        );\r\n\r\n        emit insurancePurchased(\r\n            msg.sender,\r\n            true,\r\n            enhanceCost,\r\n            batch,\r\n            insuranceCost\r\n        );\r\n    }\r\n\r\n    function _buyInsuranceHero(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n    {\r\n        (\r\n            uint256 batch,\r\n            uint256 nextBatch\r\n        ) = _getBatches();\r\n\r\n        uint256[] memory tokenIDarray = new uint256[](1);\r\n        tokenIDarray[0] = _tokenID;\r\n\r\n        require(\r\n            _checkPendingRevealHero(_tokenID) == true,\r\n            \"RaidPartyInsuranceHelper: NO_PENDING_REVEAL\"\r\n        );\r\n\r\n        _sameBatchCheck(\r\n            REVEAL_HERO_CONTRACT_ADDRESS,\r\n            tokenIDarray\r\n        );\r\n\r\n        _checkIfInMainGameHero(\r\n            _tokenID,\r\n            msg.sender\r\n        );\r\n\r\n        _checkDblRegisterHero(\r\n            batch,\r\n            _tokenID\r\n        );\r\n\r\n        batchNumberRegisterHero[_tokenID] = batch;\r\n\r\n        uint256 enhanceCost = _determineEnhanceCost(\r\n            REVEAL_HERO_CONTRACT_ADDRESS,\r\n            _tokenID\r\n        );\r\n\r\n        require(\r\n            enhanceCost <= MAX_HERO_ENHANCECOST,\r\n            \"RaidPartyInsuranceHelper: LEVEL_TOO_HIGH\"\r\n        );\r\n\r\n        lastEnhanceCostHeroByID[_tokenID] = enhanceCost;\r\n\r\n        confettiReservesPerBatch[nextBatch] =\r\n        confettiReservesPerBatch[nextBatch] + enhanceCost;\r\n\r\n        uint256 insuranceCost = insuranceCostHeroByEnhanceCost[enhanceCost];\r\n\r\n        confettiReserves =\r\n        confettiReserves + insuranceCost;\r\n\r\n        _determineConfettiCoverageTotal();\r\n\r\n        if (enhanceCost >= HERO_ENHANCE_RESERVE_NEEDED_CUTOFF) {\r\n            heroReservesPerBatch[nextBatch] += 1;\r\n            _determineReserveCoverageTotalHero();\r\n        }\r\n\r\n        confettiToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            insuranceCost\r\n        );\r\n\r\n        emit insurancePurchased(\r\n            msg.sender,\r\n            false,\r\n            enhanceCost,\r\n            batch,\r\n            insuranceCost\r\n        );\r\n    }\r\n\r\n    function _addFighterReserve(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n    {\r\n        fighterReserves.push(\r\n            _tokenID\r\n        );\r\n\r\n        fighter.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function _addHeroReserve(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n    {\r\n        heroReserves.push(\r\n            _tokenID\r\n        );\r\n\r\n        hero.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function _insuranceClaimHero(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n    {\r\n        uint256 batch = _getBatch();\r\n\r\n        uint256[] memory tokenIDarray = new uint256[](1);\r\n        tokenIDarray[0] = _tokenID;\r\n\r\n        require(\r\n            batchNumberRegisterHero[_tokenID] + 1 == batch,\r\n            \"RaidPartyInsuranceHelper: WRONG_BATCH\"\r\n        );\r\n\r\n        _checkIfInMainGameHero(\r\n            _tokenID,\r\n            msg.sender\r\n        );\r\n\r\n        require(\r\n            tokenIDClaimedInBatchHero[_tokenID][batch] == false,\r\n            \"RaidPartyInsuranceHelper: ALREADY_CLAIMED\"\r\n        );\r\n\r\n        if (_checkPendingRevealHero(_tokenID) == true) {\r\n\r\n            revealHeroContract.reveal(\r\n                tokenIDarray\r\n            );\r\n        }\r\n\r\n        uint256 enhanceCost = _determineEnhanceCost(\r\n            REVEAL_HERO_CONTRACT_ADDRESS,\r\n            _tokenID\r\n        );\r\n\r\n        uint256 previousEnhanceCost = lastEnhanceCostHeroByID[_tokenID];\r\n\r\n        if (enhanceCost > previousEnhanceCost) return;\r\n\r\n        tokenIDClaimedInBatchHero[_tokenID][batch] = true;\r\n        confettiReservesPerBatch[batch] -= previousEnhanceCost;\r\n        confettiReserves -= previousEnhanceCost;\r\n\r\n        bool nftCompensation = previousEnhanceCost >= HERO_ENHANCE_RESERVE_NEEDED_CUTOFF;\r\n\r\n        if (nftCompensation == true) {\r\n            heroReservesPerBatch[batch] -= 1;\r\n            hero.safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                _adjustHeroReserveArray()\r\n            );\r\n        }\r\n\r\n        confettiToken.transfer(\r\n            msg.sender,\r\n            previousEnhanceCost\r\n        );\r\n\r\n        emit insuranceClaimed(\r\n            msg.sender,\r\n            false,\r\n            nftCompensation,\r\n            previousEnhanceCost\r\n        );\r\n    }\r\n\r\n    function _insuranceClaimFighter(\r\n        uint256 _tokenID,\r\n        uint256 _fighterPos\r\n    )\r\n        internal\r\n    {\r\n        uint256 batch = _getBatch();\r\n\r\n        uint256[] memory tokenIDarray = new uint256[](1);\r\n        tokenIDarray[0] = _tokenID;\r\n\r\n        require(\r\n            batchNumberRegisterFighter[_tokenID] + 1 == batch,\r\n            \"RaidPartyInsuranceHelper: WRONG_BATCH\"\r\n        );\r\n\r\n        _checkIfInMainGameFighter(\r\n            _tokenID,\r\n            _fighterPos,\r\n            msg.sender\r\n        );\r\n\r\n        require(\r\n            tokenIDClaimedInBatchFighter[_tokenID][batch] == false,\r\n            \"RaidPartyInsuranceHelper: ALREADY_CLAIMED\"\r\n        );\r\n\r\n        if (_checkPendingRevealFighter(_tokenID) == true) {\r\n            revealFighterContract.reveal(tokenIDarray);\r\n        }\r\n\r\n        uint256 enhanceCost = _determineEnhanceCost(\r\n            REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n            _tokenID\r\n        );\r\n\r\n        uint256 previousEnhanceCost = lastEnhanceCostFighterByID[_tokenID];\r\n\r\n        if (enhanceCost > previousEnhanceCost) return;\r\n\r\n        tokenIDClaimedInBatchFighter[_tokenID][batch] = true;\r\n        confettiReservesPerBatch[batch] -= previousEnhanceCost;\r\n        fighterReservesPerBatch[batch] -= 1;\r\n        confettiReserves -= previousEnhanceCost;\r\n\r\n        confettiToken.transfer(\r\n            msg.sender,\r\n            previousEnhanceCost\r\n        );\r\n\r\n        fighter.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _adjustFighterReserveArray()\r\n        );\r\n\r\n        emit insuranceClaimed(\r\n            msg.sender,\r\n            true,\r\n            true,\r\n            previousEnhanceCost\r\n        );\r\n    }\r\n\r\n    function _withdrawHeroAdmin()\r\n        internal\r\n    {\r\n        uint256 lastTokenID = _adjustHeroReserveArray();\r\n        _determineReserveCoverageTotalHero();\r\n\r\n        hero.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            lastTokenID\r\n        );\r\n    }\r\n\r\n    function _withdrawFighterAdmin()\r\n        internal\r\n    {\r\n        uint256 lastTokenID = _adjustFighterReserveArray();\r\n        _determineReserveCoverageTotalFighter();\r\n\r\n        fighter.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            lastTokenID\r\n        );\r\n    }\r\n\r\n    function _sameBatchCheck(\r\n        address _toCall,\r\n        uint256[] memory _tokenIDs\r\n    )\r\n        internal\r\n    {\r\n        try IRevealContract(_toCall).reveal(\r\n            _tokenIDs\r\n        )\r\n        {\r\n            revert(\r\n                \"RaidPartyInsuranceHelper: NOT_SAME_BATCH\"\r\n            );\r\n        }\r\n        catch\r\n        {\r\n            emit PassedBatchCheck(\r\n                _tokenIDs\r\n            );\r\n        }\r\n    }\r\n\r\n    function _checkDblRegisterHero(\r\n        uint256 _batch,\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            batchNumberRegisterHero[_tokenID] < _batch,\r\n            \"RaidPartyInsuranceHelper: ALREADY_REGISTERED\"\r\n        );\r\n    }\r\n\r\n    function _getBatch()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return seeder.getBatch();\r\n    }\r\n\r\n    function _getBatches()\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 batch,\r\n            uint256 nextBatch\r\n        )\r\n    {\r\n        batch = _getBatch();\r\n        nextBatch = batch + 1;\r\n    }\r\n\r\n    function _checkIfInMainGameFighter(\r\n        uint256 _tokenID,\r\n        uint256 _fighterPos,\r\n        address _user\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            mainGame.getUserFighters(_user)[_fighterPos] == _tokenID,\r\n            \"RaidPartyInsuranceHelper: WRONG_TOKEN_ID\"\r\n        );\r\n    }\r\n\r\n    function _checkIfInMainGameHero(\r\n        uint256 _tokenID,\r\n        address _user\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            mainGame.getUserHero(_user) == _tokenID,\r\n            \"RaidPartyInsuranceHelper: WRONG_TOKEN_ID\"\r\n        );\r\n    }\r\n\r\n    function _determineEnhanceCost(\r\n        address _toCall,\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (\r\n            uint256 enhanceCost,\r\n        ) = IRevealContract(_toCall).enhancementCost(\r\n            _tokenID\r\n        );\r\n\r\n        return enhanceCost;\r\n    }\r\n\r\n    function _determineReserveCoverageFighter(\r\n        uint256 _fighterCount\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return fighterReserves.length >= _fighterCount;\r\n    }\r\n\r\n    function _determineReserveCoverageHero(\r\n        uint256 _heroCount\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return heroReserves.length >= _heroCount;\r\n    }\r\n\r\n    function _determineReserveCoverageTotalFighter()\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 batch = _getBatch();\r\n        uint256 nextBatch = batch + 1;\r\n\r\n        uint256 requiredTotal =\r\n            fighterReservesPerBatch[batch] +\r\n            fighterReservesPerBatch[nextBatch];\r\n\r\n        require(\r\n            _determineReserveCoverageFighter(requiredTotal) == true,\r\n            \"RaidPartyInsuranceHelper: VIOLATES_COVERAGE_FIGHTER\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function _determineReserveCoverageTotalHero()\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        (\r\n            uint256 batch,\r\n            uint256 nextBatch\r\n        ) = _getBatches();\r\n\r\n        uint256 requiredTotal =\r\n            heroReservesPerBatch[batch] +\r\n            heroReservesPerBatch[nextBatch];\r\n\r\n        require(\r\n            _determineReserveCoverageHero(requiredTotal) == true,\r\n            \"RaidPartyInsuranceHelper: VIOLATES_COVERAGE_HERO\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function _determineConfettiCoverage(\r\n        uint256 _confettiAmount\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return confettiReserves >= _confettiAmount;\r\n    }\r\n\r\n    function _determineConfettiCoverageTotal()\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        (\r\n            uint256 batch,\r\n            uint256 nextBatch\r\n        ) = _getBatches();\r\n\r\n        uint256 requiredTotal =\r\n            confettiReservesPerBatch[batch] +\r\n            confettiReservesPerBatch[nextBatch];\r\n\r\n        require(\r\n            _determineConfettiCoverage(requiredTotal) == true,\r\n            \"RaidPartyInsuranceHelper: VIOLATES_COVERAGE_CONFETII\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function _adjustHeroReserveArray()\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 lastIndex = heroReserves.length - 1;\r\n        uint256 lastTokenID = heroReserves[lastIndex];\r\n\r\n        heroReserves.pop();\r\n        return lastTokenID;\r\n    }\r\n\r\n    function _adjustFighterReserveArray()\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 lastIndex = fighterReserves.length - 1;\r\n        uint256 lastTokenID = fighterReserves[lastIndex];\r\n\r\n        fighterReserves.pop();\r\n        return lastTokenID;\r\n    }\r\n\r\n    function _checkPendingRevealFighter(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        (\r\n            ,\r\n            address enhancer\r\n        ) = revealFighterContract.getEnhancementRequest(\r\n            _tokenID\r\n        );\r\n\r\n        return enhancer > ZERO_ADDRESS;\r\n    }\r\n\r\n    function _checkPendingRevealHero(\r\n        uint256 _tokenID\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        (\r\n            ,\r\n            address enhancer\r\n        ) = revealHeroContract.getEnhancementRequest(\r\n            _tokenID\r\n        );\r\n\r\n        return enhancer > ZERO_ADDRESS;\r\n    }\r\n}\r\n\r\ncontract RaidPartyInsurance is RaidPartyInsuranceHelper {\r\n\r\n    constructor(\r\n        address _CONFETTI_TOKEN_ADDRESS,\r\n        address _REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n        address _MAIN_GAME_CONTRACT_ADDRESS,\r\n        address _SEEDER_CONTRACT_ADDRESS,\r\n        address _HERO_CONTRACT_ADDRESS,\r\n        address _FIGHTER_CONTRACT_ADDRESS,\r\n        address _REVEAL_HERO_CONTRACT_ADDRESS\r\n    )\r\n        RaidPartyInsuranceDeclaration(\r\n            _CONFETTI_TOKEN_ADDRESS,\r\n            _REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n            _MAIN_GAME_CONTRACT_ADDRESS,\r\n            _SEEDER_CONTRACT_ADDRESS,\r\n            _HERO_CONTRACT_ADDRESS,\r\n            _FIGHTER_CONTRACT_ADDRESS,\r\n            _REVEAL_HERO_CONTRACT_ADDRESS\r\n        )\r\n    {\r\n        masterAddress = msg.sender;\r\n    }\r\n\r\n    function buyInsuranceFighter(\r\n        uint256 _tokenID,\r\n        uint256 _fighterPos\r\n    )\r\n        registerAllowedCheck\r\n        external\r\n    {\r\n        _buyInsuranceFighter(\r\n            _tokenID,\r\n            _fighterPos\r\n        );\r\n    }\r\n\r\n    function buyInsuranceHero(\r\n        uint256 _tokenID\r\n    )\r\n        registerAllowedCheck\r\n        external\r\n    {\r\n        _buyInsuranceHero(\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function buyInsuranceFighterBulk(\r\n        uint256[] calldata _tokenIDs,\r\n        uint256[] calldata _fighterPositions\r\n    )\r\n        external\r\n    {\r\n        for (uint i = 0; i < _tokenIDs.length; i++) {\r\n            _buyInsuranceFighter(\r\n                _tokenIDs[i],\r\n                _fighterPositions[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function insuranceClaimHero(\r\n        uint256 _tokenID\r\n    )\r\n        external\r\n    {\r\n        _insuranceClaimHero(\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function insuranceClaimFighter(\r\n        uint256 _tokenID,\r\n        uint256 _fighterPos\r\n    )\r\n        external\r\n    {\r\n        _insuranceClaimFighter(\r\n            _tokenID,\r\n            _fighterPos\r\n        );\r\n    }\r\n\r\n    function InsuranceClaimFighterBulk(\r\n        uint256[] calldata _tokenIDs,\r\n        uint256[] calldata _fighterPositions\r\n    )\r\n        external\r\n    {\r\n        for (uint i = 0; i < _tokenIDs.length; i++) {\r\n            _insuranceClaimFighter(\r\n                _tokenIDs[i],\r\n                _fighterPositions[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function addConfettiReserve(\r\n        uint256 _amount\r\n    )\r\n        external\r\n    {\r\n        confettiReserves =\r\n        confettiReserves + _amount;\r\n\r\n        confettiToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function addFighterReserve(\r\n        uint256 _tokenID\r\n    )\r\n        external\r\n    {\r\n        _addFighterReserve(\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function addHeroReserve(\r\n        uint256 _tokenID\r\n    )\r\n        external\r\n    {\r\n        _addHeroReserve(\r\n            _tokenID\r\n        );\r\n    }\r\n\r\n    function addHeroReserveBulk(\r\n        uint256[] calldata _tokenIDs\r\n    )\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n            _addHeroReserve(\r\n                _tokenIDs[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function addFighterReserveBulk(\r\n        uint256[] calldata _tokenIDs\r\n    )\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n            _addFighterReserve(\r\n                _tokenIDs[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawConfettiAdmin(\r\n        uint256 _amount\r\n    )\r\n        onlyMaster\r\n        external\r\n    {\r\n        confettiReserves -= _amount;\r\n        _determineConfettiCoverageTotal();\r\n\r\n        confettiToken.transfer(\r\n            msg.sender,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function withdrawHeroAdmin()\r\n        onlyMaster\r\n        external\r\n    {\r\n        _withdrawHeroAdmin();\r\n    }\r\n\r\n    function withdrawHeroAdminBulk(\r\n        uint256 _heroes\r\n    )\r\n        onlyMaster\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < _heroes; i++) {\r\n            _withdrawHeroAdmin();\r\n        }\r\n    }\r\n\r\n    function withdrawFighterAdmin()\r\n        onlyMaster\r\n        external\r\n    {\r\n        _withdrawFighterAdmin();\r\n    }\r\n\r\n    function withdrawFighterAdminBulk(\r\n        uint256 _fighters\r\n    )\r\n        onlyMaster\r\n        external\r\n    {\r\n        for (uint256 i = 0; i < _fighters; i++) {\r\n            _withdrawFighterAdmin();\r\n        }\r\n    }\r\n\r\n    function secondsUntilNextBatch()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (\r\n            uint256 futureStamp,\r\n            uint256 currentStamp\r\n        ) = (\r\n            seeder.getNextAvailableBatch(),\r\n            block.timestamp\r\n        );\r\n\r\n        return futureStamp > currentStamp\r\n            ? futureStamp\r\n            : 0;\r\n    }\r\n\r\n    function potentialRegisterIDsUserHero(\r\n        address _user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 currentHeroID = mainGame.getUserHero(\r\n            _user\r\n        );\r\n\r\n        (\r\n            uint256 currentEnhanceCost,\r\n            uint256 batch\r\n        ) = (\r\n            _determineEnhanceCost(\r\n                REVEAL_HERO_CONTRACT_ADDRESS,\r\n                currentHeroID\r\n            ),\r\n            _getBatch()\r\n        );\r\n\r\n        (uint256 currentRequestID,) = revealHeroContract.getEnhancementRequest(\r\n            currentHeroID\r\n        );\r\n\r\n        try seeder.getSeedSafe(\r\n            REVEAL_HERO_CONTRACT_ADDRESS,\r\n            currentRequestID\r\n        ) {}\r\n        catch\r\n        {\r\n            if (_conditionCheckHero(batch, currentEnhanceCost, currentHeroID)) {\r\n                return currentHeroID;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _conditionCheckHero(\r\n        uint256 _batch,\r\n        uint256 _currentEnhanceCost,\r\n        uint256 _currentHeroID\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _currentEnhanceCost < MAX_HERO_ENHANCECOST\r\n            && _checkPendingRevealHero(_currentHeroID)\r\n            && batchNumberRegisterHero[_currentHeroID] < _batch;\r\n    }\r\n\r\n    function getBatch()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getBatch();\r\n    }\r\n\r\n    function activeRemainingFighterReserves()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 batch = _getBatch();\r\n\r\n        return fighterReserves.length\r\n            - fighterReservesPerBatch[batch]\r\n            - fighterReservesPerBatch[batch + 1];\r\n    }\r\n\r\n    function activeRemainingHeroReserves()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 batch = _getBatch();\r\n\r\n        return heroReserves.length\r\n            - heroReservesPerBatch[batch]\r\n            - heroReservesPerBatch[batch + 1];\r\n    }\r\n\r\n    function potentialRegisterIDsUserFighter(\r\n        address _user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        (\r\n            uint256 length,\r\n            uint256 currentFighterID,\r\n            uint256 currentEnhanceCost,\r\n            uint256 batch,\r\n            uint256 currentRequestID,\r\n            uint256 k\r\n        ) = (\r\n            mainGame.getUserFighters(_user).length,\r\n            0,\r\n            0,\r\n            _getBatch(),\r\n            0,\r\n            0\r\n        );\r\n\r\n        uint256[] memory loadArray = new uint256[](\r\n            length\r\n        );\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n\r\n            currentFighterID = mainGame.getUserFighters(_user)[i];\r\n\r\n            currentEnhanceCost = _determineEnhanceCost(\r\n                REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n                currentFighterID\r\n            );\r\n\r\n            (\r\n                currentRequestID,\r\n            ) = revealFighterContract.getEnhancementRequest(\r\n                currentFighterID\r\n            );\r\n\r\n            try seeder.getSeedSafe(\r\n                REVEAL_FIGHTER_CONTRACT_ADDRESS,\r\n                currentRequestID\r\n            ) {}\r\n            catch\r\n            {\r\n                if (_conditionCheckFighter(batch, currentFighterID, currentEnhanceCost)) {\r\n                    loadArray[k] = currentFighterID;\r\n                    k += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256[] memory returnArray = new uint256[](k);\r\n\r\n        for (uint256 index = 0; index < k; index++) {\r\n            returnArray[index] = loadArray[index];\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    function _conditionCheckFighter(\r\n        uint256 _batch,\r\n        uint256 _currentFighterID,\r\n        uint256 _currentEnhanceCost\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _currentEnhanceCost < MAX_FIGHTER_ENHANCECOST\r\n            && _checkPendingRevealFighter(_currentFighterID)\r\n            && batchNumberRegisterFighter[_currentFighterID] < _batch;\r\n    }\r\n\r\n    function changeMaster(\r\n        address _newMaster\r\n    )\r\n        onlyMaster\r\n        external\r\n    {\r\n        masterAddress = _newMaster;\r\n    }\r\n\r\n    function enableRegister()\r\n        onlyMaster\r\n        external\r\n    {\r\n        registerAllowed = true;\r\n    }\r\n\r\n    function disableRegister()\r\n        onlyMaster\r\n        external\r\n    {\r\n        registerAllowed = false;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes4)\r\n    {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CONFETTI_TOKEN_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_REVEAL_FIGHTER_CONTRACT_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MAIN_GAME_CONTRACT_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SEEDER_CONTRACT_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_HERO_CONTRACT_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FIGHTER_CONTRACT_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_REVEAL_HERO_CONTRACT_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"PassedBatchCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFighter\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nftCompensation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"}],\"name\":\"insuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFighter\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enhanceCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"insurancePurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFETTI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIGHTER_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERO_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERO_ENHANCE_RESERVE_NEEDED_CUTOFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fighterPositions\",\"type\":\"uint256[]\"}],\"name\":\"InsuranceClaimFighterBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAIN_GAME_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FIGHTER_ENHANCECOST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_HERO_ENHANCECOST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_FIGHTER_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_HERO_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEEDER_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeRemainingFighterReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeRemainingHeroReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addConfettiReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"addFighterReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"addFighterReserveBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"addHeroReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"addHeroReserveBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchNumberRegisterFighter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchNumberRegisterHero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fighterPos\",\"type\":\"uint256\"}],\"name\":\"buyInsuranceFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fighterPositions\",\"type\":\"uint256[]\"}],\"name\":\"buyInsuranceFighterBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"buyInsuranceHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confettiReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"confettiReservesPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confettiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fighter\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighterReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighterReservesPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hero\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroReservesPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fighterPos\",\"type\":\"uint256\"}],\"name\":\"insuranceClaimFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"insuranceClaimHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceCostFighterByEnhanceCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceCostHeroByEnhanceCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEnhanceCostFighterByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEnhanceCostHeroByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainGame\",\"outputs\":[{\"internalType\":\"contract IMainGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"potentialRegisterIDsUserFighter\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"potentialRegisterIDsUserHero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealFighterContract\",\"outputs\":[{\"internalType\":\"contract IRevealContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealHeroContract\",\"outputs\":[{\"internalType\":\"contract IRevealContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsUntilNextBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeder\",\"outputs\":[{\"internalType\":\"contract ISeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDClaimedInBatchFighter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDClaimedInBatchHero\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawConfettiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFighterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fighters\",\"type\":\"uint256\"}],\"name\":\"withdrawFighterAdminBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHeroAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heroes\",\"type\":\"uint256\"}],\"name\":\"withdrawHeroAdminBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RaidPartyInsurance", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cfef8857e9c80e3440a823971420f7fa5f62f0200000000000000000000000005cfef6b6777ad143e6edc122632984c87dc6fb40000000000000000000000000d311bdacb151b72bddfee9cbdc414af22a5e38dc0000000000000000000000002ed251752da7f24f33cfbd38438748bb8eeb44e1000000000000000000000000966731dfd9b9925dd105ff465687f5aa8f54ee9f00000000000000000000000087e738a3d5e5345d6212d8982205a564289e63240000000000000000000000008271ca0dea5d7c5b3b63a54903383edabcb58ae8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0dff81ddfdc37e090b899b3225c89db58cce5818938a823aad5ca5368d53d91d"}]}