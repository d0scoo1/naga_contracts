{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Artifacts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n\\r\\n/*\\r\\n\\r\\n\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2591\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\\r\\n\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u255d\u2591\\r\\n\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\\r\\n*/\\r\\n\\r\\ncontract Artifacts is IERC1155 {\\r\\n\\r\\n    address admin;\\r\\n    address validator;\\r\\n    bool initialized;\\r\\n   \\r\\n    mapping(bytes => uint256) public usedSignatures; \\r\\n    mapping(address => bool) public auth;\\r\\n    \\r\\n    /***********************************|\\r\\n    |        Variables and Events       |\\r\\n    |__________________________________*/\\r\\n\\r\\n    // onReceive function signatures\\r\\n    bytes4 constant internal ERC1155_RECEIVED_VALUE       = 0xf23a6e61;\\r\\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n    mapping (address => mapping(uint256 => uint256))  internal balances;    \\r\\n    mapping (address => mapping(address => bool))     internal operators;\\r\\n\\r\\n   /****************************************|\\r\\n  |            Minting Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\nfunction initialize() public {\\r\\n    admin = msg.sender;\\r\\n    auth[msg.sender] = true;\\r\\n    initialized = true;\\r\\n    validator = 0xF3c1D8E58A6d79e9db28a364b196daCD3dE42069;\\r\\n}\\r\\n\\r\\nfunction mint(uint256 quantity, uint256 timestamp, bytes memory tokenSignature) external {\\r\\n    isPlayer();\\r\\n    require(usedSignatures[tokenSignature] == 0, \\\"Signature already used\\\");   \\r\\n    require(_isSignedByValidator(encodeTokenForSignature(quantity, msg.sender, timestamp),tokenSignature), \\\"incorrect signature\\\");\\r\\n    usedSignatures[tokenSignature] = 1;    \\r\\n    //_safeMint(msg.sender, quantity);\\r\\n     _mint(msg.sender, 1, quantity);\\r\\n  }\\r\\n\\r\\n  function reserve(uint256 quantity) external {\\r\\n    onlyOwner();\\r\\n    _mint(msg.sender, 1, quantity);\\r\\n  }\\r\\n\\r\\n  function burn(address from,uint256 id, uint256 value) external {\\r\\n        require(auth[msg.sender], \\\"FORBIDDEN TO BURN\\\");\\r\\n        _burn(from, id, value);\\r\\n   }\\r\\n\\r\\n   function _mint(address _to, uint256 _id, uint256 _amount) internal {\\r\\n        balances[_to][_id] += _amount; \\r\\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\r\\n   }\\r\\n    \\r\\n   function _burn(address _from, uint256 _id, uint256 _amount) internal {\\r\\n        balances[_from][_id] -= _amount;\\r\\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\r\\n   }\\r\\n\\r\\n\\r\\n\\r\\n//Permissions\\r\\nfunction encodeTokenForSignature(uint256 quantity, address owner, uint256 timestamp) public pure returns (bytes32) {\\r\\n                return keccak256(\\r\\n                        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", \\r\\n                            keccak256(abi.encodePacked(quantity, owner, timestamp))\\r\\n                                )\\r\\n                            );\\r\\n}  \\r\\n\\r\\nfunction _isSignedByValidator(bytes32 _hash, bytes memory _signature) private view returns (bool) {\\r\\n                \\r\\n                bytes32 r;\\r\\n                bytes32 s;\\r\\n                uint8 v;\\r\\n                    assembly {\\r\\n                            r := mload(add(_signature, 0x20))\\r\\n                            s := mload(add(_signature, 0x40))\\r\\n                            v := byte(0, mload(add(_signature, 0x60)))\\r\\n                        }\\r\\n                    \\r\\n                        address signer = ecrecover(_hash, v, r, s);\\r\\n                        return signer == validator;\\r\\n  \\r\\n}\\r\\n//ADMIN\\r\\n\\r\\nfunction onlyOwner() internal view {    \\r\\n    require(admin == msg.sender);\\r\\n}\\r\\n\\r\\nfunction onlyOperator() internal view {    \\r\\n    require(auth[msg.sender] == true, \\\"not Authorized\\\");    \\r\\n}        \\r\\n\\r\\nfunction isPlayer() internal {    \\r\\n    uint256 size = 0;\\r\\n    address acc = msg.sender;\\r\\n    assembly { size := extcodesize(acc)}\\r\\n    require((msg.sender == tx.origin && size == 0));\\r\\n}\\r\\n\\r\\nfunction setValidator(address _validator)  public {\\r\\n    onlyOwner();       \\r\\n    validator  = _validator;     \\r\\n}\\r\\n\\r\\nfunction setAuth(address[] calldata adds_, bool status) public {\\r\\n       onlyOwner();\\r\\n       \\r\\n        for (uint256 index = 0; index < adds_.length; index++) {\\r\\n            auth[adds_[index]] = status;\\r\\n        }\\r\\n    }\\r\\n    /***********************************|\\r\\n    |     On Chain Imaging              |\\r\\n    |__________________________________*/\\r\\n\\r\\n\\r\\n    function getTokenURI(uint256 id_) public view returns (string memory) {\\r\\n        //string memory imageURI = \\\"https://huskies.mypinata.cloud/ipfs/QmUGnyv5SLs4QngTPnwNAE6asWouEnfuLjPHmPEKCyZFk1/1.png\\\"    \\r\\n        string memory imageURI = \\\"\\\";\\r\\n        string memory svgBase64 = Base64.encode(\\r\\n                                            bytes(\\r\\n                                                abi.encodePacked(\\r\\n        '<svg id=\\\"art\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\" width=\\\"100%\\\" height=\\\"100%\\\" >',\\r\\n        '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"350\\\" height=\\\"350\\\" preserveAspectRatio=\\\"xMidYMid\\\" image-rendering=\\\"pixelated\\\" href=\\\"data:image/png;base64,', imageURI, '\\\" />',\\r\\n        '<style>#art{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>'  \\r\\n                                                )\\r\\n                                            )\\r\\n                                        );\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"Artifacts\\\",\\\"description\\\":\\\"EthernalElves Artifacts is a collection of rare fragements. A combination of these artifacts can be used to awaken The Elders and other elements of the Elvenverse.\\\",',\\r\\n                                '\\\"image\\\": \\\"data:image/svg+xml;base64,',svgBase64,'\\\", \\\"attributes\\\": []}'                                \\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n    /***********************************|\\r\\n    |     Public Transfer Functions     |\\r\\n    |__________________________________*/\\r\\n\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n        public override\\r\\n    {\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n        _safeTransferFrom(_from, _to, _id, _amount);\\r\\n        _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\r\\n    }\\r\\n\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n        public override\\r\\n    {\\r\\n        // Requirements\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\r\\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |    Internal Transfer Functions    |\\r\\n    |__________________________________*/\\r\\n\\r\\n    function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\r\\n        internal\\r\\n    {\\r\\n        // Update balances\\r\\n        balances[_from][_id] -= _amount;\\r\\n        balances[_to][_id] += _amount;\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n    */\\r\\n    function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data) internal {\\r\\n        // Check if recipient is contract\\r\\n        if (_to.code.length != 0) {\\r\\n        bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _id, _amount, _data);\\r\\n        require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts) internal {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of transfer to execute\\r\\n        uint256 nTransfer = _ids.length;\\r\\n\\r\\n        // Executing all transfers\\r\\n        for (uint256 i = 0; i < nTransfer; i++) {\\r\\n            \\r\\n            balances[_from][_ids[i]] -= _amounts[i];\\r\\n            balances[_to][_ids[i]]   += _amounts[i];\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n    */\\r\\n    function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data) internal {\\r\\n        // Pass data if recipient is contract\\r\\n        if (_to.code.length != 0) {\\r\\n        bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\\r\\n        require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Operator Functions        |\\r\\n    |__________________________________*/\\r\\n\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        external override\\r\\n    {\\r\\n        // Update operator status\\r\\n        operators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public override view returns (bool isOperator)\\r\\n    {\\r\\n        return operators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Balance Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) public override view returns (uint256) {\\r\\n        return balances[_owner][_id];\\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public override view returns (uint256[] memory) {\\r\\n        require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n        // Variables\\r\\n        uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n        // Iterate over each owner and token ID\\r\\n        for (uint256 i = 0; i < _owners.length; i++) {\\r\\n        batchBalances[i] = balances[_owners[i]][_ids[i]];\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view returns (string memory) {\\r\\n        return getTokenURI(_id);\\r\\n    }\\r\\n\\r\\n    function owner() external view returns(address own_) {\\r\\n        own_ = admin;\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |          ERC165 Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    function supportsInterface(bytes4 _interfaceID) public override pure returns (bool) {\\r\\n        if (_interfaceID == type(IERC1155).interfaceId) {\\r\\n            return true;\\r\\n        }\\r\\n        if (_interfaceID == type(IERC1155Metadata).interfaceId) {\\r\\n            return true;\\r\\n        }\\r\\n        return _interfaceID == this.supportsInterface.selector;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @notice NOT BUILT BY ETHERNAL ELVES TEAM.\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n   \"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IERC20Lite {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function burn(address from, uint256 value) external;\\r\\n    function mint(address to, uint256 value) external; \\r\\n    function approve(address spender, uint256 value) external returns (bool); \\r\\n    function balanceOf(address account) external returns (uint256); \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IElfMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ICampaigns {\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory);\\r\\n}\\r\\n\\r\\ninterface IElves {    \\r\\n    function prismBridge(uint256[] calldata id, uint256[] calldata sentinel, address owner) external;    \\r\\n    function exitElf(uint256[] calldata ids, address owner) external;\\r\\n    function setAccountBalance(address _owner, uint256 _amount, bool _subtract, uint256 _index) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Lite {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface IERC1155Lite {\\r\\n    function burn(address from,uint256 id, uint256 value) external;\\r\\n    function balanceOf(address _owner, uint256 _id) external returns (uint256); \\r\\n}\\r\\n\\r\\n \\r\\n//1155\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n  function setApprovalForAll(address _operator, bool _approved) external;\\r\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n}\\r\\n\\r\\ninterface IERC1155Metadata {\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n  function uri(uint256 _id) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\r\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"encodeTokenForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tokenSignature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"own_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Artifacts", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}