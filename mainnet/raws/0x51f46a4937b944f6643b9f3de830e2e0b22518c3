{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nabstract contract Ownable {\r\n    address internal owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!YOU ARE NOT THE OWNER\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n \r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n \r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n}\r\n\r\ncontract OneOfMany is IBEP20, Ownable {\r\n \r\n    address RWRD = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n \r\n    string constant _name = \"One Of Many\";\r\n    string constant _symbol = \"OOM\";\r\n    uint8 constant _decimals = 9;\r\n \r\n    uint256 _totalSupply = 1_000_000_000_000_000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = _totalSupply / 100 * 1; // 1%\r\n    uint256 public _maxWallet = _totalSupply / 100 * 3; // 3%\r\n \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    \r\n    struct Holder {\r\n        uint256 tokenAmount;\r\n    }\r\n    struct Winner {\r\n        address winner;\r\n        uint256 totalAmountWon;\r\n        uint256 timesWon;\r\n        uint256 time;\r\n        uint256 amountBNB;\r\n        uint256 bought;\r\n        bool won;\r\n    }\r\n\r\n    address[] holders;\r\n    Winner[] winner;\r\n    mapping (address => uint256) holderIndexes;\r\n    mapping (address => Holder) _holder;\r\n    mapping (address => Winner) _winner;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isLotteryExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n \r\n    uint256 lotteryFee = 5;\r\n    uint256 liquidityFee = 1;\r\n    uint256 marketingFee = 4;\r\n    uint256 totalFee = 10;\r\n \r\n    address public marketingFeeReceiver = msg.sender;\r\n\r\n    uint256 public liquidityUnlockTime;\r\n    uint256 public totalLPBNB;\r\n\r\n    bool _removingLiquidity;\r\n    bool _addingLiquidity;\r\n    bool _tradingEnabled;\r\n\r\n    uint256 public totalLotteryBNB;\r\n    uint256 lotteryPercentage = 50;\r\n    uint256 lastLottery=block.timestamp;\r\n    uint256 lotteryMinPeriod = 1 hours;\r\n    uint256 lotteryMinBalance = _totalSupply/1000;\r\n    address lastLotteryWinner;\r\n    \r\n    uint256 targetLiquidity = 25;\r\n    uint256 targetLiquidityDenominator = 100;\r\n \r\n    IDEXRouter public router;\r\n    address public pair;\r\n    uint256 private _nonce;\r\n \r\n    address private _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\r\n \r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 200; // 0.05%\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n \r\n    constructor () Ownable(msg.sender) {\r\n        router = IDEXRouter(_dexRouter);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n \r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        isFeeExempt[address(this)] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isLotteryExempt[msg.sender] = true;\r\n        isLotteryExempt[DEAD] = true;\r\n        isLotteryExempt[pair] = true;\r\n        isLotteryExempt[address(this)] = true;\r\n \r\n        _balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n \r\n    receive() external payable { }\r\n \r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != _totalSupply){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - (amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(sender != address(0) && recipient != address(0), \"Cannot be zero address.\");\r\n\r\n        bool isIncluded = sender == pair || recipient == pair;\r\n        bool isExcluded = isFeeExempt[sender] || isFeeExempt[recipient] || _addingLiquidity || _removingLiquidity;\r\n        if (isExcluded) {\r\n            _transferExcluded(sender, recipient, amount);\r\n            } else{require(_tradingEnabled);\r\n            if(isIncluded){\r\n            transferIncluded(sender, recipient, amount);\r\n            } else{_transferExcluded(sender, recipient, amount);\r\n                }\r\n            }\r\n    }\r\n \r\n    function transferIncluded(address sender, address recipient, uint256 amount) private {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n \r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"TX Limit Exceeded\");\r\n\r\n        if(sender == pair){\r\n            require(balanceOf(recipient) + amount <= _maxWallet || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"Wallet Limit Exceeded\");\r\n        }\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        if(shouldSendLottery()){sendLotteryReward();}\r\n\r\n        _balances[sender] = _balances[sender] - (amount);\r\n \r\n        uint256 amountReceived =takeFee(sender, amount);\r\n \r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n\r\n        if(!isLotteryExempt[sender]){setHolder(sender, _balances[sender]);}\r\n        if(!isLotteryExempt[recipient]){setHolder(recipient, _balances[recipient]); _winner[recipient].bought+=amountReceived;}\r\n \r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function _transferExcluded(address sender, address recipient, uint256 amount) private {\r\n        _balances[sender] = _balances[sender] - (amount);\r\n        _balances[recipient] = _balances[recipient] + (amount);\r\n\r\n        if(!isLotteryExempt[sender]){setHolder(sender, _balances[sender]);}\r\n        if(!isLotteryExempt[recipient]){setHolder(recipient, _balances[recipient]);}\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal {\r\n        _balances[sender] = _balances[sender] - (amount);\r\n        _balances[recipient] = _balances[recipient]+(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function setHolder(address account, uint256 amount) internal { \r\n        if(amount > 0 && _holder[account].tokenAmount == 0){\r\n            addHolder(account);\r\n        }else if(amount == 0 && _holder[account].tokenAmount > 0){\r\n            removeHolder(account);\r\n        }\r\n        _holder[account].tokenAmount = amount;\r\n    }\r\n\r\n    function addHolder(address holder) internal {\r\n        holderIndexes[holder] = holders.length;\r\n        holders.push(holder);\r\n    }\r\n \r\n    function removeHolder(address holder) internal {\r\n        holders[holderIndexes[holder]] = holders[holders.length-1];\r\n        holderIndexes[holders[holders.length-1]] = holderIndexes[holder];\r\n        holders.pop();\r\n    }\r\n \r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount * (totalFee) / (100);\r\n \r\n        _balances[address(this)] = _balances[address(this)] + (feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n \r\n        return amount - (feeAmount);\r\n    }\r\n \r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    } \r\n\r\n    function shouldSendLottery() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && lastLottery + lotteryMinPeriod <= block.timestamp\r\n        && totalLotteryBNB > 0;\r\n    }  \r\n \r\n    function swapBack() internal swapping {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 amountToLiquify = contractBalance * (liquidityFee) / (totalFee) / (2);\r\n        uint256 amountToSwap = contractBalance - (amountToLiquify);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n        uint256 amountBNB = address(this).balance - (balanceBefore);\r\n \r\n        uint256 totalBNBFee = totalFee - (liquidityFee / (2));\r\n \r\n        uint256 amountBNBLiquidity = amountBNB * (liquidityFee) / (totalBNBFee) / (2);\r\n        uint256 amountBNBMarketing = amountBNB * (marketingFee) / (totalBNBFee);\r\n        uint256 amountBNBLottery = amountBNB * (lotteryFee) / (totalBNBFee);\r\n \r\n        payable(marketingFeeReceiver).transfer(amountBNBMarketing);\r\n        totalLotteryBNB+=amountBNBLottery;\r\n        addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 amountWei) private {\r\n        totalLPBNB+=amountWei;\r\n        _addingLiquidity = true;\r\n        router.addLiquidityETH{value: amountWei}(\r\n            // Liquidity Tokens are sent from contract, NOT OWNER!\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            // contract receives CAKE-LP, NOT OWNER!\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        _addingLiquidity = false;\r\n    }\r\n    function _removeLiquidityPercent(uint8 percent) private {\r\n        IBEP20 lpToken = IBEP20(pair);\r\n        uint256 amount = lpToken.balanceOf(address(this)) * percent / 100;\r\n        lpToken.approve(address(router), amount);\r\n        _removingLiquidity = true;\r\n        router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            amount,\r\n            0,\r\n            0,\r\n            // Receiver address\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        _removingLiquidity = false;\r\n    }\r\n\r\n    function swapBNBtoRWRD(address winningAddress, uint256 amount) private {\r\n    \r\n    address[] memory path = new address[](2);\r\n    path[0] = address(router.WETH());\r\n    path[1] = address(RWRD);\r\n\r\n    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, winningAddress, block.timestamp);\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        uint r = uint(uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _nonce))) % holders.length);\r\n        return r;\r\n    }\r\n\r\n    function sendLotteryReward() private returns (bool) {\r\n        uint rand = random();\r\n        while(_winner[holders[rand]].bought< lotteryMinBalance){\r\n            rand = random();\r\n        }\r\n        address payable winningAddress = payable(holders[rand]);\r\n        uint256 amountWei = totalLotteryBNB * lotteryPercentage / 100;\r\n        swapBNBtoRWRD(winningAddress, amountWei);\r\n        totalLotteryBNB-=amountWei;\r\n        lastLottery = block.timestamp;\r\n        lastLotteryWinner = winningAddress;\r\n        addWinner(winningAddress, amountWei);\r\n        return true;\r\n    }\r\n\r\n    function addWinner(address account, uint256 amountWei) private returns (bool){\r\n        _winner[account].winner=account;\r\n        _winner[account].totalAmountWon+=amountWei;\r\n        _winner[account].timesWon++;\r\n        _winner[account].time=block.timestamp;\r\n        _winner[account].amountBNB=amountWei;\r\n        _winner[account].won=true;\r\n        _winner[account].bought == 0;\r\n        winner.push(_winner[account]);\r\n        return true;\r\n    }\r\n\r\n    function checkIfIWon(address holder) external view returns(bool won, uint256 amountWon, uint256 timesWon){\r\n        amountWon = _winner[holder].totalAmountWon;\r\n        won = _winner[holder].won;\r\n        timesWon = _winner[holder].timesWon;\r\n        return (won,amountWon,timesWon);\r\n    }\r\n\r\n    function checkLastWinner() external view returns(address lastWinner, uint256 amountWon, uint256 time){\r\n        lastWinner = lastLotteryWinner;\r\n        amountWon = _winner[lastLotteryWinner].amountBNB;\r\n        time = _winner[lastLotteryWinner].time;\r\n        return (lastWinner,amountWon,time);\r\n    }\r\n\r\n    function checkTimeUntilLottery() external view returns(uint256){\r\n        uint256 nextLottery = lastLottery + lotteryMinPeriod;\r\n        uint256 secondsUntilNext = nextLottery - block.timestamp;\r\n        return secondsUntilNext>0?secondsUntilNext:0;\r\n    }\r\n\r\n    function checkNextPrizeAmount() external view returns(uint256){\r\n        uint256 nextPrize=totalLotteryBNB * lotteryPercentage / 100;\r\n        return nextPrize;\r\n    }\r\n\r\n    function setLotterySettings(address newReward, uint256 minPeriod, uint256 percentage, uint256 minBalance_base1000) external onlyOwner{\r\n        require(percentage >= 25, \"Cannot set percentage below 25%\");\r\n        require(percentage <= 100, \"Cannot set percentage over 100%\");\r\n        require(isContract(newReward), \"Address is a wallet, not a contract.\");\r\n        require(newReward != address(this), \"Cannot set reward token as this token due to Router limitations.\");\r\n        RWRD = newReward;\r\n        lotteryMinPeriod = minPeriod;\r\n        lotteryPercentage = percentage;\r\n        lotteryMinBalance = minBalance_base1000 * _totalSupply / 2000;\r\n    }\r\n\r\n    function setPresaleAddress(address presaler) external onlyOwner{\r\n        isFeeExempt[presaler] = true;\r\n        isTxLimitExempt[presaler] = true;\r\n        isLotteryExempt[presaler] = true;\r\n    }\r\n\r\n    function ownerEnableTrading() public onlyOwner {\r\n        require(!_tradingEnabled);\r\n        _tradingEnabled=true;\r\n    }\r\n \r\n    function setTxLimit_Base1000(uint256 amount) external onlyOwner {\r\n        require(amount >= _totalSupply / 1000);\r\n        _maxTxAmount = amount;\r\n    }\r\n    \r\n    function setWalletLimit_Base1000(uint256 amount) external onlyOwner {\r\n        require(amount >= _totalSupply / 1000);\r\n        _maxWallet = amount;\r\n    }\r\n\r\n    function ownerReleaseLPFromFees() public onlyOwner {\r\n        require(block.timestamp>=liquidityUnlockTime);\r\n        uint256 oldBNB=address(this).balance;\r\n        _removeLiquidityPercent(100);\r\n        uint256 newBNB=address(this).balance-oldBNB;\r\n        require(newBNB>oldBNB);\r\n    }\r\n\r\n    function ownerRemoveLPPercentFromFees(uint8 LPPercent) public onlyOwner {\r\n        require(block.timestamp>=liquidityUnlockTime);\r\n        require(LPPercent<=20);\r\n        uint256 oldBNB=address(this).balance;\r\n        _removeLiquidityPercent(LPPercent);\r\n        uint256 newBNB=address(this).balance-oldBNB;\r\n        require(newBNB>oldBNB);\r\n    }\r\n\r\n    function ownerLockLP(uint256 _days) public onlyOwner {\r\n        require(liquidityUnlockTime == 0);\r\n        uint256 lockTime = _days * 1 days;\r\n        liquidityUnlockTime=block.timestamp+lockTime;\r\n    }\r\n\r\n    function ownerExtendLPLock(uint256 _days) public onlyOwner {\r\n        require(_days <= 60 days);\r\n        uint256 lockTime = _days * 1 days;\r\n        liquidityUnlockTime+=lockTime;\r\n    }\r\n \r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n \r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsLotteryExempt(address holder, bool exempt) external onlyOwner {\r\n        isLotteryExempt[holder] = exempt;\r\n    }\r\n \r\n    function setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _lotteryFee) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        lotteryFee = _lotteryFee;\r\n        totalFee = _lotteryFee + (_liquidityFee) + (_marketingFee);\r\n        require(totalFee <= 33);\r\n    }\r\n \r\n    function setFeeReceivers(address _marketingFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n \r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n \r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD)) - (balanceOf(address(0)));\r\n    }\r\n \r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy * (balanceOf(pair) * (2)) / (getCirculatingSupply());\r\n    }\r\n \r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    // Transfer stuck bnb balance from contract to owner wallet\r\n    function ClearStuckBalance() external onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        payable(msg.sender).transfer(contractBalance);\r\n    }\r\n    // Transfer stuck tokens to owner wallet, native token is not allowed\r\n    function transferForeignToken(address _token) public onlyOwner {\r\n        require(_token != address(this), \"Can't let you take all native token\");\r\n        uint256 _contractBalance = IBEP20(_token).balanceOf(address(this));\r\n        payable(msg.sender).transfer(_contractBalance);\r\n    }\r\n\r\n    function getWinners() external view returns(address[] memory holderAddress, uint256[] memory BNBAmount, uint256[] memory time){\r\n        holderAddress = new address[](winner.length);\r\n        BNBAmount = new uint256[](winner.length);\r\n        time = new uint256[](winner.length);\r\n\r\n        for(uint i=0; i < winner.length; i++){\r\n            holderAddress[i] = winner[i].winner;\r\n            BNBAmount[i] = winner[i].amountBNB;\r\n            time[i] = winner[i].time;\r\n        }\r\n        return (holderAddress,BNBAmount,time);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkIfIWon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesWon\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkNextPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTimeUntilLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"holderAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"BNBAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"time\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"ownerExtendLPLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"ownerLockLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerReleaseLPFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"LPPercent\",\"type\":\"uint8\"}],\"name\":\"ownerRemoveLPPercentFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsLotteryExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance_base1000\",\"type\":\"uint256\"}],\"name\":\"setLotterySettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaler\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit_Base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit_Base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteryBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OneOfMany", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1e4126960819a5529d63937236a7f4469afa6a05f19b4d24958afc60ebf2a1c"}]}