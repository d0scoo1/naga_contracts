{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MorpherBridge.sol\": {\r\n      \"content\": \"// ------------------------------------------------------------------------\\r\\n// MorpherBridge\\r\\n// Handles deposit to and withdraws from the side chain, writing of the merkle\\r\\n// root to the main chain by the side chain operator, and enforces a rolling 24 hours\\r\\n// token withdraw limit from side chain to main chain.\\r\\n// If side chain operator doesn't write a merkle root hash to main chain for more than\\r\\n// 72 hours positions and balaces from side chain can be transferred to main chain.\\r\\n// ------------------------------------------------------------------------\\r\\n//SPDX-License-Identifier: GPLv3\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./MorpherState.sol\\\";\\r\\nimport \\\"./MorpherUserBlocking.sol\\\";\\r\\nimport \\\"./MorpherAccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"./MorpherTradeEngine.sol\\\";\\r\\n\\r\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\r\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\r\\nimport '@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol';\\r\\nimport '@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol';\\r\\n\\r\\ncontract MorpherBridge is Initializable, ContextUpgradeable {\\r\\n\\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n\\r\\n\\r\\n    MorpherState state;\\r\\n    MorpherBridge previousBridge;\\r\\n\\r\\n    uint256 public withdrawalLimitPerUserDaily; //200k MPH per day\\r\\n    uint256 public withdrawalLimitPerUserMonthly; //1M MPH per month\\r\\n    uint256 public withdrawalLimitPerUserYearly; //5M MPH per year\\r\\n\\r\\n    uint256 public withdrawalLimitGlobalDaily; \\r\\n    uint256 public withdrawalLimitGlobalMonthly;\\r\\n    uint256 public withdrawalLimitGlobalYearly;\\r\\n    \\r\\n    mapping(address => mapping(uint256 => uint256)) public withdrawalPerUserPerDay; //[address][day] = withdrawalAmount\\r\\n    mapping(address => mapping(uint256 => uint256)) public withdrawalPerUserPerMonth; //[address][month] = withdrawalAmount\\r\\n    mapping(address => mapping(uint256 => uint256)) public withdrawalPerUserPerYear; //[address][year] = withdrawalAmount\\r\\n\\r\\n    mapping(uint256 => uint256) public withdrawalsGlobalDaily;\\r\\n    mapping(uint256 => uint256) public withdrawalsGlobalMonthly;\\r\\n    mapping(uint256 => uint256) public withdrawalsGlobalYearly;\\r\\n\\r\\n    bytes32 public constant ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\r\\n    bytes32 public constant SIDECHAINOPERATOR_ROLE = keccak256(\\\"SIDECHAINOPERATOR_ROLE\\\");\\r\\n\\r\\n    struct WithdrawalDataStruct {\\r\\n        bytes32 merkleRoot;\\r\\n        uint256 lastUpdatedAt;\\r\\n    }\\r\\n\\r\\n    WithdrawalDataStruct public withdrawalData;\\r\\n\\r\\n    uint256 public inactivityPeriod;\\r\\n    bool public recoveryEnabled;\\r\\n    mapping(bytes32 => bool) public claimFromInactivity;\\r\\n\\r\\n    ISwapRouter public swapRouter;\\r\\n\\r\\n    // For this example, we will set the pool fee to 0.3%.\\r\\n    uint24 public constant poolFee = 3000;\\r\\n\\r\\n\\r\\n    struct TokensTransferredStruct {\\r\\n        uint256 amount;\\r\\n        uint256 lastTransferAt;\\r\\n    }\\r\\n    mapping(address => mapping(uint => TokensTransferredStruct)) public tokenSentToLinkedChain;\\r\\n    mapping(address => TokensTransferredStruct) public tokenClaimedOnThisChain;\\r\\n\\r\\n    uint256 public bridgeNonce;\\r\\n\\r\\n    event TransferToLinkedChain(\\r\\n        address indexed from,\\r\\n        uint256 tokens,\\r\\n        uint256 totalTokenSent,\\r\\n        uint256 timeStamp,\\r\\n        uint256 transferNonce,\\r\\n        uint256 targetChainId,\\r\\n        bytes32 indexed transferHash\\r\\n    );\\r\\n    event TransferToLinkedChainAndWithdrawTo(\\r\\n        address indexed from,\\r\\n        uint256 tokens,\\r\\n        uint256 totalTokenSent,\\r\\n        uint256 timeStamp,\\r\\n        uint256 transferNonce,\\r\\n        uint256 targetChainId,\\r\\n        address destinationAddress,\\r\\n        bytes userSigature,\\r\\n        bytes32 indexed transferHash\\r\\n    );\\r\\n    event TrustlessWithdrawFromSideChain(address indexed from, uint256 tokens);\\r\\n    event OperatorChainTransfer(address indexed from, uint256 tokens, bytes32 sidechainTransactionHash);\\r\\n    event ClaimFailedTransferToSidechain(address indexed from, uint256 tokens);\\r\\n    event PositionRecoveryFromSideChain(address indexed from, bytes32 positionHash);\\r\\n    event TokenRecoveryFromSideChain(address indexed from, bytes32 positionHash);\\r\\n    event SideChainMerkleRootUpdated(bytes32 _rootHash);\\r\\n    event WithdrawLimitReset();\\r\\n    event WithdrawLimitChanged(uint256 _withdrawLimit);\\r\\n    event WithdrawLimitDailyPerUserChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event WithdrawLimitMonthlyPerUserChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event WithdrawLimitYearlyPerUserChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event WithdrawLimitDailyGlobalChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event WithdrawLimitMonthlyGlobalChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event WithdrawLimitYearlyGlobalChanged(uint256 _oldLimit, uint256 _newLimit);\\r\\n    event LinkState(address _address);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * emitted when the withdrawal was a success.\\r\\n     * @param _destination: the address that received the amount\\r\\n     * @param _amount: the amount of tokens\\r\\n     * @param _convertedToGasToken: if it was converted to ETH/MATIC native (=true) or sent as ERC20 token (=false)\\r\\n     */\\r\\n    event WithdrawalSuccess(address _destination, uint _amount, bool _convertedToGasToken);\\r\\n\\r\\n    function initialize(address _stateAddress, bool _recoveryEnabled, ISwapRouter _swapRouter) public initializer {\\r\\n        //as of June 14, Martin :\\r\\n        //User: daily 200k / monthly 1m / yearly 5m\\r\\n        //Global: daily 3m / monthly 10m / yearly 50m\\r\\n\\r\\n        state = MorpherState(_stateAddress);\\r\\n        recoveryEnabled = _recoveryEnabled;\\r\\n\\r\\n        withdrawalLimitPerUserDaily = 200000 ether; //200k MPH per day\\r\\n        withdrawalLimitPerUserMonthly = 1000000 ether; //1M MPH per month\\r\\n        withdrawalLimitPerUserYearly = 5000000 ether; //5M MPH per year\\r\\n\\r\\n        withdrawalLimitGlobalDaily = 3000000 ether; //3M MPH per day\\r\\n        withdrawalLimitGlobalMonthly = 10000000 ether; //10M MPH per month\\r\\n        withdrawalLimitGlobalYearly = 50000000 ether; //50M MPH per year\\r\\n\\r\\n        inactivityPeriod = 3 days;\\r\\n\\r\\n        swapRouter = _swapRouter;\\r\\n\\r\\n    }\\r\\n\\r\\n    modifier sideChainInactive {\\r\\n        require(block.timestamp - inactivityPeriod > withdrawalData.lastUpdatedAt, \\\"MorpherBridge: Function can only be called if sidechain is inactive.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRecoveryEnabled() {\\r\\n        require(recoveryEnabled, \\\"MorpherBridge: Recovery functions are not enabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier userNotBlocked {\\r\\n        require(!MorpherUserBlocking(state.morpherUserBlockingAddress()).userIsBlocked(_msgSender()), \\\"MorpherBridge: User is blocked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        require(MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(role, _msgSender()), \\\"MorpherBridge: Permission denied.\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Links Token Contract with State\\r\\n    // ------------------------------------------------------------------------\\r\\n    function setMorpherState(address _stateAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        state = MorpherState(_stateAddress);\\r\\n        emit LinkState(_stateAddress);\\r\\n    }\\r\\n\\r\\n    function updateSwapRouter(ISwapRouter _swapRouter) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        swapRouter = _swapRouter;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setInactivityPeriod(uint256 _periodInSeconds) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        inactivityPeriod = _periodInSeconds;\\r\\n    }\\r\\n\\r\\n    function updateSideChainMerkleRoot(bytes32 _rootHash) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        withdrawalData.merkleRoot = _rootHash;\\r\\n        withdrawalData.lastUpdatedAt = block.timestamp;\\r\\n        emit SideChainMerkleRootUpdated(_rootHash);\\r\\n    }\\r\\n\\r\\n    function updateWithdrawLimitPerUserDaily(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitDailyPerUserChanged(withdrawalLimitPerUserDaily, _withdrawLimit);\\r\\n        withdrawalLimitPerUserDaily = _withdrawLimit;\\r\\n    }\\r\\n\\r\\n    function updateWithdrawLimitPerUserMonthly(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitMonthlyPerUserChanged(withdrawalLimitPerUserMonthly, _withdrawLimit);\\r\\n        withdrawalLimitPerUserMonthly = _withdrawLimit;\\r\\n    }\\r\\n    function updateWithdrawLimitPerUserYearly(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitYearlyPerUserChanged(withdrawalLimitPerUserYearly, _withdrawLimit);\\r\\n        withdrawalLimitPerUserYearly = _withdrawLimit;\\r\\n    }\\r\\n\\r\\n    function updateWithdrawLimitGlobalDaily(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitDailyGlobalChanged(withdrawalLimitGlobalDaily, _withdrawLimit);\\r\\n        withdrawalLimitGlobalDaily = _withdrawLimit;\\r\\n    }\\r\\n\\r\\n    function updateWithdrawLimitGlobalMonthly(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitMonthlyGlobalChanged(withdrawalLimitGlobalMonthly, _withdrawLimit);\\r\\n        withdrawalLimitGlobalMonthly = _withdrawLimit;\\r\\n    }\\r\\n    function updateWithdrawLimitGlobalYearly(uint256 _withdrawLimit) public onlyRole(SIDECHAINOPERATOR_ROLE) {\\r\\n        emit WithdrawLimitYearlyGlobalChanged(withdrawalLimitGlobalYearly, _withdrawLimit);\\r\\n        withdrawalLimitGlobalYearly = _withdrawLimit;\\r\\n    }\\r\\n\\r\\n\\r\\n    function isNotDailyLimitExceeding(address _usr, uint256 _amount) public view returns(bool) {\\r\\n        return (\\r\\n            (withdrawalPerUserPerDay[_usr][block.timestamp / 1 days] + _amount <= withdrawalLimitPerUserDaily) && \\r\\n            (withdrawalsGlobalDaily[block.timestamp / 1 days] + _amount <= withdrawalLimitGlobalDaily)\\r\\n        );\\r\\n    }\\r\\n    function isNotMonthlyLimitExceeding(address _usr, uint256 _amount) public view returns(bool) {\\r\\n        return (\\r\\n            (withdrawalPerUserPerMonth[_usr][block.timestamp / 30 days] + _amount <= withdrawalLimitPerUserMonthly) &&\\r\\n            (withdrawalsGlobalMonthly[block.timestamp / 30 days] + _amount <= withdrawalLimitGlobalMonthly)\\r\\n        );\\r\\n    }\\r\\n    function isNotYearlyLimitExceeding(address _usr, uint256 _amount) public view returns(bool) {\\r\\n        return (\\r\\n            (withdrawalPerUserPerYear[_usr][block.timestamp / 365 days] + _amount <= withdrawalLimitPerUserYearly) &&\\r\\n            (withdrawalsGlobalYearly[block.timestamp / 365 days] + _amount <= withdrawalLimitGlobalYearly)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyUpdateDailyLimit(address _usr, uint256 _amount) public {\\r\\n        require(isNotDailyLimitExceeding(_usr, _amount), \\\"MorpherBridge: Withdrawal Amount exceeds daily limit\\\");\\r\\n        withdrawalPerUserPerDay[_usr][block.timestamp / 1 days] += _amount;\\r\\n        withdrawalsGlobalDaily[block.timestamp / 1 days] += _amount;\\r\\n    }\\r\\n\\r\\n    function verifyUpdateMonthlyLimit(address _usr, uint256 _amount) public {\\r\\n        require(isNotMonthlyLimitExceeding(_usr, _amount), \\\"MorpherBridge: Withdrawal Amount exceeds monthly limit\\\");\\r\\n        withdrawalPerUserPerMonth[_usr][block.timestamp / 30 days] += _amount;\\r\\n        withdrawalsGlobalMonthly[block.timestamp / 30 days] += _amount;\\r\\n    }\\r\\n\\r\\n    function verifyUpdateYearlyLimit(address _usr, uint256 _amount) public {\\r\\n        require(isNotYearlyLimitExceeding(_usr, _amount), \\\"MorpherBridge: Withdrawal Amount exceeds yearly limit\\\");\\r\\n        withdrawalPerUserPerYear[_usr][block.timestamp / 365 days] += _amount;\\r\\n        withdrawalsGlobalYearly[block.timestamp / 365 days] += _amount;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n    * stageTokensForTransfer [chain A] => claimTokens [chain B]\\r\\n    *     former: transferToSideChain(uint256 _tokens)\\r\\n    * \\r\\n    * Tokens are burned on chain A and then, after the merkle root is written, \\r\\n    * can be credited on chain B through claimStagedTokens(...) below\\r\\n    *\\r\\n    */\\r\\n    function stageTokensForTransfer(uint256 _tokens, uint _targetChainId) public userNotBlocked {\\r\\n        \\r\\n        verifyUpdateDailyLimit(_msgSender(), _tokens);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _tokens);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _tokens);\\r\\n        uint withdrawalCost = 100 ether;\\r\\n        \\r\\n        MorpherToken(state.morpherTokenAddress()).burn(_msgSender(), withdrawalCost); //BURN 100 MPH as a Withdrawal Fee\\r\\n\\r\\n        uint tokensToWithdraw = _tokens - withdrawalCost;\\r\\n        MorpherToken(state.morpherTokenAddress()).burn(_msgSender(), tokensToWithdraw);\\r\\n\\r\\n\\r\\n        uint256 _newTokenSentToLinkedChain = tokenSentToLinkedChain[_msgSender()][_targetChainId].amount + tokensToWithdraw;\\r\\n        uint256 _transferNonce = getAndIncreaseBridgeNonce();\\r\\n        uint256 _timeStamp = block.timestamp;\\r\\n        bytes32 _transferHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _msgSender(),\\r\\n                tokensToWithdraw,\\r\\n                _newTokenSentToLinkedChain,\\r\\n                _timeStamp,\\r\\n                _targetChainId,\\r\\n                _transferNonce\\r\\n            )\\r\\n        );\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].amount =  _newTokenSentToLinkedChain;\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].lastTransferAt = block.timestamp;\\r\\n        emit TransferToLinkedChain(_msgSender(), tokensToWithdraw, _newTokenSentToLinkedChain, _timeStamp, _transferNonce, _targetChainId, _transferHash);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * stageTokensForTransfer [chain A] => claimTokens [chain B]\\r\\n    *     former: transferToSideChain(uint256 _tokens)\\r\\n    * \\r\\n    * Tokens are burned on chain A and then, after the merkle root is written, \\r\\n    * can be credited on chain B through claimStagedTokens(...) below\\r\\n    *\\r\\n    */\\r\\n    function stageTokensForTransfer(uint256 _tokens, uint _targetChainId, address _autoWithdrawalAddressTo, bytes memory _signature) public userNotBlocked {\\r\\n        verifyUpdateDailyLimit(_msgSender(), _tokens);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _tokens);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _tokens);\\r\\n        \\r\\n        uint withdrawalCost = 100 ether;\\r\\n        \\r\\n        MorpherToken(state.morpherTokenAddress()).burn(_msgSender(), withdrawalCost); //BURN 100 MPH as a Withdrawal Fee\\r\\n\\r\\n        uint tokensToWithdraw = _tokens - withdrawalCost;\\r\\n        MorpherToken(state.morpherTokenAddress()).burn(_msgSender(), tokensToWithdraw);\\r\\n        uint256 _newTokenSentToLinkedChain = tokenSentToLinkedChain[_msgSender()][_targetChainId].amount + tokensToWithdraw;\\r\\n        uint256 _transferNonce = getAndIncreaseBridgeNonce();\\r\\n        uint256 _timeStamp = block.timestamp;\\r\\n        bytes32 _transferHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _msgSender(),\\r\\n                tokensToWithdraw,\\r\\n                _newTokenSentToLinkedChain,\\r\\n                _timeStamp,\\r\\n                _targetChainId,\\r\\n                _transferNonce\\r\\n            )\\r\\n        );\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].amount =  _newTokenSentToLinkedChain;\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].lastTransferAt = block.timestamp;\\r\\n        emit TransferToLinkedChainAndWithdrawTo(_msgSender(), tokensToWithdraw, _newTokenSentToLinkedChain, _timeStamp, _transferNonce, _targetChainId, _autoWithdrawalAddressTo, _signature, _transferHash);\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // claimStagedTokens(...) former: trustlessTransferFromSideChain(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof)\\r\\n    // Performs a merkle proof on the number of token that have been burned by the user on the side chain.\\r\\n    // If the number of token claimed on the main chain is less than the number of burned token on the side chain\\r\\n    // the difference (or less) can be claimed on the main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function claimStagedTokens(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof) public userNotBlocked {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender(), _claimLimit, block.chainid));\\r\\n        uint256 _tokenClaimed = tokenClaimedOnThisChain[_msgSender()].amount;  \\r\\n        require(mProof(_proof, leaf), \\\"MorpherBridge: Merkle Proof failed. Please make sure you entered the correct claim limit.\\\");\\r\\n        require(_tokenClaimed + _numOfToken <= _claimLimit, \\\"MorpherBridge: Token amount exceeds token deleted on linked chain.\\\"); \\r\\n\\r\\n        verifyUpdateDailyLimit(_msgSender(), _numOfToken);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _numOfToken);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _numOfToken);        \\r\\n\\r\\n        _chainTransfer(_msgSender(), _tokenClaimed, _numOfToken);   \\r\\n        emit TrustlessWithdrawFromSideChain(_msgSender(), _numOfToken);\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // claimStagedTokens(...) former: trustlessTransferFromSideChain(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof)\\r\\n    // Performs a merkle proof on the number of token that have been burned by the user on the side chain.\\r\\n    // If the number of token claimed on the main chain is less than the number of burned token on the side chain\\r\\n    // the difference (or less) can be claimed on the main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function claimStagedTokensConvertAndSend(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof, address payable _finalOutput) public userNotBlocked {\\r\\n        // msg.sender must approve this contract\\r\\n        \\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender(), _claimLimit, block.chainid));\\r\\n        uint256 _tokenClaimed = tokenClaimedOnThisChain[_msgSender()].amount;  \\r\\n        require(mProof(_proof, leaf), \\\"MorpherBridge: Merkle Proof failed. Please make sure you entered the correct claim limit.\\\");\\r\\n        require(_tokenClaimed + _numOfToken <= _claimLimit, \\\"MorpherBridge: Token amount exceeds token deleted on linked chain.\\\"); \\r\\n\\r\\n        verifyUpdateDailyLimit(_msgSender(), _numOfToken);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _numOfToken);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _numOfToken);        \\r\\n\\r\\n        _chainTransfer(address(this), _tokenClaimed, _numOfToken); //instead of transferring it to the user, transfer it to the bridge itself\\r\\n        emit TrustlessWithdrawFromSideChain(_msgSender(), _numOfToken);\\r\\n        // Transfer the specified amount of DAI to this contract.\\r\\n        // Approve the router to spend DAI.\\r\\n        TransferHelper.safeApprove(state.morpherTokenAddress(), address(swapRouter), _numOfToken);\\r\\n\\r\\n        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\r\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\r\\n        ISwapRouter.ExactInputSingleParams memory params =\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: state.morpherTokenAddress(),\\r\\n                tokenOut: IPeripheryImmutableState(address(swapRouter)).WETH9(),\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: _numOfToken,\\r\\n                amountOutMinimum: 0,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        // The call to `exactInputSingle` executes the swap.\\r\\n        uint amountOut = swapRouter.exactInputSingle(params);\\r\\n        //weth -> eth conversion\\r\\n        IWETH9(IPeripheryImmutableState(address(swapRouter)).WETH9()).withdraw(amountOut);\\r\\n        _finalOutput.transfer(amountOut);\\r\\n    }\\r\\n\\r\\n    function getWethWmaticAddress() public view returns (address) {\\r\\n        return IPeripheryImmutableState(address(swapRouter)).WETH9();\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // claimStagedTokens(...) former: trustlessTransferFromSideChain(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof)\\r\\n    // Performs a merkle proof on the number of token that have been burned by the user on the side chain.\\r\\n    // If the number of token claimed on the main chain is less than the number of burned token on the side chain\\r\\n    // the difference (or less) can be claimed on the main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function claimStagedTokensConvertAndSendForUser(address _usrAddr, uint256 _numOfToken, uint256 fee, address feeRecipient, uint256 _claimLimit, bytes32[] memory _proof, address payable _finalOutput, bytes32 _rootHash, bytes memory _userConfirmationSignature) public onlyRole(SIDECHAINOPERATOR_ROLE) returns(uint) {\\r\\n        // msg.sender must approve this contract\\r\\n        require(keccak256(abi.encodePacked(_numOfToken,_finalOutput,block.chainid)).toEthSignedMessageHash().recover(_userConfirmationSignature) == _usrAddr, \\\"MorpherBridge: Users signature does not validate\\\");\\r\\n        updateSideChainMerkleRoot(_rootHash);\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_usrAddr, _claimLimit, block.chainid));\\r\\n        uint256 _tokenClaimed = tokenClaimedOnThisChain[_usrAddr].amount;  \\r\\n        require(mProof(_proof, leaf), \\\"MorpherBridge: Merkle Proof failed. Please make sure you entered the correct claim limit.\\\");\\r\\n        require(_tokenClaimed + _numOfToken <= _claimLimit, \\\"MorpherBridge: Token amount exceeds token deleted on linked chain.\\\"); \\r\\n\\r\\n        verifyUpdateDailyLimit(_usrAddr, _numOfToken); //for usrAddr\\r\\n        verifyUpdateMonthlyLimit(_usrAddr, _numOfToken);\\r\\n        verifyUpdateYearlyLimit(_usrAddr, _numOfToken);        \\r\\n\\r\\n        //mint the tokens\\r\\n        tokenClaimedOnThisChain[_usrAddr].amount = _tokenClaimed + _numOfToken;\\r\\n        tokenClaimedOnThisChain[_usrAddr].lastTransferAt = block.timestamp;\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(address(this), _numOfToken);\\r\\n        emit TrustlessWithdrawFromSideChain(_usrAddr, _numOfToken);\\r\\n\\r\\n        /**\\r\\n         * Transfer the Fee away\\r\\n         */\\r\\n        MorpherToken(state.morpherTokenAddress()).transfer(feeRecipient, fee);\\r\\n        \\r\\n        \\r\\n        uint convertTokens = _numOfToken - fee;\\r\\n\\r\\n\\r\\n        // Transfer the specified amount of DAI to this contract.\\r\\n        // Approve the router to spend DAI.\\r\\n        TransferHelper.safeApprove(state.morpherTokenAddress(), address(swapRouter), convertTokens);\\r\\n\\r\\n        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\r\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\r\\n        ISwapRouter.ExactInputSingleParams memory params =\\r\\n            ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: state.morpherTokenAddress(),\\r\\n                tokenOut: IPeripheryImmutableState(address(swapRouter)).WETH9(),\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: convertTokens,\\r\\n                amountOutMinimum: 0,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        // The call to `exactInputSingle` executes the swap.\\r\\n        uint amountOut = swapRouter.exactInputSingle(params);\\r\\n\\r\\n        //weth -> eth conversion\\r\\n        IWETH9(IPeripheryImmutableState(address(swapRouter)).WETH9()).withdraw(amountOut);\\r\\n        _finalOutput.transfer(amountOut);\\r\\n        emit WithdrawalSuccess(_finalOutput, amountOut, true);\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // claimStagedTokens(...) former: trustlessTransferFromSideChain(uint256 _numOfToken, uint256 _claimLimit, bytes32[] memory _proof)\\r\\n    // Performs a merkle proof on the number of token that have been burned by the user on the side chain.\\r\\n    // If the number of token claimed on the main chain is less than the number of burned token on the side chain\\r\\n    // the difference (or less) can be claimed on the main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function claimStagedTokensAndSendForUser(address _usrAddr, uint256 _numOfToken, uint256 fee, address feeRecipient, uint256 _claimLimit, bytes32[] memory _proof, address payable _finalOutput, bytes32 _rootHash, bytes memory _userConfirmationSignature) public onlyRole(SIDECHAINOPERATOR_ROLE) returns(uint) {\\r\\n        // msg.sender must approve this contract\\r\\n        require(keccak256(abi.encodePacked(_numOfToken,_finalOutput,block.chainid)).toEthSignedMessageHash().recover(_userConfirmationSignature) == _usrAddr, \\\"MorpherBridge: Users signature does not validate\\\");\\r\\n        updateSideChainMerkleRoot(_rootHash);\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_usrAddr, _claimLimit, block.chainid));\\r\\n        uint256 _tokenClaimed = tokenClaimedOnThisChain[_usrAddr].amount;  \\r\\n        require(mProof(_proof, leaf), \\\"MorpherBridge: Merkle Proof failed. Please make sure you entered the correct claim limit.\\\");\\r\\n        require(_tokenClaimed + _numOfToken <= _claimLimit, \\\"MorpherBridge: Token amount exceeds token deleted on linked chain.\\\"); \\r\\n\\r\\n        verifyUpdateDailyLimit(_usrAddr, _numOfToken); //for usrAddr\\r\\n        verifyUpdateMonthlyLimit(_usrAddr, _numOfToken);\\r\\n        verifyUpdateYearlyLimit(_usrAddr, _numOfToken);        \\r\\n\\r\\n        //mint the tokens\\r\\n        tokenClaimedOnThisChain[_usrAddr].amount = _tokenClaimed + _numOfToken;\\r\\n        tokenClaimedOnThisChain[_usrAddr].lastTransferAt = block.timestamp;\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(address(this), _numOfToken);\\r\\n        emit TrustlessWithdrawFromSideChain(_usrAddr, _numOfToken);\\r\\n\\r\\n        /**\\r\\n         * Transfer the Fee away\\r\\n         */\\r\\n        MorpherToken(state.morpherTokenAddress()).transfer(feeRecipient, fee);\\r\\n        \\r\\n        \\r\\n        uint convertTokens = _numOfToken - fee;\\r\\n\\r\\n\\r\\n        // Transfer the specified amount\\r\\n        MorpherToken(state.morpherTokenAddress()).transfer( _finalOutput, convertTokens);\\r\\n        \\r\\n        emit WithdrawalSuccess(_finalOutput, convertTokens, false);\\r\\n        return convertTokens;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // _chainTransfer(address _address, uint256 _tokenClaimed, uint256 _numOfToken)\\r\\n    // Creates token on the chain for the user after proving their distruction on the \\r\\n    // linked chain has been proven before \\r\\n    // ------------------------------------------------------------------------\\r\\n    function _chainTransfer(address _address, uint256 _tokenClaimed, uint256 _numOfToken) private {\\r\\n        tokenClaimedOnThisChain[_address].amount = _tokenClaimed + _numOfToken;\\r\\n        tokenClaimedOnThisChain[_address].lastTransferAt = block.timestamp;\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(_address, _numOfToken);\\r\\n    }\\r\\n        \\r\\n    // ------------------------------------------------------------------------\\r\\n    // claimFailedTransferToSidechain(uint256 _wrongSideChainBalance, bytes32[] memory _proof)\\r\\n    // If token sent to side chain were not credited to the user on the side chain within inactivityPeriod\\r\\n    // they can reclaim the token on the main chain by submitting the proof that their\\r\\n    // side chain balance is less than the number of token sent from main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function claimFailedTransferToSidechain(uint256 _wrongSideChainBalance, bytes32[] memory _proof, uint256 _targetChainId) public userNotBlocked {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender(), _wrongSideChainBalance));\\r\\n        require(block.timestamp > tokenSentToLinkedChain[_msgSender()][_targetChainId].lastTransferAt + inactivityPeriod, \\\"MorpherBridge: Failed deposits can only be claimed after inactivity period.\\\");\\r\\n        require(_wrongSideChainBalance < tokenSentToLinkedChain[_msgSender()][_targetChainId].amount, \\\"MorpherBridge: Other chain credit is greater equal to wrongSideChainBalance.\\\");\\r\\n       \\r\\n        require(mProof(_proof, leaf), \\\"MorpherBridge: Merkle Proof failed. Enter total amount of deposits on side chain.\\\");\\r\\n \\r\\n        uint256 _claimAmount = tokenSentToLinkedChain[_msgSender()][_targetChainId].amount - _wrongSideChainBalance;\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].amount -=  _claimAmount;\\r\\n        tokenSentToLinkedChain[_msgSender()][_targetChainId].lastTransferAt = block.timestamp;\\r\\n        verifyUpdateDailyLimit(_msgSender(), _claimAmount);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _claimAmount);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _claimAmount);         \\r\\n        MorpherToken(state.morpherTokenAddress()).mint(_msgSender(), _claimAmount);\\r\\n        emit ClaimFailedTransferToSidechain(_msgSender(), _claimAmount);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // recoverPositionFromInactivity former recoverPositionFromSideChain(bytes32[] memory _proof, bytes32 _leaf, bytes32 _marketId, uint256 _timeStamp, uint256 _longShares, uint256 _shortShares, uint256 _meanEntryPrice, uint256 _meanEntrySpread, uint256 _meanEntryLeverage)\\r\\n    // Failsafe against side chain operator becoming inactive or withholding Times (Time withhold attack).\\r\\n    // After 72 hours of no update of the side chain merkle root users can withdraw their last recorded\\r\\n    // positions from side chain to main chain. Overwrites eventually existing position on main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function recoverPositionFromInactivity(\\r\\n        bytes32[] memory _proof,\\r\\n        bytes32 _leaf,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _longShares,\\r\\n        uint256 _shortShares,\\r\\n        uint256 _meanEntryPrice,\\r\\n        uint256 _meanEntrySpread,\\r\\n        uint256 _meanEntryLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n        ) public sideChainInactive userNotBlocked onlyRecoveryEnabled {\\r\\n        require(_leaf == MorpherTradeEngine(state.morpherTradeEngineAddress()).getPositionHash(_msgSender(), _marketId, _timeStamp, _longShares, _shortShares, _meanEntryPrice, _meanEntrySpread, _meanEntryLeverage, _liquidationPrice), \\\"MorpherBridge: leaf does not equal position hash.\\\");\\r\\n        require(claimFromInactivity[_leaf] == false, \\\"MorpherBridge: Position already transferred.\\\");\\r\\n        require(mProof(_proof,_leaf) == true, \\\"MorpherBridge: Merkle proof failed.\\\");\\r\\n        claimFromInactivity[_leaf] = true;\\r\\n        //todo: double positions clashing? \\r\\n        MorpherTradeEngine(state.morpherTradeEngineAddress()).setPosition(_msgSender(), _marketId, _timeStamp, _longShares, _shortShares, _meanEntryPrice, _meanEntrySpread, _meanEntryLeverage, _liquidationPrice);\\r\\n        emit PositionRecoveryFromSideChain(_msgSender(), _leaf);\\r\\n        // Remark: After resuming operations side chain operator has 72 hours to sync and eliminate transferred positions on side chain to avoid double spend\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // recoverTokenFromInactivity - former recoverTokenFromSideChain(bytes32[] memory _proof, bytes32 _leaf, uint256 _balance)\\r\\n    // Failsafe against side chain operator becoming inactive or withholding times (time withhold attack).\\r\\n    // After 72 hours of no update of the side chain merkle root users can withdraw their last recorded\\r\\n    // token balance from side chain to main chain.\\r\\n    // ------------------------------------------------------------------------\\r\\n    function recoverTokenFromInactivity(bytes32[] memory _proof, bytes32 _leaf, uint256 _balance) public sideChainInactive userNotBlocked onlyRecoveryEnabled {\\r\\n        // Require side chain root hash not set on Mainchain for more than 72 hours (=3 days)\\r\\n        require(_leaf == getBalanceHash(_msgSender(), _balance), \\\"MorpherBridge: Wrong balance.\\\");\\r\\n        require(claimFromInactivity[_leaf] == false, \\\"MorpherBridge: Token already transferred.\\\");\\r\\n        require(mProof(_proof,_leaf) == true, \\\"MorpherBridge: Merkle proof failed.\\\");\\r\\n        claimFromInactivity[_leaf] = true;\\r\\n\\r\\n        verifyUpdateDailyLimit(_msgSender(), _balance);\\r\\n        verifyUpdateMonthlyLimit(_msgSender(), _balance);\\r\\n        verifyUpdateYearlyLimit(_msgSender(), _balance); \\r\\n        \\r\\n        _chainTransfer(_msgSender(), tokenClaimedOnThisChain[_msgSender()].amount, _balance);\\r\\n        emit TokenRecoveryFromSideChain(_msgSender(), _leaf);\\r\\n        // Remark: Side chain operator must adjust side chain balances for token recoveries before restarting operations to avoid double spend\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // mProof(bytes32[] memory _proof, bytes32 _leaf)\\r\\n    // Computes merkle proof against the root hash of the sidechain stored in Morpher state\\r\\n    // ------------------------------------------------------------------------\\r\\n    function mProof(bytes32[] memory _proof, bytes32 _leaf) public view returns(bool _isTrue) {\\r\\n        return MerkleProofUpgradeable.verify(_proof, withdrawalData.merkleRoot, _leaf);\\r\\n    }\\r\\n\\r\\n    function getBalanceHash(address _address, uint256 _balance) public pure returns (bytes32 _hash) {\\r\\n        return keccak256(abi.encodePacked(_address, _balance));\\r\\n    }\\r\\n\\r\\n    function getAndIncreaseBridgeNonce() internal returns (uint256) {\\r\\n        bridgeNonce++;\\r\\n        return bridgeNonce;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        //needed to convert the weth to eth and send to user\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MorpherUserBlocking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./MorpherAccessControl.sol\\\";\\nimport \\\"./MorpherState.sol\\\";\\n\\n\\ncontract MorpherUserBlocking is Initializable {\\n\\n    mapping(address => bool) public userIsBlocked;\\n    MorpherState state;\\n\\n    bytes32 public constant ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\n    bytes32 public constant USERBLOCKINGADMIN_ROLE = keccak256(\\\"USERBLOCKINGADMIN_ROLE\\\");\\n\\n    event ChangeUserBlocked(address _user, bool _oldIsBlocked, bool _newIsBlocked);\\n    event ChangedAddressAllowedToAddBlockedUsersAddress(address _oldAddress, address _newAddress);\\n\\n    function initialize(address _state) public initializer {\\n        state = MorpherState(_state);\\n    }\\n\\n    modifier onlyAdministrator() {\\n        require(MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(ADMINISTRATOR_ROLE, msg.sender), \\\"UserBlocking: Only Administrator can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyAllowedUsers() {\\n        require(MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(ADMINISTRATOR_ROLE, msg.sender) || MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(USERBLOCKINGADMIN_ROLE, msg.sender), \\\"UserBlocking: Only White-Listed Users can call this function\\\");\\n        _;\\n    }\\n\\n    function setUserBlocked(address _user, bool _isBlocked) public onlyAllowedUsers {\\n        emit ChangeUserBlocked(_user, userIsBlocked[_user], _isBlocked);\\n        userIsBlocked[_user] = _isBlocked;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/MorpherTradeEngine.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./MorpherState.sol\\\";\\r\\nimport \\\"./MorpherToken.sol\\\";\\r\\nimport \\\"./MorpherStaking.sol\\\";\\r\\nimport \\\"./MorpherUserBlocking.sol\\\";\\r\\nimport \\\"./MorpherMintingLimiter.sol\\\";\\r\\nimport \\\"./MorpherAccessControl.sol\\\";\\r\\n\\r\\n// ----------------------------------------------------------------------------------\\r\\n// Tradeengine of the Morpher platform\\r\\n// Creates and processes orders, and computes the state change of portfolio.\\r\\n// Needs writing/reading access to/from Morpher State. Order objects are stored locally,\\r\\n// portfolios are stored in state.\\r\\n// ----------------------------------------------------------------------------------\\r\\n\\r\\ncontract MorpherTradeEngine is Initializable, ContextUpgradeable {\\r\\n    MorpherState public morpherState;\\r\\n\\r\\n    /**\\r\\n     * Known Roles to Trade Engine\\r\\n     */\\r\\n    \\r\\n    bytes32 public constant ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\r\\n    bytes32 public constant ORACLE_ROLE = keccak256(\\\"ORACLE_ROLE\\\");\\r\\n    bytes32 public constant POSITIONADMIN_ROLE = keccak256(\\\"POSITIONADMIN_ROLE\\\"); //can set and modify positions\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Precision of prices and leverage\\r\\n// ----------------------------------------------------------------------------\\r\\n    uint256 constant PRECISION = 10**8;\\r\\n    uint256 public orderNonce;\\r\\n    bytes32 public lastOrderId;\\r\\n    uint256 public deployedTimeStamp;\\r\\n\\r\\n    bool public escrowOpenOrderEnabled;\\r\\n\\r\\n    struct PriceLock {\\r\\n        uint lockedPrice;\\r\\n    }\\r\\n    //we're locking positions in for this price at a market marketId;\\r\\n    mapping(bytes32 => PriceLock) public priceLockDeactivatedMarket;\\r\\n\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Order struct contains all order specific varibles. Variables are completed\\r\\n// during processing of trade. State changes are saved in the order struct as\\r\\n// well, since local variables would lead to stack to deep errors *sigh*.\\r\\n// ----------------------------------------------------------------------------\\r\\n    struct order {\\r\\n        address userId;\\r\\n        bytes32 marketId;\\r\\n        uint256 closeSharesAmount;\\r\\n        uint256 openMPHTokenAmount;\\r\\n        bool tradeDirection; // true = long, false = short\\r\\n        uint256 liquidationTimestamp;\\r\\n        uint256 marketPrice;\\r\\n        uint256 marketSpread;\\r\\n        uint256 orderLeverage;\\r\\n        uint256 timeStamp;\\r\\n        uint256 orderEscrowAmount;\\r\\n        OrderModifier modifyPosition;\\r\\n    }\\r\\n\\r\\n    struct OrderModifier {\\r\\n        uint256 longSharesOrder;\\r\\n        uint256 shortSharesOrder;\\r\\n        uint256 balanceDown;\\r\\n        uint256 balanceUp;\\r\\n        uint256 newLongShares;\\r\\n        uint256 newShortShares;\\r\\n        uint256 newMeanEntryPrice;\\r\\n        uint256 newMeanEntrySpread;\\r\\n        uint256 newMeanEntryLeverage;\\r\\n        uint256 newLiquidationPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n    mapping(bytes32 => order) public orders;\\r\\n\\r\\n     // ----------------------------------------------------------------------------\\r\\n    // Position struct records virtual futures\\r\\n    // ----------------------------------------------------------------------------\\r\\n    struct position {\\r\\n        uint256 lastUpdated;\\r\\n        uint256 longShares;\\r\\n        uint256 shortShares;\\r\\n        uint256 meanEntryPrice;\\r\\n        uint256 meanEntrySpread;\\r\\n        uint256 meanEntryLeverage;\\r\\n        uint256 liquidationPrice;\\r\\n        bytes32 positionHash;\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // A portfolio is an address specific collection of postions\\r\\n    // ----------------------------------------------------------------------------\\r\\n    mapping(address => mapping(bytes32 => position)) public portfolio;\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // Record all addresses that hold a position of a market, needed for clean stock splits\\r\\n    // ----------------------------------------------------------------------------\\r\\n    struct hasExposure {\\r\\n        uint256 maxMappingIndex;\\r\\n        mapping(address => uint256) index;\\r\\n        mapping(uint256 => address) addy;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => hasExposure) public exposureByMarket;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Events\\r\\n// Order created/processed events are fired by MorpherOracle.\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    event PositionLiquidated(\\r\\n        address indexed _address,\\r\\n        bytes32 indexed _marketId,\\r\\n        bool _longPosition,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread\\r\\n    );\\r\\n\\r\\n    event OrderCancelled(\\r\\n        bytes32 indexed _orderId,\\r\\n        address indexed _address\\r\\n    );\\r\\n\\r\\n    event OrderIdRequested(\\r\\n        bytes32 _orderId,\\r\\n        address indexed _address,\\r\\n        bytes32 indexed _marketId,\\r\\n        uint256 _closeSharesAmount,\\r\\n        uint256 _openMPHTokenAmount,\\r\\n        bool _tradeDirection,\\r\\n        uint256 _orderLeverage\\r\\n    );\\r\\n\\r\\n    event OrderProcessed(\\r\\n        bytes32 _orderId,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread,\\r\\n        uint256 _liquidationTimestamp,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _newLongShares,\\r\\n        uint256 _newShortShares,\\r\\n        uint256 _newAverageEntry,\\r\\n        uint256 _newAverageSpread,\\r\\n        uint256 _newAverageLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n    );\\r\\n\\r\\n    event PositionUpdated(\\r\\n        address _userId,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _newLongShares,\\r\\n        uint256 _newShortShares,\\r\\n        uint256 _newMeanEntryPrice,\\r\\n        uint256 _newMeanEntrySpread,\\r\\n        uint256 _newMeanEntryLeverage,\\r\\n        uint256 _newLiquidationPrice,\\r\\n        uint256 _mint,\\r\\n        uint256 _burn\\r\\n    );\\r\\n\\r\\n    event SetPosition(\\r\\n        bytes32 indexed positionHash,\\r\\n        address indexed sender,\\r\\n        bytes32 indexed marketId,\\r\\n        uint256 timeStamp,\\r\\n        uint256 longShares,\\r\\n        uint256 shortShares,\\r\\n        uint256 meanEntryPrice,\\r\\n        uint256 meanEntrySpread,\\r\\n        uint256 meanEntryLeverage,\\r\\n        uint256 liquidationPrice\\r\\n    );\\r\\n\\r\\n    \\r\\n    event EscrowPaid(bytes32 orderId, address user, uint escrowAmount);\\r\\n    event EscrowReturned(bytes32 orderId, address user, uint escrowAmount);\\r\\n\\r\\n    event LinkState(address _address);\\r\\n    \\r\\n    event LockedPriceForClosingPositions(bytes32 _marketId, uint256 _price);\\r\\n\\r\\n    function initialize(address _stateAddress, bool _escrowOpenOrderEnabled, uint256 _deployedTimestampOverride) public initializer {\\r\\n        ContextUpgradeable.__Context_init();\\r\\n\\r\\n        morpherState = MorpherState(_stateAddress);\\r\\n        escrowOpenOrderEnabled = _escrowOpenOrderEnabled;\\r\\n        deployedTimeStamp = _deployedTimestampOverride > 0 ? _deployedTimestampOverride : block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        require(MorpherAccessControl(morpherState.morpherAccessControlAddress()).hasRole(role, _msgSender()), \\\"MorpherTradeEngine: Permission denied.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Administrative functions\\r\\n// Set state address, get administrator address\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function setMorpherState(address _stateAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        morpherState = MorpherState(_stateAddress);\\r\\n        emit LinkState(_stateAddress);\\r\\n    }\\r\\n\\r\\n    function setEscrowOpenOrderEnabled(bool _isEnabled) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        escrowOpenOrderEnabled = _isEnabled;\\r\\n    }\\r\\n    \\r\\n    function paybackEscrow(bytes32 _orderId) private {\\r\\n        //pay back the escrow to the user so he has it back on his balance/**\\r\\n        if(orders[_orderId].orderEscrowAmount > 0) {\\r\\n            //checks effects interaction\\r\\n            uint256 paybackAmount = orders[_orderId].orderEscrowAmount;\\r\\n            orders[_orderId].orderEscrowAmount = 0;\\r\\n            MorpherToken(morpherState.morpherTokenAddress()).mint(orders[_orderId].userId, paybackAmount);\\r\\n            emit EscrowReturned(_orderId, orders[_orderId].userId, paybackAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildupEscrow(bytes32 _orderId, uint256 _amountInMPH) private {\\r\\n        if(escrowOpenOrderEnabled && _amountInMPH > 0) {\\r\\n            MorpherToken(morpherState.morpherTokenAddress()).burn(orders[_orderId].userId, _amountInMPH);\\r\\n            emit EscrowPaid(_orderId, orders[_orderId].userId, _amountInMPH);\\r\\n            orders[_orderId].orderEscrowAmount = _amountInMPH;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function validateClosedMarketOrderConditions(address _address, bytes32 _marketId, uint256 _closeSharesAmount, uint256 _openMPHTokenAmount, bool _tradeDirection ) internal view {\\r\\n        //markets active? Still tradeable?\\r\\n        if(_openMPHTokenAmount > 0) {\\r\\n            require(morpherState.getMarketActive(_marketId) == true, \\\"MorpherTradeEngine: market unknown or currently not enabled for trading.\\\");\\r\\n        } else {\\r\\n            //we're just closing a position, but it needs a forever price locked in if market is not active\\r\\n            //the user needs to close his complete position\\r\\n            if(morpherState.getMarketActive(_marketId) == false) {\\r\\n                require(getDeactivatedMarketPrice(_marketId) > 0, \\\"MorpherTradeEngine: Can't close a position, market not active and closing price not locked\\\");\\r\\n                if(_tradeDirection) {\\r\\n                    //long\\r\\n                    require(_closeSharesAmount == portfolio[_address][_marketId].longShares, \\\"MorpherTradeEngine: Deactivated market order needs all shares to be closed\\\");\\r\\n                } else {\\r\\n                    //short\\r\\n                    require(_closeSharesAmount == portfolio[_address][_marketId].longShares, \\\"MorpherTradeEngine: Deactivated market order needs all shares to be closed\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //wrapper for stack too deep errors\\r\\n    function validateClosedMarketOrder(bytes32 _orderId) internal view {\\r\\n         validateClosedMarketOrderConditions(orders[_orderId].userId, orders[_orderId].marketId, orders[_orderId].closeSharesAmount, orders[_orderId].openMPHTokenAmount, orders[_orderId].tradeDirection);\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// requestOrderId(address _address, bytes32 _marketId, bool _closeSharesAmount, uint256 _openMPHTokenAmount, bool _tradeDirection, uint256 _orderLeverage)\\r\\n// Creates a new order object with unique orderId and assigns order information.\\r\\n// Must be called by MorpherOracle contract.\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function requestOrderId(\\r\\n        address _address,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _closeSharesAmount,\\r\\n        uint256 _openMPHTokenAmount,\\r\\n        bool _tradeDirection,\\r\\n        uint256 _orderLeverage\\r\\n        ) public onlyRole(ORACLE_ROLE) returns (bytes32 _orderId) {\\r\\n            \\r\\n        require(_orderLeverage >= PRECISION, \\\"MorpherTradeEngine: leverage too small. Leverage precision is 1e8\\\");\\r\\n        require(_orderLeverage <= morpherState.getMaximumLeverage(), \\\"MorpherTradeEngine: leverage exceeds maximum allowed leverage.\\\");\\r\\n\\r\\n        validateClosedMarketOrderConditions(_address, _marketId, _closeSharesAmount, _openMPHTokenAmount, _tradeDirection);\\r\\n\\r\\n        //request limits\\r\\n        //@todo: fix request limit: 3 requests per block\\r\\n\\r\\n        /**\\r\\n         * The user can't partially close a position and open another one with MPH\\r\\n         */\\r\\n        if(_openMPHTokenAmount > 0) {\\r\\n\\r\\n            if(_tradeDirection) {\\r\\n                //long\\r\\n                require(_closeSharesAmount == portfolio[_address][_marketId].shortShares, \\\"MorpherTradeEngine: Can't partially close a position and open another one in opposite direction\\\");\\r\\n            } else {\\r\\n                //short\\r\\n                require(_closeSharesAmount == portfolio[_address][_marketId].longShares, \\\"MorpherTradeEngine: Can't partially close a position and open another one in opposite direction\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        orderNonce++;\\r\\n        _orderId = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _address,\\r\\n                block.number,\\r\\n                _marketId,\\r\\n                _closeSharesAmount,\\r\\n                _openMPHTokenAmount,\\r\\n                _tradeDirection,\\r\\n                _orderLeverage,\\r\\n                orderNonce\\r\\n                )\\r\\n            );\\r\\n        lastOrderId = _orderId;\\r\\n        orders[_orderId].userId = _address;\\r\\n        orders[_orderId].marketId = _marketId;\\r\\n        orders[_orderId].closeSharesAmount = _closeSharesAmount;\\r\\n        orders[_orderId].openMPHTokenAmount = _openMPHTokenAmount;\\r\\n        orders[_orderId].tradeDirection = _tradeDirection;\\r\\n        orders[_orderId].orderLeverage = _orderLeverage;\\r\\n        emit OrderIdRequested(\\r\\n            _orderId,\\r\\n            _address,\\r\\n            _marketId,\\r\\n            _closeSharesAmount,\\r\\n            _openMPHTokenAmount,\\r\\n            _tradeDirection,\\r\\n            _orderLeverage\\r\\n        );\\r\\n\\r\\n        /**\\r\\n         * put the money in escrow here if given MPH to open an order\\r\\n         * - also, can only close positions if in shares, so it will\\r\\n         * definitely trigger a mint there.\\r\\n         * The money must be put in escrow even though we have an existing position\\r\\n         */\\r\\n        buildupEscrow(_orderId, _openMPHTokenAmount);\\r\\n\\r\\n        return _orderId;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Getter functions for orders, shares, and positions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function getOrder(bytes32 _orderId) public view returns (\\r\\n        address _userId,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _closeSharesAmount,\\r\\n        uint256 _openMPHTokenAmount,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread,\\r\\n        uint256 _orderLeverage\\r\\n        ) {\\r\\n        return(\\r\\n            orders[_orderId].userId,\\r\\n            orders[_orderId].marketId,\\r\\n            orders[_orderId].closeSharesAmount,\\r\\n            orders[_orderId].openMPHTokenAmount,\\r\\n            orders[_orderId].marketPrice,\\r\\n            orders[_orderId].marketSpread,\\r\\n            orders[_orderId].orderLeverage\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setDeactivatedMarketPrice(bytes32 _marketId, uint256 _price) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n         priceLockDeactivatedMarket[_marketId].lockedPrice = _price;\\r\\n        emit LockedPriceForClosingPositions(_marketId, _price);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getDeactivatedMarketPrice(bytes32 _marketId) public view returns(uint256) {\\r\\n        return priceLockDeactivatedMarket[_marketId].lockedPrice;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// liquidate(bytes32 _orderId)\\r\\n// Checks for bankruptcy of position between its last update and now\\r\\n// Time check is necessary to avoid two consecutive / unorderded liquidations\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function liquidate(bytes32 _orderId) private {\\r\\n        address _address = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n        uint256 _liquidationTimestamp = orders[_orderId].liquidationTimestamp;\\r\\n        if (_liquidationTimestamp > portfolio[_address][ _marketId].lastUpdated) {\\r\\n            if (portfolio[_address][_marketId].longShares > 0) {\\r\\n                setPosition(\\r\\n                    _address,\\r\\n                    _marketId,\\r\\n                    orders[_orderId].timeStamp,\\r\\n                    0,\\r\\n                    portfolio[_address][ _marketId].shortShares,\\r\\n                    0,\\r\\n                    0,\\r\\n                    PRECISION,\\r\\n                    0);\\r\\n                emit PositionLiquidated(\\r\\n                    _address,\\r\\n                    _marketId,\\r\\n                    true,\\r\\n                    orders[_orderId].timeStamp,\\r\\n                    orders[_orderId].marketPrice,\\r\\n                    orders[_orderId].marketSpread\\r\\n                );\\r\\n            }\\r\\n            if (portfolio[_address][_marketId].shortShares > 0) {\\r\\n                setPosition(\\r\\n                    _address,\\r\\n                    _marketId,\\r\\n                    orders[_orderId].timeStamp,\\r\\n                    portfolio[_address][_marketId].longShares,\\r\\n                    0,\\r\\n                    0,\\r\\n                    0,\\r\\n                    PRECISION,\\r\\n                    0\\r\\n                );\\r\\n                emit PositionLiquidated(\\r\\n                    _address,\\r\\n                    _marketId,\\r\\n                    false,\\r\\n                    orders[_orderId].timeStamp,\\r\\n                    orders[_orderId].marketPrice,\\r\\n                    orders[_orderId].marketSpread\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// processOrder(bytes32 _orderId, uint256 _marketPrice, uint256 _marketSpread, uint256 _liquidationTimestamp, uint256 _timeStamp)\\r\\n// ProcessOrder receives the price/spread/liqidation information from the Oracle and\\r\\n// triggers the processing of the order. If successful, processOrder updates the portfolio state.\\r\\n// Liquidation time check is necessary to avoid two consecutive / unorderded liquidations\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function processOrder(\\r\\n        bytes32 _orderId,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread,\\r\\n        uint256 _liquidationTimestamp,\\r\\n        uint256 _timeStampInMS\\r\\n        ) public onlyRole(ORACLE_ROLE) returns (position memory) {\\r\\n        require(orders[_orderId].userId != address(0), \\\"MorpherTradeEngine: unable to process, order has been deleted.\\\");\\r\\n        require(_marketPrice > 0, \\\"MorpherTradeEngine: market priced at zero. Buy order cannot be processed.\\\");\\r\\n        require(_marketPrice >= _marketSpread, \\\"MorpherTradeEngine: market price lower then market spread. Order cannot be processed.\\\");\\r\\n        \\r\\n        orders[_orderId].marketPrice = _marketPrice;\\r\\n        orders[_orderId].marketSpread = _marketSpread;\\r\\n        orders[_orderId].timeStamp = _timeStampInMS;\\r\\n        orders[_orderId].liquidationTimestamp = _liquidationTimestamp;\\r\\n        \\r\\n        /**\\r\\n        * If the market is deactivated, then override the price with the locked in market price\\r\\n        * if the price wasn't locked in: error out.\\r\\n        */\\r\\n        if(morpherState.getMarketActive(orders[_orderId].marketId) == false) {\\r\\n            validateClosedMarketOrder(_orderId);\\r\\n            orders[_orderId].marketPrice = getDeactivatedMarketPrice(orders[_orderId].marketId);\\r\\n        }\\r\\n        \\r\\n        // Check if previous position on that market was liquidated\\r\\n        if (_liquidationTimestamp > portfolio[orders[_orderId].userId][ orders[_orderId].marketId].lastUpdated) {\\r\\n            liquidate(_orderId);\\r\\n        } else {\\r\\n            require(!MorpherUserBlocking(morpherState.morpherUserBlockingAddress()).userIsBlocked(orders[_orderId].userId), \\\"MorpherTradeEngine: User is blocked from Trading\\\");\\r\\n        }\\r\\n    \\r\\n\\r\\n        paybackEscrow(_orderId);\\r\\n\\r\\n        if (orders[_orderId].tradeDirection) {\\r\\n            processBuyOrder(_orderId);\\r\\n        } else {\\r\\n            processSellOrder(_orderId);\\r\\n        }\\r\\n\\r\\n        address _address = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n        delete orders[_orderId];\\r\\n        emit OrderProcessed(\\r\\n            _orderId,\\r\\n            _marketPrice,\\r\\n            _marketSpread,\\r\\n            _liquidationTimestamp,\\r\\n            _timeStampInMS,\\r\\n            portfolio[_address][_marketId].longShares,\\r\\n            portfolio[_address][_marketId].shortShares,\\r\\n            portfolio[_address][_marketId].meanEntryPrice,\\r\\n            portfolio[_address][_marketId].meanEntrySpread,\\r\\n            portfolio[_address][_marketId].meanEntryLeverage,\\r\\n            portfolio[_address][_marketId].liquidationPrice\\r\\n        );\\r\\n\\r\\n        return portfolio[_address][_marketId];\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// function cancelOrder(bytes32 _orderId, address _address)\\r\\n// Users or Administrator can delete pending orders before the callback went through\\r\\n// ----------------------------------------------------------------------------\\r\\n    function cancelOrder(bytes32 _orderId, address _address) public onlyRole(ORACLE_ROLE) {\\r\\n        require(_address == orders[_orderId].userId || MorpherAccessControl(morpherState.morpherAccessControlAddress()).hasRole(ADMINISTRATOR_ROLE, _address), \\\"MorpherTradeEngine: only Administrator or user can cancel an order.\\\");\\r\\n        require(orders[_orderId].userId != address(0), \\\"MorpherTradeEngine: unable to process, order does not exist.\\\");\\r\\n\\r\\n        /**\\r\\n         * Pay back any escrow there\\r\\n         */\\r\\n        paybackEscrow(_orderId);\\r\\n\\r\\n        delete orders[_orderId];\\r\\n        emit OrderCancelled(_orderId, _address);\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// shortShareValue / longShareValue compute the value of a virtual future\\r\\n// given current price/spread/leverage of the market and mean price/spread/leverage\\r\\n// at the beginning of the trade\\r\\n// ----------------------------------------------------------------------------\\r\\n    function shortShareValue(\\r\\n        uint256 _positionAveragePrice,\\r\\n        uint256 _positionAverageLeverage,\\r\\n        uint256 _positionTimeStampInMs,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread,\\r\\n        uint256 _orderLeverage,\\r\\n        bool _sell\\r\\n        ) public view returns (uint256 _shareValue) {\\r\\n\\r\\n        uint256 _averagePrice = _positionAveragePrice;\\r\\n        uint256 _averageLeverage = _positionAverageLeverage;\\r\\n\\r\\n        if (_positionAverageLeverage < PRECISION) {\\r\\n            // Leverage can never be less than 1. Fail safe for empty positions, i.e. undefined _positionAverageLeverage\\r\\n            _averageLeverage = PRECISION;\\r\\n        }\\r\\n        if (_sell == false) {\\r\\n            // New short position\\r\\n            // It costs marketPrice + marketSpread to build up a new short position\\r\\n            _averagePrice = _marketPrice;\\r\\n\\t        // This is the average Leverage\\r\\n\\t        _averageLeverage = _orderLeverage;\\r\\n        }\\r\\n        if (\\r\\n            getLiquidationPrice(_averagePrice, _averageLeverage, false, _positionTimeStampInMs) <= _marketPrice\\r\\n            ) {\\r\\n\\t        // Position is worthless\\r\\n            _shareValue = 0;\\r\\n        } else {\\r\\n            // The regular share value is 2x the entry price minus the current price for short positions.\\r\\n            _shareValue = _averagePrice * (PRECISION + _averageLeverage) / PRECISION;\\r\\n            _shareValue = _shareValue - _marketPrice * _averageLeverage / PRECISION;\\r\\n            if (_sell == true) {\\r\\n                // We have to reduce the share value by the average spread (i.e. the average expense to build up the position)\\r\\n                // and reduce the value further by the spread for selling.\\r\\n                _shareValue = _shareValue- _marketSpread * _averageLeverage / PRECISION;\\r\\n                uint256 _marginInterest = calculateMarginInterest(_averagePrice, _averageLeverage, _positionTimeStampInMs);\\r\\n                if (_marginInterest <= _shareValue) {\\r\\n                    _shareValue = _shareValue - (_marginInterest);\\r\\n                } else {\\r\\n                    _shareValue = 0;\\r\\n                }\\r\\n            } else {\\r\\n                // If a new short position is built up each share costs value + spread\\r\\n                _shareValue = _shareValue + (_marketSpread * (_orderLeverage) / (PRECISION));\\r\\n            }\\r\\n        }\\r\\n      \\r\\n        return _shareValue;\\r\\n    }\\r\\n\\r\\n    function longShareValue(\\r\\n        uint256 _positionAveragePrice,\\r\\n        uint256 _positionAverageLeverage,\\r\\n        uint256 _positionTimeStampInMs,\\r\\n        uint256 _marketPrice,\\r\\n        uint256 _marketSpread,\\r\\n        uint256 _orderLeverage,\\r\\n        bool _sell\\r\\n        ) public view returns (uint256 _shareValue) {\\r\\n\\r\\n        uint256 _averagePrice = _positionAveragePrice;\\r\\n        uint256 _averageLeverage = _positionAverageLeverage;\\r\\n\\r\\n        if (_positionAverageLeverage < PRECISION) {\\r\\n            // Leverage can never be less than 1. Fail safe for empty positions, i.e. undefined _positionAverageLeverage\\r\\n            _averageLeverage = PRECISION;\\r\\n        }\\r\\n        if (_sell == false) {\\r\\n            // New long position\\r\\n            // It costs marketPrice + marketSpread to build up a new long position\\r\\n            _averagePrice = _marketPrice;\\r\\n\\t        // This is the average Leverage\\r\\n\\t        _averageLeverage = _orderLeverage;\\r\\n        }\\r\\n        if (\\r\\n            _marketPrice <= getLiquidationPrice(_averagePrice, _averageLeverage, true, _positionTimeStampInMs)\\r\\n            ) {\\r\\n\\t        // Position is worthless\\r\\n            _shareValue = 0;\\r\\n        } else {\\r\\n            _shareValue = _averagePrice * (_averageLeverage - PRECISION) / (PRECISION);\\r\\n            // The regular share value is market price times leverage minus entry price times entry leverage minus one.\\r\\n            _shareValue = (_marketPrice * _averageLeverage / PRECISION) - _shareValue;\\r\\n            if (_sell == true) {\\r\\n                // We sell a long and have to correct the shareValue with the averageSpread and the currentSpread for selling.\\r\\n                _shareValue = _shareValue - (_marketSpread * _averageLeverage / PRECISION);\\r\\n                \\r\\n                uint256 _marginInterest = calculateMarginInterest(_averagePrice, _averageLeverage, _positionTimeStampInMs);\\r\\n                if (_marginInterest <= _shareValue) {\\r\\n                    _shareValue = _shareValue - (_marginInterest);\\r\\n                } else {\\r\\n                    _shareValue = 0;\\r\\n                }\\r\\n            } else {\\r\\n                // We buy a new long position and have to pay the spread\\r\\n                _shareValue = _shareValue + (_marketSpread * (_orderLeverage) / (PRECISION));\\r\\n            }\\r\\n        }\\r\\n        return _shareValue;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// calculateMarginInterest(uint256 _averagePrice, uint256 _averageLeverage, uint256 _positionTimeStamp)\\r\\n// Calculates the interest for leveraged positions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n    function calculateMarginInterest(uint256 _averagePrice, uint256 _averageLeverage, uint256 _positionTimeStampInMs) public view returns (uint256) {\\r\\n        uint _marginInterest;\\r\\n        if (_positionTimeStampInMs / 1000 < deployedTimeStamp) {\\r\\n            _positionTimeStampInMs = deployedTimeStamp / 1000;\\r\\n        }\\r\\n        uint interestRate = MorpherStaking(morpherState.morpherStakingAddress()).getInterestRate(_positionTimeStampInMs / 1000);\\r\\n        _marginInterest = _averagePrice * (_averageLeverage - PRECISION);\\r\\n        _marginInterest = _marginInterest * ((block.timestamp - (_positionTimeStampInMs / 1000)) / 86400) + 1;\\r\\n        _marginInterest = ((_marginInterest * interestRate) / PRECISION) / PRECISION;\\r\\n        return _marginInterest;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// processBuyOrder(bytes32 _orderId)\\r\\n// Converts orders specified in virtual shares to orders specified in Morpher token\\r\\n// and computes the number of short shares that are sold and long shares that are bought.\\r\\n// long shares are bought only if the order amount exceeds all open short positions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function processBuyOrder(bytes32 _orderId) private {\\r\\n        if (orders[_orderId].closeSharesAmount > 0) {\\r\\n            //calcualte the balanceUp/down first\\r\\n            //then reopen the position with MPH amount\\r\\n\\r\\n             // Investment was specified in shares\\r\\n            if (orders[_orderId].closeSharesAmount <= portfolio[orders[_orderId].userId][ orders[_orderId].marketId].shortShares) {\\r\\n                // Partial closing of short position\\r\\n                orders[_orderId].modifyPosition.shortSharesOrder = orders[_orderId].closeSharesAmount;\\r\\n            } else {\\r\\n                // Closing of entire short position\\r\\n                orders[_orderId].modifyPosition.shortSharesOrder = portfolio[orders[_orderId].userId][ orders[_orderId].marketId].shortShares;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //calculate the long shares, but only if the old position is completely closed out (if none exist shortSharesOrder = 0)\\r\\n        if(\\r\\n            orders[_orderId].modifyPosition.shortSharesOrder == portfolio[orders[_orderId].userId][ orders[_orderId].marketId].shortShares && \\r\\n            orders[_orderId].openMPHTokenAmount > 0\\r\\n        ) {\\r\\n            orders[_orderId].modifyPosition.longSharesOrder = orders[_orderId].openMPHTokenAmount / (\\r\\n                longShareValue(\\r\\n                    orders[_orderId].marketPrice,\\r\\n                    orders[_orderId].orderLeverage,\\r\\n                    block.timestamp * (1000),\\r\\n                    orders[_orderId].marketPrice,\\r\\n                    orders[_orderId].marketSpread,\\r\\n                    orders[_orderId].orderLeverage,\\r\\n                    false\\r\\n            ));\\r\\n        }\\r\\n\\r\\n        // Investment equals number of shares now.\\r\\n        if (orders[_orderId].modifyPosition.shortSharesOrder > 0) {\\r\\n            closeShort(_orderId);\\r\\n        }\\r\\n        if (orders[_orderId].modifyPosition.longSharesOrder > 0) {\\r\\n            openLong(_orderId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// processSellOrder(bytes32 _orderId)\\r\\n// Converts orders specified in virtual shares to orders specified in Morpher token\\r\\n// and computes the number of long shares that are sold and short shares that are bought.\\r\\n// short shares are bought only if the order amount exceeds all open long positions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function processSellOrder(bytes32 _orderId) private {\\r\\n        if (orders[_orderId].closeSharesAmount > 0) {\\r\\n            //calcualte the balanceUp/down first\\r\\n            //then reopen the position with MPH amount\\r\\n\\r\\n            // Investment was specified in shares\\r\\n            if (orders[_orderId].closeSharesAmount <= portfolio[orders[_orderId].userId][ orders[_orderId].marketId].longShares) {\\r\\n                // Partial closing of long position\\r\\n                orders[_orderId].modifyPosition.longSharesOrder = orders[_orderId].closeSharesAmount;\\r\\n            } else {\\r\\n                // Closing of entire long position\\r\\n                orders[_orderId].modifyPosition.longSharesOrder = portfolio[orders[_orderId].userId][ orders[_orderId].marketId].longShares;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(\\r\\n            orders[_orderId].modifyPosition.longSharesOrder == portfolio[orders[_orderId].userId][ orders[_orderId].marketId].longShares && \\r\\n            orders[_orderId].openMPHTokenAmount > 0\\r\\n        ) {\\r\\n        orders[_orderId].modifyPosition.shortSharesOrder = orders[_orderId].openMPHTokenAmount / (\\r\\n                    shortShareValue(\\r\\n                        orders[_orderId].marketPrice,\\r\\n                        orders[_orderId].orderLeverage,\\r\\n                        block.timestamp * (1000),\\r\\n                        orders[_orderId].marketPrice,\\r\\n                        orders[_orderId].marketSpread,\\r\\n                        orders[_orderId].orderLeverage,\\r\\n                        false\\r\\n                ));\\r\\n        }\\r\\n        // Investment equals number of shares now.\\r\\n        if (orders[_orderId].modifyPosition.longSharesOrder > 0) {\\r\\n            closeLong(_orderId);\\r\\n        }\\r\\n        if (orders[_orderId].modifyPosition.shortSharesOrder > 0) {\\r\\n            openShort(_orderId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// openLong(bytes32 _orderId)\\r\\n// Opens a new long position and computes the new resulting average entry price/spread/leverage.\\r\\n// Computation is broken down to several instructions for readability.\\r\\n// ----------------------------------------------------------------------------\\r\\n    function openLong(bytes32 _orderId) private {\\r\\n        address _userId = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n\\r\\n        uint256 _newMeanSpread;\\r\\n        uint256 _newMeanLeverage;\\r\\n\\r\\n        // Existing position is virtually liquidated and reopened with current marketPrice\\r\\n        // orders[_orderId].modifyPosition.newMeanEntryPrice = orders[_orderId].marketPrice;\\r\\n        // _factorLongShares is a factor to adjust the existing longShares via virtual liqudiation and reopening at current market price\\r\\n\\r\\n        uint256 _factorLongShares = portfolio[_userId][ _marketId].meanEntryLeverage;\\r\\n        if (_factorLongShares < PRECISION) {\\r\\n            _factorLongShares = PRECISION;\\r\\n        }\\r\\n        _factorLongShares = _factorLongShares - (PRECISION);\\r\\n        _factorLongShares = _factorLongShares * (portfolio[_userId][ _marketId].meanEntryPrice) / (orders[_orderId].marketPrice);\\r\\n        if (portfolio[_userId][ _marketId].meanEntryLeverage > _factorLongShares) {\\r\\n            _factorLongShares = portfolio[_userId][ _marketId].meanEntryLeverage - (_factorLongShares);\\r\\n        } else {\\r\\n            _factorLongShares = 0;\\r\\n        }\\r\\n\\r\\n        uint256 _adjustedLongShares = _factorLongShares * (portfolio[_userId][ _marketId].longShares) / (PRECISION);\\r\\n\\r\\n        // _newMeanLeverage is the weighted leverage of the existing position and the new position\\r\\n        _newMeanLeverage = portfolio[_userId][ _marketId].meanEntryLeverage * (_adjustedLongShares);\\r\\n        _newMeanLeverage = _newMeanLeverage + (orders[_orderId].orderLeverage * (orders[_orderId].modifyPosition.longSharesOrder));\\r\\n        _newMeanLeverage = _newMeanLeverage / (_adjustedLongShares + (orders[_orderId].modifyPosition.longSharesOrder));\\r\\n\\r\\n        // _newMeanSpread is the weighted spread of the existing position and the new position\\r\\n        _newMeanSpread = portfolio[_userId][ _marketId].meanEntrySpread * (portfolio[_userId][ _marketId].longShares);\\r\\n        _newMeanSpread = _newMeanSpread + (orders[_orderId].marketSpread * (orders[_orderId].modifyPosition.longSharesOrder));\\r\\n        _newMeanSpread = _newMeanSpread / (_adjustedLongShares + (orders[_orderId].modifyPosition.longSharesOrder));\\r\\n\\r\\n        orders[_orderId].modifyPosition.balanceDown = orders[_orderId].modifyPosition.longSharesOrder * (orders[_orderId].marketPrice) + (\\r\\n            orders[_orderId].modifyPosition.longSharesOrder * (orders[_orderId].marketSpread) * (orders[_orderId].orderLeverage) / (PRECISION)\\r\\n        );\\r\\n        orders[_orderId].modifyPosition.balanceUp = 0;\\r\\n        orders[_orderId].modifyPosition.newLongShares = _adjustedLongShares + (orders[_orderId].modifyPosition.longSharesOrder);\\r\\n        orders[_orderId].modifyPosition.newShortShares = portfolio[_userId][ _marketId].shortShares;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryPrice = orders[_orderId].marketPrice;\\r\\n        orders[_orderId].modifyPosition.newMeanEntrySpread = _newMeanSpread;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryLeverage = _newMeanLeverage;\\r\\n\\r\\n        setPositionInState(_orderId);\\r\\n    }\\r\\n// ----------------------------------------------------------------------------\\r\\n// closeLong(bytes32 _orderId)\\r\\n// Closes an existing long position. Average entry price/spread/leverage do not change.\\r\\n// ----------------------------------------------------------------------------\\r\\n     function closeLong(bytes32 _orderId) private {\\r\\n        address _userId = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n        uint256 _newLongShares  = portfolio[_userId][ _marketId].longShares - (orders[_orderId].modifyPosition.longSharesOrder);\\r\\n        uint256 _balanceUp = calculateBalanceUp(_orderId);\\r\\n        uint256 _newMeanEntry;\\r\\n        uint256 _newMeanSpread;\\r\\n        uint256 _newMeanLeverage;\\r\\n\\r\\n        if (orders[_orderId].modifyPosition.longSharesOrder == portfolio[_userId][ _marketId].longShares) {\\r\\n            _newMeanEntry = 0;\\r\\n            _newMeanSpread = 0;\\r\\n            _newMeanLeverage = PRECISION;\\r\\n        } else {\\r\\n            _newMeanEntry = portfolio[_userId][ _marketId].meanEntryPrice;\\r\\n\\t        _newMeanSpread = portfolio[_userId][ _marketId].meanEntrySpread;\\r\\n\\t        _newMeanLeverage = portfolio[_userId][ _marketId].meanEntryLeverage;\\r\\n            resetTimestampInOrderToLastUpdated(_orderId);\\r\\n        }\\r\\n\\r\\n        orders[_orderId].modifyPosition.balanceDown = 0;\\r\\n        orders[_orderId].modifyPosition.balanceUp = _balanceUp;\\r\\n        orders[_orderId].modifyPosition.newLongShares = _newLongShares;\\r\\n        orders[_orderId].modifyPosition.newShortShares = portfolio[_userId][ _marketId].shortShares;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryPrice = _newMeanEntry;\\r\\n        orders[_orderId].modifyPosition.newMeanEntrySpread = _newMeanSpread;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryLeverage = _newMeanLeverage;\\r\\n\\r\\n        setPositionInState(_orderId);\\r\\n    }\\r\\n\\r\\nevent ResetTimestampInOrder(bytes32 _orderId, uint oldTimestamp, uint newTimestamp);\\r\\nfunction resetTimestampInOrderToLastUpdated(bytes32 _orderId) internal {\\r\\n    address userId = orders[_orderId].userId;\\r\\n    bytes32 marketId = orders[_orderId].marketId;\\r\\n    uint lastUpdated = portfolio[userId][ marketId].lastUpdated;\\r\\n    emit ResetTimestampInOrder(_orderId, orders[_orderId].timeStamp, lastUpdated);\\r\\n    orders[_orderId].timeStamp = lastUpdated;\\r\\n}\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// closeShort(bytes32 _orderId)\\r\\n// Closes an existing short position. Average entry price/spread/leverage do not change.\\r\\n// ----------------------------------------------------------------------------\\r\\nfunction calculateBalanceUp(bytes32 _orderId) private view returns (uint256 _balanceUp) {\\r\\n        address _userId = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n        uint256 _shareValue;\\r\\n\\r\\n        if (orders[_orderId].tradeDirection == false) { //we are selling our long shares\\r\\n            _balanceUp = orders[_orderId].modifyPosition.longSharesOrder;\\r\\n            _shareValue = longShareValue(\\r\\n                portfolio[_userId][ _marketId].meanEntryPrice,\\r\\n                portfolio[_userId][ _marketId].meanEntryLeverage,\\r\\n                portfolio[_userId][ _marketId].lastUpdated,\\r\\n                orders[_orderId].marketPrice,\\r\\n                orders[_orderId].marketSpread,\\r\\n                portfolio[_userId][ _marketId].meanEntryLeverage,\\r\\n                true\\r\\n            );\\r\\n        } else { //we are going long, we are selling our short shares\\r\\n            _balanceUp = orders[_orderId].modifyPosition.shortSharesOrder;\\r\\n            _shareValue = shortShareValue(\\r\\n                portfolio[_userId][ _marketId].meanEntryPrice,\\r\\n                portfolio[_userId][ _marketId].meanEntryLeverage,\\r\\n                portfolio[_userId][ _marketId].lastUpdated,\\r\\n                orders[_orderId].marketPrice,\\r\\n                orders[_orderId].marketSpread,\\r\\n                portfolio[_userId][ _marketId].meanEntryLeverage,\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n        return _balanceUp * (_shareValue); \\r\\n    }\\r\\n\\r\\n    function closeShort(bytes32 _orderId) private {\\r\\n        address _userId = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n        uint256 _newMeanEntry;\\r\\n        uint256 _newMeanSpread;\\r\\n        uint256 _newMeanLeverage;\\r\\n        uint256 _newShortShares = portfolio[_userId][ _marketId].shortShares - (orders[_orderId].modifyPosition.shortSharesOrder);\\r\\n        uint256 _balanceUp = calculateBalanceUp(_orderId);\\r\\n        \\r\\n        if (orders[_orderId].modifyPosition.shortSharesOrder == portfolio[_userId][ _marketId].shortShares) {\\r\\n            _newMeanEntry = 0;\\r\\n            _newMeanSpread = 0;\\r\\n\\t        _newMeanLeverage = PRECISION;\\r\\n        } else {\\r\\n            _newMeanEntry = portfolio[_userId][ _marketId].meanEntryPrice;\\r\\n\\t        _newMeanSpread = portfolio[_userId][ _marketId].meanEntrySpread;\\r\\n\\t        _newMeanLeverage = portfolio[_userId][ _marketId].meanEntryLeverage;\\r\\n\\r\\n            /**\\r\\n             * we need the timestamp of the old order for partial closes, not the new one\\r\\n             */\\r\\n            resetTimestampInOrderToLastUpdated(_orderId);\\r\\n        }\\r\\n\\r\\n        orders[_orderId].modifyPosition.balanceDown = 0;\\r\\n        orders[_orderId].modifyPosition.balanceUp = _balanceUp;\\r\\n        orders[_orderId].modifyPosition.newLongShares = portfolio[orders[_orderId].userId][ orders[_orderId].marketId].longShares;\\r\\n        orders[_orderId].modifyPosition.newShortShares = _newShortShares;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryPrice = _newMeanEntry;\\r\\n        orders[_orderId].modifyPosition.newMeanEntrySpread = _newMeanSpread;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryLeverage = _newMeanLeverage;\\r\\n\\r\\n        setPositionInState(_orderId);\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// openShort(bytes32 _orderId)\\r\\n// Opens a new short position and computes the new resulting average entry price/spread/leverage.\\r\\n// Computation is broken down to several instructions for readability.\\r\\n// ----------------------------------------------------------------------------\\r\\n    function openShort(bytes32 _orderId) private {\\r\\n        address _userId = orders[_orderId].userId;\\r\\n        bytes32 _marketId = orders[_orderId].marketId;\\r\\n\\r\\n        uint256 _newMeanSpread;\\r\\n        uint256 _newMeanLeverage;\\r\\n        //\\r\\n        // Existing position is virtually liquidated and reopened with current marketPrice\\r\\n        // orders[_orderId].modifyPosition.newMeanEntryPrice = orders[_orderId].marketPrice;\\r\\n        // _factorShortShares is a factor to adjust the existing shortShares via virtual liqudiation and reopening at current market price\\r\\n\\r\\n        uint256 _factorShortShares = portfolio[_userId][ _marketId].meanEntryLeverage;\\r\\n        if (_factorShortShares < PRECISION) {\\r\\n            _factorShortShares = PRECISION;\\r\\n        }\\r\\n        _factorShortShares = _factorShortShares + (PRECISION);\\r\\n        _factorShortShares = _factorShortShares * (portfolio[_userId][ _marketId].meanEntryPrice) / (orders[_orderId].marketPrice);\\r\\n        if (portfolio[_userId][ _marketId].meanEntryLeverage < _factorShortShares) {\\r\\n            _factorShortShares = _factorShortShares - (portfolio[_userId][ _marketId].meanEntryLeverage);\\r\\n        } else {\\r\\n            _factorShortShares = 0;\\r\\n        }\\r\\n\\r\\n        uint256 _adjustedShortShares = _factorShortShares * (portfolio[_userId][ _marketId].shortShares) / (PRECISION);\\r\\n\\r\\n        // _newMeanLeverage is the weighted leverage of the existing position and the new position\\r\\n        _newMeanLeverage = portfolio[_userId][ _marketId].meanEntryLeverage * (_adjustedShortShares);\\r\\n        _newMeanLeverage = _newMeanLeverage + (orders[_orderId].orderLeverage * (orders[_orderId].modifyPosition.shortSharesOrder));\\r\\n        _newMeanLeverage = _newMeanLeverage / (_adjustedShortShares + (orders[_orderId].modifyPosition.shortSharesOrder));\\r\\n\\r\\n        // _newMeanSpread is the weighted spread of the existing position and the new position\\r\\n        _newMeanSpread = portfolio[_userId][ _marketId].meanEntrySpread * (portfolio[_userId][ _marketId].shortShares);\\r\\n        _newMeanSpread = _newMeanSpread + (orders[_orderId].marketSpread * (orders[_orderId].modifyPosition.shortSharesOrder));\\r\\n        _newMeanSpread = _newMeanSpread / (_adjustedShortShares + (orders[_orderId].modifyPosition.shortSharesOrder));\\r\\n\\r\\n        orders[_orderId].modifyPosition.balanceDown = orders[_orderId].modifyPosition.shortSharesOrder * (orders[_orderId].marketPrice) + (\\r\\n            orders[_orderId].modifyPosition.shortSharesOrder * (orders[_orderId].marketSpread) * (orders[_orderId].orderLeverage) / (PRECISION)\\r\\n        );\\r\\n        orders[_orderId].modifyPosition.balanceUp = 0;\\r\\n        orders[_orderId].modifyPosition.newLongShares = portfolio[_userId][ _marketId].longShares;\\r\\n        orders[_orderId].modifyPosition.newShortShares = _adjustedShortShares + (orders[_orderId].modifyPosition.shortSharesOrder);\\r\\n        orders[_orderId].modifyPosition.newMeanEntryPrice = orders[_orderId].marketPrice;\\r\\n        orders[_orderId].modifyPosition.newMeanEntrySpread = _newMeanSpread;\\r\\n        orders[_orderId].modifyPosition.newMeanEntryLeverage = _newMeanLeverage;\\r\\n\\r\\n        setPositionInState(_orderId);\\r\\n    }\\r\\n\\r\\n    function computeLiquidationPrice(bytes32 _orderId) public returns(uint256 _liquidationPrice) {\\r\\n        orders[_orderId].modifyPosition.newLiquidationPrice = 0;\\r\\n        if (orders[_orderId].modifyPosition.newLongShares > 0) {\\r\\n            orders[_orderId].modifyPosition.newLiquidationPrice = getLiquidationPrice(orders[_orderId].modifyPosition.newMeanEntryPrice, orders[_orderId].modifyPosition.newMeanEntryLeverage, true, orders[_orderId].timeStamp);\\r\\n        }\\r\\n        if (orders[_orderId].modifyPosition.newShortShares > 0) {\\r\\n            orders[_orderId].modifyPosition.newLiquidationPrice = getLiquidationPrice(orders[_orderId].modifyPosition.newMeanEntryPrice, orders[_orderId].modifyPosition.newMeanEntryLeverage, false, orders[_orderId].timeStamp);\\r\\n        }\\r\\n        return orders[_orderId].modifyPosition.newLiquidationPrice;\\r\\n    }\\r\\n\\r\\n    function getLiquidationPrice(uint256 _newMeanEntryPrice, uint256 _newMeanEntryLeverage, bool _long, uint _positionTimestampInMs) public view returns (uint256) {\\r\\n        uint _liquidationPrice;\\r\\n        uint marginInterest = calculateMarginInterest(_newMeanEntryPrice, _newMeanEntryLeverage, _positionTimestampInMs);\\r\\n        uint adjustedMarginInterest = marginInterest * PRECISION / _newMeanEntryLeverage;\\r\\n        if (_long == true) {\\r\\n            _liquidationPrice = _newMeanEntryPrice * (_newMeanEntryLeverage - (PRECISION)) / (_newMeanEntryLeverage);\\r\\n            _liquidationPrice += adjustedMarginInterest;\\r\\n        } else {\\r\\n            _liquidationPrice = _newMeanEntryPrice * (_newMeanEntryLeverage + (PRECISION)) / (_newMeanEntryLeverage);\\r\\n            _liquidationPrice -= adjustedMarginInterest;\\r\\n        }\\r\\n        return _liquidationPrice;\\r\\n    }\\r\\n\\r\\n    \\r\\n// ----------------------------------------------------------------------------\\r\\n// setPositionInState(bytes32 _orderId)\\r\\n// Updates the portfolio in Morpher State. Called by closeLong/closeShort/openLong/openShort\\r\\n// ----------------------------------------------------------------------------\\r\\n    function setPositionInState(bytes32 _orderId) private {\\r\\n        require(MorpherToken(morpherState.morpherTokenAddress()).balanceOf(orders[_orderId].userId) + (orders[_orderId].modifyPosition.balanceUp) >= orders[_orderId].modifyPosition.balanceDown, \\\"MorpherTradeEngine: insufficient funds.\\\");\\r\\n        computeLiquidationPrice(_orderId);\\r\\n        // Net balanceUp and balanceDown\\r\\n        if (orders[_orderId].modifyPosition.balanceUp > orders[_orderId].modifyPosition.balanceDown) {\\r\\n            orders[_orderId].modifyPosition.balanceUp -= (orders[_orderId].modifyPosition.balanceDown);\\r\\n            orders[_orderId].modifyPosition.balanceDown = 0;\\r\\n        } else {\\r\\n            orders[_orderId].modifyPosition.balanceDown -= (orders[_orderId].modifyPosition.balanceUp);\\r\\n            orders[_orderId].modifyPosition.balanceUp = 0;\\r\\n        }\\r\\n        if (orders[_orderId].modifyPosition.balanceUp > 0) {\\r\\n            MorpherToken(morpherState.morpherMintingLimiterAddress()).mint(orders[_orderId].userId, orders[_orderId].modifyPosition.balanceUp);\\r\\n        }\\r\\n        if (orders[_orderId].modifyPosition.balanceDown > 0) {\\r\\n            MorpherToken(morpherState.morpherTokenAddress()).burn(orders[_orderId].userId, orders[_orderId].modifyPosition.balanceDown);\\r\\n        }\\r\\n        _setPosition(\\r\\n            orders[_orderId].userId,\\r\\n            orders[_orderId].marketId,\\r\\n            orders[_orderId].timeStamp,\\r\\n            orders[_orderId].modifyPosition.newLongShares,\\r\\n            orders[_orderId].modifyPosition.newShortShares,\\r\\n            orders[_orderId].modifyPosition.newMeanEntryPrice,\\r\\n            orders[_orderId].modifyPosition.newMeanEntrySpread,\\r\\n            orders[_orderId].modifyPosition.newMeanEntryLeverage,\\r\\n            orders[_orderId].modifyPosition.newLiquidationPrice\\r\\n        );\\r\\n        emit PositionUpdated(\\r\\n            orders[_orderId].userId,\\r\\n            orders[_orderId].marketId,\\r\\n            orders[_orderId].timeStamp,\\r\\n            orders[_orderId].modifyPosition.newLongShares,\\r\\n            orders[_orderId].modifyPosition.newShortShares,\\r\\n            orders[_orderId].modifyPosition.newMeanEntryPrice,\\r\\n            orders[_orderId].modifyPosition.newMeanEntrySpread,\\r\\n            orders[_orderId].modifyPosition.newMeanEntryLeverage,\\r\\n            orders[_orderId].modifyPosition.newLiquidationPrice,\\r\\n            orders[_orderId].modifyPosition.balanceUp,\\r\\n            orders[_orderId].modifyPosition.balanceDown\\r\\n        );\\r\\n    }\\r\\n\\r\\n     function setPosition(\\r\\n        address _address,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _longShares,\\r\\n        uint256 _shortShares,\\r\\n        uint256 _meanEntryPrice,\\r\\n        uint256 _meanEntrySpread,\\r\\n        uint256 _meanEntryLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n    ) public onlyRole(POSITIONADMIN_ROLE) {\\r\\n        _setPosition(_address,\\r\\n        _marketId,\\r\\n        _timeStamp,\\r\\n        _longShares,\\r\\n        _shortShares,\\r\\n        _meanEntryPrice,\\r\\n        _meanEntrySpread,\\r\\n        _meanEntryLeverage,\\r\\n        _liquidationPrice);\\r\\n    }\\r\\n\\r\\n     function _setPosition(\\r\\n        address _address,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _longShares,\\r\\n        uint256 _shortShares,\\r\\n        uint256 _meanEntryPrice,\\r\\n        uint256 _meanEntrySpread,\\r\\n        uint256 _meanEntryLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n    ) internal {\\r\\n        portfolio[_address][_marketId].lastUpdated = _timeStamp;\\r\\n        portfolio[_address][_marketId].longShares = _longShares;\\r\\n        portfolio[_address][_marketId].shortShares = _shortShares;\\r\\n        portfolio[_address][_marketId].meanEntryPrice = _meanEntryPrice;\\r\\n        portfolio[_address][_marketId].meanEntrySpread = _meanEntrySpread;\\r\\n        portfolio[_address][_marketId].meanEntryLeverage = _meanEntryLeverage;\\r\\n        portfolio[_address][_marketId].liquidationPrice = _liquidationPrice;\\r\\n        portfolio[_address][_marketId].positionHash = getPositionHash(\\r\\n            _address,\\r\\n            _marketId,\\r\\n            _timeStamp,\\r\\n            _longShares,\\r\\n            _shortShares,\\r\\n            _meanEntryPrice,\\r\\n            _meanEntrySpread,\\r\\n            _meanEntryLeverage,\\r\\n            _liquidationPrice\\r\\n        );\\r\\n        if (_longShares > 0 || _shortShares > 0) {\\r\\n            addExposureByMarket(_marketId, _address);\\r\\n        } else {\\r\\n            deleteExposureByMarket(_marketId, _address);\\r\\n        }\\r\\n        emit SetPosition(\\r\\n            portfolio[_address][_marketId].positionHash,\\r\\n            _address,\\r\\n            _marketId,\\r\\n            _timeStamp,\\r\\n            _longShares,\\r\\n            _shortShares,\\r\\n            _meanEntryPrice,\\r\\n            _meanEntrySpread,\\r\\n            _meanEntryLeverage,\\r\\n            _liquidationPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getPosition(address _address, bytes32 _marketId) public view returns (position memory) {\\r\\n        return portfolio[_address][_marketId];\\r\\n    }\\r\\n\\r\\n    function getPositionHash(\\r\\n        address _address,\\r\\n        bytes32 _marketId,\\r\\n        uint256 _timeStamp,\\r\\n        uint256 _longShares,\\r\\n        uint256 _shortShares,\\r\\n        uint256 _meanEntryPrice,\\r\\n        uint256 _meanEntrySpread,\\r\\n        uint256 _meanEntryLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n    ) public pure returns (bytes32 _hash) {\\r\\n        return keccak256(\\r\\n            abi.encodePacked(\\r\\n                _address,\\r\\n                _marketId,\\r\\n                _timeStamp,\\r\\n                _longShares,\\r\\n                _shortShares,\\r\\n                _meanEntryPrice,\\r\\n                _meanEntrySpread,\\r\\n                _meanEntryLeverage,\\r\\n                _liquidationPrice\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function addExposureByMarket(bytes32 _symbol, address _address) private {\\r\\n        // Address must not be already recored\\r\\n        uint256 _myExposureIndex = getExposureMappingIndex(_symbol, _address);\\r\\n        if (_myExposureIndex == 0) {\\r\\n            uint256 _maxMappingIndex = getMaxMappingIndex(_symbol) + (1);\\r\\n            setMaxMappingIndex(_symbol, _maxMappingIndex);\\r\\n            setExposureMapping(_symbol, _address, _maxMappingIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function deleteExposureByMarket(bytes32 _symbol, address _address) private {\\r\\n        // Get my index in mapping\\r\\n        uint256 _myExposureIndex = getExposureMappingIndex(_symbol, _address);\\r\\n        // Get last element of mapping\\r\\n        uint256 _lastIndex = getMaxMappingIndex(_symbol);\\r\\n        address _lastAddress = getExposureMappingAddress(_symbol, _lastIndex);\\r\\n        // If _myExposureIndex is greater than 0 (i.e. there is an exposure of that address on that market) delete it\\r\\n        if (_myExposureIndex > 0) {\\r\\n            // If _myExposureIndex is less than _lastIndex overwrite element at _myExposureIndex with element at _lastIndex in\\r\\n            // deleted elements position.\\r\\n            if (_myExposureIndex < _lastIndex) {\\r\\n                setExposureMappingAddress(_symbol, _lastAddress, _myExposureIndex);\\r\\n                setExposureMappingIndex(_symbol, _lastAddress, _myExposureIndex);\\r\\n            }\\r\\n            // Delete _lastIndex and _lastAddress element and reduce maxExposureIndex\\r\\n            setExposureMappingAddress(_symbol, address(0), _lastIndex);\\r\\n            setExposureMappingIndex(_symbol, _address, 0);\\r\\n            // Shouldn't happen, but check that not empty\\r\\n            if (_lastIndex > 0) {\\r\\n                setMaxMappingIndex(_symbol, _lastIndex - (1));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function getMaxMappingIndex(bytes32 _marketId) public view returns(uint256 _maxMappingIndex) {\\r\\n        return exposureByMarket[_marketId].maxMappingIndex;\\r\\n    }\\r\\n\\r\\n    function getExposureMappingIndex(bytes32 _marketId, address _address) public view returns(uint256 _mappingIndex) {\\r\\n        return exposureByMarket[_marketId].index[_address];\\r\\n    }\\r\\n\\r\\n    function getExposureMappingAddress(bytes32 _marketId, uint256 _mappingIndex) public view returns(address _address) {\\r\\n        return exposureByMarket[_marketId].addy[_mappingIndex];\\r\\n    }\\r\\n\\r\\n    function setMaxMappingIndex(bytes32 _marketId, uint256 _maxMappingIndex) private {\\r\\n        exposureByMarket[_marketId].maxMappingIndex = _maxMappingIndex;\\r\\n    }\\r\\n\\r\\n    function setExposureMapping(bytes32 _marketId, address _address, uint256 _index) private {\\r\\n        setExposureMappingIndex(_marketId, _address, _index);\\r\\n        setExposureMappingAddress(_marketId, _address, _index);\\r\\n    }\\r\\n\\r\\n    function setExposureMappingIndex(bytes32 _marketId, address _address, uint256 _index) private {\\r\\n        exposureByMarket[_marketId].index[_address] = _index;\\r\\n    }\\r\\n\\r\\n    function setExposureMappingAddress(bytes32 _marketId, address _address, uint256 _index) private {\\r\\n        exposureByMarket[_marketId].addy[_index] = _address;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MorpherToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\nimport \\\"./MorpherAccessControl.sol\\\";\\n\\ncontract MorpherToken is ERC20Upgradeable, ERC20PausableUpgradeable {\\n\\n    MorpherAccessControl public morpherAccessControl;\\n    \\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n    bytes32 public constant TRANSFERBLOCKED_ROLE = keccak256(\\\"TRANSFERBLOCKED_ROLE\\\");\\n    bytes32 public constant POLYGONMINTER_ROLE = keccak256(\\\"POLYGONMINTER_ROLE\\\");\\n\\n    uint256 private _totalTokensOnOtherChain;\\n    uint256 private _totalTokensInPositions;\\n    bool private _restrictTransfers;\\n\\n    event SetTotalTokensOnOtherChain(uint256 _oldValue, uint256 _newValue);\\n    event SetTotalTokensInPositions(uint256 _oldValue, uint256 _newValue);\\n    event SetRestrictTransfers(bool _oldValue, bool _newValue);\\n\\n    function initialize(address _morpherAccessControl) public initializer {\\n        ERC20Upgradeable.__ERC20_init(\\\"Morpher\\\", \\\"MPH\\\");\\n        morpherAccessControl = MorpherAccessControl(_morpherAccessControl);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(morpherAccessControl.hasRole(role, _msgSender()), \\\"MorpherToken: Permission denied.\\\");\\n        _;\\n    }\\n\\n    // function getMorpherAccessControl() public view returns(address) {\\n    //     return address(morpherAccessControl);\\n    // }\\n\\n    function setRestrictTransfers(bool restrictTransfers) public onlyRole(ADMINISTRATOR_ROLE) {\\n        emit SetRestrictTransfers(_restrictTransfers, restrictTransfers);\\n        _restrictTransfers = restrictTransfers;\\n    }\\n\\n    function getRestrictTransfers() public view returns(bool) {\\n        return _restrictTransfers;\\n    }\\n\\n    function setTotalTokensOnOtherChain(uint256 totalOnOtherChain) public onlyRole(ADMINISTRATOR_ROLE) {\\n        emit SetTotalTokensOnOtherChain(_totalTokensInPositions, totalOnOtherChain);\\n        _totalTokensOnOtherChain = totalOnOtherChain;\\n    }\\n\\n    function getTotalTokensOnOtherChain() public view returns(uint256) {\\n        return _totalTokensOnOtherChain;\\n    }\\n\\n    function setTotalInPositions(uint256 totalTokensInPositions) public onlyRole(ADMINISTRATOR_ROLE) {\\n        emit SetTotalTokensInPositions(_totalTokensInPositions, totalTokensInPositions);\\n        _totalTokensInPositions = totalTokensInPositions;\\n    }\\n\\n    function getTotalTokensInPositions() public view returns(uint256) {\\n        return _totalTokensInPositions;\\n    }\\n\\n\\n    \\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return super.totalSupply() + _totalTokensOnOtherChain + _totalTokensInPositions;\\n    }\\n\\n    function deposit(address user, bytes calldata depositData) external onlyRole(POLYGONMINTER_ROLE) {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyRole(POLYGONMINTER_ROLE) {\\n        _burn(msg.sender, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(morpherAccessControl.hasRole(MINTER_ROLE, _msgSender()), \\\"MorpherToken: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Burns `amount` of tokens for `from`.\\n     *\\n     * See {ERC20-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `BURNER_ROLE`.\\n     */\\n    function burn(address from, uint256 amount) public virtual {\\n        require(morpherAccessControl.hasRole(BURNER_ROLE, _msgSender()), \\\"MorpherToken: must have burner role to burn\\\");\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(morpherAccessControl.hasRole(PAUSER_ROLE, _msgSender()), \\\"MorpherToken: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(morpherAccessControl.hasRole(PAUSER_ROLE, _msgSender()), \\\"MorpherToken: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        require(\\n            !_restrictTransfers || \\n            morpherAccessControl.hasRole(TRANSFER_ROLE, _msgSender()) || \\n            morpherAccessControl.hasRole(MINTER_ROLE, _msgSender()) || \\n            morpherAccessControl.hasRole(BURNER_ROLE, _msgSender()) || \\n            morpherAccessControl.hasRole(TRANSFER_ROLE, from)\\n            , \\\"MorpherToken: Transfer denied\\\");\\n\\n        require(!morpherAccessControl.hasRole(TRANSFERBLOCKED_ROLE, _msgSender()), \\\"MorpherToken: Transfer for User is blocked.\\\");\\n\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/MorpherState.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\r\\npragma solidity 0.8.11;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"./MorpherToken.sol\\\";\\r\\nimport \\\"./MorpherTradeEngine.sol\\\";\\r\\n\\r\\n// ----------------------------------------------------------------------------------\\r\\n// Data and token balance storage of the Morpher platform\\r\\n// Writing access is only granted to platform contracts. The contract can be paused\\r\\n// by an elected platform administrator (see MorpherGovernance) to perform protocol updates.\\r\\n// ----------------------------------------------------------------------------------\\r\\n\\r\\ncontract MorpherState is Initializable, ContextUpgradeable  {\\r\\n\\r\\n    address public morpherAccessControlAddress;\\r\\n    address public morpherAirdropAddress;\\r\\n    address public morpherBridgeAddress;\\r\\n    address public morpherFaucetAddress;\\r\\n    address public morpherGovernanceAddress;\\r\\n    address public morpherMintingLimiterAddress;\\r\\n    address public morpherOracleAddress;\\r\\n    address payable public morpherStakingAddress;\\r\\n    address public morpherTokenAddress;\\r\\n    address public morpherTradeEngineAddress;\\r\\n    address public morpherUserBlockingAddress;\\r\\n\\r\\n    /**\\r\\n     * Roles known to State\\r\\n     */\\r\\n    bytes32 public constant ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\r\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\r\\n    bytes32 public constant PLATFORM_ROLE = keccak256(\\\"PLATFORM_ROLE\\\");\\r\\n \\r\\n\\r\\n    address public morpherRewards;\\r\\n    uint256 public maximumLeverage; // Leverage precision is 1e8, maximum leverage set to 10 initially\\r\\n    uint256 public constant PRECISION = 10**8;\\r\\n    uint256 public constant DECIMALS = 18;\\r\\n    uint256 public constant REWARDPERIOD = 1 days;\\r\\n\\r\\n    uint256 public rewardBasisPoints;\\r\\n    uint256 public lastRewardTime;\\r\\n\\r\\n    bytes32 public sideChainMerkleRoot;\\r\\n    uint256 public sideChainMerkleRootWrittenAtTime;\\r\\n\\r\\n    // Set initial withdraw limit from sidechain to 20m token or 2% of initial supply\\r\\n    uint256 public mainChainWithdrawLimit24;\\r\\n\\r\\n    mapping(bytes32 => bool) private marketActive;\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // Sidechain spam protection\\r\\n    // ----------------------------------------------------------------------------\\r\\n\\r\\n    mapping(address => uint256) private lastRequestBlock;\\r\\n    mapping(address => uint256) private numberOfRequests;\\r\\n    uint256 public numberOfRequestsLimit;\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // Events\\r\\n    // ----------------------------------------------------------------------------\\r\\n    event OperatingRewardMinted(address indexed recipient, uint256 amount);\\r\\n\\r\\n    event RewardsChange(address indexed rewardsAddress, uint256 indexed rewardsBasisPoints);\\r\\n    event LastRewardTime(uint256 indexed rewardsTime);\\r\\n\\r\\n   \\r\\n    event MaximumLeverageChange(uint256 maxLeverage);\\r\\n    event MarketActivated(bytes32 indexed activateMarket);\\r\\n    event MarketDeActivated(bytes32 indexed deActivateMarket);\\r\\n\\r\\n\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        require(MorpherAccessControl(morpherAccessControlAddress).hasRole(role, _msgSender()), \\\"MorpherState: Permission denied.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyBridge {\\r\\n        require(msg.sender == morpherBridgeAddress, \\\"MorpherState: Caller is not the Bridge. Aborting.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMainChain {\\r\\n        require(mainChain == true, \\\"MorpherState: Can only be called on mainchain.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool mainChain;\\r\\n\\r\\n    function initialize(bool _mainChain, address _morpherAccessControlAddress) public initializer {\\r\\n        ContextUpgradeable.__Context_init();\\r\\n        \\r\\n        morpherAccessControlAddress = _morpherAccessControlAddress;\\r\\n        mainChain = _mainChain;\\r\\n\\r\\n        maximumLeverage = 10*PRECISION; // Leverage precision is 1e8, maximum leverage set to 10 initially\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // Setter/Getter functions for platform roles\\r\\n    // ----------------------------------------------------------------------------\\r\\n\\r\\n    event SetMorpherAccessControlAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherAccessControl(address _morpherAccessControlAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherAccessControlAddress(morpherAccessControlAddress, _morpherAccessControlAddress);\\r\\n        morpherAccessControlAddress = _morpherAccessControlAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherAirdropAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherAirdrop(address _morpherAirdropAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherAirdropAddress(morpherAirdropAddress, _morpherAirdropAddress);\\r\\n        morpherAirdropAddress = _morpherAirdropAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherBridgeAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherBridge(address _morpherBridgeAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherBridgeAddress(morpherBridgeAddress, _morpherBridgeAddress);\\r\\n        morpherBridgeAddress = _morpherBridgeAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherFaucetAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherFaucet(address _morpherFaucetAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherFaucetAddress(morpherFaucetAddress, _morpherFaucetAddress);\\r\\n        morpherFaucetAddress = _morpherFaucetAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherGovernanceAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherGovernance(address _morpherGovernanceAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherGovernanceAddress(morpherGovernanceAddress, _morpherGovernanceAddress);\\r\\n        morpherGovernanceAddress = _morpherGovernanceAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherMintingLimiterAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherMintingLimiter(address _morpherMintingLimiterAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherMintingLimiterAddress(morpherMintingLimiterAddress, _morpherMintingLimiterAddress);\\r\\n        morpherMintingLimiterAddress = _morpherMintingLimiterAddress;\\r\\n    }\\r\\n    event SetMorpherOracleAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherOracle(address _morpherOracleAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherOracleAddress(morpherOracleAddress, _morpherOracleAddress);\\r\\n        morpherOracleAddress = _morpherOracleAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherStakingAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherStaking(address payable _morpherStakingAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherStakingAddress(morpherStakingAddress, _morpherStakingAddress);\\r\\n        morpherStakingAddress = _morpherStakingAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherTokenAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherToken(address _morpherTokenAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherTokenAddress(morpherTokenAddress, _morpherTokenAddress);\\r\\n        morpherTokenAddress = _morpherTokenAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherTradeEngineAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherTradeEngine(address _morpherTradeEngineAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherTradeEngineAddress(morpherTradeEngineAddress, _morpherTradeEngineAddress);\\r\\n        morpherTradeEngineAddress = _morpherTradeEngineAddress;\\r\\n    }\\r\\n\\r\\n    event SetMorpherUserBlockingAddress(address _oldAddress, address _newAddress);\\r\\n    function setMorpherUserBlocking(address _morpherUserBlockingAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        emit SetMorpherUserBlockingAddress(morpherUserBlockingAddress, _morpherUserBlockingAddress);\\r\\n        morpherUserBlockingAddress = _morpherUserBlockingAddress;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ----------------------------------------------------------------------------\\r\\n    // Setter/Getter functions for platform administration\\r\\n    // ----------------------------------------------------------------------------\\r\\n\\r\\n    function activateMarket(bytes32 _activateMarket) public onlyRole(ADMINISTRATOR_ROLE)  {\\r\\n        marketActive[_activateMarket] = true;\\r\\n        emit MarketActivated(_activateMarket);\\r\\n    }\\r\\n\\r\\n    function deActivateMarket(bytes32 _deActivateMarket) public onlyRole(ADMINISTRATOR_ROLE)  {\\r\\n        marketActive[_deActivateMarket] = false;\\r\\n        emit MarketDeActivated(_deActivateMarket);\\r\\n    }\\r\\n\\r\\n    function getMarketActive(bytes32 _marketId) public view returns(bool _active) {\\r\\n        return marketActive[_marketId];\\r\\n    }\\r\\n\\r\\n    function setMaximumLeverage(uint256 _newMaximumLeverage) public onlyRole(ADMINISTRATOR_ROLE)  {\\r\\n        require(_newMaximumLeverage > PRECISION, \\\"MorpherState: Leverage precision is 1e8\\\");\\r\\n        maximumLeverage = _newMaximumLeverage;\\r\\n        emit MaximumLeverageChange(_newMaximumLeverage);\\r\\n    }\\r\\n\\r\\n    function getMaximumLeverage() public view returns(uint256 _maxLeverage) {\\r\\n        return maximumLeverage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Backwards compatibility functions\\r\\n     */\\r\\n    function getLastUpdated(address _address, bytes32 _marketHash) public view returns(uint) {\\r\\n        return MorpherTradeEngine(morpherTradeEngineAddress).getPosition(_address, _marketHash).lastUpdated; \\r\\n    }\\r\\n\\r\\n    function totalToken() public view returns(uint) {\\r\\n        return MorpherToken(morpherTokenAddress).totalSupply();\\r\\n    }\\r\\n\\r\\n       function getPosition(\\r\\n        address _address,\\r\\n        bytes32 _marketId\\r\\n    ) public view returns (\\r\\n        uint256 _longShares,\\r\\n        uint256 _shortShares,\\r\\n        uint256 _meanEntryPrice,\\r\\n        uint256 _meanEntrySpread,\\r\\n        uint256 _meanEntryLeverage,\\r\\n        uint256 _liquidationPrice\\r\\n    ) {\\r\\n        MorpherTradeEngine.position memory position = MorpherTradeEngine(morpherTradeEngineAddress).getPosition(_address, _marketId);\\r\\n        return (\\r\\n            position.longShares,\\r\\n            position.shortShares,\\r\\n            position.meanEntryPrice,\\r\\n            position.meanEntrySpread,\\r\\n            position.meanEntryLeverage,\\r\\n            position.liquidationPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MorpherStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\r\\npragma solidity 0.8.11;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./MorpherState.sol\\\";\\r\\nimport \\\"./MorpherUserBlocking.sol\\\";\\r\\nimport \\\"./MorpherToken.sol\\\";\\r\\n\\r\\n// ----------------------------------------------------------------------------------\\r\\n// Staking Morpher Token generates interest\\r\\n// The interest is set to 0.015% a day or ~5.475% in the first year\\r\\n// Stakers will be able to vote on all ProtocolDecisions in MorpherGovernance (soon...)\\r\\n// There is a lockup after staking or topping up (30 days) and a minimum stake (100k MPH)\\r\\n// ----------------------------------------------------------------------------------\\r\\n\\r\\ncontract MorpherStaking is Initializable, ContextUpgradeable {\\r\\n\\r\\n    MorpherState state;\\r\\n\\r\\n    uint256 constant PRECISION = 10**8;\\r\\n    uint256 constant INTERVAL  = 1 days;\\r\\n\\r\\n    bytes32 constant public ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\r\\n    bytes32 constant public STAKINGADMIN_ROLE = keccak256(\\\"STAKINGADMIN_ROLE\\\");\\r\\n\\r\\n    //mapping(address => uint256) private poolShares;\\r\\n    //mapping(address => uint256) private lockup;\\r\\n\\r\\n    uint256 public poolShareValue;\\r\\n    uint256 public lastReward;\\r\\n    uint256 public totalShares;\\r\\n    //uint256 public interestRate = 15000; // 0.015% per day initially, diminishing returns over time\\r\\n    struct InterestRate {\\r\\n        uint256 validFrom;\\r\\n        uint256 rate;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => InterestRate) public interestRates;\\r\\n    uint256 public numInterestRates;\\r\\n\\r\\n    uint256 public lockupPeriod; // to prevent tactical staking and ensure smooth governance\\r\\n    uint256 public minimumStake; // 100k MPH minimum\\r\\n\\r\\n    address public stakingAddress;\\r\\n    bytes32 public marketIdStakingMPH; //STAKING_MPH\\r\\n\\r\\n    struct PoolShares {\\r\\n        uint256 numPoolShares;\\r\\n        uint256 lockedUntil;\\r\\n    }\\r\\n    mapping(address => PoolShares) public poolShares;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Events\\r\\n// ----------------------------------------------------------------------------\\r\\n    event SetInterestRate(uint256 newInterestRate);\\r\\n    event InterestRateAdded(uint256 interestRate, uint256 validFromTimestamp);\\r\\n    event InterestRateRateChanged(uint256 interstRateIndex, uint256 oldvalue, uint256 newValue);\\r\\n    event InterestRateValidFromChanged(uint256 interstRateIndex, uint256 oldvalue, uint256 newValue);\\r\\n    event SetLockupPeriod(uint256 newLockupPeriod);\\r\\n    event SetMinimumStake(uint256 newMinimumStake);\\r\\n    event LinkState(address stateAddress);\\r\\n    \\r\\n    event PoolShareValueUpdated(uint256 indexed lastReward, uint256 poolShareValue);\\r\\n    event StakingRewardsMinted(uint256 indexed lastReward, uint256 delta);\\r\\n    event Staked(address indexed userAddress, uint256 indexed amount, uint256 poolShares, uint256 lockedUntil);\\r\\n    event Unstaked(address indexed userAddress, uint256 indexed amount, uint256 poolShares);\\r\\n    \\r\\n    \\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        require(MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(role, _msgSender()), \\\"MorpherToken: Permission denied.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier userNotBlocked {\\r\\n        require(!MorpherUserBlocking(state.morpherUserBlockingAddress()).userIsBlocked(msg.sender), \\\"MorpherStaking: User is blocked\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function initialize(address _morpherState) public initializer {\\r\\n        ContextUpgradeable.__Context_init();\\r\\n\\r\\n        state = MorpherState(_morpherState);\\r\\n        \\r\\n        lastReward = block.timestamp;\\r\\n        lockupPeriod = 30 days; // to prevent tactical staking and ensure smooth governance\\r\\n        minimumStake = 10**23; // 100k MPH minimum\\r\\n        stakingAddress = 0x2222222222222222222222222222222222222222;\\r\\n        marketIdStakingMPH = 0x9a31fdde7a3b1444b1befb10735dcc3b72cbd9dd604d2ff45144352bf0f359a6; //STAKING_MPH\\r\\n        poolShareValue = PRECISION;\\r\\n        emit SetLockupPeriod(lockupPeriod);\\r\\n        emit SetMinimumStake(minimumStake);\\r\\n        // missing: transferOwnership to Governance once deployed\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// updatePoolShareValue\\r\\n// Updates the value of the Pool Shares and returns the new value.\\r\\n// Staking rewards are linear, there is no compound interest.\\r\\n// ----------------------------------------------------------------------------\\r\\n    \\r\\n    function updatePoolShareValue() public returns (uint256 _newPoolShareValue) {\\r\\n        if (block.timestamp >= lastReward + INTERVAL) {\\r\\n            uint256 _numOfIntervals = block.timestamp - lastReward / INTERVAL;\\r\\n            poolShareValue = poolShareValue + (_numOfIntervals * interestRate());\\r\\n            lastReward = lastReward + (_numOfIntervals * (INTERVAL));\\r\\n            emit PoolShareValueUpdated(lastReward, poolShareValue);\\r\\n        }\\r\\n        //mintStakingRewards(); //burning/minting does not influence this\\r\\n        return poolShareValue;        \\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Staking rewards are minted if necessary\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    // function mintStakingRewards() private {\\r\\n    //     uint256 _targetBalance = poolShareValue * (totalShares);\\r\\n    //     if (MorpherToken(state.morpherTokenAddress()).balanceOf(stakingAddress) < _targetBalance) {\\r\\n    //         // If there are not enough token held by the contract, mint them\\r\\n    //         uint256 _delta = _targetBalance - (MorpherToken(state.morpherTokenAddress()).balanceOf(stakingAddress));\\r\\n    //         MorpherToken(state.morpherTokenAddress()).mint(stakingAddress, _delta);\\r\\n    //         emit StakingRewardsMinted(lastReward, _delta);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// stake(uint256 _amount)\\r\\n// User specifies an amount they intend to stake. Pool Shares are issued accordingly\\r\\n// and the _amount is transferred to the staking contract\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function stake(uint256 _amount) public userNotBlocked returns (uint256 _poolShares) {\\r\\n        require(MorpherToken(state.morpherTokenAddress()).balanceOf(msg.sender) >= _amount, \\\"MorpherStaking: insufficient MPH token balance\\\");\\r\\n        updatePoolShareValue();\\r\\n        _poolShares = _amount / (poolShareValue);\\r\\n        uint _numOfShares = poolShares[msg.sender].numPoolShares;\\r\\n        require(minimumStake <= _numOfShares + _poolShares * poolShareValue, \\\"MorpherStaking: stake amount lower than minimum stake\\\");\\r\\n        MorpherToken(state.morpherTokenAddress()).burn(msg.sender, _poolShares * (poolShareValue));\\r\\n        totalShares = totalShares + (_poolShares);\\r\\n        poolShares[msg.sender].numPoolShares = _numOfShares + _poolShares;\\r\\n        poolShares[msg.sender].lockedUntil = block.timestamp + lockupPeriod;\\r\\n        emit Staked(msg.sender, _amount, _poolShares, block.timestamp + (lockupPeriod));\\r\\n        return _poolShares;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// unstake(uint256 _amount)\\r\\n// User specifies number of Pool Shares they want to unstake. \\r\\n// Pool Shares get deleted and the user receives their MPH plus interest\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function unstake(uint256 _numOfShares) public userNotBlocked returns (uint256 _amount) {\\r\\n        uint256 _numOfExistingShares = poolShares[msg.sender].numPoolShares;\\r\\n        require(_numOfShares <= _numOfExistingShares, \\\"MorpherStaking: insufficient pool shares\\\");\\r\\n\\r\\n        uint256 lockedInUntil = poolShares[msg.sender].lockedUntil;\\r\\n        require(block.timestamp >= lockedInUntil, \\\"MorpherStaking: cannot unstake before lockup expiration\\\");\\r\\n        updatePoolShareValue();\\r\\n        poolShares[msg.sender].numPoolShares = poolShares[msg.sender].numPoolShares - _numOfShares;\\r\\n        totalShares = totalShares - _numOfShares;\\r\\n        _amount = _numOfShares * poolShareValue;\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(msg.sender, _amount);\\r\\n        emit Unstaked(msg.sender, _amount, _numOfShares);\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Administrative functions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function setMorpherStateAddress(address _stateAddress) public onlyRole(ADMINISTRATOR_ROLE) {\\r\\n        state = MorpherState(_stateAddress);\\r\\n        emit LinkState(_stateAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    Interest rate\\r\\n     */\\r\\n    function setInterestRate(uint256 _interestRate) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        addInterestRate(_interestRate, block.timestamp);\\r\\n    }\\r\\n\\r\\n/**\\r\\n    fallback function in case the old tradeengine asks for the current interest rate\\r\\n */\\r\\n    function interestRate() public view returns (uint256) {\\r\\n        //start with the last one, as its most likely the last active one, no need to run through the whole map\\r\\n        if(numInterestRates == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        for(uint256 i = numInterestRates - 1; i >= 0; i--) {\\r\\n            if(interestRates[i].validFrom <= block.timestamp) {\\r\\n                return interestRates[i].rate;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function addInterestRate(uint _rate, uint _validFrom) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        require(numInterestRates == 0 || interestRates[numInterestRates-1].validFrom < _validFrom, \\\"MorpherStaking: Interest Rate Valid From must be later than last interestRate\\\");\\r\\n        //omitting rate sanity checks here. It should always be smaller than 100% (100000000) but I'll leave that to the common sense of the admin.\\r\\n        updatePoolShareValue();\\r\\n        interestRates[numInterestRates].validFrom = _validFrom;\\r\\n        interestRates[numInterestRates].rate = _rate;\\r\\n        numInterestRates++;\\r\\n        emit InterestRateAdded(_rate, _validFrom);\\r\\n    }\\r\\n\\r\\n    function changeInterestRateValue(uint256 _numInterestRate, uint256 _rate) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        emit InterestRateRateChanged(_numInterestRate, interestRates[_numInterestRate].rate, _rate);\\r\\n        updatePoolShareValue();\\r\\n        interestRates[_numInterestRate].rate = _rate;\\r\\n    }\\r\\n    function changeInterestRateValidFrom(uint256 _numInterestRate, uint256 _validFrom) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        emit InterestRateValidFromChanged(_numInterestRate, interestRates[_numInterestRate].validFrom, _validFrom);\\r\\n        require(numInterestRates > _numInterestRate, \\\"MorpherStaking: Interest Rate Does not exist!\\\");\\r\\n        require(\\r\\n            (_numInterestRate == 0 && numInterestRates-1 > 0 && interestRates[_numInterestRate+1].validFrom > _validFrom) || //we change the first one and there exist more than one\\r\\n            (_numInterestRate > 0 && _numInterestRate == numInterestRates-1 && interestRates[_numInterestRate - 1].validFrom < _validFrom) || //we changed the last one\\r\\n            (_numInterestRate > 0 && _numInterestRate < numInterestRates-1 && interestRates[_numInterestRate - 1].validFrom < _validFrom && interestRates[_numInterestRate + 1].validFrom > _validFrom),\\r\\n            \\\"MorpherStaking: validFrom cannot be smaller than previous Interest Rate or larger than next Interest Rate\\\"\\r\\n            );\\r\\n        updatePoolShareValue();\\r\\n        interestRates[_numInterestRate].validFrom = _validFrom;\\r\\n    }\\r\\n\\r\\n     function getInterestRate(uint256 _positionTimestamp) public view returns(uint256) {\\r\\n        uint256 sumInterestRatesWeighted = 0;\\r\\n        uint256 startingTimestamp = 0;\\r\\n        \\r\\n        for(uint256 i = 0; i < numInterestRates; i++) {\\r\\n            if(i == numInterestRates-1 || interestRates[i+1].validFrom > block.timestamp) {\\r\\n                //reached last interest rate\\r\\n                sumInterestRatesWeighted = sumInterestRatesWeighted + (interestRates[i].rate * (block.timestamp - interestRates[i].validFrom));\\r\\n                if(startingTimestamp == 0) {\\r\\n                    startingTimestamp = interestRates[i].validFrom;\\r\\n                }\\r\\n                break; //in case there are more in the future\\r\\n            } else {\\r\\n                //only take interest rates after the position was created\\r\\n                if(interestRates[i+1].validFrom > _positionTimestamp) {\\r\\n                    sumInterestRatesWeighted = sumInterestRatesWeighted + (interestRates[i].rate * (interestRates[i+1].validFrom - interestRates[i].validFrom));\\r\\n                    if(interestRates[i].validFrom <= _positionTimestamp) {\\r\\n                        startingTimestamp = interestRates[i].validFrom;\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n        uint interestRateInternal = sumInterestRatesWeighted / (block.timestamp - startingTimestamp);\\r\\n        return interestRateInternal;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setLockupPeriodRate(uint256 _lockupPeriod) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        lockupPeriod = _lockupPeriod;\\r\\n        emit SetLockupPeriod(_lockupPeriod);\\r\\n    }\\r\\n    \\r\\n    function setMinimumStake(uint256 _minimumStake) public onlyRole(STAKINGADMIN_ROLE) {\\r\\n        minimumStake = _minimumStake;\\r\\n        emit SetMinimumStake(_minimumStake);\\r\\n    }\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Getter functions\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\n    function getTotalPooledValue() public view returns (uint256 _totalPooled) {\\r\\n        // Only accurate if poolShareValue is up to date\\r\\n        return poolShareValue * (totalShares);\\r\\n    }\\r\\n\\r\\n    function getStake(address _address) public view returns (uint256 _poolShares) {\\r\\n        return poolShares[_address].numPoolShares;\\r\\n    }\\r\\n\\r\\n    function getStakeValue(address _address) public view returns(uint256 _value, uint256 _lastUpdate) {\\r\\n        // Only accurate if poolShareValue is up to date\\r\\n        return (getStake(_address) * (poolShareValue), lastReward);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MorpherMintingLimiter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./MorpherAccessControl.sol\\\";\\r\\nimport \\\"./MorpherState.sol\\\";\\r\\nimport \\\"./MorpherTradeEngine.sol\\\";\\r\\nimport \\\"./MorpherToken.sol\\\";\\r\\n\\r\\n\\r\\ncontract MorpherMintingLimiter {\\r\\n\\r\\n    bytes32 constant public ADMINISTRATOR_ROLE = keccak256(\\\"ADMINISTRATOR_ROLE\\\");\\r\\n\\r\\n    uint256 public mintingLimitPerUser;\\r\\n    uint256 public mintingLimitDaily;\\r\\n    uint256 public timeLockingPeriod;\\r\\n\\r\\n    mapping(address => uint256) public escrowedTokens;\\r\\n    mapping(address => uint256) public lockedUntil;\\r\\n    mapping(uint256 => uint256) public dailyMintedTokens;\\r\\n\\r\\n    address tradeEngineAddress; \\r\\n    MorpherState state;\\r\\n\\r\\n    event MintingEscrowed(address _user, uint256 _tokenAmount);\\r\\n    event EscrowReleased(address _user, uint256 _tokenAmount);\\r\\n    event MintingDenied(address _user, uint256 _tokenAmount);\\r\\n    event MintingLimitUpdatedPerUser(uint256 _mintingLimitOld, uint256 _mintingLimitNew);\\r\\n    event MintingLimitUpdatedDaily(uint256 _mintingLimitOld, uint256 _mintingLimitNew);\\r\\n    event TimeLockPeriodUpdated(uint256 _timeLockPeriodOld, uint256 _timeLockPeriodNew);\\r\\n    event TradeEngineAddressSet(address _tradeEngineAddress);\\r\\n    event DailyMintedTokensReset();\\r\\n\\r\\n    modifier onlyTradeEngine() {\\r\\n        require(msg.sender == state.morpherTradeEngineAddress(), \\\"MorpherMintingLimiter: Only Trade Engine is allowed to call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdministrator() {\\r\\n        require(MorpherAccessControl(state.morpherAccessControlAddress()).hasRole(ADMINISTRATOR_ROLE, msg.sender), \\\"MorpherMintingLimiter: Only Administrator can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _stateAddress, uint256 _mintingLimitPerUser, uint256 _mintingLimitDaily, uint256 _timeLockingPeriodInSeconds) {\\r\\n        state = MorpherState(_stateAddress);\\r\\n        mintingLimitPerUser = _mintingLimitPerUser;\\r\\n        mintingLimitDaily = _mintingLimitDaily;\\r\\n        timeLockingPeriod = _timeLockingPeriodInSeconds;\\r\\n    }\\r\\n\\r\\n    function setTradeEngineAddress(address _tradeEngineAddress) public onlyAdministrator {\\r\\n        emit TradeEngineAddressSet(_tradeEngineAddress);\\r\\n        tradeEngineAddress = _tradeEngineAddress;\\r\\n    }\\r\\n    \\r\\n\\r\\n    function setMintingLimitDaily(uint256 _newMintingLimit) public onlyAdministrator {\\r\\n        emit MintingLimitUpdatedDaily(mintingLimitDaily, _newMintingLimit);\\r\\n        mintingLimitDaily = _newMintingLimit;\\r\\n    }\\r\\n    function setMintingLimitPerUser(uint256 _newMintingLimit) public onlyAdministrator {\\r\\n        emit MintingLimitUpdatedPerUser(mintingLimitDaily, _newMintingLimit);\\r\\n        mintingLimitPerUser = _newMintingLimit;\\r\\n    }\\r\\n\\r\\n    function setTimeLockingPeriod(uint256 _newTimeLockingPeriodInSeconds) public onlyAdministrator {\\r\\n        emit TimeLockPeriodUpdated(timeLockingPeriod, _newTimeLockingPeriodInSeconds);\\r\\n        timeLockingPeriod = _newTimeLockingPeriodInSeconds;\\r\\n    }\\r\\n\\r\\n    function mint(address _user, uint256 _tokenAmount) public onlyTradeEngine {\\r\\n        uint256 mintingDay = block.timestamp / 1 days;\\r\\n        if((mintingLimitDaily == 0 || dailyMintedTokens[mintingDay] + (_tokenAmount) <= mintingLimitDaily) && (mintingLimitPerUser == 0 || _tokenAmount <= mintingLimitPerUser )) {\\r\\n            MorpherToken(state.morpherTokenAddress()).mint(_user, _tokenAmount);\\r\\n            dailyMintedTokens[mintingDay] = dailyMintedTokens[mintingDay] + (_tokenAmount);\\r\\n        } else {\\r\\n            escrowedTokens[_user] = escrowedTokens[_user] + (_tokenAmount);\\r\\n            lockedUntil[_user] = block.timestamp + timeLockingPeriod;\\r\\n            emit MintingEscrowed(_user, _tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function delayedMint(address _user) public {\\r\\n        require(lockedUntil[_user] <= block.timestamp, \\\"MorpherMintingLimiter: Funds are still time locked\\\");\\r\\n        uint256 sendAmount = escrowedTokens[_user];\\r\\n        escrowedTokens[_user] = 0;\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(_user, sendAmount);\\r\\n        emit EscrowReleased(_user, sendAmount);\\r\\n    }\\r\\n\\r\\n    function adminApprovedMint(address _user, uint256 _tokenAmount) public onlyAdministrator {\\r\\n        escrowedTokens[_user] = escrowedTokens[_user] - (_tokenAmount);\\r\\n        MorpherToken(state.morpherTokenAddress()).mint(_user, _tokenAmount);\\r\\n        emit EscrowReleased(_user, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    function adminDisapproveMint(address _user, uint256 _tokenAmount) public onlyAdministrator {\\r\\n        escrowedTokens[_user] = escrowedTokens[_user] - (_tokenAmount);\\r\\n        emit MintingDenied(_user, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    function resetDailyMintedTokens() public onlyAdministrator {\\r\\n        dailyMintedTokens[block.timestamp / 1 days] = 0;\\r\\n        emit DailyMintedTokensReset();\\r\\n    }\\r\\n\\r\\n    function getDailyMintedTokens() public view returns(uint256) {\\r\\n        return dailyMintedTokens[block.timestamp / 1 days];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/MorpherAccessControl.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\ncontract MorpherAccessControl is AccessControlEnumerableUpgradeable {\\n\\n    function initialize() public initializer {\\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ClaimFailedTransferToSidechain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"LinkState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sidechainTransactionHash\",\"type\":\"bytes32\"}],\"name\":\"OperatorChainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionHash\",\"type\":\"bytes32\"}],\"name\":\"PositionRecoveryFromSideChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"SideChainMerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionHash\",\"type\":\"bytes32\"}],\"name\":\"TokenRecoveryFromSideChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokenSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"TransferToLinkedChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokenSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userSigature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferHash\",\"type\":\"bytes32\"}],\"name\":\"TransferToLinkedChainAndWithdrawTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TrustlessWithdrawFromSideChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitDailyGlobalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitDailyPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitMonthlyGlobalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitMonthlyPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawLimitReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitYearlyGlobalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"WithdrawLimitYearlyPerUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_convertedToGasToken\",\"type\":\"bool\"}],\"name\":\"WithdrawalSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMINISTRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIDECHAINOPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wrongSideChainBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"}],\"name\":\"claimFailedTransferToSidechain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimFromInactivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimStagedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usrAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable\",\"name\":\"_finalOutput\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_userConfirmationSignature\",\"type\":\"bytes\"}],\"name\":\"claimStagedTokensAndSendForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable\",\"name\":\"_finalOutput\",\"type\":\"address\"}],\"name\":\"claimStagedTokensConvertAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usrAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numOfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable\",\"name\":\"_finalOutput\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_userConfirmationSignature\",\"type\":\"bytes\"}],\"name\":\"claimStagedTokensConvertAndSendForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"getBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethWmaticAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inactivityPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_recoveryEnabled\",\"type\":\"bool\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isNotDailyLimitExceeding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isNotMonthlyLimitExceeding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isNotYearlyLimitExceeding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"mProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isTrue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_meanEntryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_meanEntrySpread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_meanEntryLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPrice\",\"type\":\"uint256\"}],\"name\":\"recoverPositionFromInactivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"recoverTokenFromInactivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodInSeconds\",\"type\":\"uint256\"}],\"name\":\"setInactivityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stateAddress\",\"type\":\"address\"}],\"name\":\"setMorpherState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"}],\"name\":\"stageTokensForTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_autoWithdrawalAddressTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"stageTokensForTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenClaimedOnThisChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSentToLinkedChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"}],\"name\":\"updateSideChainMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitGlobalDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitGlobalMonthly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitGlobalYearly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitPerUserDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitPerUserMonthly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawLimitPerUserYearly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"verifyUpdateDailyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"verifyUpdateMonthlyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"verifyUpdateYearlyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitGlobalDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitGlobalMonthly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitGlobalYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitPerUserDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitPerUserMonthly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitPerUserYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalPerUserPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalPerUserPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalPerUserPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalsGlobalDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalsGlobalMonthly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalsGlobalYearly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MorpherBridge", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}