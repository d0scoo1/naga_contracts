{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\npragma abicoder v2;\n\n\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.4.2/Context\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.4.2/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.4.2/ReentrancyGuard\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.4.2/IERC721\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.4.2/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: Marketplace.sol\n\ncontract Marketplace is Ownable, ReentrancyGuard {\n\taddress public tokenContractAddress; // ERC721 NFT contract address\n\taddress public communityOwnerAddress; // community owner, provide in constructor\n\taddress public companyAddress; // company address, provide in constructor\n\n\tstring public name; // conctract name\n\tuint16 public totalSupply; // number of NFTs in circulation\n\tuint16 public royalty; // royalty percentege (expressed in tenthousandths 0-10000, this gives two decimal resolution)\n\tuint16 public companyShare; // percentage of Galaxis' share from the owner's royalty\n\tIERC721 private tokenContract; // ERC721 NFT token contract\n\n\tstruct Offer {\n\t\tbool isForSale; // cariable to check sale status\n\t\taddress seller; // seller address\n\t\tuint256 value; // in ether\n\t\taddress onlySellTo; // specify to sell only to a specific person\n\t}\n\n\tstruct Bid {\n\t\tbool hasBid; // variable to check bid status\n\t\taddress bidder; // bidder address\n\t\tuint256 value; // in ether\n\t}\n\n\t// map offers and bids for each token\n\tmapping(uint256 => Offer) public cardsForSale; // list of cards of for sale\n\tmapping(uint256 => Bid) public cardBids; // list of bids on cards\n\tmapping(address => bool) public permitted; // permitted to modify owner royalty\n\n\tevent OfferForSale(address _from, address _to, uint16 _tokenId, uint256 _value);\n\tevent OfferExecuted(address _from, address _to, uint16 _tokenId, uint256 _value);\n\tevent OfferRevoked(address _from, address _to, uint16 _tokenId, uint256 _value);\n\n\tevent ModifyOfferValue(address _from, uint16 _tokenId, uint256 _value);\n\tevent ModifyOfferSellTo(address _from, uint16 _tokenId, address _sellOnlyTo);\n\tevent ModifyOfferBoth(address _from, uint16 _tokenId, uint256 _value, address _sellOnlyTo);\n\n\tevent BidReceived(address _from, address _to, uint16 _tokenId, uint256 _newValue, uint256 _prevValue);\n\tevent BidAccepted(address _from, address _to, uint16 _tokenId, uint256 _value);\n\tevent BidRevoked(address _from, address _to, uint16 _tokenId, uint256 _value);\n\n\tevent RoyaltyChanged(address _from, uint16 _royalty);\n\tevent CompanyShareChanged(address _from, uint16 _share);\n\tevent CommunityOwnerAddressChanged(address _address);\n\tevent CompanyOwnerAddressChanged(address _address);\n\n\tmodifier onlyAllowed() {\n\t\trequire(permitted[msg.sender], \"Unauthorised\");\n\t\t_;\n\t}\n\n\tconstructor(\n\t\tstring memory _name,\n\t\taddress _tokenContractAddress,\n\t\taddress _communityOwnerAddress,\n\t\taddress _companyAddress,\n\t\tuint16 _totalSupply,\n\t\tuint16 _royalty\n\t) {\n\t\trequire(royalty <= 10000, \"Royalty value should be below 10000.\");\n\t\tname = _name; // set the name for display purposes\n\t\ttokenContractAddress = _tokenContractAddress;\n\t\tcommunityOwnerAddress = _communityOwnerAddress;\n\t\tcompanyAddress = _companyAddress;\n\t\ttotalSupply = _totalSupply;\n\t\troyalty = _royalty;\n\t\tcompanyShare = 500;\n\n\t\ttokenContract = IERC721(_tokenContractAddress); // initialize the NFT contract\n\t\tpermitted[msg.sender] = true; // sender is going to be permitted to change royalty\n\t\tpermitted[communityOwnerAddress] = true; // community owner address\n\t}\n\n\tfunction _split(address _seller, uint256 _amount) internal {\n\t\tuint256 royaltyAmount = (royalty * _amount) / 10000; // community owner's royalty\n\t\tuint256 companyAmount = (royaltyAmount * companyShare) / 10000; // company's royalty from the owner's royalty\n\t\tuint256 sellerAmount = _amount - royaltyAmount;\n\t\troyaltyAmount -= companyAmount;\n\t\tbool sent;\n\n\t\t(sent, ) = _seller.call{ value: sellerAmount }(\"\");\n\t\trequire(sent, \"Failed to send ether\");\n\t\t(sent, ) = communityOwnerAddress.call{ value: royaltyAmount }(\"\");\n\t\trequire(sent, \"Failed to send ether\");\n\t\t(sent, ) = companyAddress.call{ value: companyAmount }(\"\");\n\t\trequire(sent, \"Failed to send ether\");\n\t}\n\n\t// set the percentage for royalty (expressed in ten-thousandths)\n\tfunction setCommunityOwnerRoyalty(uint16 _royalty) external onlyAllowed {\n\t\trequire(_royalty < 10000, \"Royalty over 100%.\");\n\t\troyalty = _royalty;\n\n\t\temit RoyaltyChanged(msg.sender, royalty);\n\t}\n\n\t// set the percentage for royalty (expressed in ten-thousandths)\n\tfunction setCompanyShare(uint16 _share) external onlyOwner {\n\t\trequire(_share < 10000, \"Share over 100%.\");\n\t\tcompanyShare = _share;\n\n\t\temit CompanyShareChanged(msg.sender, _share);\n\t}\n\n\t// change community owner address\n\tfunction setCommunityOwnerAddress(address _communityOwner) external onlyOwner {\n\t\trequire(_communityOwner != address(0), \"Cannot be ZERO address.\");\n\t\tpermitted[communityOwnerAddress] = false;\n\t\tpermitted[_communityOwner] = true;\n\t\tcommunityOwnerAddress = _communityOwner;\n\n\t\temit CommunityOwnerAddressChanged(_communityOwner);\n\t}\n\n\t// change company address\n\tfunction setCompanyAddress(address _companyAddress) external onlyOwner {\n\t\trequire(_companyAddress != address(0), \"Cannot be ZERO address.\");\n\t\tcompanyAddress = _companyAddress;\n\n\t\temit CommunityOwnerAddressChanged(_companyAddress);\n\t}\n\n\tfunction offerCardForSale(uint16 _tokenId, uint256 _minPriceInWei) external {\n\t\t// check if the contract is approved by token owner\n\t\trequire(tokenContract.isApprovedForAll(msg.sender, address(this)), \"Contract is not approved.\");\n\t\t// check if the offerer owns the card\n\t\trequire(msg.sender == tokenContract.ownerOf(_tokenId), \"Sender does not own this token.\");\n\t\t// check if card id is correct\n\t\trequire(_tokenId < totalSupply, \"Token ID should be smaller than total supply.\");\n\t\t// check if price is set to higher than 0\n\t\trequire(_minPriceInWei > 0, \"Price should be higher than 0.\");\n\t\t// initialize offer for only 1 buyer - _sellOnlyTo\n\t\tcardsForSale[_tokenId] = Offer(true, msg.sender, _minPriceInWei, address(0));\n\n\t\t// emit sale event\n\t\temit OfferForSale(msg.sender, address(0), _tokenId, _minPriceInWei);\n\t}\n\n\tfunction offerCardForSale(\n\t\tuint16 _tokenId,\n\t\tuint256 _minPriceInWei,\n\t\taddress _sellOnlyTo\n\t) external {\n\t\t// check if the contract is approved by token owner\n\t\trequire(tokenContract.isApprovedForAll(msg.sender, address(this)), \"Contract is not approved.\");\n\t\t// check if the offerer owns the card\n\t\trequire(msg.sender == tokenContract.ownerOf(_tokenId), \"Sender does not own this token.\");\n\t\t// check if card id is correct\n\t\trequire(_tokenId < totalSupply, \"Token ID should be smaller than total supply.\");\n\t\t// check if price is set to higher than 0\n\t\trequire(_minPriceInWei > 0, \"Price should be higher than 0.\");\n\t\t// make sure sell only to is not 0x0\n\t\trequire(_sellOnlyTo != address(0), \"Sell only to address cannot be null.\");\n\t\t// initialize offer for only 1 buyer - _sellOnlyTo\n\t\tcardsForSale[_tokenId] = Offer(true, msg.sender, _minPriceInWei, _sellOnlyTo);\n\n\t\t// emit sale event\n\t\temit OfferForSale(msg.sender, _sellOnlyTo, _tokenId, _minPriceInWei);\n\t}\n\n\tfunction modifyOffer(uint16 _tokenId, uint256 _value) external {\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\trequire(msg.sender == offer.seller, \"Sender is not the seller of this token.\"); // check if the offer is active and the seller is the sender\n\t\trequire(_value > 0, \"Price should be higher than 0.\"); // change value has to be higher than 0\n\t\t// modify offer\n\t\tcardsForSale[_tokenId] = Offer(offer.isForSale, offer.seller, _value, offer.onlySellTo);\n\n\t\t// emit modification event\n\t\temit ModifyOfferValue(msg.sender, _tokenId, _value);\n\t}\n\n\tfunction modifyOffer(uint16 _tokenId, address _sellOnlyTo) external {\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\trequire(msg.sender == offer.seller, \"Sender is not the seller of this token.\"); // check if the offer is active and the seller is the sender\n\t\t// modify offer\n\t\tcardsForSale[_tokenId] = Offer(offer.isForSale, offer.seller, offer.value, _sellOnlyTo);\n\n\t\t// emit modification event\n\t\temit ModifyOfferSellTo(msg.sender, _tokenId, _sellOnlyTo);\n\t}\n\n\tfunction modifyOffer(\n\t\tuint16 _tokenId,\n\t\tuint256 _value,\n\t\taddress _sellOnlyTo\n\t) external {\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\t// check if the offer is active and the seller is the sender\n\t\trequire(msg.sender == offer.seller, \"Sender is not the seller of this token.\"); // check if the offer is active and the seller is the sender\n\t\t// modify offer\n\t\trequire(_value > 0, \"Price should be higher than 0.\");\n\t\tcardsForSale[_tokenId] = Offer(offer.isForSale, offer.seller, _value, _sellOnlyTo);\n\t\temit ModifyOfferBoth(msg.sender, _tokenId, _value, _sellOnlyTo);\n\t}\n\n\tfunction revokeOffer(uint16 _tokenId) external {\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\t// check if the offer is ours\n\t\trequire(msg.sender == offer.seller, \"Sender is not the seller of this token.\"); // check if the offer is active and the seller is the sender\n\n\t\tcardsForSale[_tokenId] = Offer(false, address(0), 0, address(0));\n\t\temit OfferRevoked(offer.seller, offer.onlySellTo, _tokenId, offer.value);\n\t}\n\n\tfunction buyItNow(uint16 _tokenId) external payable nonReentrant {\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\t// check if it for sale for someone specific\n\t\tif (offer.onlySellTo != address(0)) {\n\t\t\t// only sell to someone specific\n\t\t\trequire(offer.onlySellTo == msg.sender, \"This coin can be sold only for a specific address.\");\n\t\t}\n\n\t\t// check approval status, user may have modified transfer approval\n\t\trequire(tokenContract.isApprovedForAll(offer.seller, address(this)), \"Contract is not approved.\");\n\n\t\t// check if the offer is valid\n\t\trequire(offer.seller != address(0), \"This token is not for sale.\");\n\t\t// check if offer value is correct\n\t\trequire(offer.value > 0, \"This token is not for sale.\");\n\t\t// check if offer value and sent values march\n\t\trequire(offer.value == msg.value, \"Offer ask price and sent ETH mismatch.\");\n\t\t// make sure buyer is not the owner\n\t\trequire(msg.sender != tokenContract.ownerOf(_tokenId), \"Buyer already owns this token.\");\n\t\t// make sure the seller is the owner\n\t\trequire(offer.seller == tokenContract.ownerOf(_tokenId), \"Seller no longer owns this token.\");\n\n\t\t// save the seller variable\n\t\taddress seller = offer.seller;\n\t\t// reset offer for this card\n\t\tcardsForSale[_tokenId] = Offer(false, address(0), 0, address(0));\n\n\t\t// check if there were any bids on this card\n\t\tBid memory bid = cardBids[_tokenId];\n\t\tif (bid.hasBid) {\n\t\t\t// save bid values and bidder variables\n\t\t\taddress bidder = bid.bidder;\n\t\t\tuint256 amount = bid.value;\n\t\t\t// reset bid\n\t\t\tcardBids[_tokenId] = Bid(false, address(0), 0);\n\t\t\t// send back bid value to bidder\n\t\t\tbool sent;\n\t\t\t(sent, ) = bidder.call{ value: amount }(\"\");\n\t\t\trequire(sent, \"Failed to send back ether to bidder.\");\n\t\t}\n\n\t\t// first send the token to the buyer\n\t\ttokenContract.safeTransferFrom(seller, msg.sender, _tokenId);\n\t\t// transfer ether to acceptor and pay royalty to the community owner\n\t\t_split(seller, msg.value);\n\n\t\t// check if the user recieved the item\n\t\trequire(tokenContract.ownerOf(_tokenId) == msg.sender);\n\n\t\t// emit event\n\t\temit OfferExecuted(offer.seller, msg.sender, _tokenId, offer.value);\n\t}\n\n\tfunction bidOnCard(uint16 _tokenId) external payable nonReentrant {\n\t\taddress cardOwner = tokenContract.ownerOf(_tokenId);\n\t\t// check if card id is valid\n\t\trequire(_tokenId < totalSupply, \"Token ID should be smaller than total supply.\");\n\t\t// make sure the bidder is not the owner\n\t\trequire(msg.sender != cardOwner, \"Cannot bid on owned card.\");\n\t\t// check if bid value is valid\n\t\trequire(msg.value > 0, \"Bid price has to be higher than 0.\");\n\n\t\t// check if there were any bids on this card\n\t\tBid memory bid = cardBids[_tokenId];\n\t\tif (bid.hasBid) {\n\t\t\t// the current bid has to be higher than the previous\n\t\t\trequire(bid.value < msg.value, \"Bid price is below current bid.\");\n\t\t\taddress previousBidder = bid.bidder;\n\t\t\tuint256 amount = bid.value;\n\t\t\t// pay back the previous bidder's ether\n\t\t\tbool sent;\n\t\t\t(sent, ) = previousBidder.call{ value: amount }(\"\");\n\t\t\trequire(sent, \"Failed to send back ether to previous bidder.\");\n\t\t}\n\n\t\t// initialize the bid with the new values\n\t\tcardBids[_tokenId] = Bid(true, msg.sender, msg.value);\n\n\t\t// emit event\n\t\temit BidReceived(msg.sender, cardOwner, _tokenId, msg.value, bid.value);\n\t}\n\n\tfunction acceptBid(uint16 _tokenId) external {\n\t\tBid memory bid = cardBids[_tokenId];\n\n\t\t// make sure there is a valid bid on the card\n\t\trequire(bid.hasBid, \"This token has no bid on it.\");\n\t\t// check if the contract is still approved for transfer\n\t\trequire(tokenContract.isApprovedForAll(msg.sender, address(this)), \"Contract is not approved.\");\n\t\t// check if the token id is valid\n\t\trequire(_tokenId < totalSupply, \"Token ID should be smaller than total supply.\");\n\t\t// make sure the acceptor owns the card\n\t\trequire(msg.sender == tokenContract.ownerOf(_tokenId), \"Sender does not own this token.\");\n\n\t\t// check if the card is offered for sale\n\t\tOffer memory offer = cardsForSale[_tokenId];\n\t\tif (offer.seller != address(0)) {\n\t\t\t// reset offer if the offer exits\n\t\t\tcardsForSale[_tokenId] = Offer(false, address(0), 0, address(0));\n\t\t}\n\n\t\taddress buyer = bid.bidder;\n\t\tuint256 amount = bid.value;\n\n\t\t// reset bid\n\t\tcardBids[_tokenId] = Bid(false, address(0), 0);\n\t\t// transfer ether to acceptor and pay royalty to the community owner\n\t\t_split(msg.sender, amount);\n\t\t// send token from acceptor to the bidder\n\t\ttokenContract.safeTransferFrom(msg.sender, buyer, _tokenId);\n\n\t\t// check if the user receiver the\n\t\trequire(tokenContract.ownerOf(_tokenId) == buyer);\n\n\t\t// emit event\n\t\temit BidAccepted(msg.sender, bid.bidder, _tokenId, amount);\n\t}\n\n\tfunction revokeBid(uint16 _tokenId) external {\n\t\tBid memory bid = cardBids[_tokenId];\n\t\t// check if the bid exists\n\t\trequire(bid.hasBid, \"This token has no bid on it.\");\n\t\t// check if the bidder is the sender of the message\n\t\trequire(bid.bidder == msg.sender, \"Sender is not the current highest bidder.\");\n\t\t// save bid value into a variable\n\t\tuint256 amount = bid.value;\n\n\t\t// reset bid\n\t\tcardBids[_tokenId] = Bid(false, address(0), 0);\n\n\t\t// transfer back their ether\n\t\tbool sent;\n\t\t(sent, ) = msg.sender.call{ value: amount }(\"\");\n\t\trequire(sent, \"Failed to retrieve ether.\");\n\n\t\t// emit event\n\t\temit BidRevoked(msg.sender, bid.bidder, _tokenId, amount);\n\t}\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_companyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevValue\",\"type\":\"uint256\"}],\"name\":\"BidReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BidRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CommunityOwnerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CompanyOwnerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_share\",\"type\":\"uint16\"}],\"name\":\"CompanyShareChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sellOnlyTo\",\"type\":\"address\"}],\"name\":\"ModifyOfferBoth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sellOnlyTo\",\"type\":\"address\"}],\"name\":\"ModifyOfferSellTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ModifyOfferValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"}],\"name\":\"RoyaltyChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"bidOnCard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"buyItNow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyShare\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_sellOnlyTo\",\"type\":\"address\"}],\"name\":\"modifyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellOnlyTo\",\"type\":\"address\"}],\"name\":\"modifyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"modifyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minPriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerCardForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellOnlyTo\",\"type\":\"address\"}],\"name\":\"offerCardForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"revokeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"revokeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalty\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityOwner\",\"type\":\"address\"}],\"name\":\"setCommunityOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_royalty\",\"type\":\"uint16\"}],\"name\":\"setCommunityOwnerRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_companyAddress\",\"type\":\"address\"}],\"name\":\"setCompanyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_share\",\"type\":\"uint16\"}],\"name\":\"setCompanyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000097ca7fe0b0288f5eb85f386fed876618fb9b8ab8000000000000000000000000dd039bc2f412fe5fffb1e821002db075d26414e1000000000000000000000000dd039bc2f412fe5fffb1e821002db075d26414e100000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000001f457468657220436172647320466f756e646572204d61726b6574706c61636500", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}