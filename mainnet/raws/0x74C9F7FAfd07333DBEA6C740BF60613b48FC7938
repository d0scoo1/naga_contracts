{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n// Part: IConvexDeposit\n\ninterface IConvexDeposit {\n    // deposit into convex, receive a tokenized deposit.  parameter to stake immediately (we always do this).\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    // burn a tokenized deposit (Convex deposit tokens) to receive curve lp tokens back\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n    function poolLength() external\n        view\n        returns ( uint256);\n\n    // give us info about a pool based on its pid\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address,\n            bool\n        );\n}\n\n// Part: ISharerV4\n\ninterface ISharerV4{\n    \n    function setContributors(address, address[] memory, uint256[] memory) external;\n}\n\n// Part: IStrategy\n\ninterface IStrategy{\n     function cloneStrategyConvex(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper,\n        address _curveGlobal,\n        uint256 _pid,\n        address _tradeFactory\n    ) external returns (address newStrategy);\n\n    function setHealthCheck(address) external;\n}\n\n// Part: Registry\n\ninterface Registry{\n    function newExperimentalVault(address token, address governance, address guardian, address rewards, string memory name, string memory symbol) external returns (address);\n}\n\n// Part: Vault\n\ninterface Vault{\n    \n    function setGovernance(address) external;\n    function setManagement(address) external;\n    function setDepositLimit(uint256) external;\n    function addStrategy(address, uint, uint, uint, uint) external;\n}\n\n// File: CurveGlobal.sol\n\ncontract CurveGlobal{\n\n    address owner = 0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52;\n    Registry public registry = Registry(address(0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804));\n    IConvexDeposit public convexDeposit = IConvexDeposit(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    address constant public sms = address(0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7);\n    address public ychad = address(0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52);\n    address public devms = address(0x846e211e8ba920B353FB717631C015cf04061Cc9);\n    address public treasury = address(0x93A62dA5a14C80f265DAbC077fCEE437B1a0Efde);\n    address public keeper = address(0x736D7e3c5a6CB2CE3B764300140ABF476F6CFCCF);\n    address public rewardsStrat = address(0xc491599b9A20c3A2F0A85697Ee6D9434EFa9f503);\n    address public healthCheck = address(0xDDCea799fF1699e98EDF118e0629A974Df7DF012);\n    address public tradeFactory = address(0x99d8679bE15011dEAD893EB4F5df474a4e6a8b29);\n\n    address public stratImplementation;\n\n\n    uint256 public keepCRV = 1000; // the percentage of CRV we re-lock for boost (in basis points).Default is 10%.\n    uint256 public performanceFee = 1000;\n\n    address[] public contributors;\n    uint256[] public numOfShares;\n\n\n    constructor() public {\n        contributors = [address(0x8Ef63b525fceF7f8662D98F77f5C9A86ae7dFE09),address(0x03ebbFCc5401beef5B4A06c3BfDd26a75cB09A84),address(0x98AA6B78ed23f4ce2650DA85604ceD5653129A21),address(0xA0308730cE2a6E8C9309688433D46bb05260A816),address(0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7)];\n        numOfShares = [237,237,237,237,52];\n    }\n    function initialise(address _stratImplementation) public{\n        require(stratImplementation == address(0));\n        stratImplementation = _stratImplementation;\n    }\n\n    function setStratImplementation(address _stratImplementation) external {\n        require(msg.sender == owner);\n        stratImplementation = _stratImplementation;\n    }\n    function setHealthcheck(address _health) external {\n        require(msg.sender == owner);\n        healthCheck = _health;\n    }\n    function setStratRewards(address _rewards) external {\n        require(msg.sender == owner);\n        rewardsStrat = _rewards;\n    }\n\n\n\n    // Set the amount of CRV to be locked in Yearn's veCRV voter from each harvest. \n    function setKeepCRV(uint256 _keepCRV) external {\n        require(msg.sender == owner);\n        require(_keepCRV <= 10_000);\n        keepCRV = _keepCRV;\n    }\n\n    function setPerfFee(uint256 _perf) external {\n        require(msg.sender == owner);\n        require(_perf <= 10_000);\n        performanceFee = _perf;\n    }\n\n    function setOwner(address newOwner) external{\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function setDefaultRewards(address[] calldata _contributors, uint256[] calldata _numOfShares ) external{\n        require(msg.sender == owner || msg.sender == sms);\n        contributors = _contributors;\n        numOfShares = _numOfShares;\n    }\n\n    function createNewCurveVaultAndStrat(uint256 _pid, uint256 _depositLimit) external returns (address vault, address strat){\n            \n        (address lptoken, , , , , ) = convexDeposit.poolInfo(_pid);\n\n        vault = registry.newExperimentalVault(lptoken, address(this), devms, treasury, \"\", \"\");\n        Vault(vault).setManagement(sms);\n        Vault(vault).setGovernance(sms);\n        Vault(vault).setDepositLimit(_depositLimit);\n        \n        strat = IStrategy(stratImplementation).cloneStrategyConvex(vault, sms, rewardsStrat, keeper,address(this), _pid, tradeFactory);\n        ISharerV4(rewardsStrat).setContributors(strat, contributors, numOfShares);\n\n        IStrategy(strat).setHealthCheck(healthCheck);\n\n        Vault(vault).addStrategy(strat, 10_000, 0, type(uint256).max, performanceFee);\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexDeposit\",\"outputs\":[{\"internalType\":\"contract IConvexDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"name\":\"createNewCurveVaultAndStrat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratImplementation\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numOfShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsStrat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numOfShares\",\"type\":\"uint256[]\"}],\"name\":\"setDefaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_health\",\"type\":\"address\"}],\"name\":\"setHealthcheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perf\",\"type\":\"uint256\"}],\"name\":\"setPerfFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratImplementation\",\"type\":\"address\"}],\"name\":\"setStratImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setStratRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stratImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ychad\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveGlobal", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}