{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/CompRewardsLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/ICompRewardsLens.sol\\\";\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\nimport \\\"./interfaces/IMorpho.sol\\\";\\n\\nimport \\\"./libraries/CompoundMath.sol\\\";\\n\\n/// @title CompRewardsLens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice This contract exposes getters retrieving information about COMP rewards accrued through Morpho.\\ncontract CompRewardsLens is ICompRewardsLens {\\n    using CompoundMath for uint256;\\n\\n    /// STORAGE ///\\n\\n    IMorpho public immutable morpho;\\n    IComptroller public immutable comptroller;\\n    IRewardsManager public immutable rewardsManager;\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when an invalid cToken address is passed to accrue rewards.\\n    error InvalidCToken();\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs the RewardsManager contract.\\n    /// @param _morpho The address of Morpho's main contract's proxy.\\n    constructor(address _morpho) {\\n        morpho = IMorpho(_morpho);\\n        comptroller = IComptroller(morpho.comptroller());\\n        rewardsManager = IRewardsManager(morpho.rewardsManager());\\n    }\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Returns the unclaimed COMP rewards for the given cToken addresses.\\n    /// @param _cTokenAddresses The cToken addresses for which to compute the rewards.\\n    /// @param _user The address of the user.\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        view\\n        returns (uint256 unclaimedRewards)\\n    {\\n        unclaimedRewards = rewardsManager.userUnclaimedCompRewards(_user);\\n\\n        for (uint256 i; i < _cTokenAddresses.length; ) {\\n            address cTokenAddress = _cTokenAddresses[i];\\n\\n            (bool isListed, , ) = comptroller.markets(cTokenAddress);\\n            if (!isListed) revert InvalidCToken();\\n\\n            unclaimedRewards += getAccruedSupplierComp(\\n                _user,\\n                cTokenAddress,\\n                morpho.supplyBalanceInOf(cTokenAddress, _user).onPool\\n            );\\n            unclaimedRewards += getAccruedBorrowerComp(\\n                _user,\\n                cTokenAddress,\\n                morpho.borrowBalanceInOf(cTokenAddress, _user).onPool\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// PUBLIC ///\\n\\n    /// @notice Returns the accrued COMP rewards of a user since the last update.\\n    /// @param _supplier The address of the supplier.\\n    /// @param _cTokenAddress The cToken address.\\n    /// @param _balance The user balance of tokens in the distribution.\\n    /// @return The accrued COMP rewards.\\n    function getAccruedSupplierComp(\\n        address _supplier,\\n        address _cTokenAddress,\\n        uint256 _balance\\n    ) public view returns (uint256) {\\n        uint256 supplyIndex = getUpdatedSupplyIndex(_cTokenAddress);\\n        uint256 supplierIndex = rewardsManager.compSupplierIndex(_cTokenAddress, _supplier);\\n\\n        if (supplierIndex == 0) return 0;\\n        return (_balance * (supplyIndex - supplierIndex)) / 1e36;\\n    }\\n\\n    /// @notice Returns the accrued COMP rewards of a user since the last update.\\n    /// @param _borrower The address of the borrower.\\n    /// @param _cTokenAddress The cToken address.\\n    /// @param _balance The user balance of tokens in the distribution.\\n    /// @return The accrued COMP rewards.\\n    function getAccruedBorrowerComp(\\n        address _borrower,\\n        address _cTokenAddress,\\n        uint256 _balance\\n    ) public view returns (uint256) {\\n        uint256 borrowIndex = getUpdatedBorrowIndex(_cTokenAddress);\\n        uint256 borrowerIndex = rewardsManager.compBorrowerIndex(_cTokenAddress, _borrower);\\n\\n        if (borrowerIndex == 0) return 0;\\n        return (_balance * (borrowIndex - borrowerIndex)) / 1e36;\\n    }\\n\\n    /// @notice Returns the updated COMP supply index.\\n    /// @param _cTokenAddress The cToken address.\\n    /// @return The updated COMP supply index.\\n    function getUpdatedSupplyIndex(address _cTokenAddress) public view returns (uint256) {\\n        IComptroller.CompMarketState memory localSupplyState = rewardsManager\\n        .getLocalCompSupplyState(_cTokenAddress);\\n\\n        if (localSupplyState.block == block.number) return localSupplyState.index;\\n        else {\\n            IComptroller.CompMarketState memory supplyState = comptroller.compSupplyState(\\n                _cTokenAddress\\n            );\\n\\n            uint256 deltaBlocks = block.number - supplyState.block;\\n            uint256 supplySpeed = comptroller.compSupplySpeeds(_cTokenAddress);\\n\\n            if (deltaBlocks > 0 && supplySpeed > 0) {\\n                uint256 supplyTokens = ICToken(_cTokenAddress).totalSupply();\\n                uint256 compAccrued = deltaBlocks * supplySpeed;\\n                uint256 ratio = supplyTokens > 0 ? (compAccrued * 1e36) / supplyTokens : 0;\\n\\n                return supplyState.index + ratio;\\n            }\\n\\n            return supplyState.index;\\n        }\\n    }\\n\\n    /// @notice Returns the updated COMP borrow index.\\n    /// @param _cTokenAddress The cToken address.\\n    /// @return The updated COMP borrow index.\\n    function getUpdatedBorrowIndex(address _cTokenAddress) public view returns (uint256) {\\n        IComptroller.CompMarketState memory localBorrowState = rewardsManager\\n        .getLocalCompBorrowState(_cTokenAddress);\\n\\n        if (localBorrowState.block == block.number) return localBorrowState.index;\\n        else {\\n            IComptroller.CompMarketState memory borrowState = comptroller.compBorrowState(\\n                _cTokenAddress\\n            );\\n            uint256 deltaBlocks = block.number - borrowState.block;\\n            uint256 borrowSpeed = comptroller.compBorrowSpeeds(_cTokenAddress);\\n\\n            if (deltaBlocks > 0 && borrowSpeed > 0) {\\n                ICToken cToken = ICToken(_cTokenAddress);\\n\\n                uint256 borrowAmount = cToken.totalBorrows().div(cToken.borrowIndex());\\n                uint256 compAccrued = deltaBlocks * borrowSpeed;\\n                uint256 ratio = borrowAmount > 0 ? (compAccrued * 1e36) / borrowAmount : 0;\\n\\n                return borrowState.index + ratio;\\n            }\\n\\n            return borrowState.index;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/ICompRewardsLens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ICompRewardsLens {\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        view\\n        returns (uint256 unclaimedRewards);\\n\\n    function getAccruedSupplierComp(\\n        address _supplier,\\n        address _cTokenAddress,\\n        uint256 _balance\\n    ) external view returns (uint256);\\n\\n    function getAccruedBorrowerComp(\\n        address _borrower,\\n        address _cTokenAddress,\\n        uint256 _balance\\n    ) external view returns (uint256);\\n\\n    function getUpdatedSupplyIndex(address _cTokenAddress) external view returns (uint256);\\n\\n    function getUpdatedBorrowIndex(address _cTokenAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function initialize(address _morpho) external;\\n\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address _cTokenAddress)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address _cTokenAddress)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IInterestRatesManager.sol\\\";\\nimport \\\"./IRewardsManager.sol\\\";\\nimport \\\"./IPositionsManager.sol\\\";\\nimport \\\"./IIncentivesVault.sol\\\";\\n\\nimport \\\"../libraries/Types.sol\\\";\\n\\n// prettier-ignore\\ninterface IMorpho {\\n\\n    /// STORAGE ///\\n\\n    function defaultMaxGasForMatching() external view returns (Types.MaxGasForMatching memory);\\n    function maxSortedUsers() external view returns (uint256);\\n    function dustThreshold() external view returns (uint256);\\n    function supplyBalanceInOf(address, address) external view returns (Types.SupplyBalance memory);\\n    function borrowBalanceInOf(address, address) external view returns (Types.BorrowBalance memory);\\n    function enteredMarkets(address) external view returns (address);\\n    function deltas(address) external view returns (Types.Delta memory);\\n    function marketsCreated() external view returns (address[] memory);\\n    function marketParameters(address) external view returns (Types.MarketParameters memory);\\n    function p2pDisabled(address) external view returns (bool);\\n    function p2pSupplyIndex(address) external view returns (uint256);\\n    function p2pBorrowIndex(address) external view returns (uint256);\\n    function lastPoolIndexes(address) external view returns (Types.LastPoolIndexes memory);\\n    function marketStatus(address) external view returns (Types.MarketStatus memory);\\n    function comptroller() external view returns (IComptroller);\\n    function interestRatesManager() external view returns (IInterestRatesManager);\\n    function rewardsManager() external view returns (IRewardsManager);\\n    function positionsManager() external view returns (IPositionsManager);\\n    function incentiveVault() external view returns (IIncentivesVault);\\n    function treasuryVault() external view returns (address);\\n    function cEth() external view returns (address);\\n    function wEth() external view returns (address);\\n\\n    /// GETTERS ///\\n\\n    function updateP2PIndexes(address _poolTokenAddress) external;\\n    function getEnteredMarkets(address _user) external view returns (address[] memory enteredMarkets_);\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_);\\n    function getHead(address _poolTokenAddress, Types.PositionType _positionType) external view returns (address head);\\n    function getNext(address _poolTokenAddress, Types.PositionType _positionType, address _user) external view returns (address next);\\n\\n    /// GOVERNANCE ///\\n\\n    function setMaxSortedUsers(uint256 _newMaxSortedUsers) external;\\n    function setDefaultMaxGasForMatching(Types.MaxGasForMatching memory _maxGasForMatching) external;\\n    function setTreasuryVault(address _newTreasuryVaultAddress) external;\\n    function setIncentivesVault(address _newIncentivesVault) external;\\n    function setRewardsManager(address _rewardsManagerAddress) external;\\n    function setDustThreshold(uint256 _dustThreshold) external;\\n    function setP2PDisable(address _poolTokenAddress, bool _p2pDisabled) external;\\n    function setReserveFactor(address _poolTokenAddress, uint256 _newReserveFactor) external;\\n    function setP2PIndexCursor(address _poolTokenAddress, uint16 _p2pIndexCursor) external;\\n    function setPauseStatus(address _poolTokenAddress) external;\\n    function setPartialPauseStatus(address _poolTokenAddress) external;\\n    function claimToTreasury(address _poolTokenAddress, uint256 _amount) external;\\n    function createMarket(address _poolTokenAddress, Types.MarketParameters calldata _params) external;\\n\\n    /// USERS ///\\n\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function withdraw(address _poolTokenAddress, uint256 _amount) external;\\n    function repay(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function liquidate(address _poolTokenBorrowedAddress, address _poolTokenCollateralAddress, address _borrower, uint256 _amount) external;\\n    function claimRewards(address[] calldata _cTokenAddresses, bool _tradeForMorphoToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n\\n    function _setMintPaused(ICToken cToken, bool state) external returns (bool);\\n\\n    function _setBorrowPaused(ICToken cToken, bool state) external returns (bool);\\n\\n    function _setCollateralFactor(ICToken cToken, uint256 newCollateralFactorMantissa)\\n        external\\n        returns (uint256);\\n\\n    function _setCompSpeeds(\\n        ICToken[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) external;\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in cToken).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in cdUnit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_morpho\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"getAccruedBorrowerComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"getAccruedSupplierComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morpho\",\"outputs\":[{\"internalType\":\"contract IMorpho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CompRewardsLens", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008888882f8f843896699869179fb6e4f7e3b58888", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}