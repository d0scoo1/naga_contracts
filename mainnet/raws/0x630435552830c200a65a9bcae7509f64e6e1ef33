{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.9;\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface NtentArt {\r\n   function mint(address _to, uint256 _projectId, uint256 quantity, address _by) external returns(uint256);\r\n   function burn(address ownerAddress, uint256 _tokenId) external returns(uint256);\r\n   function getPricePerTokenInWei(uint256 _projectId) external view returns(uint256);\r\n   function projectTokenInfo(uint256 _projectId) external view returns(address artistAddress, uint256 pricePerTokenInWei, uint256 invocations, uint256 maxInvocations, bool active, address purchaseContract, address dataContract, address tokenUriContract, address transferContract, bool acceptsMintPass, uint256 mintPassProjectId);\r\n   function tokenIdToProjectId(uint256 _tokenId) external view returns(uint256);\r\n   function ownerOf(uint256 _tokenId) external view returns (address);\r\n   function tokensOfOwner(address) external view returns (uint256[] memory);\r\n   function ntentPercentage() external view returns(uint256);\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n}\r\n\r\ncontract NtentFuckPutin is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    address public ntentTokenContractAddress;\r\n    address public ukraineAddress;\r\n\r\n    uint256 weiToEth = 10000000000000000;\r\n\r\n    ERC20 public ape;\r\n    ERC20 public ash;\r\n\r\n    mapping(uint256 => uint256) public projectApePrice;\r\n    mapping(uint256 => uint256) public projectAshPrice;\r\n    \r\n    //\r\n    //ukrainedao address is immuatble - ukrainedao.eth\r\n    //\r\n    constructor (address _ntentTokenAddress, address _ukraineAddress) {\r\n        ntentTokenContractAddress = _ntentTokenAddress;\r\n        ukraineAddress = _ukraineAddress;\r\n    }\r\n\r\n    function updateApeTokenAddress(address _newAddress) public onlyOwner {\r\n        ape = ERC20(_newAddress);\r\n    }\r\n\r\n    function updateAshTokenAddress(address _newAddress) public onlyOwner {\r\n        ash = ERC20(_newAddress);\r\n    }\r\n\r\n    function updateProjectTokenPrices(uint _projectId,  uint _apeTokensPerMint, uint _ashTokensPerMint) public onlyOwner{\r\n        projectApePrice[_projectId] = _apeTokensPerMint * weiToEth;\r\n        projectAshPrice[_projectId] = _ashTokensPerMint * weiToEth;\r\n    }\r\n\r\n    function getTokenPrices(uint256 _projectId) public view returns (uint256 apeCoinPrice, uint256 ashCoinPrice){\r\n        apeCoinPrice = projectApePrice[_projectId];\r\n        ashCoinPrice = projectAshPrice[_projectId];\r\n    }\r\n    \r\n    function updateNtentTokenAddress(address _newAddress) public onlyOwner {\r\n        ntentTokenContractAddress = _newAddress;\r\n    } \r\n\r\n    //For address info : see above <-> .jiwa\r\n    function withdraw() public onlyOwner {\r\n\r\n        uint256 balance = address(this).balance;\r\n        uint256 apeBalance = ape.balanceOf(address(this));\r\n        uint256 ashBalance = ash.balanceOf(address(this));\r\n\r\n        if(apeBalance > 0){\r\n            ape.transfer(ukraineAddress, ape.balanceOf(address(this)));\r\n        }\r\n\r\n        if(ashBalance > 0){\r\n            ash.transfer(ukraineAddress, ash.balanceOf(address(this)));\r\n        }\r\n\r\n        if(balance > 0){\r\n            payable(ukraineAddress).transfer(balance);\r\n        }\r\n    }\r\n    \r\n    function teamMint(uint256 _projectId, uint256 _tokenQuantity) public onlyOwner {\r\n        require(_tokenQuantity > 0, \"Token quantity must greater than zero\");\r\n        \r\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\r\n        \r\n        (uint256 tokenId) = ntentContract.mint(msg.sender, _projectId, _tokenQuantity, msg.sender);\r\n        require(tokenId > 0, \"Mint failed\");\r\n    }\r\n\r\n    function purchase(\r\n        address _purchasedForAddress, \r\n        uint256 _projectId, \r\n        uint256 _numberOfTokens) public nonReentrant payable {\r\n               \r\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\r\n    \r\n        uint256 tokenPrice = ntentContract.getPricePerTokenInWei(_projectId);\r\n        require(tokenPrice.mul(_numberOfTokens) <= msg.value, \"Ether value sent is not correct\");\r\n\r\n        (uint256 tokenId) = ntentContract.mint(_purchasedForAddress,  _projectId, _numberOfTokens, msg.sender);\r\n        require(tokenId > 0, \"Mint failed\");\r\n    }\r\n\r\n    function purchaseWithApe(\r\n        address _purchasedForAddress,\r\n        uint256 _projectId,\r\n        uint256 _numberOfTokens\r\n    ) public payable nonReentrant {\r\n        require(projectApePrice[_projectId] > 0, \"Ape Price Not Set\");\r\n\r\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\r\n\r\n        uint256 cost = projectApePrice[_projectId].mul(_numberOfTokens);\r\n        require(\r\n            ape.allowance(msg.sender, address(this)) >= cost,\r\n            \"APE Allowance Not Enough\"\r\n        );\r\n\r\n        require(\r\n            ape.balanceOf(msg.sender) >= cost,\r\n            \"Not enough APE sent\"\r\n        );\r\n        ape.transferFrom(msg.sender, address(this), cost);\r\n\r\n        uint256 tokenId = ntentContract.mint(\r\n            _purchasedForAddress,\r\n            _projectId,\r\n            _numberOfTokens,\r\n            msg.sender\r\n        );\r\n        require(tokenId > 0, \"Mint failed\");\r\n    }\r\n\r\n    function purchaseWithAsh(\r\n        address _purchasedForAddress,\r\n        uint256 _projectId,\r\n        uint256 _numberOfTokens\r\n    ) public payable nonReentrant {\r\n        require(projectAshPrice[_projectId] > 0, \"Ash Price Not Set\");\r\n\r\n\r\n        NtentArt ntentContract = NtentArt(ntentTokenContractAddress);\r\n\r\n        uint256 cost = projectAshPrice[_projectId].mul(_numberOfTokens);\r\n        \r\n        require(\r\n            ash.allowance(msg.sender, address(this)) >= cost,\r\n            \"ASH Allowance not set\"\r\n        );\r\n\r\n        require(\r\n            ash.balanceOf(msg.sender) >= cost,\r\n            \"Not enough ASH sent\"\r\n        );\r\n        \r\n        ash.transferFrom(msg.sender, address(this), cost);\r\n\r\n        uint256 tokenId = ntentContract.mint(\r\n            _purchasedForAddress,\r\n            _projectId,\r\n            _numberOfTokens,\r\n            msg.sender\r\n        );\r\n        require(tokenId > 0, \"Mint failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ukraineAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ape\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ash\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getTokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apeCoinPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ashCoinPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntentTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectApePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectAshPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchasedForAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchasedForAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchaseWithApe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchasedForAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchaseWithAsh\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ukraineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateApeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateAshTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateNtentTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apeTokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ashTokensPerMint\",\"type\":\"uint256\"}],\"name\":\"updateProjectTokenPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NtentFuckPutin", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a1f4c550cd7bc37af841e81fcf3557269f4e912000000000000000000000000633b7218644b83d57d90e7299039ebab19698e9c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6375d7a5634259aa230b931e04980430147d1bc1c0d35c469445aaf91cbe4e5"}]}