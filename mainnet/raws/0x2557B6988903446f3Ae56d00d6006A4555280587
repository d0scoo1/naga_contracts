{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ENSTogether.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IENSTogetherNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IDefaultResolver {\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\\ninterface IReverseRegistrar {\\n    function node(address addr) external view returns (bytes32);\\n    function defaultResolver() external view returns (IDefaultResolver);\\n}\\n\\ncontract ENSTogether is ReentrancyGuard, Ownable {\\n    IReverseRegistrar ensReverseRegistrar;\\n    IENSTogetherNFT ensTogetherNFT;\\n\\n    // address public nftContract;\\n    uint256 public cost = 0.08 ether;\\n    uint256 public updateStatusCost = 0.04 ether;\\n    //it will be longer, 5m is just for testing\\n    uint256 public timeToRespond = 1 weeks;\\n    uint256 public proposalsCounter = 0;\\n    uint256 public registryCounter = 0;\\n\\n    //Relationship Status\\n    enum Proposal {\\n        NOTHING,\\n        PENDING,\\n        ACCEPTED,\\n        DECLINED\\n    }\\n    Proposal proposalStatus;\\n    enum Status {\\n        NOTHING,\\n        TOGETHER,\\n        PAUSED,\\n        SEPARATED\\n    }\\n    Status relationshipStatus;\\n\\n    struct Union {\\n        address to;\\n        uint8 proposalStatus;\\n        address from;\\n        uint8 relationshipStatus;\\n        uint256 proposalNumber;\\n        uint256 registryNumber;\\n        uint256 createdAt;\\n        bool expired;\\n    }\\n\\n    mapping(address => Union) public unionWith;\\n\\n    constructor(address ensReverseRegistrar_) {\\n        ensReverseRegistrar = IReverseRegistrar(ensReverseRegistrar_);\\n    }\\n\\n    //PROPOSAL EVENTS\\n    event ProposalSubmitted(address indexed to, address indexed from);\\n    event ProposalResponded(\\n        address indexed to,\\n        address indexed from,\\n        uint256 indexed _status\\n    );\\n    event ProposalCancelled(address indexed to, address indexed from);\\n    //UNION EVENTS\\n    event GotUnited(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed _timestamp,\\n        uint256 _registrationNumber\\n    );\\n    event UnionStatusUpdated(\\n        address indexed from,\\n        address indexed to,\\n        uint256 _status,\\n        uint256 indexed _timestamp\\n    );\\n    //ERRORS\\n    error SenderPendingProposal();\\n    error ReceiverPendingProposal();\\n    //BURNED\\n    event Burned(uint256 id, bool);\\n\\n    function propose(address _to) external payable {\\n        require(msg.value == cost, \\\"Insufficient amount\\\");\\n        require(_to != msg.sender, \\\"Can't registry with yourself as a partner\\\");\\n        //revert if msg.sender is already united\\n        require(\\n            unionWith[msg.sender].relationshipStatus == uint8(Status.NOTHING) ||\\n                unionWith[msg.sender].relationshipStatus ==\\n                uint8(Status.SEPARATED),\\n            \\\"You are already united\\\"\\n        );\\n        //avoid proposals to a person already in a relationship\\n        require(\\n            unionWith[_to].relationshipStatus == uint8(Status.NOTHING) ||\\n                unionWith[_to].expired == true,\\n            \\\"This address is already in a relationship\\\"\\n        );\\n        //Check if both addresses have an ENS name\\n        string memory ensFrom = lookupENSName(msg.sender);\\n        string memory ensTo = lookupENSName(_to);\\n        require(bytes(ensFrom).length > 0, \\\"Sender doesn't have ENS name\\\");\\n        require(\\n            bytes(ensTo).length > 0,\\n            \\\"The address you're proposing to doesnt have ENS name\\\"\\n        );\\n        // Revert if sender sent a proposal and its not expired or receiver has a pending not expired proposal\\n        if (\\n            unionWith[msg.sender].to != address(0) &&\\n            block.timestamp < unionWith[msg.sender].createdAt + timeToRespond &&\\n            unionWith[msg.sender].expired == false\\n        ) {\\n            revert SenderPendingProposal();\\n        } else if (\\n            unionWith[_to].proposalStatus == uint8(Proposal.PENDING) &&\\n            block.timestamp < unionWith[_to].createdAt + timeToRespond\\n        ) {\\n            revert ReceiverPendingProposal();\\n        } else {\\n            Union memory request;\\n            request.to = _to;\\n            request.from = msg.sender;\\n            request.createdAt = block.timestamp;\\n            request.proposalNumber = proposalsCounter;\\n            request.proposalStatus = uint8(Proposal.PENDING);\\n            unionWith[_to] = request;\\n            unionWith[msg.sender] = request;\\n            proposalsCounter++;\\n        }\\n        emit ProposalSubmitted(_to, msg.sender);\\n    }\\n\\n    function lookupENSName(address addr) public view returns (string memory) {\\n        bytes32 node = ensReverseRegistrar.node(addr);\\n        return ensReverseRegistrar.defaultResolver().name(node);\\n    }\\n\\n    function respondToProposal(\\n        Proposal response,\\n        string calldata ens1,\\n        string calldata ens2\\n    ) external payable {\\n        //Response shouldnt be NOTHING or PENDING\\n        require(\\n            uint8(response) != uint8(Proposal.NOTHING) &&\\n            uint8(response) != uint8(Proposal.PENDING),\\n            \\\"Response not valid\\\"\\n        );\\n        //shouldnt be expired\\n        require(\\n            block.timestamp < unionWith[msg.sender].createdAt + timeToRespond,\\n            \\\"Proposal expired\\\"\\n        );\\n        //Only the address who was invited to be united should respond to the proposal.\\n        require(\\n            unionWith[msg.sender].to == msg.sender,\\n            \\\"You cant respond your own proposal, that's scary\\\"\\n        );\\n        //Proposal status must be \\\"PENDING\\\"\\n        require(\\n            unionWith[msg.sender].proposalStatus == uint8(Proposal.PENDING),\\n            \\\"This proposal has already been responded\\\"\\n        );\\n        //Checking the ens names provided against ens registrar\\n        string memory ensFrom = lookupENSName(unionWith[msg.sender].from);\\n        string memory ensTo = lookupENSName(unionWith[msg.sender].to);\\n        require(\\n            keccak256(abi.encodePacked(ens1)) ==\\n                keccak256(abi.encodePacked(ensFrom)) ||\\n                keccak256(abi.encodePacked(ens1)) ==\\n                keccak256(abi.encodePacked(ensTo)),\\n            \\\"First ENS name doesn't match with addresses involved\\\"\\n        );\\n        require(\\n            keccak256(abi.encodePacked(ens2)) ==\\n                keccak256(abi.encodePacked(ensFrom)) ||\\n                keccak256(abi.encodePacked(ens2)) ==\\n                keccak256(abi.encodePacked(ensTo)),\\n            \\\"Second ENS name doesn't match with addresses involved\\\"\\n        );\\n        // //instance of the proposal\\n        Union memory acceptOrDecline = unionWith[msg.sender];\\n        //get the addresses involved\\n        address from = acceptOrDecline.from;\\n        address to = acceptOrDecline.to;\\n        acceptOrDecline.createdAt = block.timestamp;\\n        //DECLINE SCENARIO / RESET PROPOSAL\\n        if (uint8(response) == 3) {\\n            acceptOrDecline.expired = true;\\n            acceptOrDecline.proposalStatus = uint8(Proposal.DECLINED);\\n            unionWith[to] = acceptOrDecline;\\n            unionWith[from] = acceptOrDecline;\\n            emit ProposalCancelled(to, from);\\n            return;\\n        }\\n        //ACCEPT SCENARIO AND GET UNITED\\n        else if (uint8(response) == 2) {\\n            acceptOrDecline.proposalStatus = uint8(Proposal.ACCEPTED);\\n            acceptOrDecline.relationshipStatus = uint8(Status.TOGETHER);\\n            acceptOrDecline.registryNumber = registryCounter;\\n            unionWith[to] = acceptOrDecline;\\n            unionWith[from] = acceptOrDecline;\\n            registryCounter++;\\n            emit ProposalResponded(to, from, uint8(Proposal.ACCEPTED));\\n            IENSTogetherNFT(ensTogetherNFT).mint(from, to, ens1, ens2);\\n            emit GotUnited(from, msg.sender, block.timestamp, acceptOrDecline.registryNumber);\\n        } else revert(\\\"Transaction failed\\\");\\n    }\\n\\n    function cancelOrResetProposal() public payable {\\n        Union memory currentProposal = unionWith[msg.sender];\\n        address to = currentProposal.to;\\n        address from = currentProposal.from;\\n        currentProposal.proposalStatus = uint8(Proposal.DECLINED);\\n        currentProposal.expired = true;\\n        unionWith[to] = currentProposal;\\n        unionWith[from] = currentProposal;\\n        emit ProposalCancelled(to, from);\\n    }\\n    function updateUnion(Status newStatus) external payable {\\n        require(msg.value >= updateStatusCost, \\\"Insufficient amount\\\");\\n        //once separated cannot modify status\\n        require(\\n            unionWith[msg.sender].relationshipStatus != uint8(Status.SEPARATED),\\n            \\\"You are separated, make another proposal\\\"\\n        );\\n        Union memory unionUpdated = unionWith[msg.sender];\\n        address from = unionUpdated.from;\\n        address to = unionUpdated.to;\\n        unionUpdated.relationshipStatus = uint8(newStatus);\\n        unionUpdated.createdAt = block.timestamp;\\n        if (uint8(newStatus) == 3) {\\n            unionUpdated.proposalStatus = uint8(Proposal.DECLINED);\\n            unionUpdated.expired = true;\\n        }\\n        unionWith[to] = unionUpdated;\\n        unionWith[from] = unionUpdated;\\n        emit UnionStatusUpdated(from, to, uint256(newStatus), block.timestamp);\\n    }\\n\\n    //Interfacing with ENSTogetherNFT contract\\n    function getTokenUri(uint256 _tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        string memory uri = IENSTogetherNFT(ensTogetherNFT).tokenURI(_tokenId);\\n        return uri;\\n    }\\n\\n    function getTokenIDS(address _add)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory ids = IENSTogetherNFT(ensTogetherNFT).ownedNFTS(_add);\\n        return ids;\\n    }\\n\\n    function burn(uint256 tokenId) external {\\n        IENSTogetherNFT(ensTogetherNFT).burn(tokenId, msg.sender);\\n        emit Burned(tokenId, true);\\n    }\\n\\n    //Only owner\\n    function setNftContractAddress(address ensTogetherNFT_) public onlyOwner {\\n        ensTogetherNFT = IENSTogetherNFT(ensTogetherNFT_);\\n    }\\n\\n    function modifyTimeToRespond(uint256 t) external onlyOwner {\\n        timeToRespond = t;\\n    }\\n\\n    function modifyProposalCost(uint256 amount) external onlyOwner {\\n        cost = amount;\\n    }\\n\\n    function modifyStatusUpdateCost(uint256 amount) external onlyOwner {\\n        updateStatusCost = amount;\\n    }\\n\\n    function withdraw() external onlyOwner nonReentrant {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IENSTogetherNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface IENSTogetherNFT {\\n    function mint(\\n        address from,\\n        address to,\\n        string calldata ens1,\\n        string calldata ens2\\n    ) external;\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ownedNFTS(address _owner) external view returns (uint256[] memory);\\n\\n    function burn(uint256 tokenId, address _add) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensReverseRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReceiverPendingProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderPendingProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_registrationNumber\",\"type\":\"uint256\"}],\"name\":\"GotUnited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"ProposalResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UnionStatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOrResetProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getTokenIDS\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lookupENSName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyProposalCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyStatusUpdateCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"modifyTimeToRespond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ENSTogether.Proposal\",\"name\":\"response\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"ens1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ens2\",\"type\":\"string\"}],\"name\":\"respondToProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensTogetherNFT_\",\"type\":\"address\"}],\"name\":\"setNftContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToRespond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unionWith\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"relationshipStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registryNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStatusCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ENSTogether.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"updateUnion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ENSTogether", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000084b1c3c81545d370f3634392de611caabff8148", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}