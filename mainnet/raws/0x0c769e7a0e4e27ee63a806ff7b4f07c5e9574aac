{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface erc20 {\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ibAMM {\r\n    function repay(address cy, address token, uint amount) external returns (bool);\r\n}\r\n\r\ninterface synthetix {\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint amountReceived);\r\n}\r\n\r\ninterface resolver {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface curve {\r\n    function get_dy(int128, int128, uint) external view returns (uint);\r\n    function exchange(int128, int128, uint, uint, address) external returns (uint);\r\n}\r\n\r\n\r\ncontract ib_settlement {\r\n    resolver constant addresses = resolver(0x823bE81bbF96BEc0e25CA13170F5AaCb5B79ba83);\r\n    curve constant eur = curve(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859);\r\n\r\n    address susd = address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    address ibeur = address(0x96E61422b6A9bA0e068B6c5ADd4fFaBC6a4aae27);\r\n    address seur = address(0xD71eCFF9342A5Ced620049e616c5035F1dB98620);\r\n    ibAMM _ibAMM = ibAMM(0x8338Aa899fB3168598D871Edc1FE2B4F0Ca6BBEF);\r\n\r\n    address msig = address(0x0D5Dc686d0a2ABBfDaFDFb4D0533E886517d4E83);\r\n    \r\n    function synth_exchange() external {\r\n        uint amount = erc20(susd).balanceOf(address(this));\r\n        synthetix _snx = synthetix(addresses.getAddress(\"Synthetix\"));\r\n        erc20(susd).approve(address(_snx), amount);\r\n        _snx.exchangeWithTracking(\"sUSD\", amount, \"sEUR\", address(this), \"ibAMM\");\r\n    }\r\n\r\n    function curve_exchange_and_repay() external {\r\n        uint amount = erc20(seur).balanceOf(address(this));\r\n        erc20(seur).approve(address(eur), amount);\r\n        uint amountReceived = eur.exchange(1, 0, amount, 0, address(this));\r\n        erc20(ibeur).approve(address(_ibAMM), amountReceived);\r\n        _ibAMM.repay(0x00e5c0774A5F065c285068170b20393925C84BF3, ibeur, amountReceived);\r\n    }\r\n\r\n    function clawback(address token) external {\r\n        require(msg.sender == msig);\r\n        _safeTransfer(token, msig, erc20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve_exchange_and_repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synth_exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ib_settlement", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fb9de6d5821e6ab848bc919b130563617aa28dac8fb9994479a5af5333cbfe1"}]}