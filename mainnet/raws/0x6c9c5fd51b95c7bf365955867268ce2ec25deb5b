{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: Context.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: Address.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: Interfaces/IUniV3Router.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface uniV3Router {\r\n\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams memory params) external returns (uint256 amountOut);\r\n\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external;\r\n\r\n    function exactOutput(ExactOutputParams memory params) external returns (uint256 amountIn);\r\n}\r\n\r\ninterface uniOracle {\r\n   function quoteExactOutputSingle(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint24 fee,\r\n    uint256 amountOut,\r\n    uint160 sqrtPriceLimitX96\r\n  ) external returns (uint256 amountIn);\r\n}\r\n\r\n// File: Interfaces/IBalancer.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IBalancer{\r\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\r\n\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    //Balancer params\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        address assetIn;\r\n        address assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        address[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n}\r\n\r\n// File: Interfaces/IERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: Interfaces/IERC20Metadata.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: Interfaces/IWETH.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IWETH is IERC20 {\r\n  function deposit() external payable;\r\n  function withdraw(uint) external;\r\n  function decimals() external view returns(uint8);\r\n}\r\n\r\n// File: Interfaces/IBentoBoxV1.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IBentoBoxV1 {\r\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\r\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\r\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\r\n    event LogRegisterProtocol(address indexed protocol);\r\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\r\n    event LogStrategyDivest(address indexed token, uint256 amount);\r\n    event LogStrategyInvest(address indexed token, uint256 amount);\r\n    event LogStrategyLoss(address indexed token, uint256 amount);\r\n    event LogStrategyProfit(address indexed token, uint256 amount);\r\n    event LogStrategyQueued(address indexed token, address indexed strategy);\r\n    event LogStrategySet(address indexed token, address indexed strategy);\r\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\r\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\r\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\r\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    struct AccrueInfo {\r\n        uint64 interestPerSecond;\r\n        uint64 lastAccrued;\r\n        uint128 feesEarnedFraction;\r\n    }\r\n\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\r\n\r\n    function claimOwnership() external;\r\n\r\n    function deploy(\r\n        address masterContract,\r\n        bytes calldata data,\r\n        bool useCreate2\r\n    ) external payable;\r\n\r\n    function deposit(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n\r\n    function harvest(\r\n        IERC20 token,\r\n        bool balance,\r\n        uint256 maxChangeAmount\r\n    ) external;\r\n\r\n    function masterContractApproved(address, address) external view returns (bool);\r\n\r\n    function masterContractOf(address) external view returns (address);\r\n\r\n    function nonces(address) external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingOwner() external view returns (address);\r\n\r\n    function permitToken(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function registerProtocol() external;\r\n\r\n    function setMasterContractApproval(\r\n        address user,\r\n        address masterContract,\r\n        bool approved,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n\r\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\r\n\r\n    function strategyData(IERC20)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 strategyStartDate,\r\n            uint64 targetPercentage,\r\n            uint128 balance\r\n        );\r\n\r\n    function toAmount(\r\n        IERC20 token,\r\n        uint256 share,\r\n        bool roundUp\r\n    ) external view returns (uint256 amount);\r\n\r\n    function toShare(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool roundUp\r\n    ) external view returns (uint256 share);\r\n\r\n    function transfer(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function transferMultiple(\r\n        IERC20 token,\r\n        address from,\r\n        address[] calldata tos,\r\n        uint256[] calldata shares\r\n    ) external;\r\n\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) external;\r\n\r\n    function whitelistMasterContract(address masterContract, bool approved) external;\r\n\r\n    function whitelistedMasterContracts(address) external view returns (bool);\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n\r\n// File: Interfaces/IPie.sol\r\npragma solidity ^0.7.0;\r\n\r\ninterface IPie is IERC20 {\r\n    function joinPool(uint256 _amount) external;\r\n    function exitPool(uint256 _amount) external;\r\n    function calcTokensForAmount(uint256 _amount) external view  returns(address[] memory tokens, uint256[] memory amounts);\r\n}\r\n\r\n// File: Interfaces/IPieRegistry.sol\r\npragma solidity ^0.7.0;\r\n\r\ninterface IPieRegistry {\r\n    function inRegistry(address _pool) external view returns(bool);\r\n    function entries(uint256 _index) external view returns(address);\r\n    function addSmartPool(address _smartPool) external;\r\n    function removeSmartPool(uint256 _index) external;\r\n}\r\n\r\n// File: Interfaces/ILendingLogic.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface ILendingLogic {\r\n    /**\r\n        @notice Get the APR based on underlying token.\r\n        @param _token Address of the underlying token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromUnderlying(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the APR based on wrapped token.\r\n        @param _token Address of the wrapped token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromWrapped(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the calls needed to lend.\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount of the underlying token\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function lend(address _underlying, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the calls needed to unlend\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of the underlying tokens\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function unlend(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRate(address _wrapped) external returns(uint256);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRateView(address _wrapped) external view returns(uint256);\r\n}\r\n\r\n// File: Interfaces/ILendingRegistry.sol\r\npragma solidity ^0.7.0;\r\n\r\ninterface ILendingRegistry {\r\n    // Maps wrapped token to protocol\r\n    function wrappedToProtocol(address _wrapped) external view returns(bytes32);\r\n    // Maps wrapped token to underlying\r\n    function wrappedToUnderlying(address _wrapped) external view returns(address);\r\n    function underlyingToProtocolWrapped(address _underlying, bytes32 protocol) external view returns (address);\r\n    function protocolToLogic(bytes32 _protocol) external view returns (address);\r\n\r\n    /**\r\n        @notice Set which protocl a wrapped token belongs to\r\n        @param _wrapped Address of the wrapped token\r\n        @param _protocol Bytes32 key of the protocol\r\n    */\r\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) external;\r\n\r\n    /**\r\n        @notice Set what is the underlying for a wrapped token\r\n        @param _wrapped Address of the wrapped token\r\n        @param _underlying Address of the underlying token\r\n    */\r\n    function setWrappedToUnderlying(address _wrapped, address _underlying) external;\r\n\r\n    /**\r\n        @notice Set the logic contract for the protocol\r\n        @param _protocol Bytes32 key of the procol\r\n        @param _logic Address of the lending logic contract for that protocol\r\n    */\r\n    function setProtocolToLogic(bytes32 _protocol, address _logic) external;\r\n    /**\r\n        @notice Set the wrapped token for the underlying deposited in this protocol\r\n        @param _underlying Address of the unerlying token\r\n        @param _protocol Bytes32 key of the protocol\r\n        @param _wrapped Address of the wrapped token\r\n    */\r\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) external;\r\n\r\n    /**\r\n        @notice Get tx data to lend the underlying amount in a specific protocol\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount to lend\r\n        @param _protocol Bytes32 key of the protocol\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getLendTXData(address _underlying, uint256 _amount, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the tx data to unlend the wrapped amount\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of wrapped token to unlend\r\n        @return targets Addresses of the src to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getUnlendTXData(address _wrapped, uint256 _amount) external view returns(address[] memory targets, bytes[] memory data);\r\n}\r\n\r\n// File: Interfaces/IUniRouter.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniRouter is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: Recipe.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Recipe is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IWETH immutable WETH;\r\n    ILendingRegistry immutable lendingRegistry;\r\n    IPieRegistry immutable pieRegistry;\r\n    IBalancer balancer = IBalancer(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n    uniOracle oracle = uniOracle(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n    uniV3Router uniRouter = uniV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    IUniRouter sushiRouter = IUniRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    //Failing to query a price is expensive,\r\n    //so we save info about the DEX state to prevent querying the price if it is not viable\r\n    mapping(address => bytes32) balancerViable;\r\n    mapping(address => uint16) uniFee;\r\n\r\n    struct BestPrice {\r\n        uint price;\r\n        uint dexIndex;\r\n    }\r\n\r\n    constructor(\r\n        address _weth,\r\n        address _lendingRegistry,\r\n        address _pieRegistry,\r\n        address _bentoBox,\r\n        address _masterContract\r\n    ) {\r\n        require(_weth != address(0), \"WETH_ZERO\");\r\n        require(_lendingRegistry != address(0), \"LENDING_MANAGER_ZERO\");\r\n        require(_pieRegistry != address(0), \"PIE_REGISTRY_ZERO\");\r\n\r\n        WETH = IWETH(_weth);\r\n        lendingRegistry = ILendingRegistry(_lendingRegistry);\r\n        pieRegistry = IPieRegistry(_pieRegistry);\r\n\r\n        _bentoBox.call{value : 0}(abi.encodeWithSelector(IBentoBoxV1.setMasterContractApproval.selector, address(this), _masterContract, true, 0, 0x0000000000000000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000000));\r\n    }\r\n\r\n    function toPie(address _pie, uint256 _outputAmount, uint16[] memory _dexIndex) external payable {\r\n\r\n        // convert to WETH\r\n        address(WETH).call{value : msg.value}(\"\");\r\n\r\n        // bake pie\r\n        uint256 outputAmount = _bake(address(WETH), _pie, _outputAmount, _dexIndex);\r\n        // transfer output\r\n        IERC20(_pie).safeTransfer(_msgSender(), outputAmount);\r\n        // if any WETH left convert it into ETH and send it back\r\n        uint256 wethBalance = WETH.balanceOf(address(this));\r\n        if (wethBalance != 0) {\r\n            // console.log(\"returning WETH\");\r\n            // console.log(wethBalance);\r\n            WETH.withdraw(wethBalance);\r\n            payable(msg.sender).transfer(wethBalance);\r\n        }\r\n    }\r\n\r\n    function bake(\r\n        address _outputToken,\r\n        uint256 _maxInput,\r\n        uint256 _mintAmount,\r\n        uint16[] memory _dexIndex\r\n    ) external returns (uint256 inputAmountUsed, uint256 outputAmount) {\r\n        IERC20 outputToken = IERC20(_outputToken);\r\n\r\n        IERC20(address(WETH)).safeTransferFrom(_msgSender(), address(this), _maxInput);\r\n\r\n        outputAmount = _bake(address(WETH), _outputToken, _mintAmount, _dexIndex);\r\n\r\n        uint256 remainingInputBalance = WETH.balanceOf(address(this));\r\n\r\n        if (remainingInputBalance > 0) {\r\n            WETH.transfer(_msgSender(), WETH.balanceOf(address(this)));\r\n        }\r\n\r\n        outputToken.safeTransfer(_msgSender(), outputAmount);\r\n\r\n        return (inputAmountUsed, outputAmount);\r\n    }\r\n\r\n    function _bake(address _inputToken, address _outputToken, uint256 _mintAmount, uint16[] memory _dexIndex) internal returns (uint256 outputAmount) {\r\n        require(_inputToken == address(WETH));\r\n        require(pieRegistry.inRegistry(_outputToken));\r\n\r\n        swapPie(_outputToken, _mintAmount, _dexIndex);\r\n\r\n        outputAmount = IERC20(_outputToken).balanceOf(address(this));\r\n\r\n        return (outputAmount);\r\n    }\r\n\r\n    function swap(address _inputToken, address _outputToken, uint256 _outputAmount, uint16 _dexIndex) internal {\r\n        if (_inputToken == _outputToken) {\r\n            return;\r\n        }\r\n\r\n        address underlying = lendingRegistry.wrappedToUnderlying(_outputToken);\r\n        if (underlying != address(0)) {\r\n            // calc amount according to exchange rate\r\n            ILendingLogic lendingLogic = getLendingLogicFromWrapped(_outputToken);\r\n            uint256 exchangeRate = lendingLogic.exchangeRate(_outputToken);\r\n            // wrapped to underlying\r\n            uint256 underlyingAmount = _outputAmount.mul(exchangeRate).div(1e18).add(1);\r\n            swap(_inputToken, underlying, underlyingAmount, _dexIndex);\r\n            (address[] memory targets, bytes[] memory data) = lendingLogic.lend(underlying, underlyingAmount, address(this));\r\n\r\n            //execute lending transactions\r\n            for (uint256 i = 0; i < targets.length; i ++) {\r\n                (bool success,) = targets[i].call{value : 0}(data[i]);\r\n                require(success, \"CALL_FAILED\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        // else normal swap\r\n        dexSwap(_inputToken, _outputToken, _outputAmount, _dexIndex);\r\n    }\r\n\r\n    function swapPie(address _pie, uint256 _outputAmount, uint16[] memory _dexIndex) internal {\r\n\t    IPie pie = IPie(_pie);\r\n        (address[] memory tokens, uint256[] memory amounts) = pie.calcTokensForAmount(_outputAmount);\r\n\t    for (uint256 i = 0; i < tokens.length; i ++) {\r\n            swap(address(WETH), tokens[i], amounts[i], _dexIndex[i]);\r\n            IERC20 token = IERC20(tokens[i]);\r\n            token.approve(_pie, 0);\r\n            token.approve(_pie, amounts[i]);\r\n            require(amounts[i] <= token.balanceOf(address(this)), \"We are trying to deposit more then we have\");\r\n        }\r\n        pie.joinPool(_outputAmount);\r\n    }\r\n\r\n    function dexSwap(address _assetIn, address _assetOut, uint _amountOut, uint16 _dexIndex) public {\r\n        //Uni 500 fee\r\n        if (_dexIndex == 0) {\r\n            uniV3Router.ExactOutputSingleParams memory params = uniV3Router.ExactOutputSingleParams(\r\n                _assetIn,\r\n                _assetOut,\r\n                500,\r\n                address(this),\r\n                block.timestamp + 1,\r\n                _amountOut,\r\n                type(uint256).max,\r\n                0\r\n            );\r\n            IERC20(_assetIn).approve(address(uniRouter), 0);\r\n            IERC20(_assetIn).approve(address(uniRouter), type(uint256).max);\r\n            uniRouter.exactOutputSingle(params);\r\n            return;\r\n        }\r\n        //Uni 3000 fee\r\n        if (_dexIndex == 1) {\r\n            uniV3Router.ExactOutputSingleParams memory params = uniV3Router.ExactOutputSingleParams(\r\n                _assetIn,\r\n                _assetOut,\r\n                3000,\r\n                address(this),\r\n                block.timestamp + 1,\r\n                _amountOut,\r\n                type(uint256).max,\r\n                0\r\n            );\r\n\r\n            IERC20(_assetIn).approve(address(uniRouter), 0);\r\n            IERC20(_assetIn).approve(address(uniRouter), type(uint256).max);\r\n            uniRouter.exactOutputSingle(params);\r\n            return;\r\n        }\r\n        //Sushi\r\n        if (_dexIndex == 2) {\r\n            address[] memory route = new address[](2);\r\n            route[0] = _assetIn;\r\n            route[1] = _assetOut;\r\n            IERC20(_assetIn).approve(address(sushiRouter), 0);\r\n            IERC20(_assetIn).approve(address(sushiRouter), type(uint256).max);\r\n            sushiRouter.swapTokensForExactTokens(_amountOut, type(uint256).max, route, address(this), block.timestamp + 1);\r\n            return;\r\n        }\r\n        //Balancer\r\n        if (_dexIndex == 3) {\r\n            //Balancer\r\n            IBalancer.SwapKind kind = IBalancer.SwapKind.GIVEN_OUT;\r\n            IBalancer.SingleSwap memory singleSwap = IBalancer.SingleSwap(\r\n                balancerViable[_assetOut],\r\n                kind,\r\n                _assetIn,\r\n                _assetOut,\r\n                _amountOut,\r\n                \"\"\r\n            );\r\n            IBalancer.FundManagement memory funds = IBalancer.FundManagement(\r\n                address(this),\r\n                false,\r\n                payable(address(this)),\r\n                false\r\n            );\r\n\r\n            IERC20(_assetIn).approve(address(balancer), 0);\r\n            IERC20(_assetIn).approve(address(balancer), type(uint256).max);\r\n            balancer.swap(\r\n                singleSwap,\r\n                funds,\r\n                type(uint256).max,\r\n                block.timestamp + 1\r\n            );\r\n        }\r\n        else {\r\n            //make custom revert.\r\n            revert(\"ERROR: Invalid dex index.\");\r\n        }\r\n\r\n    }\r\n\r\n    //High gas cost, only queried off-chain\r\n    function getBestPrice(address _assetIn, address _assetOut, uint _amountOut) internal returns (BestPrice memory bestPrice){\r\n        uint uniAmount1;\r\n        uint uniAmount2;\r\n        uint sushiAmount;\r\n        uint balancerAmount;\r\n        BestPrice memory bestPrice;\r\n\r\n        //GET UNI PRICE\r\n        //(Uni provides pools with different fees. The most popular being 0.05% and 0.3%)\r\n        //Unfortunately they have to be specified\r\n        if (uniFee[_assetOut] == 500) {\r\n            try oracle.quoteExactOutputSingle(_assetIn, _assetOut, 500, _amountOut, 0) returns (uint256 returnAmount) {\r\n                uniAmount1 = returnAmount;\r\n            } catch {\r\n                uniAmount1 = type(uint256).max;\r\n            }\r\n            bestPrice.price = uniAmount1;\r\n            bestPrice.dexIndex = 0;\r\n        }\r\n        else if (uniFee[_assetOut] == 3000) {\r\n            try oracle.quoteExactOutputSingle(_assetIn, _assetOut, 3000, _amountOut, 0) returns (uint256 returnAmount) {\r\n                uniAmount2 = returnAmount;\r\n            } catch {\r\n                uniAmount2 = type(uint256).max;\r\n            }\r\n            bestPrice.price = uniAmount2;\r\n            bestPrice.dexIndex = 1;\r\n        }\r\n        else {\r\n            try oracle.quoteExactOutputSingle(_assetIn, _assetOut, 500, _amountOut, 0) returns (uint256 returnAmount) {\r\n                uniAmount1 = returnAmount;\r\n            } catch {\r\n                uniAmount1 = type(uint256).max;\r\n            }\r\n            bestPrice.price = uniAmount1;\r\n            bestPrice.dexIndex = 0;\r\n            try oracle.quoteExactOutputSingle(_assetIn, _assetOut, 3000, _amountOut, 0) returns (uint256 returnAmount) {\r\n                uniAmount2 = returnAmount;\r\n            } catch {\r\n                uniAmount2 = type(uint256).max;\r\n            }\r\n            if (bestPrice.price > uniAmount2) {\r\n                bestPrice.price = uniAmount2;\r\n                bestPrice.dexIndex = 1;\r\n            }\r\n        }\r\n\r\n        //GET SUSHI PRICE\r\n        address[] memory route = new address[](2);\r\n        route[0] = _assetIn;\r\n        route[1] = _assetOut;\r\n        try sushiRouter.getAmountsIn(_amountOut, route) returns (uint256[] memory amounts) {\r\n            sushiAmount = amounts[0];\r\n        } catch {\r\n            sushiAmount = type(uint256).max;\r\n        }\r\n        if (bestPrice.price > sushiAmount) {\r\n            bestPrice.price = sushiAmount;\r\n            bestPrice.dexIndex = 2;\r\n        }\r\n\r\n        //GET BALANCER PRICE\r\n        if (balancerViable[_assetOut] != \"\") {\r\n            //Get Balancer price\r\n            IBalancer.SwapKind kind = IBalancer.SwapKind.GIVEN_OUT;\r\n\r\n            address[] memory assets = new address[](2);\r\n            assets[0] = _assetIn;\r\n            assets[1] = _assetOut;\r\n\r\n            IBalancer.BatchSwapStep[] memory swapStep = new IBalancer.BatchSwapStep[](1);\r\n            swapStep[0] = IBalancer.BatchSwapStep(balancerViable[_assetOut], 0, 1, _amountOut, \"\");\r\n\r\n            IBalancer.FundManagement memory funds = IBalancer.FundManagement(payable(msg.sender), false, payable(msg.sender), false);\r\n\r\n            try balancer.queryBatchSwap(kind, swapStep, assets, funds) returns (int[] memory amounts) {\r\n                balancerAmount = uint(amounts[0]);\r\n            } catch {\r\n                balancerAmount = type(uint256).max;\r\n            }\r\n            if (bestPrice.price > balancerAmount) {\r\n                bestPrice.price = balancerAmount;\r\n                bestPrice.dexIndex = 3;\r\n            }\r\n        }\r\n        return bestPrice;\r\n    }\r\n\r\n    function getPricePie(address _pie, uint256 _pieAmount) public returns (uint256 mintPrice, uint16[] memory dexIndex) {\r\n        require(pieRegistry.inRegistry(_pie));\r\n\r\n        (address[] memory tokens, uint256[] memory amounts) = IPie(_pie).calcTokensForAmount(_pieAmount);\r\n        dexIndex = new uint16[](tokens.length);\r\n\r\n        BestPrice memory bestPrice;\r\n        for (uint256 i = 0; i < tokens.length; i ++) {\r\n            require(amounts[i] != 0, \"RECIPE: Mint amount to low\");\r\n\t        address underlying = lendingRegistry.wrappedToUnderlying(tokens[i]);\r\n            if(underlying != address(0)) {\r\n                address wrapedToken = tokens[i];\r\n                tokens[i] = underlying;\r\n                ILendingLogic lendingLogic = getLendingLogicFromWrapped(wrapedToken);\r\n                uint256 exchangeRate = lendingLogic.exchangeRate(wrapedToken);\r\n                amounts[i] = amounts[i].mul(exchangeRate).div(1e18);\r\n            }            \r\n\t        bestPrice = getBestPrice(address(WETH), tokens[i], amounts[i]);\r\n            mintPrice += bestPrice.price;\r\n            dexIndex[i] = uint16(bestPrice.dexIndex);\r\n        }\r\n\r\n        return (mintPrice, dexIndex);\r\n    }\r\n\r\n    function getLendingLogicFromWrapped(address _wrapped) internal view returns (ILendingLogic) {\r\n        return ILendingLogic(\r\n            lendingRegistry.protocolToLogic(\r\n                lendingRegistry.wrappedToProtocol(\r\n                    _wrapped\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    //////////////////////////\r\n    ///Admin Functions ///////\r\n    //////////////////////////\r\n\r\n    function setUniPoolMapping(address _outputAsset, uint16 _Fee) external onlyOwner {\r\n        uniFee[_outputAsset] = _Fee;\r\n    }\r\n\r\n    function setBalancerPoolMapping(address _inputAsset, bytes32 _pool) external onlyOwner {\r\n        balancerViable[_inputAsset] = _pool;\r\n    }\r\n\r\n    function saveToken(address _token, address _to, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer(_to, _amount);\r\n    }\r\n\r\n    function saveEth(address payable _to, uint256 _amount) external onlyOwner {\r\n        _to.call{value : _amount}(\"\");\r\n    }\r\n\r\n    receive() external payable{}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pieRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_dexIndex\",\"type\":\"uint16[]\"}],\"name\":\"bake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dexIndex\",\"type\":\"uint16\"}],\"name\":\"dexSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pie\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pieAmount\",\"type\":\"uint256\"}],\"name\":\"getPricePie\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"dexIndex\",\"type\":\"uint16[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputAsset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pool\",\"type\":\"bytes32\"}],\"name\":\"setBalancerPoolMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outputAsset\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_Fee\",\"type\":\"uint16\"}],\"name\":\"setUniPoolMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pie\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_dexIndex\",\"type\":\"uint16[]\"}],\"name\":\"toPie\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Recipe", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000008a2b7d713e388123dc6678168656659d297d39700000000000000000000000051801401e1f21c9184610b99b978d050a374566e000000000000000000000000f5bce5077908a1b7370b9ae04adc565ebd6439660000000000000000000000002cba6ab6574646badc84f0544d05059e57a5dc42", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7a9e83b8004e06396c77035b367ebd19d1c3e94b795c4374df34b4f7a4d84fe"}]}