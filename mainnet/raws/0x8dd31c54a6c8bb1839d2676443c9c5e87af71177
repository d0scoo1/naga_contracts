{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/IKWWData.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IKWWData { \r\n    struct KangarooDetails{\r\n        //Timestamp of the date the kangaroo is born\r\n        uint64 birthTime;\r\n        //Dad token id \r\n        uint32 dadId;\r\n        //Mom token id\r\n        uint32 momId;\r\n        //Couple token id \r\n        uint32 coupleId;\r\n        //If the kangaroo is on boat, the boatId will be set here\r\n        uint16 boatId;\r\n        //If the kangaroo moved to another land, the new landId will be set here\r\n\t    uint16 landId;\r\n        //The generation of the kangaroo (genesis - gen0) NOT CHANGING\r\n\t\tuint8 gen;\r\n        //Status of the kangaroo in the game\r\n        // 0 - Australian\r\n        // 1 - Sailing\r\n        // 2 - Kangaroo Island\r\n        // 3 - Pregnant\r\n\t\tuint8 status;\r\n        //Type of the kangaroo (Pirate, Native, etc.)\r\n        uint8 bornState;\r\n    }\r\n\r\n    struct CoupleDetails{\r\n        //Timestamp when the pregnancy started\r\n        uint64 pregnancyStarted;\r\n        uint8 babiesCounter;\r\n        //false - wild world, true - hospital\r\n        bool paidHospital;\r\n        bool activePregnant;\r\n    }\r\n\r\n    function initKangaroo(uint32 tokenId, uint32 dadId, uint32 momId) external;\r\n}\r\n// File: contracts/IKWWGameManager.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IKWWGameManager{\r\n    enum ContractTypes {KANGAROOS, BOATS, LANDS, VAULT, VAULT_ETH, DATA, MOVING_BOATS, VOTING}\r\n\r\n    function getContract(uint8 _type) external view returns(address);\r\n}\r\n\r\ninterface Vault{\r\n    function depositToVault(address owner, uint256[] memory tokens, uint8 assetsType, bool frozen) external;\r\n    function withdrawFromVault(address owner, uint256[] calldata tokenIds) external ;\r\n    function setAssetFrozen(uint256 token, bool isFrozen) external ;\r\n    function getHolder(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ninterface VaultEth{\r\n    function depositBoatFees(uint16 totalSupply) external payable;\r\n    function depositLandFees(uint16 landId) external payable;\r\n    function boatAvailableToWithdraw(uint16 totalSupply, uint16 boatId) external view returns(uint256);\r\n    function landAvailableToWithdraw(uint16 landId, uint8 ownerTypeId) external view returns(uint256);\r\n    function withdrawBoatFees(uint16 totalSupply, uint16 boatId, address addr) external;\r\n    function withdrawLandFees(uint16 landId, uint8 ownerTypeId, address addr) external;\r\n}\r\n\r\ninterface KangarooData{\r\n    function setCouple(uint32 male, uint32 female) external ;\r\n    function kangarooMoveLand(uint32 tokenId, uint16 landId) external;\r\n    function kangarooTookBoat(uint32 tokenId, uint16 boatId) external;\r\n    function kangarooReachedIsland(uint32 tokenId) external ;\r\n    function kangarooStartPregnancy(uint32 dadId, uint32 momId, bool hospital) external ;\r\n    function birthKangaroos(uint32 dadId, uint32 momId, address ownerAddress) external ;\r\n    function getBackAustralian(uint32 dadId, uint32 momId, uint16 boatId) external;\r\n    function kangaroosArrivedContinent(uint32 dadId, uint32 momId) external;\r\n    function getKangaroo(uint32 tokenId) external view returns(IKWWData.KangarooDetails memory);\r\n    function isCouples(uint32 male, uint32 female) external view returns(bool);\r\n    function getCouple(uint32 tokenId) external view returns(uint32);\r\n    function getBabiesCounter(uint32 male, uint32 female) external view returns(uint8);\r\n    function doneMaxBabies(uint32 male, uint32 female) external view returns(bool);\r\n    function kangarooIsMale(uint32 tokenId) external pure returns(bool);\r\n    function updateBoatId(uint32 tokenId, uint16 boatId) external;\r\n    function getKangarooGen(uint32 tokenId) external view returns(uint8);\r\n    function baseMaxBabiesAllowed(uint32 token) external view returns(uint8);\r\n    function getStatus(uint32 tokenId) external view returns(uint8);\r\n    function isBaby(uint32 tokenId) external view returns(bool);\r\n    function getBornState(uint32 tokenId) external view returns(uint8);\r\n    function couplesData(uint64 coupleId) external view returns(IKWWData.CoupleDetails memory);\r\n}\r\n\r\ninterface MovingBoatsData{\r\n    // function startSail(uint8 boatState, uint8 route, uint32[] calldata kangaroos) external;\r\n    function startSail(uint8 boatState, bool direction) external;\r\n    function getLastId() external view returns(uint256);\r\n    function getKangaroos(uint16 tokenId) external view returns(uint32[] memory);\r\n    function getBoatState(uint16 tokenId) external view returns(uint8);\r\n    function getDirection(uint16 tokenId) external view returns(bool);\r\n    function sailEnd(uint16 tokenId) external view returns(uint64);\r\n}\r\n\r\ninterface Voting{\r\n    function getBoatPrice(uint16 token) external view returns(uint256);\r\n}\r\n\r\ninterface LandsData { \r\n    struct LandDetails{\r\n        //Price of land taxes\r\n        uint256 price;\r\n        //prince token id (kangaroo)\r\n\t\tuint32 princeId;\r\n        //princess token id (kangaroo)\r\n        uint32 princessId;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function getLandData(uint16 tokenId) external view returns(LandDetails memory);\r\n    function getPrice(uint16 tokenId) external view returns(uint256);\r\n    function getPrince(uint16 tokenId) external view returns(uint32);\r\n    function getPrincess(uint16 tokenId) external view returns(uint32);\r\n}\r\n\r\n\r\ninterface INFT{\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\n// interface KangaroosNFT{\r\n//     function totalSupply() external view returns (uint256);\r\n//     function ownerOf(uint256 tokenId) external view returns (address);\r\n// }\r\n\r\n// interface BoatsNFT{\r\n//     function totalSupply() external view returns (uint256);\r\n//     function ownerOf(uint256 tokenId) external view returns (address);\r\n// }\r\n\r\n// interface LandsNFT{\r\n//     function totalSupply() external view returns (uint256);\r\n//     function ownerOf(uint256 tokenId) external view returns (address);\r\n// }\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/KWWGameManager.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ncontract KWWGameManager is IKWWGameManager, Ownable{\r\n    event CoupleMovedLand(uint32 indexed _male, uint32 indexed _female, uint16 _landId);\r\n    event CoupleStartedSailing(uint32 indexed _male, uint32 indexed _female, uint16 _boatId);\r\n    event ArrivedIsland(uint32 indexed _male, uint32 indexed _female);\r\n    event PregnancyStarted(uint32 indexed _male, uint32 indexed _female, bool isHospital);\r\n    event BabiesBorn(uint32 indexed _male, uint32 indexed _female);\r\n    event ArrivedContinent(uint32 indexed _male, uint32 indexed _female);\r\n    event SailBackStarted(uint32 indexed _male, uint32 indexed _female, uint16 _boatId);\r\n\r\n\r\n    mapping(uint8 => address) contracts;\r\n\r\n    /*\r\n        GAME\r\n    */\r\n\r\n    //Move land\r\n    function coupleMoveLand(uint32 male, uint32 female, uint16 landId) public payable {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //check land exists\r\n        require(getLandNFT().ownerOf(landId) != address(0), \"Land not Exists\");\r\n        //Check if not babies\r\n        require(!getData().isBaby(male) && !getData().isBaby(female), \"One of the kangaroos is baby\");\r\n        //Check if from same state\r\n        require(getData().getBornState(male) == getData().getBornState(female),\"Couple not from the same born state\");\r\n        //Check if from same gen\r\n        require(getData().getKangarooGen(male) == getData().getKangarooGen(female),\"Couple not from the same generation\");\r\n        //Check if genders match - male is really male \r\n        require(getData().kangarooIsMale(male) == true && getData().kangarooIsMale(female) == false,\"Couple genders mismatched\");\r\n        //Pay to boat owners\r\n        require(getLandNFT().getPrice(landId) <= msg.value, \"Tax fee is too low\");\r\n        getVaultEth().depositLandFees{value:msg.value}(landId);\r\n        //Change status of kangaroos\r\n        getData().kangarooMoveLand(male, landId);\r\n        getData().kangarooMoveLand(female, landId);\r\n        //Trigger event \"CoupleMovedLand(uint32 male, uint32 female, uint8 landId)\"\r\n        emit CoupleMovedLand(male, female, landId);\r\n    }\r\n\r\n    //Step 1 - Couple pick boat and start sail\r\n    function coupleStartJourney(uint32 male, uint32 female) public payable {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Check if not babies\r\n        require(!getData().isBaby(male) && !getData().isBaby(female), \"One of the kangaroos is baby\");\r\n        //Check if from same state\r\n        require(getData().getBornState(male) == getData().getBornState(female),\"Couple not from the same born state\");\r\n        //Check if from same gen\r\n        require(getData().getKangarooGen(male) == getData().getKangarooGen(female),\"Couple not from the same generation\");\r\n        //Check if genders match - male is really male \r\n        require(getData().kangarooIsMale(male) == true && getData().kangarooIsMale(female) == false,\"Couple genders mismatched\");\r\n        //Check status == 0\r\n        require(getData().getStatus(male) == 0 && getData().getStatus(female) == 0, \"Status doesn't fit this step\");\r\n        //Is single before starting the journey\r\n        require(getData().getCouple(male) == 0 && getData().getCouple(female) == 0, \"Can't change couple\");\r\n        //Pay to boat owners\r\n        require(getVoting().getBoatPrice(1) <= msg.value, \"Renting fee is too low\");\r\n        getVaultEth().depositBoatFees{value:msg.value}(uint16(getBoatNFT().totalSupply()) - 1);\r\n        //Change status of boat - active + update num kangaroos\r\n        uint32[] memory kangaroosArr = new uint32[](2);\r\n        kangaroosArr[0] = male;\r\n        kangaroosArr[1] = female;\r\n        getMovingBoats().startSail(getData().getBornState(male), true);\r\n        uint16 movingBoatId = uint16(getMovingBoats().getLastId());\r\n        //deposit kangaroos vault - with freezing\r\n        depositCouple(male, female, true);\r\n        //SAVE THEM AS A COUPLE - Create couples journey mapping(uint64=>coupleData)\r\n        getData().setCouple(male, female);\r\n        //Change status of kangaroos\r\n        getData().kangarooTookBoat(male, movingBoatId);\r\n        getData().kangarooTookBoat(female, movingBoatId);\r\n        //Trigger event \"CoupleStartedSailing(uint32 male, uint32 female, uint8 boatId)\"\r\n        emit CoupleStartedSailing(male, female, movingBoatId);\r\n    }\r\n\r\n    function pregnancyOnWildWorld(uint32 male, uint32 female) public {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Check status == 1 (on sail)\r\n        require(getData().getStatus(male) == 1 && getData().getStatus(female) == 1, \"Status doesn't fit this step\");\r\n        //Is Couples\r\n        require(getData().isCouples(male, female), \"Not Couples\");\r\n        //Check that the time really passed, and they arrived\r\n        uint16 boatId = getData().getKangaroo(male).boatId;\r\n        require(getMovingBoats().sailEnd(boatId) <= block.timestamp, \"Still on sail\");\r\n        //Check boat route is to island\r\n        require(getMovingBoats().getDirection(boatId) == true, \"not in the route to kangaroo island\");\r\n        //Change status of kangaroos\r\n        getData().updateBoatId(male, 0);\r\n        getData().updateBoatId(female, 0);\r\n        getData().kangarooStartPregnancy(male, female, false);\r\n        //Trigger event \"PregnancyStarted(uint32 male, uint32 female, Wild World)\"\r\n        emit PregnancyStarted(male, female, false);\r\n    }\r\n\r\n    function pregnancyOnHospital(uint32 male, uint32 female) public payable{\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Check status == 1 (on sail)\r\n        require(getData().getStatus(male) == 1 && getData().getStatus(female) == 1, \"Status doesn't fit this step\");\r\n        //Is Couples\r\n        require(getData().isCouples(male, female), \"Not Couples\");\r\n        //Check that the time really passed, and they arrived\r\n        uint16 boatId = getData().getKangaroo(male).boatId;\r\n        require(getMovingBoats().sailEnd(boatId) <= block.timestamp, \"Still on sail\");\r\n        //Check boat route is to island\r\n        require(getMovingBoats().getDirection(boatId) == true, \"not in the route to kangaroo island\");\r\n        //Check full payment\r\n        require(getHospitalPrice() <= msg.value, \"Hospital fee too low\");\r\n        //Deposit Land fees to kangaroo island\r\n        getVaultEth().depositLandFees{value:msg.value}(1);\r\n        //Change status of kangaroos\r\n        getData().updateBoatId(male, 0);\r\n        getData().updateBoatId(female, 0);\r\n        getData().kangarooStartPregnancy(male, female, true);\r\n        //Trigger event \"PregnancyStarted(uint32 male, uint32 female, Hospital)\"\r\n        emit PregnancyStarted(male, female, true);\r\n    }\r\n\r\n    function birthBabies(uint32 male, uint32 female) public {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Check status == 3\r\n        require(getData().getStatus(male) == 3 && getData().getStatus(female) == 3, \"Status doesn't fit this step\");\r\n        //Is Couples\r\n        require(getData().isCouples(male, female), \"Not Couples\");\r\n        //Change status of kangaroos\r\n        getData().birthKangaroos(male, female, msg.sender);\r\n        //Trigger event \"Babies Born(uint32 male, uint32 female)\"\r\n        emit BabiesBorn(male, female);\r\n    }\r\n\r\n    function coupleSailBack(uint32 male, uint32 female) public {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Is Couples\r\n        require(getData().isCouples(male, female), \"Not Couples\");\r\n        //Check made maximum babies\r\n        require(getData().doneMaxBabies(male, female), \"You need to make maximum amount of babies before you leave\");\r\n        //Check status == 2 (on kangaroo island)\r\n        require(getData().getStatus(male) == 2 && getData().getStatus(female) == 2, \"Status doesn't fit this step\");\r\n        //Get on boat (Return back direction)\r\n        getMovingBoats().startSail(getData().getBornState(male), false);\r\n        uint16 movingBoatId = uint16(getMovingBoats().getLastId());\r\n        //Change status of kangaroos\r\n        getData().getBackAustralian(male, female, movingBoatId);\r\n        //Trigger event \"SailBackStarted(uint32 male, uint32 female, uint8 boatId)\"\r\n        emit SailBackStarted(male, female, movingBoatId);\r\n    }\r\n\r\n    function arrivedToContinent(uint32 male, uint32 female) public {\r\n        //Check ownership\r\n        require(isOwnerOrStaked(male, ContractTypes.KANGAROOS) && isOwnerOrStaked(female, ContractTypes.KANGAROOS), \"Missing permissions - you're not the owner of one of the tokens\");\r\n        //Check that the time really passed, and they arrived\r\n        uint16 boatId = getData().getKangaroo(male).boatId;\r\n        require(getMovingBoats().sailEnd(boatId) <= block.timestamp, \"Still on sail\");\r\n        //Check boat route is to island (route == 2)\r\n        require(getMovingBoats().getDirection(boatId) == false, \"not on the route to Australian\");\r\n        //Check status == 1 (On Boat)\r\n        require(getData().getStatus(male) == 1 && getData().getStatus(female) == 1, \"Status doesn't fit this step\");\r\n        //Change status of kangaroos\r\n        getData().kangaroosArrivedContinent(male, female);\r\n        //Trigger event \"ArrivedContinent(uint32 male, uint32 female)\r\n        emit ArrivedContinent(male, female);\r\n    }\r\n\r\n    /*\r\n        HELPERS\r\n    */\r\n\r\n    function getCurrentState(uint32 kangarooId) public view returns(uint8){\r\n        IKWWData.KangarooDetails memory data = getData().getKangaroo(kangarooId);\r\n        if(data.landId != 0){\r\n            return uint8(data.landId);\r\n        }\r\n        return data.bornState;\r\n    }\r\n\r\n    function getFirstBoatIdFromState(uint8 stateId) public pure returns(uint16){\r\n        return 1+((stateId - 1) * 100);\r\n    }\r\n\r\n    function pack(uint32 a, uint32 b) public pure returns(uint64) {\r\n        return (uint64(a) << 32) | uint64(b);\r\n    }\r\n\r\n    function boatAvailableToWithdraw(uint16 boatId) public view returns(uint256) {\r\n        return getVaultEth().boatAvailableToWithdraw(uint16(getBoatNFT().totalSupply()), boatId);\r\n    }\r\n\r\n    function landAvailableToWithdraw(uint16 landId, uint8 ownerTypeId) public view returns(uint256) {\r\n        return getVaultEth().landAvailableToWithdraw(landId, ownerTypeId);\r\n    }\r\n\r\n    function withdrawBoatFees(uint16 boatId) public {\r\n        require(getBoatNFT().ownerOf(boatId) == msg.sender, \"caller is not the owner of the boat\");\r\n        getVaultEth().withdrawBoatFees(uint16(getBoatNFT().totalSupply()), boatId, getBoatNFT().ownerOf(boatId));\r\n    }\r\n    \r\n    function withdrawLandFees(uint16 landId, uint8 ownerTypeId) public {\r\n        address addr = getLandOwnerAddress(landId, ownerTypeId);\r\n        require(addr != address(0) && addr == msg.sender, \"caller is not the owner of the land\");\r\n        getVaultEth().withdrawLandFees(landId, ownerTypeId, addr);\r\n    }\r\n\r\n    function depositCouple(uint32 dadId, uint32 momId, bool frozen) internal {\r\n        uint256[] memory arr = new uint256[](2);\r\n        arr[0] = uint256(dadId);\r\n        arr[1] = uint256(momId);\r\n        getVault().depositToVault(msg.sender, arr, uint8(ContractTypes.KANGAROOS), frozen);\r\n    }\r\n\r\n    /*\r\n        GETTERS\r\n    */\r\n\r\n    function getHospitalPrice() view public returns(uint256){\r\n        return getLandNFT().getPrice(1);\r\n    }\r\n\r\n    function getContract(uint8 _type) override view public returns(address){\r\n        require(contracts[_type] != address(0),\"Contract not exists\");\r\n        return contracts[_type];\r\n    }\r\n\r\n    function getLandData(uint16 tokenId) public view returns(LandsData.LandDetails memory){\r\n        return getLandNFT().getLandData(tokenId);\r\n    }\r\n\r\n    function getLandOwnerAddress(uint16 landId, uint8 ownerType) public view returns(address){\r\n        address addr = address(0);\r\n        LandsData.LandDetails memory landData = getLandData(landId);\r\n        //Prince\r\n        if(ownerType == 0){\r\n            getKangaroosNFT().ownerOf(landData.princeId);\r\n        }\r\n        //Princess\r\n        else if(ownerType == 1){\r\n            getKangaroosNFT().ownerOf(landData.princessId);\r\n        }\r\n        //Landlord\r\n        else if(ownerType == 2){\r\n            getLandNFT().ownerOf(landId);\r\n        }\r\n\r\n        return addr;\r\n    }\r\n\r\n    function getKangaroosNFT() view public returns(INFT){\r\n        return INFT(getContract(uint8(ContractTypes.KANGAROOS)));\r\n    }\r\n\r\n    function getBoatNFT() view public returns(INFT){\r\n        return INFT(getContract(uint8(ContractTypes.BOATS)));\r\n    }\r\n    \r\n    function getLandNFT() view public returns(LandsData){\r\n        return LandsData(getContract(uint8(ContractTypes.LANDS)));\r\n    }\r\n    \r\n    function getVault() view public returns(Vault){\r\n        return Vault(getContract(uint8(ContractTypes.VAULT)));\r\n    }\r\n\r\n    function getVaultEth() view public returns(VaultEth){\r\n        return VaultEth(getContract(uint8(ContractTypes.VAULT_ETH)));\r\n    }\r\n\r\n    function getData() view public returns(KangarooData){\r\n        return KangarooData(getContract(uint8(ContractTypes.DATA)));\r\n    }\r\n\r\n    function getMovingBoats() view public returns(MovingBoatsData){\r\n        return MovingBoatsData(getContract(uint8(ContractTypes.MOVING_BOATS)));\r\n    }\r\n\r\n    function getVoting() view public returns(Voting){\r\n        return Voting(getContract(uint8(ContractTypes.VOTING)));\r\n    }\r\n\r\n\r\n    function isOwnerOrStaked(uint256 tokenId, ContractTypes _type) internal view returns(bool){\r\n        require(contracts[uint8(_type)] != address(0) && contracts[uint8(ContractTypes.VAULT)]  != address(0) , \"One of the contract not initialized\");\r\n\r\n        bool isOwner = INFT(contracts[uint8(_type)]).ownerOf(tokenId) == msg.sender;\r\n        bool isStaked = Vault(contracts[uint8(ContractTypes.VAULT)]).getHolder(tokenId) == msg.sender;\r\n        return isOwner || isStaked;\r\n    }\r\n\r\n    /*\r\n        ONLY OWNER\r\n    */\r\n    function addContractType(uint8 typeId, address _addr) public onlyOwner{\r\n        contracts[typeId] = _addr;\r\n    }\r\n\r\n    function addMultipleContracts(uint8[] calldata types, address[] calldata addresses) public onlyOwner{\r\n        for (uint256 i = 0; i < types.length; i++) {\r\n            addContractType(types[i], addresses[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"}],\"name\":\"ArrivedContinent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"}],\"name\":\"ArrivedIsland\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"}],\"name\":\"BabiesBorn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_landId\",\"type\":\"uint16\"}],\"name\":\"CoupleMovedLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_boatId\",\"type\":\"uint16\"}],\"name\":\"CoupleStartedSailing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHospital\",\"type\":\"bool\"}],\"name\":\"PregnancyStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_male\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_female\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_boatId\",\"type\":\"uint16\"}],\"name\":\"SailBackStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addContractType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"types\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addMultipleContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"arrivedToContinent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"birthBabies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"boatAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"}],\"name\":\"coupleMoveLand\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"coupleSailBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"coupleStartJourney\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoatNFT\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"kangarooId\",\"type\":\"uint32\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"contract KangarooData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stateId\",\"type\":\"uint8\"}],\"name\":\"getFirstBoatIdFromState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHospitalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKangaroosNFT\",\"outputs\":[{\"internalType\":\"contract INFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getLandData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"princeId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"princessId\",\"type\":\"uint32\"}],\"internalType\":\"struct LandsData.LandDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLandNFT\",\"outputs\":[{\"internalType\":\"contract LandsData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerType\",\"type\":\"uint8\"}],\"name\":\"getLandOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMovingBoats\",\"outputs\":[{\"internalType\":\"contract MovingBoatsData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultEth\",\"outputs\":[{\"internalType\":\"contract VaultEth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoting\",\"outputs\":[{\"internalType\":\"contract Voting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"}],\"name\":\"landAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"a\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"b\",\"type\":\"uint32\"}],\"name\":\"pack\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"pregnancyOnHospital\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"male\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"female\",\"type\":\"uint32\"}],\"name\":\"pregnancyOnWildWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"withdrawBoatFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"}],\"name\":\"withdrawLandFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWGameManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77cec6262cff2ddeac7fe2e03a3503a62acbb243be340947062ea486d4b7c186"}]}