{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Sale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./lib/ISarugami.sol\\\";\\r\\n\\r\\ncontract Sale is Ownable, ReentrancyGuard {\\r\\n    bytes32 public merkleRootAlphaTeam = \\\"0x\\\";\\r\\n    uint256 public maxAlphaTeam = 4;\\r\\n\\r\\n    bytes32 public merkleRootHeadMods = \\\"0x\\\";\\r\\n    uint256 public maxHeadMods = 3;\\r\\n\\r\\n    bytes32 public merkleRootMods = \\\"0x\\\";\\r\\n    uint256 public maxMods = 2;\\r\\n\\r\\n    bytes32 public merkleRootHonoraryOg = \\\"0x\\\";\\r\\n    uint256 public maxHonoraryOg = 2;\\r\\n    uint256 priceHonoraryOg = 26500000000000000;\\r\\n\\r\\n    bytes32 public merkleRootOg = \\\"0x\\\";\\r\\n    uint256 public maxOg = 2;\\r\\n    uint256 priceOg = 53000000000000000;\\r\\n\\r\\n    bytes32 public merkleRootWhitelist = \\\"0x\\\";\\r\\n    uint256 public maxWhitelist = 1;\\r\\n    uint256 priceWhitelist = 53000000000000000;\\r\\n\\r\\n    bytes32 public merkleRootRaffle = \\\"0x\\\";\\r\\n    uint256 public maxRaffle = 1;\\r\\n    uint256 priceRaffle = 88000000000000000;\\r\\n\\r\\n    uint256 public startFirstDay = 1656176400;\\r\\n    uint256 public finishFirstDay = 1656266400;\\r\\n    uint256 public startSecondDay = 1656268200;\\r\\n    uint256 public finishSecondDay = 1656354600;\\r\\n    ISarugami public sarugami;\\r\\n\\r\\n    bool public isHolderMintActive = false;\\r\\n    uint256 public holderPrice = 1000000000000000000;\\r\\n    bytes32 public merkleRootHolder = \\\"0x\\\";\\r\\n\\r\\n    bool public isPublicMintActive = false;\\r\\n    bool public isLimitOnPublicMint = true;\\r\\n    uint256 public publicPrice = 1000000000000000000;\\r\\n\\r\\n    mapping(address => uint256) public walletMintCount;\\r\\n    mapping(address => uint256) public walletMintCountRaffle;\\r\\n    mapping(address => uint256) public walletHolderCount;\\r\\n    mapping(address => uint256) public walletPublicCount;\\r\\n\\r\\n    constructor(\\r\\n        address sarugamiAddress\\r\\n    ) {\\r\\n        sarugami = ISarugami(sarugamiAddress);\\r\\n    }\\r\\n\\r\\n    function buy(bytes32[] calldata merkleProof, uint256 group, uint256 amount) public payable nonReentrant {\\r\\n        require(block.timestamp > startFirstDay, \\\"Sale not open\\\");\\r\\n        require(block.timestamp < finishSecondDay, \\\"Sale ended\\\");\\r\\n        require(group > 0 && group <= 7, \\\"Invalid group\\\");\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        require(isWalletListed(merkleProof, msg.sender, group) == true, \\\"Invalid proof, your wallet isn't listed in any group\\\");\\r\\n\\r\\n        uint256 price = getPriceForGroup(group, amount);\\r\\n        require(msg.value == price, \\\"ETH sent does not match Sarugami value\\\");\\r\\n\\r\\n        //FIRST DAY ELSE SECOND DAY\\r\\n        if (block.timestamp > startFirstDay && block.timestamp < finishFirstDay) {\\r\\n            require(group <= 6, \\\"Today is just for groups: Team, Honorary OGs, OGs and Whitelist\\\");\\r\\n            require(walletMintCount[msg.sender] + amount <= getMaxAmountForGroup(group), \\\"Max amount reached for this wallet\\\");\\r\\n\\r\\n            //IF IS THE FIRST HOUR JUST ALPHA AND HEAD MOD CAN MINT FOR TESTS\\r\\n            if (block.timestamp < (startFirstDay + 3600)) {\\r\\n                require(group <= 2, \\\"Alpha team + Head mod is minting now for tests purposes\\\");\\r\\n            }\\r\\n\\r\\n            walletMintCount[msg.sender] += amount;\\r\\n            sarugami.mint(msg.sender, amount);\\r\\n        } else {\\r\\n            require(group > 6, \\\"You miss the minting date sorry.\\\");\\r\\n            require(block.timestamp > startSecondDay, \\\"Public Raffle and Earlier Supporter Raffle not open\\\");\\r\\n            require(block.timestamp < finishSecondDay, \\\"Public Raffle and Earlier Supporter Raffle ended\\\");\\r\\n            require(walletMintCountRaffle[msg.sender] + amount <= getMaxAmountForGroup(group), \\\"Max 1 per wallet\\\");\\r\\n\\r\\n            walletMintCountRaffle[msg.sender] += amount;\\r\\n            sarugami.mint(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintHolder(bytes32[] calldata merkleProof) public payable nonReentrant {\\r\\n        require(isHolderMintActive, \\\"Holder sale not open\\\");\\r\\n        require(walletHolderCount[msg.sender] + 1 <= 1, \\\"Max 1 per wallet\\\");\\r\\n        require(msg.value == holderPrice, \\\"ETH sent does not match Sarugami value\\\");\\r\\n        require(isWalletListed(merkleProof, msg.sender, 8) == true, \\\"Invalid proof, your wallet isn't listed on holders group\\\");\\r\\n\\r\\n        walletHolderCount[msg.sender] += 1;\\r\\n        sarugami.mint(msg.sender, 1);\\r\\n    }\\r\\n\\r\\n    function mintPublic(uint256 amount) public payable nonReentrant {\\r\\n        require(isPublicMintActive, \\\"Public sale not open\\\");\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        if (isLimitOnPublicMint) {\\r\\n            require(walletPublicCount[msg.sender] + amount <= 2, \\\"Max 2 per wallet\\\");\\r\\n            walletPublicCount[msg.sender] += amount;\\r\\n        }\\r\\n\\r\\n        require(msg.value == publicPrice * amount, \\\"ETH sent does not match Sarugami value\\\");\\r\\n\\r\\n        sarugami.mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function changePricePublic(uint256 newPrice) external onlyOwner {\\r\\n        publicPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function changePriceHolder(uint256 newPrice) external onlyOwner {\\r\\n        holderPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function getMaxAmountForGroup(uint256 group) public view returns (uint256 amount) {\\r\\n        if (group == 1) {\\r\\n            return maxAlphaTeam;\\r\\n        }\\r\\n\\r\\n        if (group == 2) {\\r\\n            return maxHeadMods;\\r\\n        }\\r\\n\\r\\n        if (group == 3) {\\r\\n            return maxMods;\\r\\n        }\\r\\n\\r\\n        if (group == 4) {\\r\\n            return maxHonoraryOg;\\r\\n        }\\r\\n\\r\\n        if (group == 5) {\\r\\n            return maxOg;\\r\\n        }\\r\\n\\r\\n        if (group == 6) {\\r\\n            return maxWhitelist;\\r\\n        }\\r\\n\\r\\n        if (group == 7) {\\r\\n            return maxRaffle;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getPriceForGroup(uint256 group, uint256 amount) public view returns (uint256 price) {\\r\\n        if (group == 1) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (group == 2) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (group == 3) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (group == 4) {\\r\\n            return priceHonoraryOg * amount;\\r\\n        }\\r\\n\\r\\n        if (group == 5) {\\r\\n            return priceOg * amount;\\r\\n        }\\r\\n\\r\\n        if (group == 6) {\\r\\n            return priceWhitelist * amount;\\r\\n        }\\r\\n\\r\\n        if (group == 7) {\\r\\n            return priceRaffle * amount;\\r\\n        }\\r\\n\\r\\n        return 1000000000000000000;\\r\\n    }\\r\\n\\r\\n    function isWalletListed(\\r\\n        bytes32[] calldata merkleProof,\\r\\n        address wallet,\\r\\n        uint256 group\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(wallet));\\r\\n\\r\\n        if (group == 1) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootAlphaTeam, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 2) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootHeadMods, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 3) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootMods, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 4) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootHonoraryOg, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 5) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootOg, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 6) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootWhitelist, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 7) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootRaffle, leaf);\\r\\n        }\\r\\n\\r\\n        if (group == 8) {\\r\\n            return MerkleProof.verify(merkleProof, merkleRootHolder, leaf);\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function changePublicMint() external onlyOwner {\\r\\n        isPublicMintActive = !isPublicMintActive;\\r\\n    }\\r\\n\\r\\n    function changeLimitPublicMint() external onlyOwner {\\r\\n        isLimitOnPublicMint = !isLimitOnPublicMint;\\r\\n    }\\r\\n\\r\\n    function changeHolderMint() external onlyOwner {\\r\\n        isHolderMintActive = !isHolderMintActive;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootAlphaTeam(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootAlphaTeam = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootHolder(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootHolder = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootHeadMods(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootHeadMods = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootMods(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootMods = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootHonoraryOg(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootHonoraryOg = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootOg(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootOg = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootWhitelist(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootWhitelist = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setMerkleTreeRootRaffle(bytes32 newMerkleRoot) external onlyOwner {\\r\\n        merkleRootRaffle = newMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function setStartFirstDay(uint256 timestamp) external onlyOwner {\\r\\n        startFirstDay = timestamp;\\r\\n    }\\r\\n\\r\\n    function setFinishFirstDay(uint256 timestamp) external onlyOwner {\\r\\n        finishFirstDay = timestamp;\\r\\n    }\\r\\n\\r\\n    function setStartSecondDay(uint256 timestamp) external onlyOwner {\\r\\n        startSecondDay = timestamp;\\r\\n    }\\r\\n\\r\\n    function setFinishSecondDay(uint256 timestamp) external onlyOwner {\\r\\n        finishSecondDay = timestamp;\\r\\n    }\\r\\n\\r\\n    function withdrawStuckToken(address recipient, address token) external onlyOwner() {\\r\\n        IERC20(token).transfer(recipient, IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function removeDustFunds(address treasury) external onlyOwner {\\r\\n        (bool success,) = treasury.call{value : address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"funds were not sent properly to treasury\\\");\\r\\n    }\\r\\n\\r\\n    function removeFunds() external onlyOwner {\\r\\n        uint256 funds = address(this).balance;\\r\\n\\r\\n        (bool devShare,) = 0xDEcB0fB8d7BB68F0CE611460BE8Ca0665A72d47E.call{\\r\\n        value : funds * 5 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool makiShare,) = 0x83fEa2d7cB61174c55E6fFA794840FF91d889d00.call{\\r\\n        value : funds * 15 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool nikoShare,) = 0xeb3853d765870fF40318CF37f3b83B02Fd18b46C.call{\\r\\n        value : funds * 3 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool frankShare,) = 0xCE1f60EC76a7bBacED41816775b842067d8D17B3.call{\\r\\n        value : funds * 3 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool peresShare,) = 0x7F1a6c8DFF62e1595A699e9f0C93B654CcfC5Fe1.call{\\r\\n        value : funds * 2 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool guuhShare,) = 0x907c71f22d893CB75340C820fe794BC837079e8E.call{\\r\\n        value : funds * 1 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool luccaShare,) = 0x3bB05e56cb60C1e2D00d3e4d0B8Ae7501B2f5F50.call{\\r\\n        value : funds * 1 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool costShare,) = 0x3bB05e56cb60C1e2D00d3e4d0B8Ae7501B2f5F50.call{\\r\\n        value : funds * 10 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool pedroShare,) = 0x289660e62ff872536330938eb843607FC53E0a34.call{\\r\\n        value : funds * 30 / 100\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        (bool digaoShare,) = 0xDEEf09D53355E838db08E1DBA9F86a5A7DfF2124.call{\\r\\n        value : address(this).balance\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        require(\\r\\n            devShare &&\\r\\n            makiShare &&\\r\\n            nikoShare &&\\r\\n            frankShare &&\\r\\n            peresShare &&\\r\\n            guuhShare &&\\r\\n            luccaShare &&\\r\\n            costShare &&\\r\\n            pedroShare &&\\r\\n            digaoShare,\\r\\n            \\\"funds were not sent properly\\\"\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/lib/ISarugami.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface ISarugami {\\r\\n    function mint(address, uint256) external returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sarugamiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeHolderMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeLimitPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePricePublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changePublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishFirstDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSecondDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"}],\"name\":\"getMaxAmountForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHolderMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitOnPublicMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAlphaTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHeadMods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHonoraryOg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootAlphaTeam\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootHeadMods\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootHonoraryOg\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootMods\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootOg\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootRaffle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootWhitelist\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintHolder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"removeDustFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sarugami\",\"outputs\":[{\"internalType\":\"contract ISarugami\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFinishFirstDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFinishSecondDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootAlphaTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootHeadMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootHonoraryOg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootOg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleTreeRootWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartFirstDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartSecondDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFirstDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSecondDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletHolderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMintCountRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletPublicCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Sale", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000210f75e4ebedf6f19dda89950fa7278030ec4ca3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}