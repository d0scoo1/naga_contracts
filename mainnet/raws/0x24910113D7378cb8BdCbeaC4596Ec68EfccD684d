{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n// pragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* // pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n    function setAuthority(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface DogLike {\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external returns (uint256);\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setAuthority(address _base, address _authority) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\n    function setD3MTargetInterestRate(address _d3m, uint256 _pct_bps) public {}\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// lib/dss-interfaces/src/dss/VestAbstract.sol\n/* pragma solidity >=0.5.12; */\n\n// https://github.com/makerdao/dss-vest/blob/master/src/DssVest.sol\ninterface VestAbstract {\n    function TWENTY_YEARS() external view returns (uint256);\n    function wards(address) external view returns (uint256);\n    function rely(address) external;\n    function deny(address) external;\n    function awards(uint256) external view returns (address, uint48, uint48, uint48, address, uint8, uint128, uint128);\n    function ids() external view returns (uint256);\n    function cap() external view returns (uint256);\n    function usr(uint256) external view returns (address);\n    function bgn(uint256) external view returns (uint256);\n    function clf(uint256) external view returns (uint256);\n    function fin(uint256) external view returns (uint256);\n    function mgr(uint256) external view returns (address);\n    function res(uint256) external view returns (uint256);\n    function tot(uint256) external view returns (uint256);\n    function rxd(uint256) external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);\n    function vest(uint256) external;\n    function vest(uint256, uint256) external;\n    function accrued(uint256) external view returns (uint256);\n    function unpaid(uint256) external view returns (uint256);\n    function restrict(uint256) external;\n    function unrestrict(uint256) external;\n    function yank(uint256) external;\n    function yank(uint256, uint256) external;\n    function move(uint256, address) external;\n    function valid(uint256) external view returns (bool);\n}\n\n////// src/DssSpellCollateralOnboarding.sol\n//\n// Copyright (C) 2021-2022 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\n/* import \"dss-exec-lib/DssExecLib.sol\"; */\n\ncontract DssSpellCollateralOnboardingAction {\n\n    // --- Rates ---\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmTRiQ3GqjCiRhh1ojzKzgScmSsiwQPLyjhgYSxZASQekj\n    //\n\n    // --- Math ---\n\n    // --- DEPLOYED COLLATERAL ADDRESSES ---\n\n    function onboardNewCollaterals() internal {\n        // ----------------------------- Collateral onboarding -----------------------------\n        //  Add ______________ as a new Vault Type\n        //  Poll Link:\n\n        // DssExecLib.addNewCollateral(\n        //     CollateralOpts({\n        //         ilk:                   ,\n        //         gem:                   ,\n        //         join:                  ,\n        //         clip:                  ,\n        //         calc:                  ,\n        //         pip:                   ,\n        //         isLiquidatable:        ,\n        //         isOSM:                 ,\n        //         whitelistOSM:          ,\n        //         ilkDebtCeiling:        ,\n        //         minVaultAmount:        ,\n        //         maxLiquidationAmount:  ,\n        //         liquidationPenalty:    ,\n        //         ilkStabilityFee:       ,\n        //         startingPriceFactor:   ,\n        //         breakerTolerance:      ,\n        //         auctionDuration:       ,\n        //         permittedDrop:         ,\n        //         liquidationRatio:      ,\n        //         kprFlatReward:         ,\n        //         kprPctReward:\n        //     })\n        // );\n\n        // DssExecLib.setStairstepExponentialDecrease(\n        //     CALC_ADDR,\n        //     DURATION,\n        //     PCT_BPS\n        // );\n\n        // DssExecLib.setIlkAutoLineParameters(\n        //     ILK,\n        //     AMOUNT,\n        //     GAP,\n        //     TTL\n        // );\n\n        // ChainLog Updates\n        // Add the new flip and join to the Chainlog\n        // address constant CHAINLOG        = DssExecLib.LOG();\n        // ChainlogAbstract(CHAINLOG).setAddress(\"<join-name>\", <join-address>);\n        // ChainlogAbstract(CHAINLOG).setAddress(\"<clip-name>\", <clip-address>);\n        // ChainlogAbstract(CHAINLOG).setVersion(\"<new-version>\");\n    }\n}\n\n////// src/DssSpell.sol\n//\n// Copyright (C) 2021-2022 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n// Enable ABIEncoderV2 when onboarding collateral\n//// pragma experimental ABIEncoderV2;\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n/* import \"dss-interfaces/dss/VestAbstract.sol\"; */\n\n/* import { DssSpellCollateralOnboardingAction } from \"./DssSpellCollateralOnboarding.sol\"; */\n\n\ncontract DssSpellAction is DssAction, DssSpellCollateralOnboardingAction {\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/6fa5724ffd5801bbcf37802205ed4f54092c6147/governance/votes/Executive%20vote%20-%20March%204%2C%202022.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2022-03-04 MakerDAO Executive Spell | Hash: 0x9cf9cccb89d57a94d3b5cb95a5e5df67cdcfaf5310ff0481c194d5cc4a2f3fa2\";\n\n    // Recognized Delegates DAI Transfers\n    address constant FLIP_FLOP_FLAP_WALLET  = 0x688d508f3a6B0a377e266405A1583B3316f9A2B3;\n    address constant FEEDBLACK_LOOPS_WALLET = 0x80882f2A36d49fC46C3c654F7f9cB9a2Bf0423e1;\n    address constant ULTRASCHUPPI_WALLET    = 0x89C5d54C979f682F40b73a9FC39F338C88B434c6;\n    address constant MAKERMAN_WALLET        = 0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0;\n    address constant ACRE_INVEST_WALLET     = 0x5b9C98e8A3D9Db6cd4B4B4C1F92D0A551D06F00D;\n    address constant MONETSUPPLY_WALLET     = 0x4Bd73eeE3d0568Bb7C52DFCad7AD5d47Fff5E2CF;\n    address constant JUSTIN_CASE_WALLET     = 0xE070c2dCfcf6C6409202A8a210f71D51dbAe9473;\n    address constant GFX_LABS_WALLET        = 0xa6e8772af29b29B9202a073f8E36f447689BEef6;\n\n    // Core Units DAI Transfers and Streams\n    address constant CES_001_WALLET         = 0x25307aB59Cd5d8b4E2C01218262Ddf6a89Ff86da;\n    address constant IS_001_WALLET          = 0xd1F2eEf8576736C1EbA36920B957cd2aF07280F4;\n\n    // Core Units DAI Streams\n    VestAbstract immutable VEST             = VestAbstract(DssExecLib.getChangelogAddress(\"MCD_VEST_DAI\"));\n\n    address constant RISK_001_WALLET        = 0xb386Bc4e8bAE87c3F67ae94Da36F385C100a370a;\n\n    uint256 constant MAR_01_2022            = 1646092800; // 2022-03-01\n    uint256 constant APR_01_2022            = 1648771200; // 2022-04-01\n    uint256 constant DEC_01_2022            = 1669852800; // 2022-12-01\n    uint256 constant FEB_28_2023            = 1677542400; // 2023-02-28\n    uint256 constant MAR_31_2023            = 1680220800; // 2023-03-31\n\n    // Math\n    uint256 constant MILLION = 10**6;\n    uint256 constant WAD = 10**18;\n\n    // Turn office hours off\n    function officeHours() public override returns (bool) {\n        return false;\n    }\n\n    function actions() public override {\n        // Recognized Delegate Compensation February 2022 Distribution (Payout: 57,665 DAI)\n        // https://forum.makerdao.com/t/recognized-delegate-compensation-breakdown-february-2022/13518\n        DssExecLib.sendPaymentFromSurplusBuffer(FLIP_FLOP_FLAP_WALLET,  12_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(FEEDBLACK_LOOPS_WALLET, 12_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(ULTRASCHUPPI_WALLET,    12_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(MAKERMAN_WALLET,         8_512);\n        DssExecLib.sendPaymentFromSurplusBuffer(ACRE_INVEST_WALLET,      6_494);\n        DssExecLib.sendPaymentFromSurplusBuffer(MONETSUPPLY_WALLET,      5_072);\n        DssExecLib.sendPaymentFromSurplusBuffer(JUSTIN_CASE_WALLET,        927);\n        DssExecLib.sendPaymentFromSurplusBuffer(GFX_LABS_WALLET,           660);\n\n        // Core Units Budget DAI Transfers\n        // https://mips.makerdao.com/mips/details/MIP40c3SP57\n        DssExecLib.sendPaymentFromSurplusBuffer(CES_001_WALLET,            259_184);\n        // https://mips.makerdao.com/mips/details/MIP40c3SP58\n        DssExecLib.sendPaymentFromSurplusBuffer(IS_001_WALLET,             138_000);\n\n        // Core Units Budget DAI Streams\n        // https://mips.makerdao.com/mips/details/MIP40c3SP56\n        // 2,760,000 DAI DssVest Stream to RISK-001 starting 2022-03-01 and ending 2023-02-28\n        VEST.restrict(\n            VEST.create(RISK_001_WALLET,     2_760_000 * WAD, MAR_01_2022, FEB_28_2023 - MAR_01_2022,            0, address(0))\n        );\n        // https://mips.makerdao.com/mips/details/MIP40c3SP57\n        // 2,780,562 DAI DssVest Stream to CES-001 starting on 2022-04-01 and ending 2023-03-31\n        VEST.restrict(\n            VEST.create(CES_001_WALLET,      2_780_562 * WAD, APR_01_2022, MAR_31_2023 - APR_01_2022,            0, address(0))\n        );\n        // https://mips.makerdao.com/mips/details/MIP40c3SP58\n        // 207,000 DAI DssVest Stream to IS-001 starting on 2022-03-01 and ending 2022-12-01\n        VEST.restrict(\n            VEST.create(IS_001_WALLET,         207_000 * WAD, MAR_01_2022, DEC_01_2022 - MAR_01_2022,            0, address(0))\n        );\n\n        // Revoke RISK-001 Budget DAI Stream\n        // https://mips.makerdao.com/mips/details/MIP40c3SP56\n        VEST.yank(8);\n\n        // --- Open Market Committee Proposal ---\n        // https://vote.makerdao.com/polling/QmPhbQ3B\n        //\n        // Increase WSTETH-A AutoLine (line) from 200 million DAI to 300 million DAI\n        // Increase WSTETH-A Autoline (gap) from 20 million DAI to 30 million DAI.\n        DssExecLib.setIlkAutoLineParameters(\"WSTETH-A\", 300 * MILLION, 30 * MILLION, 6 hours);\n\n        // Increase DIRECT-AAVEV2-DAI AutoLine (line) from 220 million DAI to 300 million DAI.\n        // Increase DIRECT-AAVEV2-DAI AutoLine (gap) from 50 million DAI to 65 million DAI.\n        DssExecLib.setIlkAutoLineParameters(\"DIRECT-AAVEV2-DAI\", 300 * MILLION, 65 * MILLION, 12 hours);\n\n        // Decrease DIRECT-AAVEV2-DAI Target Borrow Rate (bar) from 3.5% to 2.85%.\n        DssExecLib.setD3MTargetInterestRate(DssExecLib.getChangelogAddress(\"MCD_JOIN_DIRECT_AAVEV2_DAI\"), 285); // 2.85%\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:8de6ddbcd5053d32292aaa0d2105a32d108484a6", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}