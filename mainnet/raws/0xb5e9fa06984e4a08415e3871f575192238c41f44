{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: AggregatorInterface.sol\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n// File: AggregatorV3Interface.sol\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 oundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: AssetRateAdapter.sol\r\n\r\n/// @notice Used as a wrapper for tokens that are interest bearing for an\r\n/// underlying token. Follows the cToken interface, however, can be adapted\r\n/// for other interest bearing tokens.\r\ninterface AssetRateAdapter {\r\n    function token() external view returns (address);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function getExchangeRateStateful() external returns (int256);\r\n\r\n    function getExchangeRateView() external view returns (int256);\r\n\r\n    function getAnnualizedSupplyRate() external view returns (uint256);\r\n} \r\n\r\n// File: IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ISushiRouter.sol\r\n\r\ninterface ISushiRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns(uint256[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n} \r\n\r\n// File: IWETH.sol\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function balanceOf(address user) external returns (uint256);\r\n}\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: SignedSafeMath.sol\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n        /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: nTokenERC20.sol\r\n\r\ninterface nTokenERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\r\n\r\n    function nTokenTransferAllowance(\r\n        uint16 currencyId,\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\r\n\r\n    function nTokenTransferApprove(\r\n        uint16 currencyId,\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransfer(\r\n        uint16 currencyId,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransferFrom(\r\n        uint16 currencyId,\r\n        address spender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\r\n\r\n    function nTokenClaimIncentives() external returns (uint256);\r\n\r\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\r\n\r\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256);\r\n\r\n    function balanceOf(address owner) external view returns(uint256);\r\n    function transfer(address to, uint256 amount) external returns(bool);\r\n} \r\n\r\n// File: AggregatorV2V3Interface.sol\r\n\r\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\r\n{\r\n}\r\n\r\n// File: SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: BalancerV2.sol\r\n\r\ninterface IBalancerPool is IERC20 {\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n\r\n    struct SwapRequest {\r\n        SwapKind kind;\r\n        IERC20 tokenIn;\r\n        IERC20 tokenOut;\r\n        uint256 amount;\r\n        // Misc data\r\n        bytes32 poolId;\r\n        uint256 lastChangeBlock;\r\n        address from;\r\n        address to;\r\n        bytes userData;\r\n    }\r\n\r\n    function onSwap(\r\n        SwapRequest memory swapRequest,\r\n        uint256 indexIn,\r\n        uint256 indexOut\r\n    ) external view returns (uint256 amount);\r\n\r\n}\r\n\r\ninterface IBalancerVault {\r\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\r\n\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountCalculated);\r\n\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    function getPoolTokens(bytes32 poolId) external view returns (\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata balances,\r\n        uint256 lastChangeBlock\r\n    );\r\n\r\n    function getPool(bytes32 poolId) external view returns (\r\n        address, PoolSpecialization\r\n        );\r\n}\r\n\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: Types.sol\r\n\r\n/// @notice Different types of internal tokens\r\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\r\n///  - cToken: Compound interest bearing token\r\n///  - cETH: Special handling for cETH tokens\r\n///  - Ether: the one and only\r\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\r\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable}\r\n\r\n/// @notice Specifies the different trade action types in the system. Each trade action type is\r\n/// encoded in a tightly packed bytes32 object. Trade action type is the frst big endian byte of the\r\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\r\nenum TradeActionType {\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\r\n    Lend,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\r\n    Borrow,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\r\n    AddLiquidity,\r\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint33 maxImpliedRate, uint88 unused)\r\n    RemoveLiquidity,\r\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\r\n    PurchaseNTokenResidual,\r\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\r\n    SettleCashDebt\r\n}\r\n\r\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\r\nenum DepositActionType {\r\n    // No deposit action\r\n    None,\r\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\r\n    DepositAsset,\r\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\r\n    // external precision\r\n    DepositUnderlying,\r\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\r\n    // nTokens into the account\r\n    DepositAssetAndMintNToken,\r\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\r\n    DepositUnderlyingAndMintNToken,\r\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\r\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\r\n    RedeemNToken,\r\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\r\n    // Notional internal 8 decimal precision.\r\n    ConvertCashToNToken\r\n}\r\n\r\n/// @notice Used internally for PortfolioHandler state\r\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\r\n\r\n/****** Calldata objects ******/\r\n\r\n/// @notice Defines a balance action for batchAction\r\nstruct BalanceAction {\r\n    // Deposit action to take (if any)\r\n    DepositActionType actionType;\r\n    uint16 currencyId;\r\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\r\n    uint256 depositActionAmount;\r\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\r\n    uint256 withdrawAmountInternalPrecision;\r\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\r\n    // residual left from trading.\r\n    bool withdrawEntireCashBalance;\r\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\r\n    bool redeemToUnderlying;\r\n}\r\n\r\n/// @notice Defines a balance action with a set of trades to do as well\r\nstruct BalanceActionWithTrades {\r\n    DepositActionType actionType;\r\n    uint16 currencyId;\r\n    uint256 depositActionAmount;\r\n    uint256 withdrawAmountInternalPrecision;\r\n    bool withdrawEntireCashBalance;\r\n    bool redeemToUnderlying;\r\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\r\n    bytes32[] trades;\r\n}\r\n\r\n/****** In memory objects ******/\r\n/// @notice Internal object that represents settled cash balances\r\nstruct SettleAmount {\r\n    uint256 currencyId;\r\n    int256 netCashChange;\r\n}\r\n\r\n/// @notice Internal object that represents a token\r\nstruct Token {\r\n    address tokenAddress;\r\n    bool hasTransferFee;\r\n    int256 decimals;\r\n    TokenType tokenType;\r\n    uint256 maxCollateralBalance;\r\n}\r\n\r\n/// @notice Internal object that represents an nToken portfolio\r\nstruct nTokenPortfolio {\r\n    CashGroupParameters cashGroup;\r\n    PortfolioState portfolioState;\r\n    int256 totalSupply;\r\n    int256 cashBalance;\r\n    uint256 lastInitializedTime;\r\n    bytes6 parameters;\r\n    address tokenAddress;\r\n}\r\n\r\n/// @notice Internal object used during liquidation\r\nstruct LiquidationFactors {\r\n    address account;\r\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\r\n    int256 netETHValue;\r\n    // Amount of net local currency asset cash before haircuts and buffers available\r\n    int256 localAssetAvailable;\r\n    // Amount of net collateral currency asset cash before haircuts and buffers available\r\n    int256 collateralAssetAvailable;\r\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\r\n    // on liquidation type\r\n    int256 nTokenHaircutAssetValue;\r\n    // nToken parameters for calculating liquidation amount\r\n    bytes6 nTokenParameters;\r\n    // ETH exchange rate from local currency to ETH\r\n    ETHRate localETHRate;\r\n    // ETH exchange rate from collateral currency to ETH\r\n    ETHRate collateralETHRate;\r\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\r\n    AssetRateParameters localAssetRate;\r\n    // Used during currency liquidations if the account has liquidity tokens\r\n    CashGroupParameters collateralCashGroup;\r\n    // Used during currency liquidations if it is only a calculation, defaults to false\r\n    bool isCalculation;\r\n}\r\n\r\n/// @notice Internal asset array portfolio state\r\nstruct PortfolioState {\r\n    // Array of currently stored assets\r\n    PortfolioAsset[] storedAssets;\r\n    // Array of new assets to add\r\n    PortfolioAsset[] newAssets;\r\n    uint256 lastNewAssetIndex;\r\n    // Holds the length of stored assets after accounting for deleted assets\r\n    uint256 storedAssetLength;\r\n}\r\n\r\n/// @notice In memory ETH exchange rate used during free collateral calculation.\r\nstruct ETHRate {\r\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\r\n    int256 rateDecimals;\r\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\r\n    int256 rate;\r\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\r\n    int256 buffer;\r\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\r\n    int256 haircut;\r\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\r\n    // as an incentive given to liquidators.\r\n    int256 liquidationDiscount;\r\n}\r\n\r\n/// @notice Internal object used to handle balance state during a transaction\r\nstruct BalanceState {\r\n    uint16 currencyId;\r\n    // Cash balance stored in balance state at the beginning of the transaction\r\n    int256 storedCashBalance;\r\n    // nToken balance stored at the beginning of the transaction\r\n    int256 storedNTokenBalance;\r\n    // The net cash change as a result of asset settlement or trading\r\n    int256 netCashChange;\r\n    // Net asset transfers into or out of the account\r\n    int256 netAssetTransferInternalPrecision;\r\n    // Net token transfers into or out of the account\r\n    int256 netNTokenTransfer;\r\n    // Net token supply change from minting or redeeming\r\n    int256 netNTokenSupplyChange;\r\n    // The last time incentives were claimed for this currency\r\n    uint256 lastClaimTime;\r\n    // The last integral supply amount when tokens were claimed\r\n    uint256 lastClaimIntegralSupply;\r\n}\r\n\r\n/// @dev Asset rate used to convert between underlying cash and asset cash\r\nstruct AssetRateParameters {\r\n    // Address of the asset rate oracle\r\n    AssetRateAdapter rateOracle;\r\n    // The exchange rate from base to quote (if invert is required it is already done)\r\n    int256 rate;\r\n    // The decimals of the underlying, the rate converts to the underlying decimals\r\n    int256 underlyingDecimals;\r\n}\r\n\r\n/// @dev Cash group when loaded into memory\r\nstruct CashGroupParameters {\r\n    uint16 currencyId;\r\n    uint256 maxMarketIndex;\r\n    AssetRateParameters assetRate;\r\n    bytes32 data;\r\n}\r\n\r\n/// @dev A portfolio asset when loaded in memory\r\nstruct PortfolioAsset {\r\n    // Asset currency id\r\n    uint256 currencyId;\r\n    uint256 maturity;\r\n    // Asset type, fCash or liquidity token.\r\n    uint256 assetType;\r\n    // fCash amount or liquidity token amount\r\n    int256 notional;\r\n    // Used for managing portfolio asset state\r\n    uint256 storageSlot;\r\n    // The state of the asset for when it is written to storage\r\n    AssetStorageState storageState;\r\n}\r\n\r\n/// @dev Market object as represented in memory\r\nstruct MarketParameters {\r\n    bytes32 storageSlot;\r\n    uint256 maturity;\r\n    // Total amount of fCash available for purchase in the market.\r\n    int256 totalfCash;\r\n    // Total amount of cash available for purchase in the market.\r\n    int256 totalAssetCash;\r\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\r\n    int256 totalLiquidity;\r\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\r\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\r\n    uint256 lastImpliedRate;\r\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\r\n    // remaining resistent to flash loan attacks.\r\n    uint256 oracleRate;\r\n    // This is the timestamp of the previous trade\r\n    uint256 previousTradeTime;\r\n}\r\n\r\n/****** Storage objects ******/\r\n\r\n/// @dev Token object in storage:\r\n///  20 bytes for token address\r\n///  1 byte for hasTransferFee\r\n///  1 byte for tokenType\r\n///  1 byte for tokenDecimals\r\n///  9 bytes for maxCollateralBalance (may not always be set)\r\nstruct TokenStorage {\r\n    // Address of the token\r\n    address tokenAddress;\r\n    // Transfer fees will change token deposit behavior\r\n    bool hasTransferFee;\r\n    TokenType tokenType;\r\n    uint8 decimalPlaces;\r\n    // Upper limit on how much of this token the contract can hold at any time\r\n    uint72 maxCollateralBalance;\r\n}\r\n\r\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\r\nstruct ETHRateStorage {\r\n    // Address of the rate oracle\r\n    AggregatorV2V3Interface rateOracle;\r\n    // The decimal places of precision that the rate oracle uses\r\n    uint8 rateDecimalPlaces;\r\n    // True of the exchange rate must be inverted\r\n    bool mustInvert;\r\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\r\n    // Amount of buffer to apply to the exchange rate for negative balances.\r\n    uint8 buffer;\r\n    // Amount of haircut to apply to the exchange rate for positive balances\r\n    uint8 haircut;\r\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\r\n    uint8 liquidationDiscount;\r\n}\r\n\r\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\r\nstruct AssetRateStorage {\r\n    // Address of the rate oracle\r\n    AssetRateAdapter rateOracle;\r\n    // The decimal places of the underlying asset\r\n    uint8 underlyingDecimalPlaces;\r\n}\r\n\r\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\r\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\r\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\r\n/// length.\r\nstruct CashGroupSettings {\r\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\r\n    // that is dated less than the longest AMM will be tradable.\r\n    uint8 maxMarketIndex;\r\n    // Time window in 5 minute increments that the rate oracle will be averaged over\r\n    uint8 rateOracleTimeWindow5Min;\r\n    // Total fees per trade, specified in BPS\r\n    uint8 totalFeeBPS;\r\n    // Share of the fees given to the protocol, denominated in percentage\r\n    uint8 reserveFeeShare;\r\n    // Debt buffer specified in 5 BPS increments\r\n    uint8 debtBuffer5BPS;\r\n    // fCash haircut specified in 5 BPS increments\r\n    uint8 fCashHaircut5BPS;\r\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\r\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\r\n    uint8 settlementPenaltyRate5BPS;\r\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\r\n    uint8 liquidationfCashHaircut5BPS;\r\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\r\n    uint8 liquidationDebtBuffer5BPS;\r\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\r\n    uint8[] liquidityTokenHaircuts;\r\n    // Rate scalar used to determine the slippage of the market\r\n    uint8[] rateScalars;\r\n}\r\n\r\n/// @dev Holds account level context information used to determine settlement and\r\n/// free collateral actions. Total storage is 28 bytes\r\nstruct AccountContext {\r\n    // Used to check when settlement must be triggered on an account\r\n    uint40 nextSettleTime;\r\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\r\n    bytes1 hasDebt;\r\n    // Length of the account's asset array\r\n    uint8 assetArrayLength;\r\n    // If this account has bitmaps set, this is the corresponding currency id\r\n    uint16 bitmapCurrencyId;\r\n    // 9 total active currencies possible (2 bytes each)\r\n    bytes18 activeCurrencies;\r\n}\r\n\r\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\r\n/// 16 bytes\r\nstruct nTokenContext {\r\n    // Currency id that the nToken represents\r\n    uint16 currencyId;\r\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \r\n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\r\n    uint32 incentiveAnnualEmissionRate;\r\n    // The last block time at utc0 that the nToken was initialized at, zero if it\r\n    // has never been initialized\r\n    uint32 lastInitializedTime;\r\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\r\n    // currently holds\r\n    uint8 assetArrayLength;\r\n    // Each byte is a specific nToken parameter\r\n    bytes5 nTokenParameters;\r\n}\r\n\r\n/// @dev Holds account balance information, total storage 32 bytes\r\nstruct BalanceStorage {\r\n    // Number of nTokens held by the account\r\n    uint80 nTokenBalance;\r\n    // Last time the account claimed their nTokens\r\n    uint32 lastClaimTime;\r\n    // The total integral supply of the nToken at the last claim time packed into\r\n    // 56 bits. There is some loss of precision here but it is acceptable\r\n    uint56 packedLastClaimIntegralSupply;\r\n    // Cash balance of the account\r\n    int88 cashBalance;\r\n}\r\n\r\n/// @dev Holds information about a settlement rate, total storage 25 bytes\r\nstruct SettlementRateStorage {\r\n    uint40 blockTime;\r\n    uint128 settlementRate;\r\n    uint8 underlyingDecimalPlaces;\r\n}\r\n\r\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\r\n/// two storage words\r\nstruct MarketStorage {\r\n    // Total fCash in the market\r\n    uint80 totalfCash;\r\n    // Total asset cash in the market\r\n    uint80 totalAssetCash;\r\n    // Last annualized interest rate the market traded at\r\n    uint32 lastImpliedRate;\r\n    // Last recorded oracle rate for the market\r\n    uint32 oracleRate;\r\n    // Last time a trade was made\r\n    uint32 previousTradeTime;\r\n    // This is stored in slot + 1\r\n    uint80 totalLiquidity;\r\n}\r\n\r\nstruct ifCashStorage {\r\n    // Notional amount of fCash at the slot, limited to int128 to allow for\r\n    // future expansion\r\n    int128 notional;\r\n}\r\n\r\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\r\nstruct PortfolioAssetStorage {\r\n    // Currency Id for the asset\r\n    uint16 currencyId;\r\n    // Maturity of the asset\r\n    uint40 maturity;\r\n    // Asset type (fCash or Liquidity Token marker)\r\n    uint8 assetType;\r\n    // Notional\r\n    int88 notional;\r\n}\r\n\r\n/// @dev nToken total supply factors for the nToken, includes factors related\r\n/// to claiming incentives, total storage 32 bytes\r\nstruct nTokenTotalSupplyStorage {\r\n    // Total supply of the nToken\r\n    uint96 totalSupply;\r\n    // Integral of the total supply used for calculating the average total supply\r\n    uint128 integralTotalSupply;\r\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\r\n    uint32 lastSupplyChangeTime;\r\n}\r\n\r\n/// @dev Used in view methods to return account balances in a developer friendly manner\r\nstruct AccountBalance {\r\n    uint16 currencyId;\r\n    int256 cashBalance;\r\n    int256 nTokenBalance;\r\n    uint256 lastClaimTime;\r\n    uint256 lastClaimIntegralSupply;\r\n}\r\n\r\n// File: NotionalGovernance.sol\r\n\r\ninterface NotionalGovernance {\r\n    event ListCurrency(uint16 newCurrencyId);\r\n    event UpdateETHRate(uint16 currencyId);\r\n    event UpdateAssetRate(uint16 currencyId);\r\n    event UpdateCashGroup(uint16 currencyId);\r\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\r\n    event UpdateDepositParameters(uint16 currencyId);\r\n    event UpdateInitializationParameters(uint16 currencyId);\r\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\r\n    event UpdateTokenCollateralParameters(uint16 currencyId);\r\n    event UpdateGlobalTransferOperator(address operator, bool approved);\r\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\r\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\r\n\r\n    function listCurrency(\r\n        TokenStorage calldata assetToken,\r\n        TokenStorage calldata underlyingToken,\r\n        AggregatorV2V3Interface rateOracle,\r\n        bool mustInvert,\r\n        uint8 buffer,\r\n        uint8 haircut,\r\n        uint8 liquidationDiscount\r\n    ) external returns (uint16 currencyId);\r\n\r\n    function updateMaxCollateralBalance(\r\n        uint16 currencyId,\r\n        uint72 maxCollateralBalanceInternalPrecision\r\n    ) external;\r\n\r\n    function enableCashGroup(\r\n        uint16 currencyId,\r\n        AssetRateAdapter assetRateOracle,\r\n        CashGroupSettings calldata cashGroup,\r\n        string calldata underlyingName,\r\n        string calldata underlyingSymbol\r\n    ) external;\r\n\r\n    function updateDepositParameters(\r\n        uint16 currencyId,\r\n        uint32[] calldata depositShares,\r\n        uint32[] calldata leverageThresholds\r\n    ) external;\r\n\r\n    function updateInitializationParameters(\r\n        uint16 currencyId,\r\n        uint32[] calldata annualizedAnchorRates,\r\n        uint32[] calldata proportions\r\n    ) external;\r\n\r\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\r\n\r\n    function updateTokenCollateralParameters(\r\n        uint16 currencyId,\r\n        uint8 residualPurchaseIncentive10BPS,\r\n        uint8 pvHaircutPercentage,\r\n        uint8 residualPurchaseTimeBufferHours,\r\n        uint8 cashWithholdingBuffer10BPS,\r\n        uint8 liquidationHaircutPercentage\r\n    ) external;\r\n\r\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\r\n\r\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\r\n\r\n    function updateETHRate(\r\n        uint16 currencyId,\r\n        AggregatorV2V3Interface rateOracle,\r\n        bool mustInvert,\r\n        uint8 buffer,\r\n        uint8 haircut,\r\n        uint8 liquidationDiscount\r\n    ) external;\r\n\r\n    function updateGlobalTransferOperator(address operator, bool approved) external;\r\n\r\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\r\n}\r\n\r\n// File: NotionalViews.sol\r\n\r\ninterface NotionalViews {\r\n    function getMaxCurrencyId() external view returns (uint16);\r\n\r\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\r\n\r\n    function getCurrency(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (Token memory assetToken, Token memory underlyingToken);\r\n\r\n    function getRateStorage(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\r\n\r\n    function getCurrencyAndRates(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (\r\n            Token memory assetToken,\r\n           Token memory underlyingToken,\r\n            ETHRate memory ethRate,\r\n            AssetRateParameters memory assetRate\r\n        );\r\n\r\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\r\n\r\n    function getCashGroupAndAssetRate(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\r\n\r\n    function getInitializationParameters(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\r\n\r\n    function getDepositParameters(uint16 currencyId)\r\n        external\r\n        view\r\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\r\n\r\n    function nTokenAddress(uint16 currencyId) external view returns (address);\r\n\r\n    function getNoteToken() external view returns (address);\r\n\r\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\r\n        external\r\n        view\r\n        returns (AssetRateParameters memory);\r\n\r\n    function getMarket(uint16 currencyId, uint256 maturity, uint256 settlementDate)\r\n        external view returns (MarketParameters memory);\r\n\r\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\r\n\r\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\r\n        external\r\n        view\r\n        returns (MarketParameters[] memory);\r\n\r\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\r\n\r\n    function getNTokenPortfolio(address tokenAddress)\r\n        external\r\n        view\r\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\r\n\r\n    function getNTokenAccount(address tokenAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint16 currencyId,\r\n            uint256 totalSupply,\r\n            uint256 incentiveAnnualEmissionRate,\r\n            uint256 lastInitializedTime,\r\n            bytes5 nTokenParameters,\r\n            int256 cashBalance,\r\n            uint256 integralTotalSupply,\r\n            uint256 lastSupplyChangeTime\r\n        );\r\n\r\n    function getAccount(address account)\r\n        external\r\n        view\r\n        returns (\r\n            AccountContext memory accountContext,\r\n            AccountBalance[] memory accountBalances,\r\n            PortfolioAsset[] memory portfolio\r\n        );\r\n\r\n    function getAccountContext(address account) external view returns (AccountContext memory);\r\n\r\n    function getAccountBalance(uint16 currencyId, address account)\r\n        external\r\n        view\r\n        returns (\r\n            int256 cashBalance,\r\n            int256 nTokenBalance,\r\n            uint256 lastClaimTime\r\n        );\r\n\r\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\r\n\r\n    function getfCashNotional(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 maturity\r\n    ) external view returns (int256);\r\n\r\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\r\n\r\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\r\n\r\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getfCashAmountGivenCashAmount(\r\n        uint16 currencyId,\r\n        int88 netCashToAccount,\r\n        uint256 marketIndex,\r\n        uint256 blockTime\r\n    ) external view returns (int256);\r\n\r\n    function getCashAmountGivenfCashAmount(\r\n        uint16 currencyId,\r\n        int88 fCashAmount,\r\n        uint256 marketIndex,\r\n        uint256 blockTime\r\n    ) external view returns (int256, int256);\r\n\r\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n} \r\n\r\n// File: nERC1155Interface.sol\r\n\r\ninterface nERC1155Interface {\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\r\n\r\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (int256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\r\n        external\r\n        view\r\n        returns (PortfolioAsset[] memory);\r\n\r\n    function encodeToId(\r\n        uint16 currencyId,\r\n        uint40 maturity,\r\n        uint8 assetType\r\n    ) external pure returns (uint256 id);\r\n}\r\n\r\n// File: NotionalProxy.sol\r\n\r\ninterface NotionalProxy is nTokenERC20, nERC1155Interface, NotionalGovernance, NotionalViews {\r\n    /** User trading events */\r\n    event CashBalanceChange(address indexed account, uint16 indexed currencyId, int256 netCashChange);\r\n    event nTokenSupplyChange(address indexed account, uint16 indexed currencyId, int256 tokenSupplyChange);\r\n    event MarketsInitialized(uint16 currencyId);\r\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\r\n    event SettledCashDebt(\r\n        address indexed settledAccount,\r\n        uint16 indexed currencyId,\r\n        address indexed settler,\r\n        int256 amountToSettleAsset,\r\n        int256 fCashAmount\r\n    );\r\n    event nTokenResidualPurchase(\r\n        uint16 indexed currencyId,\r\n        uint40 indexed maturity,\r\n        address indexed purchaser,\r\n        int256 fCashAmountToPurchase,\r\n        int256 netAssetCashNToken\r\n    );\r\n    event LendBorrowTrade(\r\n        address indexed account,\r\n        uint16 indexed currencyId,\r\n        uint40 maturity,\r\n        int256 netAssetCash,\r\n        int256 netfCash\r\n    );\r\n    event AddRemoveLiquidity(\r\n        address indexed account,\r\n        uint16 indexed currencyId,\r\n        uint40 maturity,\r\n        int256 netAssetCash,\r\n        int256 netfCash,\r\n        int256 netLiquidityTokens\r\n    );\r\n\r\n    /// @notice Emitted when reserve fees are accrued\r\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\r\n    /// @notice Emitted whenever an account context has updated\r\n    event AccountContextUpdate(address indexed account);\r\n    /// @notice Emitted when an account has assets that are settled\r\n    event AccountSettled(address indexed account);\r\n    /// @notice Emitted when an asset rate is settled\r\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\r\n\r\n    /* Liquidation Events */\r\n    event LiquidateLocalCurrency(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        int256 netLocalFromLiquidator\r\n    );\r\n\r\n    event LiquidateCollateralCurrency(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        uint16 collateralCurrencyId,\r\n        int256 netLocalFromLiquidator,\r\n        int256 netCollateralTransfer,\r\n        int256 netNTokenTransfer\r\n    );\r\n\r\n    event LiquidatefCashEvent(\r\n        address indexed liquidated,\r\n        address indexed liquidator,\r\n        uint16 localCurrencyId,\r\n        uint16 fCashCurrency,\r\n        int256 netLocalFromLiquidator,\r\n        uint256[] fCashMaturities,\r\n        int256[] fCashNotionalTransfer\r\n    );\r\n\r\n    /** UUPS Upgradeable contract calls */\r\n    function upgradeTo(address newImplementation) external;\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\r\n    function getImplementation() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function pauseRouter() external view returns (address);\r\n    function pauseGuardian() external view returns (address);\r\n\r\n    /** Initialize Markets Action */\r\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\r\n\r\n    function sweepCashIntoMarkets(uint16 currencyId) external;\r\n\r\n    /** Redeem nToken Action */\r\n    function nTokenRedeem(\r\n        address redeemer,\r\n        uint16 currencyId,\r\n        uint96 tokensToRedeem_,\r\n        bool sellTokenAssets,\r\n        bool acceptResidualAssets\r\n    ) external returns (int256, bool);\r\n\r\n    /** Account Action */\r\n    function enableBitmapCurrency(uint16 currencyId) external;\r\n\r\n    function settleAccount(address account) external;\r\n\r\n    function depositUnderlyingToken(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 amountExternalPrecision\r\n    ) external payable returns (uint256);\r\n\r\n    function depositAssetToken(\r\n        address account,\r\n        uint16 currencyId,\r\n        uint256 amountExternalPrecision\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(\r\n        uint16 currencyId,\r\n        uint88 amountInternalPrecision,\r\n        bool redeemToUnderlying\r\n    ) external returns (uint256);\r\n\r\n    /** Batch Action */\r\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\r\n\r\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\r\n        external\r\n        payable;\r\n\r\n    function batchBalanceAndTradeActionWithCallback(\r\n        address account,\r\n        BalanceActionWithTrades[] calldata actions,\r\n        bytes calldata callbackData\r\n    ) external payable;\r\n\r\n    /** Liquidation Action */\r\n    function calculateLocalCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint96 maxNTokenLiquidation\r\n    ) external returns (int256, int256);\r\n\r\n    function liquidateLocalCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint96 maxNTokenLiquidation\r\n    ) external returns (int256, int256);\r\n\r\n    function calculateCollateralCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 collateralCurrency,\r\n        uint128 maxCollateralLiquidation,\r\n        uint96 maxNTokenLiquidation\r\n    )\r\n        external\r\n        returns (\r\n            int256,\r\n            int256,\r\n            int256\r\n        );\r\n\r\n    function liquidateCollateralCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 collateralCurrency,\r\n        uint128 maxCollateralLiquidation,\r\n        uint96 maxNTokenLiquidation,\r\n        bool withdrawCollateral,\r\n        bool redeemToUnderlying\r\n    )\r\n        external\r\n        returns (\r\n            int256,\r\n            int256,\r\n            int256\r\n        );\r\n\r\n    function calculatefCashLocalLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function liquidatefCashLocal(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function calculatefCashCrossCurrencyLiquidation(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 fCashCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n\r\n    function liquidatefCashCrossCurrency(\r\n        address liquidateAccount,\r\n        uint16 localCurrency,\r\n        uint16 fCashCurrency,\r\n        uint256[] calldata fCashMaturities,\r\n        uint256[] calldata maxfCashLiquidateAmounts\r\n    ) external returns (int256[] memory, int256);\r\n}\r\n\r\n// File: NotionalLpLib.sol\r\n\r\n// Necessary interfaces to:\r\n// 1) interact with the Notional protocol\r\n\r\nlibrary NotionalLpLib {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n    int256 private constant PRICE_DECIMALS = 1e18;\r\n    uint256 private constant SLIPPAGE_FACTOR = 9_800;\r\n    uint256 private constant MAX_BPS = 10_000;\r\n    IWETH private constant weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    uint256 private constant WETH_DECIMALS = 1e18;\r\n    uint8 private constant TRADE_TYPE_LEND = 0;\r\n    uint16 private constant ETH_CURRENCY_ID = 1;\r\n\r\n    struct NTokenTotalValueFromPortfolioVars {\r\n        address _strategy;\r\n        address _nTokenAddress;\r\n        NotionalProxy _notionalProxy;\r\n        uint16 _currencyID;\r\n    }\r\n    struct RewardsValueVars {\r\n        IERC20 noteToken;\r\n        NotionalProxy notionalProxy;\r\n        IBalancerVault balancerVault;\r\n        bytes32 poolId;\r\n        IBalancerPool balancerPool;\r\n        uint16 currencyID;\r\n        ISushiRouter quoter;\r\n        address want;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Get the current value of the nToken LP position following the same methodology as in: \r\n     *  https://github.com/notional-finance/sdk-v2/blob/master/src/system/NTokenValue.ts#L165-L171\r\n     * @param NTokenVars, custom struct containing:\r\n     * - _strategy, address of the strategy owning the position\r\n     * - _nTokenAddress, address of the nToken to use\r\n     * - _notionalProxy, address of the Notional Proxy\r\n     * - _currencyID, currency ID of the strategy\r\n     * @return uint256 totalUnderlyingClaim, total number of want tokens\r\n     */\r\n    function getNTokenTotalValueFromPortfolio(\r\n        NTokenTotalValueFromPortfolioVars memory NTokenVars\r\n        ) public view returns(uint256 totalUnderlyingClaim) {\r\n        \r\n        // If the nToken has an idiosyncratic position we are in the 24h lock period and cannot calculate the \r\n        // portfolio value as there is an fcash position without market\r\n        if (checkIdiosyncratic(NTokenVars._notionalProxy, NTokenVars._currencyID, NTokenVars._notionalProxy.nTokenAddress(NTokenVars._currencyID))) {\r\n            return 0;\r\n        }\r\n\r\n        // First step, get how many nTokens the strategy owns\r\n        (, int256 nTokenBalance, ) = NTokenVars._notionalProxy.getAccountBalance(NTokenVars._currencyID, NTokenVars._strategy);\r\n\r\n        if (nTokenBalance > 0) {\r\n            // Get the current portfolio of the nToken that provided liquidity to the different pools:\r\n            // - liquidity tokens provided to each pool\r\n            // - current fcash position in each pool\r\n            (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets) = NTokenVars._notionalProxy.getNTokenPortfolio(NTokenVars._nTokenAddress);\r\n            // Get the current state of the active markets, notably:\r\n            // - # of liquidity tokens used to provide liquidity to each market\r\n            // - current # of asset tokens available in each market\r\n            // - current # of fcash tokens available in each market\r\n            MarketParameters[] memory _activeMarkets = NTokenVars._notionalProxy.getActiveMarkets(NTokenVars._currencyID);\r\n            \r\n            // Total number of nTokens available, used to calculate the share of the strategy\r\n            int256 totalSupply = int256(NTokenVars._notionalProxy.nTokenTotalSupply(NTokenVars._nTokenAddress));\r\n\r\n            // Iterate over all active markets and sum value of each position \r\n            int256 fCashClaim = 0;\r\n            int256 assetCashClaim = 0;\r\n            (,,,,,int256 totalAssetCashClaim,,) = NTokenVars._notionalProxy.getNTokenAccount(NTokenVars._nTokenAddress);\r\n            totalAssetCashClaim = totalAssetCashClaim.mul(nTokenBalance).div(totalSupply);\r\n\r\n            // Process to get the current value of the position:\r\n            // For each available market:\r\n            // 1. Calculate the share of liquidity brought by the nToken by calculating the ratio between the \r\n            // # of nToken liq. tokens for theta market and the total liquidity tokens that fed that spcedific market\r\n            // 2. Using that liq. share calculate the proportion of cTokens and fcash that the nToken \"owns\"\r\n            // 3. Net the current share of market fcash against the current fcash position of the nToken (could be net lender or borrower)\r\n            // 4. Calculate the strategy's share of both the cToken and fcash by applying the proportion between the held\r\n            // nTokens and the total supply\r\n            // 5. Convert the net fcash to cTokens and add it to the cTokens share from step 2\r\n            // 6. Add the cToken position for each market\r\n            // 7. Convert to underlying\r\n            for(uint256 i = 0; i < liquidityTokens.length; i++) {\r\n                if(liquidityTokens[i].maturity == _activeMarkets[i].maturity) {\r\n                    // 1-2. Calculate the fcash claim on the market using liquidity tokens share\r\n                    fCashClaim = liquidityTokens[i].notional.mul(_activeMarkets[i].totalfCash).div(_activeMarkets[i].totalLiquidity);\r\n                    // 1-2. Calculate the cTokens claim on the market using liquidity tokens share\r\n                    assetCashClaim = liquidityTokens[i].notional.mul(_activeMarkets[i].totalAssetCash).div(_activeMarkets[i].totalLiquidity);\r\n                    // 3. Net the fcash share against the current fcash position of the nToken\r\n                    fCashClaim += netfCashAssets[i].notional;\r\n                    // 4. Calculate the strategy's share of fcash claim\r\n                    fCashClaim = fCashClaim.mul(nTokenBalance).div(totalSupply);\r\n                    // 4. Calculate the strategy's share of cToken claim\r\n                    assetCashClaim = assetCashClaim.mul(nTokenBalance).div(totalSupply);\r\n\r\n                    if (fCashClaim != 0) {\r\n                        uint256 mIndex = getMarketIndexForMaturity(\r\n                            NTokenVars._notionalProxy,\r\n                            NTokenVars._currencyID,\r\n                            liquidityTokens[i].maturity\r\n                            );\r\n                        // 5. Convert the netfcash claim to cTokens\r\n                        (int256 assetInternalNotation,) = NTokenVars._notionalProxy.getCashAmountGivenfCashAmount(\r\n                            NTokenVars._currencyID,\r\n                            int88(-fCashClaim),\r\n                            mIndex,\r\n                            block.timestamp\r\n                        );\r\n                        // 5. Add it to the cToken share of market liquidity\r\n                        assetCashClaim = assetCashClaim.add(assetInternalNotation);\r\n                    }\r\n                    // 6. Add positions for each market\r\n                    totalAssetCashClaim = totalAssetCashClaim.add(assetCashClaim);\r\n                }\r\n            }\r\n\r\n            (\r\n                Token memory assetToken,\r\n                Token memory underlyingToken,\r\n                ,\r\n                AssetRateParameters memory assetRate\r\n            ) = NTokenVars._notionalProxy.getCurrencyAndRates(NTokenVars._currencyID);\r\n            // 7. Convert the cToken position to underlying\r\n            totalUnderlyingClaim = uint256(totalAssetCashClaim.mul(assetRate.rate).div(PRICE_DECIMALS));\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Get the market index for a specific maturity\r\n     * @param _notionalProxy, Notional proxy address\r\n     * @param _currencyID, Currency ID of the strategy\r\n     * @param _maturity, Maturity to look for\r\n     * @return uint256 index of the market we're looking for\r\n     */\r\n    function getMarketIndexForMaturity(\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        uint256 _maturity\r\n    ) internal view returns(uint256) {\r\n        MarketParameters[] memory _activeMarkets = _notionalProxy.getActiveMarkets(_currencyID);\r\n        bool success = false;\r\n        for(uint256 j=0; j<_activeMarkets.length; j++){\r\n            if(_maturity == _activeMarkets[j].maturity) {\r\n                return j+1;\r\n            }\r\n        }\r\n        \r\n        if (success == false) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Check whether the nToken has an idiosyncratic fcash position (non-opeable market) by looping through\r\n     * the nToken positions (max is 3) and check whether it has a current active market or not\r\n     * @param _notionalProxy, Notional proxy address\r\n     * @param _currencyID, Currency ID of the strategy\r\n     * @param _nTokenAddress, Address for the nToken\r\n     * @return bool indicating whether the nToken has an idiosyncratic position or not\r\n     */\r\n    function checkIdiosyncratic(\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        address _nTokenAddress\r\n    ) public view returns(bool) {\r\n        MarketParameters[] memory _activeMarkets = _notionalProxy.getActiveMarkets(_currencyID);\r\n        (, PortfolioAsset[] memory netfCashAssets) = _notionalProxy.getNTokenPortfolio(_nTokenAddress);\r\n        for(uint256 i=0; i<netfCashAssets.length; i++){\r\n            if(getMarketIndexForMaturity(_notionalProxy, _currencyID, netfCashAssets[i].maturity) == 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External view estimating the rewards value in want tokens. We simulate the trade in balancer to \r\n     * get WETH from the NOTE / WETH pool and if want is not weth, we simulate a trade in sushi to obtain want tokens \r\n     * @param noteToken, rewards token to estimate value\r\n     * @param notionalProxy, notional proxy distributing the rewards\r\n     * @param balancerVault, vault address in Balancer to simulate the swap\r\n     * @param poolId, identifier NOTE/weth pool in balancer\r\n     * @param currencyID, identifier of the currency operated in the strategy\r\n     * @param quoter, sushi router used to estimate simulate the weth / want trade\r\n     * @param want, address of the want token to convert the rewards to\r\n     * @return uint256 tokensOut, current number of want tokens the strategy would obtain for its rewards\r\n     */\r\n    function getRewardsValue(\r\n        RewardsValueVars memory rewardsValueVars\r\n    ) external view returns(uint256 tokensOut) {\r\n        // Get NOTE rewards\r\n        uint256 claimableRewards = rewardsValueVars.noteToken.balanceOf(address(this));\r\n        claimableRewards += rewardsValueVars.notionalProxy.nTokenGetClaimableIncentives(address(this), block.timestamp);\r\n        if (claimableRewards > 0) {\r\n            (IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock) = rewardsValueVars.balancerVault.getPoolTokens(rewardsValueVars.poolId);\r\n            // Setup SwapRequest object for balancer\r\n            IBalancerPool.SwapRequest memory swapRequest = IBalancerPool.SwapRequest(\r\n                IBalancerPool.SwapKind.GIVEN_IN,\r\n                tokens[1],\r\n                tokens[0],\r\n                claimableRewards,\r\n                rewardsValueVars.poolId,\r\n                lastChangeBlock,\r\n                address(this),\r\n                address(this),\r\n                abi.encode(0)\r\n            );\r\n            // Simulate NOTE/WETH trade\r\n            tokensOut = rewardsValueVars.balancerPool.onSwap(\r\n                swapRequest, \r\n                balances[1],\r\n                balances[0] \r\n            );\r\n            \r\n            // If want is not weth, simulate sushi trade\r\n            if(rewardsValueVars.currencyID > 1) {\r\n                // Sushi path is [weth, want]\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(weth);\r\n                path[1] = address(rewardsValueVars.want);\r\n                // Get expected number of tokens out\r\n                {\r\n                    tokensOut = rewardsValueVars.quoter.getAmountsOut(WETH_DECIMALS, path)[1].mul(tokensOut).mul(SLIPPAGE_FACTOR).div(MAX_BPS).div(WETH_DECIMALS);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Function exchanging between ETH to 'want'\r\n     * @param amount, Amount to exchange\r\n     * @param asset, 'want' asset to exchange to\r\n     * @param notionalProxy, Notional Proxu address\r\n     * @param currendyID, ID of want\r\n     * @return uint256 result, the equivalent ETH amount in 'want' tokens\r\n     */\r\n    function fromETH(\r\n        uint256 amount,\r\n        address asset,\r\n        NotionalProxy notionalProxy,\r\n        uint16 currencyID\r\n        )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            amount == 0 ||\r\n            amount == type(uint256).max ||\r\n            address(asset) == address(weth) // 1:1 change\r\n        ) {\r\n            return amount;\r\n        }\r\n\r\n        (\r\n            Token memory assetToken,\r\n            Token memory underlyingToken,\r\n            ETHRate memory ethRate,\r\n            AssetRateParameters memory assetRate\r\n        ) = notionalProxy.getCurrencyAndRates(currencyID);\r\n            \r\n        return amount.mul(uint256(underlyingToken.decimals)).div(uint256(ethRate.rate));\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  External function used to offset a residual borrowing position\r\n     * @param _notionalProxy, Notional Proxy contract\r\n     * @param _currencyID, ID of token involved\r\n     * @param _amount, Amount to lend\r\n     * @param _fCashAmount, fCash amount needed to offset the residual position\r\n     * @param _marketIndex, market index of the residual position\r\n     * @param _ETH_CURRENCY_ID, ID of ETH as tx changes a little\r\n     * @return bytes32 result, the encoded trade ready to be used in Notional's 'BatchTradeAction'\r\n     */\r\n    function lendAmountManually (\r\n        NotionalProxy _notionalProxy,\r\n        uint16 _currencyID,\r\n        uint256 _amount,\r\n        uint256 _fCashAmount,\r\n        uint256 _marketIndex\r\n    ) external {\r\n        BalanceActionWithTrades[] memory _actions = new BalanceActionWithTrades[](1);\r\n        \r\n        bytes32[] memory _trades = new bytes32[](1);\r\n        _trades[0] = getTradeFrom(TRADE_TYPE_LEND, _marketIndex, _fCashAmount);\r\n\r\n        _actions[0] = BalanceActionWithTrades(\r\n            DepositActionType.DepositUnderlying,\r\n            _currencyID,\r\n            _amount,\r\n            0, \r\n            true,\r\n            true,\r\n            _trades\r\n        );\r\n\r\n        if (_currencyID == ETH_CURRENCY_ID) {\r\n            _notionalProxy.batchBalanceAndTradeAction{value: _amount}(address(this), _actions);\r\n            weth.deposit{value: address(this).balance}();\r\n        } else {\r\n            _notionalProxy.batchBalanceAndTradeAction(address(this), _actions);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice\r\n     *  Internal function encoding a trade parameter into a bytes32 variable needed for Notional\r\n     * @param _tradeType, Identification of the trade to perform, following the Notional classification in enum 'TradeActionType'\r\n     * @param _marketIndex, Market index in which to trade into\r\n     * @param _amount, fCash amount to trade\r\n     * @return bytes32 result, the encoded trade ready to be used in Notional's 'BatchTradeAction'\r\n     */\r\n    function getTradeFrom(uint8 _tradeType, uint256 _marketIndex, uint256 _amount) internal returns (bytes32 result) {\r\n        uint8 tradeType = uint8(_tradeType);\r\n        uint8 marketIndex = uint8(_marketIndex);\r\n        uint88 fCashAmount = uint88(_amount);\r\n        uint32 minSlippage = uint32(0);\r\n        uint120 padding = uint120(0);\r\n\r\n        // We create result of trade in a bitmap packed encoded bytes32\r\n        // (unpacking of the trade in Notional happens here: \r\n        // https://github.com/notional-finance/contracts-v2/blob/master/contracts/external/actions/TradingAction.sol#L322)\r\n        result = bytes32(uint(tradeType)) << 248;\r\n        result |= bytes32(uint(marketIndex) << 240);\r\n        result |= bytes32(uint(fCashAmount) << 152);\r\n        result |= bytes32(uint(minSlippage) << 120);\r\n\r\n        return result;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract NotionalProxy\",\"name\":\"_notionalProxy\",\"type\":\"NotionalProxy\"},{\"internalType\":\"uint16\",\"name\":\"_currencyID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_nTokenAddress\",\"type\":\"address\"}],\"name\":\"checkIdiosyncratic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"notionalProxy\",\"type\":\"NotionalProxy\"},{\"internalType\":\"uint16\",\"name\":\"currencyID\",\"type\":\"uint16\"}],\"name\":\"fromETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"_notionalProxy\",\"type\":\"NotionalProxy\"},{\"internalType\":\"uint16\",\"name\":\"_currencyID\",\"type\":\"uint16\"}],\"internalType\":\"struct NotionalLpLib.NTokenTotalValueFromPortfolioVars\",\"name\":\"NTokenVars\",\"type\":\"tuple\"}],\"name\":\"getNTokenTotalValueFromPortfolio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnderlyingClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"noteToken\",\"type\":\"IERC20\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"notionalProxy\",\"type\":\"NotionalProxy\"},{\"internalType\":\"contract IBalancerVault\",\"name\":\"balancerVault\",\"type\":\"IBalancerVault\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IBalancerPool\",\"name\":\"balancerPool\",\"type\":\"IBalancerPool\"},{\"internalType\":\"uint16\",\"name\":\"currencyID\",\"type\":\"uint16\"},{\"internalType\":\"contract ISushiRouter\",\"name\":\"quoter\",\"type\":\"ISushiRouter\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"internalType\":\"struct NotionalLpLib.RewardsValueVars\",\"name\":\"rewardsValueVars\",\"type\":\"tuple\"}],\"name\":\"getRewardsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NotionalLpLib", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61bcb20e7087ddfc816bc361236f18866e435af47baf44290d3a23ad0b51e139"}]}