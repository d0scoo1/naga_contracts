{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(\r\n    address _from,\r\n    uint256 _amount,\r\n    address _token,\r\n    bytes _data\r\n    ) public;\r\n}\r\n\r\n//normal contract. already compiled as bin\r\ncontract Controlled {\r\n    modifier onlyController {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n    address public controller;\r\n\r\n    function Controlled() public {\r\n        controller = msg.sender;\r\n    }\r\n\r\n    function changeController(address _newController) onlyController public {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Token {\r\n\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n    //function totalSupply() public constant returns (uint256 balance);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    //function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract TokenI is ERC20Token, Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n\r\n\r\n    // ERC20 Methods\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(\r\n    address _spender,\r\n    uint256 _amount,\r\n    bytes _extraData\r\n    ) public returns (bool success);\r\n\r\n\r\n    // Generate and destroy tokens\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n}\r\n\r\ncontract Token is TokenI {\r\n\r\n    struct FreezeInfo {\r\n    address user;\r\n    uint256 amount;\r\n    }\r\n    //Key1: step(\u52df\u8d44\u9636\u6bb5); Key2: user sequence(\u7528\u6237\u5e8f\u5217)\r\n    mapping (uint8 => mapping (uint8 => FreezeInfo)) public freezeOf; //\u6240\u6709\u9501\u4ed3\uff0ckey \u4f7f\u7528\u5e8f\u53f7\u5411\u4e0a\u589e\u52a0\uff0c\u65b9\u4fbf\u7a0b\u5e8f\u67e5\u8be2\u3002\r\n    mapping (uint8 => uint8) public lastFreezeSeq; //\u6700\u540e\u7684 freezeOf \u952e\u503c\u3002key: step; value: sequence\r\n    mapping (address => uint256) public airdropOf;//\u7a7a\u6295\u7528\u6237\r\n\r\n    address public owner;\r\n    bool public paused=false;//\u662f\u5426\u6682\u505c\u79c1\u52df\r\n    uint256 public minFunding = 1 ether;  //\u6700\u4f4e\u8d77\u6295\u989d\u5ea6\r\n    uint256 public airdropQty=0;//\u6bcf\u4e2a\u8d26\u6237\u7a7a\u6295\u83b7\u5f97\u7684\u91cf\r\n    uint256 public airdropTotalQty=0;//\u603b\u5171\u53d1\u653e\u7684\u7a7a\u6295\u4ee3\u5e01\u6570\u91cf\r\n    uint256 public tokensPerEther = 9000;//1eth\u5151\u6362\u591a\u5c11\u4ee3\u5e01(9000,3000,1500)\r\n    address private vaultAddress;//\u5b58\u50a8\u4f17\u7b79ETH\u7684\u5730\u5740\r\n    uint256 public totalCollected = 0;//\u5df2\u7ecf\u52df\u5230ETH\u7684\u603b\u6570\u91cf\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n    /* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    event Payment(address sender, uint256 _ethAmount, uint256 _tokenAmount);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Token(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol,\r\n    address _vaultAddress\r\n    ) public {\r\n        require(_vaultAddress != 0);\r\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = decimalUnits;\r\n        owner = msg.sender;\r\n        vaultAddress=_vaultAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier realUser(address user){\r\n        if(user == 0x0){\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier moreThanZero(uint256 _value){\r\n        if (_value <= 0){\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) {\r\n            return false;\r\n        }\r\n        assembly {\r\n        size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) public returns (bool) {\r\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[msg.sender] = balanceOf[msg.sender] - _value;                     // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to] + _value;                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) moreThanZero(_value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n     *  its behalf, and then a function is triggered in the contract that is\r\n     *  being approved, `_spender`. This allows users to use their tokens to\r\n     *  interact with contracts in one function call instead of two\r\n     * @param _spender The address of the contract able to transfer the tokens\r\n     * @param _amount The amount of tokens to be approved for transfer\r\n     * @return True if the function call was successful\r\n     */\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n        ApproveAndCallReceiver(_spender).receiveApproval(\r\n        msg.sender,\r\n        _amount,\r\n        this,\r\n        _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        balanceOf[_from] = balanceOf[_from] - _value;                           // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to] + _value;                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender] + _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferMulti(address[] _to, uint256[] _value) public returns (uint256 amount){\r\n        require(_to.length == _value.length);\r\n        uint8 len = uint8(_to.length);\r\n        for(uint8 j; j<len; j++){\r\n            amount += _value[j]*10**uint256(decimals);\r\n        }\r\n        require(balanceOf[msg.sender] >= amount);\r\n        for(uint8 i; i<len; i++){\r\n            address _toI = _to[i];\r\n            uint256 _valueI = _value[i]*10**uint256(decimals);\r\n            balanceOf[_toI] += _valueI;\r\n            balanceOf[msg.sender] -= _valueI;\r\n            emit Transfer(msg.sender, _toI, _valueI);\r\n        }\r\n    }\r\n\r\n    //\u51bb\u7ed3\u8d26\u6237\r\n    function freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) onlyController public returns (bool success) {\r\n        _value=_value*10**uint256(decimals);\r\n        return _freeze(_user,_value,_step);\r\n    }\r\n\r\n    function _freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) private returns (bool success) {\r\n        //info256(\"balanceOf[_user]\", balanceOf[_user]);\r\n        require(balanceOf[_user] >= _value);\r\n        balanceOf[_user] = balanceOf[_user] - _value;\r\n        freezeOf[_step][lastFreezeSeq[_step]] = FreezeInfo({user:_user, amount:_value});\r\n        lastFreezeSeq[_step]++;\r\n        emit Freeze(_user, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    //\u4e3a\u7528\u6237\u89e3\u9501\u8d26\u6237\u8d44\u91d1\r\n    function unFreeze(uint8 _step) onlyOwner public returns (bool unlockOver) {\r\n        //_end = length of freezeOf[_step]\r\n        uint8 _end = lastFreezeSeq[_step];\r\n        require(_end > 0);\r\n        unlockOver=false;\r\n        uint8  _start=0;\r\n        for(; _end>_start; _end--){\r\n            FreezeInfo storage fInfo = freezeOf[_step][_end-1];\r\n            uint256 _amount = fInfo.amount;\r\n            balanceOf[fInfo.user] += _amount;\r\n            delete freezeOf[_step][_end-1];\r\n            lastFreezeSeq[_step]--;\r\n            emit Unfreeze(fInfo.user, _amount);\r\n        }\r\n    }\r\n\r\n\r\n    ////////////////\r\n    // Generate and destroy tokens\r\n    ////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _user The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _user, uint _amount) onlyController public returns (bool) {\r\n        _amount=_amount*10**uint256(decimals);\r\n        return _generateTokens(_user,_amount);\r\n    }\r\n\r\n    function _generateTokens(address _user, uint _amount)  private returns (bool) {\r\n        require(balanceOf[owner] >= _amount);\r\n        balanceOf[_user] += _amount;\r\n        balanceOf[owner] -= _amount;\r\n        emit Transfer(0, _user, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _user The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _user, uint256 _amount) onlyOwner public returns (bool) {\r\n        _amount=_amount*10**uint256(decimals);\r\n        return _destroyTokens(_user,_amount);\r\n    }\r\n\r\n    function _destroyTokens(address _user, uint256 _amount) private returns (bool) {\r\n        require(balanceOf[_user] >= _amount);\r\n        balanceOf[owner] += _amount;\r\n        balanceOf[_user] -= _amount;\r\n        emit Transfer(_user, 0, _amount);\r\n        emit Burn(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\r\n        balanceOf[newOwner] += balanceOf[owner];\r\n        balanceOf[owner] = 0;\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * \u4fee\u6539token\u5151\u6362\u6bd4\u7387,1eth\u5151\u6362\u591a\u5c11\u4ee3\u5e01\r\n     */\r\n    function changeTokensPerEther(uint256 _newRate) onlyController public {\r\n        tokensPerEther = _newRate;\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u6bcf\u4e2a\u8d26\u6237\u53ef\u83b7\u5f97\u7684\u7a7a\u6295\u91cf\r\n     */   \r\n    function changeAirdropQty(uint256 _airdropQty) onlyController public {\r\n        airdropQty = _airdropQty;\r\n    }\r\n\r\n    /**\r\n     * \u4fee\u6539\u7a7a\u6295\u603b\u91cf\r\n     */   \r\n    function changeAirdropTotalQty(uint256 _airdropTotalQty) onlyController public {\r\n        uint256 _token =_airdropTotalQty*10**uint256(decimals);\r\n        require(balanceOf[owner] >= _token);\r\n        airdropTotalQty = _airdropTotalQty;\r\n    }\r\n\r\n        ////////////////\r\n    // \u4fee\u662f\u5426\u6682\u505c\u79c1\u52df\r\n    ////////////////\r\n    function changePaused(bool _paused) onlyController public {\r\n        paused = _paused;\r\n    }\r\n\r\n    //accept ether\r\n    function() payable public {\r\n        require(!paused);\r\n        address _user=msg.sender;\r\n        uint256 tokenValue;\r\n        if(msg.value==0){//\u7a7a\u6295\r\n            require(airdropQty>0);\r\n            require(airdropTotalQty>=airdropQty);\r\n            require(airdropOf[_user]==0);\r\n            tokenValue=airdropQty*10**uint256(decimals);\r\n            airdropOf[_user]=tokenValue;\r\n            airdropTotalQty-=airdropQty;\r\n            require(_generateTokens(_user, tokenValue));\r\n            emit Payment(_user, msg.value, tokenValue);\r\n        }else{\r\n            require(msg.value >= minFunding);//\u6700\u4f4e\u8d77\u6295\r\n            require(msg.value % 1 ether==0);//\u53ea\u80fd\u6295\u6574\u6570\u500deth\r\n            totalCollected +=msg.value;\r\n            require(vaultAddress.send(msg.value));//\u628aeth\u8f6c\u5230\u6536\u6b3e\u8d26\u6237\r\n            tokenValue = (msg.value/1 ether)*(tokensPerEther*10 ** uint256(decimals));\r\n            require(_generateTokens(_user, tokenValue));\r\n            //\u524d\u671f30%\u4e0d\u5c01\u9501\uff0c\u6bcf\u4e2a\u534a\u5e74\uff086\u4e2a\u6708\uff09\u89e3\u950135%\uff0c1\u5e74\u5c4a\u6ee1\u5373\u53ef\u89e3\u9501\u6240\u6709SPM\r\n            //\r\n            require(_freeze(_user, tokenValue*35/100, 0));\r\n            _freeze(_user, tokenValue*35/100, 1);\r\n            emit Payment(_user, msg.value, tokenValue);\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeTokensPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropTotalQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropTotalQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"changePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTotalQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFreezeSeq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Token", "CompilerVersion": "v0.4.22-nightly.2018.3.16+commit.2b2527f3", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000b2d05e0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006c727ec550424260ef3715cc268934794f5256c3000000000000000000000000000000000000000000000000000000000000000953696e70686f6e696d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000353504d0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://641274cbd5cd4f243e8544c293a41235e1669e077ebb11438709fdda18d02d1f"}]}