{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/token/TokenDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./TokenStorage.sol\\\";\\n\\ncontract InterestProtocolToken is TokenDelegatorStorage, TokenEvents, ITokenDelegator {\\n  constructor(\\n    address account_,\\n    address owner_,\\n    address implementation_,\\n    uint256 initialSupply_\\n  ) {\\n    require(implementation_ != address(0), \\\"TokenDelegator: invalid address\\\");\\n    owner = owner_;\\n    delegateTo(implementation_, abi.encodeWithSignature(\\\"initialize(address,uint256)\\\", account_, initialSupply_));\\n\\n    implementation = implementation_;\\n\\n    emit NewImplementation(address(0), implementation);\\n  }\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   */\\n  function _setImplementation(address implementation_) external override onlyOwner {\\n    require(implementation_ != address(0), \\\"_setImplementation: invalid addr\\\");\\n\\n    address oldImplementation = implementation;\\n    implementation = implementation_;\\n\\n    emit NewImplementation(oldImplementation, implementation);\\n  }\\n\\n  /**\\n   * @notice Called by the admin to update the owner of the delegator\\n   * @param owner_ The address of the new owner\\n   */\\n  function _setOwner(address owner_) external override onlyOwner {\\n    owner = owner_;\\n  }\\n\\n  /**\\n   * @notice Internal method to delegate execution to another contract\\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n   * @param callee The contract to delegatecall\\n   * @param data The raw data to delegatecall\\n   */\\n  function delegateTo(address callee, bytes memory data) internal {\\n    //solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\\n    //solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      if eq(success, 0) {\\n        revert(add(returnData, 0x20), returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback() external payable override {\\n    // delegate all other functions to current implementation\\n    //solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = implementation.delegatecall(msg.data);\\n    //solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n\\n  receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"contracts/governance/token/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface to interact with TokenDelgator\\ninterface ITokenDelegator {\\n  function _setImplementation(address implementation_) external;\\n\\n  function _setOwner(address owner_) external;\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\\n/// @title interface to interact with TokenDelgate\\ninterface ITokenDelegate {\\n  function initialize(address account_, uint256 initialSupply_) external;\\n\\n  function changeName(string calldata name_) external;\\n\\n  function changeSymbol(string calldata symbol_) external;\\n\\n  function allowance(address account, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 rawAmount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address dst, uint256 rawAmount) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external returns (bool);\\n\\n  function mint(address dst, uint256 rawAmount) external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 rawAmount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function delegate(address delegatee) external;\\n\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function getCurrentVotes(address account) external view returns (uint96);\\n\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n}\\n\\n/// @title interface which contains all events emitted by delegator & delegate\\ninterface TokenEvents {\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n  /// @notice An event thats emitted when the minter changes\\n  event MinterChanged(address indexed oldMinter, address indexed newMinter);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /// @notice Emitted when implementation is changed\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /// @notice An event thats emitted when the token symbol is changed\\n  event ChangedSymbol(string oldSybmol, string newSybmol);\\n\\n  /// @notice An event thats emitted when the token name is changed\\n  event ChangedName(string oldName, string newName);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/token/TokenStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../_external/Context.sol\\\";\\n\\ncontract TokenDelegatorStorage is Context {\\n  /// @notice Active brains of Token\\n  address public implementation;\\n\\n  /// @notice EIP-20 token name for this token\\n  string public name = \\\"Interest Protocol\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public symbol = \\\"IPT\\\";\\n\\n  /// @notice Total number of tokens in circulation\\n  uint256 public totalSupply;\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  address public owner;\\n  /// @notice onlyOwner modifier checks if sender is owner\\n  modifier onlyOwner() {\\n    require(owner == _msgSender(), \\\"onlyOwner: sender not owner\\\");\\n    _;\\n  }\\n}\\n\\n/**\\n * @title Storage for Token Delegate\\n * @notice For future upgrades, do not change TokenDelegateStorageV1. Create a new\\n * contract which implements TokenDelegateStorageV1 and following the naming convention\\n * TokenDelegateStorageVX.\\n */\\ncontract TokenDelegateStorageV1 is TokenDelegatorStorage {\\n  // Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint256) public nonces;\\n}\\n\"\r\n    },\r\n    \"contracts/_external/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"ChangedName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldSybmol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSybmol\",\"type\":\"string\"}],\"name\":\"ChangedSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"_setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InterestProtocolToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000958892b4a0512b28aaac890fc938868bbd42f064000000000000000000000000958892b4a0512b28aaac890fc938868bbd42f06400000000000000000000000035bb90c0b96ddb4b93ddf42afedd5204e91a1a1000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x35bb90c0b96ddb4b93ddf42afedd5204e91a1a10", "SwarmSource": ""}]}