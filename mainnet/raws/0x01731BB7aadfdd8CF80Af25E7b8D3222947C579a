{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Payment.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/**\\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592 \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2584\u2584\u2584\u2584    \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588     \u2584\u2588\u2588\u2588\u2588\u2584   \u2588\u2588\u2593     \u2588    \u2588\u2588  \u2584\u2584\u2584\u2584   \\n\u2592 \u2592 \u2592 \u2584\u2580\u2591\u2592\u2588\u2588\u2592  \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2584 \u2593\u2588\u2588\u2592\u2593\u2588   \u2580    \u2592\u2588\u2588\u2580 \u2580\u2588  \u2593\u2588\u2588\u2592     \u2588\u2588  \u2593\u2588\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2584 \\n\u2591 \u2592 \u2584\u2580\u2592\u2591 \u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588\u2592 \u2584\u2588\u2588\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2588      \u2592\u2593\u2588    \u2584 \u2592\u2588\u2588\u2591    \u2593\u2588\u2588  \u2592\u2588\u2588\u2591\u2592\u2588\u2588\u2592 \u2584\u2588\u2588\\n  \u2584\u2580\u2592   \u2591\u2592\u2588\u2588   \u2588\u2588\u2591\u2592\u2588\u2588    \u2592\u2588\u2588 \u2592\u2588\u2588\u2591\u2588\u2580  \u2591\u2588\u2588\u2591\u2592\u2593\u2588  \u2584    \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2592\u2588\u2588\u2591    \u2593\u2593\u2588  \u2591\u2588\u2588\u2591\u2592\u2588\u2588\u2591\u2588\u2580  \\n\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2591\u2593\u2588  \u2580\u2588\u2593\u2591\u2588\u2588\u2591\u2591\u2592\u2588\u2588\u2588\u2588\u2592   \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593 \u2591\u2593\u2588  \u2580\u2588\u2593\\n\u2591\u2592\u2592 \u2593\u2591\u2592\u2591\u2592\u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2591   \u2591  \u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2593  \u2591\u2591 \u2592\u2591 \u2591   \u2591 \u2591\u2592 \u2592  \u2591\u2591 \u2592\u2591\u2593  \u2591\u2591\u2592\u2593\u2592 \u2592 \u2592 \u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\\n\u2591\u2591\u2592 \u2592 \u2591 \u2592  \u2591 \u2592 \u2592\u2591 \u2591  \u2591      \u2591\u2592\u2591\u2592   \u2591  \u2592 \u2591 \u2591 \u2591  \u2591     \u2591  \u2592   \u2591 \u2591 \u2592  \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591 \u2592\u2591\u2592   \u2591 \\n\u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2592  \u2591      \u2591    \u2591    \u2591  \u2592 \u2591   \u2591      \u2591          \u2591 \u2591    \u2591\u2591\u2591 \u2591 \u2591  \u2591    \u2591 \\n  \u2591 \u2591        \u2591 \u2591         \u2591    \u2591       \u2591     \u2591  \u2591   \u2591 \u2591          \u2591  \u2591   \u2591      \u2591      \\n\u2591                                  \u2591               \u2591                               \u2591 \\n \\nWebsite: https://zombieclub.io\\nTwitter: https://twitter.com/get_turned\\nDiscord: https://discord.gg/zombieclub\\nGithub: https://github.com/getTurned\\n\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror IncorrectPaymentAmount();\\n\\ncontract Payment is Ownable {\\n    address public adjuster;\\n    uint256 public price;\\n    uint256 public pirceCustomized;\\n\\n    event PaymentSent(uint64 orderId, uint64 amount, bool customized);\\n\\n    constructor(uint256 price_, uint256 pirceCustomized_, address adjuster_) {\\n        price = price_;\\n        pirceCustomized = pirceCustomized_;\\n        adjuster = adjuster_;\\n    }\\n\\n    function sendPayment(uint64 orderId, uint64 amount, bool customized) external payable {\\n        if(msg.value != getPrice(amount, customized)) revert IncorrectPaymentAmount();\\n        emit PaymentSent(orderId, amount, customized);\\n    }\\n\\n    function getPrice(uint64 amount, bool customized) public view returns (uint256) {\\n        uint256 price_;\\n\\n        if(customized) {\\n            price_ = pirceCustomized;\\n        } else {\\n            price_ = price;\\n        }\\n\\n        require(price_ > 0, \\\"Sale not opened!\\\");\\n\\n        return price_ * amount;\\n    }\\n\\n    function adjust(uint256 price_, uint256 pirceCustomized_) external {\\n        require(msg.sender == adjuster, \\\"only adjuster\\\");\\n        price = price_;\\n        pirceCustomized = pirceCustomized_;\\n    }\\n\\n    function setAdjuster(address adjuster_) external onlyOwner {\\n        adjuster = adjuster_;\\n    }\\n\\n    function withdrawTo(address to, uint256 amount) external onlyOwner {\\n        payable(to).transfer(amount);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }    \\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pirceCustomized_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adjuster_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectPaymentAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"customized\",\"type\":\"bool\"}],\"name\":\"PaymentSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pirceCustomized_\",\"type\":\"uint256\"}],\"name\":\"adjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjuster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"customized\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pirceCustomized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"customized\",\"type\":\"bool\"}],\"name\":\"sendPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjuster_\",\"type\":\"address\"}],\"name\":\"setAdjuster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Payment", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000025bf6196bd10000000000000000000000000000000000000000000000000000039bb49f599a00000000000000000000000000005eab7fba0b512d1dd31ceb641427a37f97f64c5a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}