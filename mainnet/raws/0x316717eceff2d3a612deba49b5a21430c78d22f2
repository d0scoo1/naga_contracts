{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GNU GPLv3\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\nabstract contract ERC20Clone {\r\n    function initializer(\r\n        address _minter,\r\n        string memory _wrappedTokenName,\r\n        string memory _wrappedTokenTicker,\r\n        uint8 _wrappedTokenDecimals,\r\n        uint256 _vestEndTime\r\n    ) public virtual;\r\n}\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @title ERC20Factory contract for mass deployment of WVTs\r\n/// @author Capx Team\r\n/// @notice Only the controller contract can call the function which deploys cheap copy of ERC20 contracts\r\n/// @dev This contract uses EIP-1167: Minimal Proxy Contract\r\ncontract ERC20Factory is Ownable {\r\n    address public implementation;\r\n    address public controller;\r\n    address public lender;\r\n\r\n    constructor(address _implementaiton, address _controller) {\r\n        require(\r\n            _implementaiton != address(0) && _controller != address(0),\r\n            \"Invalid input\"\r\n        );\r\n        implementation = _implementaiton;\r\n        controller = _controller;\r\n    }\r\n\r\n    /// @notice Function which can only be called by owner and used to set lender contract address.\r\n    /// @param _lender The address of the lender contract.\r\n    function setLender(address _lender) external onlyOwner {\r\n        require(_lender != address(0), \"Invalid input\");\r\n        lender = _lender;\r\n    }\r\n\r\n    /// @notice Function called by controller contract to deploy new ERC20 token\r\n    function createStorage(\r\n        string memory _wrappedTokenName,\r\n        string memory _wrappedTokenTicker,\r\n        uint8 _wrappedTokenDecimals,\r\n        uint256 _vestEndTime\r\n    ) public returns (address) {\r\n        require(msg.sender == controller, \"Only controller can access\");\r\n        address clone = createClone(implementation);\r\n        // Handling low level exception\r\n        assert(clone != address(0));\r\n        ERC20Clone(clone).initializer(\r\n            controller,\r\n            _wrappedTokenName,\r\n            _wrappedTokenTicker,\r\n            _wrappedTokenDecimals,\r\n            _vestEndTime\r\n        );\r\n        return (clone);\r\n    }\r\n\r\n    /// @notice Function uses EIP-1167 implementation\r\n    function createClone(address _target) internal returns (address result) {\r\n        bytes20 targetBytes = bytes20(_target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementaiton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_wrappedTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_wrappedTokenTicker\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_wrappedTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_vestEndTime\",\"type\":\"uint256\"}],\"name\":\"createStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"setLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20Factory", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000070ed33106be4621ee9c16c5504249268b9cc3e0700000000000000000000000030b9a8279298ba8d37bf76b9f2a805d656fc1c07", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://49a53f370bcf4f85c1444bf9f3b377886837eee78bb0cef45991110ff08b555c"}]}