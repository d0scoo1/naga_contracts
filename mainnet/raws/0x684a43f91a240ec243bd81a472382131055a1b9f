{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * author: GCC\r\n * \r\n * This contract is used to mint plenty of nfts via one tnx, saving more gas than most of other similar contracts.\r\n * \r\n * Donating to this contract is welcomed.\r\n */\r\n\r\ninterface nft{\r\n    function totalSupply() external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface erc20{\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Minter{\r\n\r\n    constructor(address destination, bytes memory data, uint256 amount, uint256 tokenId) payable {\r\n        (bool success,) = payable(destination).call{value:msg.value}(data);\r\n        require(success);\r\n        for(uint i=0; i<amount; ){\r\n            nft(destination).transferFrom(address(this), tx.origin, tokenId+i);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ncontract MinterTo{\r\n\r\n    constructor(address destination, bytes memory data) payable {\r\n        (bool success,) = payable(destination).call{value:msg.value}(data);\r\n        require(success);\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ncontract NftFactory{\r\n\r\n    address private _owner;\r\n\r\n    constructor(){\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function Owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param destination: mint contract\r\n     * @param data: mint transaction payload\r\n     * @param times: mint times\r\n     * @param amount: mint amount per times (match data)\r\n     */\r\n    function mint(address destination, bytes calldata data, uint256 times, uint256 amount) external payable{\r\n        uint256 _value = msg.value/times;\r\n        uint256 tokenId = nft(destination).totalSupply();\r\n        for(uint i=0; i<times; ){\r\n            new Minter{value:_value}(destination, data, amount, tokenId);\r\n            unchecked{\r\n                ++i;\r\n                tokenId += amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param destination: mint contract\r\n     * @param data: mint transaction payload\r\n     * @param times: mint times\r\n     */\r\n    function mintTo(address destination, bytes calldata data, uint256 times) external payable{\r\n        uint256 _value = msg.value/times;\r\n        for(uint i=0; i<times; ){\r\n            new MinterTo{value:_value}(destination, data);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    function withdrawETH() public {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function _withdrawERC20(address erc20address) private onlyOwner {\r\n        uint256 balance = erc20(erc20address).balanceOf(address(this));\r\n        erc20(erc20address).transfer(address(msg.sender), balance);\r\n    }\r\n\r\n    function withdrawERC20(address[] calldata erc20addresses) public onlyOwner {\r\n        for(uint i=0; i<erc20addresses.length; ){\r\n            _withdrawERC20(erc20addresses[i]);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawERC721(address erc721address, uint256 tokenId) private onlyOwner {\r\n        nft(erc721address).transferFrom(address(this), address(tx.origin), tokenId);\r\n    }\r\n    \r\n    function withdrawERC721(address[] calldata erc721addresses, uint256[] calldata tokenIds) public onlyOwner{\r\n        for(uint i=0; i<erc721addresses.length; ){\r\n            _withdrawERC721(erc721addresses[i], tokenIds[i]);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20addresses\",\"type\":\"address[]\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc721addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NftFactory", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62eff326ac6dcaab54a20fb1676b0d5c2def532c5a3aa13a12cb60c38c30af95"}]}