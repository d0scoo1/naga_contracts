{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/niftyvs/GenesisPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {ERC721Royalty} from \\\"../token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport {ERC721} from \\\"../token/ERC721/ERC721.sol\\\";\\r\\nimport {MintGate} from \\\"../token/libraries/MintGate.sol\\\";\\r\\nimport {Withdrawable} from \\\"../utilities/Withdrawable.sol\\\";\\r\\nimport {IGenesisPass} from \\\"./IGenesisPass.sol\\\";\\r\\n\\r\\nerror ContractMinterAlreadyDefined();\\r\\nerror NotEnoughVotes();\\r\\nerror WinningCollectionsFinalized();\\r\\n\\r\\ncontract GenesisPass is ERC721, ERC721Royalty, IGenesisPass, ReentrancyGuard, Withdrawable {\\r\\n\\r\\n    uint256 public constant MAX_MINT_PER_WALLET = 2;\\r\\n    uint256 public constant MAX_SUPPLY = 5000;\\r\\n    uint256 public constant MAX_WINNERS = 5;\\r\\n\\r\\n    uint256 public constant MINT_END_TIME = 0;\\r\\n    uint256 public constant MINT_START_TIME = 0;\\r\\n\\r\\n    uint256 public constant PRICE = 0.2 ether;\\r\\n\\r\\n    uint256 public constant WINNING_VOTES_THRESHOLD = 2500;\\r\\n\\r\\n\\r\\n    address[] public _collections;\\r\\n\\r\\n    address public _contractMinter;\\r\\n\\r\\n    mapping(address => uint256) private _leaderboard;\\r\\n\\r\\n    mapping(address => uint256) private _votes;\\r\\n\\r\\n    address[] public _winners;\\r\\n\\r\\n\\r\\n    constructor() ERC721(\\\"Genesis Pass\\\", \\\"genesis\\\") ERC721Royalty(_msgSender(), 1000) ReentrancyGuard() {}\\r\\n\\r\\n\\r\\n    function collections(uint256 cursor, uint256 size) external view returns(address[] memory, uint256) {\\r\\n        uint256 n = size;\\r\\n\\r\\n        if (n > _collections.length - cursor) {\\r\\n            n = _collections.length - cursor;\\r\\n        }\\r\\n\\r\\n        address[] memory values = new address[](n);\\r\\n\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < n; i++) {\\r\\n                values[i] = _collections[cursor + i];\\r\\n            }\\r\\n\\r\\n            return (values, (cursor + n));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mint(uint256 quantity) external nonReentrant payable {\\r\\n        uint256 available = MAX_SUPPLY - totalMinted();\\r\\n        address buyer = _msgSender();\\r\\n\\r\\n        MintGate.price(buyer, PRICE, quantity, msg.value);\\r\\n        MintGate.supply(available, MAX_MINT_PER_WALLET, uint256(_owner(buyer).minted), quantity);\\r\\n        MintGate.time(MINT_END_TIME, MINT_START_TIME);\\r\\n\\r\\n        _safeMint(buyer, quantity);\\r\\n\\r\\n        unchecked {\\r\\n            _votes[buyer] += quantity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setContractMinter(address minter) external onlyOwner {\\r\\n        if (_contractMinter != address(0)) {\\r\\n            revert ContractMinterAlreadyDefined();\\r\\n        }\\r\\n\\r\\n        _contractMinter = minter;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Royalty) returns (bool) {\\r\\n        return interfaceId == type(IGenesisPass).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function vote(address collection, uint256 quantity) external whenNotPaused {\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        if ((_winners.length + 1) > MAX_WINNERS) {\\r\\n            revert WinningCollectionsFinalized();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            if (_contractMinter != sender && _votes[sender] < quantity) {\\r\\n                revert NotEnoughVotes();\\r\\n            }\\r\\n\\r\\n            if (_leaderboard[collection] == 0) {\\r\\n                _collections.push(collection);\\r\\n            }\\r\\n\\r\\n            _leaderboard[collection] += quantity;\\r\\n            _votes[sender] -= quantity;\\r\\n\\r\\n            if ((_leaderboard[collection] + 1) > WINNING_VOTES_THRESHOLD) {\\r\\n                _winners.push(collection);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function votes(address collection) external view returns(uint256) {\\r\\n        return _leaderboard[collection];\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner nonReentrant whenNotPaused {\\r\\n        _withdraw(owner(), address(this).balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {ERC2981} from \\\"../../ERC2981/ERC2981.sol\\\";\\r\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\r\\n\\r\\nabstract contract ERC721Royalty is ERC721, ERC2981 {\\r\\n\\r\\n    constructor(address receiver, uint256 fee) ERC2981(receiver, fee) {}\\r\\n\\r\\n\\r\\n    function setDefaultRoyaltyInfo(address receiver, uint256 fee) internal onlyOwner {\\r\\n        _setDefaultRoyaltyInfo(receiver, fee);\\r\\n    }\\r\\n\\r\\n    function setRoyaltyInfo(uint256 tokenId, address receiver, uint256 fee) internal onlyOwner {\\r\\n        _setRoyaltyInfo(tokenId, receiver, fee);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Fork of ERC721A created by Chiru Labs\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport {ERC165, IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nerror ApproveToCaller();\\r\\nerror ApprovalToCurrentOwner();\\r\\nerror CallerNotOwnerNorApproved(string method);\\r\\nerror MethodReceivedZeroAddress(string method);\\r\\nerror MintZeroQuantity();\\r\\nerror QueryForNonexistentToken(string method);\\r\\nerror TokenQueryProducedVariant();\\r\\nerror TransferFromIncorrectOwner();\\r\\nerror TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n/**\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3...)\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n * Assumes that the maximum token tokenId cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, Ownable, Pausable {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n\\r\\n    uint32 public constant MINT_BATCH_SIZE = 8;\\r\\n\\r\\n    uint32 public constant STATE_BURNED = 1;\\r\\n    uint32 public constant STATE_MINTED = 2;\\r\\n    uint32 public constant STATE_TRANSFERRED = 3;\\r\\n\\r\\n\\r\\n    struct Approvals {\\r\\n        // Owner Address => [Operator Address => Approved if true, otherwise false]\\r\\n        mapping(address => mapping(address => bool)) operators;\\r\\n\\r\\n        // Token Id => Approved Address\\r\\n        mapping(uint256 => address) tokens;\\r\\n    }\\r\\n\\r\\n    struct Owner {\\r\\n        uint64 balance;\\r\\n        uint64 burned;\\r\\n        uint64 minted;\\r\\n        uint64 misc;\\r\\n    }\\r\\n\\r\\n    struct Token {\\r\\n        address owner;\\r\\n        uint32 state;\\r\\n        uint64 updatedAt;\\r\\n    }\\r\\n\\r\\n\\r\\n    string internal _baseURI;\\r\\n\\r\\n    uint256 private _burned;\\r\\n\\r\\n    string internal _name;\\r\\n\\r\\n    uint256 private _nextId;\\r\\n\\r\\n    string internal _symbol;\\r\\n\\r\\n\\r\\n    // Namespaced Approval Data\\r\\n    Approvals private _approvals;\\r\\n\\r\\n    // Owner Address => Owner Data\\r\\n    mapping(address => Owner) private _owners;\\r\\n\\r\\n    // Token Id => Token Data\\r\\n    mapping(uint256 => Token) private _tokens;\\r\\n\\r\\n    mapping(uint256 => string) private _tokenURI;\\r\\n\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) Ownable() Pausable() {\\r\\n        _name = name_;\\r\\n        _nextId = _startTokenId();\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token tokenId to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address from, address to, uint256 tokenId) private {\\r\\n        _approvals.tokens[tokenId] = to;\\r\\n\\r\\n        emit Approval(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are\\r\\n     * about to be transferred. This includes minting. And also called before\\r\\n     * burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token tokenId to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool verifyApproved) internal virtual whenNotPaused {\\r\\n        Token memory token = _token(tokenId);\\r\\n\\r\\n        if (verifyApproved && !_isApprovedOrOwner(tokenId, _msgSender())) {\\r\\n            revert CallerNotOwnerNorApproved({ method: '_burn' });\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(token.owner, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(token.owner, address(0), tokenId);\\r\\n\\r\\n        // Update next 'tokenId' if owned by 'from'\\r\\n        _setDeferredOwnership(tokenId, token);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // token above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            Owner storage owner = _owners[token.owner];\\r\\n            owner.balance -= 1;\\r\\n            owner.burned += 1;\\r\\n\\r\\n            _burned += 1;\\r\\n        }\\r\\n\\r\\n        // Keep track of last owner\\r\\n        _tokens[tokenId] = Token({\\r\\n            owner: token.owner,\\r\\n            state: STATE_BURNED,\\r\\n            updatedAt: uint64(block.timestamp)\\r\\n        });\\r\\n\\r\\n        emit Transfer(token.owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfers(token.owner, address(0), tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token tokenId\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 tokenId of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {\\r\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n        }\\r\\n        catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n\\r\\n            assembly {\\r\\n                revert(add(32, reason), mload(reason))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return (tokenId + 1) > _startTokenId() && tokenId < _nextId && _tokens[tokenId].state != STATE_BURNED;\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(uint256 tokenId, address sender) internal view returns (bool) {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        return sender == owner || getApproved(tokenId) == sender || isApprovedForAll(owner, sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity, bytes memory data, bool safe) internal whenNotPaused {\\r\\n        uint256 start = _nextId;\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            revert MethodReceivedZeroAddress({ method: '_mint' });\\r\\n        }\\r\\n\\r\\n        if (quantity == 0) {\\r\\n            revert MintZeroQuantity();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, start, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or minted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\r\\n        // tokenId overflows if _nextId + quantity > 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            Owner storage owner = _owners[to];\\r\\n            owner.balance += uint64(quantity);\\r\\n            owner.minted += uint64(quantity);\\r\\n\\r\\n            uint256 batches = quantity / MINT_BATCH_SIZE;\\r\\n\\r\\n            if (quantity % MINT_BATCH_SIZE != 0) {\\r\\n                batches += 1;\\r\\n            }\\r\\n\\r\\n            for (uint256 batch = 0; batch < batches; batch++) {\\r\\n                _tokens[start + (MINT_BATCH_SIZE * batch)] = Token({\\r\\n                    owner: to,\\r\\n                    state: STATE_MINTED,\\r\\n                    updatedAt: uint64(block.timestamp)\\r\\n                });\\r\\n            }\\r\\n\\r\\n            uint256 current = start;\\r\\n            uint256 last = current + quantity;\\r\\n\\r\\n            if (safe && to.isContract()) {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, current);\\r\\n\\r\\n                    if (!_checkContractOnERC721Received(address(0), to, current++, data)) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (current != last);\\r\\n\\r\\n                // Reentrancy protection\\r\\n                if (_nextId != start) {\\r\\n                    revert();\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, current++);\\r\\n                } while (current != last);\\r\\n            }\\r\\n\\r\\n            _nextId = current;\\r\\n        }\\r\\n\\r\\n        _afterTokenTransfers(address(0), to, start, quantity);\\r\\n    }\\r\\n\\r\\n    function _owner(address owner) internal view returns (Owner memory) {\\r\\n        return _owners[owner];\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity, bytes memory data) internal {\\r\\n        _mint(to, quantity, data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * If the token slot of tokenId+1 is not explicitly set, that means the\\r\\n     * transfer initiator owns it. Set the slot of tokenId+1 explicitly in\\r\\n     * storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n     */\\r\\n    function _setDeferredOwnership(uint256 tokenId, Token memory token) private {\\r\\n        uint256 next = tokenId + 1;\\r\\n\\r\\n        if (_exists(next) && _tokens[next].owner == address(0)) {\\r\\n            _tokens[next] = token;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function _token(uint256 tokenId) internal view returns (Token memory) {\\r\\n        if (!_exists(tokenId)) {\\r\\n            revert QueryForNonexistentToken({ method: '_token' });\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 batch = MINT_BATCH_SIZE + 1;\\r\\n            uint256 n = _startTokenId();\\r\\n\\r\\n            if (tokenId > batch) {\\r\\n                n = tokenId - batch;\\r\\n            }\\r\\n\\r\\n            for (uint256 i = tokenId; i > n; i--) {\\r\\n                Token memory token = _tokens[i];\\r\\n\\r\\n                if (token.owner != address(0)) {\\r\\n                    return token;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert TokenQueryProducedVariant();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) private whenNotPaused {\\r\\n        Token memory token = _token(tokenId);\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            revert MethodReceivedZeroAddress({ method: '_transfer' });\\r\\n        }\\r\\n\\r\\n        if (token.owner != from) {\\r\\n            revert TransferFromIncorrectOwner();\\r\\n        }\\r\\n\\r\\n        if (!_isApprovedOrOwner(tokenId, _msgSender())) {\\r\\n            revert CallerNotOwnerNorApproved({ method: '_transfer' });\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(token.owner, address(0), tokenId);\\r\\n\\r\\n        // Update next tokenId if owned by 'from'\\r\\n        _setDeferredOwnership(tokenId, token);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // token above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            _owners[from].balance -= 1;\\r\\n            _owners[to].balance += 1;\\r\\n        }\\r\\n\\r\\n        _tokens[tokenId] = Token({\\r\\n            owner: to,\\r\\n            state: uint32(STATE_TRANSFERRED),\\r\\n            updatedAt: uint64(block.timestamp)\\r\\n        });\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) override public {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        if (to == owner) {\\r\\n            revert ApprovalToCurrentOwner();\\r\\n        }\\r\\n\\r\\n        if (sender != owner && !isApprovedForAll(owner, sender)) {\\r\\n            revert CallerNotOwnerNorApproved({ method: 'approve' });\\r\\n        }\\r\\n\\r\\n        _approve(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}\\r\\n     */\\r\\n    function balanceOf(address owner) override public view returns (uint256) {\\r\\n        if (owner == address(0)) {\\r\\n            revert MethodReceivedZeroAddress({ method: 'balanceOf' });\\r\\n        }\\r\\n\\r\\n        return uint256(_owners[owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) override public view returns (address) {\\r\\n        if (!_exists(tokenId)) {\\r\\n            revert QueryForNonexistentToken({ method: 'getApproved' });\\r\\n        }\\r\\n\\r\\n        return _approvals.tokens[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) override public view virtual returns (bool) {\\r\\n        return _approvals.operators[owner][operator];\\r\\n    }\\r\\n\\r\\n    function name() override(IERC721Metadata) public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) override public view returns (address) {\\r\\n        return _token(tokenId).owner;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) override public virtual {\\r\\n        safeTransferFrom(from, to, tokenId, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) override public virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n\\r\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, data)) {\\r\\n            revert TransferToNonERC721ReceiverImplementer();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) override public virtual {\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        if (operator == sender) {\\r\\n            revert ApproveToCaller();\\r\\n        }\\r\\n\\r\\n        _approvals.operators[sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory uri) public onlyOwner virtual {\\r\\n        _baseURI = uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyOwner virtual {\\r\\n        if (!_exists(tokenId)) {\\r\\n            revert QueryForNonexistentToken({ method: 'setTokenURI' });\\r\\n        }\\r\\n\\r\\n        _tokenURI[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) override(ERC165, IERC165) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function symbol() override(IERC721Metadata) public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function tokensOf(address owner, uint256 cursor, uint256 size) external view returns (uint256[] memory, uint256) {\\r\\n        uint256 balance = balanceOf(owner);\\r\\n        uint256 max = _nextId;\\r\\n\\r\\n        if (balance == 0) {\\r\\n            return (new uint256[](0), cursor);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            if (cursor < _startTokenId()) {\\r\\n                cursor = _startTokenId();\\r\\n            }\\r\\n\\r\\n            uint256 length = size;\\r\\n\\r\\n            if (length > max - cursor) {\\r\\n                length = max - cursor;\\r\\n            }\\r\\n\\r\\n            uint256[] memory ids = new uint256[](balance);\\r\\n\\r\\n            // Cursor token may not be 'initialized' due to ERC721A design, use\\r\\n            // normal token fetching function to find owner of token.\\r\\n            Token memory token = _token(cursor);\\r\\n            address current;\\r\\n\\r\\n            if (token.state != STATE_BURNED) {\\r\\n                current = token.owner;\\r\\n            }\\r\\n\\r\\n            uint256 j;\\r\\n\\r\\n            for (uint256 i = cursor; i != length && j != balance; i++) {\\r\\n                token = _tokens[i];\\r\\n\\r\\n                if (token.owner == address(0) || token.state == STATE_BURNED) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                current = token.owner;\\r\\n\\r\\n                if (current == owner) {\\r\\n                    ids[j++] = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Downsize the array to fit\\r\\n            assembly {\\r\\n                mstore(ids, j)\\r\\n            }\\r\\n\\r\\n            return (ids, (cursor + size));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) override(IERC721Metadata) public view virtual returns (string memory) {\\r\\n        if (!_exists(tokenId)) {\\r\\n            revert QueryForNonexistentToken({ method: 'tokenURI' });\\r\\n        }\\r\\n\\r\\n        string memory base = _baseURI;\\r\\n        string memory token = _tokenURI[tokenId];\\r\\n\\r\\n        if (bytes(token).length == 0) {\\r\\n            token = tokenId.toString();\\r\\n        }\\r\\n\\r\\n        if (bytes(base).length != 0) {\\r\\n            return string(abi.encodePacked(base, token));\\r\\n        }\\r\\n\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    function totalBurned() public view returns (uint256) {\\r\\n        return _burned;\\r\\n    }\\r\\n\\r\\n    function totalMinted() public view returns (uint256) {\\r\\n        unchecked {\\r\\n            return _nextId - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        unchecked {\\r\\n            return _nextId - _burned - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) override public virtual {\\r\\n        safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/libraries/MintGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\nerror CannotMintMoreThan(uint256 amount);\\r\\nerror MaxMintPerWalletWouldBeReached(uint256 max);\\r\\nerror NeedToSendMoreETH();\\r\\nerror QuantityWouldExceedMaxSupply();\\r\\nerror SaleHasNotStarted();\\r\\nerror SaleHasEnded();\\r\\n\\r\\nlibrary MintGate {\\r\\n\\r\\n    function isWhitelisted(address buyer, bytes32[] calldata proof, bytes32 root) internal pure returns (bool) {\\r\\n        return MerkleProof.verify(proof, root, keccak256(abi.encodePacked(buyer)));\\r\\n    }\\r\\n\\r\\n    function price(address buyer, uint256 cost, uint256 quantity, uint256 received) internal {\\r\\n        unchecked {\\r\\n            uint256 total = cost * quantity;\\r\\n\\r\\n            if (total < received) {\\r\\n                revert NeedToSendMoreETH();\\r\\n            }\\r\\n\\r\\n            // Refund remaining value\\r\\n            if (received > total) {\\r\\n                payable(buyer).transfer(received - total);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supply(uint256 available, uint256 max, uint256 minted, uint256 quantity) internal pure {\\r\\n        if (quantity > available) {\\r\\n            revert QuantityWouldExceedMaxSupply();\\r\\n        }\\r\\n\\r\\n        if (max > 0) {\\r\\n            if (quantity > max) {\\r\\n                revert CannotMintMoreThan({ amount: max });\\r\\n            }\\r\\n\\r\\n            if ((minted + quantity) > max) {\\r\\n                revert MaxMintPerWalletWouldBeReached({ max: max });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function time(uint256 end, uint256 start) internal view {\\r\\n        if (block.timestamp < start) {\\r\\n            revert SaleHasNotStarted();\\r\\n        }\\r\\n\\r\\n        if (end != 0 && block.timestamp > end) {\\r\\n            revert SaleHasEnded();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utilities/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nerror AlreadyWithdrawnForThisMonth();\\r\\nerror AmountExceedsBalance(string method);\\r\\nerror TransferFailed();\\r\\nerror WithdrawLockupActive();\\r\\n\\r\\nabstract contract Withdrawable {\\r\\n\\r\\n    bool private _locked;\\r\\n\\r\\n    mapping(uint256 => bool) private _months;\\r\\n\\r\\n\\r\\n    function _withdraw(address receiver, uint256 amount) internal {\\r\\n        if (address(this).balance < amount) {\\r\\n            revert AmountExceedsBalance({ method: '_withdraw' });\\r\\n        }\\r\\n\\r\\n        (bool success, ) = payable(receiver).call{value: amount}(\\\"\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw x% once per month\\r\\n    function _withdrawOncePerMonth(address receiver, uint256 bips, uint256 deployedAt) internal {\\r\\n        unchecked {\\r\\n            uint256 amount = address(this).balance;\\r\\n            uint256 month = ((block.timestamp - deployedAt) / 4 weeks) + 1;\\r\\n\\r\\n            if (_months[month]) {\\r\\n                revert AlreadyWithdrawnForThisMonth();\\r\\n            }\\r\\n\\r\\n            _months[month] = true;\\r\\n\\r\\n            _withdraw(receiver, (amount * bips) / 10000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw With x% Lockup\\r\\n    // - x% available for withdraw on sale\\r\\n    // - x% held by contract until `timestamp`\\r\\n    function _withdrawWithLockup(address receiver, uint256 bips, uint256 unlockAt) internal {\\r\\n        unchecked {\\r\\n            uint256 amount = address(this).balance;\\r\\n\\r\\n            if (amount < ((amount * bips) / 10000)) {\\r\\n                revert AmountExceedsBalance({ method: '_withdrawWithLockup' });\\r\\n            }\\r\\n\\r\\n            // x% can be withdrawn to kickstart project; Remaining x% will be\\r\\n            // held throughout `lockup` period\\r\\n            if (!_locked) {\\r\\n                amount = (amount * bips) / 10000;\\r\\n                _locked = true;\\r\\n            }\\r\\n            else if (block.timestamp < unlockAt) {\\r\\n                revert WithdrawLockupActive();\\r\\n            }\\r\\n\\r\\n            _withdraw(receiver, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/niftyvs/IGenesisPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IGenesisPass {\\r\\n\\r\\n    function vote(address collection, uint256 quantity) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC2981/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport {ERC165, IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract ERC2981 is ERC165, IERC2981 {\\r\\n\\r\\n    struct RoyaltyInfo {\\r\\n        // Fee in Basis Points\\r\\n        uint256 fee;\\r\\n        address receiver;\\r\\n    }\\r\\n\\r\\n\\r\\n    RoyaltyInfo private _default;\\r\\n\\r\\n    mapping(uint256 => RoyaltyInfo) private _info;\\r\\n\\r\\n\\r\\n    constructor(address receiver, uint256 fee) {\\r\\n        _default = RoyaltyInfo({\\r\\n            fee: fee,\\r\\n            receiver: receiver\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setDefaultRoyaltyInfo(address receiver, uint256 fee) internal {\\r\\n        _default = RoyaltyInfo({\\r\\n            fee: fee,\\r\\n            receiver: receiver\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function _setRoyaltyInfo(uint256 tokenId, address receiver, uint256 fee) internal {\\r\\n        _info[tokenId] = RoyaltyInfo({\\r\\n            fee: fee,\\r\\n            receiver: receiver\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function royaltyInfo(uint256 tokenId, uint256 amount) external view override(IERC2981) returns (address, uint256) {\\r\\n        uint256 fee = _info[tokenId].fee;\\r\\n        address receiver = _info[tokenId].receiver;\\r\\n\\r\\n        if (receiver == address(0) || fee == 0) {\\r\\n            fee = _default.fee;\\r\\n            receiver = _default.receiver;\\r\\n        }\\r\\n\\r\\n        return (receiver, (amount * fee / 10000));\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) override(ERC165, IERC165) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"CallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CannotMintMoreThan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractMinterAlreadyDefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"MaxMintPerWalletWouldBeReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"MethodReceivedZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedToSendMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityWouldExceedMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"QueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleHasNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenQueryProducedVariant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WinningCollectionsFinalized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_END_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATE_BURNED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATE_MINTED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATE_TRANSFERRED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNING_VOTES_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_collections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"setContractMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenesisPass", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}