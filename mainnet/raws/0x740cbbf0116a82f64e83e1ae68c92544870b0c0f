{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ShieldsAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IShields.sol\\\";\\nimport \\\"./interfaces/IEmblemWeaver.sol\\\";\\nimport \\\"./interfaces/IFieldGenerator.sol\\\";\\nimport \\\"./interfaces/IHardwareGenerator.sol\\\";\\nimport \\\"./interfaces/IFrameGenerator.sol\\\";\\nimport \\\"./interfaces/IShieldBadgeSVGs.sol\\\";\\nimport \\\"./interfaces/IShieldsAPI.sol\\\";\\n\\ncontract ShieldsAPI is IShieldsAPI {\\n    IShields public immutable shields;\\n    IEmblemWeaver public immutable emblemWeaver;\\n    IFieldGenerator public immutable fieldGenerator;\\n    IHardwareGenerator public immutable hardwareGenerator;\\n    IFrameGenerator public immutable frameGenerator;\\n    IShieldBadgeSVGs public immutable shieldBadgeSVGGenerator;\\n\\n    constructor(IShields _shields) {\\n        shields = _shields;\\n        emblemWeaver = _shields.emblemWeaver();\\n        fieldGenerator = emblemWeaver.fieldGenerator();\\n        hardwareGenerator = emblemWeaver.hardwareGenerator();\\n        frameGenerator = emblemWeaver.frameGenerator();\\n        shieldBadgeSVGGenerator = emblemWeaver.shieldBadgeSVGGenerator();\\n    }\\n\\n    // *** Shields *** //\\n    function getShield(uint256 shieldId)\\n        public\\n        view\\n        returns (IShields.Shield memory)\\n    {\\n        (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            IShields.ShieldBadge shieldBadge\\n        ) = shields.shields(shieldId);\\n        return\\n            IShields.Shield(\\n                color1 != 0,\\n                field,\\n                hardware,\\n                frame,\\n                shieldBadge,\\n                [color1, color2, color3, color4]\\n            );\\n    }\\n\\n    function getShieldSVG(uint256 shieldId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        IShields.Shield memory shield = getShield(shieldId);\\n        if (!shield.built)\\n            return\\n                shieldBadgeSVGGenerator.generateShieldBadgeSVG(\\n                    shield.shieldBadge\\n                );\\n        else\\n            return\\n                getShieldSVG(\\n                    shield.field,\\n                    shield.colors,\\n                    shield.hardware,\\n                    shield.frame\\n                );\\n    }\\n\\n    function getShieldSVG(\\n        uint16 field,\\n        uint24[4] memory colors,\\n        uint16 hardware,\\n        uint16 frame\\n    ) public view returns (string memory) {\\n        return\\n            _wrapSVG(\\n                string(\\n                    abi.encodePacked(\\n                        getFieldSVG(field, colors),\\n                        getHardwareSVG(hardware),\\n                        getFrameSVG(frame)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function isShieldBuilt(uint256 shieldId) public view returns (bool) {\\n        return getShield(shieldId).built;\\n    }\\n\\n    // *** Fields *** //\\n    function getField(uint16 field, uint24[4] memory colors)\\n        public\\n        view\\n        returns (IFieldGenerator.FieldData memory)\\n    {\\n        return fieldGenerator.generateField(field, colors);\\n    }\\n\\n    function getFieldTitle(uint16 field, uint24[4] memory colors)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return fieldGenerator.generateField(field, colors).title;\\n    }\\n\\n    function getFieldSVG(uint16 field, uint24[4] memory colors)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _wrapSVG(fieldGenerator.generateField(field, colors).svgString);\\n    }\\n\\n    // *** Hardware *** //\\n    function getHardware(uint16 hardware)\\n        public\\n        view\\n        returns (IHardwareGenerator.HardwareData memory)\\n    {\\n        return hardwareGenerator.generateHardware(hardware);\\n    }\\n\\n    function getHardwareTitle(uint16 hardware)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return hardwareGenerator.generateHardware(hardware).title;\\n    }\\n\\n    function getHardwareSVG(uint16 hardware)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return _wrapSVG(hardwareGenerator.generateHardware(hardware).svgString);\\n    }\\n\\n    // *** Frames *** //\\n    function getFrame(uint16 frame)\\n        public\\n        view\\n        returns (IFrameGenerator.FrameData memory)\\n    {\\n        return frameGenerator.generateFrame(frame);\\n    }\\n\\n    function getFrameTitle(uint16 frame) public view returns (string memory) {\\n        return frameGenerator.generateFrame(frame).title;\\n    }\\n\\n    function getFrameSVG(uint16 frame) public view returns (string memory) {\\n        return _wrapSVG(frameGenerator.generateFrame(frame).svgString);\\n    }\\n\\n    // *** SVG *** //\\n    function _wrapSVG(string memory svg) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 220 264\\\">',\\n                    svg,\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IShieldsAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IShields.sol\\\";\\nimport \\\"./IFieldGenerator.sol\\\";\\nimport \\\"./IHardwareGenerator.sol\\\";\\nimport \\\"./IFrameGenerator.sol\\\";\\n\\ninterface IShieldsAPI {\\n    function getShield(uint256 shieldId)\\n        external\\n        view\\n        returns (IShields.Shield memory);\\n\\n    function getShieldSVG(uint256 shieldId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getShieldSVG(\\n        uint16 field,\\n        uint24[4] memory colors,\\n        uint16 hardware,\\n        uint16 frame\\n    ) external view returns (string memory);\\n\\n    function isShieldBuilt(uint256 shieldId) external view returns (bool);\\n\\n    function getField(uint16 field, uint24[4] memory colors)\\n        external\\n        view\\n        returns (IFieldGenerator.FieldData memory);\\n\\n    function getFieldTitle(uint16 field, uint24[4] memory colors)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getFieldSVG(uint16 field, uint24[4] memory colors)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getHardware(uint16 hardware)\\n        external\\n        view\\n        returns (IHardwareGenerator.HardwareData memory);\\n\\n    function getHardwareTitle(uint16 hardware)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getHardwareSVG(uint16 hardware)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getFrame(uint16 frame)\\n        external\\n        view\\n        returns (IFrameGenerator.FrameData memory);\\n\\n    function getFrameTitle(uint16 frame) external view returns (string memory);\\n\\n    function getFrameSVG(uint16 frame) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IShieldBadgeSVGs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IShields.sol\\\";\\n\\ninterface IShieldBadgeSVGs {\\n    function generateShieldBadgeSVG(IShields.ShieldBadge shieldBadge)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IFrameGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IFrameGenerator {\\n    struct FrameData {\\n        string title;\\n        uint256 fee;\\n        string svgString;\\n    }\\n\\n    function generateFrame(uint16 Frame)\\n        external\\n        view\\n        returns (FrameData memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IHardwareGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IHardwareGenerator {\\n    enum HardwareCategories {\\n        STANDARD,\\n        SPECIAL\\n    }\\n    struct HardwareData {\\n        string title;\\n        HardwareCategories hardwareType;\\n        string svgString;\\n    }\\n\\n    function generateHardware(uint16 hardware)\\n        external\\n        view\\n        returns (HardwareData memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IFieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface IFieldGenerator {\\n    enum FieldCategories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n    struct FieldData {\\n        string title;\\n        FieldCategories fieldType;\\n        string svgString;\\n    }\\n\\n    function generateField(uint16 field, uint24[4] memory colors)\\n        external\\n        view\\n        returns (FieldData memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IEmblemWeaver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IShields.sol\\\";\\nimport \\\"./IFrameGenerator.sol\\\";\\nimport \\\"./IFieldGenerator.sol\\\";\\nimport \\\"./IHardwareGenerator.sol\\\";\\nimport \\\"./IShieldBadgeSVGs.sol\\\";\\n\\ninterface IEmblemWeaver {\\n    function fieldGenerator() external returns (IFieldGenerator);\\n\\n    function hardwareGenerator() external returns (IHardwareGenerator);\\n\\n    function frameGenerator() external returns (IFrameGenerator);\\n\\n    function shieldBadgeSVGGenerator() external returns (IShieldBadgeSVGs);\\n\\n    function generateShieldURI(IShields.Shield memory shield)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function generateShieldBadgeURI(IShields.ShieldBadge shieldBadge)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/IShields.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: The Unlicense\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IEmblemWeaver.sol\\\";\\n\\ninterface IShields {\\n    enum ShieldBadge {\\n        MAKER,\\n        STANDARD\\n    }\\n\\n    struct Shield {\\n        bool built;\\n        uint16 field;\\n        uint16 hardware;\\n        uint16 frame;\\n        ShieldBadge shieldBadge;\\n        uint24[4] colors;\\n    }\\n\\n    function emblemWeaver() external view returns (IEmblemWeaver);\\n\\n    function shields(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            ShieldBadge shieldBadge\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IShields\",\"name\":\"_shields\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"emblemWeaver\",\"outputs\":[{\"internalType\":\"contract IEmblemWeaver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fieldGenerator\",\"outputs\":[{\"internalType\":\"contract IFieldGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frameGenerator\",\"outputs\":[{\"internalType\":\"contract IFrameGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"name\":\"getField\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"enum IFieldGenerator.FieldCategories\",\"name\":\"fieldType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"internalType\":\"struct IFieldGenerator.FieldData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"name\":\"getFieldSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"name\":\"getFieldTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"}],\"name\":\"getFrame\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"internalType\":\"struct IFrameGenerator.FrameData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"}],\"name\":\"getFrameSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"}],\"name\":\"getFrameTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"}],\"name\":\"getHardware\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"enum IHardwareGenerator.HardwareCategories\",\"name\":\"hardwareType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"internalType\":\"struct IHardwareGenerator.HardwareData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"}],\"name\":\"getHardwareSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"}],\"name\":\"getHardwareTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shieldId\",\"type\":\"uint256\"}],\"name\":\"getShield\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"built\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"internalType\":\"enum IShields.ShieldBadge\",\"name\":\"shieldBadge\",\"type\":\"uint8\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"internalType\":\"struct IShields.Shield\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shieldId\",\"type\":\"uint256\"}],\"name\":\"getShieldSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"}],\"name\":\"getShieldSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardwareGenerator\",\"outputs\":[{\"internalType\":\"contract IHardwareGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shieldId\",\"type\":\"uint256\"}],\"name\":\"isShieldBuilt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldBadgeSVGGenerator\",\"outputs\":[{\"internalType\":\"contract IShieldBadgeSVGs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shields\",\"outputs\":[{\"internalType\":\"contract IShields\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShieldsAPI", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000747118c9f44c7a23365b2476dcd05e03114c747", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}