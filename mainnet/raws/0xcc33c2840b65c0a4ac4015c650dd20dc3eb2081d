{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vault-managers/parameters/AssetsBooleanParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"../../Auth2.sol\\\";\\r\\nimport \\\"../../interfaces/vault-managers/parameters/IAssetsBooleanParameters.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title AssetsBooleanParameters\\r\\n **/\\r\\ncontract AssetsBooleanParameters is Auth2, IAssetsBooleanParameters {\\r\\n\\r\\n    mapping(address => uint256) internal values;\\r\\n\\r\\n    constructor(address _vaultParameters, address[] memory _initialAssets, uint8[] memory _initialParams) Auth2(_vaultParameters) {\\r\\n        require(_initialAssets.length == _initialParams.length, \\\"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\\\");\\r\\n\\r\\n        for (uint i = 0; i < _initialAssets.length; i++) {\\r\\n            _set(_initialAssets[i], _initialParams[i], true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get value of _param for _asset\\r\\n     * @dev see ParametersConstants\\r\\n     **/\\r\\n    function get(address _asset, uint8 _param) external override view returns (bool) {\\r\\n        return values[_asset] & (1 << _param) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get values of all params for _asset. The 0th bit of returned uint id the value of param=0, etc\\r\\n     **/\\r\\n    function getAll(address _asset) external override view returns (uint256) {\\r\\n        return values[_asset];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set value of _param for _asset\\r\\n     * @dev see ParametersConstants\\r\\n     **/\\r\\n    function set(address _asset, uint8 _param, bool _value) public override onlyManager {\\r\\n        _set(_asset, _param, _value);\\r\\n    }\\r\\n\\r\\n    function _set(address _asset, uint8 _param, bool _value) internal {\\r\\n        require(_asset != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        if (_value) {\\r\\n            values[_asset] |= (1 << _param);\\r\\n            emit ValueSet(_asset, _param, values[_asset]);\\r\\n        } else {\\r\\n            values[_asset] &= ~(1 << _param);\\r\\n            emit ValueUnset(_asset, _param, values[_asset]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Auth2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./VaultParameters.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Auth2\\r\\n * @dev Manages USDP's system access\\r\\n * @dev copy of Auth from VaultParameters.sol but with immutable vaultParameters for saving gas\\r\\n **/\\r\\ncontract Auth2 {\\r\\n\\r\\n    // address of the the contract with vault parameters\\r\\n    VaultParameters public immutable vaultParameters;\\r\\n\\r\\n    constructor(address _parameters) {\\r\\n        require(_parameters != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vaultParameters = VaultParameters(_parameters);\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is a manager\\r\\n    modifier onlyManager() {\\r\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is able to modify the Vault\\r\\n    modifier hasVaultAccess() {\\r\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is the Vault\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IAssetsBooleanParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ninterface IAssetsBooleanParameters {\\r\\n\\r\\n    event ValueSet(address indexed asset, uint8 param, uint256 valuesForAsset);\\r\\n    event ValueUnset(address indexed asset, uint8 param, uint256 valuesForAsset);\\r\\n\\r\\n    function get(address _asset, uint8 _param) external view returns (bool);\\r\\n    function getAll(address _asset) external view returns (uint256);\\r\\n    function set(address _asset, uint8 _param, bool _value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/VaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n\\n/**\\n * @title Auth\\n * @dev Manages USDP's system access\\n **/\\ncontract Auth {\\n\\n    // address of the the contract with vault parameters\\n    VaultParameters public vaultParameters;\\n\\n    constructor(address _parameters) {\\n        vaultParameters = VaultParameters(_parameters);\\n    }\\n\\n    // ensures tx's sender is a manager\\n    modifier onlyManager() {\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is able to modify the Vault\\n    modifier hasVaultAccess() {\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is the Vault\\n    modifier onlyVault() {\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\\n\\n\\n/**\\n * @title VaultParameters\\n **/\\ncontract VaultParameters is Auth {\\n\\n    // map token to stability fee percentage; 3 decimals\\n    mapping(address => uint) public stabilityFee;\\n\\n    // map token to liquidation fee percentage, 0 decimals\\n    mapping(address => uint) public liquidationFee;\\n\\n    // map token to USDP mint limit\\n    mapping(address => uint) public tokenDebtLimit;\\n\\n    // permissions to modify the Vault\\n    mapping(address => bool) public canModifyVault;\\n\\n    // managers\\n    mapping(address => bool) public isManager;\\n\\n    // enabled oracle types\\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\\n\\n    // address of the Vault\\n    address payable public vault;\\n\\n    // The foundation address\\n    address public foundation;\\n\\n    /**\\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\\n     * hashed with Keccak-256.\\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\\n    **/\\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        isManager[msg.sender] = true;\\n        vault = _vault;\\n        foundation = _foundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Grants and revokes manager's status of any address\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setManager(address who, bool permit) external onlyManager {\\n        isManager[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the foundation address\\n     * @param newFoundation The new foundation address\\n     **/\\n    function setFoundation(address newFoundation) external onlyManager {\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        foundation = newFoundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets ability to use token as the main collateral\\n     * @param asset The address of the main collateral token\\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\\n     * @param usdpLimit The USDP token issue limit\\n     * @param oracles The enables oracle types\\n     **/\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValue,\\n        uint liquidationFeeValue,\\n        uint usdpLimit,\\n        uint[] calldata oracles\\n    ) external onlyManager {\\n        setStabilityFee(asset, stabilityFeeValue);\\n        setLiquidationFee(asset, liquidationFeeValue);\\n        setTokenDebtLimit(asset, usdpLimit);\\n        for (uint i=0; i < oracles.length; i++) {\\n            setOracleType(oracles[i], asset, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a permission for an address to modify the Vault\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setVaultAccess(address who, bool permit) external onlyManager {\\n        canModifyVault[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the year stability fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The stability fee percentage (3 decimals)\\n     **/\\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\\n        stabilityFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation fee percentage (0 decimals)\\n     **/\\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\n        liquidationFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Enables/disables oracle types\\n     * @param _type The type of the oracle\\n     * @param asset The address of the main collateral token\\n     * @param enabled The control flag\\n     **/\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\\n        isOracleTypeEnabled[_type][asset] = enabled;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets USDP limit for a specific collateral\\n     * @param asset The address of the main collateral token\\n     * @param limit The limit number\\n     **/\\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\\n        tokenDebtLimit[asset] = limit;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_initialParams\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"param\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuesForAsset\",\"type\":\"uint256\"}],\"name\":\"ValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"param\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuesForAsset\",\"type\":\"uint256\"}],\"name\":\"ValueUnset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_param\",\"type\":\"uint8\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_param\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssetsBooleanParameters", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}