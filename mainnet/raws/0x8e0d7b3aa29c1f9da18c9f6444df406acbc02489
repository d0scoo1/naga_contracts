{"status": "1", "message": "OK", "result": [{"SourceCode": "// File openzeppelin-contracts-upgradable-v4/utils/cryptography/MerkleProofUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProofUpgradeable {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n// File openzeppelin-contracts-upgradable-v4/proxy/utils/Initializable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File openzeppelin-contracts-upgradable-v4/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File openzeppelin-contracts-upgradable-v4/access/OwnableUpgradeable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File contracts/Interfaces/IMerkleTreeDistributor.sol\r\n\r\npragma solidity =0.8.6;\r\n\r\n// Allows anyone to claim a token if they exist in a merkle root.\r\ninterface IMerkleTreeDistributor {\r\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\r\n    function merkleRoot() external view returns (bytes32);\r\n\r\n    // Returns true if the index has been marked claimed.\r\n    function isClaimed(uint256 index) external view returns (bool);\r\n\r\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\r\n    function claim(\r\n        uint256 index,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external;\r\n\r\n    // Claim the given amount of the token to the given address to a specific recipient. Reverts if the inputs are invalid.\r\n    function claimTo(\r\n        uint256 index,\r\n        address account,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external;\r\n\r\n    // This event is triggered whenever a call to #claim succeeds.\r\n    event Claimed(\r\n        uint256 index,\r\n        address account,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\n// File contracts/Interfaces/IDistro.sol\r\n\r\npragma solidity =0.8.6;\r\n\r\ninterface IDistro {\r\n    /**\r\n     * @dev Emitted when someone makes a claim of tokens\r\n     */\r\n    event Claim(address indexed grantee, uint256 amount);\r\n    /**\r\n     * @dev Emitted when the DISTRIBUTOR allocate an amount to a grantee\r\n     */\r\n    event Allocate(\r\n        address indexed distributor,\r\n        address indexed grantee,\r\n        uint256 amount\r\n    );\r\n    /**\r\n     * @dev Emitted when the DEFAULT_ADMIN assign an amount to a DISTRIBUTOR\r\n     */\r\n    event Assign(\r\n        address indexed admin,\r\n        address indexed distributor,\r\n        uint256 amount\r\n    );\r\n    /**\r\n     * @dev Emitted when someone change their reception address\r\n     */\r\n    event ChangeAddress(address indexed oldAddress, address indexed newAddress);\r\n\r\n    /**\r\n     * @dev Emitted when a new startTime is set\r\n     */\r\n    event StartTimeChanged(uint256 newStartTime, uint256 newCliffTime);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens will be streamed\r\n     */\r\n    function totalTokens() external view returns (uint256);\r\n\r\n    /**\r\n     * Function that allows the DEFAULT_ADMIN_ROLE to assign set a new startTime if it hasn't started yet\r\n     * @param newStartTime new startTime\r\n     *\r\n     * Emits a {StartTimeChanged} event.\r\n     *\r\n     */\r\n    function setStartTime(uint256 newStartTime) external;\r\n\r\n    /**\r\n     * Function that allows the DEFAULT_ADMIN_ROLE to assign tokens to an address who later can distribute them.\r\n     * @dev It is required that the DISTRIBUTOR_ROLE is already held by the address to which an amount will be assigned\r\n     * @param distributor the address, generally a smart contract, that will determine who gets how many tokens\r\n     * @param amount Total amount of tokens to assign to that address for distributing\r\n     */\r\n    function assign(address distributor, uint256 amount) external;\r\n\r\n    /**\r\n     * Function to claim tokens for a specific address. It uses the current timestamp\r\n     */\r\n    function claim() external;\r\n\r\n    /**\r\n     * Function that allows to the distributor address to allocate some amount of tokens to a specific recipient\r\n     * @dev Needs to be initialized: Nobody has the DEFAULT_ADMIN_ROLE and all available tokens have been assigned\r\n     * @param recipient of token allocation\r\n     * @param amount allocated amount\r\n     * @param claim whether claim after allocate\r\n     */\r\n    function allocate(\r\n        address recipient,\r\n        uint256 amount,\r\n        bool claim\r\n    ) external;\r\n\r\n    /**\r\n     * Function that allows to the distributor address to allocate some amounts of tokens to specific recipients\r\n     * @dev Needs to be initialized: Nobody has the DEFAULT_ADMIN_ROLE and all available tokens have been assigned\r\n     * @param recipients of token allocation\r\n     * @param amounts allocated amount\r\n     */\r\n    function allocateMany(address[] memory recipients, uint256[] memory amounts)\r\n        external;\r\n\r\n    function sendGIVbacks(address[] memory recipients, uint256[] memory amounts)\r\n        external;\r\n\r\n    /**\r\n     * Function that allows a recipient to change its address\r\n     * @dev The change can only be made to an address that has not previously received an allocation &\r\n     * the distributor cannot change its address\r\n     */\r\n    function changeAddress(address newAddress) external;\r\n\r\n    /**\r\n     * Function to get the current timestamp from the block\r\n     */\r\n    function getTimestamp() external view returns (uint256);\r\n\r\n    /**\r\n     * Function to get the total unlocked tokes at some moment\r\n     */\r\n    function globallyClaimableAt(uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function to get the unlocked tokes at some moment for a specific address\r\n     */\r\n    function claimableAt(address recipient, uint256 timestamp)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function to get the unlocked tokens for a specific address. It uses the current timestamp\r\n     */\r\n    function claimableNow(address recipient) external view returns (uint256);\r\n\r\n    function cancelAllocation(address prevRecipient, address newRecipient)\r\n        external;\r\n}\r\n\r\n// File contracts/Distributors/MerkleDistro.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.8.6;\r\n\r\n// Based on: https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol\r\n/*\r\n * Changelog:\r\n *      * Added SPDX-License-Identifier\r\n *      * Update to solidity ^0.8.0\r\n *      * Update openzeppelin imports\r\n *      * Make it upgradable\r\n *      * Add claimTo function that allows the owner to claim on behalf of someone\r\n *      * Use tokenDistro.allocate instead of token transfer\r\n */\r\n\r\ncontract MerkleDistro is\r\n    IMerkleTreeDistributor,\r\n    Initializable,\r\n    OwnableUpgradeable\r\n{\r\n    IDistro public tokenDistro;\r\n    bytes32 public override merkleRoot;\r\n\r\n    // This is a packed array of booleans.\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n    function initialize(IDistro _tokenDistro, bytes32 _merkleRoot)\r\n        public\r\n        initializer\r\n    {\r\n        __Ownable_init();\r\n        tokenDistro = _tokenDistro;\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function isClaimed(uint256 index) public view override returns (bool) {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n        uint256 mask = (1 << claimedBitIndex);\r\n        return claimedWord & mask == mask;\r\n    }\r\n\r\n    function _setClaimed(uint256 index) private {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        claimedBitMap[claimedWordIndex] =\r\n            claimedBitMap[claimedWordIndex] |\r\n            (1 << claimedBitIndex);\r\n    }\r\n\r\n    function claim(\r\n        uint256 index,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external override {\r\n        require(!isClaimed(index), \"MerkleDistro::claim Drop already claimed.\");\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, msg.sender, amount));\r\n        require(\r\n            MerkleProofUpgradeable.verify(merkleProof, merkleRoot, node),\r\n            \"MerkleDistro::claim Invalid proof.\"\r\n        );\r\n\r\n        // Mark it claimed and allocate the tokens\r\n        _setClaimed(index);\r\n        tokenDistro.allocate(msg.sender, amount, true);\r\n\r\n        emit Claimed(index, msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n        This function allows to the owner to claim tokens in behalf of another to a different address\r\n        It is intended for those cases in which the owner knows that the recipient is no longer in possession of the account.\r\n     */\r\n    function claimTo(\r\n        uint256 index,\r\n        address account,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external override onlyOwner {\r\n        require(!isClaimed(index), \"MerkleDistro::claim Drop already claimed.\");\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\r\n        require(\r\n            MerkleProofUpgradeable.verify(merkleProof, merkleRoot, node),\r\n            \"MerkleDistro::claim Invalid proof.\"\r\n        );\r\n\r\n        // Mark it claimed and allocate the tokens\r\n        _setClaimed(index);\r\n        tokenDistro.allocate(recipient, amount, true);\r\n\r\n        emit Claimed(index, account, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDistro\",\"name\":\"_tokenDistro\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistro\",\"outputs\":[{\"internalType\":\"contract IDistro\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerkleDistro", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24ee3a6a17d1c7af4ee3ef9e43f73287262f1e5709de13a2660fe315589b4698"}]}