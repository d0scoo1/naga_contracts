{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OKPCMetadata.sol\": {\r\n      \"content\": \"/*\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588       \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588          \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588          \u2588\u2588   \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588          \u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588          \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588\u2588\u2588                                        \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591             \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n*/\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport {Base64} from './lib/Base64.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@divergencetech/ethier/contracts/utils/DynamicBuffer.sol';\\nimport {IOKPC} from './interfaces/IOKPC.sol';\\nimport {OKPCParts} from './OKPCParts.sol';\\nimport {IOKPCFont} from './interfaces/IOKPCFont.sol';\\nimport {IOKPCMetadata} from './interfaces/IOKPCMetadata.sol';\\nimport {IOKPCGenesisArtwork} from './interfaces/IOKPCGenesisArtwork.sol';\\nimport {ENSNameResolver} from './lib/ENSNameResolver.sol';\\n\\ncontract OKPCMetadata is IOKPCMetadata, Ownable, ENSNameResolver {\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   CONFIG                                   */\\n  /* -------------------------------------------------------------------------- */\\n  using DynamicBuffer for bytes;\\n  string public FALLBACK_URL = 'https://okpc.app/api/okpc/';\\n  string public DESCRIPTION_URL = 'https://okpc.app/gallery/';\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   STORAGE                                  */\\n  /* -------------------------------------------------------------------------- */\\n  IOKPC private _okpc;\\n  OKPCParts private _parts;\\n  IOKPCFont private _font;\\n  IOKPCGenesisArtwork private _genesisArtwork;\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               INITIALIZATION                               */\\n  /* -------------------------------------------------------------------------- */\\n  constructor(\\n    address okpcAddress,\\n    address partsAddress,\\n    address fontAddress,\\n    address genesisArtworkAddress\\n  ) {\\n    _okpc = IOKPC(okpcAddress);\\n    _parts = OKPCParts(partsAddress);\\n    _font = IOKPCFont(fontAddress);\\n    _genesisArtwork = IOKPCGenesisArtwork(genesisArtworkAddress);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                    ADMIN                                   */\\n  /* -------------------------------------------------------------------------- */\\n  /// @notice Allows the owner to update the Parts address.\\n  /// @param partsAddress The new Parts contract to use for the renderer. Must conform to IOKPCParts.\\n  function setParts(address partsAddress) public onlyOwner {\\n    _parts = OKPCParts(partsAddress);\\n  }\\n\\n  /// @notice Allows the owner to update the Fonts address.\\n  /// @param fontAddress The new Fonts address to use for the renderer. Must conform to IOKPCFont.\\n  function setFont(address fontAddress) public onlyOwner {\\n    _font = IOKPCFont(fontAddress);\\n  }\\n\\n  /// @notice Allows the owner to update the Genesis Artwork address.\\n  /// @param genesisArtworkAddress The new Genesis Artwork address to use for the renderer. Must conform to IOKPCGenesisArtwork.\\n  function setGenesisArtworkAddress(address genesisArtworkAddress)\\n    public\\n    onlyOwner\\n  {\\n    _genesisArtwork = IOKPCGenesisArtwork(genesisArtworkAddress);\\n  }\\n\\n  /// @notice Allows the owner to update the fallback / off-chain metadata address.\\n  /// @param url The new off-chain metadata url base to use. The tokenId will be appended to this url.\\n  function setFallbackURL(string memory url) public onlyOwner {\\n    FALLBACK_URL = url;\\n  }\\n\\n  /// @notice Allows the owner to update the description url.\\n  /// @param url The url base to the use for the artist links in the token description. The full address will be appended to this url.\\n  function setDescriptionURL(string memory url) public onlyOwner {\\n    DESCRIPTION_URL = url;\\n  }\\n\\n  /// @notice Gets the TokenURI for a specified OKPC given params\\n  /// @param tokenId The tokenId of the OKPC\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    if (tokenId < 1 || tokenId > 8192) revert InvalidTokenID();\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          _getMetadataJSON(tokenId)\\n        )\\n      );\\n  }\\n\\n  function _getMetadataJSON(uint256 tokenId)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    Parts memory parts = getParts(tokenId);\\n    uint256 artId = _okpc.activeArtForOKPC(tokenId);\\n    uint256 clockSpeed = _okpc.clockSpeed(tokenId);\\n    uint256 artCollected = _okpc.artCountForOKPC(tokenId);\\n    bool useOffChainRenderer = _okpc.useOffchainMetadata(tokenId);\\n\\n    bool isCustomArt = artId == 0;\\n    IOKPC.Art memory art = isCustomArt\\n      ? _okpc.getPaintArt(tokenId)\\n      : _okpc.getGalleryArt(artId);\\n\\n    bytes memory artData = abi.encodePacked(art.data1, art.data2);\\n    if (artData.length < 56) revert NotEnoughPixelData();\\n\\n    (, IOKPC.Art memory shippedWithArt) = _genesisArtwork.getGenesisArtwork(\\n      tokenId\\n    );\\n\\n    return\\n      Base64.encode(\\n        abi.encodePacked(\\n          _getMetadataHeader(tokenId, parts, art),\\n          useOffChainRenderer\\n            ? abi.encodePacked(FALLBACK_URL, toString(tokenId), '/img')\\n            : abi.encodePacked(\\n              'data:image/svg+xml;base64,',\\n              drawOKPC(clockSpeed, artData, parts)\\n            ),\\n          '\\\", \\\"attributes\\\": ',\\n          _getAttributes(\\n            parts,\\n            clockSpeed,\\n            artCollected,\\n            art,\\n            shippedWithArt,\\n            useOffChainRenderer,\\n            isCustomArt\\n          ),\\n          '}'\\n        )\\n      );\\n  }\\n\\n  /// @notice Returns the SVG of the specified art in the specified color\\n  /// @param art The byte data for the artwork to render\\n  /// @param colorIndex The color to use for the art. Accepts values between 0 and 5;\\n  function renderArt(bytes memory art, uint256 colorIndex)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    // get svg\\n    OKPCParts.Color memory color = _parts.getColor(colorIndex);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg viewBox=\\\"0 0 24 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\" height=\\\"512\\\" width=\\\"512\\\" fill=\\\"#',\\n          color.dark,\\n          '\\\"><rect width=\\\"24\\\" height=\\\"16\\\" fill=\\\"#',\\n          color.light,\\n          '\\\"/>',\\n          drawArt(art),\\n          '</svg>'\\n        )\\n      );\\n  }\\n\\n  /// @notice Gets the proper parts for a given OKPC TokenID\\n  function getParts(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (Parts memory)\\n  {\\n    if (tokenId < 1 || tokenId > 8192) revert InvalidTokenID();\\n    Parts memory parts;\\n\\n    if (tokenId <= 128) {\\n      parts.color = _parts.getColor((tokenId - 1) % _parts.NUM_COLORS());\\n      parts.word = _parts.getWord(tokenId - 1);\\n    } else {\\n      parts.color = _parts.getColor(\\n        uint256(keccak256(abi.encodePacked('COLOR', tokenId))) %\\n          _parts.NUM_COLORS()\\n      );\\n      parts.word = _parts.getWord(\\n        uint256(keccak256(abi.encodePacked('WORD', tokenId))) %\\n          _parts.NUM_WORDS()\\n      );\\n    }\\n\\n    parts.headband = _parts.getHeadband(\\n      uint256(keccak256(abi.encodePacked('HEADBAND', tokenId))) %\\n        _parts.NUM_HEADBANDS()\\n    );\\n    parts.rightSpeaker = _parts.getSpeaker(\\n      uint256(keccak256(abi.encodePacked('RIGHT SPEAKER', tokenId))) %\\n        _parts.NUM_SPEAKERS()\\n    );\\n    parts.leftSpeaker = _parts.getSpeaker(\\n      uint256(keccak256(abi.encodePacked('LEFT SPEAKER', tokenId))) %\\n        _parts.NUM_SPEAKERS()\\n    );\\n\\n    return parts;\\n  }\\n\\n  /// @notice Gets the SVG Base64 encoded for a specified OKPC\\n  /// @param tokenId The tokenId of the OKPC to draw\\n  function drawOKPC(uint256 tokenId) public view returns (string memory) {\\n    uint256 artId = _okpc.activeArtForOKPC(tokenId);\\n    uint256 clockSpeed = _okpc.clockSpeed(tokenId);\\n    bool isCustomArt = artId == 0;\\n    IOKPC.Art memory art = isCustomArt\\n      ? _okpc.getPaintArt(tokenId)\\n      : _okpc.getGalleryArt(artId);\\n    bytes memory artData = abi.encodePacked(art.data1, art.data2);\\n\\n    if (artData.length < 56) revert NotEnoughPixelData();\\n    Parts memory parts = getParts(tokenId);\\n\\n    return drawOKPC(clockSpeed, artData, parts);\\n  }\\n\\n  /// @notice Renders the SVG for a given configuration.\\n  /// @param speed The clockspeed of the OKPC to draw\\n  /// @param art The artwork to draw on the OKPC's screen\\n  /// @param parts The parts of the OKPC (headband, speaker, etc)\\n  function drawOKPC(\\n    uint256 speed,\\n    bytes memory art,\\n    Parts memory parts\\n  ) public view returns (string memory) {\\n    bytes memory svg = abi.encodePacked(\\n      abi.encodePacked(\\n        '<svg viewBox=\\\"0 0 32 32\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\" fill=\\\"#',\\n        parts.color.dark,\\n        '\\\" height=\\\"512\\\" width=\\\"512\\\"><rect width=\\\"32\\\" height=\\\"32\\\" fill=\\\"#',\\n        parts.color.regular,\\n        '\\\"/><rect x=\\\"4\\\" y=\\\"8\\\" width=\\\"24\\\" height=\\\"16\\\" fill=\\\"#',\\n        parts.color.light,\\n        '\\\"/><rect width=\\\"32\\\" height=\\\"1\\\" x=\\\"0\\\" y=\\\"5\\\" /><rect width=\\\"32\\\" height=\\\"1\\\" x=\\\"0\\\" y=\\\"26\\\" /><path transform=\\\"translate(1,1)\\\" d=\\\"',\\n        parts.headband.data,\\n        '\\\"/><path transform=\\\"translate(1, 8)\\\" d=\\\"',\\n        parts.leftSpeaker.data,\\n        '\\\"/><path transform=\\\"translate(31, 8) scale(-1,1)\\\" d=\\\"',\\n        parts.rightSpeaker.data,\\n        '\\\"/><g transform=\\\"translate(4, 8)\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\">'\\n      ),\\n      drawArt(art),\\n      '</g>',\\n      _drawWord(parts.word),\\n      '<g transform=\\\"translate(19, 28)\\\">',\\n      _drawClockSpeed(speed, parts),\\n      '</g></svg>'\\n    );\\n\\n    return Base64.encode(svg);\\n  }\\n\\n  /// @notice Returns the SVG rects for artData.\\n  /// @param artData The data to draw as bytes.\\n  function drawArt(bytes memory artData)\\n    public\\n    pure\\n    override\\n    returns (string memory)\\n  {\\n    bytes memory rects = DynamicBuffer.allocate(2**16); // Allocate 64KB of memory, we will not use this much, but it's safe.\\n    uint256 offset = 8;\\n\\n    // render 8 pixels at a time\\n    for (uint256 pixelNum = 0; pixelNum < 384; pixelNum += 8) {\\n      uint8 workingByte = uint8(artData[offset + (pixelNum / 8)]);\\n      uint256 y = uint256(pixelNum / 24);\\n      uint256 x = uint256(pixelNum % 24);\\n\\n      for (uint256 i; i < 8; i++) {\\n        // if the pixel is a 1, draw it\\n        if ((workingByte >> (7 - i)) & 1 == 1) {\\n          rects.appendSafe(\\n            abi.encodePacked(\\n              '<rect width=\\\"1\\\" height=\\\"1\\\" x=\\\"',\\n              toString(x + i),\\n              '\\\" y=\\\"',\\n              toString(y),\\n              '\\\"/>'\\n            )\\n          );\\n        }\\n      }\\n    }\\n\\n    return string(rects);\\n  }\\n\\n  /// @notice Renders the SVG path for an OKPC Word.\\n  function _drawWord(string memory word) internal view returns (bytes memory) {\\n    bytes memory wordBytes = bytes(word);\\n    bytes memory path;\\n\\n    for (uint256 i; i < wordBytes.length; i++) {\\n      if (wordBytes[i] != 0x0) {\\n        path = abi.encodePacked(\\n          path,\\n          '<path clip-rule=\\\"evenodd\\\" fill-rule=\\\"evenodd\\\" transform=\\\"translate(',\\n          toString(2 + i * 4),\\n          ',28)\\\" d=\\\"',\\n          _font.getChar(wordBytes[i]),\\n          '\\\"/>'\\n        );\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return path;\\n  }\\n\\n  function _drawClockSpeed(uint256 speed, Parts memory parts)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory clockSpeedPixels = DynamicBuffer.allocate(2**16); // Allocate 64KB of memory, we will not use this much, but it's safe.\\n    bytes6 color;\\n\\n    for (uint256 i; i < 12; i++) {\\n      uint256 x = 10 - ((i / 2) * 2);\\n      uint256 y = (i % 2 == 0) ? 2 : 0;\\n      if (i < speed / 128) color = parts.color.light;\\n      else color = parts.color.dark;\\n\\n      clockSpeedPixels.appendSafe(\\n        abi.encodePacked(\\n          '<rect width=\\\"1\\\" height=\\\"1\\\" x=\\\"',\\n          toString(x),\\n          '\\\" y=\\\"',\\n          toString(y),\\n          '\\\" fill=\\\"#',\\n          color,\\n          '\\\"/>'\\n        )\\n      );\\n    }\\n\\n    return clockSpeedPixels;\\n  }\\n\\n  function _getMetadataHeader(\\n    uint256 tokenId,\\n    Parts memory parts,\\n    IOKPC.Art memory art\\n  ) internal view returns (bytes memory) {\\n    string memory artistENS = ENSNameResolver.getENSName(art.artist);\\n    return\\n      abi.encodePacked(\\n        '{\\\"name\\\": \\\"OKPC #',\\n        toString(tokenId),\\n        '\\\", \\\"description\\\": \\\"A ',\\n        parts.color.name,\\n        \\\" OKPC displaying '\\\",\\n        bytes16ToString(art.title),\\n        \\\"' by [\\\",\\n        bytes(artistENS).length > 0\\n          ? artistENS\\n          : string(abi.encodePacked('0x', toAsciiString(art.artist))),\\n        '](',\\n        DESCRIPTION_URL,\\n        string(abi.encodePacked('0x', toAsciiString(art.artist))),\\n        ')\\\", \\\"image\\\": \\\"'\\n      );\\n  }\\n\\n  function _getAttributes(\\n    Parts memory parts,\\n    uint256 speed,\\n    uint256 artCollected,\\n    IOKPC.Art memory art,\\n    IOKPC.Art memory shippedWithArt,\\n    bool isFallbackRenderer,\\n    bool isCustomArt\\n  ) internal view returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        _getAttributeSet1(parts, speed, artCollected),\\n        _getAttributeSet2(art, shippedWithArt, isFallbackRenderer, isCustomArt)\\n      );\\n  }\\n\\n  function _getAttributeSet1(\\n    Parts memory parts,\\n    uint256 speed,\\n    uint256 artCollected\\n  ) internal pure returns (bytes memory) {\\n    // if word is 200% change it to 200 Percent to avoid OpenSea bug\\n    string memory word = parts.word;\\n    if (keccak256(abi.encodePacked(word)) == keccak256('200%'))\\n      word = string(abi.encodePacked('200', '\\\\xEF\\\\xBC\\\\x85'));\\n\\n    return\\n      abi.encodePacked(\\n        '[{\\\"trait_type\\\":\\\"Art Collected\\\", \\\"value\\\": ',\\n        toString(artCollected),\\n        '}, {\\\"trait_type\\\":\\\"Word\\\", \\\"value\\\": \\\"',\\n        word,\\n        '\\\"}, {\\\"trait_type\\\": \\\"Color\\\", \\\"value\\\": \\\"',\\n        parts.color.name,\\n        abi.encodePacked(\\n          '\\\"}, {\\\"trait_type\\\": \\\"Headband\\\", \\\"value\\\": \\\"',\\n          parts.headband.name,\\n          '\\\"}, {\\\"trait_type\\\": \\\"Right Speaker\\\", \\\"value\\\": \\\"',\\n          parts.rightSpeaker.name,\\n          '\\\"}, {\\\"trait_type\\\": \\\"Left Speaker\\\", \\\"value\\\": \\\"',\\n          parts.leftSpeaker.name,\\n          '\\\"}, {\\\"trait_type\\\": \\\"Clock Speed\\\", \\\"value\\\": \\\"',\\n          toString(speed)\\n        )\\n      );\\n  }\\n\\n  function _getAttributeSet2(\\n    IOKPC.Art memory art,\\n    IOKPC.Art memory shippedWithArt,\\n    bool isFallbackRenderer,\\n    bool isCustomArt\\n  ) internal view returns (bytes memory) {\\n    string memory artistENS = ENSNameResolver.getENSName(art.artist);\\n    string memory shippedWithENS = ENSNameResolver.getENSName(\\n      shippedWithArt.artist\\n    );\\n\\n    return\\n      abi.encodePacked(\\n        '\\\"}, {\\\"trait_type\\\": \\\"Art\\\", \\\"value\\\": \\\"',\\n        bytes16ToString(art.title),\\n        '\\\"}, {\\\"trait_type\\\": \\\"Renderer\\\", \\\"value\\\": \\\"',\\n        isFallbackRenderer ? 'Off Chain' : 'On Chain',\\n        '\\\"}, {\\\"trait_type\\\": \\\"Screen\\\", \\\"value\\\": \\\"',\\n        isCustomArt ? 'Custom Art' : 'Gallery Art',\\n        abi.encodePacked(\\n          '\\\"}, {\\\"trait_type\\\": \\\"Artist\\\", \\\"value\\\": \\\"',\\n          bytes(artistENS).length > 0\\n            ? artistENS\\n            : string(abi.encodePacked('0x', toAsciiString(art.artist))),\\n          '\\\"}, {\\\"trait_type\\\": \\\"Shipped With\\\", \\\"value\\\": \\\"',\\n          bytes16ToString(shippedWithArt.title),\\n          ' by ',\\n          bytes(shippedWithENS).length > 0\\n            ? shippedWithENS\\n            : string(\\n              abi.encodePacked('0x', toAsciiString(shippedWithArt.artist))\\n            ),\\n          '\\\"}]'\\n        )\\n      );\\n  }\\n\\n  // * UTILITIES * //\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function bytes16ToString(bytes16 x) internal pure returns (string memory) {\\n    uint256 numChars = 0;\\n\\n    for (uint256 i; i < 16; i++) {\\n      if (x[i] == bytes1(0)) break;\\n      numChars++;\\n    }\\n\\n    bytes memory result = new bytes(numChars);\\n    for (uint256 i; i < numChars; i++) result[i] = x[i];\\n\\n    return string(result);\\n  }\\n\\n  function toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint256 i; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = char(hi);\\n      s[2 * i + 1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Base64.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@divergencetech/ethier/contracts/utils/DynamicBuffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\n\\npragma solidity >=0.8.0;\\n\\n/// @title DynamicBuffer\\n/// @author David Huber (@cxkoda) and Simon Fremaux (@dievardump). See also\\n///         https://raw.githubusercontent.com/dievardump/solidity-dynamic-buffer\\n/// @notice This library is used to allocate a big amount of container memory\\n//          which will be subsequently filled without needing to reallocate\\n///         memory.\\n/// @dev First, allocate memory.\\n///      Then use `buffer.appendUnchecked(theBytes)` or `appendSafe()` if\\n///      bounds checking is required.\\nlibrary DynamicBuffer {\\n    /// @notice Allocates container space for the DynamicBuffer\\n    /// @param capacity The intended max amount of bytes in the buffer\\n    /// @return buffer The memory location of the buffer\\n    /// @dev Allocates `capacity + 0x60` bytes of space\\n    ///      The buffer array starts at the first container data position,\\n    ///      (i.e. `buffer = container + 0x20`)\\n    function allocate(uint256 capacity)\\n        internal\\n        pure\\n        returns (bytes memory buffer)\\n    {\\n        assembly {\\n            // Get next-free memory address\\n            let container := mload(0x40)\\n\\n            // Allocate memory by setting a new next-free address\\n            {\\n                // Add 2 x 32 bytes in size for the two length fields\\n                // Add 32 bytes safety space for 32B chunked copy\\n                let size := add(capacity, 0x60)\\n                let newNextFree := add(container, size)\\n                mstore(0x40, newNextFree)\\n            }\\n\\n            // Set the correct container length\\n            {\\n                let length := add(capacity, 0x40)\\n                mstore(container, length)\\n            }\\n\\n            // The buffer starts at idx 1 in the container (0 is length)\\n            buffer := add(container, 0x20)\\n\\n            // Init content with length 0\\n            mstore(buffer, 0)\\n        }\\n\\n        return buffer;\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Does not perform out-of-bound checks (container capacity)\\n    ///      for efficiency.\\n    function appendUnchecked(bytes memory buffer, bytes memory data)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            let length := mload(data)\\n            for {\\n                data := add(data, 0x20)\\n                let dataEnd := add(data, length)\\n                let copyTo := add(buffer, add(mload(buffer), 0x20))\\n            } lt(data, dataEnd) {\\n                data := add(data, 0x20)\\n                copyTo := add(copyTo, 0x20)\\n            } {\\n                // Copy 32B chunks from data to buffer.\\n                // This may read over data array boundaries and copy invalid\\n                // bytes, which doesn't matter in the end since we will\\n                // later set the correct buffer length, and have allocated an\\n                // additional word to avoid buffer overflow.\\n                mstore(copyTo, mload(data))\\n            }\\n\\n            // Update buffer length\\n            mstore(buffer, add(mload(buffer), length))\\n        }\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Performs out-of-bound checks and calls `appendUnchecked`.\\n    function appendSafe(bytes memory buffer, bytes memory data) internal pure {\\n        uint256 capacity;\\n        uint256 length;\\n        assembly {\\n            capacity := sub(mload(sub(buffer, 0x20)), 0x40)\\n            length := mload(buffer)\\n        }\\n\\n        require(\\n            length + data.length <= capacity,\\n            \\\"DynamicBuffer: Appending out of bounds.\\\"\\n        );\\n        appendUnchecked(buffer, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\ninterface IOKPC {\\n  enum Phase {\\n    INIT,\\n    EARLY_BIRDS,\\n    FRIENDS,\\n    PUBLIC\\n  }\\n  struct Art {\\n    address artist;\\n    bytes16 title;\\n    uint256 data1;\\n    uint256 data2;\\n  }\\n  struct Commission {\\n    address artist;\\n    uint256 amount;\\n  }\\n  struct ClockSpeedXP {\\n    uint256 savedSpeed;\\n    uint256 lastSaveBlock;\\n    uint256 transferCount;\\n    uint256 artLastChanged;\\n  }\\n\\n  function getPaintArt(uint256) external view returns (Art memory);\\n\\n  function getGalleryArt(uint256) external view returns (Art memory);\\n\\n  function activeArtForOKPC(uint256) external view returns (uint256);\\n\\n  function useOffchainMetadata(uint256) external view returns (bool);\\n\\n  function clockSpeed(uint256) external view returns (uint256);\\n\\n  function artCountForOKPC(uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/OKPCParts.sol\": {\r\n      \"content\": \"/*\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588       \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588  \u2588\u2588\u2588          \u2588\u2588          \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588        \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588          \u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588        \u2588\u2588          \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588               \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588       \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591             \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n*/\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\nimport {IOKPCParts} from './interfaces/IOKPCParts.sol';\\nimport '@0xsequence/sstore2/contracts/SSTORE2.sol';\\n\\ncontract OKPCParts is IOKPCParts {\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   CONFIG                                   */\\n  /* -------------------------------------------------------------------------- */\\n  uint256 public constant NUM_COLORS = 6;\\n  uint256 public constant NUM_HEADBANDS = 8;\\n  uint256 public constant NUM_SPEAKERS = 8;\\n  uint256 public constant NUM_WORDS = 128;\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   STORAGE                                  */\\n  /* -------------------------------------------------------------------------- */\\n  Color[NUM_COLORS] public colors;\\n  Vector[NUM_HEADBANDS] public headbands;\\n  Vector[NUM_SPEAKERS] public speakers;\\n  bytes4[NUM_WORDS] public words;\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               INITIALIZATION                               */\\n  /* -------------------------------------------------------------------------- */\\n  constructor() {\\n    _initColors();\\n    _initHeadbands();\\n    _initSpeakers();\\n    _initWords();\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                    PARTS                                   */\\n  /* -------------------------------------------------------------------------- */\\n  /// @notice Gets the Color by index. Accepts values between 0 and 5.\\n  function getColor(uint256 index) public view override returns (Color memory) {\\n    if (index > NUM_COLORS - 1) revert IndexOutOfBounds(index, NUM_COLORS - 1);\\n    return colors[index];\\n  }\\n\\n  /// @notice Gets the Headband by index. Accepts values between 0 and 7.\\n  function getHeadband(uint256 index)\\n    public\\n    view\\n    override\\n    returns (Vector memory)\\n  {\\n    if (index > NUM_HEADBANDS - 1)\\n      revert IndexOutOfBounds(index, NUM_HEADBANDS - 1);\\n    return headbands[index];\\n  }\\n\\n  /// @notice Gets the Speaker by index. Accepts values between 0 and 7.\\n  function getSpeaker(uint256 index)\\n    public\\n    view\\n    override\\n    returns (Vector memory)\\n  {\\n    if (index > NUM_SPEAKERS - 1)\\n      revert IndexOutOfBounds(index, NUM_SPEAKERS - 1);\\n    return speakers[index];\\n  }\\n\\n  /// @notice Gets the Word by index. Accepts values between 0 and 127.\\n  function getWord(uint256 index) public view override returns (string memory) {\\n    if (index > NUM_WORDS - 1) revert IndexOutOfBounds(index, NUM_WORDS - 1);\\n    return _toString(words[index]);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               INITIALIZATION                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Initializes the stored Colors.\\n  function _initColors() internal {\\n    // gray\\n    colors[0] = Color(\\n      bytes6('CCCCCC'),\\n      bytes6('838383'),\\n      bytes6('4D4D4D'),\\n      'Gray'\\n    );\\n    // green\\n    colors[1] = Color(\\n      bytes6('54F8B5'),\\n      bytes6('00DC82'),\\n      bytes6('037245'),\\n      'Green'\\n    );\\n    // blue\\n    colors[2] = Color(\\n      bytes6('80B3FF'),\\n      bytes6('2E82FF'),\\n      bytes6('003D99'),\\n      'Blue'\\n    );\\n    // purple\\n    colors[3] = Color(\\n      bytes6('DF99FF'),\\n      bytes6('C13CFF'),\\n      bytes6('750DA5'),\\n      'Purple'\\n    );\\n    // yellow\\n    colors[4] = Color(\\n      bytes6('FBDA9D'),\\n      bytes6('F8B73E'),\\n      bytes6('795106'),\\n      'Yellow'\\n    );\\n    // pink\\n    colors[5] = Color(\\n      bytes6('FF99D8'),\\n      bytes6('FF44B7'),\\n      bytes6('99005E'),\\n      'Pink'\\n    );\\n  }\\n\\n  /// @notice Initializes the stored Headbands.\\n  function _initHeadbands() internal {\\n    headbands[0] = Vector(\\n      'M2 3H1V0H2V2H4V3H2ZM3 0H5H6V3H5V1H3V0ZM11 0H9V1H11V3H12V0H11ZM14 0H13V3H14H16H17V0H16V2H14V0ZM19 0H21V1H19V3H18V0H19ZM27 0H25H24V3H25V1H27V0ZM20 3V2H22V0H23V3H22H20ZM26 2V3H28H29V0H28V2H26ZM8 3H10V2H8V0H7V3H8Z',\\n      'Crest'\\n    );\\n    headbands[1] = Vector(\\n      'M11 1H12V0H11V1ZM11 2H10V1H11V2ZM13 2H11V3H13V2ZM14 1H13V2H14V1ZM16 1V0H14V1H16ZM17 2H16V1H17V2ZM19 2V3H17V2H19ZM19 1H20V2H19V1ZM19 1V0H18V1H19ZM0 1H1V2H0V1ZM1 2H2V3H1V2ZM3 1V0H1V1H3ZM4 2V1H3V2H4ZM5 2H4V3H5V2ZM6 1H5V2H6V1ZM8 1V0H6V1H8ZM8 2H9V1H8V2ZM8 2H7V3H8V2ZM24 1H25V2H24V1ZM22 1V0H24V1H22ZM22 2H21V1H22V2ZM22 2H23V3H22V2ZM26 2V3H25V2H26ZM27 1V2H26V1H27ZM29 1H27V0H29V1ZM29 2V1H30V2H29ZM29 2V3H28V2H29Z',\\n      'Ornate'\\n    );\\n    headbands[2] = Vector(\\n      'M3 0H1V1H3V2H1V3H3V2H4V3H6V2H4V1H6V0H4V1H3V0ZM27 0H29V1H27V0ZM27 2V1H26V0H24V1H26V2H24V3H26V2H27ZM27 2H29V3H27V2ZM10 0H12V1H10V0ZM10 2V1H9V0H7V1H9V2H7V3H9V2H10ZM10 2H12V3H10V2ZM18 0H20V1H18V0ZM21 1H20V2H18V3H20V2H21V3H23V2H21V1ZM21 1V0H23V1H21ZM16 0H15V1H14V3H15V2H16V0Z',\\n      'Power'\\n    );\\n    headbands[3] = Vector(\\n      'M1 3H2H3V2H2V1H4V3H5H7H8V1H10V3H11H14V2V1H16V2V3H19H20V1H22V3H23H25H26V1H28V2H27V3H28H29V0H28H26H25V2H23V0H22H20H19V2H17V1H18V0H12V1H13V2H11V0H10H8H7V2H5V0H4H2H1V3Z',\\n      'Temple'\\n    );\\n    headbands[4] = Vector(\\n      'M2 1H1V0H2V1ZM2 2V1H3V2H2ZM2 2V3H1V2H2ZM28 1H29V0H28V1ZM28 2V1H27V2H28ZM28 2H29V3H28V2ZM4 1H5V2H4V3H5V2H6V1H5V0H4V1ZM25 1H26V0H25V1ZM25 2V1H24V2H25ZM25 2H26V3H25V2ZM7 1H8V2H7V3H8V2H9V1H8V0H7V1ZM22 1H23V0H22V1ZM22 2V1H21V2H22ZM22 2H23V3H22V2ZM10 1H11V2H10V3H11V2H12V1H11V0H10V1ZM16 1H14V0H16V1ZM16 2V1H17V2H16ZM14 2H16V3H14V2ZM14 2V1H13V2H14ZM19 1H20V0H19V1ZM19 2V1H18V2H19ZM19 2H20V3H19V2Z',\\n      'Wreath'\\n    );\\n    headbands[5] = Vector(\\n      'M1 1H10V0H1V1ZM12 1H13V2H14V3H16V2H17V1H18V0H16V1V2H14V1V0H12V1ZM11 3H1V2H11V3ZM29 1H20V0H29V1ZM19 3H29V2H19V3Z',\\n      'Valiant'\\n    );\\n    headbands[6] = Vector(\\n      'M2 1H3V2H2V1ZM2 1H1V2H2V3H3V2H4V1H3V0H2V1ZM6 1H7V2H6V1ZM6 1H5V2H6V3H7V2H8V1H7V0H6V1ZM11 1H10V0H11V1ZM11 2V1H12V2H11ZM10 2H11V3H10V2ZM10 2V1H9V2H10ZM28 1H27V0H28V1ZM28 2V1H29V2H28ZM27 2H28V3H27V2ZM27 2V1H26V2H27ZM24 1H23V0H24V1ZM24 2V1H25V2H24ZM23 2H24V3H23V2ZM23 2V1H22V2H23ZM20 1H19V0H20V1ZM20 2V1H21V2H20ZM19 2H20V3H19V2ZM19 2V1H18V2H19ZM16 2H14V1H16V2ZM16 2V3H17V2H16ZM16 1V0H17V1H16ZM14 1H13V0H14V1ZM14 2V3H13V2H14Z',\\n      'Tainia'\\n    );\\n    headbands[7] = Vector(\\n      'M10 0H14V1H13V2H17V1H16V0H20V1H18V2H19V3H11V2H12V1H10V0ZM3 2H5V3H1V2H2V1H1V0H9V1H8V2H10V3H6V2H7V1H3V2ZM25 2H27V1H23V2H24V3H20V2H22V1H21V0H29V1H28V2H29V3H25V2Z',\\n      'Colossus'\\n    );\\n  }\\n\\n  /// @notice Initializes the stored Speakers.\\n  function _initSpeakers() internal {\\n    speakers[0] = Vector(\\n      'M1 1H0V2H1V3H2V2H1V1ZM1 5H0V6H1V7H2V6H1V5ZM0 9H1V10H0V9ZM1 10H2V11H1V10ZM1 13H0V14H1V15H2V14H1V13Z',\\n      'Piezo'\\n    );\\n    speakers[1] = Vector(\\n      'M1 1L1 0H0V1H1ZM1 2H2V1H1V2ZM1 2H0V3H1V2ZM1 10L1 11H0V10H1ZM1 9H2V10H1L1 9ZM1 9H0V8H1L1 9ZM1 4L1 5H0V6H1L1 7H2L2 6H1L1 5H2L2 4H1ZM1 13L1 12H2L2 13H1ZM1 14L1 13H0V14H1ZM1 14H2L2 15H1L1 14Z',\\n      'Ambient'\\n    );\\n    speakers[2] = Vector(\\n      'M0 2H1V3H2L2 1H1L1 0H0V2ZM1 5H2L2 7H1V6H0V4H1L1 5ZM2 14H1L1 15H0V13H1V12H2L2 14ZM2 10L2 8H1V9H0V11H1L1 10H2Z',\\n      'Hyper'\\n    );\\n    speakers[3] = Vector(\\n      'M1 1L1 0H0V1H1ZM1 1H2V2V3H1H0V2H1V1ZM1 5L1 4H2V5H1ZM1 5L1 6H2V7H1H0V6V5H1ZM1 13H0V12H1H2V13V14H1L1 13ZM1 14L1 15H0V14H1ZM2 9V8H1H0V9V10H1V11H2V10H1V9H2Z',\\n      'Crystal'\\n    );\\n    speakers[4] = Vector(\\n      'M2 0H1V1H0V2H1V3H2V0ZM2 5H1V4H0V7H1V6H2V5ZM2 9H1V8H0V11H1V10H2V9ZM0 13H1V12H2V15H1V14H0V13Z',\\n      'Taser'\\n    );\\n    speakers[5] = Vector(\\n      'M2 0V1V2V3H0V2H1V1V0H2ZM0 4V5V6V7H2V6H1L1 5H2V4H0ZM2 10V11H0V10H1V9H0V8H2V9V10ZM0 12V13H1V14V15H2V14L2 13V12H0Z',\\n      'Buster'\\n    );\\n    speakers[6] = Vector(\\n      'M0 0V1L2 1V0H0ZM1 3V2H2V3H1ZM2 5V4H0V5H2ZM1 11V10H2V11H1ZM2 13V12H0V13H2ZM2 15V14H1V15H2ZM2 7V6H1V7H2ZM0 8V9H2V8H0Z',\\n      'Tower'\\n    );\\n    speakers[7] = Vector(\\n      'M2 1V2V3H0V2L1 2V1H2ZM1 11V10H0V9H2L2 10V11H1ZM2 14V13H0V14H1V15H2V14ZM1 5V6H0V7H2L2 6V5H1Z',\\n      'Blaster'\\n    );\\n  }\\n\\n  /// @notice Initializes the stored Words.\\n  function _initWords() internal {\\n    words = [\\n      bytes4('WAIT'),\\n      'OK',\\n      'INFO',\\n      'HELP',\\n      'WARN',\\n      'ERR',\\n      'OOF',\\n      'WHAT',\\n      'RARE',\\n      '200%',\\n      'GATO',\\n      'ABRA',\\n      'POOF',\\n      'FUN',\\n      'BYTE',\\n      'POLY',\\n      'FANG',\\n      'PAIN',\\n      'BOOT',\\n      'DRAW',\\n      'MINT',\\n      'WORM',\\n      'PUP',\\n      'PLUS',\\n      'DOC',\\n      'QUIT',\\n      'BEAT',\\n      'MIDI',\\n      'UPUP',\\n      'HUSH',\\n      'ACK',\\n      'MOON',\\n      'GHST',\\n      'UFO',\\n      'SEE',\\n      'MON',\\n      'TRIP',\\n      'NICE',\\n      'YUP',\\n      'EXIT',\\n      'CUTE',\\n      'OHNO',\\n      'GROW',\\n      'DEAD',\\n      'OPEN',\\n      'THEM',\\n      'DRIP',\\n      'ESC',\\n      '404',\\n      'PSA',\\n      'BGS',\\n      'BOMB',\\n      'NOUN',\\n      'SKY',\\n      'SK8',\\n      'CATS',\\n      'CT',\\n      'GAME',\\n      'DAO',\\n      'BRAP',\\n      'LOOK',\\n      'MYTH',\\n      'ZERO',\\n      'QI',\\n      '5000',\\n      'LORD',\\n      'DUEL',\\n      'SWRD',\\n      'MEME',\\n      'SAD',\\n      'ORB',\\n      'LIFE',\\n      'PRTY',\\n      'DEF',\\n      'AIR',\\n      'ISLE',\\n      'ROSE',\\n      'ANON',\\n      'OKOK',\\n      'MEOW',\\n      'KING',\\n      'WISE',\\n      'ROZE',\\n      'NOBU',\\n      'DAMN',\\n      'HUNT',\\n      'BETA',\\n      'FORT',\\n      'SWIM',\\n      'HALO',\\n      'UP',\\n      'YUM',\\n      'SNAP',\\n      'APES',\\n      'BIRD',\\n      'NOON',\\n      'VIBE',\\n      'MAKE',\\n      'CRWN',\\n      'PLAY',\\n      'JOY',\\n      'FREN',\\n      'DING',\\n      'GAZE',\\n      'HACK',\\n      'CRY',\\n      'SEER',\\n      'OWL',\\n      'LOUD',\\n      'RISE',\\n      'LOVE',\\n      'SKRT',\\n      'QTPI',\\n      'WAND',\\n      'REKT',\\n      'BEAR',\\n      'CODA',\\n      'ILY',\\n      'SNKE',\\n      'FLY',\\n      'ZKP',\\n      'LUSH',\\n      'SUP',\\n      'GOWN',\\n      'BAG',\\n      'BALM',\\n      'LIVE',\\n      'LVL'\\n    ];\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   HELPERS                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /// @notice Convert a bytes4 to a string.\\n  function _toString(bytes4 b) private pure returns (string memory) {\\n    uint256 numChars = 0;\\n\\n    for (uint256 i; i < 4; i++) {\\n      if (b[i] == bytes1(0)) break;\\n      numChars++;\\n    }\\n\\n    bytes memory result = new bytes(numChars);\\n    for (uint256 i; i < numChars; i++) result[i] = b[i];\\n\\n    return string(abi.encodePacked(result));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCFont.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.7;\\n\\ninterface IOKPCFont {\\n  error CharacterNotFound();\\n  error NotSingleCharacter();\\n\\n  function getChar(string memory char) external view returns (string memory);\\n\\n  function getChar(bytes1) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\nimport {IOKPC} from './IOKPC.sol';\\nimport {IOKPCParts} from './IOKPCParts.sol';\\n\\ninterface IOKPCMetadata {\\n  error InvalidTokenID();\\n  error NotEnoughPixelData();\\n\\n  struct Parts {\\n    IOKPCParts.Vector headband;\\n    IOKPCParts.Vector rightSpeaker;\\n    IOKPCParts.Vector leftSpeaker;\\n    IOKPCParts.Color color;\\n    string word;\\n  }\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n  function drawOKPC(uint256 tokenId) external view returns (string memory);\\n\\n  function drawOKPC(\\n    uint256 speed,\\n    bytes memory art,\\n    Parts memory parts\\n  ) external view returns (string memory);\\n\\n  function renderArt(bytes memory art, uint256 colorIndex)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function getParts(uint256 tokenId) external view returns (Parts memory);\\n\\n  function drawArt(bytes memory artData) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCGenesisArtwork.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\nimport {IOKPC} from './IOKPC.sol';\\n\\ninterface IOKPCGenesisArtwork {\\n  function getGenesisArtwork(uint256)\\n    external\\n    view\\n    returns (uint256, IOKPC.Art memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ENSNameResolver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IReverseRegistrar {\\n  function node(address addr) external view returns (bytes32);\\n}\\n\\ninterface IReverseResolver {\\n  function name(bytes32 node) external view returns (string memory);\\n}\\n\\ncontract ENSNameResolver {\\n  IReverseRegistrar constant registrar =\\n    IReverseRegistrar(0x084b1c3C81545d370f3634392De611CaaBFf8148);\\n  IReverseResolver constant resolver =\\n    IReverseResolver(0xA2C122BE93b0074270ebeE7f6b7292C7deB45047);\\n\\n  function getENSName(address addr) public view returns (string memory) {\\n    try resolver.name(registrar.node(addr)) {\\n      return resolver.name(registrar.node(addr));\\n    } catch {\\n      return '';\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCParts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.7;\\n\\ninterface IOKPCParts {\\n  // errors\\n  error IndexOutOfBounds(uint256 index, uint256 maxIndex);\\n\\n  // structures\\n  struct Color {\\n    bytes6 light;\\n    bytes6 regular;\\n    bytes6 dark;\\n    string name;\\n  }\\n\\n  struct Vector {\\n    string data;\\n    string name;\\n  }\\n\\n  // functions\\n  function getColor(uint256 index) external view returns (Color memory);\\n\\n  function getHeadband(uint256 index) external view returns (Vector memory);\\n\\n  function getSpeaker(uint256 index) external view returns (Vector memory);\\n\\n  function getWord(uint256 index) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"okpcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fontAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genesisArtworkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidTokenID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughPixelData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DESCRIPTION_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FALLBACK_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"artData\",\"type\":\"bytes\"}],\"name\":\"drawArt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"drawOKPC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"art\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"headband\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"rightSpeaker\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"leftSpeaker\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes6\",\"name\":\"light\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"regular\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"dark\",\"type\":\"bytes6\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Color\",\"name\":\"color\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCMetadata.Parts\",\"name\":\"parts\",\"type\":\"tuple\"}],\"name\":\"drawOKPC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getENSName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getParts\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"headband\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"rightSpeaker\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Vector\",\"name\":\"leftSpeaker\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes6\",\"name\":\"light\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"regular\",\"type\":\"bytes6\"},{\"internalType\":\"bytes6\",\"name\":\"dark\",\"type\":\"bytes6\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCParts.Color\",\"name\":\"color\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"internalType\":\"struct IOKPCMetadata.Parts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"art\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"colorIndex\",\"type\":\"uint256\"}],\"name\":\"renderArt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setDescriptionURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setFallbackURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fontAddress\",\"type\":\"address\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genesisArtworkAddress\",\"type\":\"address\"}],\"name\":\"setGenesisArtworkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partsAddress\",\"type\":\"address\"}],\"name\":\"setParts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OKPCMetadata", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007183209867489e1047f3a7c23ea1aed9c4e236e8000000000000000000000000d407890ed592d94390e6493f94dc784c5111f6ee000000000000000000000000b1917264f00ec7dc0a058b51651ead14759f0c090000000000000000000000002fc4a6ff8d356c13ec1936e532da7d27f99154b5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}