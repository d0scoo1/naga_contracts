{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    function Concatenate(string memory a, string memory b) public pure returns (string memory concatenatedString) {\r\n        bytes memory bytesA = bytes(a);\r\n        bytes memory bytesB = bytes(b);\r\n        string memory concatenatedAB = new string(bytesA.length + bytesB.length);\r\n        bytes memory bytesAB = bytes(concatenatedAB);\r\n        uint concatendatedIndex = 0;\r\n        uint index = 0;\r\n        for (index = 0; index < bytesA.length; index++) {\r\n          bytesAB[concatendatedIndex++] = bytesA[index];\r\n        }\r\n        for (index = 0; index < bytesB.length; index++) {\r\n          bytesAB[concatendatedIndex++] = bytesB[index];\r\n        }\r\n          \r\n        return string(bytesAB);\r\n    }\r\n\r\n    function UintToString(uint value) public pure returns (string memory uintAsString) {\r\n        uint tempValue = value;\r\n        \r\n        if (tempValue == 0) {\r\n          return \"0\";\r\n        }\r\n        uint j = tempValue;\r\n        uint length;\r\n        while (j != 0) {\r\n          length++;\r\n          j /= 10;\r\n        }\r\n        bytes memory byteString = new bytes(length);\r\n        uint index = length - 1;\r\n        while (tempValue != 0) {\r\n          byteString[index--] = byte(uint8(48 + tempValue % 10));\r\n          tempValue /= 10;\r\n        }\r\n        return string(byteString);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"Concatenate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"concatenatedString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uintAsString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Strings", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7063f865abc8cbb991adb79b6aab6fb40cbeb06ed0011a431291462240306795"}]}