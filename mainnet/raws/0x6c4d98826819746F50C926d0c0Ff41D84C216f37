{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Grow Operation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\ninterface IRandomizer {\\n\\tfunction random(\\n\\t\\tuint256 from,\\n\\t\\tuint256 to,\\n\\t\\tuint256 salty\\n\\t) external view returns (uint256);\\n}\\n\\ninterface ITOKE {\\n\\tfunction mint(address to, uint256 amount) external;\\n\\n\\tfunction burn(address from, uint256 amount) external;\\n\\n\\tfunction updateOriginAccess() external;\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n}\\n\\ninterface ISTAC {\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction getTokenTraits(uint256 tokenId) external view returns (bool, uint256);\\n}\\n\\ncontract TheGrowOperation is Ownable, IERC721Receiver, ReentrancyGuard {\\n\\tuint8 public constant MAX_ALPHA = 10;\\n\\tuint256 public ALPHA_RATIO = 1000; //can ajust the alpha ratio of gains per alpha level if needed\\n\\n\\t//store a stake's token, owner, and earning values\\n\\tstruct Stake {\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 value;\\n\\t\\taddress owner;\\n\\t}\\n\\n\\tevent TokenStaked(address indexed owner, uint256 indexed tokenId, uint256 value);\\n\\tevent FedApeClaimed(uint256 indexed tokenId, uint256 earned, bool unstaked);\\n\\tevent StonedApeClaimed(uint256 indexed tokenId, uint256 earned, bool unstaked);\\n\\n\\t// reference to the STAC NFT contract\\n\\tISTAC public stac;\\n\\tITOKE public toke;\\n\\tIRandomizer randomizer;\\n\\n\\taddress private devWallet;\\n\\n\\t// maps tokenId to stake\\n\\tmapping(uint256 => Stake) public GrowOperation;\\n\\n\\t// maps alpha to all Ape stakes\\n\\tmapping(uint256 => Stake[]) public dea;\\n\\n\\t// tracks location of each Apes in DEA\\n\\tmapping(uint256 => uint256) public deaIndices;\\n\\n\\t// total alpha scores staked\\n\\tuint256 public totalAlphaStaked = 0;\\n\\t// any rewards dialphaibuted when no Fed Apes are staked\\n\\n\\tuint256 public unaccountedRewards = 0;\\n\\n\\t// amount of $TOKE due for each alpha point staked\\n\\tuint256 public TokePerAlpha = 0;\\n\\n\\t// Stoned Ape earn $TOKE per day\\n\\tuint256 public DAILY_TOKE_RATE = 10000 ether;\\n\\n\\t// Stoned Ape must have 2 days worth of $TOKE to unstake or else it's too cold\\n\\tuint256 public constant MINIMUM_TO_EXIT = 2 days;\\n\\n\\t// Fed Apes take a 20% tax on all $TOKE claimed\\n\\tuint256 public constant TOKE_CLAIM_TAX_PERCENTAGE = 20;\\n\\n\\t// there will only ever be (roughly) 6 billion $TOKE earned through staking\\n\\tuint256 public constant MAXIMUM_GLOBAL_TOKE = 4200000000 ether;\\n\\n\\t// amount of $TOKE earned so far\\n\\tuint256 public totalTOKEEarned;\\n\\t// number of Stoned Apes staked in the Grow Operation\\n\\tuint256 public totalStonedApesStaked;\\n\\t// the last time $TOKE was claimed\\n\\tuint256 public lastClaimTimestamp;\\n\\n\\t// start of stake time\\n\\tuint256 public stakeStartTime = block.timestamp - 1;\\n\\n\\t// emergency rescue to allow unstaking without any checks but without $TOKE\\n\\tbool public rescueEnabled = false;\\n\\n\\tmodifier onlyDev() {\\n\\t\\trequire(msg.sender == devWallet, \\\"only dev\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\tdevWallet = msg.sender;\\n\\t}\\n\\n\\n\\t/** STAKING */\\n\\n\\t/*\\n\\t * adds Fed Ape and Stoned Ape to the Grow Operation\\n\\t * requires allowance\\n\\t * @param tokenId the ID of the Fed Ape or Stoned Ape to stake\\n\\t */\\n\\tfunction stake(uint256[] calldata tokenIds) external nonReentrant {\\n\\t\\trequire(block.timestamp > stakeStartTime, \\\"not live\\\");\\n\\t\\trequire(tx.origin == msg.sender, \\\"no...\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tuint256 tokenId = tokenIds[i];\\n\\t\\t\\trequire(stac.ownerOf(tokenId) == msg.sender, \\\"msg.sender not owner of tokenID\\\");\\n\\t\\t\\tstac.transferFrom(msg.sender, address(this), tokenId);\\n\\t\\t\\tif (!isFed(tokenId)) {\\n\\t\\t\\t\\t_addApeToGrowOperation(tokenId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_addFedApeToDEA(tokenId);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * adds a single Ape to the Grow Operation\\n\\t * @param tokenId the ID of the Stoned Ape to add to the Grow Operation\\n\\t */\\n\\tfunction _addApeToGrowOperation(uint256 tokenId) internal _updateEarnings {\\n\\t\\tGrowOperation[tokenId] = Stake({ owner: msg.sender, tokenId: tokenId, value: block.timestamp });\\n\\t\\ttotalStonedApesStaked += 1;\\n\\t\\temit TokenStaked(msg.sender, tokenId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * adds a single Fed Ape to the DEA\\n\\t * @param tokenId the ID of the Fed Ape to add to the DEA\\n\\t */\\n\\tfunction _addFedApeToDEA(uint256 tokenId) internal {\\n\\t\\tuint256 alpha = _alphaForApe(tokenId);\\n\\t\\ttotalAlphaStaked += alpha;\\n\\t\\tdeaIndices[tokenId] = dea[alpha].length; // Store the location of the Fed Ape in the DEA\\n\\t\\tdea[alpha].push(Stake({ owner: msg.sender, tokenId: tokenId, value: TokePerAlpha })); // Add the Fed Ape to the DEA\\n\\t\\temit TokenStaked(msg.sender, tokenId, TokePerAlpha);\\n\\t}\\n\\n\\t/** CLAIMING / UNSTAKING */\\n\\n\\t/**\\n\\t * realize $TOKE earnings and optionally unstake tokens from the Grow Operation / DEA\\n\\t * to unstake an Ape it will require it has 2 days worth of $TOKE unclaimed\\n\\t * @param tokenIds the IDs of the tokens to claim earnings from\\n\\t * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n\\t */\\n\\tfunction claim(uint256[] calldata tokenIds, bool unstake) external _updateEarnings nonReentrant {\\n\\t\\trequire(tx.origin == msg.sender, \\\"no...\\\");\\n\\t\\tuint256 owed = 0;\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tif (!isFed(tokenIds[i])) {\\n\\t\\t\\t\\t//Stoned Ape pay Stoned Ape tax\\n\\t\\t\\t\\towed += _claimStonedApeFromGrowOperation(tokenIds[i], unstake);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t//Stoned Ape realise earnings\\n\\t\\t\\t\\towed += _claimFedApeFromDEA(tokenIds[i], unstake);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttoke.updateOriginAccess();\\n\\t\\tif (owed != 0) {\\n\\t\\t\\ttoke.mint(msg.sender, owed);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * realize $TOKE earnings for a single Stoned Ape and optionally unstake it\\n\\t * if not unstaking, pay a 20% tax to the staked Fed Apes\\n\\t * if unstaking, there is a 50% chance all $TOKE is stolen\\n\\t * @param tokenId the ID of the Stoned Ape to claim earnings from\\n\\t * @param unstake whether or not to unstake the Stoned Ape\\n\\t * @return owed - the amount of $TOKE earned\\n\\t */\\n\\tfunction _claimStonedApeFromGrowOperation(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n\\t\\tStake memory _stake = GrowOperation[tokenId];\\n\\t\\trequire(_stake.owner == msg.sender, \\\"msg.sender not stake.owner\\\");\\n\\t\\trequire(\\n\\t\\t\\t!(unstake && block.timestamp - _stake.value < MINIMUM_TO_EXIT),\\n\\t\\t\\t\\\"block.timestamp - stake.value < MINIMUM_TO_EXIT\\\"\\n\\t\\t);\\n\\t\\t\\n\\t\\towed = getOwedToke(tokenId);\\n\\n\\t\\tif (unstake) {\\n\\t\\t\\tif (randomizer.random(0, 100, tokenId) > 50) {\\n\\t\\t\\t\\t// 50% chance of all $TOKE stolen\\n\\t\\t\\t\\t_payStonedApeTax(owed);\\n\\t\\t\\t\\towed = 0;\\n\\t\\t\\t}\\n\\t\\t\\tstac.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\"); // send back Stoned Ape\\n\\t\\t\\tdelete GrowOperation[tokenId];\\n\\t\\t\\ttotalStonedApesStaked -= 1;\\n\\t\\t} else {\\n\\t\\t\\t_payStonedApeTax((owed * TOKE_CLAIM_TAX_PERCENTAGE) / 100); // percentage tax to staked wolves\\n\\t\\t\\towed = (owed * (100 - TOKE_CLAIM_TAX_PERCENTAGE)) / 100; // remainder goes to Stoned Ape owner\\n\\t\\t\\tGrowOperation[tokenId] = Stake({\\n\\t\\t\\t\\towner: msg.sender,\\n\\t\\t\\t\\ttokenId: uint256(tokenId),\\n\\t\\t\\t\\tvalue: uint256(block.timestamp)\\n\\t\\t\\t}); // reset stake\\n\\t\\t}\\n\\t\\temit StonedApeClaimed(tokenId, owed, unstake);\\n\\t}\\n\\n\\t/**\\n\\t * realize $TOKE earnings for a single Stoned Ape and optionally unstake it\\n\\t * Wolves earn $TOKE proportional to their alpha rank\\n\\t * @param tokenId the ID of the Stoned Ape to claim earnings from\\n\\t * @param unstake whether or not to unstake the Stoned Ape\\n\\t * @return owed - the amount of $TOKE earned\\n\\t */\\n\\tfunction _claimFedApeFromDEA(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n\\t\\trequire(stac.ownerOf(tokenId) == address(this), \\\"Fed Ape is not staked in the DEA\\\");\\n\\t\\tuint256 alpha = _alphaForApe(tokenId);\\n\\t\\tStake memory _stake = dea[alpha][deaIndices[tokenId]];\\n\\t\\trequire(_stake.owner == msg.sender, \\\"msg.sender is not stake.owner\\\");\\n\\t\\towed = getOwedToke(tokenId);\\n\\t\\tif (unstake) {\\n\\t\\t\\ttotalAlphaStaked -= alpha; // Remove alpha from total staked\\n\\t\\t\\tstac.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\"); // Send back Fed Ape\\n\\t\\t\\tStake memory lastStake = dea[alpha][dea[alpha].length - 1];\\n\\t\\t\\tdea[alpha][deaIndices[tokenId]] = lastStake; // Shuffle last Fed Ape to current position\\n\\t\\t\\tdeaIndices[lastStake.tokenId] = deaIndices[tokenId];\\n\\t\\t\\tdea[alpha].pop(); // Remove duplicate\\n\\t\\t\\tdelete deaIndices[tokenId]; // Delete old mapping\\n\\t\\t} else {\\n\\t\\t\\tdea[alpha][deaIndices[tokenId]] = Stake({\\n\\t\\t\\t\\towner: msg.sender,\\n\\t\\t\\t\\ttokenId: uint256(tokenId),\\n\\t\\t\\t\\tvalue: uint256(TokePerAlpha)\\n\\t\\t\\t}); // reset stake\\n\\t\\t}\\n\\t\\temit FedApeClaimed(tokenId, owed, unstake);\\n\\t}\\n\\t\\n\\t/**\\n\\t * emergency unstake tokens\\n\\t * @param tokenIds the IDs of the tokens to claim earnings from\\n\\t */\\n\\tfunction rescue(uint256[] calldata tokenIds) external nonReentrant {\\n\\t\\trequire(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n\\t\\tuint256 tokenId;\\n\\t\\tStake memory _stake;\\n\\t\\tStake memory lastStake;\\n\\t\\tuint256 alpha;\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\ttokenId = tokenIds[i];\\n\\t\\t\\tif (!isFed(tokenId)) {\\n\\t\\t\\t\\t_stake = GrowOperation[tokenId];\\n\\t\\t\\t\\trequire(_stake.owner == msg.sender, \\\"msg.sender is not stake.owner\\\");\\n\\t\\t\\t\\tstac.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\"); // send back Ape\\n\\t\\t\\t\\tdelete GrowOperation[tokenId];\\n\\t\\t\\t\\ttotalStonedApesStaked -= 1;\\n\\t\\t\\t\\temit StonedApeClaimed(tokenId, 0, true);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talpha = _alphaForApe(tokenId);\\n\\t\\t\\t\\t_stake = dea[alpha][deaIndices[tokenId]];\\n\\t\\t\\t\\trequire(_stake.owner == msg.sender, \\\"msg.sender is not stake.owner\\\");\\n\\t\\t\\t\\ttotalAlphaStaked -= alpha; // Remove alpha from total staked\\n\\t\\t\\t\\tstac.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\"); // Send back Ape\\n\\t\\t\\t\\tlastStake = dea[alpha][dea[alpha].length - 1];\\n\\t\\t\\t\\tdea[alpha][deaIndices[tokenId]] = lastStake; // Shuffle last Ape to current position\\n\\t\\t\\t\\tdeaIndices[lastStake.tokenId] = deaIndices[tokenId];\\n\\t\\t\\t\\tdea[alpha].pop(); // Remove duplicate\\n\\t\\t\\t\\tdelete deaIndices[tokenId]; // Delete old mapping\\n\\t\\t\\t\\temit FedApeClaimed(tokenId, 0, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/** ACCOUNTING */\\n\\n\\t/**\\n\\t * add $TOKE to claimable pot for the DEA\\n\\t * @param amount $TOKE to add to the pot\\n\\t */\\n\\tfunction _payStonedApeTax(uint256 amount) internal {\\n\\t\\tif (totalAlphaStaked == 0) {\\n\\t\\t\\t// if there's no staked wolves\\n\\t\\t\\tunaccountedRewards += amount; // keep track of $TOKE due to wolves\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// makes sure to include any unaccounted $TOKE\\n\\t\\tTokePerAlpha += (amount + unaccountedRewards) / totalAlphaStaked;\\n\\t\\tunaccountedRewards = 0;\\n\\t}\\n\\n\\t/**\\n\\t * tracks $TOKE earnings to ensure it stops once 2.4 billion is eclipsed\\n\\t */\\n\\tmodifier _updateEarnings() {\\n\\t\\tif (totalTOKEEarned < MAXIMUM_GLOBAL_TOKE) {\\n\\t\\t\\ttotalTOKEEarned +=\\n\\t\\t\\t\\t((block.timestamp - lastClaimTimestamp) * totalStonedApesStaked * DAILY_TOKE_RATE) /\\n\\t\\t\\t\\t1 days;\\n\\t\\t\\tlastClaimTimestamp = block.timestamp;\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/** ADMIN */\\n\\n\\t/**\\n\\t * allows owner to enable \\\"rescue mode\\\"\\n\\t * simplifies accounting, prioritizes tokens out in emergency\\n\\t */\\n\\n\\tfunction setStakeStartTime(uint256 newTime) external onlyOwner {\\n\\t\\tstakeStartTime = newTime;\\n\\t}\\n\\n\\tfunction setDailyTokeRate(uint256 _newRate) external onlyOwner {\\n\\t\\tDAILY_TOKE_RATE = _newRate;\\n\\t}\\n\\n\\tfunction setRescueEnabled(bool _enabled) external onlyDev {\\n\\t\\trescueEnabled = _enabled;\\n\\t}\\n\\n\\tfunction setToke(address payable _toke) external onlyOwner {\\n\\t\\ttoke = ITOKE(_toke);\\n\\t}\\n\\n\\tfunction setSTAC(address _stac) external onlyOwner {\\n\\t\\tstac = ISTAC(_stac);\\n\\t}\\n\\n\\tfunction setRandomizer(address _newRandomizer) external onlyOwner {\\n\\t\\trandomizer = IRandomizer(_newRandomizer);\\n\\t}\\n\\n\\t//if needed, economy tweaks\\n\\tfunction setalphaRatio(uint256 _newRatio) external onlyDev {\\n\\t\\tALPHA_RATIO = _newRatio;\\n\\t}\\n\\n\\t/** READ ONLY */\\n\\tfunction isFed(uint256 tokenId) public view returns (bool _isFed) {\\n\\t\\t(_isFed, ) = stac.getTokenTraits(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * gets the alphaengh score for a Stoned Ape (higher is better)\\n\\t * @param tokenId the ID of the Stoned Ape to get the alpha score for\\n\\t * @return the alpha score of the Stoned Ape\\n\\t */\\n\\tfunction _alphaForApe(uint256 tokenId) internal view returns (uint256) {\\n\\t\\t(, uint256 alphaIndex) = stac.getTokenTraits(tokenId);\\n\\t\\t(tokenId);\\n\\t\\treturn alphaIndex; // higher is better\\n\\t}\\n\\n\\t/**\\n\\t * Chooses a random Fed Ape when a newly minted token is stolen\\n\\t * @param seed a random value to choose a Stoned Ape from\\n\\t * @return the owner of the randomly selected Fed Ape\\n\\t */\\n\\tfunction randomFedApeOwner(uint256 seed) external view returns (address) {\\n\\t\\tif (totalAlphaStaked == 0) return address(0x0);\\n\\t\\tuint256 bucket = (seed & 0xFFFFFFFF) % totalAlphaStaked; // choose a value from 0 to total alpha staked\\n\\t\\tuint256 cumulative;\\n\\t\\tseed >>= 32;\\n\\t\\t// loop through each bucket of Feds with the same alpha score\\n\\t\\tfor (uint256 i = 1; i <= MAX_ALPHA; i++) {\\n\\t\\t\\tcumulative += dea[i].length * i;\\n\\t\\t\\t// if the value is not inside of that bucket, keep going\\n\\t\\t\\tif (bucket >= cumulative) continue;\\n\\t\\t\\t// get the address of a random Fed Ape with that alpha score\\n\\t\\t\\treturn dea[i][seed % dea[i].length].owner;\\n\\t\\t}\\n\\t\\treturn address(0x0);\\n\\t}\\n\\n\\t/**\\n\\t * Get owed $TOKE from staked tokenId\\n\\t * @param tokenId staked token id\\n\\t * @return owed in $TOKE\\n\\t */\\n\\tfunction getOwedToke(uint256 tokenId) public view returns (uint256 owed) {\\n\\t\\trequire(stac.ownerOf(tokenId) == address(this), \\\"Token is not staked.\\\");\\n\\n\\t\\tStake memory _stake = GrowOperation[tokenId]; // default to Grow Operation\\n\\n\\t\\t// for each Ape\\n\\t\\tif (!isFed(tokenId)) {\\n\\t\\t\\tif (totalTOKEEarned < MAXIMUM_GLOBAL_TOKE) {\\n\\t\\t\\t\\towed = ((block.timestamp - _stake.value) * DAILY_TOKE_RATE) / 1 days;\\n\\t\\t\\t} else if (_stake.value > lastClaimTimestamp) {\\n\\t\\t\\t\\towed = 0; // $TOKE production stopped already\\n\\t\\t\\t} else {\\n\\t\\t\\t\\towed = ((lastClaimTimestamp - _stake.value) * DAILY_TOKE_RATE) / 1 days; // stop earning additional $TOKE if it's all been earned\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn owed;\\n\\t\\t}\\n\\n\\t\\t// for Fed Ape\\n\\t\\tuint256 alpha = _alphaForApe(tokenId);\\n\\t\\t_stake = dea[alpha][deaIndices[tokenId]];\\n\\n\\t\\towed = ((alpha * ALPHA_RATIO) / 1000) * (TokePerAlpha - _stake.value); // Calculate portion of tokens based on alpha\\n\\n\\t\\treturn owed;\\n\\t}\\n\\n\\t// /**\\n\\t//  * generates a pseudorandom number\\n\\t//  * @param seed a value ensure different outcomes for different sources in the same block\\n\\t//  * @return a pseudorandom value\\n\\t//  */\\n\\t// function random(uint256 seed) internal view returns (uint256) {\\n\\t// \\treturn\\n\\t// \\t\\tuint256(\\n\\t// \\t\\t\\tkeccak256(abi.encodePacked(tx.origin, blockhash(block.number - 1), block.timestamp, seed))\\n\\t// \\t\\t);\\n\\t// }\\n\\n\\tfunction onERC721Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external pure override returns (bytes4) {\\n\\t\\treturn IERC721Receiver.onERC721Received.selector;\\n\\t}\\n\\n\\t// withdrawal ETH (not used)\\n\\tfunction withdraw() external {\\n\\t\\tuint256 totalBalance = address(this).balance;\\n\\t\\tuint256 devFee = _calcPercentage(totalBalance, 500);\\n\\t\\tpayable(owner()).transfer(totalBalance - devFee);\\n\\t\\tpayable(devWallet).transfer(devFee);\\n\\t}\\n\\n\\tfunction reclaimERC20(IERC20 erc20Token) external onlyOwner {\\n\\t\\terc20Token.transfer(msg.sender, erc20Token.balanceOf(address(this)));\\n\\t}\\n\\n\\tfunction reclaimERC721(IERC721 erc721Token, uint256 id) external onlyOwner {\\n\\t\\terc721Token.safeTransferFrom(address(this), msg.sender, id);\\n\\t}\\n\\n\\t//300 = 3%, 1 = 0.01%\\n\\tfunction _calcPercentage(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n\\t\\trequire(basisPoints >= 0);\\n\\t\\treturn (amount * basisPoints) / 10000;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"FedApeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"StonedApeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPHA_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_TOKE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GrowOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_TOKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALPHA\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKE_CLAIM_TAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokePerAlpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deaIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwedToke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isFed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomFedApeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"reclaimERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setDailyTokeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRandomizer\",\"type\":\"address\"}],\"name\":\"setRandomizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stac\",\"type\":\"address\"}],\"name\":\"setSTAC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setStakeStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toke\",\"type\":\"address\"}],\"name\":\"setToke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRatio\",\"type\":\"uint256\"}],\"name\":\"setalphaRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stac\",\"outputs\":[{\"internalType\":\"contract ISTAC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toke\",\"outputs\":[{\"internalType\":\"contract ITOKE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAlphaStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStonedApesStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTOKEEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unaccountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheGrowOperation", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}