{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Management/BankNodeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IBNPLBankNode, IBankNodeInitializableV1} from \\\"../BankNode/interfaces/IBNPLBankNode.sol\\\";\\nimport {IBNPLNodeStakingPool} from \\\"../BankNode/interfaces/IBNPLNodeStakingPool.sol\\\";\\nimport {ITokenInitializableV1} from \\\"../ERC20/interfaces/ITokenInitializableV1.sol\\\";\\nimport {IBNPLProtocolConfig} from \\\"../ProtocolDeploy/interfaces/IBNPLProtocolConfig.sol\\\";\\nimport {IBankNodeManager} from \\\"./interfaces/IBankNodeManager.sol\\\";\\n\\nimport {BankNodeLendingRewards} from \\\"../Rewards/PlatformRewards/BankNodeLendingRewards.sol\\\";\\nimport {BNPLKYCStore} from \\\"./BNPLKYCStore.sol\\\";\\n\\nimport {TransferHelper} from \\\"../Utils/TransferHelper.sol\\\";\\n\\ncontract BankNodeManager is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IBankNodeManager\\n{\\n    struct BankNodeContracts {\\n        address bankNodeContract;\\n        address bankNodeToken;\\n        address bnplStakingPoolContract;\\n        address bnplStakingPoolToken;\\n    }\\n    struct CreateBankNodeContractsFncInput {\\n        uint32 bankNodeId;\\n        address operatorAdmin;\\n        address operator;\\n        uint256 tokensToBond;\\n        address lendableTokenAddress;\\n        address nodePublicKey;\\n        uint32 kycMode;\\n    }\\n    bytes32 public constant CONFIGURE_NODE_MANAGER_ROLE = keccak256(\\\"CONFIGURE_NODE_MANAGER_ROLE\\\");\\n\\n    mapping(address => uint8) public override enabledLendableTokens;\\n\\n    mapping(address => LendableToken) public override lendableTokens;\\n\\n    mapping(uint32 => BankNode) public override bankNodes;\\n    mapping(address => uint32) public override bankNodeAddressToId;\\n\\n    uint256 public override minimumBankNodeBondedAmount;\\n    uint256 public override loanOverdueGracePeriod;\\n\\n    uint32 public override bankNodeCount;\\n    IERC20 public override bnplToken;\\n\\n    BankNodeLendingRewards public override bankNodeLendingRewards;\\n\\n    IBNPLProtocolConfig public override protocolConfig;\\n    BNPLKYCStore public override bnplKYCStore;\\n\\n    function bankNodeIdExists(uint32 bankNodeId) external view override returns (uint256) {\\n        return (bankNodeId >= 1 && bankNodeId <= bankNodeCount) ? 1 : 0;\\n    }\\n\\n    function getBankNodeContract(uint32 bankNodeId) external view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bankNodeContract;\\n    }\\n\\n    function getBankNodeToken(uint32 bankNodeId) external view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bankNodeToken;\\n    }\\n\\n    function getBankNodeStakingPoolContract(uint32 bankNodeId) external view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bnplStakingPoolContract;\\n    }\\n\\n    function getBankNodeStakingPoolToken(uint32 bankNodeId) external view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bnplStakingPoolToken;\\n    }\\n\\n    function getBankNodeLendableToken(uint32 bankNodeId) external view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].lendableToken;\\n    }\\n\\n    function getBankNodeLoansStatistic()\\n        external\\n        view\\n        override\\n        returns (uint256 totalAmountOfAllActiveLoans, uint256 totalAmountOfAllLoans)\\n    {\\n        totalAmountOfAllActiveLoans;\\n        totalAmountOfAllLoans;\\n        for (uint32 i = 0; i < bankNodeCount; i++) {\\n            IBNPLBankNode node = IBNPLBankNode(bankNodes[i + 1].bankNodeContract);\\n            totalAmountOfAllActiveLoans += node.totalAmountOfActiveLoans();\\n            totalAmountOfAllLoans += node.totalAmountOfLoans();\\n        }\\n    }\\n\\n    function getBankNodeList(\\n        uint32 start,\\n        uint32 count,\\n        bool reverse\\n    ) external view override returns (BankNodeData[] memory, uint32) {\\n        if (start > bankNodeCount) {\\n            return (new BankNodeData[](0), bankNodeCount);\\n        }\\n        uint32 end;\\n        if (reverse) {\\n            start = bankNodeCount - start;\\n            end = (start > count) ? (start - count) : 0;\\n            count = start - end;\\n        } else {\\n            end = (start + count) > bankNodeCount ? bankNodeCount : (start + count);\\n            count = end - start;\\n        }\\n        BankNodeData[] memory tmp = new BankNodeData[](count);\\n        uint32 tmpIndex = 0;\\n        if (reverse) {\\n            while ((tmpIndex < count) && start > 0) {\\n                BankNode memory _node = bankNodes[start];\\n                start--;\\n                tmp[tmpIndex++] = BankNodeData(_node, getBankNodeDetail(_node.bankNodeContract));\\n            }\\n        } else {\\n            while ((tmpIndex < count) && start < bankNodeCount) {\\n                BankNode memory _node = bankNodes[start + 1];\\n                start++;\\n                tmp[tmpIndex++] = BankNodeData(_node, getBankNodeDetail(_node.bankNodeContract));\\n            }\\n        }\\n        return (tmp, bankNodeCount);\\n    }\\n\\n    function getBankNodeDetail(address bankNode) public view override returns (BankNodeDetail memory) {\\n        IBNPLBankNode node = IBNPLBankNode(bankNode);\\n        IBNPLNodeStakingPool pool = IBNPLNodeStakingPool(node.nodeStakingPool());\\n        uint256 virtualPoolTokensCount = pool.virtualPoolTokensCount();\\n        uint256 tokensCirculatingStakingPool = pool.poolTokensCirculating();\\n        return\\n            BankNodeDetail({\\n                totalAssetsValueBankNode: node.getPoolTotalAssetsValue(),\\n                totalAssetsValueStakingPool: pool.getPoolTotalAssetsValue(),\\n                tokensCirculatingBankNode: node.poolTokensCirculating(),\\n                tokensCirculatingStakingPool: tokensCirculatingStakingPool,\\n                totalLiquidAssetsValue: node.getPoolTotalLiquidAssetsValue(),\\n                baseTokenBalanceBankNode: node.baseTokenBalance(),\\n                baseTokenBalanceStakingPool: pool.baseTokenBalance(),\\n                accountsReceivableFromLoans: node.accountsReceivableFromLoans(),\\n                virtualPoolTokensCount: virtualPoolTokensCount,\\n                baseLiquidityToken: address(node.baseLiquidityToken()),\\n                poolLiquidityToken: address(node.poolLiquidityToken()),\\n                isNodeDecomissioning: pool.isNodeDecomissioning(),\\n                nodeOperatorBalance: node.nodeOperatorBalance(),\\n                loanRequestIndex: node.loanRequestIndex(),\\n                loanIndex: node.loanIndex(),\\n                valueOfUnusedFundsLendingDeposits: node.getValueOfUnusedFundsLendingDeposits(),\\n                totalLossAllTime: node.totalLossAllTime(),\\n                onGoingLoanCount: node.onGoingLoanCount(),\\n                totalTokensLocked: pool.totalTokensLocked(),\\n                getUnstakeLockupPeriod: pool.getUnstakeLockupPeriod(),\\n                tokensBondedAllTime: pool.tokensBondedAllTime(),\\n                poolTokenEffectiveSupply: pool.poolTokenEffectiveSupply(),\\n                nodeTotalStaked: pool.getPoolWithdrawConversion(tokensCirculatingStakingPool),\\n                nodeBondedBalance: pool.getPoolWithdrawConversion(virtualPoolTokensCount),\\n                nodeOwnerBNPLRewards: pool.getNodeOwnerBNPLRewards(),\\n                nodeOwnerPoolTokenRewards: pool.getNodeOwnerPoolTokenRewards()\\n            });\\n    }\\n\\n    function initialize(\\n        IBNPLProtocolConfig _protocolConfig,\\n        address _configurator,\\n        uint256 _minimumBankNodeBondedAmount,\\n        uint256 _loanOverdueGracePeriod,\\n        BankNodeLendingRewards _bankNodeLendingRewards,\\n        BNPLKYCStore _bnplKYCStore\\n    ) external override initializer nonReentrant {\\n        require(address(_protocolConfig) != address(0), \\\"_protocolConfig cannot be 0\\\");\\n        require(address(_bnplKYCStore) != address(0), \\\"kyc store cannot be 0\\\");\\n        require(_configurator != address(0), \\\"_configurator cannot be 0\\\");\\n        require(_minimumBankNodeBondedAmount > 0, \\\"_minimumBankNodeBondedAmount cannot be 0\\\");\\n\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        protocolConfig = _protocolConfig;\\n\\n        minimumBankNodeBondedAmount = _minimumBankNodeBondedAmount;\\n        loanOverdueGracePeriod = _loanOverdueGracePeriod;\\n        bankNodeCount = 0;\\n        bnplKYCStore = _bnplKYCStore;\\n        bnplToken = IERC20(_protocolConfig.bnplToken());\\n        require(address(bnplToken) != address(0), \\\"_bnplToken cannot be 0\\\");\\n        bankNodeLendingRewards = _bankNodeLendingRewards;\\n        require(address(bankNodeLendingRewards) != address(0), \\\"_bankNodeLendingRewards cannot be 0\\\");\\n\\n        _setupRole(CONFIGURE_NODE_MANAGER_ROLE, _configurator);\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to add support for a new ERC20 token to be used as lendable tokens for new bank nodes\\n    function addLendableToken(LendableToken calldata _lendableToken, uint8 enabled)\\n        external\\n        override\\n        nonReentrant\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        require(address(_lendableToken.tokenContract) != address(0), \\\"tokenContract must not be 0\\\");\\n        require(address(_lendableToken.swapMarket) != address(0), \\\"swapMarket must not be 0\\\");\\n        require(_lendableToken.valueMultiplier > 0, \\\"valueMultiplier must be > 0\\\");\\n        require(enabled == 0 || enabled == 1, \\\"enabled 1 or 0\\\");\\n\\n        LendableToken storage lendableToken = lendableTokens[_lendableToken.tokenContract];\\n        lendableToken.tokenContract = _lendableToken.tokenContract;\\n\\n        lendableToken.swapMarket = _lendableToken.swapMarket;\\n        lendableToken.swapMarketPoolFee = _lendableToken.swapMarketPoolFee;\\n\\n        lendableToken.decimals = _lendableToken.decimals;\\n        lendableToken.valueMultiplier = _lendableToken.valueMultiplier;\\n        lendableToken.unusedFundsLendingMode = _lendableToken.unusedFundsLendingMode;\\n        lendableToken.unusedFundsLendingContract = _lendableToken.unusedFundsLendingContract;\\n        lendableToken.unusedFundsLendingToken = _lendableToken.unusedFundsLendingToken;\\n        lendableToken.unusedFundsIncentivesController = _lendableToken.unusedFundsIncentivesController;\\n\\n        lendableToken.symbol = _lendableToken.symbol;\\n        lendableToken.poolSymbol = _lendableToken.poolSymbol;\\n        enabledLendableTokens[_lendableToken.tokenContract] = enabled;\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to enable/disable support for ERC20 tokens to be used as lendable tokens for new bank nodes (does not effect existing nodes)\\n    function setLendableTokenStatus(address tokenContract, uint8 enabled)\\n        external\\n        override\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        require(enabled == 0 || enabled == 1, \\\"enabled 1 or 0\\\");\\n        enabledLendableTokens[tokenContract] = enabled;\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to set the minimum BNPL to bond per node\\n    function setMinimumBankNodeBondedAmount(uint256 _minimumBankNodeBondedAmount)\\n        external\\n        override\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        minimumBankNodeBondedAmount = _minimumBankNodeBondedAmount;\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to set the loan overdue grace period per node\\n    function setLoanOverdueGracePeriod(uint256 _loanOverdueGracePeriod)\\n        external\\n        override\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        loanOverdueGracePeriod = _loanOverdueGracePeriod;\\n    }\\n\\n    function _createBankNodeLendingPoolTokenClone(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimalsValue,\\n        address minterAdmin,\\n        address minter\\n    ) private returns (address) {\\n        BeaconProxy p = new BeaconProxy(\\n            address(protocolConfig.upBeaconBankNodeLendingPoolToken()),\\n            abi.encodeWithSelector(\\n                ITokenInitializableV1.initialize.selector,\\n                name,\\n                symbol,\\n                decimalsValue,\\n                minterAdmin,\\n                minter\\n            )\\n        );\\n        return address(p);\\n    }\\n\\n    function _createBankNodeStakingPoolTokenClone(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimalsValue,\\n        address minterAdmin,\\n        address minter\\n    ) private returns (address) {\\n        BeaconProxy p = new BeaconProxy(\\n            address(protocolConfig.upBeaconBankNodeStakingPool()),\\n            abi.encodeWithSelector(\\n                ITokenInitializableV1.initialize.selector,\\n                name,\\n                symbol,\\n                decimalsValue,\\n                minterAdmin,\\n                minter\\n            )\\n        );\\n        return address(p);\\n    }\\n\\n    function _createBankNodeContracts(CreateBankNodeContractsFncInput memory input)\\n        private\\n        returns (BankNodeContracts memory output)\\n    {\\n        require(input.lendableTokenAddress != address(0), \\\"lendableTokenAddress cannot be 0\\\");\\n        LendableToken memory lendableToken = lendableTokens[input.lendableTokenAddress];\\n        require(\\n            lendableToken.tokenContract == input.lendableTokenAddress && lendableToken.valueMultiplier > 0,\\n            \\\"invalid lendable token\\\"\\n        );\\n        require(enabledLendableTokens[input.lendableTokenAddress] == 1, \\\"lendable token not enabled\\\");\\n        output.bankNodeContract = address(new BeaconProxy(address(protocolConfig.upBeaconBankNode()), \\\"\\\"));\\n        output.bnplStakingPoolContract = address(\\n            new BeaconProxy(address(protocolConfig.upBeaconBankNodeStakingPool()), \\\"\\\")\\n        );\\n\\n        output.bnplStakingPoolToken = _createBankNodeLendingPoolTokenClone(\\n            \\\"Banking Node Pool BNPL\\\",\\n            \\\"pBNPL\\\",\\n            18,\\n            address(0),\\n            output.bnplStakingPoolContract\\n        );\\n        output.bankNodeToken = _createBankNodeLendingPoolTokenClone(\\n            lendableToken.poolSymbol,\\n            lendableToken.poolSymbol,\\n            lendableToken.decimals,\\n            address(0),\\n            output.bankNodeContract\\n        );\\n\\n        IBankNodeInitializableV1(output.bankNodeContract).initialize(\\n            IBankNodeInitializableV1.BankNodeInitializeArgsV1({\\n                bankNodeId: input.bankNodeId,\\n                bnplSwapMarketPoolFee: lendableToken.swapMarketPoolFee,\\n                bankNodeManager: address(this),\\n                operatorAdmin: input.operatorAdmin,\\n                operator: input.operator,\\n                bnplToken: address(bnplToken),\\n                bnplSwapMarket: lendableToken.swapMarket,\\n                unusedFundsLendingMode: lendableToken.unusedFundsLendingMode,\\n                unusedFundsLendingContract: lendableToken.unusedFundsLendingContract,\\n                unusedFundsLendingToken: lendableToken.unusedFundsLendingToken,\\n                unusedFundsIncentivesController: lendableToken.unusedFundsIncentivesController,\\n                nodeStakingPool: output.bnplStakingPoolContract,\\n                baseLiquidityToken: lendableToken.tokenContract,\\n                poolLiquidityToken: output.bankNodeToken,\\n                nodePublicKey: input.nodePublicKey,\\n                kycMode: input.kycMode\\n            })\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            address(bnplToken),\\n            msg.sender,\\n            output.bnplStakingPoolContract,\\n            input.tokensToBond\\n        );\\n\\n        IBNPLNodeStakingPool(output.bnplStakingPoolContract).initialize(\\n            address(bnplToken),\\n            output.bnplStakingPoolToken,\\n            output.bankNodeContract,\\n            address(this),\\n            msg.sender,\\n            input.tokensToBond,\\n            bnplKYCStore,\\n            IBNPLBankNode(output.bankNodeContract).kycDomainId()\\n        );\\n    }\\n\\n    /// @notice creates a new bonded bank node\\n    /// @param operator The node operator who will be assigned the permissions of bank node admin for the newly created bank node\\n    /// @param tokensToBond The number of BNPL tokens to bond for the node\\n    /// @param lendableTokenAddress Which lendable token will be lent to borrowers for this bank node (ex. the address of USDT's erc20 smart contract)\\n    /// @param nodeName the official name of the bank node\\n    /// @param website the official website of the bank node\\n    function createBondedBankNode(\\n        address operator,\\n        uint256 tokensToBond,\\n        address lendableTokenAddress,\\n        string calldata nodeName,\\n        string calldata website,\\n        string calldata configUrl,\\n        address nodePublicKey,\\n        uint32 kycMode\\n    ) external override nonReentrant returns (uint32 id) {\\n        require(tokensToBond >= minimumBankNodeBondedAmount && tokensToBond > 0, \\\"Not enough tokens bonded\\\");\\n        require(operator != address(0), \\\"operator cannot be 0\\\");\\n        require(lendableTokenAddress != address(0), \\\"lendableTokenAddress cannot be 0\\\");\\n\\n        bankNodeCount = bankNodeCount + 1;\\n        id = bankNodeCount;\\n\\n        BankNodeContracts memory createResult = _createBankNodeContracts(\\n            CreateBankNodeContractsFncInput({\\n                bankNodeId: bankNodeCount,\\n                operatorAdmin: operator,\\n                operator: operator,\\n                tokensToBond: tokensToBond,\\n                lendableTokenAddress: lendableTokenAddress,\\n                nodePublicKey: nodePublicKey,\\n                kycMode: kycMode\\n            })\\n        );\\n        BankNode storage bankNode = bankNodes[id];\\n        bankNode.id = id;\\n\\n        bankNodeAddressToId[createResult.bankNodeContract] = bankNode.id;\\n\\n        bankNode.bankNodeContract = createResult.bankNodeContract;\\n        bankNode.bankNodeToken = createResult.bankNodeToken;\\n\\n        bankNode.bnplStakingPoolContract = createResult.bnplStakingPoolContract;\\n        bankNode.bnplStakingPoolToken = createResult.bnplStakingPoolToken;\\n\\n        bankNode.lendableToken = lendableTokenAddress;\\n        bankNode.creator = msg.sender;\\n\\n        bankNode.createdAt = uint64(block.timestamp);\\n        bankNode.createBlock = block.number;\\n\\n        bankNode.nodeName = nodeName;\\n        bankNode.website = website;\\n        bankNode.configUrl = configUrl;\\n\\n        return id;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/BankNode/interfaces/IBNPLBankNode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IStakedToken} from \\\"../../Aave/interfaces/IStakedToken.sol\\\";\\nimport {IAaveLendingPool} from \\\"../../Aave/interfaces/IAaveLendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../Aave/interfaces/IAaveIncentivesController.sol\\\";\\n\\nimport {IMintableBurnableTokenUpgradeable} from \\\"../../ERC20/interfaces/IMintableBurnableTokenUpgradeable.sol\\\";\\nimport {IBNPLSwapMarket} from \\\"../../SwapMarket/interfaces/IBNPLSwapMarket.sol\\\";\\nimport {IBankNodeManager} from \\\"../../Management/interfaces/IBankNodeManager.sol\\\";\\n\\nimport {BNPLKYCStore} from \\\"../../Management/BNPLKYCStore.sol\\\";\\nimport {IBNPLNodeStakingPool} from \\\"./IBNPLNodeStakingPool.sol\\\";\\n\\n/**\\n * @dev Interface of the IBNPLBankNode standard\\n */\\ninterface IBankNodeInitializableV1 {\\n    struct BankNodeInitializeArgsV1 {\\n        uint32 bankNodeId;\\n        uint24 bnplSwapMarketPoolFee;\\n        address bankNodeManager;\\n        address operatorAdmin;\\n        address operator;\\n        address bnplToken;\\n        address bnplSwapMarket;\\n        uint16 unusedFundsLendingMode;\\n        address unusedFundsLendingContract;\\n        address unusedFundsLendingToken;\\n        address unusedFundsIncentivesController;\\n        address nodeStakingPool;\\n        address baseLiquidityToken;\\n        address poolLiquidityToken;\\n        address nodePublicKey;\\n        uint32 kycMode;\\n    }\\n\\n    function initialize(BankNodeInitializeArgsV1 calldata bankNodeInitConfig) external;\\n}\\n\\n/**\\n * @dev Interface of the IBNPLBankNode standard\\n */\\ninterface IBNPLBankNode is IBankNodeInitializableV1 {\\n    struct Loan {\\n        address borrower;\\n        uint256 loanAmount;\\n        uint64 totalLoanDuration;\\n        uint32 numberOfPayments;\\n        uint64 loanStartedAt;\\n        uint32 numberOfPaymentsMade;\\n        uint256 amountPerPayment;\\n        uint256 interestRatePerPayment;\\n        uint256 totalAmountPaid;\\n        uint256 remainingBalance;\\n        uint8 status; // 0 = ongoing, 1 = completed, 2 = overdue, 3 = written off\\n        uint64 statusUpdatedAt;\\n        uint256 loanRequestId;\\n    }\\n\\n    function unusedFundsLendingMode() external view returns (uint16);\\n\\n    function unusedFundsLendingContract() external view returns (IAaveLendingPool);\\n\\n    function unusedFundsLendingToken() external view returns (IERC20);\\n\\n    function unusedFundsIncentivesController() external view returns (IAaveIncentivesController);\\n\\n    function bnplSwapMarket() external view returns (IBNPLSwapMarket);\\n\\n    function bnplSwapMarketPoolFee() external view returns (uint24);\\n\\n    function bankNodeId() external view returns (uint32);\\n\\n    function getPoolTotalAssetsValue() external view returns (uint256);\\n\\n    function getPoolTotalLiquidAssetsValue() external view returns (uint256);\\n\\n    function nodeStakingPool() external view returns (IBNPLNodeStakingPool);\\n\\n    function bankNodeManager() external view returns (IBankNodeManager);\\n\\n    function baseTokenBalance() external view returns (uint256);\\n\\n    function getValueOfUnusedFundsLendingDeposits() external view returns (uint256);\\n\\n    function nodeOperatorBalance() external view returns (uint256);\\n\\n    function accountsReceivableFromLoans() external view returns (uint256);\\n\\n    function poolTokensCirculating() external view returns (uint256);\\n\\n    function loanRequestIndex() external view returns (uint256);\\n\\n    function onGoingLoanCount() external view returns (uint256);\\n\\n    function loanIndex() external view returns (uint256);\\n\\n    function totalAmountOfActiveLoans() external view returns (uint256);\\n\\n    function totalAmountOfLoans() external view returns (uint256);\\n\\n    function baseLiquidityToken() external view returns (IERC20);\\n\\n    function poolLiquidityToken() external view returns (IMintableBurnableTokenUpgradeable);\\n\\n    function interestPaidForLoan(uint256 loanId) external view returns (uint256);\\n\\n    function totalLossAllTime() external view returns (uint256);\\n\\n    function totalDonatedAllTime() external view returns (uint256);\\n\\n    function netEarnings() external view returns (uint256);\\n\\n    function totalLoansDefaulted() external view returns (uint256);\\n\\n    function nodePublicKey() external view returns (address);\\n\\n    function kycMode() external view returns (uint256);\\n\\n    function kycDomainId() external view returns (uint32);\\n\\n    function bnplKYCStore() external view returns (BNPLKYCStore);\\n\\n    function loanRequests(uint256 _loanRequestId)\\n        external\\n        view\\n        returns (\\n            address borrower,\\n            uint256 loanAmount,\\n            uint64 totalLoanDuration,\\n            uint32 numberOfPayments,\\n            uint256 amountPerPayment,\\n            uint256 interestRatePerPayment,\\n            uint8 status, // 0 = under review, 1 = rejected, 2 = cancelled, 3 = *unused for now*, 4 = approved\\n            uint64 statusUpdatedAt,\\n            address statusModifiedBy,\\n            uint256 interestRate,\\n            uint256 loanId,\\n            uint8 messageType, // 0 = plain text, 1 = encrypted with the public key\\n            string memory message,\\n            string memory uuid\\n        );\\n\\n    function loans(uint256 _loanId)\\n        external\\n        view\\n        returns (\\n            address borrower,\\n            uint256 loanAmount,\\n            uint64 totalLoanDuration,\\n            uint32 numberOfPayments,\\n            uint64 loanStartedAt,\\n            uint32 numberOfPaymentsMade,\\n            uint256 amountPerPayment,\\n            uint256 interestRatePerPayment,\\n            uint256 totalAmountPaid,\\n            uint256 remainingBalance,\\n            uint8 status, // 0 = ongoing, 1 = completed, 2 = overdue, 3 = written off\\n            uint64 statusUpdatedAt,\\n            uint256 loanRequestId\\n        );\\n\\n    function donate(uint256 depositAmount) external;\\n\\n    function addLiquidity(uint256 depositAmount) external;\\n\\n    function removeLiquidity(uint256 withdrawAmount) external;\\n\\n    function requestLoan(\\n        uint256 loanAmount,\\n        uint64 totalLoanDuration,\\n        uint32 numberOfPayments,\\n        uint256 amountPerPayment,\\n        uint8 messageType,\\n        string memory message,\\n        string memory uuid\\n    ) external;\\n\\n    function denyLoanRequest(uint256 loanRequestId) external;\\n\\n    function approveLoanRequest(uint256 loanRequestId) external;\\n\\n    function makeLoanPayment(uint256 loanId) external;\\n\\n    function reportOverdueLoan(uint256 loanId) external;\\n\\n    function withdrawNodeOperatorBalance(uint256 amount, address to) external;\\n\\n    function setKYCSettings(uint256 kycMode_, address nodePublicKey_) external;\\n\\n    function setKYCDomainMode(uint32 domain, uint256 mode) external;\\n\\n    function rewardToken() external view returns (IStakedToken);\\n\\n    function getRewardsBalance() external view returns (uint256);\\n\\n    function getCooldownStartTimestamp() external view returns (uint256);\\n\\n    function getStakedTokenRewardsBalance() external view returns (uint256);\\n\\n    function getStakedTokenBalance() external view returns (uint256);\\n\\n    function claimLendingTokenInterest() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/BankNode/interfaces/IBNPLNodeStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BNPLKYCStore} from \\\"../../Management/BNPLKYCStore.sol\\\";\\nimport {IUserTokenLockup} from \\\"./IUserTokenLockup.sol\\\";\\n\\n/**\\n * @dev Interface of the IBankNodeStakingPoolInitializableV1 standard\\n */\\ninterface IBankNodeStakingPoolInitializableV1 {\\n    function initialize(\\n        address bnplToken,\\n        address poolBNPLToken,\\n        address bankNodeContract,\\n        address bankNodeManagerContract,\\n        address tokenBonder,\\n        uint256 tokensToBond,\\n        BNPLKYCStore bnplKYCStore_,\\n        uint32 kycDomainId_\\n    ) external;\\n}\\n\\n/**\\n * @dev Interface of the IBankNode standard\\n */\\ninterface IBNPLNodeStakingPool is IBankNodeStakingPoolInitializableV1, IUserTokenLockup {\\n    function donate(uint256 donateAmount) external;\\n\\n    function donateNotCountedInTotal(uint256 donateAmount) external;\\n\\n    function bondTokens(uint256 bondAmount) external;\\n\\n    function unbondTokens() external;\\n\\n    function stakeTokens(uint256 stakeAmount) external;\\n\\n    function unstakeTokens(uint256 unstakeAmount) external;\\n\\n    function slash(uint256 slashAmount) external;\\n\\n    function getPoolTotalAssetsValue() external view returns (uint256);\\n\\n    function getPoolWithdrawConversion(uint256 withdrawAmount) external view returns (uint256);\\n\\n    function virtualPoolTokensCount() external view returns (uint256);\\n\\n    function baseTokenBalance() external view returns (uint256);\\n\\n    function getUnstakeLockupPeriod() external pure returns (uint256);\\n\\n    function tokensBondedAllTime() external view returns (uint256);\\n\\n    function poolTokenEffectiveSupply() external view returns (uint256);\\n\\n    function getNodeOwnerBNPLRewards() external view returns (uint256);\\n\\n    function getNodeOwnerPoolTokenRewards() external view returns (uint256);\\n\\n    function poolTokensCirculating() external view returns (uint256);\\n\\n    function isNodeDecomissioning() external view returns (bool);\\n\\n    function claimNodeOwnerPoolTokenRewards(address to) external;\\n}\\n\"\r\n    },\r\n    \"src/ERC20/interfaces/ITokenInitializableV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ITokenInitializableV1 standard\\n */\\ninterface ITokenInitializableV1 {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimalsValue,\\n        address minterAdmin,\\n        address minter\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/ProtocolDeploy/interfaces/IBNPLProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBankNodeManager} from \\\"../../Management/interfaces/IBankNodeManager.sol\\\";\\nimport {BNPLKYCStore} from \\\"../../Management/BNPLKYCStore.sol\\\";\\n\\ninterface IBNPLProtocolConfig {\\n    function networkId() external view returns (uint64);\\n\\n    function networkName() external view returns (string memory);\\n\\n    function bnplToken() external view returns (IERC20);\\n\\n    function upBeaconBankNodeManager() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNode() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeLendingPoolToken() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeStakingPool() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeStakingPoolToken() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeLendingRewards() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBNPLKYCStore() external view returns (UpgradeableBeacon);\\n\\n    function bankNodeManager() external view returns (IBankNodeManager);\\n}\\n\"\r\n    },\r\n    \"src/Management/interfaces/IBankNodeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBNPLProtocolConfig} from \\\"../../ProtocolDeploy/interfaces/IBNPLProtocolConfig.sol\\\";\\n\\nimport {BNPLKYCStore} from \\\"../BNPLKYCStore.sol\\\";\\nimport {BankNodeLendingRewards} from \\\"../../Rewards/PlatformRewards/BankNodeLendingRewards.sol\\\";\\n\\ninterface IBankNodeManager {\\n    struct LendableToken {\\n        address tokenContract;\\n        address swapMarket;\\n        uint24 swapMarketPoolFee;\\n        uint8 decimals;\\n        uint256 valueMultiplier; // USD_VALUE = amount * valueMultiplier / 10**18\\n        uint16 unusedFundsLendingMode;\\n        address unusedFundsLendingContract;\\n        address unusedFundsLendingToken;\\n        address unusedFundsIncentivesController;\\n        string symbol;\\n        string poolSymbol;\\n    }\\n\\n    struct BankNode {\\n        address bankNodeContract;\\n        address bankNodeToken;\\n        address bnplStakingPoolContract;\\n        address bnplStakingPoolToken;\\n        address lendableToken;\\n        address creator;\\n        uint32 id;\\n        uint64 createdAt;\\n        uint256 createBlock;\\n        string nodeName;\\n        string website;\\n        string configUrl;\\n    }\\n\\n    struct BankNodeDetail {\\n        uint256 totalAssetsValueBankNode;\\n        uint256 totalAssetsValueStakingPool;\\n        uint256 tokensCirculatingBankNode;\\n        uint256 tokensCirculatingStakingPool;\\n        uint256 totalLiquidAssetsValue;\\n        uint256 baseTokenBalanceBankNode;\\n        uint256 baseTokenBalanceStakingPool;\\n        uint256 accountsReceivableFromLoans;\\n        uint256 virtualPoolTokensCount;\\n        address baseLiquidityToken;\\n        address poolLiquidityToken;\\n        bool isNodeDecomissioning;\\n        uint256 nodeOperatorBalance;\\n        uint256 loanRequestIndex;\\n        uint256 loanIndex;\\n        uint256 valueOfUnusedFundsLendingDeposits;\\n        uint256 totalLossAllTime;\\n        uint256 onGoingLoanCount;\\n        uint256 totalTokensLocked;\\n        uint256 getUnstakeLockupPeriod;\\n        uint256 tokensBondedAllTime;\\n        uint256 poolTokenEffectiveSupply;\\n        uint256 nodeTotalStaked;\\n        uint256 nodeBondedBalance;\\n        uint256 nodeOwnerBNPLRewards;\\n        uint256 nodeOwnerPoolTokenRewards;\\n    }\\n\\n    struct BankNodeData {\\n        BankNode data;\\n        BankNodeDetail detail;\\n    }\\n\\n    struct CreateBankNodeContractsInput {\\n        uint32 bankNodeId;\\n        address operatorAdmin;\\n        address operator;\\n        address lendableTokenAddress;\\n    }\\n    struct CreateBankNodeContractsOutput {\\n        address bankNodeContract;\\n        address bankNodeToken;\\n        address bnplStakingPoolContract;\\n        address bnplStakingPoolToken;\\n    }\\n\\n    function bankNodeIdExists(uint32 bankNodeId) external view returns (uint256);\\n\\n    function getBankNodeContract(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeToken(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeStakingPoolContract(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeStakingPoolToken(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeLendableToken(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeLoansStatistic()\\n        external\\n        view\\n        returns (uint256 totalAmountOfAllActiveLoans, uint256 totalAmountOfAllLoans);\\n\\n    function bnplKYCStore() external view returns (BNPLKYCStore);\\n\\n    function initialize(\\n        IBNPLProtocolConfig _protocolConfig,\\n        address _configurator,\\n        uint256 _minimumBankNodeBondedAmount,\\n        uint256 _loanOverdueGracePeriod,\\n        BankNodeLendingRewards _bankNodeLendingRewards,\\n        BNPLKYCStore _bnplKYCStore\\n    ) external;\\n\\n    function enabledLendableTokens(address lendableTokenAddress) external view returns (uint8);\\n\\n    function lendableTokens(address lendableTokenAddress)\\n        external\\n        view\\n        returns (\\n            address tokenContract,\\n            address swapMarket,\\n            uint24 swapMarketPoolFee,\\n            uint8 decimals,\\n            uint256 valueMultiplier, //USD_VALUE = amount * valueMultiplier / 10**18\\n            uint16 unusedFundsLendingMode,\\n            address unusedFundsLendingContract,\\n            address unusedFundsLendingToken,\\n            address unusedFundsIncentivesController,\\n            string calldata symbol,\\n            string calldata poolSymbol\\n        );\\n\\n    function bankNodes(uint32 bankNodeId)\\n        external\\n        view\\n        returns (\\n            address bankNodeContract,\\n            address bankNodeToken,\\n            address bnplStakingPoolContract,\\n            address bnplStakingPoolToken,\\n            address lendableToken,\\n            address creator,\\n            uint32 id,\\n            uint64 createdAt,\\n            uint256 createBlock,\\n            string calldata nodeName,\\n            string calldata website,\\n            string calldata configUrl\\n        );\\n\\n    function bankNodeAddressToId(address bankNodeAddressTo) external view returns (uint32);\\n\\n    function minimumBankNodeBondedAmount() external view returns (uint256);\\n\\n    function loanOverdueGracePeriod() external view returns (uint256);\\n\\n    function bankNodeCount() external view returns (uint32);\\n\\n    function bnplToken() external view returns (IERC20);\\n\\n    function bankNodeLendingRewards() external view returns (BankNodeLendingRewards);\\n\\n    function protocolConfig() external view returns (IBNPLProtocolConfig);\\n\\n    function getBankNodeList(\\n        uint32 start,\\n        uint32 count,\\n        bool reverse\\n    ) external view returns (BankNodeData[] memory, uint32);\\n\\n    function getBankNodeDetail(address bankNode) external view returns (BankNodeDetail memory);\\n\\n    function addLendableToken(LendableToken calldata _lendableToken, uint8 enabled) external;\\n\\n    function setLendableTokenStatus(address tokenContract, uint8 enabled) external;\\n\\n    function setMinimumBankNodeBondedAmount(uint256 _minimumBankNodeBondedAmount) external;\\n\\n    function setLoanOverdueGracePeriod(uint256 _loanOverdueGracePeriod) external;\\n\\n    function createBondedBankNode(\\n        address operator,\\n        uint256 tokensToBond,\\n        address lendableTokenAddress,\\n        string calldata nodeName,\\n        string calldata website,\\n        string calldata configUrl,\\n        address nodePublicKey,\\n        uint32 kycMode\\n    ) external returns (uint32);\\n}\\n\"\r\n    },\r\n    \"src/Rewards/PlatformRewards/BankNodeLendingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/* Borrowed heavily from Synthetix\\n\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2021 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBankNodeManager} from \\\"../../Management/interfaces/IBankNodeManager.sol\\\";\\n\\nimport {BankNodeRewardSystem} from \\\"./BankNodeRewardSystem.sol\\\";\\n\\ncontract BankNodeLendingRewards is Initializable, BankNodeRewardSystem {\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(\\n        uint256 _defaultRewardsDuration,\\n        address _rewardsToken,\\n        address _bankNodeManager,\\n        address distributorAdmin,\\n        address managerAdmin\\n    ) external initializer {\\n        __ReentrancyGuard_init_unchained();\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        rewardsToken = IERC20(_rewardsToken);\\n        bankNodeManager = IBankNodeManager(_bankNodeManager);\\n        defaultRewardsDuration = _defaultRewardsDuration;\\n\\n        _setupRole(REWARDS_DISTRIBUTOR_ROLE, _bankNodeManager);\\n        _setupRole(REWARDS_DISTRIBUTOR_ROLE, distributorAdmin);\\n        _setupRole(REWARDS_DISTRIBUTOR_ADMIN_ROLE, distributorAdmin);\\n        _setRoleAdmin(REWARDS_DISTRIBUTOR_ROLE, REWARDS_DISTRIBUTOR_ADMIN_ROLE);\\n\\n        _setupRole(REWARDS_MANAGER, _bankNodeManager);\\n        _setupRole(REWARDS_MANAGER, managerAdmin);\\n        _setupRole(REWARDS_MANAGER_ROLE_ADMIN, managerAdmin);\\n        _setRoleAdmin(REWARDS_MANAGER, REWARDS_MANAGER_ROLE_ADMIN);\\n    }\\n\\n    function _bnplTokensStakedToBankNode(uint32 bankNodeId) internal view returns (uint256) {\\n        return\\n            rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(bankNodeId))\\n            );\\n    }\\n\\n    function getBNPLTokenDistribution(uint256 amount) external view returns (uint256[] memory) {\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint256[] memory bnplTokensPerNode = new uint256[](nodeCount);\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            amt = rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n            );\\n            bnplTokensPerNode[i] = amt;\\n            total += amt;\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            bnplTokensPerNode[i] = (bnplTokensPerNode[i] * amount) / total;\\n            i += 1;\\n        }\\n        return bnplTokensPerNode;\\n    }\\n\\n    function distributeBNPLTokensToBankNodes(uint256 amount)\\n        external\\n        onlyRole(REWARDS_DISTRIBUTOR_ROLE)\\n        returns (uint256)\\n    {\\n        require(amount > 0, \\\"cannot send 0\\\");\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint256[] memory bnplTokensPerNode = new uint256[](nodeCount);\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            if (getPoolLiquidityTokensStakedInRewards(i + 1) != 0) {\\n                amt = rewardsToken.balanceOf(\\n                    _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n                );\\n                bnplTokensPerNode[i] = amt;\\n                total += amt;\\n            }\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            amt = (bnplTokensPerNode[i] * amount) / total;\\n            if (amt != 0) {\\n                _notifyRewardAmount(i + 1, amt);\\n            }\\n            i += 1;\\n        }\\n        return total;\\n    }\\n\\n    function distributeBNPLTokensToBankNodes2(uint256 amount)\\n        external\\n        onlyRole(REWARDS_DISTRIBUTOR_ROLE)\\n        returns (uint256)\\n    {\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            total += rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n            );\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            amt =\\n                (rewardsToken.balanceOf(\\n                    _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n                ) * amount) /\\n                total;\\n            if (amt != 0) {\\n                _notifyRewardAmount(i + 1, amt);\\n            }\\n            i += 1;\\n        }\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Management/BNPLKYCStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\ncontract BNPLKYCStore is Initializable, ReentrancyGuardUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    mapping(uint32 => address) public publicKeys;\\n    mapping(uint256 => uint32) public domainPermissions;\\n    mapping(uint256 => uint32) public userKycStatuses;\\n    mapping(bytes32 => uint8) public proofUsed;\\n    mapping(uint32 => uint256) public domainKycMode;\\n\\n    uint32 public constant PROOF_MAGIC = 0xfc203827;\\n    uint32 public constant DOMAIN_ADMIN_PERM = 0xffff;\\n    uint32 public domainCount;\\n\\n    function encodeKYCUserDomainKey(uint32 domain, address user) internal pure returns (uint256) {\\n        return (uint256(uint160(user)) << 32) | uint256(domain);\\n    }\\n\\n    modifier onlyDomainAdmin(uint32 domain) {\\n        require(\\n            domainPermissions[encodeKYCUserDomainKey(domain, msg.sender)] == DOMAIN_ADMIN_PERM,\\n            \\\"User must be an admin for this domain to perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    function getDomainPermissions(uint32 domain, address user) external view returns (uint32) {\\n        return domainPermissions[encodeKYCUserDomainKey(domain, user)];\\n    }\\n\\n    function _setDomainPermissions(\\n        uint32 domain,\\n        address user,\\n        uint32 permissions\\n    ) internal {\\n        domainPermissions[encodeKYCUserDomainKey(domain, user)] = permissions;\\n    }\\n\\n    function getKYCStatusUser(uint32 domain, address user) public view returns (uint32) {\\n        return userKycStatuses[encodeKYCUserDomainKey(domain, user)];\\n    }\\n\\n    function _verifyProof(\\n        uint32 domain,\\n        address user,\\n        uint32 status,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        require(domain != 0 && domain <= domainCount, \\\"invalid domain\\\");\\n        require(publicKeys[domain] != address(0), \\\"this domain is disabled\\\");\\n        bytes32 proofHash = getKYCSignatureHash(domain, user, status, nonce);\\n        require(proofHash.toEthSignedMessageHash().recover(signature) == publicKeys[domain], \\\"invalid signature\\\");\\n        require(proofUsed[proofHash] == 0, \\\"proof already used\\\");\\n        proofUsed[proofHash] = 1;\\n    }\\n\\n    function _setKYCStatusUser(\\n        uint32 domain,\\n        address user,\\n        uint32 status\\n    ) internal {\\n        userKycStatuses[encodeKYCUserDomainKey(domain, user)] = status;\\n    }\\n\\n    function _orKYCStatusUser(\\n        uint32 domain,\\n        address user,\\n        uint32 status\\n    ) internal {\\n        userKycStatuses[encodeKYCUserDomainKey(domain, user)] |= status;\\n    }\\n\\n    function createNewKYCDomain(\\n        address admin,\\n        address publicKey,\\n        uint256 kycMode\\n    ) external returns (uint32) {\\n        require(admin != address(0), \\\"cannot create a kyc domain with an empty user\\\");\\n        uint32 id = domainCount + 1;\\n        domainCount = id;\\n        _setDomainPermissions(id, admin, DOMAIN_ADMIN_PERM);\\n        publicKeys[id] = publicKey;\\n        domainKycMode[id] = kycMode;\\n        return id;\\n    }\\n\\n    function setKYCDomainPublicKey(uint32 domain, address newPublicKey) external onlyDomainAdmin(domain) {\\n        publicKeys[domain] = newPublicKey;\\n    }\\n\\n    function setKYCDomainMode(uint32 domain, uint256 mode) external onlyDomainAdmin(domain) {\\n        domainKycMode[domain] = mode;\\n    }\\n\\n    function checkUserBasicBitwiseMode(\\n        uint32 domain,\\n        address user,\\n        uint256 mode\\n    ) external view returns (uint256) {\\n        require(domain != 0 && domain <= domainCount, \\\"invalid domain\\\");\\n        require(\\n            user != address(0) && ((domainKycMode[domain] & mode) == 0 || (mode & getKYCStatusUser(domain, user) != 0)),\\n            \\\"invalid user permissions\\\"\\n        );\\n        return 1;\\n    }\\n\\n    function setKYCStatusUser(\\n        uint32 domain,\\n        address user,\\n        uint32 status\\n    ) external onlyDomainAdmin(domain) {\\n        _setKYCStatusUser(domain, user, status);\\n    }\\n\\n    function getKYCSignaturePayload(\\n        uint32 domain,\\n        address user,\\n        uint32 status,\\n        uint256 nonce\\n    ) public pure returns (bytes memory) {\\n        return (\\n            abi.encode(\\n                ((uint256(PROOF_MAGIC) << 224) |\\n                    (uint256(uint160(user)) << 64) |\\n                    (uint256(domain) << 32) |\\n                    uint256(status)),\\n                nonce\\n            )\\n        );\\n    }\\n\\n    function getKYCSignatureHash(\\n        uint32 domain,\\n        address user,\\n        uint32 status,\\n        uint256 nonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(getKYCSignaturePayload(domain, user, status, nonce));\\n    }\\n\\n    function orKYCStatusWithProof(\\n        uint32 domain,\\n        address user,\\n        uint32 status,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _verifyProof(domain, user, status, nonce, signature);\\n        _orKYCStatusUser(domain, user, status);\\n    }\\n\\n    function clearKYCStatusWithProof(\\n        uint32 domain,\\n        address user,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _verifyProof(domain, user, 1, nonce, signature);\\n        _setKYCStatusUser(domain, user, 1);\\n    }\\n\\n    function initialize() external initializer nonReentrant {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Aave/interfaces/IStakedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IStakedToken {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/Aave/interfaces/IAaveLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/Aave/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport {IAaveDistributionManager} from \\\"./IAaveDistributionManager.sol\\\";\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/ERC20/interfaces/IMintableBurnableTokenUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IGenericMintableTo} from \\\"./IGenericMintableTo.sol\\\";\\nimport {IGenericBurnableFrom} from \\\"./IGenericBurnableFrom.sol\\\";\\n\\n/**\\n * @dev Interface of the IMintableTokenUpgradeable standard\\n */\\ninterface IMintableTokenUpgradeable is IGenericMintableTo, IERC20Upgradeable {\\n\\n}\\n\\n/**\\n * @dev Interface of the IMintableBurnableTokenUpgradeable standard\\n */\\ninterface IMintableBurnableTokenUpgradeable is IMintableTokenUpgradeable, IGenericBurnableFrom {\\n\\n}\\n\"\r\n    },\r\n    \"src/SwapMarket/interfaces/IBNPLSwapMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the IBNPLSwapMarket standard\\n */\\ninterface IBNPLSwapMarket {\\n    /// @title Router token swapping functionality\\n    /// @notice Functions for swapping tokens via Uniswap V3\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @return amounts The amount of the received token\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/Aave/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport {DistributionTypes} from \\\"../lib/DistributionTypes.sol\\\";\\n\\ninterface IAaveDistributionManager {\\n    event AssetConfigUpdated(address indexed asset, uint256 emission);\\n    event AssetIndexUpdated(address indexed asset, uint256 index);\\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n    event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param distributionEnd The end date timestamp\\n     **/\\n    function setDistributionEnd(uint256 distributionEnd) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @return The end of the distribution\\n     **/\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    /**\\n     * @dev for backwards compatibility with the previous DistributionManager used\\n     * @return The end of the distribution\\n     **/\\n    function DISTRIBUTION_END() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the data of an user on a distribution\\n     * @param user Address of the user\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The new index\\n     **/\\n    function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index, the emission per second and the last updated timestamp\\n     **/\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"src/Aave/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nlibrary DistributionTypes {\\n    struct AssetConfigInput {\\n        uint104 emissionPerSecond;\\n        uint256 totalStaked;\\n        address underlyingAsset;\\n    }\\n\\n    struct UserStakeInput {\\n        address underlyingAsset;\\n        uint256 stakedByUser;\\n        uint256 totalStaked;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/ERC20/interfaces/IGenericMintableTo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenericMintableTo {\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/ERC20/interfaces/IGenericBurnableFrom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenericBurnableFrom {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Rewards/PlatformRewards/BankNodeRewardSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/* Borrowed heavily from Synthetix\\n\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2021 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBankNodeManager} from \\\"../../Management/interfaces/IBankNodeManager.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract BankNodeRewardSystem is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant REWARDS_DISTRIBUTOR_ROLE = keccak256(\\\"REWARDS_DISTRIBUTOR_ROLE\\\");\\n    bytes32 public constant REWARDS_DISTRIBUTOR_ADMIN_ROLE = keccak256(\\\"REWARDS_DISTRIBUTOR_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant REWARDS_MANAGER = keccak256(\\\"REWARDS_MANAGER_ROLE\\\");\\n    bytes32 public constant REWARDS_MANAGER_ROLE_ADMIN = keccak256(\\\"REWARDS_MANAGER_ROLE_ADMIN\\\");\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    mapping(uint32 => uint256) public periodFinish;\\n    mapping(uint32 => uint256) public rewardRate;\\n    mapping(uint32 => uint256) public rewardsDuration;\\n    mapping(uint32 => uint256) public lastUpdateTime;\\n    mapping(uint32 => uint256) public rewardPerTokenStored;\\n\\n    mapping(uint256 => uint256) public userRewardPerTokenPaid;\\n    mapping(uint256 => uint256) public rewards;\\n    mapping(uint32 => uint256) public _totalSupply;\\n    mapping(uint256 => uint256) private _balances;\\n\\n    IBankNodeManager public bankNodeManager;\\n    IERC20 public rewardsToken;\\n    uint256 public defaultRewardsDuration;\\n\\n    function encodeUserBankNodeKey(address user, uint32 bankNodeId) public pure returns (uint256) {\\n        return (uint256(uint160(user)) << 32) | uint256(bankNodeId);\\n    }\\n\\n    function decodeUserBankNodeKey(uint256 stakingVaultKey) external pure returns (address user, uint32 bankNodeId) {\\n        bankNodeId = uint32(stakingVaultKey & 0xffffffff);\\n        user = address(uint160(stakingVaultKey >> 32));\\n    }\\n\\n    function encodeVaultValue(uint256 amount, uint40 depositTime) external pure returns (uint256) {\\n        require(\\n            amount <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff,\\n            \\\"cannot encode amount larger than 2^216-1\\\"\\n        );\\n        return (amount << 40) | uint256(depositTime);\\n    }\\n\\n    function decodeVaultValue(uint256 vaultValue) external pure returns (uint256 amount, uint40 depositTime) {\\n        depositTime = uint40(vaultValue & 0xffffffffff);\\n        amount = vaultValue >> 40;\\n    }\\n\\n    function _ensureAddressIERC20Not0(address tokenAddress) internal pure returns (IERC20) {\\n        require(tokenAddress != address(0), \\\"invalid token address!\\\");\\n        return IERC20(tokenAddress);\\n    }\\n\\n    function _ensureContractAddressNot0(address contractAddress) internal pure returns (address) {\\n        require(contractAddress != address(0), \\\"invalid token address!\\\");\\n        return contractAddress;\\n    }\\n\\n    function getStakingTokenForBankNode(uint32 bankNodeId) internal view returns (IERC20) {\\n        return _ensureAddressIERC20Not0(bankNodeManager.getBankNodeToken(bankNodeId));\\n    }\\n\\n    function getPoolLiquidityTokensStakedInRewards(uint32 bankNodeId) public view returns (uint256) {\\n        return getStakingTokenForBankNode(bankNodeId).balanceOf(address(this));\\n    }\\n\\n    function getInternalValueForStakedTokenAmount(uint256 amount) internal pure returns (uint256) {\\n        return amount;\\n    }\\n\\n    function getStakedTokenAmountForInternalValue(uint256 amount) internal pure returns (uint256) {\\n        return amount;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply(uint32 bankNodeId) external view returns (uint256) {\\n        return getStakedTokenAmountForInternalValue(_totalSupply[bankNodeId]);\\n    }\\n\\n    function balanceOf(address account, uint32 bankNodeId) external view returns (uint256) {\\n        return getStakedTokenAmountForInternalValue(_balances[encodeUserBankNodeKey(account, bankNodeId)]);\\n    }\\n\\n    function lastTimeRewardApplicable(uint32 bankNodeId) public view returns (uint256) {\\n        return block.timestamp < periodFinish[bankNodeId] ? block.timestamp : periodFinish[bankNodeId];\\n    }\\n\\n    function rewardPerToken(uint32 bankNodeId) public view returns (uint256) {\\n        if (_totalSupply[bankNodeId] == 0) {\\n            return rewardPerTokenStored[bankNodeId];\\n        }\\n        return\\n            rewardPerTokenStored[bankNodeId].add(\\n                lastTimeRewardApplicable(bankNodeId)\\n                    .sub(lastUpdateTime[bankNodeId])\\n                    .mul(rewardRate[bankNodeId])\\n                    .mul(1e18)\\n                    .div(_totalSupply[bankNodeId])\\n            );\\n\\n        /*\\n        return\\n            rewardPerTokenStored[bankNodeId] +\\n            (lastTimeRewardApplicable(bankNodeId) -\\n                ((lastUpdateTime[bankNodeId] * rewardRate[bankNodeId] * 1e18) / (_totalSupply[bankNodeId])));*/\\n    }\\n\\n    function earned(address account, uint32 bankNodeId) public view returns (uint256) {\\n        uint256 key = encodeUserBankNodeKey(account, bankNodeId);\\n        return\\n            ((_balances[key] * (rewardPerToken(bankNodeId) - (userRewardPerTokenPaid[key]))) / 1e18) + (rewards[key]);\\n    }\\n\\n    function getRewardForDuration(uint32 bankNodeId) external view returns (uint256) {\\n        return rewardRate[bankNodeId] * rewardsDuration[bankNodeId];\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint32 bankNodeId, uint256 tokenAmount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender, bankNodeId)\\n    {\\n        require(tokenAmount > 0, \\\"Cannot stake 0\\\");\\n        uint256 amount = getInternalValueForStakedTokenAmount(tokenAmount);\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(getStakedTokenAmountForInternalValue(amount) == tokenAmount, \\\"token amount too high!\\\");\\n        _totalSupply[bankNodeId] += amount;\\n        _balances[encodeUserBankNodeKey(msg.sender, bankNodeId)] += amount;\\n        getStakingTokenForBankNode(bankNodeId).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n        emit Staked(msg.sender, bankNodeId, tokenAmount);\\n    }\\n\\n    function withdraw(uint32 bankNodeId, uint256 tokenAmount) public nonReentrant updateReward(msg.sender, bankNodeId) {\\n        require(tokenAmount > 0, \\\"Cannot withdraw 0\\\");\\n        uint256 amount = getInternalValueForStakedTokenAmount(tokenAmount);\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(getStakedTokenAmountForInternalValue(amount) == tokenAmount, \\\"token amount too high!\\\");\\n\\n        _totalSupply[bankNodeId] -= amount;\\n        _balances[encodeUserBankNodeKey(msg.sender, bankNodeId)] -= amount;\\n        getStakingTokenForBankNode(bankNodeId).safeTransfer(msg.sender, tokenAmount);\\n        emit Withdrawn(msg.sender, bankNodeId, tokenAmount);\\n    }\\n\\n    function getReward(uint32 bankNodeId) public nonReentrant updateReward(msg.sender, bankNodeId) {\\n        uint256 reward = rewards[encodeUserBankNodeKey(msg.sender, bankNodeId)];\\n\\n        if (reward > 0) {\\n            rewards[encodeUserBankNodeKey(msg.sender, bankNodeId)] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, bankNodeId, reward);\\n        }\\n    }\\n\\n    function exit(uint32 bankNodeId) external {\\n        withdraw(\\n            bankNodeId,\\n            getStakedTokenAmountForInternalValue(_balances[encodeUserBankNodeKey(msg.sender, bankNodeId)])\\n        );\\n        getReward(bankNodeId);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function _notifyRewardAmount(uint32 bankNodeId, uint256 reward) internal updateReward(address(0), bankNodeId) {\\n        if (rewardsDuration[bankNodeId] == 0) {\\n            rewardsDuration[bankNodeId] = defaultRewardsDuration;\\n        }\\n        if (block.timestamp >= periodFinish[bankNodeId]) {\\n            rewardRate[bankNodeId] = reward / (rewardsDuration[bankNodeId]);\\n        } else {\\n            uint256 remaining = periodFinish[bankNodeId] - (block.timestamp);\\n            uint256 leftover = remaining * (rewardRate[bankNodeId]);\\n            rewardRate[bankNodeId] = (reward + leftover) / (rewardsDuration[bankNodeId]);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(rewardRate[bankNodeId] <= (balance / rewardsDuration[bankNodeId]), \\\"Provided reward too high\\\");\\n\\n        lastUpdateTime[bankNodeId] = block.timestamp;\\n        periodFinish[bankNodeId] = block.timestamp + (rewardsDuration[bankNodeId]);\\n        emit RewardAdded(bankNodeId, reward);\\n    }\\n\\n    function notifyRewardAmount(uint32 bankNodeId, uint256 reward) external onlyRole(REWARDS_DISTRIBUTOR_ROLE) {\\n        _notifyRewardAmount(bankNodeId, reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    /* function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n        require(tokenAddress != address(stakingToken[]), \\\"Cannot withdraw the staking token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }*/\\n\\n    function setRewardsDuration(uint32 bankNodeId, uint256 _rewardsDuration) external onlyRole(REWARDS_MANAGER) {\\n        require(\\n            block.timestamp > periodFinish[bankNodeId],\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration[bankNodeId] = _rewardsDuration;\\n        emit RewardsDurationUpdated(bankNodeId, rewardsDuration[bankNodeId]);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account, uint32 bankNodeId) {\\n        if (rewardsDuration[bankNodeId] == 0) {\\n            rewardsDuration[bankNodeId] = defaultRewardsDuration;\\n        }\\n        rewardPerTokenStored[bankNodeId] = rewardPerToken(bankNodeId);\\n        lastUpdateTime[bankNodeId] = lastTimeRewardApplicable(bankNodeId);\\n        if (account != address(0)) {\\n            uint256 key = encodeUserBankNodeKey(msg.sender, bankNodeId);\\n            rewards[key] = earned(msg.sender, bankNodeId);\\n            userRewardPerTokenPaid[key] = rewardPerTokenStored[bankNodeId];\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint32 indexed bankNodeId, uint256 reward);\\n    event Staked(address indexed user, uint32 indexed bankNodeId, uint256 amount);\\n    event Withdrawn(address indexed user, uint32 indexed bankNodeId, uint256 amount);\\n    event RewardPaid(address indexed user, uint32 indexed bankNodeId, uint256 reward);\\n    event RewardsDurationUpdated(uint32 indexed bankNodeId, uint256 newDuration);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/BankNode/interfaces/IUserTokenLockup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the IUserTokenLockup standard\\n */\\ninterface IUserTokenLockup {\\n    function totalTokensLocked() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIGURE_NODE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarket\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"swapMarketPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"unusedFundsLendingMode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsIncentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolSymbol\",\"type\":\"string\"}],\"internalType\":\"struct IBankNodeManager.LendableToken\",\"name\":\"_lendableToken\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"}],\"name\":\"addLendableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bankNodeAddressToId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankNodeCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"bankNodeIdExists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankNodeLendingRewards\",\"outputs\":[{\"internalType\":\"contract BankNodeLendingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"bankNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bankNodeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankNodeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"createBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"configUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnplKYCStore\",\"outputs\":[{\"internalType\":\"contract BNPLKYCStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnplToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToBond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"configUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nodePublicKey\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"kycMode\",\"type\":\"uint32\"}],\"name\":\"createBondedBankNode\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledLendableTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bankNode\",\"type\":\"address\"}],\"name\":\"getBankNodeDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAssetsValueBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetsValueStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCirculatingBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCirculatingStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidAssetsValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalanceBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalanceStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsReceivableFromLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPoolTokensCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNodeDecomissioning\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nodeOperatorBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanRequestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueOfUnusedFundsLendingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLossAllTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onGoingLoanCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getUnstakeLockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBondedAllTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenEffectiveSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeTotalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeBondedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeOwnerBNPLRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeOwnerPoolTokenRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct IBankNodeManager.BankNodeDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeLendableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"getBankNodeList\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bankNodeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankNodeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"createBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"configUrl\",\"type\":\"string\"}],\"internalType\":\"struct IBankNodeManager.BankNode\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAssetsValueBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetsValueStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCirculatingBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensCirculatingStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidAssetsValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalanceBankNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenBalanceStakingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountsReceivableFromLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPoolTokensCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNodeDecomissioning\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nodeOperatorBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanRequestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueOfUnusedFundsLendingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLossAllTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onGoingLoanCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getUnstakeLockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBondedAllTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenEffectiveSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeTotalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeBondedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeOwnerBNPLRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeOwnerPoolTokenRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct IBankNodeManager.BankNodeDetail\",\"name\":\"detail\",\"type\":\"tuple\"}],\"internalType\":\"struct IBankNodeManager.BankNodeData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBankNodeLoansStatistic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOfAllActiveLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfAllLoans\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeStakingPoolContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeStakingPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBNPLProtocolConfig\",\"name\":\"_protocolConfig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBankNodeBondedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanOverdueGracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract BankNodeLendingRewards\",\"name\":\"_bankNodeLendingRewards\",\"type\":\"address\"},{\"internalType\":\"contract BNPLKYCStore\",\"name\":\"_bnplKYCStore\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarket\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"swapMarketPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"unusedFundsLendingMode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsIncentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanOverdueGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBankNodeBondedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolConfig\",\"outputs\":[{\"internalType\":\"contract IBNPLProtocolConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"}],\"name\":\"setLendableTokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanOverdueGracePeriod\",\"type\":\"uint256\"}],\"name\":\"setLoanOverdueGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBankNodeBondedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumBankNodeBondedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BankNodeManager", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}