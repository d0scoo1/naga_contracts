{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @title Represents an ownable resource.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param addr The owner of the smart contract\r\n     */\r\n    constructor (address addr) {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        _owner = addr;\r\n        emit OwnershipTransferred(address(0), addr);\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier indicates that the function can only be called by the owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Only owner requirement\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the address specified.\r\n     * @param addr Specifies the address of the new owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function transferOwnership (address addr) public onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        emit OwnershipTransferred(_owner, addr);\r\n        _owner = addr;\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys the smart contract.\r\n     * @param addr The payable address of the recipient.\r\n     */\r\n    function destroy(address payable addr) public virtual onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the address of the owner.\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address specified is the owner of the resource.\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return addr == _owner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Represents a controllable resource.\r\n */\r\ncontract Controllable is Ownable {\r\n    // The address of the controller\r\n    address internal _controllerAddress;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the smart contract\r\n     * @param controllerAddr The address of the controller\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr) Ownable (ownerAddr) {\r\n        require(controllerAddr != address(0), \"Controller address required\");\r\n        require(controllerAddr != ownerAddr, \"Owner cannot be the Controller\");\r\n        _controllerAddress = controllerAddr;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if the sender is not the controller\r\n     */\r\n    modifier onlyController() {\r\n        require(msg.sender == _controllerAddress, \"Unauthorized controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Makes sure the sender is either the owner of the contract or the controller\r\n     */\r\n    modifier onlyOwnerOrController() {\r\n        require(msg.sender == _controllerAddress || msg.sender == _owner, \"Only owner or controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the controller\r\n     * @dev This function can be called by the owner only\r\n     * @param controllerAddr The address of the controller\r\n     */\r\n    function setController (address controllerAddr) public onlyOwner {\r\n        // Checks\r\n        require(controllerAddr != address(0), \"Controller address required\");\r\n        require(controllerAddr != _owner, \"Owner cannot be the Controller\");\r\n        require(controllerAddr != _controllerAddress, \"Controller already set\");\r\n\r\n        // State changes\r\n        _controllerAddress = controllerAddr;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the address of the controller\r\n     * @return Returns an address\r\n     */\r\n    function getControllerAddress () public view returns (address) {\r\n        return _controllerAddress;\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Defines the interface for whitelisting addresses.\r\n */\r\ninterface IAddressWhitelist {\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns 1 if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) external view returns (bool);\r\n\r\n    /**\r\n     * This event is triggered when a new address is whitelisted.\r\n     * @param addr The address that was whitelisted\r\n     */\r\n    event OnAddressEnabled(address addr);\r\n\r\n    /**\r\n     * This event is triggered when an address is disabled.\r\n     * @param addr The address that was disabled\r\n     */\r\n    event OnAddressDisabled(address addr);\r\n}\r\n\r\n/**\r\n * @title This contract allows you to manage configuration settings of all crosschain providers supported by the platform.\r\n */\r\ncontract CrosschainProviderConfigManager is Controllable {\r\n    // Defines the settings of each route\r\n    struct ConfigSetting {\r\n        address routerAddress;\r\n        bytes routingInfo;\r\n    }\r\n\r\n    // The settings of each crosschain, cross-provider route\r\n    mapping (bytes32 => ConfigSetting) private _routingData;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the vault\r\n     * @param controllerAddr The controller of the vault\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr) Controllable (ownerAddr, controllerAddr) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the configuration of the provider specified.\r\n     * @dev This function can be called by the contract owner only.\r\n     * @param key The routing key\r\n     * @param routerAddress The router address for the source token specified.\r\n     * @param routingInfo The provider configuration\r\n     */\r\n    function setRoute (bytes32 key, address routerAddress, bytes memory routingInfo) public onlyOwnerOrController {\r\n        require(key != bytes32(0), \"Key required\");\r\n        require(routerAddress != address(0), \"Router address required\");\r\n        require(routingInfo.length > 0, \"Routing info required\");\r\n\r\n        _routingData[key] = ConfigSetting(routerAddress, routingInfo);\r\n    }\r\n\r\n    /**\r\n     * @notice Builds the routing key based on the parameters specified.\r\n     * @param tokenAddr The hash of the token address\r\n     * @param provider The hash of the crosschain provider. It could be Anyswap, LayerZero, etc.\r\n     * @param foreignNetwork The hash of the foreign network or chain. It could be Avalanche, Fantom, etc.\r\n     * @return Returns a key\r\n     */\r\n    function buildKey (address tokenAddr, bytes32 provider, bytes32 foreignNetwork) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(provider, foreignNetwork, tokenAddr));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the routing configuration of the provider specified.\r\n     * @param key The routing key of the provider\r\n     * @return routerAddress The router address for the key specified\r\n     * @return routingInfo The routing settings for the key specified\r\n     */\r\n    function getRoute (bytes32 key) public view returns (address routerAddress, bytes memory routingInfo) {\r\n        routerAddress = _routingData[key].routerAddress;\r\n        routingInfo = _routingData[key].routingInfo;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Contract for whitelisting addresses\r\n */\r\ncontract AddressWhitelist is IAddressWhitelist, Ownable {\r\n    mapping (address => bool) internal whitelistedAddresses;\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param ownerAddr The address of the owner\r\n     */\r\n    constructor (address ownerAddr) Ownable (ownerAddr) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) public override onlyOwner {\r\n        require(!whitelistedAddresses[addr], \"Already enabled\");\r\n        whitelistedAddresses[addr] = true;\r\n        emit OnAddressEnabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) public override onlyOwner {\r\n        require(whitelistedAddresses[addr], \"Already disabled\");\r\n        whitelistedAddresses[addr] = false;\r\n        emit OnAddressDisabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns true if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) public view override returns (bool) {\r\n        return whitelistedAddresses[addr];\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    /**\r\n    * Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering.\r\n     * One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0\r\n     * and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Returns the total number of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * Gets the balance of the address specified.\r\n    * @param addr The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address addr) external view returns (uint256);\r\n\r\n    /**\r\n     * Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * This event is triggered when a given amount of tokens is sent to an address.\r\n     * @param from The address of the sender\r\n     * @param to The address of the receiver\r\n     * @param value The amount transferred\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * This event is triggered when a given address is approved to spend a specific amount of tokens\r\n     * on behalf of the sender.\r\n     * @param owner The owner of the token\r\n     * @param spender The spender\r\n     * @param value The amount to transfer\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Represents a crosschain provider.\r\n */\r\nabstract contract BaseProvider is Controllable {\r\n    CrosschainProviderConfigManager public configManager;\r\n    AddressWhitelist internal _whitelist;\r\n    \r\n    event OnCrosschainTransfer (address routerAddress, uint256 destinationChainId, address fromAddress, address toAddress, uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the vault\r\n     * @param controllerAddr The controller of the vault\r\n     * @param newConfigManager The config manager\r\n     * @param newWhitelist The whitelist\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr, CrosschainProviderConfigManager newConfigManager, AddressWhitelist newWhitelist) Controllable (ownerAddr, controllerAddr) {\r\n        configManager = newConfigManager;\r\n        _whitelist = newWhitelist;\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier throws if the sender is not whitelisted, or if the whitelist is not set.\r\n     */\r\n    modifier onlyIfWhitelistedSender () {\r\n        require(address(_whitelist) != address(0), \"Whitelist not set\");\r\n        require(_whitelist.isWhitelistedAddress(msg.sender), \"Sender not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Approves the router to spend the amount of tokens specified\r\n     * @param tokenInterface The interface of the ERC20\r\n     * @param routerAddr The address of the router\r\n     * @param spenderAmount The spender amount granted to the router\r\n     */\r\n    function approveRouter (IERC20 tokenInterface, address routerAddr, uint256 spenderAmount) public onlyController {\r\n        require(tokenInterface.approve(routerAddr, spenderAmount), \"Approval failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes allowance on the router address specified specified\r\n     * @param tokenInterface The interface of the ERC20\r\n     * @param routerAddr The address of the router\r\n     */\r\n    function revokeRouter (IERC20 tokenInterface, address routerAddr) public onlyController {\r\n        require(tokenInterface.approve(routerAddr, 0), \"Revoke failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a crosschain transfer.\r\n     * @param underlyingTokenInterface The interface of the ERC20\r\n     * @param destinationAddr The destination address\r\n     * @param transferAmount The transfer amount\r\n     * @param foreignNetwork The hash of the remote network/chain\r\n     */\r\n    function executeTransfer (IERC20 underlyingTokenInterface, address destinationAddr, uint256 transferAmount, bytes32 foreignNetwork) public virtual;\r\n\r\n    /**\r\n     * @notice Gets the hash of the provider\r\n     * @return The hash of the provider\r\n     */\r\n    function getProviderHash() public pure virtual returns (bytes32);\r\n}\r\n\r\ninterface IAnyswapV5Router {\r\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Crosschain provider for Anyswap/Multichain\r\n */\r\ncontract MultichainProvider is BaseProvider {\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the vault\r\n     * @param controllerAddr The controller of the vault\r\n     * @param newConfigManager The config manager\r\n     * @param newWhitelist The whitelist\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr, CrosschainProviderConfigManager newConfigManager, AddressWhitelist newWhitelist)\r\n    BaseProvider (ownerAddr, controllerAddr, newConfigManager, newWhitelist) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a crosschain transfer.\r\n     * @param underlyingTokenInterface The interface of the ERC20\r\n     * @param destinationAddr The destination address\r\n     * @param transferAmount The transfer amount\r\n     * @param foreignNetwork The hash of the remote network/chain\r\n     */\r\n    function executeTransfer (IERC20 underlyingTokenInterface, address destinationAddr, uint256 transferAmount, bytes32 foreignNetwork)\r\n    public override onlyIfWhitelistedSender {\r\n        // Checks\r\n        require(destinationAddr != address(0), \"Destination address required\");\r\n        require(transferAmount > 0, \"Amount must be greater than zero\");\r\n        require(foreignNetwork != bytes32(0), \"Foreign network required\");\r\n\r\n        bytes32 key = configManager.buildKey(address(underlyingTokenInterface), getProviderHash(), foreignNetwork);\r\n\r\n        // Get the parameters/config for the routing key specified\r\n        (address routerAddress, bytes memory routingInfo) = configManager.getRoute(key);\r\n\r\n        // Parameters may vary depending on the provider as well as on the platform and/or token to transfer.\r\n        // Thus the only way to grab the parameters is by reading bytes in the format expected by this provider.\r\n        uint256 destinationChainId;\r\n        address anyTokenAddress;\r\n\r\n        // Read the provider-specific payload. These are the parameters we need for Anyswap.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            destinationChainId := mload(add(routingInfo, 0x20))\r\n            anyTokenAddress := mload(add(routingInfo, 0x40))\r\n        }\r\n\r\n        // Validate the payload\r\n        require(anyTokenAddress != address(0), \"Invalid AnyToken address\");\r\n        require(destinationChainId > 0, \"Invalid destination chain\");\r\n\r\n        // Check the balance\r\n        uint256 currentBalance = underlyingTokenInterface.balanceOf(address(this));\r\n        require(currentBalance >= transferAmount, \"Insufficient balance\");\r\n\r\n        // Run the crosschain transfer\r\n        IAnyswapV5Router(routerAddress).anySwapOutUnderlying(anyTokenAddress, destinationAddr, transferAmount, destinationChainId);\r\n\r\n        // Check the balance\r\n        uint256 newBalance = underlyingTokenInterface.balanceOf(address(this));\r\n        require(newBalance == currentBalance - transferAmount, \"Balance mismatch after transfer\");\r\n\r\n        // Emit the crosschain transfer event\r\n        emit OnCrosschainTransfer(routerAddress, destinationChainId, address(this), destinationAddr, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the hash of the provider\r\n     * @return The hash of the provider\r\n     */\r\n    function getProviderHash() public pure override returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"Anyswap/Multichain\"));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllerAddr\",\"type\":\"address\"},{\"internalType\":\"contract CrosschainProviderConfigManager\",\"name\":\"newConfigManager\",\"type\":\"address\"},{\"internalType\":\"contract AddressWhitelist\",\"name\":\"newWhitelist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCrosschainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spenderAmount\",\"type\":\"uint256\"}],\"name\":\"approveRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configManager\",\"outputs\":[{\"internalType\":\"contract CrosschainProviderConfigManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingTokenInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"foreignNetwork\",\"type\":\"bytes32\"}],\"name\":\"executeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenInterface\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"}],\"name\":\"revokeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerAddr\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultichainProvider", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c692d583567cda0fde14cd3d6136c2623202ed68000000000000000000000000ca8d52bd76a0b09a2df5ccf49ab4fcab7611bbcc0000000000000000000000003e3ae6472f14066f3c7a393e9664ddc75d0133e60000000000000000000000006a021d4fb9cf0da44af3128f4fa69699e6c8e912", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac7968ee3cae9a0233645ac7741d731565d267f9ef4064f3b67e67508b1ecc6e"}]}