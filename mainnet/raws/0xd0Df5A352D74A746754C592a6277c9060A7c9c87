{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DefiRound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/IDefiRound.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\n\\ncontract DefiRound is IDefiRound, Ownable {\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // solhint-disable-next-line\\n    address public immutable WETH;\\n    address public immutable override treasury;\\n    OversubscriptionRate public overSubscriptionRate;\\n    mapping(address => uint256) public override totalSupply;\\n    // account -> accountData\\n    mapping(address => AccountData) private accountData;\\n    mapping(address => RateData) private tokenRates;\\n\\n    //Token -> oracle, genesis\\n    mapping(address => SupportedTokenData) private tokenSettings;\\n\\n    EnumerableSet.AddressSet private supportedTokens;\\n    EnumerableSet.AddressSet private configuredTokenRates;\\n    STAGES public override currentStage;\\n\\n    WhitelistSettings public whitelistSettings;\\n    uint256 public lastLookExpiration = type(uint256).max;\\n    uint256 private immutable maxTotalValue;\\n    bool private stage1Locked;\\n\\n    constructor(\\n        // solhint-disable-next-line\\n        address _WETH,\\n        address _treasury,\\n        uint256 _maxTotalValue\\n    ) public {\\n        require(_WETH != address(0), \\\"INVALID_WETH\\\");\\n        require(_treasury != address(0), \\\"INVALID_TREASURY\\\");\\n        require(_maxTotalValue > 0, \\\"INVALID_MAXTOTAL\\\");\\n\\n        WETH = _WETH;\\n        treasury = _treasury;\\n        currentStage = STAGES.STAGE_1;\\n\\n        maxTotalValue = _maxTotalValue;\\n    }\\n\\n    function deposit(TokenData calldata tokenInfo, bytes32[] memory proof)\\n        external\\n        payable\\n        override\\n    {\\n        require(currentStage == STAGES.STAGE_1, \\\"DEPOSITS_NOT_ACCEPTED\\\");\\n        require(!stage1Locked, \\\"DEPOSITS_LOCKED\\\");\\n\\n        if (whitelistSettings.enabled) {\\n            require(\\n                verifyDepositor(msg.sender, whitelistSettings.root, proof),\\n                \\\"PROOF_INVALID\\\"\\n            );\\n        }\\n\\n        TokenData memory data = tokenInfo;\\n        address token = data.token;\\n        uint256 tokenAmount = data.amount;\\n        require(supportedTokens.contains(token), \\\"UNSUPPORTED_TOKEN\\\");\\n        require(tokenAmount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        // Convert ETH to WETH if ETH is passed in, otherwise treat WETH as a regular ERC20\\n        if (token == WETH && msg.value > 0) {\\n            require(tokenAmount == msg.value, \\\"INVALID_MSG_VALUE\\\");\\n            IWETH(WETH).deposit{value: tokenAmount}();\\n        } else {\\n            require(msg.value == 0, \\\"NO_ETH\\\");\\n        }\\n\\n        AccountData storage tokenAccountData = accountData[msg.sender];\\n\\n        if (tokenAccountData.token == address(0)) {\\n            tokenAccountData.token = token;\\n        }\\n\\n        require(tokenAccountData.token == token, \\\"SINGLE_ASSET_DEPOSITS\\\");\\n\\n        tokenAccountData.initialDeposit = tokenAccountData.initialDeposit.add(\\n            tokenAmount\\n        );\\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.add(\\n            tokenAmount\\n        );\\n\\n        require(\\n            tokenAccountData.currentBalance <= tokenSettings[token].maxLimit,\\n            \\\"MAX_LIMIT_EXCEEDED\\\"\\n        );\\n\\n        // No need to transfer from msg.sender since is ETH was converted to WETH\\n        if (!(token == WETH && msg.value > 0)) {\\n            IERC20(token).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenAmount\\n            );\\n        }\\n\\n        if (_totalValue() >= maxTotalValue) {\\n            stage1Locked = true;\\n        }\\n\\n        emit Deposited(msg.sender, tokenInfo);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        require(msg.sender == WETH);\\n    }\\n\\n    //We disallow withdrawal\\n    /*\\n    function withdraw(TokenData calldata tokenInfo, bool asETH)\\n        external\\n        override\\n    {\\n        require(currentStage == STAGES.STAGE_2, \\\"WITHDRAWS_NOT_ACCEPTED\\\");\\n        require(!_isLastLookComplete(), \\\"WITHDRAWS_EXPIRED\\\");\\n\\n        TokenData memory data = tokenInfo;\\n        address token = data.token;\\n        uint256 tokenAmount = data.amount;\\n        require(supportedTokens.contains(token), \\\"UNSUPPORTED_TOKEN\\\");\\n        require(tokenAmount > 0, \\\"INVALID_AMOUNT\\\");\\n        AccountData storage tokenAccountData = accountData[msg.sender];\\n        require(token == tokenAccountData.token, \\\"INVALID_TOKEN\\\");\\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.sub(\\n            tokenAmount\\n        );\\n        // set the data back in the mapping, otherwise updates are not saved\\n        accountData[msg.sender] = tokenAccountData;\\n\\n        // Don't transfer WETH, WETH is converted to ETH and sent to the recipient\\n        if (token == WETH && asETH) {\\n            IWETH(WETH).withdraw(tokenAmount);\\n            msg.sender.sendValue(tokenAmount);\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, tokenAmount);\\n        }\\n\\n        emit Withdrawn(msg.sender, tokenInfo, asETH);\\n    }\\n    */\\n\\n    function configureWhitelist(WhitelistSettings memory settings)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        whitelistSettings = settings;\\n        emit WhitelistConfigured(settings);\\n    }\\n\\n    function addSupportedTokens(SupportedTokenData[] calldata tokensToSupport)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 tokensLength = tokensToSupport.length;\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            SupportedTokenData memory data = tokensToSupport[i];\\n            require(supportedTokens.add(data.token), \\\"TOKEN_EXISTS\\\");\\n\\n            tokenSettings[data.token] = data;\\n        }\\n        emit SupportedTokensAdded(tokensToSupport);\\n    }\\n\\n    function getSupportedTokens()\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens)\\n    {\\n        uint256 tokensLength = supportedTokens.length();\\n        tokens = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            tokens[i] = supportedTokens.at(i);\\n        }\\n    }\\n\\n    function publishRates(\\n        RateData[] calldata ratesData,\\n        OversubscriptionRate memory oversubRate,\\n        uint256 lastLookDuration\\n    ) external override onlyOwner {\\n        // check rates havent been published before\\n        require(currentStage == STAGES.STAGE_1, \\\"RATES_ALREADY_SET\\\");\\n        //require(lastLookDuration > 0, \\\"INVALID_DURATION\\\");\\n        require(oversubRate.overDenominator > 0, \\\"INVALID_DENOMINATOR\\\");\\n        require(oversubRate.overNumerator > 0, \\\"INVALID_NUMERATOR\\\");\\n\\n        uint256 ratesLength = ratesData.length;\\n        for (uint256 i = 0; i < ratesLength; i++) {\\n            RateData memory data = ratesData[i];\\n            require(data.numerator > 0, \\\"INVALID_NUMERATOR\\\");\\n            require(data.denominator > 0, \\\"INVALID_DENOMINATOR\\\");\\n            require(\\n                tokenRates[data.token].token == address(0),\\n                \\\"RATE_ALREADY_SET\\\"\\n            );\\n            require(configuredTokenRates.add(data.token), \\\"ALREADY_CONFIGURED\\\");\\n            tokenRates[data.token] = data;\\n        }\\n\\n        require(\\n            configuredTokenRates.length() == supportedTokens.length(),\\n            \\\"MISSING_RATE\\\"\\n        );\\n\\n        // Stage only moves forward when prices are published\\n        currentStage = STAGES.STAGE_2;\\n        lastLookExpiration = block.number + lastLookDuration;\\n        overSubscriptionRate = oversubRate;\\n\\n        emit RatesPublished(ratesData);\\n    }\\n\\n    function getRates(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (RateData[] memory rates)\\n    {\\n        uint256 tokensLength = tokens.length;\\n        rates = new RateData[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            rates[i] = tokenRates[tokens[i]];\\n        }\\n    }\\n\\n    function getTokenValue(address token, uint256 balance)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        uint256 tokenDecimals = ERC20(token).decimals();\\n        (, int256 tokenRate, , , ) = AggregatorV3Interface(\\n            tokenSettings[token].oracle\\n        ).latestRoundData();\\n        uint256 rate = tokenRate.toUint256();\\n        value = (balance.mul(rate)).div(10**tokenDecimals); //Chainlink USD prices are always to 8\\n    }\\n\\n    function totalValue() external view override returns (uint256) {\\n        return _totalValue();\\n    }\\n\\n    function _totalValue() internal view returns (uint256 value) {\\n        uint256 tokensLength = supportedTokens.length();\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            address token = supportedTokens.at(i);\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            value = value.add(getTokenValue(token, tokenBalance));\\n        }\\n    }\\n\\n    function accountBalance(address account)\\n        external\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        uint256 tokenBalance = accountData[account].currentBalance;\\n        value = value.add(\\n            getTokenValue(accountData[account].token, tokenBalance)\\n        );\\n    }\\n\\n    function finalizeAssets() external override {\\n        require(currentStage == STAGES.STAGE_3, \\\"NOT_SYSTEM_FINAL\\\");\\n\\n        AccountData storage data = accountData[msg.sender];\\n        address token = data.token;\\n\\n        require(token != address(0), \\\"NO_DATA\\\");\\n\\n        (, uint256 ineffective, ) = _getRateAdjustedAmounts(\\n            data.currentBalance,\\n            token\\n        );\\n\\n        require(ineffective > 0, \\\"NOTHING_TO_MOVE\\\");\\n\\n        // zero out balance\\n        data.currentBalance = 0;\\n        accountData[msg.sender] = data;\\n\\n        // transfer ineffectiveTokenBalance back to user\\n        IERC20(token).safeTransfer(msg.sender, ineffective);\\n    \\n        emit AssetsFinalized(msg.sender, token, ineffective);\\n    }\\n\\n    function getGenesisPools(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (address[] memory genesisAddresses)\\n    {\\n        uint256 tokensLength = tokens.length;\\n        genesisAddresses = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            require(supportedTokens.contains(tokens[i]), \\\"TOKEN_UNSUPPORTED\\\");\\n            genesisAddresses[i] = tokenSettings[supportedTokens.at(i)].genesis;\\n        }\\n    }\\n\\n    function getTokenOracles(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (address[] memory oracleAddresses)\\n    {\\n        uint256 tokensLength = tokens.length;\\n        oracleAddresses = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            require(supportedTokens.contains(tokens[i]), \\\"TOKEN_UNSUPPORTED\\\");\\n            oracleAddresses[i] = tokenSettings[tokens[i]].oracle;\\n        }\\n    }\\n\\n    function getAccountData(address account)\\n        external\\n        view\\n        override\\n        returns (AccountDataDetails[] memory data)\\n    {\\n        uint256 supportedTokensLength = supportedTokens.length();\\n        data = new AccountDataDetails[](supportedTokensLength);\\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\\n            address token = supportedTokens.at(i);\\n            AccountData memory accountTokenInfo = accountData[account];\\n            if (\\n                currentStage >= STAGES.STAGE_2 &&\\n                accountTokenInfo.token != address(0)\\n            ) {\\n                (\\n                    uint256 effective,\\n                    uint256 ineffective,\\n                    uint256 actual\\n                ) = _getRateAdjustedAmounts(\\n                        accountTokenInfo.currentBalance,\\n                        token\\n                    );\\n                AccountDataDetails memory details = AccountDataDetails(\\n                    token,\\n                    accountTokenInfo.initialDeposit,\\n                    accountTokenInfo.currentBalance,\\n                    effective,\\n                    ineffective,\\n                    actual\\n                );\\n                data[i] = details;\\n            } else {\\n                data[i] = AccountDataDetails(\\n                    token,\\n                    accountTokenInfo.initialDeposit,\\n                    accountTokenInfo.currentBalance,\\n                    0,\\n                    0,\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function transferToTreasury() external override onlyOwner {\\n        require(_isLastLookComplete(), \\\"CURRENT_STAGE_INVALID\\\");\\n        require(currentStage == STAGES.STAGE_2, \\\"ONLY_TRANSFER_ONCE\\\");\\n\\n        uint256 supportedTokensLength = supportedTokens.length();\\n        TokenData[] memory tokens = new TokenData[](supportedTokensLength);\\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\\n            address token = supportedTokens.at(i);\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            (uint256 effective, , ) = _getRateAdjustedAmounts(balance, token);\\n            tokens[i].token = token;\\n            tokens[i].amount = effective;\\n            IERC20(token).safeTransfer(treasury, effective);\\n        }\\n\\n        currentStage = STAGES.STAGE_3;\\n\\n        emit TreasuryTransfer(tokens);\\n    }\\n\\n    function getRateAdjustedAmounts(uint256 balance, address token)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return _getRateAdjustedAmounts(balance, token);\\n    }\\n\\n    function getMaxTotalValue() external view override returns (uint256) {\\n        return maxTotalValue;\\n    }\\n\\n    function _getRateAdjustedAmounts(uint256 balance, address token)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(currentStage >= STAGES.STAGE_2, \\\"RATES_NOT_PUBLISHED\\\");\\n\\n        RateData memory rateInfo = tokenRates[token];\\n        uint256 effectiveTokenBalance = balance\\n            .mul(overSubscriptionRate.overNumerator)\\n            .div(overSubscriptionRate.overDenominator);\\n        uint256 ineffectiveTokenBalance = balance\\n            .mul(\\n                overSubscriptionRate.overDenominator.sub(\\n                    overSubscriptionRate.overNumerator\\n                )\\n            )\\n            .div(overSubscriptionRate.overDenominator);\\n\\n        uint256 actualReceived = effectiveTokenBalance\\n            .mul(rateInfo.denominator)\\n            .div(rateInfo.numerator);\\n\\n        return (effectiveTokenBalance, ineffectiveTokenBalance, actualReceived);\\n    }\\n\\n    function verifyDepositor(\\n        address participant,\\n        bytes32 root,\\n        bytes32[] memory proof\\n    ) internal pure returns (bool) {\\n        bytes32 leaf = keccak256((abi.encodePacked((participant))));\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n\\n    function _isLastLookComplete() internal view returns (bool) {\\n        return block.number >= lastLookExpiration;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefiRound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDefiRound {\\n    enum STAGES {STAGE_1, STAGE_2, STAGE_3}\\n\\n    struct AccountData {\\n        address token; // address of the allowed token deposited\\n        uint256 initialDeposit; // initial amount deposited of the token\\n        uint256 currentBalance; // current balance of the token that can be used to claim INSURE\\n    }\\n\\n    struct AccountDataDetails {\\n        address token; // address of the allowed token deposited\\n        uint256 initialDeposit; // initial amount deposited of the token\\n        uint256 currentBalance; // current balance of the token that can be used to claim INSURE\\n        uint256 effectiveAmt; //Amount deposited that will be used towards INSURE\\n        uint256 ineffectiveAmt; //Amount deposited that will be either refunded or go to farming\\n        uint256 actualTokeReceived; //Amount of INSURE that will be received\\n    }\\n    struct TokenData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct SupportedTokenData {\\n        address token;\\n        address oracle;\\n        address genesis;\\n        uint256 maxLimit;\\n    }\\n    struct RateData {\\n        address token;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    struct OversubscriptionRate {\\n        uint256 overNumerator;\\n        uint256 overDenominator;\\n    }\\n\\n    event Deposited(address depositor, TokenData tokenInfo);\\n    event Withdrawn(address withdrawer, TokenData tokenInfo, bool asETH);\\n    event SupportedTokensAdded(SupportedTokenData[] tokenData);\\n    event RatesPublished(RateData[] ratesData);\\n    event GenesisTransfer(address user, uint256 amountTransferred);\\n    event AssetsFinalized(address claimer, address token, uint256 assetsMoved);\\n    event WhitelistConfigured(WhitelistSettings settings); \\n    event TreasuryTransfer(TokenData[] tokens);\\n\\n    struct TokenValues {\\n        uint256 effectiveTokenValue;\\n        uint256 ineffectiveTokenValue;\\n    }\\n\\n    struct WhitelistSettings {\\n        bool enabled;\\n        bytes32 root;\\n    }\\n\\n    /// @notice Enable or disable the whitelist\\n    /// @param settings The root to use and whether to check the whitelist at all\\n    function configureWhitelist(WhitelistSettings calldata settings) external;\\n\\n    /// @notice returns the current stage the contract is in\\n    /// @return stage the current stage the round contract is in\\n    function currentStage() external returns (STAGES stage);\\n\\n    /// @notice deposits tokens into the round contract\\n    /// @param tokenData an array of token structs\\n    function deposit(TokenData calldata tokenData, bytes32[] memory proof) external payable;\\n\\n    /// @notice total value held in the entire contract amongst all the assets\\n    /// @return value the value of all assets held\\n    function totalValue() external view returns (uint256 value);\\n\\n    /// @notice Current Max Total Value\\n    /// @return value the max total value\\n    function getMaxTotalValue() external view returns (uint256 value);\\n\\n    /// @notice returns the address of the treasury, when users claim this is where funds that are <= maxClaimableValue go\\n    /// @return treasuryAddress address of the treasury\\n    function treasury() external returns (address treasuryAddress);\\n\\n    /// @notice the total supply held for a given token\\n    /// @param token the token to get the supply for\\n    /// @return amount the total supply for a given token\\n    function totalSupply(address token) external returns (uint256 amount);\\n\\n    /*\\n    /// @notice withdraws tokens from the round contract. only callable when round 2 starts\\n    /// @param tokenData an array of token structs\\n    /// @param asEth flag to determine if provided WETH, that it should be withdrawn as ETH\\n     function withdraw(TokenData calldata tokenData, bool asEth) external;\\n    */\\n\\n    // /// @notice adds tokens to support\\n    // /// @param tokensToSupport an array of supported token structs\\n    function addSupportedTokens(SupportedTokenData[] calldata tokensToSupport) external;\\n\\n    // /// @notice returns which tokens can be deposited\\n    // /// @return tokens tokens that are supported for deposit\\n    function getSupportedTokens() external view returns (address[] calldata tokens);\\n\\n    /// @notice the oracle that will be used to denote how much the amounts deposited are worth in USD\\n    /// @param tokens an array of tokens\\n    /// @return oracleAddresses the an array of oracles corresponding to supported tokens\\n    function getTokenOracles(address[] calldata tokens)\\n        external\\n        view\\n        returns (address[] calldata oracleAddresses);\\n\\n    /// @notice publishes rates for the tokens. Rates are always relative to 1 INSURE. Can only be called once within Stage 1\\n    // prices can be published at any time\\n    /// @param ratesData an array of rate info structs\\n    function publishRates(\\n        RateData[] calldata ratesData,\\n        OversubscriptionRate memory overSubRate,\\n        uint256 lastLookDuration\\n    ) external;\\n\\n    /// @notice return the published rates for the tokens\\n    /// @param tokens an array of tokens to get rates for\\n    /// @return rates an array of rates for the provided tokens\\n    function getRates(address[] calldata tokens) external view returns (RateData[] calldata rates);\\n\\n    /// @notice determines the account value in USD amongst all the assets the user is invovled in\\n    /// @param account the account to look up\\n    /// @return value the value of the account in USD\\n    function accountBalance(address account) external view returns (uint256 value);\\n\\n    /// @notice Moves excess assets to private farming or refunds them\\n    /// @dev uses the publishedRates, selected tokens, and amounts to determine what amount of INSURE is claimed\\n    /// when true oversubscribed amount will deposit to genesis, else oversubscribed amount is sent back to user\\n    function finalizeAssets() external;\\n\\n    //// @notice returns what gensis pool a supported token is mapped to\\n    /// @param tokens array of addresses of supported tokens\\n    /// @return genesisAddresses array of genesis pools corresponding to supported tokens\\n    function getGenesisPools(address[] calldata tokens)\\n        external\\n        view\\n        returns (address[] memory genesisAddresses);\\n\\n    /// @notice returns a list of AccountData for a provided account\\n    /// @param account the address of the account\\n    /// @return data an array of AccountData denoting what the status is for each of the tokens deposited (if any)\\n    function getAccountData(address account)\\n        external\\n        view\\n        returns (AccountDataDetails[] calldata data);\\n\\n    /// @notice Allows the owner to transfer all swapped assets to the treasury\\n    /// @dev only callable by owner and if last look period is complete\\n    function transferToTreasury() external;\\n\\n    /// @notice Given a balance, calculates how the the amount will be allocated between INSURE and Farming\\n    /// @dev Only allowed at stage 3\\n    /// @param balance balance to divy up\\n    /// @param token token to pull the rates for\\n    function getRateAdjustedAmounts(uint256 balance, address token)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IWETH is IERC20Upgradeable {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/MerkleDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IMerkleDistributor.sol\\\";\\n\\ncontract MerkleDistributor is IMerkleDistributor{\\n    address public immutable override token;\\n    bytes32 public immutable override merkleRoot;\\n    address public immutable treasury;\\n    uint256 public immutable expiry; // >0 if enabled\\n\\n    // This is a packed array of booleans.\\n    mapping(uint256 => uint256) private claimedBitMap;\\n\\n    constructor(address token_, bytes32 merkleRoot_, address treasury_, uint256 expiry_) public {\\n        token = token_;\\n        merkleRoot = merkleRoot_;\\n        treasury = treasury_;\\n        expiry = expiry_;\\n    }\\n\\n    function isClaimed(uint256 index) public view override returns (bool) {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function _setClaimed(uint256 index) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\\n    }\\n\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\\n        require(!isClaimed(index), 'MerkleDistributor: Already claimed.');\\n        require(expiry == 0 || block.timestamp < expiry,'MerkleDistributor: Expired.');\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\\n\\n        // Mark it claimed and send the token.\\n        _setClaimed(index);\\n        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\\n\\n        emit Claimed(index, account, amount);\\n    }\\n\\n    function salvage() external {\\n        require(expiry > 0 && block.timestamp >= expiry,'MerkleDistributor: Not expired.');\\n        uint256 _remaining = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(treasury, _remaining);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMerkleDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IMerkleDistributor {\\n    // Returns the address of the token distributed by this contract.\\n    function token() external view returns (address);\\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\\n    function merkleRoot() external view returns (bytes32);\\n    // Returns true if the index has been marked claimed.\\n    function isClaimed(uint256 index) external view returns (bool);\\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\\n\\n    // This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(uint256 index, address account, uint256 amount);\\n}\"\r\n    },\r\n    \"contracts/mock/ERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See `_burn` and `_approve`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            msg.sender,\\n            _allowances[account][msg.sender].sub(amount)\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/mock/TestERC20Mock.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\ncontract TestERC20Mock is ERC20 {\\n    \\n    function mint(address _to, uint256 _amount) public {\\n        _mint(_to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mock/WETHMock.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\nimport \\\"./TestERC20Mock.sol\\\";\\n\\ncontract WETHMock is TestERC20Mock {\\n    string public name = \\\"WETH\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mock/USDCMock.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\nimport \\\"./TestERC20Mock.sol\\\";\\n\\ncontract USDCMock is TestERC20Mock {\\n    string public name = \\\"USDC\\\";\\n    string public symbol = \\\"USDC\\\";\\n    uint8 public decimals = 6;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mock/InsureToken.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\n/***\\n *@title InsureToken\\n *@author InsureDAO\\n * SPDX-License-Identifier: MIT\\n *@notice InsureDAO's governance token\\n */\\n\\n//libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract InsureToken is IERC20 {\\n    event UpdateMiningParameters(\\n        uint256 time,\\n        uint256 rate,\\n        uint256 supply,\\n        int256 miningepoch\\n    );\\n    event SetMinter(address minter);\\n    event SetAdmin(address admin);\\n\\n    string public name;\\n    string public symbol;\\n    uint256 public constant decimals = 18;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) allowances;\\n    uint256 public total_supply;\\n\\n    address public minter;\\n    address public admin;\\n\\n    //General constants\\n    uint256 constant YEAR = 86400 * 365;\\n\\n    // Allocation within 5years:\\n    // ==========\\n    // * Team & Development: 24%\\n    // * Liquidity Mining: 40%\\n    // * Investors: 10%\\n    // * Foundation Treasury: 14%\\n    // * Community Treasury: 10%\\n    // ==========\\n    //\\n    // After 5years:\\n    // ==========\\n    // * Liquidity Mining: 40%~ (Mint fixed amount every year)\\n    //\\n    // Mint 2_800_000 INSURE every year.\\n    // 6th year: 1.32% inflation rate\\n    // 7th year: 1.30% inflation rate\\n    // 8th year: 1.28% infration rate\\n    // so on\\n    // ==========\\n\\n    // Supply parameters\\n    uint256 constant INITIAL_SUPPLY = 126_000_000; //will be vested\\n    uint256 constant RATE_REDUCTION_TIME = YEAR;\\n    uint256[6] public RATES = [\\n        (28_000_000 * 10**18) / YEAR, //INITIAL_RATE\\n        (22_400_000 * 10**18) / YEAR,\\n        (16_800_000 * 10**18) / YEAR,\\n        (11_200_000 * 10**18) / YEAR,\\n        (5_600_000 * 10**18) / YEAR,\\n        (2_800_000 * 10**18) / YEAR\\n    ];\\n\\n    uint256 constant RATE_DENOMINATOR = 10**18;\\n    uint256 constant INFLATION_DELAY = 86400;\\n\\n    // Supply variables\\n    int256 public mining_epoch;\\n    uint256 public start_epoch_time;\\n    uint256 public rate;\\n\\n    uint256 public start_epoch_supply;\\n\\n    uint256 public emergency_minted;\\n\\n    constructor(string memory _name, string memory _symbol) public {\\n        /***\\n         * @notice Contract constructor\\n         * @param _name Token full name\\n         * @param _symbol Token symbol\\n         * @param _decimal will be 18 in the migration script.\\n         */\\n\\n        uint256 _init_supply = INITIAL_SUPPLY * RATE_DENOMINATOR;\\n        name = _name;\\n        symbol = _symbol;\\n        balanceOf[msg.sender] = _init_supply;\\n        total_supply = _init_supply;\\n        admin = msg.sender;\\n        emit Transfer(address(0), msg.sender, _init_supply);\\n\\n        start_epoch_time =\\n            block.timestamp +\\n            INFLATION_DELAY -\\n            RATE_REDUCTION_TIME;\\n        mining_epoch = -1;\\n        rate = 0;\\n        start_epoch_supply = _init_supply;\\n    }\\n\\n    function _update_mining_parameters() internal {\\n        /***\\n         *@dev Update mining rate and supply at the start of the epoch\\n         *     Any modifying mining call must also call this\\n         */\\n        uint256 _rate = rate;\\n        uint256 _start_epoch_supply = start_epoch_supply;\\n\\n        start_epoch_time += RATE_REDUCTION_TIME;\\n        mining_epoch += 1;\\n\\n        if (mining_epoch == 0) {\\n            _rate = RATES[uint256(mining_epoch)];\\n        } else if (mining_epoch < int256(6)) {\\n            _start_epoch_supply += RATES[uint256(mining_epoch) - 1] * YEAR;\\n            start_epoch_supply = _start_epoch_supply;\\n            _rate = RATES[uint256(mining_epoch)];\\n        } else {\\n            _start_epoch_supply += RATES[5] * YEAR;\\n            start_epoch_supply = _start_epoch_supply;\\n            _rate = RATES[5];\\n        }\\n        rate = _rate;\\n        emit UpdateMiningParameters(\\n            block.timestamp,\\n            _rate,\\n            _start_epoch_supply,\\n            mining_epoch\\n        );\\n    }\\n\\n    function update_mining_parameters() external {\\n        /***\\n         * @notice Update mining rate and supply at the start of the epoch\\n         * @dev Callable by any address, but only once per epoch\\n         *     Total supply becomes slightly larger if this function is called late\\n         */\\n        require(\\n            block.timestamp >= start_epoch_time + RATE_REDUCTION_TIME,\\n            \\\"dev: too soon!\\\"\\n        );\\n        _update_mining_parameters();\\n    }\\n\\n    function start_epoch_time_write() external returns (uint256) {\\n        /***\\n         *@notice Get timestamp of the current mining epoch start\\n         *        while simultaneously updating mining parameters\\n         *@return Timestamp of the epoch\\n         */\\n        uint256 _start_epoch_time = start_epoch_time;\\n        if (block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n            return start_epoch_time;\\n        } else {\\n            return _start_epoch_time;\\n        }\\n    }\\n\\n    function future_epoch_time_write() external returns (uint256) {\\n        /***\\n         *@notice Get timestamp of the next mining epoch start\\n         *        while simultaneously updating mining parameters\\n         *@return Timestamp of the next epoch\\n         */\\n\\n        uint256 _start_epoch_time = start_epoch_time;\\n        if (block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n            return start_epoch_time + RATE_REDUCTION_TIME;\\n        } else {\\n            return _start_epoch_time + RATE_REDUCTION_TIME;\\n        }\\n    }\\n\\n    function _available_supply() internal view returns (uint256) {\\n        return\\n            start_epoch_supply +\\n            ((block.timestamp - start_epoch_time) * rate) +\\n            emergency_minted;\\n    }\\n\\n    function available_supply() external view returns (uint256) {\\n        /***\\n         *@notice Current number of tokens in existence (claimed or unclaimed)\\n         */\\n        return _available_supply();\\n    }\\n\\n    function mintable_in_timeframe(uint256 start, uint256 end)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        /***\\n         *@notice How much supply is mintable from start timestamp till end timestamp\\n         *@param start Start of the time interval (timestamp)\\n         *@param end End of the time interval (timestamp)\\n         *@return Tokens mintable from `start` till `end`\\n         */\\n        require(start <= end, \\\"dev: start > end\\\");\\n        uint256 _to_mint = 0;\\n        uint256 _current_epoch_time = start_epoch_time;\\n        uint256 _current_rate = rate;\\n        int256 _current_epoch = mining_epoch;\\n\\n        // Special case if end is in future (not yet minted) epoch\\n        if (end > _current_epoch_time + RATE_REDUCTION_TIME) {\\n            _current_epoch_time += RATE_REDUCTION_TIME;\\n            if (_current_epoch < 5) {\\n                _current_rate = RATES[uint256(mining_epoch + int256(1))];\\n            } else {\\n                _current_rate = RATES[5];\\n            }\\n        }\\n\\n        require(\\n            end <= _current_epoch_time + RATE_REDUCTION_TIME,\\n            \\\"dev: too far in future\\\"\\n        );\\n\\n        for (uint256 i = 0; i < 999; i++) {\\n            // InsureDAO will not work in 1000 years.\\n            if (end >= _current_epoch_time) {\\n                uint256 current_end = end;\\n                if (current_end > _current_epoch_time + RATE_REDUCTION_TIME) {\\n                    current_end = _current_epoch_time + RATE_REDUCTION_TIME;\\n                }\\n                uint256 current_start = start;\\n                if (\\n                    current_start >= _current_epoch_time + RATE_REDUCTION_TIME\\n                ) {\\n                    break; // We should never get here but what if...\\n                } else if (current_start < _current_epoch_time) {\\n                    current_start = _current_epoch_time;\\n                }\\n                _to_mint += (_current_rate * (current_end - current_start));\\n\\n                if (start >= _current_epoch_time) {\\n                    break;\\n                }\\n            }\\n            _current_epoch_time -= RATE_REDUCTION_TIME;\\n            if (_current_epoch < 5) {\\n                _current_rate = RATES[uint256(_current_epoch + int256(1))];\\n                _current_epoch += 1;\\n            } else {\\n                _current_rate = RATES[5];\\n                _current_epoch += 1;\\n            }\\n            assert(_current_rate <= RATES[0]); // This should never happen\\n        }\\n        return _to_mint;\\n    }\\n\\n    function set_minter(address _minter) external {\\n        /***\\n         *@notice Set the minter address\\n         *@dev Only callable once, when minter has not yet been set\\n         *@param _minter Address of the minter\\n         */\\n        require(msg.sender == admin, \\\"dev: admin only\\\");\\n        require(\\n            minter == address(0),\\n            \\\"dev: can set the minter only once, at creation\\\"\\n        );\\n        minter = _minter;\\n        emit SetMinter(_minter);\\n    }\\n\\n    function set_admin(address _admin) external {\\n        /***\\n         *@notice Set the new admin.\\n         *@dev After all is set up, admin only can change the token name\\n         *@param _admin New admin address\\n         */\\n        require(msg.sender == admin, \\\"dev: admin only\\\");\\n        admin = _admin;\\n        emit SetAdmin(_admin);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        /***\\n         *@notice Total number of tokens in existence.\\n         */\\n        return total_supply;\\n    }\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        /***\\n         *@notice Check the amount of tokens that an owner allowed to a spender\\n         *@param _owner The address which owns the funds\\n         *@param _spender The address which will spend the funds\\n         *@return uint256 specifying the amount of tokens still available for the spender\\n         */\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        /***\\n         *@notice Transfer `_value` tokens from `msg.sender` to `_to`\\n         *@dev Vyper does not allow underflows, so the subtraction in\\n         *     this function will revert on an insufficient balance\\n         *@param _to The address to transfer to\\n         *@param _value The amount to be transferred\\n         *@return bool success\\n         */\\n        require(_to != address(0), \\\"dev: transfers to 0x0 are not allowed\\\");\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external override returns (bool) {\\n        /***\\n         * @notice Transfer `_value` tokens from `_from` to `_to`\\n         * @param _from address The address which you want to send tokens from\\n         * @param _to address The address which you want to transfer to\\n         * @param _value uint256 the amount of tokens to be transferred\\n         * @return bool success\\n         */\\n        require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n        allowances[_from][msg.sender] -= _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approve(address _spender, uint256 _value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        /**\\n         *@notice Approve `_spender` to transfer `_value` tokens on behalf of `msg.sender`\\n         *@param _spender The address which will spend the funds\\n         *@param _value The amount of tokens to be spent\\n         *@return bool success\\n         */\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address _spender, uint256 addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            _spender,\\n            allowances[msg.sender][_spender] + addedValue\\n        );\\n\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address _spender, uint256 subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = allowances[msg.sender][_spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(msg.sender, _spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _value) external returns (bool) {\\n        /***\\n         *@notice Mint `_value` tokens and assign them to `_to`\\n         *@dev Emits a Transfer event originating from 0x00\\n         *@param _to The account that will receive the created tokens\\n         *@param _value The amount that will be created\\n         *@return bool success\\n         */\\n        require(msg.sender == minter, \\\"dev: minter only\\\");\\n        require(_to != address(0), \\\"dev: zero address\\\");\\n\\n        _mint(_to, _value);\\n\\n        return true;\\n    }\\n\\n    function _mint(address _to, uint256 _value) internal {\\n        if (block.timestamp >= start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n        }\\n        uint256 _total_supply = total_supply + _value;\\n\\n        require(\\n            _total_supply <= _available_supply(),\\n            \\\"dev: exceeds allowable mint amount\\\"\\n        );\\n        total_supply = _total_supply;\\n\\n        balanceOf[_to] += _value;\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function burn(uint256 _value) external returns (bool) {\\n        /**\\n         *@notice Burn `_value` tokens belonging to `msg.sender`\\n         *@dev Emits a Transfer event with a destination of 0x00\\n         *@param _value The amount that will be burned\\n         *@return bool success\\n         */\\n        require(\\n            balanceOf[msg.sender] >= _value,\\n            \\\"_value > balanceOf[msg.sender]\\\"\\n        );\\n\\n        balanceOf[msg.sender] -= _value;\\n        total_supply -= _value;\\n\\n        emit Transfer(msg.sender, address(0), _value);\\n        return true;\\n    }\\n\\n    function set_name(string memory _name, string memory _symbol) external {\\n        /***\\n         *@notice Change the token name and symbol to `_name` and `_symbol`\\n         *@dev Only callable by the admin account\\n         *@param _name New token name\\n         *@param _symbol New token symbol\\n         */\\n        require(msg.sender == admin, \\\"Only admin is allowed to change name\\\");\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function emergency_mint(uint256 _amount, address _to)\\n        external\\n        returns (bool)\\n    {\\n        /***\\n         * @notice Emergency minting only when CDS couldn't afford the insolvency.\\n         * @dev\\n         * @param _amountOut token amount needed. token is defiend whithin converter.\\n         * @param _to CDS address\\n         */\\n        require(msg.sender == minter, \\\"dev: minter only\\\");\\n        //mint\\n        emergency_minted += _amount;\\n        _mint(_to, _amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsMoved\",\"type\":\"uint256\"}],\"name\":\"AssetsFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"name\":\"GenesisTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"ratesData\",\"type\":\"tuple[]\"}],\"name\":\"RatesPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genesis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.SupportedTokenData[]\",\"name\":\"tokenData\",\"type\":\"tuple[]\"}],\"name\":\"SupportedTokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"TreasuryTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.WhitelistSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"WhitelistConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asETH\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genesis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.SupportedTokenData[]\",\"name\":\"tokensToSupport\",\"type\":\"tuple[]\"}],\"name\":\"addSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDefiRound.WhitelistSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"configureWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"enum IDefiRound.STAGES\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ineffectiveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTokeReceived\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.AccountDataDetails[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getGenesisPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"genesisAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRateAdjustedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getRates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"rates\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"oracleAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLookExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overSubscriptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"ratesData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"overNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overDenominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.OversubscriptionRate\",\"name\":\"oversubRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastLookDuration\",\"type\":\"uint256\"}],\"name\":\"publishRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DefiRound", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000ec177d69971eeeb3654a347acbfff4435ed42e4100000000000000000000000000000000000000000000000000025844398d4000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}