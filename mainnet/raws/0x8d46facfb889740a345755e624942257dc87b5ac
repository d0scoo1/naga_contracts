{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract Owner {\r\n    address public owner;\r\n    //\u6dfb\u52a0\u65ad\u8def\u5668\r\n    bool public stopped = false;\r\n\r\n    function Owner() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n       require (msg.sender == owner);\r\n       _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require (newOwner != 0x0);\r\n        require (newOwner != owner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function toggleContractActive() onlyOwner public {\r\n        //\u53ef\u4ee5\u9884\u7f6e\u6539\u53d8\u72b6\u6001\u7684\u6761\u4ef6\uff0c\u5982\u57fa\u4e8e\u6295\u7968\u4eba\u6570\r\n        stopped = !stopped;\r\n    }\r\n\r\n    modifier stopInEmergency {\r\n        require(stopped == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(stopped == true);\r\n        _;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n}\r\n\r\ncontract Mortal is Owner {\r\n    //\u9500\u6bc1\u5408\u7ea6\r\n    function close() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token is Owner, Mortal {\r\n    using SafeMath for uint256;\r\n\r\n    string public name; //\u4ee3\u5e01\u540d\u79f0\r\n    string public symbol; //\u4ee3\u5e01\u7b26\u53f7\r\n    uint8 public decimals; //\u663e\u793a\u591a\u5c11\u5c0f\u6570\u70b9\r\n    uint256 public totalSupply; //\u603b\u4f9b\u5e94\u91cf\r\n\r\n    //\u51bb\u7ed3\u7684\u57fa\u91d1,\u89e3\u9501\u7684\u6570\u91cf\u6839\u636e\u65f6\u95f4\u52a8\u6001\u8ba1\u7b97\u51fa\u6765\r\n    struct Fund{\r\n        uint amount;            //\u603b\u51bb\u7ed3\u6570\u91cf\uff0c\u56fa\u5b9a\u503c\r\n\r\n        uint unlockStartTime;   //\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u89e3\u9501\r\n        uint unlockInterval;    //\u6bcf\u6b21\u89e3\u9501\u7684\u5468\u671f\uff0c\u5355\u4f4d \u79d2\r\n        uint unlockPercent;     //\u6bcf\u6b21\u89e3\u9501\u7684\u767e\u5206\u6bd4 50 \u4e3a50%\r\n\r\n        bool isValue; // exist value\r\n    }\r\n\r\n    //\u6240\u6709\u7684\u8d26\u6237\u6570\u636e\r\n    mapping (address => uint) public balances;\r\n    //\u4ee3\u7406\r\n    mapping(address => mapping(address => uint)) approved;\r\n\r\n    //\u6240\u6709\u7684\u8d26\u6237\u51bb\u7ed3\u6570\u636e\uff0c\u65f6\u95f4\uff0c\u5230\u671f\u81ea\u52a8\u89e3\u51bb\uff0c\u540c\u65f6\u53ea\u652f\u6301\u4e00\u6b21\u51bb\u7ed3\r\n    mapping (address => Fund) public frozenAccount;\r\n\r\n    //\u4e8b\u4ef6\u65e5\u5fd7\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event FrozenFunds(address indexed target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent);\r\n    event Approval(address indexed accountOwner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n    *\r\n    * Fix for the ERC20 short address attack\r\n    *\r\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n    */\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        require(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    //\u51bb\u7ed3\u56fa\u5b9a\u65f6\u95f4\r\n    function freezeAccount(address target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\r\n        require (value > 0);\r\n        require (frozenAccount[target].isValue == false);\r\n        require (balances[msg.sender] >= value);\r\n        require (unlockStartTime > now);\r\n        require (unlockInterval > 0);\r\n        require (unlockPercent > 0 && unlockPercent <= 100);\r\n\r\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\r\n\r\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\r\n        emit FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\r\n    }\r\n\r\n    //\u8f6c\u8d26\u5e76\u51bb\u7ed3\r\n    function transferAndFreeze(address target, uint256 value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\r\n        require (value > 0);\r\n        require (frozenAccount[target].isValue == false);\r\n        require (unlockStartTime > now);\r\n        require (unlockInterval > 0);\r\n        require (unlockPercent > 0 && unlockPercent <= 100);\r\n\r\n        _transfer(msg.sender, target, value);\r\n\r\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\r\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\r\n        emit FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\r\n    }\r\n\r\n    //\u8f6c\u6362\u5355\u4f4d\u65f6\u95f4\u5230\u79d2\r\n    function toSecond(uint unitType, uint value) internal pure returns (uint256 Seconds) {\r\n        uint _seconds;\r\n        if (unitType == 5){\r\n            _seconds = value.mul(1 years);\r\n        }else if(unitType == 4){\r\n            _seconds = value.mul(1 days);\r\n        }else if (unitType == 3){\r\n            _seconds = value.mul(1 hours);\r\n        }else if (unitType == 2){\r\n            _seconds = value.mul(1 minutes);\r\n        }else if (unitType == 1){\r\n            _seconds = value;\r\n        }else{\r\n            revert();\r\n        }\r\n        return _seconds;\r\n    }\r\n\r\n    modifier freezeOutCheck(address sender, uint value) {\r\n        require ( getAvailableBalance(sender) >= value);\r\n        _;\r\n    }\r\n\r\n    //\u8ba1\u7b97\u53ef\u7528\u4f59\u989d \u53bb\u9664\u51bb\u7ed3\u90e8\u5206\r\n    function getAvailableBalance(address sender) internal returns(uint balance) {\r\n        if (frozenAccount[sender].isValue) {\r\n            //\u672a\u5f00\u59cb\u89e3\u9501\r\n            if (now < frozenAccount[sender].unlockStartTime){\r\n                return balances[sender] - frozenAccount[sender].amount;\r\n            }else{\r\n                //\u8ba1\u7b97\u89e3\u9501\u4e86\u591a\u5c11\u6570\u91cf\r\n                uint unlockPercent = ((now - frozenAccount[sender].unlockStartTime ) / frozenAccount[sender].unlockInterval + 1) * frozenAccount[sender].unlockPercent;\r\n                if (unlockPercent > 100){\r\n                    unlockPercent = 100;\r\n                }\r\n\r\n                //\u8ba1\u7b97\u53ef\u7528\u4f59\u989d = \u603b\u989d - \u51bb\u7ed3\u603b\u989d\r\n                assert(frozenAccount[sender].amount <= balances[sender]);\r\n                uint available = balances[sender] - (100 - unlockPercent) * frozenAccount[sender].amount / 100;\r\n                if ( unlockPercent >= 100){\r\n                    //release\r\n                    frozenAccount[sender].isValue = false;\r\n                    delete frozenAccount[sender];\r\n                }\r\n\r\n                return available;\r\n            }\r\n        }\r\n        return balances[sender];\r\n    }\r\n\r\n    function balanceOf(address sender) constant external returns (uint256 balance){\r\n        return balances[sender];\r\n    }\r\n\r\n    /* \u4ee3\u5e01\u8f6c\u79fb\u7684\u51fd\u6570 */\r\n    function transfer(address to, uint256 value) external stopInEmergency onlyPayloadSize(2 * 32) {\r\n        _transfer(msg.sender, to, value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal freezeOutCheck(_from, _value) {\r\n        require(_to != 0x0);\r\n        require(_from != _to);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ee3\u7406\u4ea4\u6613\r\n    //\u5141\u8bb8spender\u591a\u6b21\u53d6\u51fa\u60a8\u7684\u5e10\u6237\uff0c\u6700\u9ad8\u8fbevalue\u91d1\u989d\u3002value\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u8fc7\u8d26\u6237\u4f59\u989d\r\n    function approve(address spender, uint value) external returns (bool success) {\r\n        approved[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    //\u8fd4\u56despender\u4ecd\u7136\u88ab\u5141\u8bb8\u4eceaccountOwner\u63d0\u53d6\u7684\u91d1\u989d\r\n    function allowance(address accountOwner, address spender) constant external returns (uint remaining) {\r\n        return approved[accountOwner][spender];\r\n    }\r\n\r\n    //\u4f7f\u7528\u4ee3\u7406\u4ea4\u6613\r\n    //0\u503c\u7684\u4f20\u8f93\u5fc5\u987b\u88ab\u89c6\u4e3a\u6b63\u5e38\u4f20\u8f93\u5e76\u89e6\u53d1\u4f20\u8f93\u4e8b\u4ef6\r\n    //\u4ee3\u7406\u4ea4\u6613\u4e0d\u81ea\u52a8\u4e3a\u5bf9\u65b9\u8865\u5145gas\r\n    function transferFrom(address from, address to, uint256 value) external stopInEmergency freezeOutCheck(from, value)  returns (bool success) {\r\n        require(value > 0);\r\n        require(value <= approved[from][msg.sender]);\r\n        require(value <= balances[from]);\r\n\r\n        approved[from][msg.sender] = approved[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MigrationAgent {\r\n  function migrateFrom(address from, uint256 value) public;\r\n}\r\n\r\ncontract UpgradeableToken is Owner, Token {\r\n  address public migrationAgent;\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  // Migrate tokens to the new token contract\r\n  function migrate() public {\r\n    require(migrationAgent != 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    totalSupply = totalSupply.sub(value);\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n    emit Upgrade(msg.sender, migrationAgent, value);\r\n  }\r\n\r\n  function () public payable {\r\n    require(migrationAgent != 0);\r\n    require(balances[msg.sender] > 0);\r\n    migrate();\r\n    msg.sender.transfer(msg.value);\r\n  }\r\n\r\n  function setMigrationAgent(address _agent) onlyOwner external {\r\n    migrationAgent = _agent;\r\n    emit UpgradeAgentSet(_agent);\r\n  }\r\n}\r\n\r\ncontract MIToken is UpgradeableToken {\r\n\r\n  function MIToken() public {\r\n    name = \"MI Token\";\r\n    symbol = \"MI\";\r\n    decimals = 18;\r\n\r\n    owner = msg.sender;\r\n    uint initialSupply = 100000000;\r\n\r\n    totalSupply = initialSupply * 10 ** uint256(decimals);\r\n    require (totalSupply >= initialSupply);\r\n\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(0x0, msg.sender, totalSupply);\r\n  }\r\n  \r\n  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n      totalSupply = totalSupply.add(_amount);\r\n      balances[_to] = balances[_to].add(_amount);\r\n      \r\n      emit Transfer(address(0), _to, _amount);\r\n      return true;\r\n  }\r\n  \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"},{\"name\":\"isValue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"transferAndFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockIntervalUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockPercent\",\"type\":\"uint256\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]", "ContractName": "MIToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://27a2e2402b6e7c2e3587b2195e66ef40cb5307067b927bd6216a367592990415"}]}