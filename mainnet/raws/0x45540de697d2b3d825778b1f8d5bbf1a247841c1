{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint value) external;\r\n}\r\n\r\n\r\ncontract Wallet {\r\n    address payable _hotWallet = payable(0x94dD9013DDC1DF3194882eb594F2B443640f9576);\r\n    \r\n    constructor() {\r\n        if (payable(this).balance > 0) {\r\n            _hotWallet.transfer(payable(this).balance);\r\n        }\r\n    }\r\n\r\n    function withdraw(IERC20 token) external {\r\n        token.transfer(_hotWallet, token.balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {\r\n        _hotWallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n\r\ncontract WalletsFactory {\r\n    function getBytecode() public pure returns (bytes memory) {\r\n        return type(Wallet).creationCode;\r\n    }\r\n\r\n    function computeAddress(bytes32 salt, bytes memory bytecode) external view returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(bytecode))\r\n        );\r\n        return address(uint160(uint256(_data)));\r\n    }\r\n\r\n    function createWallet(bytes32 salt, bytes memory bytecode) external returns (address addr) {\r\n        assembly {\r\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n    }\r\n\r\n    function withdraw(IERC20 token, Wallet wallet) public {\r\n        wallet.withdraw(token);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract Wallet\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WalletsFactory", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35ec7996c052b480664da3235c68c966143c70940cc8f6ef9ba671bb525a7b4d"}]}