{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\n\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    \r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n    \r\n    function totalSupply() external view returns(uint256);\r\n    \r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract CFMS { //Crypto Family Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address => bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"CFMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"CFMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n\r\n}\r\n\r\nabstract contract CF_ERC721 is CFMS, ERC165, IERC721, IERC721Metadata{ //Crypto Family ERC721 Standard\r\n    using Strings for uint256;\r\n\r\n    string internal uriLink = \"\";\r\n    \r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name = \"Surreal Society\";\r\n    string private _symbol = \"SURREAL\";\r\n\r\n    mapping(uint256 => address) internal _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    //Read Functions======================================================================================================================================================\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) external view override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function totalSupply() public view override returns(uint256){return _totalSupply;}\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        return string(abi.encodePacked(uriLink, \"secret.json\"));\r\n\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) external view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    \r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function changeURIlink(string calldata newUri) external Manager {\r\n        uriLink = newUri;\r\n    }\r\n\r\n    function changeData(string calldata name, string calldata symbol) external Manager {\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    //User Functions======================================================================================================================================================\r\n    function approve(address to, uint256 tokenId) external override {\r\n        address owner = _owners[tokenId];\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    //Internal Functions======================================================================================================================================================\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = _owners[tokenId];\r\n        require(spender == owner || _tokenApprovals[tokenId] == spender || isApprovedForAll(owner, spender), \"ERC721: Not approved or owner\");\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        require(_owners[tokenId] == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(_owners[tokenId], to, tokenId);\r\n    }\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        _balances[user] += amount;\r\n        \r\n        uint256 tokenId;\r\n        for(uint256 t; t < amount; ++t) {\r\n            tokenId = _totalSupply++;\r\n            \r\n            _owners[tokenId] = user;\r\n                \r\n            emit Transfer(address(0), user, tokenId);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\ncontract SURREAL is CF_ERC721 {\r\n    \r\n    using Strings for uint256;\r\n\r\n    bool private _reveal = false;\r\n\r\n    uint256 private _whitePrice = 100000000000000000;\r\n    uint256 private _publicPrice = 150000000000000000;\r\n\r\n    mapping(address => uint256) private _userWhiteMints; //How many times did the user mint in white lsit minting\r\n\r\n    uint256 private _whiteMinted;\r\n\r\n    mapping(address => bool) private _whiteAccess;\r\n    \r\n    constructor() {\r\n        _mint(0x81cc8A4bb62fF93f62EC94e3AA40A3A862c54368, 10);\r\n    }\r\n\r\n    //Read Functions======================================================================================================================================================\r\n\r\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\r\n        if(!_reveal) {return string(abi.encodePacked(uriLink, \"secret.json\"));}\r\n        \r\n        ++tokenId;\r\n        return string(abi.encodePacked(uriLink, tokenId.toString(), \".json\"));\r\n\r\n    }\r\n\r\n    function prices() public view returns(uint256 whitePrice, uint256 publicPrice) {\r\n        whitePrice = _whitePrice;\r\n        publicPrice = _publicPrice;\r\n    }\r\n\r\n    function whiteListed(address user) external view returns(bool listed) {\r\n        return _whiteAccess[user];\r\n    } \r\n\r\n    function userWhiteMints(address user) external view returns(uint256 mints) {\r\n        return _userWhiteMints[user];\r\n    }\r\n    \r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function setWhiteList(address[] calldata whiteUsers) external Owner {\r\n        uint256 size = whiteUsers.length;\r\n            \r\n            for(uint256 t; t < size; ++t) {\r\n                _whiteAccess[whiteUsers[t]] = true;\r\n            }\r\n    }\r\n\r\n    function adminMint(address to, uint256 amount) external Manager {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function adminMint(address[] calldata to, uint256[] calldata amount) external Manager {\r\n        uint256 size = to.length;\r\n\r\n        for(uint256 t; t < size; ++t) {\r\n            _mint(to[t], amount[t]);\r\n        }\r\n    }\r\n\r\n    function changePrices(uint256 whitePrice, uint256 publicPrice) external Manager {\r\n        _whitePrice = whitePrice;\r\n        _publicPrice = publicPrice;\r\n    }\r\n\r\n    function toggleReveal() external Manager {\r\n        _reveal = !_reveal;\r\n    }\r\n\r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        to.transfer(value);\r\n    }\r\n\r\n    function distribute() public Manager {\r\n        \r\n        uint256 balance = address(this).balance / 10000; // This is 0.01% of the total balance -> Needed to do presition calculations without floating point.\r\n        \r\n        require(payable(0x81cc8A4bb62fF93f62EC94e3AA40A3A862c54368).send(balance * 5000));\r\n        require(payable(0x10f3667970FAd7dA441261c80727caCd8B164806).send(balance * 900));\r\n        require(payable(0x7A6c41c001d6Fbf4AE6022E936B24d0d39AE3a25).send(balance * 325));\r\n        require(payable(0x6Ec4EAA315aba37B7558A66c51D0dd4986128bCb).send(balance * 325));\r\n        require(payable(0xcc2ba3C4E74A531635b928D2aC5B3f176C8B6ec3).send(balance * 216));\r\n        require(payable(0x37B8C37EB031312c5DaaA02fD5baD9Dc380a8cc4).send(balance * 125));\r\n        require(payable(0xC970bd4E2dF5F33ea62c72b9c3d808b8a609e5e1).send(balance * 550));\r\n        require(payable(0xED7AdfDBbcB1b5C93fa8B6b28B0Fc833Fa68BCA0).send(balance * 580));\r\n        require(payable(0x50a583Ab2432BF3bC5E7458C8ed10BC5Ec3AB23E).send(balance * 580));\r\n        require(payable(0x3b0f95D44f629e8E24a294799c4A1D21f06B6969).send(balance * 225));\r\n        require(payable(0x02916D0f68a02c502476DC630628B01Ee36A7826).send(balance * 50));\r\n        require(payable(0x41b6cb632F5707bF80a1c904316b19fcBee2a4cF).send(balance * 50));\r\n        require(payable(0x2C1Ba2909A0dC98A6219079FBe9A4ab23517D47E).send(balance * 50));\r\n        require(payable(0x58EE6F81AE4Ed77E8Dc50344Ab7571EA7A75a9b7).send(balance * 24));\r\n\r\n        require(payable(0x3AA599FB8003B94666c9D66Db43D859ef5EEa29f).send(address(this).balance));\r\n    }\r\n    \r\n    //User Functions======================================================================================================================================================\r\n\r\n    function whiteMint() external payable {\r\n        require(_whiteAccess[msg.sender], \"SURREAL: Invalid Access\"); \r\n\r\n        uint256 amount = msg.value / _whitePrice;\r\n\r\n        _userWhiteMints[msg.sender] += amount;\r\n        require(_userWhiteMints[msg.sender] < 11, \"SURREAL: Minting Limit Reached\");\r\n\r\n        _whiteMinted += amount;\r\n        require(_whiteMinted < 1500,\"SURREAL: Insufficient White Mint Tokens\");\r\n\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    function mint() external payable {\r\n        uint256 amount = msg.value / _publicPrice;\r\n\r\n        require(_totalSupply + amount < 5000, \"SURREAL: Insufficient Tokens\");\r\n\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whitePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicPrice\",\"type\":\"uint256\"}],\"name\":\"changePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"changeURIlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"whitePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whiteUsers\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userWhiteMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SURREAL", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://880625d8f8206564f8908e843e0feee39e7503c006e3ff4ef64c522014141a8c"}]}