{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LaunchpadV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ILaunchpadNFT.sol\\\";\\n\\ncontract LaunchpadV2 is Ownable, ReentrancyGuard {\\n    event AddCampaign(address contractAddress, CampaignMode mode, address payeeAddress, address platformFeeAddress, uint256 platformFeeRate, uint256 price, uint256 maxSupply, uint256 listingTime, uint256 expirationTime, uint256 maxBatch, uint256 maxPerAddress, address validator);\\n    event UpdateCampaign(address contractAddress, CampaignMode mode, address payeeAddress, address platformFeeAddress, uint256 platformFeeRate, uint256 price, uint256 maxSupply, uint256 listingTime, uint256 expirationTime, uint256 maxBatch, uint256 maxPerAddress, address validator);\\n    event Mint(address indexed contractAddress, CampaignMode mode, address userAddress, address payeeAddress, address platformFeeAddress, uint256 size, uint256 fee, uint256 platformFee);\\n\\n    enum CampaignMode {\\n        normal,\\n        whitelisted\\n    }\\n    struct Campaign {\\n        address contractAddress;\\n        address payeeAddress;\\n        address platformFeeAddress;\\n        uint256 platformFeeRate; // 0 %0 - 10000 100%\\n        uint256 price; // wei\\n        uint256 maxSupply;\\n        uint256 listingTime;\\n        uint256 expirationTime;\\n        uint256 maxBatch;\\n        uint256 maxPerAddress;\\n        address validator; // only for whitelisted\\n        uint256 minted;\\n    }\\n\\n    mapping(address => Campaign) private _campaignsNormal;\\n    mapping(address => Campaign) private _campaignsWhitelisted;\\n\\n    mapping(address => mapping(address => uint256)) private _mintPerAddressNormal;\\n    mapping(address => mapping(address => uint256)) private _mintPerAddressWhitelisted;\\n\\n    /* Inverse basis point. */\\n    uint256 public constant INVERSE_BASIS_POINT = 10000;\\n\\n    function mintWhitelisted(\\n        address contractAddress,\\n        uint256 batchSize,\\n        bytes memory signature\\n    ) external payable nonReentrant {\\n\\n        //  Check whitelist validator signature\\n        Campaign memory campaign = getCampaign(contractAddress, CampaignMode.whitelisted);\\n        require(campaign.contractAddress != address(0), \\\"contract not register\\\");\\n\\n        bytes32 messageHash = keccak256(abi.encodePacked(block.chainid, address(this), contractAddress, msg.sender));\\n        bytes32 proof = ECDSA.toEthSignedMessageHash(messageHash);\\n        require(ECDSA.recover(proof, signature) == campaign.validator, \\\"whitelist verification failed\\\");\\n\\n        // activity check\\n        mint_(contractAddress, batchSize, CampaignMode.whitelisted);\\n\\n    }\\n\\n    function mint(address contractAddress, uint256 batchSize) external payable nonReentrant {\\n        mint_(contractAddress, batchSize, CampaignMode.normal);\\n    }\\n\\n    function mint_(address contractAddress, uint256 batchSize, CampaignMode mode) internal {\\n        require(contractAddress != address(0), \\\"contract address can't be empty\\\");\\n        require(batchSize > 0, \\\"batchSize must greater than 0\\\");\\n\\n        Campaign memory campaign = getCampaign(contractAddress, mode);\\n\\n        require(campaign.contractAddress != address(0), \\\"contract not register\\\");\\n\\n        require(batchSize <= campaign.maxBatch, \\\"reach max batch size\\\");\\n        require(block.timestamp >= campaign.listingTime, \\\"activity not start\\\");\\n        require(block.timestamp < campaign.expirationTime, \\\"activity ended\\\");\\n        // normal and white-list mint have individual maxSupply and share MaxLaunchpadSupply\\n        require(campaign.minted + batchSize <= campaign.maxSupply, \\\"reach campaign max supply\\\");\\n        require(ILaunchpadNFT(campaign.contractAddress).getLaunchpadSupply() + batchSize <= ILaunchpadNFT(campaign.contractAddress).getMaxLaunchpadSupply(), \\\"reach campaign total max supply\\\");\\n\\n        if (mode == CampaignMode.normal) {\\n            require(_mintPerAddressNormal[campaign.contractAddress][msg.sender] + batchSize <= campaign.maxPerAddress, \\\"reach max per address limit\\\");\\n            _mintPerAddressNormal[contractAddress][msg.sender] = _mintPerAddressNormal[contractAddress][msg.sender] + batchSize;\\n            _campaignsNormal[contractAddress].minted += batchSize;\\n\\n        } else {\\n            require(_mintPerAddressWhitelisted[campaign.contractAddress][msg.sender] + batchSize <= campaign.maxPerAddress, \\\"reach max per address limit\\\");\\n            _mintPerAddressWhitelisted[contractAddress][msg.sender] = _mintPerAddressWhitelisted[contractAddress][msg.sender] + batchSize;\\n            _campaignsWhitelisted[contractAddress].minted += batchSize;\\n        }\\n\\n        uint256 totalPrice = campaign.price * batchSize;\\n        require(msg.value >= totalPrice, \\\"value not enough\\\");\\n\\n        // transfer token and mint\\n        uint256 platformFee = totalPrice * campaign.platformFeeRate / INVERSE_BASIS_POINT;\\n        uint256 fee = totalPrice - platformFee;\\n        payable(campaign.payeeAddress).transfer(fee);\\n        if (platformFee > 0) {\\n            payable(campaign.platformFeeAddress).transfer(platformFee);\\n        }\\n\\n        ILaunchpadNFT(contractAddress).mintTo(msg.sender, batchSize);\\n\\n        emit Mint(campaign.contractAddress, mode, msg.sender, campaign.payeeAddress, campaign.platformFeeAddress, batchSize, fee, platformFee);\\n        // return\\n        uint256 valueLeft = msg.value - totalPrice;\\n        if (valueLeft > 0) {\\n            payable(_msgSender()).transfer(valueLeft);\\n        }\\n\\n    }\\n\\n    function getMintPerAddress(\\n        address contractAddress,\\n        CampaignMode mode,\\n        address userAddress\\n    ) external view returns (uint256 mintPerAddress) {\\n        require(userAddress != address(0), \\\"user address invalid\\\");\\n        if (mode == CampaignMode.normal) {\\n            mintPerAddress = _mintPerAddressNormal[contractAddress][userAddress];\\n        } else {\\n            mintPerAddress = _mintPerAddressWhitelisted[contractAddress][userAddress];\\n        }\\n    }\\n\\n    function getLaunchpadMaxSupply(address contractAddress, CampaignMode mode) external view returns (uint256) {\\n        if (mode == CampaignMode.normal) {\\n            return _campaignsNormal[contractAddress].maxSupply;\\n        } else {\\n            return _campaignsWhitelisted[contractAddress].maxSupply;\\n        }\\n    }\\n\\n    function getLaunchpadSupply(address contractAddress, CampaignMode mode) external view returns (uint256) {\\n        if (mode == CampaignMode.normal) {\\n            return _campaignsNormal[contractAddress].minted;\\n        } else {\\n            return _campaignsWhitelisted[contractAddress].minted;\\n        }\\n    }\\n\\n    function getLaunchpadSupplyTotal(address contractAddress) external view returns (uint256) {\\n        return ILaunchpadNFT(contractAddress).getLaunchpadSupply();\\n    }\\n\\n    function addCampaign(\\n        address[] memory addresses,\\n        CampaignMode mode,\\n        uint256[] memory values\\n    ) external onlyOwner {\\n        require(addresses.length == 4, \\\"addresses size wrong\\\");\\n        require(values.length == 7, \\\"values size wrong\\\");\\n        Campaign memory campaign = Campaign(\\n            addresses[0], // contractAddress_,\\n            addresses[1], // payeeAddress_,\\n            addresses[2], // platformFeeAddress_,\\n            values[0], // platformFeeRate_,\\n            values[1], // price_,\\n            values[2], // maxSupply_,\\n            values[3], // listingTime_,\\n            values[4], // expirationTime_,\\n            values[5], // maxBatch_,\\n            values[6], // maxPerAddress_,\\n            addresses[3], // validator_,\\n            0\\n        );\\n        addCampaign_(campaign, mode);\\n    }\\n\\n    function addCampaign_(\\n        Campaign memory campaign,\\n        CampaignMode mode\\n    ) internal {\\n\\n        campaignCheck(campaign, mode);\\n\\n        if (mode == CampaignMode.normal) {\\n            require(_campaignsNormal[campaign.contractAddress].contractAddress == address(0), \\\"contract address already exist\\\");\\n        } else {\\n            require(_campaignsWhitelisted[campaign.contractAddress].contractAddress == address(0), \\\"contract address already exist\\\");\\n        }\\n\\n        emit AddCampaign(\\n            campaign.contractAddress,\\n            mode,\\n            campaign.payeeAddress,\\n            campaign.platformFeeAddress,\\n            campaign.platformFeeRate,\\n            campaign.price,\\n            campaign.maxSupply,\\n            campaign.listingTime,\\n            campaign.expirationTime,\\n            campaign.maxBatch,\\n            campaign.maxPerAddress,\\n            campaign.validator\\n        );\\n\\n        if (mode == CampaignMode.normal) {\\n            _campaignsNormal[campaign.contractAddress] = campaign;\\n        } else {\\n            _campaignsWhitelisted[campaign.contractAddress] = campaign;\\n        }\\n    }\\n\\n    function updateCampaign(\\n        address[] memory addresses,\\n        CampaignMode mode,\\n        uint256[] memory values\\n    ) external onlyOwner {\\n        require(addresses.length == 4, \\\"addresses size wrong\\\");\\n        require(values.length == 7, \\\"values size wrong\\\");\\n\\n        address contractAddress = addresses[0];\\n        uint256 minted;\\n        if (mode == CampaignMode.normal) {\\n            require(_campaignsNormal[contractAddress].contractAddress != address(0), \\\"normal contract address not exist\\\");\\n            minted = _campaignsNormal[contractAddress].minted;\\n        } else {\\n            require(_campaignsWhitelisted[contractAddress].contractAddress != address(0), \\\"white-list contract address not exist\\\");\\n            minted = _campaignsWhitelisted[contractAddress].minted;\\n        }\\n\\n        Campaign memory campaign = Campaign(\\n            addresses[0], // contractAddress_,\\n            addresses[1], //payeeAddress_,\\n            addresses[2], //platformFeeAddress_,\\n            values[0], //platformFeeRate_,\\n            values[1], //price_,\\n            values[2], //maxSupply_,\\n            values[3], //listingTime_,\\n            values[4], //expirationTime_,\\n            values[5], // maxBatch_,\\n            values[6], //maxPerAddress_,\\n            addresses[3], //validator_,\\n            minted\\n        );\\n        updateCampaign_(campaign, mode);\\n    }\\n\\n    function updateCampaign_(Campaign memory campaign, CampaignMode mode) internal {\\n\\n        campaignCheck(campaign, mode);\\n\\n        emit UpdateCampaign(campaign.contractAddress, mode, campaign.payeeAddress, campaign.platformFeeAddress, campaign.platformFeeRate, campaign.price, campaign.maxSupply, campaign.listingTime, campaign.expirationTime, campaign.maxBatch, campaign.maxPerAddress, campaign.validator);\\n\\n        if (mode == CampaignMode.normal) {\\n            _campaignsNormal[campaign.contractAddress] = campaign;\\n        } else {\\n            _campaignsWhitelisted[campaign.contractAddress] = campaign;\\n        }\\n    }\\n\\n    function campaignCheck(Campaign memory campaign, CampaignMode mode) private view {\\n        require(campaign.contractAddress != address(0), \\\"contract address can't be empty\\\");\\n        require(campaign.expirationTime > campaign.listingTime, \\\"expiration time must above listing time\\\");\\n        require(campaign.maxSupply > 0 && campaign.maxSupply <= ILaunchpadNFT(campaign.contractAddress).getMaxLaunchpadSupply(), \\\"campaign max supply invalid\\\");\\n\\n        if (mode == CampaignMode.whitelisted) {\\n            require(campaign.validator != address(0), \\\"validator can't be empty\\\");\\n        }\\n\\n        require(campaign.payeeAddress != address(0), \\\"payee address can't be empty\\\");\\n        require(campaign.platformFeeAddress != address(0), \\\"platform fee address can't be empty\\\");\\n        require(campaign.platformFeeRate >= 0 && campaign.platformFeeRate <= INVERSE_BASIS_POINT, \\\"platform fee rate invalid\\\");\\n        require(campaign.maxBatch > 0 && campaign.maxBatch <= 10, \\\"max batch invalid\\\");\\n        require(campaign.maxPerAddress > 0 && campaign.maxPerAddress <= campaign.maxSupply, \\\"max per address invalid\\\");\\n    }\\n\\n    function getCampaign(address contractAddress, CampaignMode mode) public view returns (Campaign memory) {\\n        if (mode == CampaignMode.normal) {\\n            return _campaignsNormal[contractAddress];\\n        } else {\\n            return _campaignsWhitelisted[contractAddress];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/ILaunchpadNFT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ILaunchpadNFT {\\n    // return max supply config for launchpad, if no reserved will be collection's max supply\\n    function getMaxLaunchpadSupply() external view returns (uint256);\\n    // return current launchpad supply\\n    function getLaunchpadSupply() external view returns (uint256);\\n    // this function need to restrict mint permission to launchpad contract\\n    function mintTo(address to, uint256 size) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"AddCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"UpdateCampaign\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"addCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpadV2.Campaign\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"getLaunchpadMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"getLaunchpadSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getLaunchpadSupplyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMintPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPerAddress\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintWhitelisted\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"enum LaunchpadV2.CampaignMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"updateCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaunchpadV2", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}