{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlphaGangGenerative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IAlphaGangGenerative.sol\\\";\\r\\n\\r\\ncontract AlphaGangGenerative is ERC721A, Ownable {\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public constant PRICE_WHALE = 49000000000000000; // 0.049 ether\\r\\n    uint256 public constant PRICE = 69000000000000000; // 0.069 ether\\r\\n\\r\\n    uint256 public price = PRICE; // 0.069 ether\\r\\n\\r\\n    uint256 public constant SUPPLY = 5555;\\r\\n    uint256 public maxSupply = 5777;\\r\\n\\r\\n    address communityWallet = 0x08180E4DE9746BC1b3402aDd7fd0E61C9C100881;\\r\\n    address payWallet = 0x08180E4DE9746BC1b3402aDd7fd0E61C9C100881;\\r\\n\\r\\n    // Phase 1: Only WL and OG, Supply 999\\r\\n    // Phase 2: Only WL and OG, Supply 1999\\r\\n    // Phase 3: All, Supply 2555\\r\\n    uint8 public mintPhase;\\r\\n\\r\\n    mapping(address => uint256) public walletMints;\\r\\n\\r\\n    bool public revealed;\\r\\n\\r\\n    bytes32 whiteListMerkleI;\\r\\n    bytes32 whiteListMerkleII;\\r\\n\\r\\n    bytes32 waitListMerkle;\\r\\n\\r\\n    constructor(\\r\\n        string memory _initBaseURI,\\r\\n        bytes32 _wlMRI,\\r\\n        bytes32 _wlMRII,\\r\\n        bytes32 _w8lMR\\r\\n    ) ERC721A(\\\"Alpha Gang Generative\\\", \\\"AGG\\\") {\\r\\n        baseURI = _initBaseURI;\\r\\n        whiteListMerkleI = _wlMRI;\\r\\n        whiteListMerkleII = _wlMRII;\\r\\n        waitListMerkle = _w8lMR;\\r\\n\\r\\n        _safeMint(address(this), 1);\\r\\n    }\\r\\n\\r\\n    modifier mintCompliance(uint256 _mintAmount, uint8 mintType) {\\r\\n        require(msg.sender == tx.origin, \\\"EOA only\\\");\\r\\n        require((totalSupply() + _mintAmount) <= SUPPLY, \\\"Max supply exceeded\\\");\\r\\n        require(mintActive(mintType), \\\"Sale is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mintActive(uint8 mintType) public view returns (bool active) {\\r\\n        uint256 _totalSupplyG2 = totalSupply();\\r\\n        // Note this will allow for last mint to go over allocation\\r\\n        if (mintPhase == 1) return mintType == 1 && _totalSupplyG2 < 1000;\\r\\n        if (mintPhase == 2) return mintType == 1 && _totalSupplyG2 < 3000;\\r\\n        if (mintPhase == 3) return mintType > 0;\\r\\n        if (mintPhase == 4) return true;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function ogMint(uint256 _mintAmount, uint256 _stakeCount)\\r\\n        external\\r\\n        payable\\r\\n        mintCompliance(_mintAmount, 1)\\r\\n    {\\r\\n        address _owner = msg.sender;\\r\\n        uint256 allocation = AGStake.ogAllocation(_owner);\\r\\n        uint256 _walletMints = walletMints[msg.sender];\\r\\n        require(allocation > _walletMints, \\\"No allocation\\\");\\r\\n\\r\\n        if (_mintAmount > allocation - _walletMints) {\\r\\n            _mintAmount = allocation - _walletMints;\\r\\n        }\\r\\n\\r\\n        // get the price, whales get discount\\r\\n        uint256 _price = allocation > 4 ? PRICE_WHALE : PRICE;\\r\\n\\r\\n        require(msg.value >= allocation * _price, \\\"Insufficient funds!\\\");\\r\\n\\r\\n        uint256 firstTokenId = _nextTokenId();\\r\\n\\r\\n        walletMints[msg.sender] += _mintAmount;\\r\\n\\r\\n        _mint(_owner, _mintAmount);\\r\\n\\r\\n        // if _stake is selected\\r\\n        if (_stakeCount > 0) {\\r\\n            unchecked {\\r\\n                uint256[] memory _tokensToStake = new uint256[](_mintAmount);\\r\\n\\r\\n                for (uint256 i = 0; i < _stakeCount; i++) {\\r\\n                    _tokensToStake[i] = firstTokenId + i;\\r\\n                }\\r\\n                AGStake.stakeG2(_tokensToStake);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function for white-listed members to mint a token\\r\\n     *\\r\\n     * Note having 2 separate functions will increase deployment cost but marginaly decrease minting cost\\r\\n     */\\r\\n    function mintWhiteListI(bytes32[] calldata _merkleProof, bool _stake)\\r\\n        external\\r\\n        payable\\r\\n        mintCompliance(1, 1)\\r\\n    {\\r\\n        require(msg.value >= price, \\\"Insufficient funds!\\\");\\r\\n        require(walletMints[msg.sender] < 2, \\\"One pass per wallet\\\");\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                whiteListMerkleI,\\r\\n                keccak256(abi.encodePacked(msg.sender)) // leaf\\r\\n            ),\\r\\n            \\\"Invalid Merkle Proof.\\\"\\r\\n        );\\r\\n        walletMints[msg.sender]++;\\r\\n        _mint(msg.sender, 1);\\r\\n\\r\\n        // if mint and stake call {stake} on {AGStakeFull}\\r\\n        if (_stake) {\\r\\n            uint256[] memory _tokensToStake = new uint256[](1);\\r\\n            _tokensToStake[0] = _nextTokenId() - 1;\\r\\n            AGStake.stakeG2(_tokensToStake);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function for white-listed members to mint two tokens\\r\\n     *\\r\\n     */\\r\\n    function mintWhiteListII(bytes32[] calldata _merkleProof, bool _stake)\\r\\n        external\\r\\n        payable\\r\\n        mintCompliance(2, 1)\\r\\n    {\\r\\n        require(msg.value >= price * 2, \\\"Insufficient funds!\\\");\\r\\n        require(walletMints[msg.sender] < 1, \\\"One pass per wallet\\\");\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                whiteListMerkleII,\\r\\n                keccak256(abi.encodePacked(msg.sender)) // leaf\\r\\n            ),\\r\\n            \\\"Invalid Merkle Proof.\\\"\\r\\n        );\\r\\n        walletMints[msg.sender]++;\\r\\n        _mint(msg.sender, 2);\\r\\n\\r\\n        // if mint and stake call {stake} on {AGStakeFull}\\r\\n        if (_stake) {\\r\\n            uint256[] memory _tokensToStake = new uint256[](1);\\r\\n            _tokensToStake[0] = _nextTokenId() - 1;\\r\\n            _tokensToStake[0] = _nextTokenId() - 2;\\r\\n            AGStake.stakeG2(_tokensToStake);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function for wait-listed members to mint a token\\r\\n     *\\r\\n     */\\r\\n    function mintWaitList(bytes32[] calldata _merkleProof, bool _stake)\\r\\n        external\\r\\n        payable\\r\\n        mintCompliance(1, 2)\\r\\n    {\\r\\n        require(msg.value >= price, \\\"Insufficient funds!\\\");\\r\\n        require(walletMints[msg.sender] < 2, \\\"One pass per wallet\\\");\\r\\n        require(\\r\\n            MerkleProof.verify(\\r\\n                _merkleProof,\\r\\n                waitListMerkle,\\r\\n                keccak256(abi.encodePacked(msg.sender)) // leaf\\r\\n            ),\\r\\n            \\\"Invalid Merkle Proof.\\\"\\r\\n        );\\r\\n        walletMints[msg.sender]++;\\r\\n        _mint(msg.sender, 1);\\r\\n\\r\\n        // if mint and stake call {stake} on {AGStakeFull}\\r\\n        if (_stake) {\\r\\n            uint256[] memory _tokensToStake = new uint256[](1);\\r\\n            _tokensToStake[0] = _nextTokenId() - 1;\\r\\n            AGStake.stakeG2(_tokensToStake);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintPublic(bool _stake) external payable mintCompliance(1, 0) {\\r\\n        require(msg.value >= price, \\\"Insufficient funds!\\\");\\r\\n        require(walletMints[msg.sender] < 2, \\\"One pass per wallet\\\");\\r\\n\\r\\n        walletMints[msg.sender]++;\\r\\n        _mint(msg.sender, 1);\\r\\n\\r\\n        // if mint and stake call {stake} on {AGStakeFull}\\r\\n        if (_stake) {\\r\\n            uint256[] memory _tokensToStake = new uint256[](1);\\r\\n            _tokensToStake[0] = _nextTokenId() - 1;\\r\\n            AGStake.stakeG2(_tokensToStake);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Minting for Community wallet and team\\r\\n     *\\r\\n     * This has additional 222 amount that it can tap into\\r\\n     * Only for owners use\\r\\n     */\\r\\n    function mintForAddress(uint256 _mintAmount, address _receiver)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            (totalSupply() + _mintAmount) <= maxSupply,\\r\\n            \\\"Max reserves exhausted.\\\"\\r\\n        );\\r\\n        _mint(_receiver, _mintAmount);\\r\\n    }\\r\\n\\r\\n    function setRevealed() public onlyOwner {\\r\\n        revealed = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev sets a state of mint\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `_state` should be in: [0, 1, 2, 3, 4]\\r\\n     * - 0 - mint not active, default\\r\\n     * - 1 - sets mint to Phase 1\\r\\n     * - 2 - sets mint to Phase 2\\r\\n     * - 3 - sets mint to Phase 3\\r\\n     * - 4 - sets mint to Public Mint\\r\\n     * - mint is not active by default\\r\\n     */\\r\\n    function setSale(uint8 _state) public onlyOwner {\\r\\n        mintPhase = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a Merkle proof() for a sale\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `_saleId` must be in: [0, 1, 2]\\r\\n     * - 0 - sets a proof for { mintWhiteListI }\\r\\n     * - 1 - sets a proof for { mintWhiteListII }\\r\\n     * - 2 - sets a proof for { mintWaitList }\\r\\n     * - `_state` bool value\\r\\n     */\\r\\n    function setMerkle(uint256 _saleId, bytes32 _merkleRoot) public onlyOwner {\\r\\n        if (_saleId == 0) {\\r\\n            whiteListMerkleI = _merkleRoot;\\r\\n        }\\r\\n        if (_saleId == 1) {\\r\\n            whiteListMerkleII = _merkleRoot;\\r\\n        }\\r\\n        if (_saleId == 2) {\\r\\n            waitListMerkle = _merkleRoot;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // owner wallet(55%), community wallet(45%)\\r\\n    function withdraw() public onlyOwner {\\r\\n        (bool hs, ) = payable(payWallet).call{\\r\\n            value: (address(this).balance * 45) / 100\\r\\n        }(\\\"\\\");\\r\\n        require(hs);\\r\\n\\r\\n        (bool os, ) = payable(communityWallet).call{\\r\\n            value: (address(this).balance * 55) / 100\\r\\n        }(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (!revealed) return _baseURI();\\r\\n        return super.tokenURI(_tokenId);\\r\\n    }\\r\\n\\r\\n    function tokensOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory ownerTokens)\\r\\n    {\\r\\n        uint256 supply = totalSupply();\\r\\n        uint256 _ownerTokenCount = balanceOf(_owner);\\r\\n        uint256[] memory _ownerTokens = new uint256[](_ownerTokenCount);\\r\\n        unchecked {\\r\\n            uint256 index;\\r\\n            for (uint256 tokenId = 1; tokenId <= supply; ++tokenId) {\\r\\n                if (ownerOf(tokenId) == _owner) {\\r\\n                    _ownerTokens[index] = tokenId;\\r\\n                    ++index;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _ownerTokens;\\r\\n    }\\r\\n\\r\\n    function setWallets(address _wallet, bool _payWallet) external onlyOwner {\\r\\n        if (_payWallet) {\\r\\n            payWallet = _wallet;\\r\\n        } else {\\r\\n            communityWallet = _wallet;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the price for mint\\r\\n     * To be used for Phase 3 of the mint\\r\\n     */\\r\\n    function setPrice(uint256 _price) external onlyOwner {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function setMaxSupply(uint256 _maxSupply) external onlyOwner {\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Staking Contract addresse setter\\r\\n     */\\r\\n    function setAGStake(address _agStake) external onlyOwner {\\r\\n        AGStake = IAGStake(_agStake);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.0.0\\r\\n// Creator: Chiru Labs\\r\\n// Modified by AlphaGang dev.dev\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"erc721a/contracts/IERC721A.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IAGStakeFull.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token receiver interface.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Cannot transfer a staked token.\\r\\n */\\r\\nerror TransferIsLocked();\\r\\n\\r\\n/**\\r\\n * Cannot transfer while token transfer is disabled.\\r\\n */\\r\\nerror TransferIsLockedGlobally();\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // ref to staking contract.\\r\\n    IAGStake AGStake;\\r\\n\\r\\n    // transfer is locked for all items.\\r\\n    // bool public allTransfersLocked;\\r\\n\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See `_packedOwnershipOf` implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID.\\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view returns (uint256) {\\r\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\r\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\r\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) &\\r\\n            BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) &\\r\\n            BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        assembly {\\r\\n            // Cast aux without masking.\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr)\\r\\n                if (curr < _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed & BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an ownership that has an address and is not burned\\r\\n                        // before an ownership that does not have an address and is not burned.\\r\\n                        // Hence, curr will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed is zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed)\\r\\n        private\\r\\n        pure\\r\\n        returns (TokenOwnership memory ownership)\\r\\n    {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length != 0\\r\\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Casts the address to uint256 without masking.\\r\\n     */\\r\\n    function _addressToUint256(address value)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        assembly {\\r\\n            result := value\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Casts the boolean to uint256 without branching.\\r\\n     */\\r\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\r\\n        assembly {\\r\\n            result := value\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\\r\\n        if (to == owner) revert ApprovalToCurrentOwner();\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\r\\n\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // approve staking contract for all\\r\\n        if (operator == address(AGStake)) return true;\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex && // If within bounds,\\r\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the balance and number minted.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\r\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            if (to.code.length != 0) {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex);\\r\\n                    if (\\r\\n                        !_checkContractOnERC721Received(\\r\\n                            address(0),\\r\\n                            to,\\r\\n                            updatedIndex++,\\r\\n                            _data\\r\\n                        )\\r\\n                    ) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (updatedIndex < end);\\r\\n                // Reentrancy protection\\r\\n                if (_currentIndex != startTokenId) revert();\\r\\n            } else {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex++);\\r\\n                } while (updatedIndex < end);\\r\\n            }\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the balance and number minted.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\r\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            do {\\r\\n                emit Transfer(address(0), to, updatedIndex++);\\r\\n            } while (updatedIndex < end);\\r\\n\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from)\\r\\n            revert TransferFromIncorrectOwner();\\r\\n\\r\\n        // TODO add AGStake here\\r\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\r\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\r\\n            getApproved(tokenId) == _msgSenderERC721A());\\r\\n\\r\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        // // check for global lock\\r\\n        // if (allTransfersLocked) revert TransferIsLockedGlobally();\\r\\n        // // Check for staking\\r\\n        // if (AGStake.vaultG2(from, tokenId) != 0) revert TransferIsLocked();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\r\\n                BITMASK_NEXT_INITIALIZED;\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\r\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\r\\n                getApproved(tokenId) == _msgSenderERC721A());\\r\\n\\r\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] =\\r\\n                _addressToUint256(from) |\\r\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\r\\n                BITMASK_BURNED |\\r\\n                BITMASK_NEXT_INITIALIZED;\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try\\r\\n            ERC721A__IERC721Receiver(to).onERC721Received(\\r\\n                _msgSenderERC721A(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            )\\r\\n        returns (bytes4 retval) {\\r\\n            return\\r\\n                retval ==\\r\\n                ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory ptr)\\r\\n    {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\r\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\r\\n            // We will need 1 32-byte word to store the length,\\r\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\r\\n            ptr := add(mload(0x40), 128)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, ptr)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := ptr\\r\\n\\r\\n            // We write the string from the rightmost digit to the leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // Costs a bit more than early returning for the zero case,\\r\\n            // but cheaper in terms of deployment and overall runtime costs.\\r\\n            for {\\r\\n                // Initialize and perform the first pass without check.\\r\\n                let temp := value\\r\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\r\\n                ptr := sub(ptr, 1)\\r\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n                temp := div(temp, 10)\\r\\n            } temp {\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n            } {\\r\\n                // Body of the for loop.\\r\\n                ptr := sub(ptr, 1)\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n            }\\r\\n\\r\\n            let length := sub(end, ptr)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            ptr := sub(ptr, 32)\\r\\n            // Store the length.\\r\\n            mstore(ptr, length)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlphaGangGenerative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAlphaGangGenerative {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function SUPPLY_MAX() external view returns (uint256);\\r\\n\\r\\n    function mintActive(uint8 mintType) external view returns (bool);\\r\\n\\r\\n    function tokensOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory ownerTokens);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAGStakeFull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAGStake {\\r\\n    event StakedG2(address owner, uint256[] tokenIds, uint256 timestamp);\\r\\n    event UnstakedG2(address owner, uint256[] tokenIds, uint256 timestamp);\\r\\n    event StakedOG(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event StakedForMint(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event UnstakedOG(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event Claimed(address owner, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    function ogAllocation(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _allocation);\\r\\n\\r\\n    function vaultG2(address, uint256) external view returns (uint256);\\r\\n\\r\\n    function stakeG2(uint256[] calldata tokenIds) external;\\r\\n\\r\\n    function updateOGAllocation(address _owner, uint256 _count) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_wlMRI\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_wlMRII\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_w8lMR\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_WHALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mintType\",\"type\":\"uint8\"}],\"name\":\"mintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPhase\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"mintWaitList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"mintWhiteListI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"mintWhiteListII\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeCount\",\"type\":\"uint256\"}],\"name\":\"ogMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agStake\",\"type\":\"address\"}],\"name\":\"setAGStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_payWallet\",\"type\":\"bool\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlphaGangGenerative", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000801464d164702d7b1d3927426f8447e0115b539fa9f8a96d20c526eec3765975512de06ac773c4297443aa050575e1ed50f0f7d4f311f7637848f5c300927672ab8003f1085b3a55f643f3730b0d07a1393cc4cadbae90bfc63bff88414a775f650000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d63396b765a776e7159766e4e743558536e523262684233414b7345474342444651674b6d724752474b5775360000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}