{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface AntiSnipe {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ab) external;\r\n    function removeSniper(address account) external;\r\n    function removeBlacklisted(address account) external;\r\n    function isBlacklisted(address account) external view returns (bool);\r\n    function setBlacklistEnabled(address account, bool enabled) external;\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external;\r\n}\r\n\r\ncontract VibeInu is IERC20 {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping (address => bool) private _liquidityHolders;\r\n\r\n    uint256 private startingSupply = 1_000_000_000;\r\n\r\n    string constant private _name = \"Vibe Inu\";\r\n    string constant private _symbol = \"VIBE\";\r\n\r\n    struct FeesStruct {\r\n        uint16 reflect;\r\n        uint16 whale;\r\n        uint16 babyWhale;\r\n        uint16 marketing;\r\n    }\r\n\r\n    struct Ratios {\r\n        uint16 whale;\r\n        uint16 babyWhale;\r\n        uint16 marketing;\r\n        uint16 total;\r\n    }\r\n\r\n    FeesStruct private currentTaxes = FeesStruct({\r\n        reflect: 0,\r\n        whale: 0,\r\n        babyWhale: 0,\r\n        marketing: 0\r\n        });\r\n\r\n    FeesStruct public _buyTaxes = FeesStruct({\r\n        reflect: 100,\r\n        whale: 400,\r\n        babyWhale: 0,\r\n        marketing: 300\r\n        });\r\n\r\n    FeesStruct public _sellTaxes = FeesStruct({\r\n        reflect: 100,\r\n        whale: 600,\r\n        babyWhale: 100,\r\n        marketing: 400\r\n        });\r\n\r\n    FeesStruct public _transferTaxes = FeesStruct({\r\n        reflect: 100,\r\n        whale: 700,\r\n        babyWhale: 0,\r\n        marketing: 400\r\n        });\r\n\r\n    Ratios public _ratios = Ratios({\r\n        whale: 14,\r\n        babyWhale: 2,\r\n        marketing: 9,\r\n        total: 25\r\n        });\r\n\r\n    uint256 constant masterTaxDivisor = 10000;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal = startingSupply * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address payable private _marketingWallet = payable(0x585cfe09fdc2Fd112E1e9069c3282BA51D9e3FE7);\r\n    address payable private _whaleWallet = payable(0xc188913E763B7025184516F81FdE927ef569Bb72);\r\n    \r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n\r\n    uint256 private swapThreshold = (_tTotal * 1) / 10000;\r\n    uint256 private swapAmount = (_tTotal * 5) / 10000;\r\n\r\n    uint256 private _maxTxAmount = (_tTotal * 2) / 100;\r\n\r\n    address[] pairPath;\r\n    bool public buybackEnabled;\r\n    bool public babyWhaleEnabled;\r\n    bool public whaleEnabled;\r\n    uint256 public babyWhalePercent = 10;\r\n    uint256 public babyWhaleDivisor = 100;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    AntiSnipe antiSnipe;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SniperCaught(address sniperAddress);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller =/= owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        if (block.chainid == 56) {\r\n            dexRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            dexRouter = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            dexRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            //Ropstein DAI 0xaD6D458402F60fD3Bd25163575031ACDce07538D\r\n        } else if (block.chainid == 43114) {\r\n            dexRouter = IUniswapV2Router02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\r\n        } else if (block.chainid == 250) {\r\n            dexRouter = IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(_owner, address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _liquidityHolders[_owner] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\r\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFees(_owner, false);\r\n        setExcludedFromFees(newOwner, true);\r\n        \r\n        if (_marketingWallet == payable(_owner))\r\n            _marketingWallet = payable(newOwner);\r\n        \r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        setExcludedFromFees(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() public onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n            antiSnipe.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"Cannot set a new pair this week!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            antiSnipe.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\r\n        if (enabled == true) {\r\n            require(!_isExcluded[account], \"Account is already excluded.\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        } else if (enabled == false) {\r\n            require(_isExcluded[account], \"Account is already included.\");\r\n            if(_excluded.length == 1){\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n            } else {\r\n                for (uint256 i = 0; i < _excluded.length; i++) {\r\n                    if (_excluded[i] == account) {\r\n                        _excluded[i] = _excluded[_excluded.length - 1];\r\n                        _tOwned[account] = 0;\r\n                        _isExcluded[account] = false;\r\n                        _excluded.pop();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setInitializer(address initializer) external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Liquidity is already in.\");\r\n        require(initializer != address(this), \"Can't be self.\");\r\n        antiSnipe = AntiSnipe(initializer);\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner {\r\n        antiSnipe.removeSniper(account);\r\n    }\r\n\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return antiSnipe.isBlacklisted(account);\r\n    }\r\n\r\n//================================================ BLACKLIST\r\n\r\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner {\r\n        antiSnipe.setBlacklistEnabled(account, enabled);\r\n    }\r\n\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external onlyOwner {\r\n        antiSnipe.setBlacklistEnabledMultiple(accounts, enabled);\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiBlock) external onlyOwner {\r\n        antiSnipe.setProtections(_antiSnipe, _antiBlock);\r\n    }\r\n\r\n    function setTaxesBuy(uint16 reflect, uint16 whale, uint16 babyWhale, uint16 marketing) external onlyOwner {\r\n        require(whale + babyWhale + reflect + marketing <= 3000);\r\n        _buyTaxes.whale = whale;\r\n        _buyTaxes.babyWhale = babyWhale;\r\n        _buyTaxes.reflect = reflect;\r\n        _buyTaxes.marketing = marketing;\r\n    }\r\n\r\n    function setTaxesSell(uint16 reflect, uint16 whale, uint16 babyWhale, uint16 marketing) external onlyOwner {\r\n        require(whale + babyWhale + reflect + marketing <= 3000);\r\n        _sellTaxes.whale = whale;\r\n        _sellTaxes.babyWhale = babyWhale;\r\n        _sellTaxes.reflect = reflect;\r\n        _sellTaxes.marketing = marketing;\r\n    }\r\n\r\n    function setTaxesTransfer(uint16 reflect, uint16 whale, uint16 babyWhale, uint16 marketing) external onlyOwner {\r\n        require(whale + babyWhale + reflect + marketing <= 3000);\r\n        _transferTaxes.whale = whale;\r\n        _transferTaxes.babyWhale = babyWhale;\r\n        _transferTaxes.reflect = reflect;\r\n        _transferTaxes.marketing = marketing;\r\n    }\r\n\r\n    function setRatios(uint16 whale, uint16 babyWhale, uint16 marketing) external onlyOwner {\r\n        _ratios.whale = whale;\r\n        _ratios.babyWhale = babyWhale;\r\n        _ratios.marketing = marketing;\r\n        _ratios.total = whale + babyWhale + marketing;\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n    }\r\n\r\n    function setWallets(address payable marketing, address payable whale) external onlyOwner {\r\n        _marketingWallet = payable(marketing);\r\n        _whaleWallet = payable(whale);\r\n    }\r\n\r\n    function setContractSwapEnabled(bool _enabled) public onlyOwner {\r\n        contractSwapEnabled = _enabled;\r\n        emit ContractSwapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setBuybackEnabled(bool enabled) external onlyOwner {\r\n        buybackEnabled = enabled;\r\n    }\r\n\r\n    function setWhaleEnabled(bool enabled) external onlyOwner {\r\n        if (enabled) {\r\n            babyWhaleEnabled = false;\r\n        }\r\n        whaleEnabled = enabled;\r\n    }\r\n\r\n    function setBabyWhaleEnabled(bool enabled) external onlyOwner {\r\n        if (enabled) {\r\n            whaleEnabled = false;\r\n        }\r\n        babyWhaleEnabled = enabled;\r\n    }\r\n\r\n    function setBabyWhaleSettings(uint256 percent, uint256 divisor) external onlyOwner {\r\n        babyWhalePercent = percent;\r\n        babyWhaleDivisor = divisor;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmount = (_tTotal * percent) / divisor;\r\n    }\r\n\r\n    function getMaxTX() public view returns (uint256) {\r\n        return _maxTxAmount / (10**_decimals);\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromLimits[account] = enabled;\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) public view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n            if(lpPairs[from] || lpPairs[to]){\r\n                if (!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to]) {\r\n                    require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (lpPairs[to]) {\r\n            if (!inSwap\r\n                && contractSwapEnabled\r\n            ) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= swapThreshold) {\r\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\r\n                    contractSwap(contractTokenBalance);\r\n                }\r\n            }\r\n\r\n            if (buybackEnabled && from != address(this)) {\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(this);\r\n                path[1] = dexRouter.WETH();\r\n                uint256 ethBalance = dexRouter.getAmountsOut(amount, path)[1];\r\n                if (babyWhaleEnabled && (ethBalance * babyWhalePercent) / babyWhaleDivisor < address(this).balance) {\r\n                    buybackAndBurn((ethBalance * babyWhalePercent) / babyWhaleDivisor);\r\n                }\r\n\r\n                if (whaleEnabled) {\r\n                    if (address(this).balance < ethBalance * 2) {\r\n                        whaleEnabled = false;\r\n                        babyWhaleEnabled = true;\r\n                    } else {\r\n                        buybackAndBurn(ethBalance * 2);\r\n                    }\r\n                }\r\n            }\r\n        } \r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function contractSwap(uint256 contractTokenBalance) private lockTheSwap {\r\n        if (_ratios.total == 0)\r\n            return;\r\n\r\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n        uint256 initial = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        \r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractTokenBalance,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance - initial;\r\n        uint256 whaleBalance = (amountETH * _ratios.whale) / _ratios.total;\r\n        uint256 babyWhaleBalance = (amountETH * _ratios.babyWhale) / _ratios.total;\r\n        uint256 marketingBalance = amountETH - (whaleBalance + babyWhaleBalance);\r\n\r\n        if (whaleBalance > 0) {\r\n            _whaleWallet.transfer(whaleBalance);\r\n        }\r\n        if (marketingBalance > 0) {\r\n            _marketingWallet.transfer(marketingBalance);\r\n        }\r\n    }\r\n\r\n    function buybackAndBurn(uint256 amountETH) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountETH}(\r\n            0, // accept any amount of ETH\r\n            path,\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if(address(antiSnipe) == address(0)){\r\n                antiSnipe = AntiSnipe(address(this));\r\n            }\r\n            contractSwapEnabled = true;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if(address(antiSnipe) == address(0)){\r\n            antiSnipe = AntiSnipe(address(this));\r\n        }\r\n        try antiSnipe.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n        swapThreshold = (balanceOf(lpPair) * 10) / 10000;\r\n        swapAmount = (balanceOf(lpPair) * 25) / 10000;\r\n    }\r\n\r\n    function sweepContingency() external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tLiquidity;\r\n\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) private returns (bool) {\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                revert(\"Only owner can transfer at this time.\");\r\n            }\r\n        }\r\n\r\n        ExtraValues memory values = _getValues(from, to, tAmount, takeFee);\r\n\r\n        _rOwned[from] = _rOwned[from] - values.rAmount;\r\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n\r\n        if (_isExcluded[from] && !_isExcluded[to]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n        } else if (!_isExcluded[from] && _isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \r\n        } else if (_isExcluded[from] && _isExcluded[to]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n        }\r\n\r\n        if (values.tLiquidity > 0)\r\n            _takeLiquidity(from, values.tLiquidity);\r\n        if (values.rFee > 0 || values.tFee > 0)\r\n            _rTotal -= values.rFee;\r\n            _tFeeTotal += values.tFee;\r\n\r\n        emit Transfer(from, to, values.tTransferAmount);\r\n        return true;\r\n    }\r\n\r\n    function _getValues(address from, address to, uint256 tAmount, bool takeFee) private returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        uint256 currentRate = _getRate();\r\n\r\n        values.rAmount = tAmount * currentRate;\r\n\r\n        if (_hasLimits(from, to)) {\r\n            bool checked;\r\n            try antiSnipe.checkUser(from, to, tAmount) returns (bool check) {\r\n                checked = check;\r\n            } catch {\r\n                revert();\r\n            }\r\n\r\n            if(!checked) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        if(takeFee) {\r\n            if (lpPairs[to]) {\r\n                currentTaxes.reflect = _sellTaxes.reflect;\r\n                currentTaxes.whale = _sellTaxes.whale;\r\n                currentTaxes.marketing = _sellTaxes.marketing;\r\n            } else if (lpPairs[from]) {\r\n                currentTaxes.reflect = _buyTaxes.reflect;\r\n                currentTaxes.whale = _buyTaxes.whale;\r\n                currentTaxes.marketing = _buyTaxes.marketing;\r\n            } else {\r\n                currentTaxes.reflect = _transferTaxes.reflect;\r\n                currentTaxes.whale = _transferTaxes.whale;\r\n                currentTaxes.marketing = _transferTaxes.marketing;\r\n            }\r\n\r\n            values.tFee = (tAmount * currentTaxes.reflect) / masterTaxDivisor;\r\n            values.tLiquidity = (tAmount * (currentTaxes.whale + currentTaxes.marketing)) / masterTaxDivisor;\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tLiquidity);\r\n\r\n            values.rFee = values.tFee * currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tLiquidity = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tLiquidity * currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return _rTotal / _tTotal;\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        _rOwned[address(this)] = _rOwned[address(this)] + (tLiquidity * _getRate());\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n        emit Transfer(sender, address(this), tLiquidity); // Transparency is the key to success.\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babyWhaleDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babyWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babyWhalePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBabyWhaleEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setBabyWhaleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabledMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setTaxesBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setTaxesSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"whale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"babyWhale\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"}],\"name\":\"setTaxesTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"whale\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setWhaleEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VibeInu", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0f2e37f71a1db719001495662c08630c8ec33ae0378c15f4bd2d5c1b507306f"}]}