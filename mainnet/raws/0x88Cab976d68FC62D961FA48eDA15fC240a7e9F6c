{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PunkCatcher.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPridePunk.sol\\\";\\n\\ncontract PunkCatcher {\\n    function buyPunk(uint[] calldata _safeList) external payable {\\n        require(msg.sender == address(0xA4E5E1520ca5AA6C7c782db35E6d9BA00b682bf5));\\n        IPridePunk _pridePunk = IPridePunk(0x67401149E3e88B10DD92821EB6302F4DeE8191bC);\\n        _pridePunk.mint{value: msg.value}(1);\\n        uint _tokenId = _pridePunk.tokenId();\\n        for(uint i = 0; i < _safeList.length; i++) {\\n            if(_safeList[i] == _tokenId) {\\n                return;\\n            } \\n        }\\n        revert();\\n    }\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory) {\\n        require(msg.sender == address(0xA4E5E1520ca5AA6C7c782db35E6d9BA00b682bf5));\\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\\n        require(success);\\n        return (success, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPridePunk.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IPridePunk {\\n  // function addMultipleToWhiteList ( address[] _users ) external;\\n  // function addTeamMember ( address[] _users, uint256[] _amounts ) external;\\n  // function addToWhitelist (  ) external;\\n  // function balanceOf ( address _user ) external returns ( uint256 );\\n  // function baseUri (  ) external view returns ( string );\\n  // function bootstrapList ( address ) external view returns ( uint256 );\\n  // function enableExternalWhiteList ( bool _state ) external;\\n  // function externalList (  ) external view returns ( address );\\n  // function externalListIsEnabled (  ) external view returns ( bool );\\n  // function externalWhiteListMint ( uint256 _requestedAmount ) external;\\n  // function isWhiteListMintOpen (  ) external view returns ( bool );\\n  // function isWhiteListOpen (  ) external view returns ( bool );\\n  // function metaPunk (  ) external view returns ( address );\\n  function mint ( uint256 _requestedAmount ) external payable;\\n  // function mintFee (  ) external view returns ( uint256 );\\n  // function owner (  ) external view returns ( address );\\n  // function ownerMintById ( uint256 _tokenId ) external;\\n  // function ownerMultiMint ( address[] recipients, uint256[] amounts ) external;\\n  // function paused (  ) external view returns ( bool );\\n  // function pridePunkTreasury (  ) external view returns ( address );\\n  // function publicMintLimit (  ) external view returns ( uint256 );\\n  // function punkIndexToAddress ( uint256 ) external returns ( address );\\n  // function renounceOwnership (  ) external;\\n  // function sendToVault (  ) external;\\n  // function setExternalWhiteListAddress ( address _address ) external;\\n  // function setReservedTokens ( uint256[] _reservedTokenIds ) external;\\n  // function setup ( uint256 _mintFee, uint256 _whiteListMintFee, uint256 _whiteListMintLimit, string _baseUri, address _metaPunk, address _vault, address _pridePunkTreasury ) external;\\n  // function teamMint ( uint256 _requestedAmount ) external;\\n  // function togglePause (  ) external;\\n  // function toggleWhiteList ( bool _isWhiteListOpen, bool _isWhiteListMintOpen ) external;\\n  function tokenId (  ) external view returns ( uint256 );\\n  // function transferOwnership ( address newOwner ) external;\\n  // function transferOwnershipUnderlyingContract ( address _newOwner ) external;\\n  // function updateMetaData ( uint256[] _tokenId ) external;\\n  // function updateMintFee ( uint256 _mintFee ) external;\\n  // function updatePublicMintLimit ( uint256 _publicMintLimit ) external;\\n  // function updateWhiteListMintFee ( uint256 _mintFee ) external;\\n  // function updateWhiteListTotalMintLimit ( uint256 _limit ) external;\\n  // function vault (  ) external view returns ( address );\\n  // function whiteList ( address ) external view returns ( bool );\\n  // function whiteListMint ( uint256 _requestedAmount ) external;\\n  // function whiteListMintFee (  ) external view returns ( uint256 );\\n  // function whiteListMintLimit (  ) external view returns ( uint256 );\\n  // function whiteListTotalMintLimit (  ) external view returns ( uint256 );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_safeList\",\"type\":\"uint256[]\"}],\"name\":\"buyPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PunkCatcher", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}