{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract ArgoTokenVesting {\r\n    using SafeMath for uint256;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 private _token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary;\r\n\r\n    // total balance of tokens sent to contract\r\n    uint256 public totalBalance;\r\n    // timestamp of release date and percent to be released\r\n    struct VestPeriodInfo {\r\n        uint256 releaseTime;\r\n        uint256 percent;\r\n        bool released;\r\n    }\r\n    // array of vesting period\r\n    VestPeriodInfo[] public vestPeriodInfoArray;\r\n\r\n    uint256 constant PRECISION = 10**25;\r\n    uint256 constant PERCENT = 100 * PRECISION;\r\n\r\n    constructor(\r\n        IERC20 token_,\r\n        address beneficiary_,\r\n        uint256[] memory releaseTimes_,\r\n        uint256[] memory percents_,\r\n        uint256 totalBalance_\r\n    ) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(\r\n            percents_.length == releaseTimes_.length,\r\n            \"ArgoTokenVesting: there should be equal percents and release times values\"\r\n        );\r\n        require(\r\n            beneficiary_ != address(0),\r\n            \"ArgoTokenVesting: beneficiary address should not be zero address\"\r\n        );\r\n        require(\r\n            address(token_) != address(0),\r\n            \"ArgoTokenVesting: token address should not be zero address\"\r\n        );\r\n\r\n        _token = token_;\r\n        for (uint256 i = 0; i < releaseTimes_.length; i++) {\r\n            vestPeriodInfoArray.push(\r\n                VestPeriodInfo({\r\n                    percent: percents_[i],\r\n                    releaseTime: releaseTimes_[i],\r\n                    released: false\r\n                })\r\n            );\r\n        }\r\n        _beneficiary = beneficiary_;\r\n        totalBalance = totalBalance_;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function token() public view virtual returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the time when the tokens are released.\r\n     */\r\n    function releaseTime(uint256 index) public view virtual returns (uint256) {\r\n        return vestPeriodInfoArray[index].releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @return the percent of tokens to be released during a period.\r\n     */\r\n    function releasePercent(uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return vestPeriodInfoArray[index].percent;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public virtual {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 amount;\r\n        for (uint256 i = 0; i < vestPeriodInfoArray.length; i++) {\r\n            VestPeriodInfo memory vestPeriodInfo = vestPeriodInfoArray[i];\r\n            if (vestPeriodInfo.releaseTime < block.timestamp) {\r\n                if (!vestPeriodInfo.released) {\r\n                    vestPeriodInfoArray[i].released = true;\r\n                    amount = amount.add(\r\n                        vestPeriodInfo\r\n                            .percent\r\n                            .mul(PRECISION)\r\n                            .mul(totalBalance)\r\n                            .div(PERCENT)\r\n                    );\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n        token().transfer(_beneficiary, amount);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ArgoVestingFactory is Ownable {\r\n    event AddressWhitelisted(address indexed beneficiary);\r\n    event VestingCreated(\r\n        address indexed beneficiary,\r\n        address indexed vestingAddress,\r\n        uint256 amount\r\n    );\r\n    event EmergencyWithdraw(address owner, uint256 amount);\r\n\r\n    // Argo Token Address\r\n    address public argoToken;\r\n\r\n    // Struct for white listed address\r\n    struct WhiteListedAddressInfo {\r\n        bool withdrawn;\r\n        uint256 amount;\r\n        address deployedVestingAddress;\r\n    }\r\n    //List of percent divisions\r\n    uint256[] public percentList;\r\n\r\n    // time difference epochs must be in same sequence as percent division, time will be calculated with current block time + timeDivsions [i]\r\n    uint256[] public epochsToRelease;\r\n\r\n    //mapping of address of their vesting contract with their address\r\n    mapping(address => bool) public tokenVestingContractMappingStatus;\r\n\r\n    //mapping of whiteListed users\r\n    mapping(address => WhiteListedAddressInfo) public whiteListedAddressMapping;\r\n\r\n    constructor(\r\n        address _argoAddress,\r\n        address[] memory _addressList,\r\n        uint256[] memory _percentList,\r\n        uint256[] memory _epochsToRelease,\r\n        uint256[] memory _amountList\r\n    ) {\r\n        require(_percentList.length > 0, \"No percent list provided\");\r\n        require(_addressList.length > 0, \"No address List provided\");\r\n        require(\r\n            _addressList.length == _amountList.length,\r\n            \"Address  and amount should be of equal length\"\r\n        );\r\n        require(\r\n            _epochsToRelease.length == _percentList.length,\r\n            \"Time and percent array length should be same\"\r\n        );\r\n\r\n        percentList = _percentList;\r\n        epochsToRelease = _epochsToRelease;\r\n        for (uint256 i = 0; i < _addressList.length; i++) {\r\n            tokenVestingContractMappingStatus[_addressList[i]] = true;\r\n            whiteListedAddressMapping[_addressList[i]].amount = _amountList[i];\r\n        }\r\n\r\n        argoToken = _argoAddress;\r\n    }\r\n\r\n    function addAddressesToWhiteList(\r\n        address[] memory _addressList,\r\n        uint256[] memory _amountList\r\n    ) public onlyOwner {\r\n        require(\r\n            _addressList.length == _amountList.length,\r\n            \"Address  and amount should be of equal length\"\r\n        );\r\n        for (uint256 i = 0; i < _addressList.length; i++) {\r\n            address _address = _addressList[i];\r\n\r\n            if (!tokenVestingContractMappingStatus[_address]) {\r\n                tokenVestingContractMappingStatus[_address] = true;\r\n                whiteListedAddressMapping[_address].amount = _amountList[i];\r\n            }\r\n\r\n            emit AddressWhitelisted(_address);\r\n        }\r\n    }\r\n\r\n    function removeAddressFromWhitelist(address _address) public onlyOwner {\r\n        delete tokenVestingContractMappingStatus[_address];\r\n        delete whiteListedAddressMapping[_address];\r\n    }\r\n\r\n    function createVesting() public {\r\n        WhiteListedAddressInfo memory whiteListedAddressInfo =\r\n            whiteListedAddressMapping[msg.sender];\r\n        require(\r\n            tokenVestingContractMappingStatus[msg.sender],\r\n            \"Address not whitelisted\"\r\n        );\r\n        require(\r\n            !whiteListedAddressInfo.withdrawn,\r\n            \"Amount already withdrawn by address\"\r\n        );\r\n        require(\r\n            whiteListedAddressInfo.amount > 0,\r\n            \"Withdraw amount is not set\"\r\n        );\r\n        whiteListedAddressMapping[msg.sender].withdrawn = true;\r\n\r\n        ArgoTokenVesting vesting =\r\n            new ArgoTokenVesting(\r\n                IERC20(argoToken),\r\n                msg.sender,\r\n                epochsToRelease,\r\n                percentList,\r\n                whiteListedAddressInfo.amount\r\n            );\r\n        whiteListedAddressMapping[msg.sender].deployedVestingAddress = address(\r\n            vesting\r\n        );\r\n        IERC20(argoToken).transfer(\r\n            address(vesting),\r\n            whiteListedAddressInfo.amount\r\n        );\r\n\r\n        emit VestingCreated(\r\n            msg.sender,\r\n            address(vesting),\r\n            whiteListedAddressInfo.amount\r\n        );\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 withdrawAmount) external onlyOwner {\r\n        IERC20(argoToken).transfer(owner(), withdrawAmount);\r\n\r\n        emit EmergencyWithdraw(owner(), withdrawAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argoAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochsToRelease\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"AddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountList\",\"type\":\"uint256[]\"}],\"name\":\"addAddressesToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"argoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochsToRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percentList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenVestingContractMappingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListedAddressMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deployedVestingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArgoVestingFactory", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000028cca76f6e8ec81e4550ecd761f899110b060e9700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000c69dcca2a0ca331545b37f2f84098afa03ecbbfa000000000000000000000000d529a0579af9f303c15951d0d0355c505fc0c5690000000000000000000000009a909f9a9ac26a13bb999d75e1190811a9c106a7000000000000000000000000a7b5b93bf8b322023bda57e2c86b57f4ddb4f4a10000000000000000000000004689f8d5f40d609d8491390b78670cbd8887e65600000000000000000000000073b0d09281de7146d294486d78a045c333eff3c80000000000000000000000007dca4ab31381c4e54e58d180756b17c8d476f7f000000000000000000000000005c80e41113ee42a226cf75cbe7047b22b8b9a3600000000000000000000000089de349d015476de0f2bf3aa04fbf812b748b79a00000000000000000000000026b49b322e2b24e028a1f54315fe81976613ab5200000000000000000000000016536f5039682f0866cde545175ccb444c2e7e5600000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000627d050c0000000000000000000000000000000000000000000000000000000062f64f0c00000000000000000000000000000000000000000000000000000000636f990c0000000000000000000000000000000000000000000000000000000063e8e30c00000000000000000000000000000000000000000000000000000000645e388c0000000000000000000000000000000000000000000000000000000064d7828c000000000000000000000000000000000000000000000000000000006550cc8c0000000000000000000000000000000000000000000000000000000065ca168c000000000000000000000000000000000000000000000000000000006640bd8c000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b633647180000000000000000000000000000000000000000000000001a784379d99db42000000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b633647180000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000f37e9065a9f6281f000000000000000000000000000000000000000000000000113ba0f950899872c0000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ed8bb1a0d6ed84730c7a6f43f62ad58d271b5826f940bef7687fc759a98e701"}]}