{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.8.7;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface ITraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IDogewood {\r\n    // struct to store each token's traits\r\n    struct Doge2 {\r\n        uint8 head;\r\n        uint8 breed;\r\n        uint8 color;\r\n        uint8 class;\r\n        uint8 armor;\r\n        uint8 offhand;\r\n        uint8 mainhand;\r\n        uint16 level;\r\n        uint16 breedRerollCount;\r\n        uint16 classRerollCount;\r\n    }\r\n\r\n    function getTokenTraits(uint256 tokenId) external view returns (Doge2 memory);\r\n    function getGenesisSupply() external view returns (uint256);\r\n    function pull(address owner, uint256[] calldata ids) external;\r\n    function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level) external;\r\n    function transfer(address to, uint256 tokenId) external;\r\n    // function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n}\r\n\r\n// interface DogeLike {\r\n//     function pull(address owner, uint256[] calldata ids) external;\r\n//     function manuallyAdjustDoge(uint256 id, uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level) external;\r\n//     function transfer(address to, uint256 tokenId) external;\r\n//     function doges(uint256 id) external view returns(uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n// }\r\ninterface PortalLike {\r\n    function sendMessage(bytes calldata message_) external;\r\n}\r\n\r\ninterface CastleLike {\r\n    function pullCallback(address owner, uint256[] calldata ids) external;\r\n}\r\n\r\n// interface DogewoodLike {\r\n//     function ownerOf(uint256 id) external view returns (address owner_);\r\n//     function activities(uint256 id) external view returns (address owner, uint88 timestamp, uint8 action);\r\n//     function doges(uint256 dogeId) external view returns (uint8 head, uint8 breed, uint8 color, uint8 class, uint8 armor, uint8 offhand, uint8 mainhand, uint16 level);\r\n// }\r\ninterface ERC20Like {\r\n    function balanceOf(address from) external view returns(uint256 balance);\r\n    function burn(address from, uint256 amount) external;\r\n    function mint(address from, uint256 amount) external;\r\n    function transfer(address to, uint256 amount) external;\r\n}\r\n\r\ninterface ERC1155Like {\r\n    function mint(address to, uint256 id, uint256 amount) external;\r\n    function burn(address from, uint256 id, uint256 amount) external;\r\n}\r\n\r\ninterface ERC721Like {\r\n    function transferFrom(address from, address to, uint256 id) external;   \r\n    function transfer(address to, uint256 id) external;\r\n    function ownerOf(uint256 id) external returns (address owner);\r\n    function mint(address to, uint256 tokenid) external;\r\n}\r\n\r\n// import \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\ncontract Traits is ITraits {\r\n\r\n  using Strings for uint256;\r\n\r\n  address implementation_;\r\n  address public admin;\r\n\r\n  mapping (uint8=>string) public traitTypes;\r\n\r\n  // storage of each traits name\r\n  // trait1 => [name1, name2, ...]\r\n  mapping(uint8 => mapping(uint8 => string)) public traitNames;\r\n\r\n  // trait1 => id1 => trait2 => id2 => address\r\n  // ex:\r\n  //   breed => 0 => head => 0 => breedHeas\r\n  //   class => {armor | offhand | mainhand} => value => address\r\n  mapping(uint8 => mapping(uint8 => mapping(uint8 => mapping(uint8 => address)))) public traitSvgs;\r\n\r\n  IDogewood public dogewood;\r\n  \r\n  string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n  function initialize() external onlyOwner {\r\n    require(msg.sender == admin);\r\n\r\n    string[8] memory traitTypes_ = ['head', 'breed', 'color', 'class', 'armor', 'offhand', 'mainhand', 'level'];\r\n    for (uint8 i = 0; i < traitTypes_.length; i++) {\r\n      traitTypes[i] = traitTypes_[i];  \r\n    }\r\n\r\n    // head\r\n    string[9] memory heads = [\"Determined\", \"High\", \"Happy\", \"Determined Tongue\", \"High Tongue\", \"Happy Tongue\", \"Determined Open\", \"High Open\", \"Happy Open\"];\r\n    for (uint8 i = 0; i < heads.length; i++) {\r\n      traitNames[0][i] = heads[i];  \r\n    }\r\n    // bread\r\n    string[8] memory breads = [\"Shiba\", \"Pug\", \"Corgi\", \"Labrador\", \"Dachshund\", \"Poodle\", \"Pitbull\", \"Bulldog\"];\r\n    for (uint8 i = 0; i < breads.length; i++) {\r\n      traitNames[1][i] = breads[i];  \r\n    }\r\n    // color\r\n    string[6] memory colors = [\"Palette 1\", \"Palette 2\", \"Palette 3\", \"Palette 4\", \"Palette 5\", \"Palette 6\"];\r\n    for (uint8 i = 0; i < colors.length; i++) {\r\n      traitNames[2][i] = colors[i];  \r\n    }\r\n    // class\r\n    string[8] memory classes = [\"Warrior\", \"Rogue\", \"Mage\", \"Hunter\", \"Cleric\", \"Bard\", \"Merchant\", \"Forager\"];\r\n    for (uint8 i = 0; i < classes.length; i++) {\r\n      traitNames[3][i] = classes[i];  \r\n    }\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  /** ADMIN */\r\n\r\n  function setDogewood(address _dogewood) external onlyOwner {\r\n    dogewood = IDogewood(_dogewood);\r\n  }\r\n\r\n  function setTraitTypes(uint8 id, string memory value) external onlyOwner {\r\n    traitTypes[id] = value;\r\n  }\r\n\r\n  /**\r\n   * administrative to upload the names associated with each trait\r\n   */\r\n  function uploadTraitNames(uint8 trait, uint8[] calldata traitIds, string[] calldata names) external onlyOwner {\r\n    require(traitIds.length == names.length, \"Mismatched inputs\");\r\n    for (uint256 index = 0; index < traitIds.length; index++) {\r\n      traitNames[trait][traitIds[index]] = names[index];\r\n    }\r\n  }\r\n\r\n  function uploadTraitSvgs(uint8 trait1, uint8 id1, uint8 trait2, uint8[] calldata trait2Ids, address source) external onlyOwner {\r\n    for (uint256 index = 0; index < trait2Ids.length; index++) {\r\n        traitSvgs[trait1][id1][trait2][trait2Ids[index]] = source; \r\n    }\r\n  }\r\n\r\n  /*///////////////////////////////////////////////////////////////\r\n                  INTERNAL FUNCTIONS\r\n  //////////////////////////////////////////////////////////////*/\r\n\r\n  function call(address source, bytes memory sig) internal view returns (string memory svg) {\r\n      (bool succ, bytes memory ret)  = source.staticcall(sig);\r\n      require(succ, \"failed to get data\");\r\n      svg = abi.decode(ret, (string));\r\n  }\r\n\r\n  function getSvg(uint8 trait1, uint8 id1, uint8 trait2, uint8 id2) internal view returns (string memory data_) {\r\n      address source = traitSvgs[trait1][id1][trait2][id2];\r\n      data_ = call(source, getData(trait1, id1, trait2, id2));\r\n  }\r\n\r\n  function getData(uint8 trait1, uint8 id1, uint8 trait2, uint8 id2) internal view returns (bytes memory data) {\r\n    string memory s = string(abi.encodePacked(\r\n          traitTypes[trait1],toString(id1),\r\n          traitTypes[trait2],toString(id2),\r\n          \"()\"\r\n      ));\r\n    return abi.encodeWithSignature(s, \"\");\r\n  }\r\n\r\n  /**\r\n   * generates an entire SVG by composing multiple <image> elements of PNGs\r\n   * @param tokenId the ID of the token to generate an SVG for\r\n   * @return a valid SVG of the Sheep / Wolf\r\n   */\r\n  function drawSVG(uint256 tokenId) public view returns (string memory) {\r\n    IDogewood.Doge2 memory s = dogewood.getTokenTraits(tokenId);\r\n\r\n    return string(abi.encodePacked(\r\n      string(abi.encodePacked(\r\n        '<svg id=\"doge\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 64 64\" shape-rendering=\"geometricPrecision\" text-rendering=\"geometricPrecision\"><style>',\r\n        getSvg(1, s.breed, 2, s.color) // breed -> color\r\n      )),\r\n      '.to {fill: #E2B0D0;};<![CDATA[#llu_to {animation: llu_to__to 1970ms linear infinite normal forwards}@keyframes llu_to__to {0% {transform: translate(38.445px, 50.11px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(38.445px, 49.11px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(38.445px, 50.08px)}}#llu_tr {animation: llu_tr__tr 1970ms linear infinite normal forwards}@keyframes llu_tr__tr {0% {transform: rotate(0deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: rotate(9.852042deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: rotate(0.295561deg)}}#lll_tr {animation: lll_tr__tr 1970ms linear infinite normal forwards}@keyframes lll_tr__tr {0% {transform: translate(40.570847px, 59.34803px) rotate(0deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(40.570847px, 59.34803px) rotate(-6.706667deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(40.570847px, 59.34803px) rotate(0deg)}}#lau_to {animation: lau_to__to 1970ms linear infinite normal forwards}@keyframes lau_to__to {0% {transform: translate(40.09px, 36.61px)}10.152284% {transform: translate(40.09px, 36.61px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(40.09px, 35.724449px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(40.09px, 36.583433px)}}#lal_to {animation: lal_to__to 1970ms linear infinite normal forwards}@keyframes lal_to__to {0% {transform: translate(44.64px, 42.14px)}10.152284% {transform: translate(44.64px, 42.14px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(44.64px, 41.30px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(44.64px, 42.12px)}}#lhg_to {animation: lhg_to__to 1970ms linear infinite normal forwards}@keyframes lhg_to__to {0% {transform: translate(51.932867px, 41.61px)}10.152284% {transform: translate(51.932867px, 41.61px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(51.932867px, 40.61px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(51.932867px, 41.58px)}}#rlu_to {animation: rlu_to__to 1970ms linear infinite normal forwards}@keyframes rlu_to__to {0% {transform: translate(29.8px, 49px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(29.727549px, 47.98px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(29.797826px, 48.97px)}}#rll_tr {animation: rll_tr__tr 1970ms linear infinite normal forwards}@keyframes rll_tr__tr {0% {transform: translate(21.539296px, 59.4px) rotate(7.41deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(21.539296px, 59.397946px) rotate(0.899323deg);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(21.539296px, 59.397946px) rotate(7.824398deg)}}#b_to {animation: b_to__to 1970ms linear infinite normal forwards}@keyframes b_to__to {0% {transform: translate(32.42684px, 42.24346px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(32.42684px, 41.24346px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(32.42684px, 42.21346px)}}#h_to {animation: h_to__to 1970ms linear infinite normal forwards}@keyframes h_to__to {0% {transform: translate(34.27015px, 25.573563px)}5.076142% {transform: translate(34.27015px, 25.573563px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(34.27015px, 24.573563px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(34.27015px, 25.543563px)}}#rau_to {animation: rau_to__to 1970ms linear infinite normal forwards}@keyframes rau_to__to {0% {transform: translate(25.071545px, 35.88px)}10.152284% {transform: translate(25.071545px, 35.88px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(25.071545px, 34.88px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(25.071545px, 35.85px)}}#ral_to {animation: ral_to__to 1970ms linear infinite normal forwards}@keyframes ral_to__to {0% {transform: translate(21.75px, 39.476864px)}10.152284% {transform: translate(21.75px, 39.476864px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}50.761421% {transform: translate(21.75px, 38.476864px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(21.75px, 39.446864px)}}#rhg_to {animation: rhg_to__to 1970ms linear infinite normal forwards}@keyframes rhg_to__to {0% {transform: translate(16.48px, 26.210001px)}20.304569% {transform: translate(16.48px, 26.210001px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}60.913706% {transform: translate(16.48px, 25.210001px);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1)}100% {transform: translate(16.48px, 26.172501px)}}]]></style><g id=\"llu_to\" transform=\"translate(38.445,50.11)\"><g id=\"llu_tr\" transform=\"rotate(0)\"><path id=\"llu\" class=\"p st\" d=\"M39,54.08C48.21,59.71,47.38,49.2,38.85,47.08C35.57,46.22,32.87,50.33,39,54.08Z\" transform=\"translate(-38.444998,-50.11)\"/></g></g><g id=\"lll_tr\" transform=\"translate(40.570847,59.34803) rotate(0)\"><path id=\"lll\" d=\"M40.67,54.6C40.67,54.6,38.22,55.6,38.76,56.02C39.019118,56.1171,39.293294,56.167874,39.57,56.17C39.846706,56.172126,37.48,57.85,39.5,57.85C38.5,59.75,39.33,60.29,40.5,60.14C42.88,59.85,47.35,54.94,45.34,53.35\" transform=\"translate(-40.570846,-59.34803)\" class= \"p st\" /></g><g id=\"lau_to\" transform=\"translate(40.09,36.61)\"><path id=\"lau\" d=\"M39.58,34.55C41,32.99,43.94,34.55,44.05,37.89C54,50.78,31.36,41.73,39.58,34.55Z\" transform=\"translate(-40.089999,-36.692566)\" class=\"p st\" /></g><g id=\"lal_to\" transform=\"translate(44.64,42.141064)\"><path id=\"lal\" d=\"M44.45,40.41C48.84,37.86,55.52,44.57,45.22,44.5C45.22,44.5,45.03,45.5,44.49,44.74C44.22,44.98,43.29,46.3,43.49,43.81\" transform=\"translate(-44.64,-42.141054)\" class= \"p st\" /></g><g id=\"lhg_to\" transform=\"translate(51.932867,41.613806)\"><g id=\"lhg\" transform=\"translate(-51.932867,-41.613805)\"><g id=\"lh\"><path class=\"p st\" d=\"M53.72,40.94C53.72,40.94,54.19,42.8,53.06,42.82C53.74,44.82,48.95,43.66,50.46,42.27C50.310545,41.770875,50.383427,41.231554,50.66,40.79C48.89,38.05,55,38.77,53.72,40.94Z\" fill=\"rgb(250,146,35)\"/><path class=\"p st\" d=\"M50.38,43.33C50.38,43.33,50.15,43.56,49.03,43.1M50.18,41.72C50.5,41.62,50.42,40.56,50.42,40.56C52.19,42.44,51.55,38.78,50.42,39.07C49.957689,39.069969,49.514599,39.254979,49.18958,39.583756C48.864561,39.912532,48.684655,40.35772,48.69,40.82\" fill=\"rgb(250,146,35)\" /></g><g id=\"oh\">',\r\n      string(abi.encodePacked(\r\n        getSvg(3, s.class, 5, s.offhand), // class -> offhand\r\n        string(abi.encodePacked(\r\n          '</g></g></g><g id=\"rlu_to\" transform=\"translate(29.8,49)\"><path id=\"rlu\" d=\"M26.16,47.51C17.88,57,27,58.28,32.3,51.18\" transform=\"rotate(-16.630564) translate(-29.8,-49.07425)\" class= \"p st\" /></g><g id=\"rll_tr\" transform=\"translate(21.539296,59.397946) rotate(7.415168)\"><path id=\"rll\" d=\"M23,53.26C23,53.26,20,54,21.35,55C20.07,55.79,20.19,56.46,21.24,56.32C18.09,63.32,24.24,59.17,26.69,56.56C28.03,55.13,28.07,54.78,28.07,54.78\" transform=\"translate(-21.059999,-59.397931)\" class= \"p st\" /></g><g id=\"b_to\" transform=\"translate(32.42684,42.24346)\"><g id=\"b\" transform=\"translate(-32.42684,-42.243459)\"><path id=\"t\" d=\"M23.47,36.09C22.57,40.9,25.15,39.94,26.03,47.91C26.63,53.36,41,56.43,40.5,43C40.36,39.33,42.2,35.12,39.8,33.36C36.57,31,24.94,28.27,23.47,36.09Z\" class= \"p st\" /></g></g> <g id=\"rau_to\" transform=\"translate(25.071545,35.88)\"><path id=\"rau\" d=\"M26,33.76C26,33.76,21.84,31.92,20.7,36.82C20.7,36.82,17.2,41.48,21.7,41.49C26.05,41.49,26.03,40.15,27.32,40.25\" transform=\"translate(-25.07154,-35.756237)\" class= \"p st\" /></g><g id=\"b_to\" transform=\"translate(32.42684,42.24346)\"><g id=\"b\" transform=\"translate(-32.42684,-42.243459)\">',\r\n          getSvg(3, s.class, 4, s.armor))), // class -> armor\r\n        string(abi.encodePacked(\r\n          '</g></g><g id=\"h_to\" transform=\"translate(34.27015,25.573563)\"><g id=\"h\" transform=\"translate(-34.27015,-25.573563)\">',\r\n          getSvg(1, s.breed, 0, s.head), // breed -> head\r\n          '</g></g><g id=\"ral_to\" transform=\"translate(21.75,39.476864)\"><path id=\"ral\" d=\"M22.54,37.73C21.91,36.65,19.54,35.95,17.48,38.42C13.89,42.8,23,43,23.3,40.67\" transform=\"translate(-21.749999,-39.476864)\" class= \"p st\" /></g><g id=\"rhg_to\" transform=\"translate(16.48,26.210001)\"><g id=\"rhg\" transform=\"translate(-16.48,-26.210001)\"><g id=\"mh\">')),\r\n        string(abi.encodePacked(\r\n          getSvg(3, s.class, 6, s.mainhand), // class -> mainhand\r\n          '</g><g id=\"rh\"><path id=\"25\" d=\"M18.08,37.23C22.13,35.44,21.08,41.16,19.59,41.16C18.1,41.16,17.51,37.49,18.08,37.23Z\" class= \"p st\" /><path id=\"13\" d=\"M18.67,38.69C20.56,39.14,19.04,40.86,19.04,40.86C21.63,43.17,13.04,44.51,14.3,41.67C12.24,41.67,13.08,38.92,13.08,38.92C11.52,35.33,21.48,36,18.67,38.69ZM15.67,41.35C16.55443,41.435012,17.446858,41.370784,18.31,41.16M17.62,38.74C16.866986,38.594273,16.093014,38.594273,15.34,38.74\" class= \"p st\" /></g></g></g><path id=\"rf\" d=\"M22.920306,59.141614Q24.375075,57.999107,24.899612,59.141614Q26.13429,57.617253,26.488256,60.345399Q23.097414,60.768964,21.257409,60.174476\" transform=\"matrix(1 0 0 1 -0.10429 -0.116147)\" class= \"p st\" /><path id=\"lf\" d=\"M23.380676,59.141614Q25.065606,57.999107,25.590143,59.141614Q26.824821,57.617253,26.488256,60.345399Q23.097414,60.768964,21.257409,60.174476\" transform=\"matrix(1 0 0 1 18.164491 -0.116147)\" class= \"p st\" /></svg>'\r\n        ))\r\n      ))\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * generates an attribute for the attributes array in the ERC721 metadata standard\r\n   * @param traitType the trait type to reference as the metadata key\r\n   * @param value the token's trait associated with the key\r\n   * @return a JSON dictionary for the single attribute\r\n   */\r\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      '{\"trait_type\":\"',\r\n      traitType,\r\n      '\",\"value\":\"',\r\n      value,\r\n      '\"}'\r\n    ));\r\n  }\r\n\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n      // Inspired by OraclizeAPI's implementation - MIT licence\r\n      // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n      if (value == 0) {\r\n          return \"0\";\r\n      }\r\n      uint256 temp = value;\r\n      uint256 digits;\r\n      while (temp != 0) {\r\n          digits++;\r\n          temp /= 10;\r\n      }\r\n      bytes memory buffer = new bytes(digits);\r\n      while (value != 0) {\r\n          digits -= 1;\r\n          buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n          value /= 10;\r\n      }\r\n      return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * generates an array composed of all the individual traits and values\r\n   * @param tokenId the ID of the token to compose the metadata for\r\n   * @return a JSON array of all of the attributes for given token ID\r\n   */\r\n  function compileAttributes(uint256 tokenId) public view returns (string memory) {\r\n    IDogewood.Doge2 memory s = dogewood.getTokenTraits(tokenId);\r\n\r\n    string memory traits1 = string(abi.encodePacked(\r\n      attributeForTypeAndValue(traitTypes[0], traitNames[0][s.head]),',',\r\n      attributeForTypeAndValue(traitTypes[1], traitNames[1][s.breed]),',',\r\n      attributeForTypeAndValue(traitTypes[2], traitNames[2][s.color]),',',\r\n      attributeForTypeAndValue(traitTypes[3], traitNames[3][s.class]),','\r\n    ));\r\n    string memory traits2 = string(abi.encodePacked(\r\n      attributeForTypeAndValue(traitTypes[4], toString(s.armor)),',',\r\n      attributeForTypeAndValue(traitTypes[5], toString(s.offhand)),',',\r\n      attributeForTypeAndValue(traitTypes[6], toString(s.mainhand)),',',\r\n      attributeForTypeAndValue(traitTypes[7], toString(s.level)),','\r\n    ));\r\n    return string(abi.encodePacked(\r\n      '[',\r\n      traits1, traits2,\r\n      '{\"trait_type\":\"Generation\",\"value\":',\r\n      tokenId <= dogewood.getGenesisSupply() ? '\"Gen 0\"' : '\"Gen 1\"',\r\n      '},{\"trait_type\":\"Reroll Breed Count\",\"value\":', toString(s.breedRerollCount),\r\n      '},{\"trait_type\":\"Reroll Class Count\",\"value\":', toString(s.classRerollCount),\r\n      '}]'\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * generates a base64 encoded metadata response without referencing off-chain content\r\n   * @param tokenId the ID of the token to generate the metadata for\r\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\r\n   */\r\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n    string memory metadata = string(abi.encodePacked(\r\n      '{\"name\": \"Dogewood #',\r\n      tokenId.toString(),\r\n      '\", \"description\": \"100% on-chain\", \"image\": \"data:image/svg+xml;base64,',\r\n      base64(bytes(drawSVG(tokenId))),\r\n      '\", \"attributes\":',\r\n      compileAttributes(tokenId),\r\n      \"}\"\r\n    ));\r\n\r\n    return string(abi.encodePacked(\r\n      \"data:application/json;base64,\",\r\n      base64(bytes(metadata))\r\n    ));\r\n  }\r\n\r\n  /** BASE 64 - Written by Brech Devos */\r\n\r\n  function base64(bytes memory data) internal pure returns (string memory) {\r\n    if (data.length == 0) return '';\r\n    \r\n    // load the table into memory\r\n    string memory table = TABLE;\r\n\r\n    // multiply by 4/3 rounded up\r\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n    // add some extra buffer at the end required for the writing\r\n    string memory result = new string(encodedLen + 32);\r\n\r\n    assembly {\r\n      // set the actual output length\r\n      mstore(result, encodedLen)\r\n      \r\n      // prepare the lookup table\r\n      let tablePtr := add(table, 1)\r\n      \r\n      // input ptr\r\n      let dataPtr := data\r\n      let endPtr := add(dataPtr, mload(data))\r\n      \r\n      // result ptr, jump over length\r\n      let resultPtr := add(result, 32)\r\n      \r\n      // run over the input, 3 bytes at a time\r\n      for {} lt(dataPtr, endPtr) {}\r\n      {\r\n          dataPtr := add(dataPtr, 3)\r\n          \r\n          // read 3 bytes\r\n          let input := mload(dataPtr)\r\n          \r\n          // write 4 characters\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\r\n          resultPtr := add(resultPtr, 1)\r\n      }\r\n      \r\n      // padding with '='\r\n      switch mod(mload(data), 3)\r\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"compileAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogewood\",\"outputs\":[{\"internalType\":\"contract IDogewood\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"drawSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dogewood\",\"type\":\"address\"}],\"name\":\"setDogewood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setTraitTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitSvgs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"trait\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"uploadTraitNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"trait1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"id1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"trait2\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"trait2Ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"uploadTraitSvgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Traits", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e06ed68f51f5c4199e77d91767f4811849cd59f6f427820e6560db0a0ffb265a"}]}