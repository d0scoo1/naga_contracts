{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: IXDEFIDistribution.sol\r\n\r\n\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\ninterface IXDEFIDistribution is IERC721Enumerable {\r\n\r\n    error CannotUnlock();\r\n    error EmptyArray();\r\n    error IncorrectBonusMultiplier();\r\n    error InsufficientAmountUnlocked();\r\n    error InsufficientScore();\r\n    error InvalidDuration();\r\n    error InvalidMultiplier();\r\n    error InvalidToken();\r\n    error LockingIsDisabled();\r\n    error LockResultsInTooFewUnits();\r\n    error MustMergeMultiple();\r\n    error NoReentering();\r\n    error NoUnitSupply();\r\n    error NotApprovedOrOwnerOfToken();\r\n    error NotInEmergencyMode();\r\n    error NotTokenOwner();\r\n    error PositionAlreadyUnlocked();\r\n    error PositionStillLocked();\r\n    error TokenDoesNotExist();\r\n    error Unauthorized();\r\n\r\n    struct Position {\r\n        uint96 units;  // 240,000,000,000,000,000,000,000,000 XDEFI * 2.55x bonus (which fits in a `uint96`).\r\n        uint88 depositedXDEFI;  // XDEFI cap is 240000000000000000000000000 (which fits in a `uint88`).\r\n        uint32 expiry;  // block timestamps for the next 50 years (which fits in a `uint32`).\r\n        uint32 created;\r\n        uint256 pointsCorrection;\r\n    }\r\n\r\n    /// @notice Emitted when owner proposed an account that can accept ownership.\r\n    event OwnershipProposed(address indexed owner, address indexed pendingOwner);\r\n\r\n    /// @notice Emitted when an account has accepted ownership.\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed owner);\r\n\r\n    /// @notice Emitted when the base URI is set (or re-set).\r\n    event BaseURISet(string baseURI);\r\n\r\n    /// @notice Emitted when the contract is no longer allowing locking XDEFI, and is allowing all locked positions to be unlocked effective immediately.\r\n    event EmergencyModeActivated();\r\n\r\n    /// @notice Emitted when a new lock period duration, in seconds, has been enabled with some bonus multiplier (scaled by 100, 0 signaling it is disabled).\r\n    event LockPeriodSet(uint256 indexed duration, uint256 indexed bonusMultiplier);\r\n\r\n    /// @notice Emitted when a new locked position is created for some amount of XDEFI, and the NFT is minted to an owner.\r\n    event LockPositionCreated(uint256 indexed tokenId, address indexed owner, uint256 amount, uint256 indexed duration);\r\n\r\n    /// @notice Emitted when a locked position is unlocked, withdrawing some amount of XDEFI.\r\n    event LockPositionWithdrawn(uint256 indexed tokenId, address indexed owner, uint256 amount);\r\n\r\n    /// @notice Emitted when a new amount of XDEFI is distributed to all locked positions, by some caller.\r\n    event DistributionUpdated(address indexed caller, uint256 amount);\r\n\r\n    /// @notice Emitted when some score fo a token is consumed, resulting in a new token with a lesser score.\r\n    event ScoreConsumed(uint256 indexed tokenId, uint256 amount, uint256 newTokenId);\r\n\r\n    /// @notice Emitted when unlocked tokens are merged into one.\r\n    event TokensMerged(uint256[] mergedTokenIds, uint256 resultingTokenId);\r\n\r\n    /// @notice The address of the XDEFI token.\r\n    function xdefi() external view returns (address XDEFI_);\r\n\r\n    /// @notice The amount of XDEFI that is distributable to all currently locked positions.\r\n    function distributableXDEFI() external view returns (uint256 distributableXDEFI_);\r\n\r\n    /// @notice The amount of XDEFI that was deposited by all currently locked positions.\r\n    function totalDepositedXDEFI() external view returns (uint256 totalDepositedXDEFI_);\r\n\r\n    /// @notice The amount of locked position units (in some way, it is the denominator use to distribute new XDEFI to each unit).\r\n    function totalUnits() external view returns (uint256 totalUnits_);\r\n\r\n    /// @notice Returns the position details (`pointsCorrection_` is a value used in the amortized work pattern for token distribution).\r\n    function positionOf(uint256 tokenId_) external view returns (uint96 units_, uint88 depositedXDEFI_, uint32 expiry_, uint32 created_, uint256 pointsCorrection_);\r\n\r\n    /// @notice The multiplier applied to the deposited XDEFI amount to determine the units of a position, and thus its share of future distributions.\r\n    function bonusMultiplierOf(uint256 duration_) external view returns (uint256 bonusMultiplier_);\r\n\r\n    /// @notice The base URI for NFT metadata.\r\n    function baseURI() external view returns (string memory baseURI_);\r\n\r\n    /// @notice The account that can set and unset lock periods and transfer ownership of the contract.\r\n    function owner() external view returns (address owner_);\r\n\r\n    /// @notice The account that can take ownership of the contract.\r\n    function pendingOwner() external view returns (address pendingOwner_);\r\n\r\n    /// @notice The contract is no longer allowing locking XDEFI, and is allowing all locked positions to be unlocked effective immediately.\r\n    function inEmergencyMode() external view returns (bool lockingDisabled_);\r\n\r\n    /// @notice The minimum units that can result from a lock of XDEFI.\r\n    function MINIMUM_UNITS() external view returns (uint256 minimumUnits_);\r\n\r\n    /*******************/\r\n    /* Admin Functions */\r\n    /*******************/\r\n\r\n    /// @notice Allows the `pendingOwner` to take ownership of the contract.\r\n    function acceptOwnership() external;\r\n\r\n    /// @notice Disallows locking XDEFI, and is allows all locked positions to be unlocked effective immediately.\r\n    function activateEmergencyMode() external;\r\n\r\n    /// @notice Allows the owner to propose a new owner for the contract.\r\n    function proposeOwnership(address newOwner_) external;\r\n\r\n    /// @notice Sets the base URI for NFT metadata.\r\n    function setBaseURI(string calldata baseURI_) external;\r\n\r\n    /// @notice Allows the setting or un-setting (when the multiplier is 0) of multipliers for lock durations. Scaled such that 1x is 100.\r\n    function setLockPeriods(uint256[] calldata durations_, uint256[] calldata multipliers) external;\r\n\r\n    /**********************/\r\n    /* Position Functions */\r\n    /**********************/\r\n\r\n    /// @notice Unlock only the deposited amount from a non-fungible position, sending the XDEFI to some destination, when in emergency mode.\r\n    function emergencyUnlock(uint256 tokenId_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /// @notice Returns the bonus multiplier of a locked position.\r\n    function getBonusMultiplierOf(uint256 tokenId_) external view returns (uint256 bonusMultiplier_);\r\n\r\n    /// @notice Locks some amount of XDEFI into a non-fungible (NFT) position, for a duration of time. The caller must first approve this contract to spend its XDEFI.\r\n    function lock(uint256 amount_, uint256 duration_, uint256 bonusMultiplier_, address destination_) external returns (uint256 tokenId_);\r\n\r\n    /// @notice Locks some amount of XDEFI into a non-fungible (NFT) position, for a duration of time, with a signed permit to transfer XDEFI from the caller.\r\n    function lockWithPermit(uint256 amount_, uint256 duration_, uint256 bonusMultiplier_, address destination_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 tokenId_);\r\n\r\n    /// @notice Unlock an un-lockable non-fungible position and re-lock some amount, for a duration of time, sending the balance XDEFI to some destination.\r\n    function relock(uint256 tokenId_, uint256 lockAmount_, uint256 duration_, uint256 bonusMultiplier_, address destination_) external returns (uint256 amountUnlocked_, uint256 newTokenId_);\r\n\r\n    /// @notice Unlock an un-lockable non-fungible position, sending the XDEFI to some destination.\r\n    function unlock(uint256 tokenId_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /// @notice To be called as part of distributions to force the contract to recognize recently transferred XDEFI as distributable.\r\n    function updateDistribution() external;\r\n\r\n    /// @notice Returns the amount of XDEFI that can be withdrawn when the position is unlocked. This will increase as distributions are made.\r\n    function withdrawableOf(uint256 tokenId_) external view returns (uint256 withdrawableXDEFI_);\r\n\r\n    /****************************/\r\n    /* Batch Position Functions */\r\n    /****************************/\r\n\r\n    /// @notice Unlocks several un-lockable non-fungible positions and re-lock some amount, for a duration of time, sending the balance XDEFI to some destination.\r\n    function relockBatch(uint256[] calldata tokenIds_, uint256 lockAmount_, uint256 duration_, uint256 bonusMultiplier_, address destination_) external returns (uint256 amountUnlocked_, uint256 newTokenId_);\r\n\r\n    /// @notice Unlocks several un-lockable non-fungible positions, sending the XDEFI to some destination.\r\n    function unlockBatch(uint256[] calldata tokenIds_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /*****************/\r\n    /* NFT Functions */\r\n    /*****************/\r\n\r\n    /// @notice Returns the score, tier, and sequence of an NFT.\r\n    function attributesOf(uint256 tokenId_) external view returns (uint256 tier_, uint256 score_, uint256 sequence_);\r\n\r\n    /// @notice Consumes some score from an NFT by burning it and minting a new one with a reduced score.\r\n    function consume(uint256 tokenId_, uint256 amount_, address destination_) external returns (uint256 newTokenId_);\r\n\r\n    /// @notice Returns the URI for the contract metadata.\r\n    function contractURI() external view returns (string memory contractURI_);\r\n\r\n    /// @notice Returns the score an NFT will have, given some amount locked for some duration.\r\n    function getScore(uint256 amount_, uint256 duration_) external pure returns (uint256 score_);\r\n\r\n    /// @notice Returns the tier an NFT will have, given some score, which itself can be determined from `getScore`.\r\n    function getTier(uint256 score_) external pure returns (uint256 tier_);\r\n\r\n    /// @notice Burns several unlocked NFTs to mint a new NFT that has their combined score.\r\n    function merge(uint256[] calldata tokenIds_, address destination_) external returns (uint256 tokenId_);\r\n\r\n    /// @notice Returns the URI for the NFT metadata for a given token ID.\r\n    function tokenURI(uint256 tokenId_) external view returns (string memory tokenURI_);\r\n\r\n}\r\n\r\n// File: IXDEFIDistributionHelper.sol\r\n\r\n\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\ninterface IXDEFIDistributionLike {\r\n\r\n    struct Position {\r\n        uint96 units;\r\n        uint88 depositedXDEFI;\r\n        uint32 expiry;\r\n        uint32 created;\r\n        uint256 pointsCorrection;\r\n    }\r\n\r\n    function balanceOf(address account_) external view returns (uint256 balance_);\r\n\r\n    function tokenOfOwnerByIndex(address account_, uint256 index_) external view returns (uint256 tokenId_);\r\n\r\n    function positionOf(uint256 tokenId_) external view returns (Position memory position_);\r\n\r\n    function withdrawableOf(uint256 tokenId_) external view returns (uint256 withdrawableXDEFI_);\r\n\r\n}\r\n\r\ninterface IXDEFIDistributionHelper {\r\n\r\n    function getAllTokensForAccount(address xdefiDistribution_, address account_) external view returns (uint256[] memory tokenIds_);\r\n\r\n    function getAllLockedPositionsForAccount(address xdefiDistribution_, address account_) external view returns (uint256[] memory tokenIds_, IXDEFIDistributionLike.Position[] memory positions_, uint256[] memory withdrawables_);\r\n\r\n}\r\n\r\n// File: XDEFIDistributionHelper.sol\r\n\r\n\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\n/// @dev Stateless helper contract for external clients to reduce web3 calls to gather XDEFIDistribution information related to individual accounts.\r\ncontract XDEFIDistributionHelper is IXDEFIDistributionHelper {\r\n\r\n    function getAllTokensForAccount(address xdefiDistribution_, address account_) public view returns (uint256[] memory tokenIds_) {\r\n        uint256 count = IXDEFIDistributionLike(xdefiDistribution_).balanceOf(account_);\r\n        tokenIds_ = new uint256[](count);\r\n\r\n        for (uint256 i; i < count;) {\r\n            tokenIds_[i] = IXDEFIDistributionLike(xdefiDistribution_).tokenOfOwnerByIndex(account_, i);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllLockedPositionsForAccount(address xdefiDistribution_, address account_) external view returns (uint256[] memory tokenIds_, IXDEFIDistributionLike.Position[] memory positions_, uint256[] memory withdrawables_) {\r\n        uint256[] memory tokenIds = getAllTokensForAccount(xdefiDistribution_, account_);\r\n\r\n        IXDEFIDistributionLike.Position[] memory positions = new IXDEFIDistributionLike.Position[](tokenIds.length);\r\n\r\n        uint256 validPositionCount;\r\n\r\n        // NOTE: unchecked around entire for-loop due to the continue.\r\n        unchecked {\r\n            for (uint256 i; i < tokenIds.length; ++i) {\r\n                uint256 tokenId = tokenIds[i];\r\n                IXDEFIDistributionLike.Position memory position = IXDEFIDistributionLike(xdefiDistribution_).positionOf(tokenId);\r\n\r\n                if (position.expiry == uint32(0)) continue;\r\n\r\n                tokenIds[validPositionCount] = tokenId;\r\n                positions[validPositionCount++] = position;\r\n            }\r\n        }\r\n\r\n\r\n        tokenIds_ = new uint256[](validPositionCount);\r\n        positions_ = new IXDEFIDistributionLike.Position[](validPositionCount);\r\n        withdrawables_ = new uint256[](validPositionCount);\r\n\r\n        for (uint256 i; i < validPositionCount;) {\r\n            positions_[i] = positions[i];\r\n            withdrawables_[i] = IXDEFIDistributionLike(xdefiDistribution_).withdrawableOf(tokenIds_[i] = tokenIds[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xdefiDistribution_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getAllLockedPositionsForAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"units\",\"type\":\"uint96\"},{\"internalType\":\"uint88\",\"name\":\"depositedXDEFI\",\"type\":\"uint88\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"pointsCorrection\",\"type\":\"uint256\"}],\"internalType\":\"struct IXDEFIDistributionLike.Position[]\",\"name\":\"positions_\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawables_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xdefiDistribution_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getAllTokensForAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XDEFIDistributionHelper", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://739f34cbdfbc9708239c25107ff3bd699cd51993f26a82b5c44c3e9b9cb6d4f3"}]}