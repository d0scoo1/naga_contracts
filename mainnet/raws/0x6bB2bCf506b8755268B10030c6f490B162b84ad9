{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/extensions/core/ThePixelsIncMetadataURLProviderV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./../../common/interfaces/IThePixelsInc.sol\\\";\\nimport \\\"./../../common/interfaces/IThePixelsMetadataProvider.sol\\\";\\nimport \\\"./../../common/interfaces/IThePixelsIncExtensionStorageV2.sol\\\";\\n\\ncontract ThePixelsIncMetadataURLProviderV4 is\\n    IThePixelsMetadataProvider,\\n    Ownable\\n{\\n    using Strings for uint256;\\n\\n    struct Snapshot {\\n        string url;\\n        string description;\\n    }\\n\\n    Snapshot[] public snapshots;\\n    string public baseURL;\\n    address public immutable pixelsAddress;\\n    address public extensionStorageAddress;\\n\\n    constructor(address _pixelsAddress, address _extensionStorageAddress) {\\n        pixelsAddress = _pixelsAddress;\\n        extensionStorageAddress = _extensionStorageAddress;\\n    }\\n\\n    // OWNER CONTROLS\\n\\n    function setExtensionStorageAddress(address _extensionStorageAddress)\\n        external\\n        onlyOwner\\n    {\\n        extensionStorageAddress = _extensionStorageAddress;\\n    }\\n\\n    function addSnapshot(string memory _url, string memory _description)\\n        external\\n        onlyOwner\\n    {\\n        snapshots.push(Snapshot(_url, _description));\\n    }\\n\\n    function setSnapshot(\\n        uint256 id,\\n        string memory _url,\\n        string memory _description\\n    ) external onlyOwner {\\n        snapshots[id] = (Snapshot(_url, _description));\\n    }\\n\\n    function setBaseURL(string memory _baseURL) external onlyOwner {\\n        baseURL = _baseURL;\\n    }\\n\\n    // PUBLIC\\n\\n    function getMetadata(\\n        uint256 tokenId,\\n        uint256 dna,\\n        uint256 extensionV1\\n    ) public view override returns (string memory) {\\n        uint256 extensionV2 = IThePixelsIncExtensionStorageV2(\\n            extensionStorageAddress\\n        ).pixelExtensions(tokenId);\\n\\n        string memory fullDNA = _fullDNA(dna, extensionV1, extensionV2);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    baseURL,\\n                    \\\"/\\\",\\n                    tokenId.toString(),\\n                    \\\"?dna=\\\",\\n                    fullDNA\\n                )\\n            );\\n    }\\n\\n    function fullDNAOfToken(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint256 dna = IThePixelsInc(pixelsAddress).pixelDNAs(tokenId);\\n        uint256 extensionV1 = IThePixelsInc(pixelsAddress).pixelDNAExtensions(\\n            tokenId\\n        );\\n        uint256 extensionV2 = IThePixelsIncExtensionStorageV2(\\n            extensionStorageAddress\\n        ).pixelExtensions(tokenId);\\n\\n        return _fullDNA(dna, extensionV1, extensionV2);\\n    }\\n\\n    // INTERNAL\\n\\n    function _fullDNA(\\n        uint256 _dna,\\n        uint256 _extensionV1,\\n        uint256 _extensionV2\\n    ) internal pure returns (string memory) {\\n        if (_extensionV1 == 0 && _extensionV2 == 0) {\\n            return _dna.toString();\\n        }\\n        string memory _extension = _fixedExtension(_extensionV1, _extensionV2);\\n        return string(abi.encodePacked(_dna.toString(), \\\"_\\\", _extension));\\n    }\\n\\n    function _fixedExtension(uint256 _extensionV1, uint256 _extensionV2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (_extensionV2 > 0) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        _extensionV1.toString(),\\n                        _extensionV2.toString()\\n                    )\\n                );\\n        } else if (_extensionV1 == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        return _extensionV1.toString();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IThePixelsInc.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\ninterface IThePixelsInc {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function tokensOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function updateDNAExtension(uint256 _tokenId) external;\\n\\n    function pixelDNAs(uint256 _tokenId) external view returns (uint256);\\n\\n    function pixelDNAExtensions(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IThePixelsMetadataProvider.sol\": {\r\n      \"content\": \"// pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsMetadataProvider {\\n    function getMetadata(\\n        uint256 tokenId,\\n        uint256 dna,\\n        uint256 dnaExtension\\n    ) external view returns (string memory);\\n\\n    function fullDNAOfToken(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IThePixelsIncExtensionStorageV2.sol\": {\r\n      \"content\": \"// pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsIncExtensionStorageV2 {\\n    struct Variant {\\n        bool isOperatorExecution;\\n        bool isFreeForCollection;\\n        bool isEnabled;\\n        bool isDisabledForSpecialPixels;\\n        uint16 contributerCut;\\n        uint128 cost;\\n        uint128 supply;\\n        uint128 count;\\n        uint128 categoryId;\\n        address contributer;\\n        address collection;\\n    }\\n\\n    struct Category {\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    struct VariantStatus {\\n        bool isAlreadyClaimed;\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    function extendWithVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external;\\n\\n    function extendMultipleWithVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenId,\\n        uint256[] memory collectionTokenIds\\n    ) external;\\n\\n    function detachVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId\\n    ) external;\\n\\n    function detachVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function variantDetail(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external view returns (Variant memory, VariantStatus memory);\\n\\n    function variantDetails(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenIds,\\n        uint256[] memory collectionTokenIds\\n    ) external view returns (Variant[] memory, VariantStatus[] memory);\\n\\n    function variantsOfExtension(\\n        uint256 extensionId,\\n        uint256[] memory variantIds\\n    ) external view returns (Variant[] memory);\\n\\n    function transferExtensionVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 variantId,\\n        uint256 fromTokenId,\\n        uint256 toTokenId\\n    ) external;\\n\\n    function pixelExtensions(uint256 tokenId) external view returns (uint256);\\n\\n    function balanceOfToken(\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256[] memory variantIds\\n    ) external view returns (uint256);\\n\\n    function currentVariantIdOf(uint256 extensionId, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentVariantIdsOf(uint256 extensionId, uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pixelsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extensionStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extensionStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"fullDNAOfToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extensionV1\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURL\",\"type\":\"string\"}],\"name\":\"setBaseURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extensionStorageAddress\",\"type\":\"address\"}],\"name\":\"setExtensionStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThePixelsIncMetadataURLProviderV4", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "0000000000000000000000007ff2a00ff543f913b76010a05b5446e36d40367500000000000000000000000082627768d439e13ed58c447a77941415921803da", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}