{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IGenArtInterface {\r\n    function getMaxMintForMembership(uint256 _membershipId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getMaxMintForOwner(address owner) external view returns (uint256);\r\n\r\n    function upgradeGenArtTokenContract(address _genArtTokenAddress) external;\r\n\r\n    function setAllowGen(bool allow) external;\r\n\r\n    function genAllowed() external view returns (bool);\r\n\r\n    function isGoldToken(uint256 _membershipId) external view returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _membershipId) external view returns (address);\r\n}\r\n\r\ninterface IGenArt {\r\n    function getTokensByOwner(address owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function isGoldToken(uint256 _tokenId) external view returns (bool);\r\n}\r\n\r\ninterface IGenArtAirdrop {\r\n    function getAllowedMintForMembership(\r\n        uint256 _collectionId,\r\n        uint256 _membershipId\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IGenArtDrop {\r\n    function getAllowedMintForMembership(uint256 _group, uint256 _membershipId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract GenArtTokenAirdrop is Ownable {\r\n    address genArtTokenAddress;\r\n    address genArtMembershipAddress;\r\n\r\n    uint256 tokensPerMint = 213 * 1e18;\r\n    uint256 endBlock;\r\n    address genArtAirdropAddress;\r\n    address genArtDropAddress;\r\n\r\n    uint256[] airdropCollections = [1, 2];\r\n    uint256[] dropCollectionGroups = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    mapping(uint256 => bool) membershipClaims;\r\n    event Claimed(address account, uint256 membershipId, uint256 amount);\r\n\r\n    constructor(\r\n        address genArtMembershipAddress_,\r\n        address genArtTokenAddress_,\r\n        address genArtAirdropAddress_,\r\n        address genArtDropAddress_,\r\n        uint256 endBlock_\r\n    ) {\r\n        genArtTokenAddress = genArtTokenAddress_;\r\n        genArtMembershipAddress = genArtMembershipAddress_;\r\n        genArtAirdropAddress = genArtAirdropAddress_;\r\n        genArtDropAddress = genArtDropAddress_;\r\n        endBlock = endBlock_;\r\n        excludeMemberships();\r\n    }\r\n\r\n    function claimAllTokens() public {\r\n        require(\r\n            block.number < endBlock,\r\n            \"GenArtTokenAirdrop: token claiming window has ended\"\r\n        );\r\n        uint256[] memory memberships = IGenArt(genArtMembershipAddress)\r\n            .getTokensByOwner(msg.sender);\r\n        require(\r\n            memberships.length > 0,\r\n            \"GenArtTokenAirdrop: sender does not own memberships\"\r\n        );\r\n        uint256 airdropTokenAmount = 0;\r\n        for (uint256 i = 0; i < memberships.length; i++) {\r\n            airdropTokenAmount += getAirdropTokenAmount(memberships[i]);\r\n            membershipClaims[memberships[i]] = true;\r\n            emit Claimed(msg.sender, memberships[i], airdropTokenAmount);\r\n        }\r\n        require(\r\n            airdropTokenAmount > 0,\r\n            \"GenArtTokenAirdrop: no tokens to claim\"\r\n        );\r\n        IERC20(genArtTokenAddress).transfer(msg.sender, airdropTokenAmount);\r\n    }\r\n\r\n    function claimTokens(uint256 membershipId) public {\r\n        require(\r\n            !membershipClaims[membershipId],\r\n            \"GenArtTokenAirdrop: tokens already claimed\"\r\n        );\r\n        require(\r\n            block.number < endBlock,\r\n            \"GenArtTokenAirdrop: token claiming window has ended\"\r\n        );\r\n        require(\r\n            IGenArt(genArtMembershipAddress).ownerOf(membershipId) ==\r\n                msg.sender,\r\n            \"GenArtTokenAirdrop: sender is not owner of membership\"\r\n        );\r\n\r\n        uint256 airdropTokenAmount = getAirdropTokenAmount(membershipId);\r\n\r\n        require(\r\n            airdropTokenAmount > 0,\r\n            \"GenArtTokenAirdrop: no tokens to claim\"\r\n        );\r\n        IERC20(genArtTokenAddress).transfer(msg.sender, airdropTokenAmount);\r\n        emit Claimed(msg.sender, membershipId, airdropTokenAmount);\r\n        membershipClaims[membershipId] = true;\r\n    }\r\n\r\n    function getAirdropTokenAmountAccount(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256[] memory memberships = IGenArt(genArtMembershipAddress)\r\n            .getTokensByOwner(account);\r\n        uint256 airdropTokenAmount = 0;\r\n        for (uint256 i = 0; i < memberships.length; i++) {\r\n            airdropTokenAmount += getAirdropTokenAmount(memberships[i]);\r\n        }\r\n\r\n        return airdropTokenAmount;\r\n    }\r\n\r\n    function getAirdropTokenAmount(uint256 membershipId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (membershipClaims[membershipId]) {\r\n            return 0;\r\n        }\r\n\r\n        bool isGoldToken = IGenArt(genArtMembershipAddress).isGoldToken(\r\n            membershipId\r\n        );\r\n        uint256 tokenAmount = 0;\r\n        for (uint256 i = 0; i < airdropCollections.length; i++) {\r\n            uint256 remainingMints = IGenArtAirdrop(genArtAirdropAddress)\r\n                .getAllowedMintForMembership(\r\n                    airdropCollections[i],\r\n                    membershipId\r\n                );\r\n\r\n            uint256 mints = (isGoldToken ? 5 : 1) - remainingMints;\r\n            tokenAmount = tokenAmount + (mints * tokensPerMint);\r\n        }\r\n\r\n        for (uint256 i = 0; i < dropCollectionGroups.length; i++) {\r\n            uint256 remainingMints = IGenArtDrop(genArtDropAddress)\r\n                .getAllowedMintForMembership(\r\n                    dropCollectionGroups[i],\r\n                    membershipId\r\n                );\r\n\r\n            uint256 mints = (isGoldToken ? 5 : 1) - remainingMints;\r\n            tokenAmount = tokenAmount + (mints * tokensPerMint);\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to receive ETH\r\n     */\r\n    receive() external payable virtual {}\r\n\r\n    function withdrawTokens(uint256 _amount, address _to) public onlyOwner {\r\n        IERC20(genArtTokenAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 value) public onlyOwner {\r\n        address _owner = owner();\r\n        payable(_owner).transfer(value);\r\n    }\r\n\r\n    function excludeMemberships() internal {\r\n        membershipClaims[997] = true;\r\n        membershipClaims[2304] = true;\r\n        membershipClaims[3183] = true;\r\n        membershipClaims[4125] = true;\r\n        membershipClaims[1821] = true;\r\n        membershipClaims[2127] = true;\r\n        membershipClaims[4785] = true;\r\n        membershipClaims[5016] = true;\r\n        membershipClaims[3127] = true;\r\n        membershipClaims[3119] = true;\r\n        membershipClaims[3593] = true;\r\n        membershipClaims[2722] = true;\r\n        membershipClaims[3124] = true;\r\n        membershipClaims[3030] = true;\r\n        membershipClaims[3994] = true;\r\n        membershipClaims[993] = true;\r\n        membershipClaims[1671] = true;\r\n        membershipClaims[1959] = true;\r\n        membershipClaims[4754] = true;\r\n        membershipClaims[444] = true;\r\n        membershipClaims[664] = true;\r\n        membershipClaims[1605] = true;\r\n        membershipClaims[1613] = true;\r\n        membershipClaims[249] = true;\r\n        membershipClaims[1173] = true;\r\n        membershipClaims[3869] = true;\r\n        membershipClaims[1567] = true;\r\n        membershipClaims[4725] = true;\r\n        membershipClaims[3137] = true;\r\n        membershipClaims[149] = true;\r\n        membershipClaims[4526] = true;\r\n        membershipClaims[5070] = true;\r\n        membershipClaims[5078] = true;\r\n        membershipClaims[3261] = true;\r\n        membershipClaims[5047] = true;\r\n        membershipClaims[2836] = true;\r\n        membershipClaims[4429] = true;\r\n        membershipClaims[4197] = true;\r\n        membershipClaims[2472] = true;\r\n        membershipClaims[1706] = true;\r\n        membershipClaims[3941] = true;\r\n        membershipClaims[3692] = true;\r\n        membershipClaims[3298] = true;\r\n        membershipClaims[3861] = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genArtMembershipAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genArtTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genArtAirdropAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genArtDropAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"getAirdropTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAirdropTokenAmountAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GenArtTokenAirdrop", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ca39c7f0f65b4da24b094a9afac7acf626b7f3800000000000000000000000012e56851ec22874520dc4c7fa0a8a8d7dba1bac8000000000000000000000000bbfb6e466f376e493da35b5665dbfc19f7204231000000000000000000000000d8b7cc75e22031a72d7b8393113ef2536e17bde60000000000000000000000000000000000000000000000000000000000d6631c", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8683765de33952445c247bf649083dc1ea501efe3b65eac0291b44b6c352497b"}]}