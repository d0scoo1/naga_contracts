{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/savings/peripheral/SaveWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IBoostedVaultWithLockup } from \\\"../../interfaces/IBoostedVaultWithLockup.sol\\\";\\nimport { IFeederPool } from \\\"../../interfaces/IFeederPool.sol\\\";\\nimport { IMasset } from \\\"../../interfaces/IMasset.sol\\\";\\nimport { ISavingsContractV3 } from \\\"../../interfaces/ISavingsContract.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"../../peripheral/Uniswap/IUniswapV2Router02.sol\\\";\\nimport { IBasicToken } from \\\"../../shared/IBasicToken.sol\\\";\\nimport { ImmutableModule } from \\\"../../shared/ImmutableModule.sol\\\";\\n\\n// FLOWS\\n// 0 - mAsset -> Savings Vault\\n// 1 - bAsset -> Save/Savings Vault via Mint\\n// 2 - fAsset -> Save/Savings Vault via Feeder Pool\\n// 3 - ETH    -> Save/Savings Vault via Uniswap\\ncontract SaveWrapper is ImmutableModule {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address _nexus) ImmutableModule(_nexus) {}\\n\\n    /**\\n     * @dev 0. Simply saves an mAsset and then into the vault\\n     * @param _mAsset   mAsset address\\n     * @param _save     Save address\\n     * @param _vault    Boosted Savings Vault address\\n     * @param _amount   Units of mAsset to deposit to savings\\n     */\\n    function saveAndStake(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        uint256 _amount\\n    ) external {\\n        _saveAndStake(_mAsset, _save, _vault, _amount, true, address(0));\\n    }\\n\\n    /**\\n     * @dev 0. Simply saves an mAsset and then into the vault\\n     * @param _mAsset   mAsset address\\n     * @param _save     Save address\\n     * @param _vault    Boosted Savings Vault address\\n     * @param _amount   Units of mAsset to deposit to savings\\n     * @param _referrer Referrer address for this deposit.\\n     */\\n    function saveAndStake(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        uint256 _amount,\\n        address _referrer\\n    ) external {\\n        _saveAndStake(_mAsset, _save, _vault, _amount, true, _referrer);\\n    }\\n\\n    /**\\n     * @dev 1. Mints an mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset       mAsset address\\n     * @param _bAsset       bAsset address\\n     * @param _save         Save address\\n     * @param _vault        Boosted Savings Vault address\\n     * @param _amount       Amount of bAsset to mint with\\n     * @param _minOut       Min amount of mAsset to get back\\n     * @param _stake        Add the imAsset to the Boosted Savings Vault?\\n     */\\n    function saveViaMint(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _bAsset,\\n        uint256 _amount,\\n        uint256 _minOut,\\n        bool _stake\\n    ) external {\\n        _saveViaMint(_mAsset, _save, _vault, _bAsset, _amount, _minOut, _stake, address(0));\\n    }\\n\\n    /**\\n     * @dev 1. Mints an mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset       mAsset address\\n     * @param _bAsset       bAsset address\\n     * @param _save         Save address\\n     * @param _vault        Boosted Savings Vault address\\n     * @param _amount       Amount of bAsset to mint with\\n     * @param _minOut       Min amount of mAsset to get back\\n     * @param _stake        Add the imAsset to the Boosted Savings Vault?\\n     * @param _referrer     Referrer address for this deposit.\\n     */\\n    function saveViaMint(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _bAsset,\\n        uint256 _amount,\\n        uint256 _minOut,\\n        bool _stake,\\n        address _referrer\\n    ) external {\\n        _saveViaMint(_mAsset, _save, _vault, _bAsset, _amount, _minOut, _stake, _referrer);\\n    }\\n\\n    /**\\n     * @dev 2. Swaps fAsset for mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset             mAsset address\\n     * @param _save               Save address\\n     * @param _vault              Boosted Savings Vault address\\n     * @param _feeder             Feeder Pool address\\n     * @param _fAsset             fAsset address\\n     * @param _fAssetQuantity     Quantity of fAsset sent\\n     * @param _minOutputQuantity  Min amount of mAsset to be swapped and deposited\\n     * @param _stake              Deposit the imAsset in the Savings Vault?\\n     */\\n    function saveViaSwap(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _feeder,\\n        address _fAsset,\\n        uint256 _fAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        bool _stake\\n    ) external {\\n        _saveViaSwap(\\n            _mAsset,\\n            _save,\\n            _vault,\\n            _feeder,\\n            _fAsset,\\n            _fAssetQuantity,\\n            _minOutputQuantity,\\n            _stake,\\n            address(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev 2. Swaps fAsset for mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset             mAsset address\\n     * @param _save               Save address\\n     * @param _vault              Boosted Savings Vault address\\n     * @param _feeder             Feeder Pool address\\n     * @param _fAsset             fAsset address\\n     * @param _fAssetQuantity     Quantity of fAsset sent\\n     * @param _minOutputQuantity  Min amount of mAsset to be swapped and deposited\\n     * @param _stake              Deposit the imAsset in the Savings Vault?\\n     * @param _referrer       Referrer address for this deposit.\\n     */\\n    function saveViaSwap(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _feeder,\\n        address _fAsset,\\n        uint256 _fAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        bool _stake,\\n        address _referrer\\n    ) external {\\n        _saveViaSwap(\\n            _mAsset,\\n            _save,\\n            _vault,\\n            _feeder,\\n            _fAsset,\\n            _fAssetQuantity,\\n            _minOutputQuantity,\\n            _stake,\\n            _referrer\\n        );\\n    }\\n\\n    /**\\n     * @dev 3. Buys a bAsset on Uniswap with ETH, then mints imAsset via mAsset,\\n     *         optionally staking in the Boosted Savings Vault\\n     * @param _mAsset         mAsset address\\n     * @param _save           Save address\\n     * @param _vault          Boosted vault address\\n     * @param _uniswap        Uniswap router address\\n     * @param _amountOutMin   Min uniswap output in bAsset units\\n     * @param _path           Sell path on Uniswap (e.g. [WETH, DAI])\\n     * @param _minOutMStable  Min amount of mAsset to receive\\n     * @param _stake          Add the imAsset to the Savings Vault?\\n     */\\n    function saveViaUniswapETH(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _uniswap,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        uint256 _minOutMStable,\\n        bool _stake\\n    ) external payable {\\n        _saveViaUniswapETH(\\n            _mAsset,\\n            _save,\\n            _vault,\\n            _uniswap,\\n            _amountOutMin,\\n            _path,\\n            _minOutMStable,\\n            _stake,\\n            address(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev 3. Buys a bAsset on Uniswap with ETH, then mints imAsset via mAsset,\\n     *         optionally staking in the Boosted Savings Vault\\n     * @param _mAsset         mAsset address\\n     * @param _save           Save address\\n     * @param _vault          Boosted vault address\\n     * @param _uniswap        Uniswap router address\\n     * @param _amountOutMin   Min uniswap output in bAsset units\\n     * @param _path           Sell path on Uniswap (e.g. [WETH, DAI])\\n     * @param _minOutMStable  Min amount of mAsset to receive\\n     * @param _stake          Add the imAsset to the Savings Vault?\\n     * @param _referrer       Referrer address for this deposit.\\n     */\\n    function saveViaUniswapETH(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _uniswap,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        uint256 _minOutMStable,\\n        bool _stake,\\n        address _referrer\\n    ) external payable {\\n        _saveViaUniswapETH(\\n            _mAsset,\\n            _save,\\n            _vault,\\n            _uniswap,\\n            _amountOutMin,\\n            _path,\\n            _minOutMStable,\\n            _stake,\\n            _referrer\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets estimated mAsset output from a WETH > bAsset > mAsset trade\\n     * @param _mAsset       mAsset address\\n     * @param _uniswap      Uniswap router address\\n     * @param _ethAmount    ETH amount to sell\\n     * @param _path         Sell path on Uniswap (e.g. [WETH, DAI])\\n     */\\n    function estimate_saveViaUniswapETH(\\n        address _mAsset,\\n        address _uniswap,\\n        uint256 _ethAmount,\\n        address[] calldata _path\\n    ) external view returns (uint256 out) {\\n        require(_mAsset != address(0), \\\"Invalid mAsset\\\");\\n        require(_uniswap != address(0), \\\"Invalid uniswap\\\");\\n\\n        uint256 estimatedBasset = _getAmountOut(_uniswap, _ethAmount, _path);\\n        return IMasset(_mAsset).getMintOutput(_path[_path.length - 1], estimatedBasset);\\n    }\\n\\n    /**\\n     * @dev 0. Simply saves an mAsset and then into the vault\\n     * @param _mAsset   mAsset address\\n     * @param _save     Save address\\n     * @param _vault    Boosted Savings Vault address\\n     * @param _amount   Units of mAsset to deposit to savings\\n     * @param _referrer Referrer address for this deposit.\\n     */\\n    function _saveAndStake(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        uint256 _amount,\\n        bool _stake,\\n        address _referrer\\n    ) internal {\\n        require(_mAsset != address(0), \\\"Invalid mAsset\\\");\\n        require(_save != address(0), \\\"Invalid save\\\");\\n        require(_vault != address(0), \\\"Invalid vault\\\");\\n\\n        // 1. Get the input mAsset\\n        IERC20(_mAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // 2. Mint imAsset and stake in vault\\n        _depositAndStake(_save, _vault, _amount, _stake, _referrer);\\n    }\\n\\n    /** @dev Internal func to deposit into Save and optionally stake in the vault\\n     * @param _save       Save address\\n     * @param _vault      Boosted vault address\\n     * @param _amount     Amount of mAsset to deposit\\n     * @param _stake      Add the imAsset to the Savings Vault?\\n     * @param _referrer   Referrer address for this deposit, if any.\\n     */\\n    function _depositAndStake(\\n        address _save,\\n        address _vault,\\n        uint256 _amount,\\n        bool _stake,\\n        address _referrer\\n    ) internal {\\n        if (_stake && _referrer != address(0)) {\\n            uint256 credits = ISavingsContractV3(_save).depositSavings(\\n                _amount,\\n                address(this),\\n                _referrer\\n            );\\n            IBoostedVaultWithLockup(_vault).stake(msg.sender, credits);\\n        } else if (_stake && _referrer == address(0)) {\\n            uint256 credits = ISavingsContractV3(_save).depositSavings(_amount, address(this));\\n            IBoostedVaultWithLockup(_vault).stake(msg.sender, credits);\\n        } else if (!_stake && _referrer != address(0)) {\\n            ISavingsContractV3(_save).depositSavings(_amount, msg.sender, _referrer);\\n        } else {\\n            ISavingsContractV3(_save).depositSavings(_amount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev 1. Mints an mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset       mAsset address\\n     * @param _bAsset       bAsset address\\n     * @param _save         Save address\\n     * @param _vault        Boosted Savings Vault address\\n     * @param _amount       Amount of bAsset to mint with\\n     * @param _minOut       Min amount of mAsset to get back\\n     * @param _stake        Add the imAsset to the Boosted Savings Vault?\\n     * @param _referrer     Referrer address for this deposit.\\n     */\\n    function _saveViaMint(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _bAsset,\\n        uint256 _amount,\\n        uint256 _minOut,\\n        bool _stake,\\n        address _referrer\\n    ) internal {\\n        require(_mAsset != address(0), \\\"Invalid mAsset\\\");\\n        require(_save != address(0), \\\"Invalid save\\\");\\n        require(_vault != address(0), \\\"Invalid vault\\\");\\n        require(_bAsset != address(0), \\\"Invalid bAsset\\\");\\n\\n        // 1. Get the input bAsset\\n        IERC20(_bAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // 2. Mint\\n        uint256 massetsMinted = IMasset(_mAsset).mint(_bAsset, _amount, _minOut, address(this));\\n\\n        // 3. Mint imAsset and optionally stake in vault\\n        _depositAndStake(_save, _vault, massetsMinted, _stake, _referrer);\\n    }\\n\\n    /**\\n     * @dev 2. Swaps fAsset for mAsset and then deposits to Save/Savings Vault\\n     * @param _mAsset             mAsset address\\n     * @param _save               Save address\\n     * @param _vault              Boosted Savings Vault address\\n     * @param _feeder             Feeder Pool address\\n     * @param _fAsset             fAsset address\\n     * @param _fAssetQuantity     Quantity of fAsset sent\\n     * @param _minOutputQuantity  Min amount of mAsset to be swapped and deposited\\n     * @param _stake              Deposit the imAsset in the Savings Vault?\\n     * @param _referrer           Referrer address for this deposit.\\n     */\\n    function _saveViaSwap(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _feeder,\\n        address _fAsset,\\n        uint256 _fAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        bool _stake,\\n        address _referrer\\n    ) internal {\\n        require(_feeder != address(0), \\\"Invalid feeder\\\");\\n        require(_mAsset != address(0), \\\"Invalid mAsset\\\");\\n        require(_save != address(0), \\\"Invalid save\\\");\\n        require(_vault != address(0), \\\"Invalid vault\\\");\\n        require(_fAsset != address(0), \\\"Invalid input\\\");\\n\\n        // 0. Transfer the fAsset here\\n        IERC20(_fAsset).safeTransferFrom(msg.sender, address(this), _fAssetQuantity);\\n\\n        // 1. Swap the fAsset for mAsset with the feeder pool\\n        uint256 mAssetQuantity = IFeederPool(_feeder).swap(\\n            _fAsset,\\n            _mAsset,\\n            _fAssetQuantity,\\n            _minOutputQuantity,\\n            address(this)\\n        );\\n\\n        // 2. Deposit the mAsset into Save and optionally stake in the vault\\n        _depositAndStake(_save, _vault, mAssetQuantity, _stake, _referrer);\\n    }\\n\\n    /**\\n     * @dev 3. Buys a bAsset on Uniswap with ETH, then mints imAsset via mAsset,\\n     *         optionally staking in the Boosted Savings Vault\\n     * @param _mAsset         mAsset address\\n     * @param _save           Save address\\n     * @param _vault          Boosted vault address\\n     * @param _uniswap        Uniswap router address\\n     * @param _amountOutMin   Min uniswap output in bAsset units\\n     * @param _path           Sell path on Uniswap (e.g. [WETH, DAI])\\n     * @param _minOutMStable  Min amount of mAsset to receive\\n     * @param _stake          Add the imAsset to the Savings Vault?\\n     * @param _referrer       Referrer address for this deposit.\\n     */\\n    function _saveViaUniswapETH(\\n        address _mAsset,\\n        address _save,\\n        address _vault,\\n        address _uniswap,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        uint256 _minOutMStable,\\n        bool _stake,\\n        address _referrer\\n    ) internal {\\n        require(_mAsset != address(0), \\\"Invalid mAsset\\\");\\n        require(_save != address(0), \\\"Invalid save\\\");\\n        require(_vault != address(0), \\\"Invalid vault\\\");\\n        require(_uniswap != address(0), \\\"Invalid uniswap\\\");\\n\\n        // 1. Get the bAsset\\n        uint256[] memory amounts = IUniswapV2Router02(_uniswap).swapExactETHForTokens{\\n            value: msg.value\\n        }(_amountOutMin, _path, address(this), block.timestamp + 1000);\\n\\n        // 2. Purchase mAsset\\n        uint256 massetsMinted = IMasset(_mAsset).mint(\\n            _path[_path.length - 1],\\n            amounts[amounts.length - 1],\\n            _minOutMStable,\\n            address(this)\\n        );\\n\\n        // 3. Mint imAsset and optionally stake in vault\\n        _depositAndStake(_save, _vault, massetsMinted, _stake, _referrer);\\n    }\\n\\n    /** @dev Internal func to get estimated Uniswap output from WETH to token trade */\\n    function _getAmountOut(\\n        address _uniswap,\\n        uint256 _amountIn,\\n        address[] memory _path\\n    ) internal view returns (uint256) {\\n        uint256[] memory amountsOut = IUniswapV2Router02(_uniswap).getAmountsOut(_amountIn, _path);\\n        return amountsOut[amountsOut.length - 1];\\n    }\\n\\n    /**\\n     * @dev Approve mAsset and bAssets, Feeder Pools and fAssets, and Save/vault\\n     */\\n    function approve(\\n        address _mAsset,\\n        address[] calldata _bAssets,\\n        address[] calldata _fPools,\\n        address[] calldata _fAssets,\\n        address _save,\\n        address _vault\\n    ) external onlyKeeperOrGovernor {\\n        _approve(_mAsset, _save);\\n        _approve(_save, _vault);\\n        _approve(_bAssets, _mAsset);\\n\\n        require(_fPools.length == _fAssets.length, \\\"Mismatching fPools/fAssets\\\");\\n        for (uint256 i = 0; i < _fPools.length; i++) {\\n            _approve(_fAssets[i], _fPools[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve one token/spender\\n     */\\n    function approve(address _token, address _spender) external onlyKeeperOrGovernor {\\n        _approve(_token, _spender);\\n    }\\n\\n    /**\\n     * @dev Approve multiple tokens/one spender\\n     */\\n    function approve(address[] calldata _tokens, address _spender) external onlyKeeperOrGovernor {\\n        _approve(_tokens, _spender);\\n    }\\n\\n    function _approve(address _token, address _spender) internal {\\n        require(_spender != address(0), \\\"Invalid spender\\\");\\n        require(_token != address(0), \\\"Invalid token\\\");\\n        IERC20(_token).safeApprove(_spender, 2**256 - 1);\\n    }\\n\\n    function _approve(address[] calldata _tokens, address _spender) internal {\\n        require(_spender != address(0), \\\"Invalid spender\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_tokens[i] != address(0), \\\"Invalid token\\\");\\n            IERC20(_tokens[i]).safeApprove(_spender, 2**256 - 1);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBoostedVaultWithLockup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBoostedVaultWithLockup {\\n    /**\\n     * @notice Stakes a given amount of the StakingToken for the sender\\n     * @param _amount Units of StakingToken\\n     */\\n    function stake(uint256 _amount) external;\\n\\n    /**\\n     * @notice Stakes a given amount of the StakingToken for a given beneficiary\\n     * @param _beneficiary Staked tokens are credited to this address\\n     * @param _amount      Units of StakingToken\\n     */\\n    function stake(address _beneficiary, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraws stake from pool and claims any unlocked rewards.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function exit() external;\\n\\n    /**\\n     * @notice Withdraws stake from pool and claims any unlocked rewards.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function exit(uint256 _first, uint256 _last) external;\\n\\n    /**\\n     * @notice Withdraws given stake amount from the pool\\n     * @param _amount Units of the staked token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external;\\n\\n    /**\\n     * @notice Redeems staked interest-bearing asset tokens for either bAsset or fAsset tokens.\\n     * Withdraws a given staked amount of interest-bearing assets from the vault,\\n     * redeems the interest-bearing asset for the underlying mAsset and either\\n     * 1. Redeems the underlying mAsset tokens for bAsset tokens.\\n     * 2. Swaps the underlying mAsset tokens for fAsset tokens in a Feeder Pool.\\n     * @param _amount         Units of the staked interest-bearing asset tokens to withdraw. eg imUSD or imBTC.\\n     * @param _minAmountOut   Minimum units of `output` tokens to be received by the beneficiary. This is to the same decimal places as the `output` token.\\n     * @param _output         Asset to receive in exchange for the redeemed mAssets. This can be a bAsset or a fAsset. For example:\\n        - bAssets (USDC, DAI, sUSD or USDT) or fAssets (GUSD, BUSD, alUSD, FEI or RAI) for mainnet imUSD Vault.\\n        - bAssets (USDC, DAI or USDT) or fAsset FRAX for Polygon imUSD Vault.\\n        - bAssets (WBTC, sBTC or renBTC) or fAssets (HBTC or TBTCV2) for mainnet imBTC Vault.\\n     * @param _beneficiary    Address to send `output` tokens to.\\n     * @param _router         mAsset address if the `output` is a bAsset. Feeder Pool address if the `output` is a fAsset.\\n     * @param _isBassetOut    `true` if `output` is a bAsset. `false` if `output` is a fAsset.\\n     * @return outputQuantity Units of `output` tokens sent to the beneficiary. This is to the same decimal places as the `output` token.\\n     */\\n    function withdrawAndUnwrap(\\n        uint256 _amount,\\n        uint256 _minAmountOut,\\n        address _output,\\n        address _beneficiary,\\n        address _router,\\n        bool _isBassetOut\\n    ) external returns (uint256 outputQuantity);\\n\\n    /**\\n     * @notice Claims only the tokens that have been immediately unlocked, not including\\n     * those that are in the lockers.\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @notice Claims all unlocked rewards for sender.\\n     * Note, this function is costly - the args for _claimRewards\\n     * should be determined off chain and then passed to other fn\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     * @notice Claims all unlocked rewards for sender. Both immediately unlocked\\n     * rewards and also locked rewards past their time lock.\\n     * @param _first    Index of the first array element to claim\\n     * @param _last     Index of the last array element to claim\\n     */\\n    function claimRewards(uint256 _first, uint256 _last) external;\\n\\n    /**\\n     * @notice Pokes a given account to reset the boost\\n     */\\n    function pokeBoost(address _account) external;\\n\\n    /**\\n     * @notice Gets the last applicable timestamp for this reward period\\n     */\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the amount of unclaimed rewards per token since last update,\\n     * and sums with stored to give the new cumulative reward per token\\n     * @return 'Reward' per staked token\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\\n     * does NOT include the majority of rewards which will be locked up.\\n     * @param _account User address\\n     * @return Total reward amount earned\\n     */\\n    function earned(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates all unclaimed reward data, finding both immediately unlocked rewards\\n     * and those that have passed their time lock.\\n     * @param _account User address\\n     * @return amount Total units of unclaimed rewards\\n     * @return first Index of the first userReward that has unlocked\\n     * @return last Index of the last userReward that has unlocked\\n     */\\n    function unclaimedRewards(address _account)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 first,\\n            uint256 last\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeederPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\nimport \\\"../masset/MassetStructs.sol\\\";\\n\\nabstract contract IFeederPool {\\n    // Mint\\n    function mint(\\n        address _input,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function mintMulti(\\n        address[] calldata _inputs,\\n        uint256[] calldata _inputQuantities,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function getMintOutput(address _input, uint256 _inputQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    // Swaps\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 swapOutput);\\n\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity\\n    ) external view virtual returns (uint256 swapOutput);\\n\\n    // Redemption\\n    function redeem(\\n        address _output,\\n        uint256 _fpTokenQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 outputQuantity);\\n\\n    function redeemProportionately(\\n        uint256 _fpTokenQuantity,\\n        uint256[] calldata _minOutputQuantities,\\n        address _recipient\\n    ) external virtual returns (uint256[] memory outputQuantities);\\n\\n    function redeemExactBassets(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities,\\n        uint256 _maxMassetQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mAssetRedeemed);\\n\\n    function getRedeemOutput(address _output, uint256 _fpTokenQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 bAssetOutput);\\n\\n    function getRedeemExactBassetsOutput(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities\\n    ) external view virtual returns (uint256 mAssetAmount);\\n\\n    // Views\\n    function mAsset() external view virtual returns (address);\\n\\n    function getPrice() public view virtual returns (uint256 price, uint256 k);\\n\\n    function getConfig() external view virtual returns (FeederConfig memory config);\\n\\n    function getBasset(address _token)\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal memory personal, BassetData memory data);\\n\\n    function getBassets()\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal[] memory personal, BassetData[] memory data);\\n\\n    // SavingsManager\\n    function collectPlatformInterest()\\n        external\\n        virtual\\n        returns (uint256 mintAmount, uint256 newSupply);\\n\\n    function collectPendingFees() external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\npragma abicoder v2;\\n\\nimport { BassetData, BassetPersonal } from \\\"../masset/MassetStructs.sol\\\";\\n\\nabstract contract IMasset {\\n    // Mint\\n    function mint(\\n        address _input,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function mintMulti(\\n        address[] calldata _inputs,\\n        uint256[] calldata _inputQuantities,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mintOutput);\\n\\n    function getMintOutput(address _input, uint256 _inputQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\\n        external\\n        view\\n        virtual\\n        returns (uint256 mintOutput);\\n\\n    // Swaps\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 swapOutput);\\n\\n    function getSwapOutput(\\n        address _input,\\n        address _output,\\n        uint256 _inputQuantity\\n    ) external view virtual returns (uint256 swapOutput);\\n\\n    // Redemption\\n    function redeem(\\n        address _output,\\n        uint256 _mAssetQuantity,\\n        uint256 _minOutputQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 outputQuantity);\\n\\n    function redeemMasset(\\n        uint256 _mAssetQuantity,\\n        uint256[] calldata _minOutputQuantities,\\n        address _recipient\\n    ) external virtual returns (uint256[] memory outputQuantities);\\n\\n    function redeemExactBassets(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities,\\n        uint256 _maxMassetQuantity,\\n        address _recipient\\n    ) external virtual returns (uint256 mAssetRedeemed);\\n\\n    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\\n        external\\n        view\\n        virtual\\n        returns (uint256 bAssetOutput);\\n\\n    function getRedeemExactBassetsOutput(\\n        address[] calldata _outputs,\\n        uint256[] calldata _outputQuantities\\n    ) external view virtual returns (uint256 mAssetAmount);\\n\\n    // Views\\n    function getBasket() external view virtual returns (bool, bool);\\n\\n    function getBasset(address _token)\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal memory personal, BassetData memory data);\\n\\n    function getBassets()\\n        external\\n        view\\n        virtual\\n        returns (BassetPersonal[] memory personal, BassetData[] memory data);\\n\\n    function bAssetIndexes(address) external view virtual returns (uint8);\\n\\n    function getPrice() external view virtual returns (uint256 price, uint256 k);\\n\\n    // SavingsManager\\n    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\\n\\n    function collectPlatformInterest()\\n        external\\n        virtual\\n        returns (uint256 mintAmount, uint256 newSupply);\\n\\n    // Admin\\n    function setCacheSize(uint256 _cacheSize) external virtual;\\n\\n    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\\n\\n    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\\n\\n    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISavingsContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISavingsContractV1 {\\n    function depositInterest(uint256 _amount) external;\\n\\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued);\\n\\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function creditBalances(address) external view returns (uint256);\\n}\\n\\ninterface ISavingsContractV2 {\\n    // DEPRECATED but still backwards compatible\\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\\n\\n    function creditBalances(address) external view returns (uint256); // V1 & V2 (use balanceOf)\\n\\n    // --------------------------------------------\\n\\n    function depositInterest(uint256 _amount) external; // V1 & V2\\n\\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued); // V1 & V2\\n\\n    function depositSavings(uint256 _amount, address _beneficiary)\\n        external\\n        returns (uint256 creditsIssued); // V2\\n\\n    function redeemCredits(uint256 _amount) external returns (uint256 underlyingReturned); // V2\\n\\n    function redeemUnderlying(uint256 _amount) external returns (uint256 creditsBurned); // V2\\n\\n    function exchangeRate() external view returns (uint256); // V1 & V2\\n\\n    function balanceOfUnderlying(address _user) external view returns (uint256 underlying); // V2\\n\\n    function underlyingToCredits(uint256 _underlying) external view returns (uint256 credits); // V2\\n\\n    function creditsToUnderlying(uint256 _credits) external view returns (uint256 underlying); // V2\\n\\n    function underlying() external view returns (IERC20 underlyingMasset); // V2\\n}\\n\\ninterface ISavingsContractV3 {\\n    // DEPRECATED but still backwards compatible\\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\\n\\n    function creditBalances(address) external view returns (uint256); // V1 & V2 (use balanceOf)\\n\\n    // --------------------------------------------\\n\\n    function depositInterest(uint256 _amount) external; // V1 & V2\\n\\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued); // V1 & V2\\n\\n    function depositSavings(uint256 _amount, address _beneficiary)\\n        external\\n        returns (uint256 creditsIssued); // V2\\n\\n    function redeemCredits(uint256 _amount) external returns (uint256 underlyingReturned); // V2\\n\\n    function redeemUnderlying(uint256 _amount) external returns (uint256 creditsBurned); // V2\\n\\n    function exchangeRate() external view returns (uint256); // V1 & V2\\n\\n    function balanceOfUnderlying(address _user) external view returns (uint256 underlying); // V2\\n\\n    function underlyingToCredits(uint256 _underlying) external view returns (uint256 credits); // V2\\n\\n    function creditsToUnderlying(uint256 _credits) external view returns (uint256 underlying); // V2\\n\\n    function underlying() external view returns (IERC20 underlyingMasset); // V2\\n\\n    // --------------------------------------------\\n\\n    function redeemAndUnwrap(\\n        uint256 _amount,\\n        bool _isCreditAmt,\\n        uint256 _minAmountOut,\\n        address _output,\\n        address _beneficiary,\\n        address _router,\\n        bool _isBassetOut\\n    )\\n        external\\n        returns (\\n            uint256 creditsBurned,\\n            uint256 massetRedeemed,\\n            uint256 outputQuantity\\n        );\\n\\n    function depositSavings(\\n        uint256 _underlying,\\n        address _beneficiary,\\n        address _referrer\\n    ) external returns (uint256 creditsIssued);\\n}\\n\"\r\n    },\r\n    \"contracts/peripheral/Uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin, // calculated off chain\\n        address[] calldata path, // also worked out off chain\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/IBasicToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IBasicToken {\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ImmutableModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport { ModuleKeys } from \\\"./ModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   ImmutableModule\\n * @author  mStable\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\nabstract contract ImmutableModule is ModuleKeys {\\n    INexus public immutable nexus;\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    constructor(address _nexus) {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        _onlyGovernor();\\n        _;\\n    }\\n\\n    function _onlyGovernor() internal view {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor or the Keeper EOA.\\n     */\\n    modifier onlyKeeperOrGovernor() {\\n        _keeperOrGovernor();\\n        _;\\n    }\\n\\n    function _keeperOrGovernor() internal view {\\n        require(msg.sender == _keeper() || msg.sender == _governor(), \\\"Only keeper or governor\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Keeper address from the Nexus.\\n     *      This account is used for operational transactions that\\n     *      don't need multiple signatures.\\n     * @return  Address of the Keeper externally owned account.\\n     */\\n    function _keeper() internal view returns (address) {\\n        return nexus.getModule(KEY_KEEPER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n\\n    /**\\n     * @dev Return Liquidator Module address from the Nexus\\n     * @return  Address of the Liquidator Module contract\\n     */\\n    function _liquidator() internal view returns (address) {\\n        return nexus.getModule(KEY_LIQUIDATOR);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/masset/MassetStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nstruct BassetPersonal {\\n    // Address of the bAsset\\n    address addr;\\n    // Address of the bAsset\\n    address integrator;\\n    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\\n    bool hasTxFee; // takes a byte in storage\\n    // Status of the bAsset\\n    BassetStatus status;\\n}\\n\\nstruct BassetData {\\n    // 1 Basset * ratio / ratioScale == x Masset (relative value)\\n    // If ratio == 10e8 then 1 bAsset = 10 mAssets\\n    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\\n    uint128 ratio;\\n    // Amount of the Basset that is held in Collateral\\n    uint128 vaultBalance;\\n}\\n\\n// Status of the Basset - has it broken its peg?\\nenum BassetStatus {\\n    Default,\\n    Normal,\\n    BrokenBelowPeg,\\n    BrokenAbovePeg,\\n    Blacklisted,\\n    Liquidating,\\n    Liquidated,\\n    Failed\\n}\\n\\nstruct BasketState {\\n    bool undergoingRecol;\\n    bool failed;\\n}\\n\\nstruct FeederConfig {\\n    uint256 supply;\\n    uint256 a;\\n    WeightLimits limits;\\n}\\n\\nstruct InvariantConfig {\\n    uint256 supply;\\n    uint256 a;\\n    WeightLimits limits;\\n    uint256 recolFee;\\n}\\n\\nstruct BasicConfig {\\n    uint256 a;\\n    WeightLimits limits;\\n}\\n\\nstruct WeightLimits {\\n    uint128 min;\\n    uint128 max;\\n}\\n\\nstruct AmpData {\\n    uint64 initialA;\\n    uint64 targetA;\\n    uint64 rampStartTime;\\n    uint64 rampEndTime;\\n}\\n\\nstruct FeederData {\\n    uint256 swapFee;\\n    uint256 redemptionFee;\\n    uint256 govFee;\\n    uint256 pendingFees;\\n    uint256 cacheSize;\\n    BassetPersonal[] bAssetPersonal;\\n    BassetData[] bAssetData;\\n    AmpData ampData;\\n    WeightLimits weightLimits;\\n}\\n\\nstruct MassetData {\\n    uint256 swapFee;\\n    uint256 redemptionFee;\\n    uint256 cacheSize;\\n    uint256 surplus;\\n    BassetPersonal[] bAssetPersonal;\\n    BassetData[] bAssetData;\\n    BasketState basket;\\n    AmpData ampData;\\n    WeightLimits weightLimits;\\n}\\n\\nstruct AssetData {\\n    uint8 idx;\\n    uint256 amt;\\n    BassetPersonal personal;\\n}\\n\\nstruct Asset {\\n    uint8 idx;\\n    address addr;\\n    bool exists;\\n}\\n\"\r\n    },\r\n    \"contracts/shared/ModuleKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title  ModuleKeys\\n * @author mStable\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way\\n * @dev    keccak256() values are hardcoded to avoid re-evaluation of the constants at runtime.\\n */\\ncontract ModuleKeys {\\n    // Governance\\n    // ===========\\n    // keccak256(\\\"Governance\\\");\\n    bytes32 internal constant KEY_GOVERNANCE =\\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\\n    //keccak256(\\\"Staking\\\");\\n    bytes32 internal constant KEY_STAKING =\\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\\n    //keccak256(\\\"ProxyAdmin\\\");\\n    bytes32 internal constant KEY_PROXY_ADMIN =\\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\\n\\n    // mStable\\n    // =======\\n    // keccak256(\\\"OracleHub\\\");\\n    bytes32 internal constant KEY_ORACLE_HUB =\\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\\n    // keccak256(\\\"Manager\\\");\\n    bytes32 internal constant KEY_MANAGER =\\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\\n    //keccak256(\\\"Recollateraliser\\\");\\n    bytes32 internal constant KEY_RECOLLATERALISER =\\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\\n    //keccak256(\\\"MetaToken\\\");\\n    bytes32 internal constant KEY_META_TOKEN =\\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\\n    // keccak256(\\\"SavingsManager\\\");\\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\\n    // keccak256(\\\"Liquidator\\\");\\n    bytes32 internal constant KEY_LIQUIDATOR =\\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\\n    // keccak256(\\\"InterestValidator\\\");\\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\\n    // keccak256(\\\"Keeper\\\");\\n    bytes32 internal constant KEY_KEEPER =\\n        0x4f78afe9dfc9a0cb0441c27b9405070cd2a48b490636a7bdd09f355e33a5d7de;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INexus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title INexus\\n * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n */\\ninterface INexus {\\n    function governor() external view returns (address);\\n\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n\\n    function cancelProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModule(bytes32 _key) external;\\n\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n\\n    function cancelLockModule(bytes32 _key) external;\\n\\n    function lockModule(bytes32 _key) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_fPools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_fAssets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"estimate_saveViaUniswapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"saveAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"saveViaMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"saveViaSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minOutMStable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"saveViaUniswapETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minOutMStable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaUniswapETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SaveWrapper", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}