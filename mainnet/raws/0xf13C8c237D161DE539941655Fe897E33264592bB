{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.7;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract FreeTransfer {\r\n\r\n    function transfer(\r\n        address[] calldata addressList, \r\n        uint256[] calldata tokenAmountList,\r\n        address tokenAddress\r\n    ) external payable {\r\n        uint256 baseLength = addressList.length;\r\n        require(baseLength == tokenAmountList.length, 'Different Length');\r\n        if (tokenAddress == address(0x0)) {\r\n            for (uint256 i = baseLength; i > 0;) {\r\n                --i;\r\n                payable(addressList[i]).transfer(tokenAmountList[i]);\r\n            }\r\n            uint256 nowBalance = payable(address(this)).balance;\r\n            if (nowBalance > 0) {\r\n                payable(msg.sender).transfer(nowBalance);\r\n            }\r\n        } else {\r\n            require(msg.value == 0, 'NO ETH');\r\n            for (uint256 i = baseLength; i > 0;) {\r\n                --i;\r\n                TransferHelper.safeTransferFrom(tokenAddress, msg.sender, addressList[i], tokenAmountList[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferAmount(\r\n        address[] calldata addressList, \r\n        uint256 amount,\r\n        address tokenAddress\r\n    ) external payable {\r\n        uint256 baseLength = addressList.length;\r\n        if (tokenAddress == address(0x0)) {\r\n            require(msg.value == baseLength * amount, 'amount wrong');\r\n            for (uint256 i = baseLength; i > 0;) {\r\n                --i;\r\n                payable(addressList[i]).transfer(amount);\r\n            }\r\n        } else {\r\n            require(msg.value == 0, 'NO ETH');\r\n            uint256 totalAmount = amount * baseLength;\r\n            TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), totalAmount);\r\n            for (uint256 i = baseLength; i > 0;) {\r\n                --i;\r\n                TransferHelper.safeTransfer(tokenAddress, addressList[i], amount);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmountList\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "FreeTransfer", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://32df7161a6583fdc5a71c8e77033ebbd13d7e0567e183b487b91b25bddd0e5ee"}]}