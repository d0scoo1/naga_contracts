{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Beta/InvestementBeta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../main/Investement.sol\\\";\\r\\n\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice Implementation of the contract InvestementBeta.\\r\\n*/\\r\\n\\r\\ncontract InvestementBeta is Investement {\\r\\n        constructor(address _admin,  address _safeHouse, address _stableToken, address _token,\\r\\n        address _deposit, address _withdrawal) Investement( _admin, _safeHouse, _stableToken, _token,\\r\\n         _deposit,  _withdrawal) {\\r\\n        }\\r\\n}\"\r\n    },\r\n    \"main/Investement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\nimport \\\"./Admin.sol\\\";\\r\\nimport \\\"./Token.sol\\\";\\r\\nimport \\\"./DepositConfirmation.sol\\\";\\r\\nimport \\\"./WithdrawalConfirmation.sol\\\";\\r\\nimport \\\"./SafeHouse.sol\\\";\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice Implementation of the contract Investement.\\r\\n*/\\r\\n\\r\\ncontract Investement is Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Math for uint256;\\r\\n\\r\\n    uint256 public constant COEFF_SCALE_DECIMALS_F = 1e4;\\r\\n    uint256 public constant COEFF_SCALE_DECIMALS_P = 1e6; \\r\\n    uint256 public amountScaleDecimals = 1;\\r\\n    uint256 public maxDepositAmount = 1000000 * 1e18;\\r\\n    uint256 public maxWithdrawalAmount = 1000000 * 1e18;\\r\\n     uint256 public maxDeposit = 0;\\r\\n    uint256 public maxWithdrawal = 0;\\r\\n    uint256 public depositFeeRate;\\r\\n    uint256 public depositFeeRateParity;\\r\\n    uint256 public tokenPrice;\\r\\n    uint256 public tokenPriceMean;\\r\\n    uint256 public netDepositInd;\\r\\n    uint256 public netAmountEvent;\\r\\n    uint256 public withdrawalAmountTotal;\\r\\n    uint256 public withdrawalAmountTotalOld;\\r\\n    uint256 public depositAmountTotal;\\r\\n    uint256 public validatedDepositParityStableAmount = 0;\\r\\n    uint256 public validatedWithdrawalParityStableAmount = 0;\\r\\n    uint256 public validatedDepositParityTokenAmount = 0;\\r\\n    uint256 public validatedWithdrawalParityTokenAmount = 0;\\r\\n    uint256 public tokenTotalSupply;\\r\\n    uint256 public tokenIdDeposit;\\r\\n    uint256 public tokenIdWithdraw;\\r\\n    address private treasury;\\r\\n    address private safeHouse;\\r\\n    address public parity;\\r\\n    mapping(address => uint256) public acceptedWithdrawalPerAddress;\\r\\n    Admin public admin;\\r\\n    IERC20 public stableToken;\\r\\n    Token public token;\\r\\n    DepositConfirmation public deposit;\\r\\n    WithdrawalConfirmation public withdrawal;\\r\\n    event DepositRequest(address indexed _address, uint256 _amount);\\r\\n    event CancelDepositRequest(address indexed _address, uint256 _amount);\\r\\n    event WithdrawalRequest(address indexed _address, uint256 _amount);\\r\\n    event CancelWithdrawalRequest(address indexed _address, uint256 _amount);\\r\\n    event ValidateDeposit(address indexed _address, uint256 _finalizedAmount, uint256 _mintedAmount);\\r\\n    event ValidateWithdrawal(address indexed _address, uint256 _finalizedAmount, uint256 _SentAmount);\\r\\n   \\r\\n    constructor(address _admin, address _safeHouse, address _stableTokenAddress, \\r\\n        address _token,  address _depositConfirmationAddress, \\r\\n        address __withdrawalConfirmationAddress) {\\r\\n        require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _safeHouse != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _stableTokenAddress != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _token != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n           _depositConfirmationAddress != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            __withdrawalConfirmationAddress != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n        \\r\\n        admin = Admin(_admin);\\r\\n        safeHouse = _safeHouse;\\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        token = Token(_token);\\r\\n        deposit = DepositConfirmation(_depositConfirmationAddress);\\r\\n        withdrawal = WithdrawalConfirmation(__withdrawalConfirmationAddress);\\r\\n        uint8 _stableTokenDecimals = ERC20(_stableTokenAddress).decimals();\\r\\n        if (_stableTokenDecimals == 6) {\\r\\n           amountScaleDecimals = 1e12;\\r\\n        }\\r\\n    }\\r\\n  \\r\\n    modifier onlyManager() {\\r\\n        address _manager = admin.manager();\\r\\n        require(msg.sender == _manager, \\\"Formation.Fi: no manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier cancel() {\\r\\n        bool  _isCancel = admin.isCancel();\\r\\n        require( _isCancel == true, \\\"Formation.Fi: no cancel\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Setter functions to update the Portfolio Parameters.\\r\\n     */\\r\\n    function setMaxDepositAmount(uint256 _maxDepositAmount) external \\r\\n        onlyManager {\\r\\n        maxDepositAmount = _maxDepositAmount;\\r\\n\\r\\n    }\\r\\n    function setMaxWithdrawalAmount(uint256 _maxWithdrawalAmount) external \\r\\n        onlyManager{\\r\\n         maxWithdrawalAmount = _maxWithdrawalAmount;      \\r\\n    }\\r\\n\\r\\n    function setParity(address _parity) external onlyOwner{\\r\\n        require(\\r\\n            _parity != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        parity = _parity;      \\r\\n    }\\r\\n\\r\\n    function setSafeHouse(address _safeHouse) external onlyOwner{\\r\\n          require(\\r\\n            _safeHouse != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );  \\r\\n        safeHouse = _safeHouse;\\r\\n    }\\r\\n     /**\\r\\n     * @dev Calculate net deposit indicator\\r\\n     */\\r\\n    function calculateNetDepositInd( ) public onlyManager {\\r\\n        updateAdminData();\\r\\n        netDepositInd = admin.calculateNetDepositInd(depositAmountTotal, withdrawalAmountTotal,\\r\\n        maxDepositAmount,  maxWithdrawalAmount);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Calculate net amount \\r\\n     */\\r\\n    function calculateNetAmountEvent( ) public onlyManager {\\r\\n        netAmountEvent = admin.calculateNetAmountEvent(depositAmountTotal,  withdrawalAmountTotal,\\r\\n        maxDepositAmount,  maxWithdrawalAmount);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Calculate the maximum deposit amount to be validated \\r\\n     * by the manager for the users.\\r\\n     */\\r\\n    function calculateMaxDepositAmount( ) public onlyManager {\\r\\n             maxDeposit = Math.min(depositAmountTotal, maxDepositAmount);\\r\\n        }\\r\\n    \\r\\n     /**\\r\\n     * @dev Calculate the maximum withdrawal amount to be validated \\r\\n     * by the manager for the users.\\r\\n     */\\r\\n    function calculateMaxWithdrawAmount( ) public onlyManager {\\r\\n        withdrawalAmountTotalOld = withdrawalAmountTotal;\\r\\n        maxWithdrawal = (Math.min(withdrawalAmountTotal, maxWithdrawalAmount)\\r\\n          * COEFF_SCALE_DECIMALS_P);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Calculate the event parameters by the manager. \\r\\n     */\\r\\n    function calculateEventParameters( ) external onlyManager {\\r\\n        calculateNetDepositInd( );\\r\\n        calculateNetAmountEvent( );\\r\\n        calculateMaxDepositAmount( );\\r\\n        calculateMaxWithdrawAmount( );\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev  Validate the deposit requests of users by the manager.\\r\\n     * @param _users the addresses of users.\\r\\n     */\\r\\n    function validateDeposits( address[] memory _users) external \\r\\n        whenNotPaused onlyManager {\\r\\n        uint256 _amountStable;\\r\\n        uint256 _amountStableTotal = 0;\\r\\n        uint256 _depositToken;\\r\\n        uint256 _depositTokenTotal = 0;\\r\\n        uint256 _feeStable;\\r\\n        uint256 _feeStableTotal = 0;\\r\\n        uint256 _tokenIdDeposit;\\r\\n        require (_users.length > 0, \\\"Formation.Fi: no user\\\");\\r\\n        for (uint256 i = 0; i < _users.length  ; i++) {\\r\\n             address _user =_users[i];\\r\\n            (  , _amountStable, )= deposit.pendingDepositPerAddress(_user);\\r\\n           \\r\\n            if (deposit.balanceOf(_user) == 0) {\\r\\n                continue;\\r\\n              }\\r\\n            if (maxDeposit <= _amountStableTotal) {\\r\\n                break;\\r\\n             }\\r\\n             _tokenIdDeposit = deposit.getTokenId(_user);\\r\\n             _amountStable = Math.min(maxDeposit  - _amountStableTotal ,  _amountStable);\\r\\n             depositAmountTotal =  depositAmountTotal - _amountStable;\\r\\n             if (_user == parity) {\\r\\n             _feeStable =  (_amountStable * depositFeeRateParity) /\\r\\n              COEFF_SCALE_DECIMALS_F;\\r\\n             }\\r\\n             else {\\r\\n            _feeStable =  (_amountStable * depositFeeRate) /\\r\\n              COEFF_SCALE_DECIMALS_F;\\r\\n\\r\\n             }\\r\\n             _feeStableTotal = _feeStableTotal + _feeStable;\\r\\n             _depositToken = (( _amountStable - _feeStable) *\\r\\n             COEFF_SCALE_DECIMALS_P) / tokenPrice;\\r\\n             if (_user == parity) {\\r\\n                validatedDepositParityStableAmount  = _amountStable;\\r\\n                validatedDepositParityTokenAmount  = _depositToken;\\r\\n             }\\r\\n             _depositTokenTotal = _depositTokenTotal + _depositToken;\\r\\n             _amountStableTotal = _amountStableTotal + _amountStable;\\r\\n\\r\\n             token.mint(_user, _depositToken);\\r\\n             deposit.updateDepositData( _user,  _tokenIdDeposit, _amountStable, false);\\r\\n             token.addDeposit(_user,  _depositToken, block.timestamp);\\r\\n             emit ValidateDeposit( _user, _amountStable, _depositToken);\\r\\n        }\\r\\n        maxDeposit = maxDeposit - _amountStableTotal;\\r\\n        if (_depositTokenTotal > 0){\\r\\n            tokenPriceMean  = (( tokenTotalSupply * tokenPriceMean) + \\r\\n            ( _depositTokenTotal * tokenPrice)) /\\r\\n            ( tokenTotalSupply + _depositTokenTotal);\\r\\n            admin.updateTokenPriceMean( tokenPriceMean);\\r\\n        }\\r\\n        \\r\\n        if (admin.managementFeesTime() == 0){\\r\\n            admin.updateManagementFeeTime(block.timestamp);   \\r\\n        }\\r\\n        if ( _feeStableTotal > 0){\\r\\n           stableToken.safeTransfer( treasury, _feeStableTotal/amountScaleDecimals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  Validate the withdrawal requests of users by the manager.\\r\\n     * @param _users the addresses of users.\\r\\n     */\\r\\n    function validateWithdrawals(address[] memory _users) external\\r\\n        whenNotPaused onlyManager {\\r\\n        uint256 tokensToBurn = 0;\\r\\n        uint256 _amountLP;\\r\\n        uint256 _amountStable;\\r\\n        uint256 _tokenIdWithdraw;\\r\\n        calculateAcceptedWithdrawalAmount(_users);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            address _user =_users[i];\\r\\n            ( , _amountLP, )= withdrawal.pendingWithdrawPerAddress(_user);\\r\\n         \\r\\n            if (withdrawal.balanceOf(_user) == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            _amountLP = acceptedWithdrawalPerAddress[_user];\\r\\n\\r\\n            withdrawalAmountTotal = withdrawalAmountTotal - _amountLP ;\\r\\n            _amountStable = (_amountLP *  tokenPrice) / \\r\\n            ( COEFF_SCALE_DECIMALS_P * amountScaleDecimals);\\r\\n\\r\\n            if (_user == parity) {\\r\\n               validatedWithdrawalParityStableAmount  =  _amountStable;\\r\\n               validatedWithdrawalParityTokenAmount = _amountLP;\\r\\n            }\\r\\n            stableToken.safeTransfer(_user, _amountStable);\\r\\n            _tokenIdWithdraw = withdrawal.getTokenId(_user);\\r\\n            withdrawal.updateWithdrawalData( _user,  _tokenIdWithdraw, _amountLP, false);\\r\\n            tokensToBurn = tokensToBurn + _amountLP;\\r\\n            token.updateTokenData(_user, _amountLP);\\r\\n            delete acceptedWithdrawalPerAddress[_user]; \\r\\n            emit ValidateWithdrawal(_user,  _amountLP, _amountStable);\\r\\n        }\\r\\n        if ((tokensToBurn) > 0){\\r\\n           token.burn(address(this), tokensToBurn);\\r\\n        }\\r\\n        if (withdrawalAmountTotal == 0){\\r\\n            withdrawalAmountTotalOld = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  Make a deposit request.\\r\\n     * @param _user the addresses of the user.\\r\\n     * @param _amount the deposit amount in Stablecoin.\\r\\n     */\\r\\n    function depositRequest(address _user, uint256 _amount) external whenNotPaused {\\r\\n        require(_amount >= admin.minAmount(), \\r\\n        \\\"Formation.Fi: min Amount\\\");\\r\\n        if (deposit.balanceOf( _user)==0){\\r\\n            tokenIdDeposit = tokenIdDeposit +1;\\r\\n            deposit.mint( _user, tokenIdDeposit, _amount);\\r\\n        }\\r\\n        else {\\r\\n            uint256 _tokenIdDeposit = deposit.getTokenId(_user);\\r\\n            deposit.updateDepositData (_user,  _tokenIdDeposit, _amount, true);\\r\\n        }\\r\\n        depositAmountTotal = depositAmountTotal + _amount; \\r\\n        stableToken.safeTransferFrom(msg.sender, address(this), _amount/amountScaleDecimals);\\r\\n        emit DepositRequest(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  Cancel the deposit request.\\r\\n     * @param _amount the deposit amount to cancel in Stablecoin.\\r\\n     */\\r\\n    function cancelDepositRequest(uint256 _amount) external whenNotPaused cancel {\\r\\n        uint256 _tokenIdDeposit = deposit.getTokenId(msg.sender);\\r\\n        require( _tokenIdDeposit > 0, \\r\\n        \\\"Formation.Fi: no deposit request\\\"); \\r\\n        deposit.updateDepositData(msg.sender,  _tokenIdDeposit, _amount, false);\\r\\n        depositAmountTotal = depositAmountTotal - _amount; \\r\\n        stableToken.safeTransfer(msg.sender, _amount/amountScaleDecimals);\\r\\n        emit CancelDepositRequest(msg.sender, _amount);      \\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev  Make a withdrawal request.\\r\\n     * @param _amount the withdrawal amount in Token.\\r\\n     */\\r\\n    function withdrawRequest(uint256 _amount) external whenNotPaused {\\r\\n        require ( _amount > 0, \\\"Formation Fi: zero amount\\\");\\r\\n        require(withdrawal.balanceOf(msg.sender) == 0, \\\"Formation.Fi: request on pending\\\");\\r\\n        if (msg.sender != parity) {\\r\\n        require (token.checklWithdrawalRequest(msg.sender, _amount, admin.lockupPeriodUser()),\\r\\n         \\\"Formation.Fi: locked position\\\");\\r\\n        }\\r\\n        tokenIdWithdraw = tokenIdWithdraw +1;\\r\\n        withdrawal.mint(msg.sender, tokenIdWithdraw, _amount);\\r\\n        withdrawalAmountTotal = withdrawalAmountTotal + _amount;\\r\\n        token.transferFrom(msg.sender, address(this), _amount);\\r\\n        emit WithdrawalRequest(msg.sender, _amount);\\r\\n         \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Cancel the withdrawal request.\\r\\n     * @param _amount the withdrawal amount in Token.\\r\\n     */\\r\\n    function cancelWithdrawalRequest( uint256 _amount) external whenNotPaused {\\r\\n        require ( _amount > 0, \\\"Formation Fi: zero amount\\\");\\r\\n        uint256 _tokenIdWithdraw = withdrawal.getTokenId(msg.sender);\\r\\n        require( _tokenIdWithdraw > 0, \\r\\n        \\\"Formation.Fi: no request\\\"); \\r\\n        withdrawal.updateWithdrawalData(msg.sender, _tokenIdWithdraw, _amount, false);\\r\\n        withdrawalAmountTotal = withdrawalAmountTotal - _amount;\\r\\n        token.transfer(msg.sender, _amount);\\r\\n        emit CancelWithdrawalRequest(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Send Stablecoins to the SafeHouse by the manager.\\r\\n     * @param _amount the amount to send.\\r\\n     */\\r\\n    function sendToSafeHouse(uint256 _amount) external \\r\\n        whenNotPaused onlyManager {\\r\\n        require( _amount > 0,  \\\"Formation.Fi: zero amount\\\");\\r\\n        uint256 _scaledAmount = _amount/amountScaleDecimals;\\r\\n        require(\\r\\n            stableToken.balanceOf(address(this)) >= _scaledAmount,\\r\\n            \\\"Formation.Fi: exceeds balance\\\"\\r\\n        );\\r\\n        stableToken.safeTransfer(safeHouse, _scaledAmount);\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev update data from Admin contract.\\r\\n     */\\r\\n    function updateAdminData() internal { \\r\\n        depositFeeRate = admin.depositFeeRate();\\r\\n        depositFeeRateParity = admin.depositFeeRateParity();\\r\\n        tokenPrice = admin.tokenPrice();\\r\\n        tokenPriceMean = admin.tokenPriceMean();\\r\\n        tokenTotalSupply = token.totalSupply();\\r\\n        treasury = admin.treasury();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate the accepted withdrawal amounts for users.\\r\\n     * @param _users the addresses of users.\\r\\n     */\\r\\n    function calculateAcceptedWithdrawalAmount(address[] memory _users) \\r\\n        internal {\\r\\n        require (_users.length > 0, \\\"Formation.Fi: no user\\\");\\r\\n        uint256 _amountLP;\\r\\n        address _user;\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            _user = _users[i];\\r\\n            require( _user!= address(0), \\\"Formation.Fi: zero address\\\");\\r\\n            ( , _amountLP, )= withdrawal.pendingWithdrawPerAddress(_user);\\r\\n            if (withdrawal.balanceOf(_user) == 0) {\\r\\n                continue;\\r\\n            }\\r\\n           _amountLP = Math.min((maxWithdrawal * _amountLP)/\\r\\n           (tokenPrice * withdrawalAmountTotalOld), _amountLP); \\r\\n           acceptedWithdrawalPerAddress[_user] = _amountLP;\\r\\n        }   \\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"main/SafeHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n//import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\nimport \\\"./Assets.sol\\\";\\r\\nimport \\\"./Admin.sol\\\";\\r\\n\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice Implementation of the contract SafeHouse.\\r\\n*/\\r\\n\\r\\ncontract SafeHouse is  Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Math for uint256;\\r\\n    uint256 public constant  FACTOR_DECIMALS   = 1e8;\\r\\n    uint256 public constant stableDecimals = 1e18;\\r\\n    uint256 public maxWithdrawalStatic = 1000000 * 1e18;\\r\\n    uint256 public maxWithdrawalDynamic =  1000000 * 1e18; \\r\\n    uint256 public  tolerance;\\r\\n    mapping(address => bool) public vaultsList;\\r\\n    Assets public assets;\\r\\n    Admin public admin;\\r\\n    constructor( address _assets, address _admin) payable {\\r\\n        require(\\r\\n            _assets != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        assets = Assets(_assets);\\r\\n\\r\\n        admin = Admin(_admin);\\r\\n    }\\r\\n   \\r\\n\\r\\n    modifier onlyManager() {\\r\\n        address _manager = admin.manager();\\r\\n        require(msg.sender == _manager, \\\"Formation.Fi: no manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Setter functions.\\r\\n     */\\r\\n     function setMaxWithdrawalStatic( uint256 _maxWithdrawalStatic) external onlyOwner {\\r\\n     maxWithdrawalStatic = _maxWithdrawalStatic;\\r\\n     }\\r\\n    \\r\\n    function setMaxWithdrawalDynamic( uint256 _maxWithdrawalDynamic) external onlyOwner {\\r\\n     maxWithdrawalDynamic = _maxWithdrawalDynamic;\\r\\n     }\\r\\n\\r\\n    function setTolerance( uint256 _tolerance) external  onlyOwner {\\r\\n     tolerance = _tolerance;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _admin) external onlyOwner {\\r\\n        require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        \\r\\n        admin = Admin(_admin);\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Add a vault address the manager.\\r\\n     * @param  _vault vault'address.\\r\\n     */\\r\\n    function addVault( address _vault) external onlyOwner {\\r\\n        require(\\r\\n            _vault != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        vaultsList[_vault] = true; \\r\\n     }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a vault address the manager.\\r\\n     * @param  _vault vault'address.\\r\\n     */\\r\\n    function removeVault( address _vault) external onlyOwner {\\r\\n        require(\\r\\n            vaultsList[_vault]== true,\\r\\n            \\\"Formation.Fi: no vault\\\"\\r\\n        );\\r\\n        vaultsList[_vault] = false; \\r\\n     }\\r\\n    \\r\\n     /**\\r\\n     * @dev Send an asset to the contract by the manager.\\r\\n     * @param _asset asset'address.\\r\\n     * @param _amount amount to send.\\r\\n     */\\r\\n    function sendAsset( address _asset, uint256 _amount) \\r\\n        external whenNotPaused onlyManager payable {\\r\\n        uint256 _index =  assets.getIndex(_asset);\\r\\n        uint256 _price;\\r\\n        uint256 _decimals;\\r\\n        address _oracle;\\r\\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\\r\\n        _price = uint256(getLatestPrice( _asset, _oracle, _price));\\r\\n        maxWithdrawalDynamic = Math.min(maxWithdrawalDynamic + (_amount * _price) /FACTOR_DECIMALS,\\r\\n        maxWithdrawalStatic);\\r\\n\\r\\n\\r\\n        if ( _asset == address(0)) {\\r\\n          require (_amount == msg.value, \\\"Formation.Fi: wrong amount\\\");\\r\\n        }\\r\\n        else {\\r\\n            uint256 _scale;\\r\\n            _scale = Math.max((stableDecimals/ 10 ** _decimals), 1);\\r\\n            IERC20 asset = IERC20(_asset);\\r\\n            asset.safeTransferFrom(msg.sender, address(this), _amount/_scale); \\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an asset from the contract by the manager.\\r\\n     * @param _asset asset'address.\\r\\n     * @param _amount amount to send.\\r\\n     */\\r\\n    function withdrawAsset( address _asset, uint256 _amount) external whenNotPaused onlyManager {\\r\\n        uint256 _index =  assets.getIndex(_asset);\\r\\n        uint256 _price;\\r\\n        uint256 _decimals;\\r\\n        address _oracle;\\r\\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\\r\\n        _price= uint256(getLatestPrice( _asset, _oracle, _price));\\r\\n        uint256 _delta = (_amount * _price)  / FACTOR_DECIMALS  ;\\r\\n        require ( Math.min(maxWithdrawalDynamic, maxWithdrawalStatic) >= _delta , \\\"Formation.Fi: maximum withdrawal\\\");\\r\\n        maxWithdrawalDynamic = maxWithdrawalDynamic  - _delta  + (_delta * tolerance)/FACTOR_DECIMALS;\\r\\n         if ( _asset == address(0)) {\\r\\n         payable(msg.sender).transfer(_amount);\\r\\n        }\\r\\n        else {\\r\\n        uint256 _scale;\\r\\n        _scale = Math.max((stableDecimals/ 10 **_decimals), 1);\\r\\n        IERC20 asset = IERC20(_asset);\\r\\n        asset.safeTransfer(msg.sender, _amount/_scale);   \\r\\n        } \\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the asset's price.\\r\\n     * @param _asset asset'address.\\r\\n     * @param _oracle oracle'address.\\r\\n     * @param _price asset'price.\\r\\n     * @return price\\r\\n     */\\r\\n\\r\\n    function getLatestPrice( address _asset, address _oracle, uint256 _price) public view returns (uint256) {\\r\\n        require (assets.isWhitelist(_asset) ==true, \\\"Formation.Fi: not asset\\\");\\r\\n        if (_oracle == address(0)) {\\r\\n            return _price;\\r\\n        }\\r\\n        else {\\r\\n        AggregatorV3Interface  priceFeed = AggregatorV3Interface(_oracle);\\r\\n        (\\r\\n            /*uint80 roundID*/,\\r\\n            int price,\\r\\n            /*uint startedAt*/,\\r\\n            /*uint timeStamp*/,\\r\\n            /*uint80 answeredInRound*/\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return uint256(price);\\r\\n        }   \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Send an asset to the vault.\\r\\n     * @param _asset asset'address.\\r\\n     * @param _vault vault'address.\\r\\n     * @param _amount to send.\\r\\n     */\\r\\n    function sendToVault( address _asset, address _vault,  uint256 _amount) external\\r\\n        whenNotPaused onlyManager {\\r\\n        require (_vault !=address(0) , \\\"Formation.Fi: zero address\\\");\\r\\n        require (vaultsList[_vault] == true , \\\"Formation.Fi: no vault\\\");\\r\\n        uint256 _index =  assets.getIndex(_asset);\\r\\n        uint256 _decimals;\\r\\n        ( , , , _decimals ) = assets.assets(_index);\\r\\n        if ( _asset == address(0)){\\r\\n           require (_amount <= address(this).balance , \\r\\n           \\\"Formation.Fi: balance limit\\\");\\r\\n           payable (_vault).transfer(_amount);\\r\\n        }\\r\\n        else{\\r\\n            uint256 _scale;\\r\\n            _scale = Math.max((stableDecimals/ 10 ** _decimals), 1);\\r\\n            IERC20 asset = IERC20(_asset);\\r\\n           require ((_amount/_scale) <= asset.balanceOf(address(this)) , \\\"Formation.Fi: balance limit\\\");\\r\\n           asset.transfer(_vault, _amount/_scale);   \\r\\n        \\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    fallback() external payable {\\r\\n     \\r\\n    }\\r\\n\\r\\n     receive() external payable {\\r\\n       \\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n       \\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"main/WithdrawalConfirmation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./libraries/Data.sol\\\";\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice The Implementation of the user's withdrawal proof token {ERC721}.\\r\\n*/\\r\\n\\r\\ncontract WithdrawalConfirmation is ERC721, Ownable { \\r\\n    struct PendingWithdrawal {\\r\\n        Data.State state;\\r\\n        uint256 amount;\\r\\n        uint256 listPointer;\\r\\n    }\\r\\n    uint256 public tolerance = 1e3;\\r\\n    address public proxyInvestement; \\r\\n    string public baseURI;\\r\\n    mapping(address => uint256) private tokenIdPerAddress;\\r\\n    mapping(address => PendingWithdrawal) public pendingWithdrawPerAddress;\\r\\n    address[] public usersOnPendingWithdraw;\\r\\n    event MintWithdrawal(address indexed _address, uint256 _id);\\r\\n    event BurnWithdrawal(address indexed _address, uint256 _id);\\r\\n    event UpdateBaseURI( string _baseURI);\\r\\n\\r\\n    constructor(string memory _name , string memory _symbol)  \\r\\n    ERC721 (\\\"_name\\\",  \\\"_symbol\\\"){\\r\\n    }\\r\\n\\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            proxyInvestement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == proxyInvestement, \\\"Formation.Fi: not the proxy\\\");\\r\\n         _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev get the token id of user's address.\\r\\n     * @param _account The user's address.\\r\\n     * @return token id.\\r\\n     */\\r\\n    function getTokenId(address _account) external view returns (uint256) {\\r\\n        return tokenIdPerAddress[ _account];\\r\\n    }\\r\\n\\r\\n      /**\\r\\n     * @dev get the number of users.\\r\\n     * @return number of users.\\r\\n     */\\r\\n     function getUsersSize() external view returns (uint256) {\\r\\n        return usersOnPendingWithdraw.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get addresses of users on withdrawal pending.\\r\\n     * @return  addresses of users.\\r\\n     */\\r\\n    function getUsers() public view returns (address[] memory) {\\r\\n        return usersOnPendingWithdraw;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the proxy.\\r\\n     * @param _proxyInvestement the new proxy.\\r\\n     */\\r\\n    function setProxy(address _proxyInvestement) public onlyOwner {\\r\\n        require(\\r\\n            _proxyInvestement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        proxyInvestement = _proxyInvestement;\\r\\n    }    \\r\\n\\r\\n    /**\\r\\n     * @dev update the Metadata URI\\r\\n     * @param _tokenURI the Metadata URI.\\r\\n     */\\r\\n    function setBaseURI(string calldata _tokenURI) external onlyOwner {\\r\\n        baseURI = _tokenURI;\\r\\n        emit UpdateBaseURI(_tokenURI);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev mint the withdrawal proof ERC721 token.\\r\\n     * @notice the user receives this token when he makes \\r\\n     * a withdrawal request.\\r\\n     * Each user's address can at most have one withdrawal proof token.\\r\\n     * @param _account The user's address.\\r\\n     * @param _tokenId The id of the token.\\r\\n     * @param _amount The withdrawal amount in the product token.\\r\\n     * @notice Emits a {MintWithdrawal} event with `_account` and `_tokenId `.\\r\\n     */\\r\\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \\r\\n       external onlyProxy {\\r\\n       require (balanceOf( _account) == 0, \\\"Formation.Fi:  has withdrawal token\\\");\\r\\n       _safeMint(_account,  _tokenId);\\r\\n       tokenIdPerAddress[_account] = _tokenId;\\r\\n       updateWithdrawalData (_account,  _tokenId,  _amount, true);\\r\\n       emit MintWithdrawal(_account, _tokenId);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev burn the withdrawal proof ERC721 token.\\r\\n     * @notice the token is burned  when the manager fully validates\\r\\n     * the user's withdrawal request.\\r\\n     * @param _tokenId The id of the token.\\r\\n     * @notice Emits a {BurnWithdrawal} event with `owner` and `_tokenId `.\\r\\n     */\\r\\n    function burn(uint256 _tokenId) internal {\\r\\n        address owner = ownerOf(_tokenId);\\r\\n        require (pendingWithdrawPerAddress[owner].state != Data.State.PENDING, \\r\\n        \\\"Formation.Fi: is on pending\\\");\\r\\n        _deleteWithdrawalData(owner);\\r\\n        _burn(_tokenId);   \\r\\n        emit BurnWithdrawal(owner, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the user's withdrawal data.\\r\\n     * @notice this function is called after the withdrawal request \\r\\n     * by the user or after each validation by the manager.\\r\\n     * @param _account The user's address.\\r\\n     * @param _tokenId The withdrawal proof token id.\\r\\n     * @param _amount  The withdrawal amount to be added or removed.\\r\\n     * @param isAddCase  = 1 when teh user makes a withdrawal request.\\r\\n     * = 0, when the manager validates the user's withdrawal request.\\r\\n     */\\r\\n    function updateWithdrawalData (address _account, uint256 _tokenId, \\r\\n        uint256 _amount, bool isAddCase) public onlyProxy {\\r\\n\\r\\n        require (_exists(_tokenId), \\\"Formation Fi: no token\\\");\\r\\n\\r\\n        require (ownerOf(_tokenId) == _account , \\r\\n         \\\"Formation.Fi: not owner\\\");\\r\\n\\r\\n        if( _amount > 0){\\r\\n            if (isAddCase){\\r\\n               pendingWithdrawPerAddress[_account].state = Data.State.PENDING;\\r\\n               pendingWithdrawPerAddress[_account].amount = _amount;\\r\\n               pendingWithdrawPerAddress[_account].listPointer = usersOnPendingWithdraw.length;\\r\\n               usersOnPendingWithdraw.push(_account);\\r\\n            }\\r\\n            else {\\r\\n               require(pendingWithdrawPerAddress[_account].amount >= _amount, \\r\\n               \\\"Formation.Fi: not enough amount\\\");\\r\\n               uint256 _newAmount = pendingWithdrawPerAddress[_account].amount - _amount;\\r\\n               pendingWithdrawPerAddress[_account].amount = _newAmount;\\r\\n               if (_newAmount <= tolerance){\\r\\n                   pendingWithdrawPerAddress[_account].state = Data.State.NONE;\\r\\n                   burn(_tokenId);\\r\\n                }\\r\\n            }     \\r\\n       }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev delete the user's withdrawal proof token data.\\r\\n     * @notice this function is called when the user's withdrawal request is fully \\r\\n     * validated by the manager.\\r\\n     * @param _account The user's address.\\r\\n     */\\r\\n    function _deleteWithdrawalData(address _account) internal {\\r\\n        require(\\r\\n          _account!= address(0),\\r\\n          \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        uint256 _index = pendingWithdrawPerAddress[_account].listPointer;\\r\\n        address _lastUser = usersOnPendingWithdraw[usersOnPendingWithdraw.length -1];\\r\\n        usersOnPendingWithdraw[_index] = _lastUser ;\\r\\n        pendingWithdrawPerAddress[_lastUser].listPointer = _index;\\r\\n        usersOnPendingWithdraw.pop();\\r\\n        delete pendingWithdrawPerAddress[_account]; \\r\\n        delete tokenIdPerAddress[_account];    \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev update the withdrawal token proof data of both the sender and the receiver \\r\\n       when the token is transferred.\\r\\n     * @param from The sender's address.\\r\\n     * @param to The receiver's address.\\r\\n     * @param tokenId The withdrawal token proof id.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n       if ((to != address(0)) && (from != address(0))){\\r\\n          uint256 indexFrom = pendingWithdrawPerAddress[from].listPointer;\\r\\n          pendingWithdrawPerAddress[to] = pendingWithdrawPerAddress[from];\\r\\n          pendingWithdrawPerAddress[from].state = Data.State.NONE;\\r\\n          pendingWithdrawPerAddress[from].amount =0;\\r\\n          usersOnPendingWithdraw[indexFrom] = to; \\r\\n          tokenIdPerAddress[to] = tokenId;\\r\\n          delete pendingWithdrawPerAddress[from];\\r\\n          delete tokenIdPerAddress[from];\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the Metadata URI\\r\\n     */\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n   \\r\\n}\\r\\n  \"\r\n    },\r\n    \"main/DepositConfirmation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Data.sol\\\";\\r\\n\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice The Implementation of the user's deposit proof token {ERC721}.\\r\\n*/\\r\\n\\r\\ncontract DepositConfirmation is ERC721, Ownable {\\r\\n    struct PendingDeposit {\\r\\n        Data.State state;\\r\\n        uint256 amount;\\r\\n        uint256 listPointer;\\r\\n    }\\r\\n    uint256 public tolerance = 1e3; \\r\\n    address public proxyInvestement;\\r\\n    string public baseURI;\\r\\n    mapping(address => uint256) private tokenIdPerAddress;\\r\\n    mapping(address => PendingDeposit) public pendingDepositPerAddress;\\r\\n    address[] public usersOnPendingDeposit;\\r\\n    event MintDeposit(address indexed _address, uint256 _id);\\r\\n    event BurnDeposit(address indexed _address, uint256 _id);\\r\\n    event UpdateBaseURI( string _baseURI);\\r\\n\\r\\n    constructor(string memory _name , string memory _symbol)  \\r\\n    ERC721 (\\\"_name\\\",  \\\"_symbol\\\"){\\r\\n    }\\r\\n\\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            proxyInvestement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == proxyInvestement, \\\"Formation.Fi: not the proxy\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev get the token id of user's address.\\r\\n     * @param _account The user's address.\\r\\n     * @return token id.\\r\\n     */\\r\\n    function getTokenId(address _account) external view returns (uint256) {\\r\\n        require(\\r\\n           _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        return tokenIdPerAddress[_account];\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev get the number of users.\\r\\n     * @return number of users.\\r\\n     */\\r\\n    function getUsersSize() external view  returns (uint256) {\\r\\n        return usersOnPendingDeposit.length;\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev get addresses of users on deposit pending.\\r\\n     * @return  addresses of users.\\r\\n     */\\r\\n    function getUsers() external view returns (address[] memory) {\\r\\n        return usersOnPendingDeposit;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev update the proxy.\\r\\n     * @param _proxyInvestement the new proxy.\\r\\n     */\\r\\n    function setProxy(address _proxyInvestement) external onlyOwner {\\r\\n        require(\\r\\n            _proxyInvestement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        proxyInvestement = _proxyInvestement;\\r\\n    }    \\r\\n\\r\\n    /**\\r\\n     * @dev update the Metadata URI\\r\\n     * @param _tokenURI the Metadata URI.\\r\\n     */\\r\\n    function setBaseURI(string calldata _tokenURI) external onlyOwner {\\r\\n        baseURI = _tokenURI;\\r\\n        emit UpdateBaseURI(_tokenURI);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev mint the deposit proof ERC721 token.\\r\\n     * @notice the user receives this token when he makes \\r\\n     * a deposit request.\\r\\n     * Each user's address can at most have one deposit proof token.\\r\\n     * @param _account The user's address.\\r\\n     * @param _tokenId The id of the token.\\r\\n     * @param _amount The deposit amount in the requested Stablecoin.\\r\\n     * @notice Emits a {MintDeposit} event with `_account` and `_tokenId `.\\r\\n     */\\r\\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \\r\\n       external onlyProxy {\\r\\n       require (balanceOf(_account) == 0, \\\"Formation.Fi: has deposit token\\\");\\r\\n       _safeMint(_account,  _tokenId);\\r\\n       updateDepositData( _account,  _tokenId, _amount, true);\\r\\n       emit MintDeposit(_account, _tokenId);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev burn the deposit proof ERC721 token.\\r\\n     * @notice the token is burned  when the manager fully validates\\r\\n     * the user's deposit request.\\r\\n     * @param _tokenId The id of the token.\\r\\n     * @notice Emits a {BurnDeposit} event with `owner` and `_tokenId `.\\r\\n     */\\r\\n    function burn(uint256 _tokenId) internal {\\r\\n        address owner = ownerOf(_tokenId);\\r\\n        require (pendingDepositPerAddress[owner].state != Data.State.PENDING,\\r\\n        \\\"Formation.Fi: is on pending\\\");\\r\\n        _deleteDepositData(owner);\\r\\n        _burn(_tokenId); \\r\\n        emit BurnDeposit(owner, _tokenId);\\r\\n    }\\r\\n     \\r\\n     /**\\r\\n     * @dev update the user's deposit data.\\r\\n     * @notice this function is called after each desposit request \\r\\n     * by the user or after each validation by the manager.\\r\\n     * @param _account The user's address.\\r\\n     * @param _tokenId The depoist proof token id.\\r\\n     * @param _amount  The deposit amount to be added or removed.\\r\\n     * @param isAddCase  = 1 when teh user makes a deposit request.\\r\\n     * = 0, when the manager validates the user's deposit request.\\r\\n     */\\r\\n    function updateDepositData(address _account, uint256 _tokenId, \\r\\n        uint256 _amount, bool isAddCase) public onlyProxy {\\r\\n        require (_exists(_tokenId), \\\"Formation.Fi: no token\\\");\\r\\n        require (ownerOf(_tokenId) == _account , \\\"Formation.Fi:  not owner\\\");\\r\\n        if( _amount > 0){\\r\\n           if (isAddCase){\\r\\n              if(pendingDepositPerAddress[_account].amount == 0){\\r\\n                  pendingDepositPerAddress[_account].state = Data.State.PENDING;\\r\\n                  pendingDepositPerAddress[_account].listPointer = usersOnPendingDeposit.length;\\r\\n                  tokenIdPerAddress[_account] = _tokenId;\\r\\n                  usersOnPendingDeposit.push(_account);\\r\\n                }\\r\\n                pendingDepositPerAddress[_account].amount +=  _amount;\\r\\n            }\\r\\n            else {\\r\\n               require(pendingDepositPerAddress[_account].amount >= _amount, \\r\\n               \\\"Formation Fi: not enough amount\\\");\\r\\n               uint256 _newAmount = pendingDepositPerAddress[_account].amount - _amount;\\r\\n               pendingDepositPerAddress[_account].amount = _newAmount;\\r\\n               if (_newAmount <= tolerance){\\r\\n                  pendingDepositPerAddress[_account].state = Data.State.NONE;\\r\\n                  burn(_tokenId);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    \\r\\n     /**\\r\\n     * @dev delete the user's deposit proof token data.\\r\\n     * @notice this function is called when the user's deposit request is fully \\r\\n     * validated by the manager.\\r\\n     * @param _account The user's address.\\r\\n     */\\r\\n    function _deleteDepositData(address _account) internal {\\r\\n        require(\\r\\n           _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n         uint256 _index = pendingDepositPerAddress[_account].listPointer;\\r\\n         address _lastUser = usersOnPendingDeposit[usersOnPendingDeposit.length - 1];\\r\\n         usersOnPendingDeposit[_index] = _lastUser;\\r\\n         pendingDepositPerAddress[_lastUser].listPointer = _index;\\r\\n         usersOnPendingDeposit.pop();\\r\\n         delete pendingDepositPerAddress[_account]; \\r\\n         delete tokenIdPerAddress[_account];    \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev update the deposit token proof data of both the sender and the receiver \\r\\n       when the token is transferred.\\r\\n     * @param from The sender's address.\\r\\n     * @param to The receiver's address.\\r\\n     * @param tokenId The deposit token proof id.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n       address from,\\r\\n       address to,\\r\\n       uint256 tokenId\\r\\n    )   internal virtual override {\\r\\n        if ((to != address(0)) && (from != address(0))){\\r\\n            uint256 indexFrom = pendingDepositPerAddress[from].listPointer;\\r\\n            pendingDepositPerAddress[to] = pendingDepositPerAddress[from];\\r\\n            pendingDepositPerAddress[from].state = Data.State.NONE;\\r\\n            pendingDepositPerAddress[from].amount = 0;\\r\\n            usersOnPendingDeposit[indexFrom] = to; \\r\\n            tokenIdPerAddress[to] = tokenId;\\r\\n            delete pendingDepositPerAddress[from];\\r\\n            delete tokenIdPerAddress[from];\\r\\n        }\\r\\n    }\\r\\n     /**\\r\\n     * @dev Get the Metadata URI\\r\\n     */\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n      \\r\\n}\\r\\n  \"\r\n    },\r\n    \"main/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice  A common Implementation for tokens ALPHA, BETA and GAMMA.\\r\\n*/\\r\\n\\r\\ncontract Token is ERC20, Ownable {\\r\\n    struct Deposit{\\r\\n        uint256 amount;\\r\\n        uint256 time;\\r\\n    }\\r\\n    address public proxyInvestement;\\r\\n    address private proxyAdmin;\\r\\n\\r\\n    mapping(address => Deposit[]) public depositPerAddress;\\r\\n    mapping(address => bool) public  whitelist;\\r\\n    event SetProxyInvestement(address  _address);\\r\\n    constructor(string memory _name, string memory _symbol) \\r\\n    ERC20(_name,  _symbol) {\\r\\n    }\\r\\n\\r\\n    modifier onlyProxy() {\\r\\n        require(\\r\\n            (proxyInvestement != address(0)) && (proxyAdmin != address(0)),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            (msg.sender == proxyInvestement) || (msg.sender == proxyAdmin),\\r\\n             \\\"Formation.Fi: not the proxy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyProxyInvestement() {\\r\\n        require(proxyInvestement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == proxyInvestement,\\r\\n             \\\"Formation.Fi: not the proxy\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Update the proxyInvestement.\\r\\n     * @param _proxyInvestement.\\r\\n     * @notice Emits a {SetProxyInvestement} event with `_proxyInvestement`.\\r\\n     */\\r\\n    function setProxyInvestement(address _proxyInvestement) external onlyOwner {\\r\\n        require(\\r\\n            _proxyInvestement!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n         proxyInvestement = _proxyInvestement;\\r\\n\\r\\n        emit SetProxyInvestement( _proxyInvestement);\\r\\n\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Add a contract address to the whitelist\\r\\n     * @param _contract The address of the contract.\\r\\n     */\\r\\n    function addToWhitelist(address _contract) external onlyOwner {\\r\\n        require(\\r\\n            _contract!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        whitelist[_contract] = true;\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Remove a contract address from the whitelist\\r\\n     * @param _contract The address of the contract.\\r\\n     */\\r\\n    function removeFromWhitelist(address _contract) external onlyOwner {\\r\\n         require(\\r\\n            whitelist[_contract] == true,\\r\\n            \\\"Formation.Fi: no whitelist\\\"\\r\\n        );\\r\\n        require(\\r\\n            _contract!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        whitelist[_contract] = false;\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev Update the proxyAdmin.\\r\\n     * @param _proxyAdmin.\\r\\n     */\\r\\n    function setAdmin(address _proxyAdmin) external onlyOwner {\\r\\n        require(\\r\\n            _proxyAdmin!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        \\r\\n         proxyAdmin = _proxyAdmin;\\r\\n    } \\r\\n\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev add user's deposit.\\r\\n     * @param _account The user's address.\\r\\n     * @param _amount The user's deposit amount.\\r\\n     * @param _time The deposit time.\\r\\n     */\\r\\n    function addDeposit(address _account, uint256 _amount, uint256 _time) \\r\\n        external onlyProxyInvestement {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: zero amount\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _time!= 0,\\r\\n            \\\"Formation.Fi: zero time\\\"\\r\\n        );\\r\\n        Deposit memory _deposit = Deposit(_amount, _time); \\r\\n        depositPerAddress[_account].push(_deposit);\\r\\n    } \\r\\n\\r\\n     /**\\r\\n     * @dev mint the token product for the user.\\r\\n     * @notice To receive the token product, the user has to deposit \\r\\n     * the required StableCoin in this product. \\r\\n     * @param _account The user's address.\\r\\n     * @param _amount The amount to be minted.\\r\\n     */\\r\\n    function mint(address _account, uint256 _amount) external onlyProxy {\\r\\n        require(\\r\\n          _account!= address(0),\\r\\n           \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: zero amount\\\"\\r\\n        );\\r\\n\\r\\n       _mint(_account,  _amount);\\r\\n   }\\r\\n\\r\\n    /**\\r\\n     * @dev burn the token product of the user.\\r\\n     * @notice When the user withdraws his Stablecoins, his tokens \\r\\n     * product are burned. \\r\\n     * @param _account The user's address.\\r\\n     * @param _amount The amount to be burned.\\r\\n     */\\r\\n    function burn(address _account, uint256 _amount) external onlyProxy {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n         require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: zero amount\\\"\\r\\n        );\\r\\n\\r\\n        _burn( _account, _amount);\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev Verify the lock up condition for a user's withdrawal request.\\r\\n     * @param _account The user's address.\\r\\n     * @param _amount The amount to be withdrawn.\\r\\n     * @param _period The lock up period.\\r\\n     * @return _success  is true if the lock up condition is satisfied.\\r\\n     */\\r\\n    function checklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \\r\\n        external view returns (bool _success){\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n           _amount!= 0,\\r\\n            \\\"Formation.Fi: zero amount\\\"\\r\\n        );\\r\\n\\r\\n        Deposit[] memory _deposit = depositPerAddress[_account];\\r\\n        uint256 _amountTotal = 0;\\r\\n        for (uint256 i = 0; i < _deposit.length; i++) {\\r\\n             require ((block.timestamp - _deposit[i].time) >= _period, \\r\\n            \\\"Formation.Fi:  position locked\\\");\\r\\n            if (_amount<= (_amountTotal + _deposit[i].amount)){\\r\\n                break; \\r\\n            }\\r\\n            _amountTotal = _amountTotal + _deposit[i].amount;\\r\\n        }\\r\\n        _success= true;\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev update the user's token data.\\r\\n     * @notice this function is called after each desposit request \\r\\n     * validation by the manager.\\r\\n     * @param _account The user's address.\\r\\n     * @param _amount The deposit amount validated by the manager.\\r\\n     */\\r\\n    function updateTokenData( address _account,  uint256 _amount) \\r\\n        external onlyProxyInvestement {\\r\\n        _updateTokenData(_account,  _amount);\\r\\n    }\\r\\n\\r\\n    function _updateTokenData( address _account,  uint256 _amount) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _amount!= 0,\\r\\n            \\\"Formation.Fi: zero amount\\\"\\r\\n        );\\r\\n\\r\\n        Deposit[] memory _deposit = depositPerAddress[_account];\\r\\n        uint256 _amountlocal = 0;\\r\\n        uint256 _amountTotal = 0;\\r\\n        uint256 _newAmount;\\r\\n        uint256 k =0;\\r\\n        for (uint256 i = 0; i < _deposit.length; i++) {\\r\\n            _amountlocal  = Math.min(_deposit[i].amount, _amount -  _amountTotal);\\r\\n            _amountTotal = _amountTotal + _amountlocal;\\r\\n            _newAmount = _deposit[i].amount - _amountlocal;\\r\\n            depositPerAddress[_account][k].amount = _newAmount;\\r\\n            if (_newAmount == 0){\\r\\n               _deleteTokenData(_account, k);\\r\\n            }\\r\\n            else {\\r\\n                k = k+1;\\r\\n            }\\r\\n            if (_amountTotal == _amount){\\r\\n               break; \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev delete the user's token data.\\r\\n     * @notice This function is called when the user's withdrawal request is  \\r\\n     * validated by the manager.\\r\\n     * @param _account The user's address.\\r\\n     * @param _index The index of the user in 'amountDepositPerAddress'.\\r\\n     */\\r\\n    function _deleteTokenData(address _account, uint256 _index) internal {\\r\\n        require(\\r\\n            _account!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        uint256 _size = depositPerAddress[_account].length - 1;\\r\\n        \\r\\n        require( _index <= _size,\\r\\n            \\\"Formation.Fi: index is out\\\"\\r\\n        );\\r\\n        for (uint256 i = _index; i< _size; i++){\\r\\n            depositPerAddress[ _account][i] = depositPerAddress[ _account][i+1];\\r\\n        }\\r\\n        depositPerAddress[ _account].pop();   \\r\\n    }\\r\\n   \\r\\n     /**\\r\\n     * @dev update the token data of both the sender and the receiver \\r\\n       when the product token is transferred.\\r\\n     * @param from The sender's address.\\r\\n     * @param to The receiver's address.\\r\\n     * @param amount The transferred amount.\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n      ) internal virtual override{\\r\\n      \\r\\n       if ((to != address(0)) && (to != proxyInvestement) \\r\\n       && (to != proxyAdmin) && (from != address(0)) && (!whitelist[to])){\\r\\n          _updateTokenData(from, amount);\\r\\n          Deposit memory _deposit = Deposit(amount, block.timestamp);\\r\\n          depositPerAddress[to].push(_deposit);\\r\\n         \\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"main/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"./Token.sol\\\";\\r\\nimport \\\"./libraries/Math.sol\\\";\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice Implementation of the contract Admin.\\r\\n*/\\r\\n\\r\\ncontract Admin is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    uint256 public constant FACTOR_FEES_DECIMALS = 1e4; \\r\\n    uint256 public constant FACTOR_PRICE_DECIMALS = 1e6;\\r\\n    uint256 public constant  SECONDES_PER_YEAR = 365 days; \\r\\n    uint256 public slippageTolerance = 200;\\r\\n    uint256 public  amountScaleDecimals = 1; \\r\\n    uint256 public depositFeeRate = 50;  \\r\\n    uint256 public depositFeeRateParity= 15; \\r\\n    uint256 public managementFeeRate = 200;\\r\\n    uint256 public performanceFeeRate = 2000;\\r\\n    uint256 public performanceFees = 0;\\r\\n    uint256 public managementFees = 0;\\r\\n    uint256 public managementFeesTime = 0;\\r\\n    uint256 public tokenPrice = 1e6;\\r\\n    uint256 public tokenPriceMean = 1e6;\\r\\n    uint256 public minAmount= 100 * 1e18;\\r\\n    uint256 public lockupPeriodUser = 0 days; \\r\\n    uint256 public timeWithdrawManager = 0;\\r\\n    uint public netDepositInd= 0;\\r\\n    uint256 public netAmountEvent =0;\\r\\n    address public manager;\\r\\n    address public treasury;\\r\\n    address public investement;\\r\\n    address private safeHouse;\\r\\n    bool public isCancel= true;\\r\\n    Token public token;\\r\\n    IERC20 public stableToken;\\r\\n\\r\\n\\r\\n    constructor( address _manager, address _treasury,  address _stableTokenAddress,\\r\\n     address _tokenAddress) {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n           _treasury != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            _stableTokenAddress != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n           _tokenAddress != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n\\r\\n        manager = _manager;\\r\\n        treasury = _treasury; \\r\\n        stableToken = IERC20(_stableTokenAddress);\\r\\n        token = Token(_tokenAddress);\\r\\n        uint8 _stableTokenDecimals = ERC20( _stableTokenAddress).decimals();\\r\\n        if ( _stableTokenDecimals == 6) {\\r\\n            amountScaleDecimals= 1e12;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyInvestement() {\\r\\n        require(investement != address(0),\\r\\n            \\\"Formation.Fi:  zero address\\\"\\r\\n        );\\r\\n\\r\\n        require(msg.sender == investement,\\r\\n             \\\"Formation.Fi:  not investement\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == manager, \\r\\n        \\\"Formation.Fi: not manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Setter functions to update the Portfolio Parameters.\\r\\n     */\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(\\r\\n            _treasury != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function setManager(address _manager) external onlyOwner {\\r\\n        require(\\r\\n            _manager != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        manager = _manager;\\r\\n    }\\r\\n\\r\\n    function setInvestement(address _investement) external onlyOwner {\\r\\n        require(\\r\\n            _investement!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        investement = _investement;\\r\\n    } \\r\\n\\r\\n    function setSafeHouse(address _safeHouse) external onlyOwner {\\r\\n        require(\\r\\n            _safeHouse!= address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n\\r\\n        safeHouse = _safeHouse;\\r\\n    } \\r\\n\\r\\n    function setCancel(bool _cancel) external onlyManager {\\r\\n        isCancel= _cancel;\\r\\n    }\\r\\n  \\r\\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\\r\\n        lockupPeriodUser = _lockupPeriodUser;\\r\\n    }\\r\\n \\r\\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\\r\\n        depositFeeRate= _rate;\\r\\n    }\\r\\n\\r\\n    function setDepositFeeRateParity(uint256 _rate) external onlyManager {\\r\\n        depositFeeRateParity= _rate;\\r\\n    }\\r\\n\\r\\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\\r\\n        managementFeeRate = _rate;\\r\\n    }\\r\\n\\r\\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\\r\\n        performanceFeeRate  = _rate;\\r\\n    }\\r\\n    function setMinAmount(uint256 _minAmount) external onlyManager {\\r\\n        minAmount= _minAmount;\\r\\n     }\\r\\n\\r\\n    function updateTokenPrice(uint256 _price) external onlyManager {\\r\\n        require(\\r\\n             _price > 0,\\r\\n            \\\"Formation.Fi: zero price\\\"\\r\\n        );\\r\\n\\r\\n        tokenPrice = _price;\\r\\n    }\\r\\n\\r\\n    function updateTokenPriceMean(uint256 _price) external onlyInvestement {\\r\\n        require(\\r\\n             _price > 0,\\r\\n            \\\"Formation.Fi: zero price\\\"\\r\\n        );\\r\\n        tokenPriceMean  = _price;\\r\\n    }\\r\\n\\r\\n    function updateManagementFeeTime(uint256 _time) external onlyInvestement {\\r\\n        managementFeesTime = _time;\\r\\n    }\\r\\n    \\r\\n\\r\\n     /**\\r\\n     * @dev Calculate performance Fees.\\r\\n     */\\r\\n    function calculatePerformanceFees() external onlyManager {\\r\\n        require(performanceFees == 0, \\\"Formation.Fi: fees on pending\\\");\\r\\n\\r\\n        uint256 _deltaPrice = 0;\\r\\n        if (tokenPrice > tokenPriceMean) {\\r\\n            _deltaPrice = tokenPrice - tokenPriceMean;\\r\\n            tokenPriceMean = tokenPrice;\\r\\n            performanceFees = (token.totalSupply() *\\r\\n            _deltaPrice * performanceFeeRate) / (tokenPrice * FACTOR_FEES_DECIMALS); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n     /**\\r\\n     * @dev Calculate management Fees.\\r\\n     */\\r\\n    function calculateManagementFees() external onlyManager {\\r\\n        require(managementFees == 0, \\\"Formation.Fi: fees on pending\\\");\\r\\n        if (managementFeesTime!= 0){\\r\\n           uint256 _deltaTime;\\r\\n           _deltaTime = block.timestamp -  managementFeesTime; \\r\\n           managementFees = (token.totalSupply() * managementFeeRate * _deltaTime ) \\r\\n           /(FACTOR_FEES_DECIMALS * SECONDES_PER_YEAR);\\r\\n           managementFeesTime = block.timestamp; \\r\\n        }\\r\\n    }\\r\\n     \\r\\n    /**\\r\\n     * @dev Mint Fees.\\r\\n     */\\r\\n    function mintFees() external onlyManager {\\r\\n        require ((performanceFees + managementFees) > 0, \\\"Formation.Fi: zero fees\\\");\\r\\n\\r\\n        token.mint(treasury, performanceFees + managementFees);\\r\\n        performanceFees = 0;\\r\\n        managementFees = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate net deposit indicator\\r\\n     * @param _depositAmountTotal the total requested deposit amount by users.\\r\\n     * @param  _withdrawalAmountTotal the total requested withdrawal amount by users.\\r\\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\\r\\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\\r\\n     * @return net Deposit indicator: 1 if net deposit case, 0 otherwise (net withdrawal case).\\r\\n     */\\r\\n    function calculateNetDepositInd(uint256 _depositAmountTotal, \\r\\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \\r\\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns( uint256) {\\r\\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\\r\\n         _maxDepositAmount);\\r\\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\\r\\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\\r\\n        _maxWithdrawalAmount);\\r\\n        uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \\r\\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\\r\\n        if  ( _depositAmountTotalAfterFees >= \\r\\n            ((_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS)){\\r\\n            netDepositInd = 1 ;\\r\\n        }\\r\\n        else {\\r\\n            netDepositInd = 0;\\r\\n        }\\r\\n        return netDepositInd;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate net amount \\r\\n     * @param _depositAmountTotal the total requested deposit amount by users.\\r\\n     * @param _withdrawalAmountTotal the total requested withdrawal amount by users.\\r\\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\\r\\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\\r\\n     * @return net amount.\\r\\n     */\\r\\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, \\r\\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \\r\\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns(uint256) {\\r\\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\\r\\n         _maxDepositAmount);\\r\\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\\r\\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\\r\\n        _maxWithdrawalAmount);\\r\\n         uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \\r\\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\\r\\n        \\r\\n        if (netDepositInd == 1) {\\r\\n             netAmountEvent =  _depositAmountTotalAfterFees - _withdrawalAmountTotal;\\r\\n        }\\r\\n        else {\\r\\n             netAmountEvent = _withdrawalAmountTotal - _depositAmountTotalAfterFees;\\r\\n        \\r\\n        }\\r\\n        return netAmountEvent;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Protect against slippage due to assets sale.\\r\\n     * @param _withdrawalAmount the value of sold assets in Stablecoin.\\r\\n     * _withdrawalAmount has to be sent to the contract.\\r\\n     * treasury has to approve the contract for both Stablecoin and token.\\r\\n     * @return Missed amount to send to the contract due to slippage.\\r\\n     */\\r\\n    function protectAgainstSlippage(uint256 _withdrawalAmount) external onlyManager \\r\\n        returns (uint256) {\\r\\n        require(_withdrawalAmount != 0, \\\"Formation.Fi: zero amount\\\");\\r\\n\\r\\n        require(netDepositInd == 0, \\\"Formation.Fi: no slippage\\\");\\r\\n       \\r\\n       uint256 _amount = 0; \\r\\n       uint256 _deltaAmount =0;\\r\\n       uint256 _slippage = 0;\\r\\n       uint256  _tokenAmount = 0;\\r\\n       uint256 _balanceTokenTreasury = token.balanceOf(treasury);\\r\\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * amountScaleDecimals;\\r\\n      \\r\\n        if (_withdrawalAmount< netAmountEvent){\\r\\n            _amount = netAmountEvent - _withdrawalAmount;   \\r\\n            _slippage = (_amount * FACTOR_FEES_DECIMALS ) / netAmountEvent;\\r\\n            if (_slippage >= slippageTolerance) {\\r\\n                return netAmountEvent;\\r\\n            }\\r\\n            else {\\r\\n                 _deltaAmount = Math.min( _amount, _balanceStableTreasury);\\r\\n                if ( _deltaAmount  > 0){\\r\\n                    stableToken.safeTransferFrom(treasury, investement, _deltaAmount/amountScaleDecimals);\\r\\n                    _tokenAmount = (_deltaAmount * FACTOR_PRICE_DECIMALS)/tokenPrice;\\r\\n                    token.mint(treasury, _tokenAmount);\\r\\n                    return _amount - _deltaAmount;\\r\\n                }\\r\\n                else {\\r\\n                     return _amount; \\r\\n                }  \\r\\n            }    \\r\\n        \\r\\n        }\\r\\n        else  {\\r\\n           _amount = _withdrawalAmount - netAmountEvent;   \\r\\n          _tokenAmount = (_amount * FACTOR_PRICE_DECIMALS)/tokenPrice;\\r\\n          _tokenAmount = Math.min(_tokenAmount, _balanceTokenTreasury);\\r\\n          if (_tokenAmount >0) {\\r\\n              _deltaAmount = (_tokenAmount * tokenPrice)/FACTOR_PRICE_DECIMALS;\\r\\n              stableToken.safeTransfer(treasury, _deltaAmount/amountScaleDecimals);   \\r\\n              token.burn( treasury, _tokenAmount);\\r\\n            }\\r\\n           if ((_amount - _deltaAmount) > 0) {\\r\\n            \\r\\n              stableToken.safeTransfer(safeHouse, (_amount - _deltaAmount)/amountScaleDecimals); \\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n\\r\\n    } \\r\\n\\r\\n     /**\\r\\n     * @dev Send Stablecoin from the manager to the contract.\\r\\n     * @param _amount  tha amount to send.\\r\\n     */\\r\\n    function sendStableTocontract(uint256 _amount) external \\r\\n     onlyManager {\\r\\n      require( _amount > 0,  \\\"Formation.Fi: zero amount\\\");\\r\\n\\r\\n      stableToken.safeTransferFrom(msg.sender, address(this),\\r\\n       _amount/amountScaleDecimals);\\r\\n    }\\r\\n\\r\\n   \\r\\n     /**\\r\\n     * @dev Send Stablecoin from the contract to the contract Investement.\\r\\n     */\\r\\n    function sendStableFromcontract() external \\r\\n        onlyManager {\\r\\n        require(investement != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n         stableToken.safeTransfer(investement, stableToken.balanceOf(address(this)));\\r\\n    }\\r\\n  \\r\\n}\\r\\n\"\r\n    },\r\n    \"main/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"main/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x95d89b41)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x06fdde03)\\r\\n        );\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(0x313ce567)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(0x23b872dd, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"SafeERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"Transaction is not available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused, \\\"Transaction is available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() public onlyOwner whenNotPaused {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() public onlyOwner whenPaused {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"main/libraries/Data.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nlibrary Data {\\r\\n\\r\\nenum State {\\r\\n        NONE,\\r\\n        PENDING\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"main/Assets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../utils/Pausable.sol\\\";\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport \\\"./Admin.sol\\\";\\r\\n\\r\\n/** \\r\\n* @author Formation.Fi.\\r\\n* @notice Implementation of the contract Assets.\\r\\n*/\\r\\n\\r\\ncontract Assets is  Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    struct Asset{\\r\\n        address  token;\\r\\n        address oracle;\\r\\n        uint256 price;\\r\\n        uint256 decimals;   \\r\\n    }\\r\\n\\r\\n    uint256 public index;\\r\\n    Asset[] public  assets;\\r\\n    mapping(address => bool) public whitelist;\\r\\n    mapping(address => uint256) public indexAsset;\\r\\n    Admin public admin;\\r\\n    constructor(address _admin) {\\r\\n         require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n         admin = Admin(_admin);\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        address _manager = admin.manager();\\r\\n        require(msg.sender == _manager, \\\"Formation.Fi: no manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManagerOrOwner() {\\r\\n        address _manager = admin.manager();\\r\\n        require( (msg.sender == _manager) || ( msg.sender == owner()),\\r\\n        \\\"Formation.Fi: no manager or owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter functions .\\r\\n     */\\r\\n    function isWhitelist( address _token) external view  returns (bool) {\\r\\n        return whitelist[_token];\\r\\n    }\\r\\n    function getIndex( address _token) external view  returns (uint256) {\\r\\n        return indexAsset[_token];\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Setter functions .\\r\\n     */\\r\\n    function setAdmin(address _admin) external onlyOwner {\\r\\n        require(\\r\\n            _admin != address(0),\\r\\n            \\\"Formation.Fi: zero address\\\"\\r\\n        );\\r\\n        \\r\\n        admin = Admin(_admin);\\r\\n    } \\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Add an asset .\\r\\n     * @param  _token The address of the asset.\\r\\n     * @param  _oracle The address of the oracle.\\r\\n     * @param  _price The price in the case where the oracle doesn't exist.\\r\\n     */\\r\\n    function addAsset( address _token, address _oracle, uint256 _price) \\r\\n        external onlyOwner {\\r\\n        require ( whitelist[_token] == false, \\\"Formation.Fi: Token exists\\\");\\r\\n        if (_oracle == address(0)){\\r\\n           require(_price != 0, \\\"zero price\\\");\\r\\n        }\\r\\n        else {\\r\\n        require(_price == 0, \\\"not zero price\\\");\\r\\n        }\\r\\n        uint8 _decimals = 0;\\r\\n        if (_token!=address(0)){\\r\\n        _decimals = ERC20(_token).decimals();\\r\\n        }\\r\\n        Asset memory _asset = Asset(_token, _oracle, _price, _decimals);\\r\\n        indexAsset[_token] = index;\\r\\n        assets.push(_asset);\\r\\n        index = index +1;\\r\\n        whitelist[_token] = true;\\r\\n    }\\r\\n    \\r\\n     /**\\r\\n     * @dev Remove an asset .\\r\\n     * @param  _token The address of the asset.\\r\\n     */\\r\\n    function removeAsset( address _token) external onlyManagerOrOwner {\\r\\n        require ( whitelist[_token] == true, \\\"Formation.Fi: no Token\\\");\\r\\n        whitelist[_token] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the asset's oracle .\\r\\n     * @param  _token The address of the asset.\\r\\n     * @param  _oracle The new oracle's address.\\r\\n     */\\r\\n    function updateOracle( address _token, address _oracle) external onlyOwner {\\r\\n        require ( whitelist[_token] == true, \\\"Formation.Fi: no token\\\");\\r\\n        uint256 _index = indexAsset[_token];\\r\\n        assets[_index].oracle = _oracle;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the asset's price .\\r\\n     * @param  _token The address of the asset.\\r\\n     * @param  _price The new price's address.\\r\\n     */\\r\\n    function updatePrice( address _token, uint256 _price) external onlyOwner {\\r\\n        require ( whitelist[_token] == true, \\\"Formation.Fi: no token\\\");\\r\\n        require ( _price != 0, \\\"Formation.Fi: zero price\\\");\\r\\n        uint256 _index = indexAsset[_token];\\r\\n        require (assets[_index].oracle == address(0), \\\" no zero address\\\");\\r\\n        assets[_index].price = _price;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"ValidateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SentAmount\",\"type\":\"uint256\"}],\"name\":\"ValidateWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_F\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedWithdrawalPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"contract Admin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountScaleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateEventParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetAmountEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetDepositInd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"contract DepositConfirmation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRateParity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parity\",\"type\":\"address\"}],\"name\":\"setParity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeHouse\",\"type\":\"address\"}],\"name\":\"setSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceMean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"validateDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"validateWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedDepositParityStableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedDepositParityTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedWithdrawalParityStableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedWithdrawalParityTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[{\"internalType\":\"contract WithdrawalConfirmation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmountTotalOld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvestementBeta", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e89f9162103b3eb96f13531172e023db764ca1b100000000000000000000000004dda204bf81a32b7aa8fe1c319cf836388af7b2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004f51d6a1aab523fbce50a6c6e9747f891f9f48190000000000000000000000008dfb6d4b2ceee6b712728bb2ed31920b7c13f83b000000000000000000000000b879403b8bbe754de9d389b8324f50b7124b72e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}