{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SkaleDKG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDKG.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISlashingTable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchains.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/INodeRotation.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IKeyStorage.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IWallets.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/delegation/IPunisher.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/IECDH.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./utils/FieldOperations.sol\\\";\\nimport \\\"./utils/Precompiled.sol\\\";\\nimport \\\"./dkg/SkaleDkgAlright.sol\\\";\\nimport \\\"./dkg/SkaleDkgBroadcast.sol\\\";\\nimport \\\"./dkg/SkaleDkgComplaint.sol\\\";\\nimport \\\"./dkg/SkaleDkgPreResponse.sol\\\";\\nimport \\\"./dkg/SkaleDkgResponse.sol\\\";\\n\\n/**\\n * @title SkaleDKG\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\ncontract SkaleDKG is Permissions, ISkaleDKG {\\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n    using G2Operations for ISkaleDKG.G2Point;\\n\\n    enum DkgFunction {Broadcast, Alright, ComplaintBadData, PreResponse, Complaint, Response}\\n\\n    struct Context {\\n        bool isDebt;\\n        uint delta;\\n        DkgFunction dkgFunction;\\n    }\\n\\n    mapping(bytes32 => Channel) public channels;\\n\\n    mapping(bytes32 => uint) public lastSuccessfulDKG;\\n\\n    mapping(bytes32 => ProcessDKG) public dkgProcess;\\n\\n    mapping(bytes32 => ComplaintData) public complaints;\\n\\n    mapping(bytes32 => uint) public startAlrightTimestamp;\\n\\n    mapping(bytes32 => mapping(uint => bytes32)) public hashedData;\\n    \\n    mapping(bytes32 => uint) private _badNodes;\\n\\n    modifier correctGroup(bytes32 schainHash) {\\n        require(channels[schainHash].active, \\\"Group is not created\\\");\\n        _;\\n    }\\n\\n    modifier correctGroupWithoutRevert(bytes32 schainHash) {\\n        if (!channels[schainHash].active) {\\n            emit ComplaintError(\\\"Group is not created\\\");\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    modifier correctNode(bytes32 schainHash, uint nodeIndex) {\\n        (uint index, ) = checkAndReturnIndexInGroup(schainHash, nodeIndex, true);\\n        _;\\n    }\\n\\n    modifier correctNodeWithoutRevert(bytes32 schainHash, uint nodeIndex) {\\n        (, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        if (!check) {\\n            emit ComplaintError(\\\"Node is not in this group\\\");\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    modifier onlyNodeOwner(uint nodeIndex) {\\n        _checkMsgSenderIsNodeOwner(nodeIndex);\\n        _;\\n    }\\n    \\n    modifier refundGasBySchain(bytes32 schainHash, Context memory context) {\\n        uint gasTotal = gasleft();\\n        _;\\n        _refundGasBySchain(schainHash, gasTotal, context);\\n    }\\n\\n    modifier refundGasByValidatorToSchain(bytes32 schainHash, Context memory context) {\\n        uint gasTotal = gasleft();\\n        _;\\n        _refundGasBySchain(schainHash, gasTotal, context);\\n        _refundGasByValidatorToSchain(schainHash);\\n    }\\n\\n    function alright(bytes32 schainHash, uint fromNodeIndex)\\n        external\\n        override\\n        refundGasBySchain(schainHash, \\n            Context({\\n                isDebt: false,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).ALRIGHT_DELTA(), \\n                dkgFunction: DkgFunction.Alright\\n        }))\\n        correctGroup(schainHash)\\n        onlyNodeOwner(fromNodeIndex)\\n    {\\n        SkaleDkgAlright.alright(\\n            schainHash,\\n            fromNodeIndex,\\n            contractManager,\\n            channels,\\n            dkgProcess,\\n            complaints,\\n            lastSuccessfulDKG,\\n            startAlrightTimestamp\\n        );\\n    }\\n\\n    function broadcast(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external\\n        override\\n        refundGasBySchain(schainHash,\\n            Context({\\n                isDebt: false,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).BROADCAST_DELTA(),\\n                dkgFunction: DkgFunction.Broadcast\\n        }))\\n        correctGroup(schainHash)\\n        onlyNodeOwner(nodeIndex)\\n    {\\n        SkaleDkgBroadcast.broadcast(\\n            schainHash,\\n            nodeIndex,\\n            verificationVector,\\n            secretKeyContribution,\\n            contractManager,\\n            channels,\\n            dkgProcess,\\n            hashedData\\n        );\\n    }\\n\\n\\n    function complaintBadData(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex)\\n        external\\n        override\\n        refundGasBySchain(\\n            schainHash,\\n            Context({\\n                isDebt: true,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).COMPLAINT_BAD_DATA_DELTA(),\\n                dkgFunction: DkgFunction.ComplaintBadData\\n        }))\\n        correctGroupWithoutRevert(schainHash)\\n        correctNode(schainHash, fromNodeIndex)\\n        correctNodeWithoutRevert(schainHash, toNodeIndex)\\n        onlyNodeOwner(fromNodeIndex)\\n    { \\n        SkaleDkgComplaint.complaintBadData(\\n            schainHash,\\n            fromNodeIndex,\\n            toNodeIndex,\\n            contractManager,\\n            complaints\\n        );\\n    }\\n\\n    function preResponse(\\n        bytes32 schainId,\\n        uint fromNodeIndex,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        ISkaleDKG.G2Point[] memory verificationVectorMultiplication,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external\\n        override\\n        refundGasBySchain(\\n            schainId,\\n            Context({\\n                isDebt: true,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).PRE_RESPONSE_DELTA(),\\n                dkgFunction: DkgFunction.PreResponse\\n        }))\\n        correctGroup(schainId)\\n        onlyNodeOwner(fromNodeIndex)\\n    {\\n        SkaleDkgPreResponse.preResponse(\\n            schainId,\\n            fromNodeIndex,\\n            verificationVector,\\n            verificationVectorMultiplication,\\n            secretKeyContribution,\\n            contractManager,\\n            complaints,\\n            hashedData\\n        );\\n    }\\n\\n    function complaint(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex)\\n        external\\n        override\\n        refundGasByValidatorToSchain(\\n            schainHash,\\n            Context({\\n                isDebt: true,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).COMPLAINT_DELTA(),\\n                dkgFunction: DkgFunction.Complaint\\n        }))\\n        correctGroupWithoutRevert(schainHash)\\n        correctNode(schainHash, fromNodeIndex)\\n        correctNodeWithoutRevert(schainHash, toNodeIndex)\\n        onlyNodeOwner(fromNodeIndex)\\n    {\\n        SkaleDkgComplaint.complaint(\\n            schainHash,\\n            fromNodeIndex,\\n            toNodeIndex,\\n            contractManager,\\n            channels,\\n            complaints,\\n            startAlrightTimestamp\\n        );\\n    }\\n\\n    function response(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint secretNumber,\\n        ISkaleDKG.G2Point memory multipliedShare\\n    )\\n        external\\n        override\\n        refundGasByValidatorToSchain(\\n            schainHash,\\n            Context({isDebt: true,\\n                delta: ConstantsHolder(contractManager.getConstantsHolder()).RESPONSE_DELTA(),\\n                dkgFunction: DkgFunction.Response\\n        }))\\n        correctGroup(schainHash)\\n        onlyNodeOwner(fromNodeIndex)\\n    {\\n        SkaleDkgResponse.response(\\n            schainHash,\\n            fromNodeIndex,\\n            secretNumber,\\n            multipliedShare,\\n            contractManager,\\n            channels,\\n            complaints\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows Schains and NodeRotation contracts to open a channel.\\n     * \\n     * Emits a {ChannelOpened} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Channel is not already created.\\n     */\\n    function openChannel(bytes32 schainHash) external override allowTwo(\\\"Schains\\\",\\\"NodeRotation\\\") {\\n        _openChannel(schainHash);\\n    }\\n\\n    /**\\n     * @dev Allows SchainsInternal contract to delete a channel.\\n     *\\n     * Requirements:\\n     *\\n     * - Channel must exist.\\n     */\\n    function deleteChannel(bytes32 schainHash) external override allow(\\\"SchainsInternal\\\") {\\n        delete channels[schainHash];\\n        delete dkgProcess[schainHash];\\n        delete complaints[schainHash];\\n        IKeyStorage(contractManager.getContract(\\\"KeyStorage\\\")).deleteKey(schainHash);\\n    }\\n\\n    function setStartAlrightTimestamp(bytes32 schainHash) external override allow(\\\"SkaleDKG\\\") {\\n        startAlrightTimestamp[schainHash] = block.timestamp;\\n    }\\n\\n    function setBadNode(bytes32 schainHash, uint nodeIndex) external override allow(\\\"SkaleDKG\\\") {\\n        _badNodes[schainHash] = nodeIndex;\\n    }\\n\\n    function finalizeSlashing(bytes32 schainHash, uint badNode) external override allow(\\\"SkaleDKG\\\") {\\n        INodeRotation nodeRotation = INodeRotation(contractManager.getContract(\\\"NodeRotation\\\"));\\n        ISchainsInternal schainsInternal = ISchainsInternal(\\n            contractManager.getContract(\\\"SchainsInternal\\\")\\n        );\\n        emit BadGuy(badNode);\\n        emit FailedDKG(schainHash);\\n\\n        schainsInternal.makeSchainNodesInvisible(schainHash);\\n        if (schainsInternal.isAnyFreeNode(schainHash)) {\\n            uint newNode = nodeRotation.rotateNode(\\n                badNode,\\n                schainHash,\\n                false,\\n                true\\n            );\\n            emit NewGuy(newNode);\\n        } else {\\n            _openChannel(schainHash);\\n            schainsInternal.removeNodeFromSchain(\\n                badNode,\\n                schainHash\\n            );\\n            channels[schainHash].active = false;\\n        }\\n        schainsInternal.makeSchainNodesVisible(schainHash);\\n        IPunisher(contractManager.getPunisher()).slash(\\n            INodes(contractManager.getContract(\\\"Nodes\\\")).getValidatorId(badNode),\\n            ISlashingTable(contractManager.getContract(\\\"SlashingTable\\\")).getPenalty(\\\"FailedDKG\\\")\\n        );\\n    }\\n\\n    function getChannelStartedTime(bytes32 schainHash) external view override returns (uint) {\\n        return channels[schainHash].startedBlockTimestamp;\\n    }\\n\\n    function getChannelStartedBlock(bytes32 schainHash) external view override returns (uint) {\\n        return channels[schainHash].startedBlock;\\n    }\\n\\n    function getNumberOfBroadcasted(bytes32 schainHash) external view override returns (uint) {\\n        return dkgProcess[schainHash].numberOfBroadcasted;\\n    }\\n\\n    function getNumberOfCompleted(bytes32 schainHash) external view override returns (uint) {\\n        return dkgProcess[schainHash].numberOfCompleted;\\n    }\\n\\n    function getTimeOfLastSuccessfulDKG(bytes32 schainHash) external view override returns (uint) {\\n        return lastSuccessfulDKG[schainHash];\\n    }\\n\\n    function getComplaintData(bytes32 schainHash) external view override returns (uint, uint) {\\n        return (complaints[schainHash].fromNodeToComplaint, complaints[schainHash].nodeToComplaint);\\n    }\\n\\n    function getComplaintStartedTime(bytes32 schainHash) external view override returns (uint) {\\n        return complaints[schainHash].startComplaintBlockTimestamp;\\n    }\\n\\n    function getAlrightStartedTime(bytes32 schainHash) external view override returns (uint) {\\n        return startAlrightTimestamp[schainHash];\\n    }\\n\\n    /**\\n     * @dev Checks whether channel is opened.\\n     */\\n    function isChannelOpened(bytes32 schainHash) external view override returns (bool) {\\n        return channels[schainHash].active;\\n    }\\n\\n    function isLastDKGSuccessful(bytes32 schainHash) external view override returns (bool) {\\n        return channels[schainHash].startedBlockTimestamp <= lastSuccessfulDKG[schainHash];\\n    }\\n\\n    /**\\n     * @dev Checks whether broadcast is possible.\\n     */\\n    function isBroadcastPossible(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (uint index, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return channels[schainHash].active &&\\n            check &&\\n            _isNodeOwnedByMessageSender(nodeIndex, msg.sender) &&\\n            channels[schainHash].startedBlockTimestamp + _getComplaintTimeLimit() > block.timestamp &&\\n            !dkgProcess[schainHash].broadcasted[index];\\n    }\\n\\n    /**\\n     * @dev Checks whether complaint is possible.\\n     */\\n    function isComplaintPossible(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex\\n    )\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        (uint indexFrom, bool checkFrom) = checkAndReturnIndexInGroup(schainHash, fromNodeIndex, false);\\n        (uint indexTo, bool checkTo) = checkAndReturnIndexInGroup(schainHash, toNodeIndex, false);\\n        if (!checkFrom || !checkTo)\\n            return false;\\n        bool complaintSending = (\\n                complaints[schainHash].nodeToComplaint == type(uint).max &&\\n                dkgProcess[schainHash].broadcasted[indexTo] &&\\n                !dkgProcess[schainHash].completed[indexFrom]\\n            ) ||\\n            (\\n                dkgProcess[schainHash].broadcasted[indexTo] &&\\n                complaints[schainHash].startComplaintBlockTimestamp + _getComplaintTimeLimit() <= block.timestamp &&\\n                complaints[schainHash].nodeToComplaint == toNodeIndex\\n            ) ||\\n            (\\n                !dkgProcess[schainHash].broadcasted[indexTo] &&\\n                complaints[schainHash].nodeToComplaint == type(uint).max &&\\n                channels[schainHash].startedBlockTimestamp + _getComplaintTimeLimit() <= block.timestamp\\n            ) ||\\n            (\\n                complaints[schainHash].nodeToComplaint == type(uint).max &&\\n                isEveryoneBroadcasted(schainHash) &&\\n                dkgProcess[schainHash].completed[indexFrom] &&\\n                !dkgProcess[schainHash].completed[indexTo] &&\\n                startAlrightTimestamp[schainHash] + _getComplaintTimeLimit() <= block.timestamp\\n            );\\n        return channels[schainHash].active &&\\n            dkgProcess[schainHash].broadcasted[indexFrom] &&\\n            _isNodeOwnedByMessageSender(fromNodeIndex, msg.sender) &&\\n            complaintSending;\\n    }\\n\\n    /**\\n     * @dev Checks whether sending Alright response is possible.\\n     */\\n    function isAlrightPossible(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (uint index, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return channels[schainHash].active &&\\n            check &&\\n            _isNodeOwnedByMessageSender(nodeIndex, msg.sender) &&\\n            channels[schainHash].n == dkgProcess[schainHash].numberOfBroadcasted &&\\n            (complaints[schainHash].fromNodeToComplaint != nodeIndex ||\\n            (nodeIndex == 0 && complaints[schainHash].startComplaintBlockTimestamp == 0)) &&\\n            startAlrightTimestamp[schainHash] + _getComplaintTimeLimit() > block.timestamp &&\\n            !dkgProcess[schainHash].completed[index];\\n    }\\n\\n    /**\\n     * @dev Checks whether sending a pre-response is possible.\\n     */\\n    function isPreResponsePossible(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return channels[schainHash].active &&\\n            check &&\\n            _isNodeOwnedByMessageSender(nodeIndex, msg.sender) &&\\n            complaints[schainHash].nodeToComplaint == nodeIndex &&\\n            complaints[schainHash].startComplaintBlockTimestamp + _getComplaintTimeLimit() > block.timestamp &&\\n            !complaints[schainHash].isResponse;\\n    }\\n\\n    /**\\n     * @dev Checks whether sending a response is possible.\\n     */\\n    function isResponsePossible(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return channels[schainHash].active &&\\n            check &&\\n            _isNodeOwnedByMessageSender(nodeIndex, msg.sender) &&\\n            complaints[schainHash].nodeToComplaint == nodeIndex &&\\n            complaints[schainHash].startComplaintBlockTimestamp + _getComplaintTimeLimit() > block.timestamp &&\\n            complaints[schainHash].isResponse;\\n    }\\n\\n    function isNodeBroadcasted(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (uint index, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return check && dkgProcess[schainHash].broadcasted[index];\\n    }\\n\\n     /**\\n     * @dev Checks whether all data has been received by node.\\n     */\\n    function isAllDataReceived(bytes32 schainHash, uint nodeIndex) external view override returns (bool) {\\n        (uint index, bool check) = checkAndReturnIndexInGroup(schainHash, nodeIndex, false);\\n        return check && dkgProcess[schainHash].completed[index];\\n    }\\n\\n    function hashData(\\n        KeyShare[] memory secretKeyContribution,\\n        ISkaleDKG.G2Point[] memory verificationVector\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        bytes memory data;\\n        for (uint i = 0; i < secretKeyContribution.length; i++) {\\n            data = abi.encodePacked(data, secretKeyContribution[i].publicKey, secretKeyContribution[i].share);\\n        }\\n        for (uint i = 0; i < verificationVector.length; i++) {\\n            data = abi.encodePacked(\\n                data,\\n                verificationVector[i].x.a,\\n                verificationVector[i].x.b,\\n                verificationVector[i].y.a,\\n                verificationVector[i].y.b\\n            );\\n        }\\n        return keccak256(data);\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n    }\\n\\n    function checkAndReturnIndexInGroup(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        bool revertCheck\\n    )\\n        public\\n        view\\n        override\\n        returns (uint, bool)\\n    {\\n        uint index = ISchainsInternal(contractManager.getContract(\\\"SchainsInternal\\\"))\\n            .getNodeIndexInGroup(schainHash, nodeIndex);\\n        if (index >= channels[schainHash].n && revertCheck) {\\n            revert(\\\"Node is not in this group\\\");\\n        }\\n        return (index, index < channels[schainHash].n);\\n    }\\n\\n    function isEveryoneBroadcasted(bytes32 schainHash) public view override returns (bool) {\\n        return channels[schainHash].n == dkgProcess[schainHash].numberOfBroadcasted;\\n    }\\n\\n    function _refundGasBySchain(bytes32 schainHash, uint gasTotal, Context memory context) private {\\n        IWallets wallets = IWallets(payable(contractManager.getContract(\\\"Wallets\\\")));\\n        bool isLastNode = channels[schainHash].n == dkgProcess[schainHash].numberOfCompleted;\\n        if (context.dkgFunction == DkgFunction.Alright && isLastNode) {\\n            wallets.refundGasBySchain(\\n                schainHash, payable(msg.sender), gasTotal - gasleft() + context.delta - 74800, context.isDebt\\n            );\\n        } else if (context.dkgFunction == DkgFunction.Complaint && gasTotal - gasleft() > 14e5) {\\n            wallets.refundGasBySchain(\\n                schainHash, payable(msg.sender), gasTotal - gasleft() + context.delta - 341979, context.isDebt\\n            );\\n        } else if (context.dkgFunction == DkgFunction.Complaint && gasTotal - gasleft() > 7e5) {\\n            wallets.refundGasBySchain(\\n                schainHash, payable(msg.sender), gasTotal - gasleft() + context.delta - 152214, context.isDebt\\n            );\\n        } else if (context.dkgFunction == DkgFunction.Response){\\n            wallets.refundGasBySchain(\\n                schainHash, payable(msg.sender), gasTotal - gasleft() - context.delta, context.isDebt\\n            );\\n        } else {\\n            wallets.refundGasBySchain(\\n                schainHash, payable(msg.sender), gasTotal - gasleft() + context.delta, context.isDebt\\n            );\\n        }\\n    }\\n\\n    function _refundGasByValidatorToSchain(bytes32 schainHash) private {\\n        uint validatorId = INodes(contractManager.getContract(\\\"Nodes\\\"))\\n         .getValidatorId(_badNodes[schainHash]);\\n         IWallets(payable(contractManager.getContract(\\\"Wallets\\\")))\\n         .refundGasByValidatorToSchain(validatorId, schainHash);\\n        delete _badNodes[schainHash];\\n    }\\n\\n    function _openChannel(bytes32 schainHash) private {\\n        ISchainsInternal schainsInternal = ISchainsInternal(\\n            contractManager.getContract(\\\"SchainsInternal\\\")\\n        );\\n\\n        uint len = schainsInternal.getNumberOfNodesInGroup(schainHash);\\n        channels[schainHash].active = true;\\n        channels[schainHash].n = len;\\n        delete dkgProcess[schainHash].completed;\\n        delete dkgProcess[schainHash].broadcasted;\\n        dkgProcess[schainHash].broadcasted = new bool[](len);\\n        dkgProcess[schainHash].completed = new bool[](len);\\n        complaints[schainHash].fromNodeToComplaint = type(uint).max;\\n        complaints[schainHash].nodeToComplaint = type(uint).max;\\n        delete complaints[schainHash].startComplaintBlockTimestamp;\\n        delete dkgProcess[schainHash].numberOfBroadcasted;\\n        delete dkgProcess[schainHash].numberOfCompleted;\\n        channels[schainHash].startedBlockTimestamp = block.timestamp;\\n        channels[schainHash].startedBlock = block.number;\\n        IKeyStorage(contractManager.getContract(\\\"KeyStorage\\\")).initPublicKeyInProgress(schainHash);\\n\\n        emit ChannelOpened(schainHash);\\n    }\\n\\n    function _isNodeOwnedByMessageSender(uint nodeIndex, address from) private view returns (bool) {\\n        return INodes(contractManager.getContract(\\\"Nodes\\\")).isNodeExist(from, nodeIndex);\\n    }\\n\\n    function _checkMsgSenderIsNodeOwner(uint nodeIndex) private view {\\n        require(_isNodeOwnedByMessageSender(nodeIndex, msg.sender), \\\"Node does not exist for message sender\\\");\\n    }\\n\\n    function _getComplaintTimeLimit() private view returns (uint) {\\n        return ConstantsHolder(contractManager.getConstantsHolder()).complaintTimeLimit();\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISkaleDKG.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISkaleDKG {\\n\\n    struct Fp2Point {\\n        uint a;\\n        uint b;\\n    }\\n\\n    struct G2Point {\\n        Fp2Point x;\\n        Fp2Point y;\\n    }\\n\\n    struct Channel {\\n        bool active;\\n        uint n;\\n        uint startedBlockTimestamp;\\n        uint startedBlock;\\n    }\\n\\n    struct ProcessDKG {\\n        uint numberOfBroadcasted;\\n        uint numberOfCompleted;\\n        bool[] broadcasted;\\n        bool[] completed;\\n    }\\n\\n    struct ComplaintData {\\n        uint nodeToComplaint;\\n        uint fromNodeToComplaint;\\n        uint startComplaintBlockTimestamp;\\n        bool isResponse;\\n        bytes32 keyShare;\\n        G2Point sumOfVerVec;\\n    }\\n\\n    struct KeyShare {\\n        bytes32[2] publicKey;\\n        bytes32 share;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a channel is opened.\\n     */\\n    event ChannelOpened(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a channel is closed.\\n     */\\n    event ChannelClosed(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a node broadcasts key share.\\n     */\\n    event BroadcastAndKeyShare(\\n        bytes32 indexed schainHash,\\n        uint indexed fromNode,\\n        G2Point[] verificationVector,\\n        KeyShare[] secretKeyContribution\\n    );\\n\\n    /**\\n     * @dev Emitted when all group data is received by node.\\n     */\\n    event AllDataReceived(bytes32 indexed schainHash, uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG is successful.\\n     */\\n    event SuccessfulDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a complaint against a node is verified.\\n     */\\n    event BadGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG failed.\\n     */\\n    event FailedDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a new node is rotated in.\\n     */\\n    event NewGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when an incorrect complaint is sent.\\n     */\\n    event ComplaintError(string error);\\n\\n    /**\\n     * @dev Emitted when a complaint is sent.\\n     */\\n    event ComplaintSent(bytes32 indexed schainHash, uint indexed fromNodeIndex, uint indexed toNodeIndex);\\n    \\n    function alright(bytes32 schainHash, uint fromNodeIndex) external;\\n    function broadcast(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        G2Point[] memory verificationVector,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaintBadData(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function preResponse(\\n        bytes32 schainId,\\n        uint fromNodeIndex,\\n        G2Point[] memory verificationVector,\\n        G2Point[] memory verificationVectorMultiplication,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaint(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function response(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint secretNumber,\\n        G2Point memory multipliedShare\\n    )\\n        external;\\n    function openChannel(bytes32 schainHash) external;\\n    function deleteChannel(bytes32 schainHash) external;\\n    function setStartAlrightTimestamp(bytes32 schainHash) external;\\n    function setBadNode(bytes32 schainHash, uint nodeIndex) external;\\n    function finalizeSlashing(bytes32 schainHash, uint badNode) external;\\n    function getChannelStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getChannelStartedBlock(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfBroadcasted(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfCompleted(bytes32 schainHash) external view returns (uint);\\n    function getTimeOfLastSuccessfulDKG(bytes32 schainHash) external view returns (uint);\\n    function getComplaintData(bytes32 schainHash) external view returns (uint, uint);\\n    function getComplaintStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getAlrightStartedTime(bytes32 schainHash) external view returns (uint);\\n    function isChannelOpened(bytes32 schainHash) external view returns (bool);\\n    function isLastDKGSuccessful(bytes32 groupIndex) external view returns (bool);\\n    function isBroadcastPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isComplaintPossible(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex\\n    )\\n        external\\n        view\\n        returns (bool);\\n    function isAlrightPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isPreResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isNodeBroadcasted(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isAllDataReceived(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function checkAndReturnIndexInGroup(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        bool revertCheck\\n    )\\n        external\\n        view\\n        returns (uint, bool);\\n    function isEveryoneBroadcasted(bytes32 schainHash) external view returns (bool);\\n    function hashData(\\n        KeyShare[] memory secretKeyContribution,\\n        G2Point[] memory verificationVector\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISlashingTable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISlashingTable.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISlashingTable {\\n    /**\\n     * @dev Emitted when penalty was added\\n     */\\n    event PenaltyAdded(uint indexed offenseHash, string offense, uint penalty);\\n    \\n    function setPenalty(string calldata offense, uint penalty) external;\\n    function getPenalty(string calldata offense) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISchains.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISchains.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISchains {\\n\\n    struct SchainOption {\\n        string name;\\n        bytes value;\\n    }\\n    \\n    /**\\n     * @dev Emitted when an schain is created.\\n     */\\n    event SchainCreated(\\n        string name,\\n        address owner,\\n        uint partOfNode,\\n        uint lifetime,\\n        uint numberOfNodes,\\n        uint deposit,\\n        uint16 nonce,\\n        bytes32 schainHash\\n    );\\n\\n    /**\\n     * @dev Emitted when an schain is deleted.\\n     */\\n    event SchainDeleted(\\n        address owner,\\n        string name,\\n        bytes32 indexed schainHash\\n    );\\n\\n    /**\\n     * @dev Emitted when a node in an schain is rotated.\\n     */\\n    event NodeRotated(\\n        bytes32 schainHash,\\n        uint oldNode,\\n        uint newNode\\n    );\\n\\n    /**\\n     * @dev Emitted when a node is added to an schain.\\n     */\\n    event NodeAdded(\\n        bytes32 schainHash,\\n        uint newNode\\n    );\\n\\n    /**\\n     * @dev Emitted when a group of nodes is created for an schain.\\n     */\\n    event SchainNodes(\\n        string name,\\n        bytes32 schainHash,\\n        uint[] nodesInGroup\\n    );\\n\\n    function addSchain(address from, uint deposit, bytes calldata data) external;\\n    function addSchainByFoundation(\\n        uint lifetime,\\n        uint8 typeOfSchain,\\n        uint16 nonce,\\n        string calldata name,\\n        address schainOwner,\\n        address schainOriginator,\\n        SchainOption[] calldata options\\n    )\\n        external\\n        payable;\\n    function deleteSchain(address from, string calldata name) external;\\n    function deleteSchainByRoot(string calldata name) external;\\n    function restartSchainCreation(string calldata name) external;\\n    function verifySchainSignature(\\n        uint256 signA,\\n        uint256 signB,\\n        bytes32 hash,\\n        uint256 counter,\\n        uint256 hashA,\\n        uint256 hashB,\\n        string calldata schainName\\n    )\\n        external\\n        view\\n        returns (bool);\\n    function getSchainPrice(uint typeOfSchain, uint lifetime) external view returns (uint);\\n    function getOption(bytes32 schainHash, string calldata optionName) external view returns (bytes memory);\\n    function getOptions(bytes32 schainHash) external view returns (SchainOption[] memory);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISchainsInternal - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISchainsInternal {\\n    struct Schain {\\n        string name;\\n        address owner;\\n        uint indexInOwnerList;\\n        uint8 partOfNode;\\n        uint lifetime;\\n        uint startDate;\\n        uint startBlock;\\n        uint deposit;\\n        uint64 index;\\n        uint generation;\\n        address originator;\\n    }\\n\\n    struct SchainType {\\n        uint8 partOfNode;\\n        uint numberOfNodes;\\n    }\\n\\n    /**\\n     * @dev Emitted when schain type added.\\n     */\\n    event SchainTypeAdded(uint indexed schainType, uint partOfNode, uint numberOfNodes);\\n\\n    /**\\n     * @dev Emitted when schain type removed.\\n     */\\n    event SchainTypeRemoved(uint indexed schainType);\\n\\n    function initializeSchain(\\n        string calldata name,\\n        address from,\\n        address originator,\\n        uint lifetime,\\n        uint deposit) external;\\n    function createGroupForSchain(\\n        bytes32 schainHash,\\n        uint numberOfNodes,\\n        uint8 partOfNode\\n    )\\n        external\\n        returns (uint[] memory);\\n    function changeLifetime(bytes32 schainHash, uint lifetime, uint deposit) external;\\n    function removeSchain(bytes32 schainHash, address from) external;\\n    function removeNodeFromSchain(uint nodeIndex, bytes32 schainHash) external;\\n    function deleteGroup(bytes32 schainHash) external;\\n    function setException(bytes32 schainHash, uint nodeIndex) external;\\n    function setNodeInGroup(bytes32 schainHash, uint nodeIndex) external;\\n    function removeHolesForSchain(bytes32 schainHash) external;\\n    function addSchainType(uint8 partOfNode, uint numberOfNodes) external;\\n    function removeSchainType(uint typeOfSchain) external;\\n    function setNumberOfSchainTypes(uint newNumberOfSchainTypes) external;\\n    function removeNodeFromAllExceptionSchains(uint nodeIndex) external;\\n    function removeAllNodesFromSchainExceptions(bytes32 schainHash) external;\\n    function makeSchainNodesInvisible(bytes32 schainHash) external;\\n    function makeSchainNodesVisible(bytes32 schainHash) external;\\n    function newGeneration() external;\\n    function addSchainForNode(uint nodeIndex, bytes32 schainHash) external;\\n    function removeSchainForNode(uint nodeIndex, uint schainIndex) external;\\n    function removeNodeFromExceptions(bytes32 schainHash, uint nodeIndex) external;\\n    function isSchainActive(bytes32 schainHash) external view returns (bool);\\n    function schainsAtSystem(uint index) external view returns (bytes32);\\n    function numberOfSchains() external view returns (uint64);\\n    function getSchains() external view returns (bytes32[] memory);\\n    function getSchainsPartOfNode(bytes32 schainHash) external view returns (uint8);\\n    function getSchainListSize(address from) external view returns (uint);\\n    function getSchainHashesByAddress(address from) external view returns (bytes32[] memory);\\n    function getSchainIdsByAddress(address from) external view returns (bytes32[] memory);\\n    function getSchainHashesForNode(uint nodeIndex) external view returns (bytes32[] memory);\\n    function getSchainIdsForNode(uint nodeIndex) external view returns (bytes32[] memory);\\n    function getSchainOwner(bytes32 schainHash) external view returns (address);\\n    function getSchainOriginator(bytes32 schainHash) external view returns (address);\\n    function isSchainNameAvailable(string calldata name) external view returns (bool);\\n    function isTimeExpired(bytes32 schainHash) external view returns (bool);\\n    function isOwnerAddress(address from, bytes32 schainId) external view returns (bool);\\n    function getSchainName(bytes32 schainHash) external view returns (string memory);\\n    function getActiveSchain(uint nodeIndex) external view returns (bytes32);\\n    function getActiveSchains(uint nodeIndex) external view returns (bytes32[] memory activeSchains);\\n    function getNumberOfNodesInGroup(bytes32 schainHash) external view returns (uint);\\n    function getNodesInGroup(bytes32 schainHash) external view returns (uint[] memory);\\n    function isNodeAddressesInGroup(bytes32 schainId, address sender) external view returns (bool);\\n    function getNodeIndexInGroup(bytes32 schainHash, uint nodeId) external view returns (uint);\\n    function isAnyFreeNode(bytes32 schainHash) external view returns (bool);\\n    function checkException(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function checkHoleForSchain(bytes32 schainHash, uint indexOfNode) external view returns (bool);\\n    function checkSchainOnNode(uint nodeIndex, bytes32 schainHash) external view returns (bool);\\n    function getSchainType(uint typeOfSchain) external view returns(uint8, uint);\\n    function getGeneration(bytes32 schainHash) external view returns (uint);\\n    function isSchainExist(bytes32 schainHash) external view returns (bool);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/INodeRotation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    INodeRotation.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface INodeRotation {\\n    /**\\n     * nodeIndex - index of Node which is in process of rotation (left from schain)\\n     * newNodeIndex - index of Node which is rotated(added to schain)\\n     * freezeUntil - time till which Node should be turned on\\n     * rotationCounter - how many _rotations were on this schain\\n     */\\n    struct Rotation {\\n        uint nodeIndex;\\n        uint newNodeIndex;\\n        uint freezeUntil;\\n        uint rotationCounter;\\n    }\\n\\n    struct LeavingHistory {\\n        bytes32 schainHash;\\n        uint finishedRotation;\\n    }\\n\\n    function exitFromSchain(uint nodeIndex) external returns (bool, bool);\\n    function freezeSchains(uint nodeIndex) external;\\n    function removeRotation(bytes32 schainHash) external;\\n    function skipRotationDelay(bytes32 schainHash) external;\\n    function rotateNode(\\n        uint nodeIndex,\\n        bytes32 schainHash,\\n        bool shouldDelay,\\n        bool isBadNode\\n    )\\n        external\\n        returns (uint newNode);\\n    function selectNodeToGroup(bytes32 schainHash) external returns (uint nodeIndex);\\n    function getRotation(bytes32 schainHash) external view returns (Rotation memory);\\n    function getLeavingHistory(uint nodeIndex) external view returns (LeavingHistory[] memory);\\n    function isRotationInProgress(bytes32 schainHash) external view returns (bool);\\n    function isNewNodeFound(bytes32 schainHash) external view returns (bool);\\n    function getPreviousNode(bytes32 schainHash, uint256 nodeIndex) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IKeyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IKeyStorage.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./ISkaleDKG.sol\\\";\\n\\ninterface IKeyStorage {\\n\\n    struct KeyShare {\\n        bytes32[2] publicKey;\\n        bytes32 share;\\n    }\\n    \\n    function deleteKey(bytes32 schainHash) external;\\n    function initPublicKeyInProgress(bytes32 schainHash) external;\\n    function adding(bytes32 schainHash, ISkaleDKG.G2Point memory value) external;\\n    function finalizePublicKey(bytes32 schainHash) external;\\n    function getCommonPublicKey(bytes32 schainHash) external view returns (ISkaleDKG.G2Point memory);\\n    function getPreviousPublicKey(bytes32 schainHash) external view returns (ISkaleDKG.G2Point memory);\\n    function getAllPreviousPublicKeys(bytes32 schainHash) external view returns (ISkaleDKG.G2Point[] memory);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IWallets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IWallets - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IWallets {\\n    /**\\n     * @dev Emitted when the validator wallet was funded\\n     */\\n    event ValidatorWalletRecharged(address sponsor, uint amount, uint validatorId);\\n\\n    /**\\n     * @dev Emitted when the schain wallet was funded\\n     */\\n    event SchainWalletRecharged(address sponsor, uint amount, bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when the node received a refund from validator to its wallet\\n     */\\n    event NodeRefundedByValidator(address node, uint validatorId, uint amount);\\n\\n    /**\\n     * @dev Emitted when the node received a refund from schain to its wallet\\n     */\\n    event NodeRefundedBySchain(address node, bytes32 schainHash, uint amount);\\n\\n    /**\\n     * @dev Emitted when the validator withdrawn funds from validator wallet\\n     */\\n    event WithdrawFromValidatorWallet(uint indexed validatorId, uint amount);\\n\\n    /**\\n     * @dev Emitted when the schain owner withdrawn funds from schain wallet\\n     */\\n    event WithdrawFromSchainWallet(bytes32 indexed schainHash, uint amount);\\n\\n    receive() external payable;\\n    function refundGasByValidator(uint validatorId, address payable spender, uint spentGas) external;\\n    function refundGasByValidatorToSchain(uint validatorId, bytes32 schainHash) external;\\n    function refundGasBySchain(bytes32 schainId, address payable spender, uint spentGas, bool isDebt) external;\\n    function withdrawFundsFromSchainWallet(address payable schainOwner, bytes32 schainHash) external;\\n    function withdrawFundsFromValidatorWallet(uint amount) external;\\n    function rechargeValidatorWallet(uint validatorId) external payable;\\n    function rechargeSchainWallet(bytes32 schainId) external payable;\\n    function getSchainBalance(bytes32 schainHash) external view returns (uint);\\n    function getValidatorBalance(uint validatorId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/delegation/IPunisher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IPunisher.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IPunisher {\\n    /**\\n     * @dev Emitted upon slashing condition.\\n     */\\n    event Slash(\\n        uint validatorId,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted upon forgive condition.\\n     */\\n    event Forgive(\\n        address wallet,\\n        uint amount\\n    );\\n    \\n    function slash(uint validatorId, uint amount) external;\\n    function forgive(address holder, uint amount) external;\\n    function handleSlash(address holder, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/thirdparty/IECDH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IECDH.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IECDH {\\n    function publicKey(uint256 privKey) external pure returns (uint256 qx, uint256 qy);\\n    function deriveKey(\\n        uint256 privKey,\\n        uint256 pubX,\\n        uint256 pubY\\n    )\\n        external\\n        pure\\n        returns (uint256 qx, uint256 qy);\\n    function jAdd(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 z3);\\n    function jSub(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 z3);\\n    function jMul(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 z3);\\n    function jDiv(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 z3);\\n    function inverse(uint256 a) external pure returns (uint256 invA);\\n    function ecAdd(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 y2,\\n        uint256 z2\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3);\\n    function ecDouble(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3);\\n    function ecMul(\\n        uint256 d,\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    )\\n        external\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3);\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IPermissions.sol\\\";\\n\\nimport \\\"./thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\\\";\\n\\n\\n/**\\n * @title Permissions\\n * @dev Contract is connected module for Upgradeable approach, knows ContractManager\\n */\\ncontract Permissions is AccessControlUpgradeableLegacy, IPermissions {\\n    using AddressUpgradeable for address;\\n    \\n    IContractManager public contractManager;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is an Admin.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner or `contractName`.\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1` or `contractName2` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, or `contractName2`.\\n     */\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1`, `contractName2`, or `contractName3` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, `contractName2`, or \\n     * `contractName3`.\\n     */\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            contractManager.getContract(contractName3) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual override initializer {\\n        AccessControlUpgradeableLegacy.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeableLegacy skaleManager = AccessControlUpgradeableLegacy(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = IContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConstantsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ConstantsHolder.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title ConstantsHolder\\n * @dev Contract contains constants and common variables for the SKALE Network.\\n */\\ncontract ConstantsHolder is Permissions, IConstantsHolder {\\n\\n    // initial price for creating Node (100 SKL)\\n    uint public constant NODE_DEPOSIT = 100 * 1e18;\\n\\n    uint8 public constant TOTAL_SPACE_ON_NODE = 128;\\n\\n    // part of Node for Small Skale-chain (1/128 of Node)\\n    uint8 public constant SMALL_DIVISOR = 128;\\n\\n    // part of Node for Medium Skale-chain (1/32 of Node)\\n    uint8 public constant MEDIUM_DIVISOR = 32;\\n\\n    // part of Node for Large Skale-chain (full Node)\\n    uint8 public constant LARGE_DIVISOR = 1;\\n\\n    // part of Node for Medium Test Skale-chain (1/4 of Node)\\n    uint8 public constant MEDIUM_TEST_DIVISOR = 4;\\n\\n    // typically number of Nodes for Skale-chain (16 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\\n\\n    // number of Nodes for Test Skale-chain (2 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\\n\\n    // number of Nodes for Test Skale-chain (4 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;    \\n\\n    // number of seconds in one year\\n    uint32 public constant SECONDS_TO_YEAR = 31622400;\\n\\n    // initial number of monitors\\n    uint public constant NUMBER_OF_MONITORS = 24;\\n\\n    uint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\\n\\n    uint public constant ADJUSTMENT_SPEED = 1000;\\n\\n    uint public constant COOLDOWN_TIME = 60;\\n\\n    uint public constant MIN_PRICE = 10**6;\\n\\n    uint public constant MSR_REDUCING_COEFFICIENT = 2;\\n\\n    uint public constant DOWNTIME_THRESHOLD_PART = 30;\\n\\n    uint public constant BOUNTY_LOCKUP_MONTHS = 2;\\n\\n    uint public constant ALRIGHT_DELTA = 134161;\\n    uint public constant BROADCAST_DELTA = 177490;\\n    uint public constant COMPLAINT_BAD_DATA_DELTA = 80995;\\n    uint public constant PRE_RESPONSE_DELTA = 100061;\\n    uint public constant COMPLAINT_DELTA = 104611;\\n    uint public constant RESPONSE_DELTA = 49132;\\n\\n    // MSR - Minimum staking requirement\\n    uint public msr;\\n\\n    // Reward period - 30 days (each 30 days Node would be granted for bounty)\\n    uint32 public rewardPeriod;\\n\\n    // Allowable latency - 150000 ms by default\\n    uint32 public allowableLatency;\\n\\n    /**\\n     * Delta period - 1 hour (1 hour before Reward period became Monitors need\\n     * to send Verdicts and 1 hour after Reward period became Node need to come\\n     * and get Bounty)\\n     */\\n    uint32 public deltaPeriod;\\n\\n    /**\\n     * Check time - 2 minutes (every 2 minutes monitors should check metrics\\n     * from checked nodes)\\n     */\\n    uint public checkTime;\\n\\n    //Need to add minimal allowed parameters for verdicts\\n\\n    uint public launchTimestamp;\\n\\n    uint public rotationDelay;\\n\\n    uint public proofOfUseLockUpPeriodDays;\\n\\n    uint public proofOfUseDelegationPercentage;\\n\\n    uint public limitValidatorsPerDelegator;\\n\\n    uint256 public firstDelegationsMonth; // deprecated\\n\\n    // date when schains will be allowed for creation\\n    uint public schainCreationTimeStamp;\\n\\n    uint public minimalSchainLifetime;\\n\\n    uint public complaintTimeLimit;\\n\\n    bytes32 public constant CONSTANTS_HOLDER_MANAGER_ROLE = keccak256(\\\"CONSTANTS_HOLDER_MANAGER_ROLE\\\");\\n\\n    modifier onlyConstantsHolderManager() {\\n        require(hasRole(CONSTANTS_HOLDER_MANAGER_ROLE, msg.sender), \\\"CONSTANTS_HOLDER_MANAGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set new reward and delta periods\\n     * This function is only for tests.\\n     */\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external override onlyConstantsHolderManager {\\n        require(\\n            newRewardPeriod >= newDeltaPeriod && newRewardPeriod - newDeltaPeriod >= checkTime,\\n            \\\"Incorrect Periods\\\"\\n        );\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"RewardPeriod\\\")),\\n            uint(rewardPeriod),\\n            uint(newRewardPeriod)\\n        );\\n        rewardPeriod = newRewardPeriod;\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"DeltaPeriod\\\")),\\n            uint(deltaPeriod),\\n            uint(newDeltaPeriod)\\n        );\\n        deltaPeriod = newDeltaPeriod;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the new check time.\\n     * This function is only for tests.\\n     */\\n    function setCheckTime(uint newCheckTime) external override onlyConstantsHolderManager {\\n        require(rewardPeriod - deltaPeriod >= checkTime, \\\"Incorrect check time\\\");\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"CheckTime\\\")),\\n            uint(checkTime),\\n            uint(newCheckTime)\\n        );\\n        checkTime = newCheckTime;\\n    }    \\n\\n    /**\\n     * @dev Allows the Owner to set the allowable latency in milliseconds.\\n     * This function is only for testing purposes.\\n     */\\n    function setLatency(uint32 newAllowableLatency) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"AllowableLatency\\\")),\\n            uint(allowableLatency),\\n            uint(newAllowableLatency)\\n        );\\n        allowableLatency = newAllowableLatency;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the minimum stake requirement.\\n     */\\n    function setMSR(uint newMSR) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"MSR\\\")),\\n            uint(msr),\\n            uint(newMSR)\\n        );\\n        msr = newMSR;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the launch timestamp.\\n     */\\n    function setLaunchTimestamp(uint timestamp) external override onlyConstantsHolderManager {\\n        require(\\n            block.timestamp < launchTimestamp,\\n            \\\"Cannot set network launch timestamp because network is already launched\\\"\\n        );\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"LaunchTimestamp\\\")),\\n            uint(launchTimestamp),\\n            uint(timestamp)\\n        );\\n        launchTimestamp = timestamp;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the node rotation delay.\\n     */\\n    function setRotationDelay(uint newDelay) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"RotationDelay\\\")),\\n            uint(rotationDelay),\\n            uint(newDelay)\\n        );\\n        rotationDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use lockup period.\\n     */\\n    function setProofOfUseLockUpPeriod(uint periodDays) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ProofOfUseLockUpPeriodDays\\\")),\\n            uint(proofOfUseLockUpPeriodDays),\\n            uint(periodDays)\\n        );\\n        proofOfUseLockUpPeriodDays = periodDays;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use delegation percentage\\n     * requirement.\\n     */\\n    function setProofOfUseDelegationPercentage(uint percentage) external override onlyConstantsHolderManager {\\n        require(percentage <= 100, \\\"Percentage value is incorrect\\\");\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ProofOfUseDelegationPercentage\\\")),\\n            uint(proofOfUseDelegationPercentage),\\n            uint(percentage)\\n        );\\n        proofOfUseDelegationPercentage = percentage;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the maximum number of validators that a\\n     * single delegator can delegate to.\\n     */\\n    function setLimitValidatorsPerDelegator(uint newLimit) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"LimitValidatorsPerDelegator\\\")),\\n            uint(limitValidatorsPerDelegator),\\n            uint(newLimit)\\n        );\\n        limitValidatorsPerDelegator = newLimit;\\n    }\\n\\n    function setSchainCreationTimeStamp(uint timestamp) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"SchainCreationTimeStamp\\\")),\\n            uint(schainCreationTimeStamp),\\n            uint(timestamp)\\n        );\\n        schainCreationTimeStamp = timestamp;\\n    }\\n\\n    function setMinimalSchainLifetime(uint lifetime) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"MinimalSchainLifetime\\\")),\\n            uint(minimalSchainLifetime),\\n            uint(lifetime)\\n        );\\n        minimalSchainLifetime = lifetime;\\n    }\\n\\n    function setComplaintTimeLimit(uint timeLimit) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ComplaintTimeLimit\\\")),\\n            uint(complaintTimeLimit),\\n            uint(timeLimit)\\n        );\\n        complaintTimeLimit = timeLimit;\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        msr = 0;\\n        rewardPeriod = 2592000;\\n        allowableLatency = 150000;\\n        deltaPeriod = 3600;\\n        checkTime = 300;\\n        launchTimestamp = type(uint).max;\\n        rotationDelay = 12 hours;\\n        proofOfUseLockUpPeriodDays = 90;\\n        proofOfUseDelegationPercentage = 50;\\n        limitValidatorsPerDelegator = 20;\\n        firstDelegationsMonth = 0;\\n        complaintTimeLimit = 1800;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FieldOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n// cSpell:words twistb\\n\\n/*\\n    FieldOperations.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\n\\nimport \\\"./Precompiled.sol\\\";\\n\\n\\nlibrary Fp2Operations {\\n\\n    uint constant public P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    function inverseFp2(ISkaleDKG.Fp2Point memory value) internal view returns (ISkaleDKG.Fp2Point memory result) {\\n        uint p = P;\\n        uint t0 = mulmod(value.a, value.a, p);\\n        uint t1 = mulmod(value.b, value.b, p);\\n        uint t2 = mulmod(p - 1, t1, p);\\n        if (t0 >= t2) {\\n            t2 = addmod(t0, p - t2, p);\\n        } else {\\n            t2 = (p - addmod(t2, p - t0, p)) % p;\\n        }\\n        uint t3 = Precompiled.bigModExp(t2, p - 2, p);\\n        result.a = mulmod(value.a, t3, p);\\n        result.b = (p - mulmod(value.b, t3, p)) % p;\\n    }\\n\\n    function addFp2(ISkaleDKG.Fp2Point memory value1, ISkaleDKG.Fp2Point memory value2)\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory)\\n    {\\n        return ISkaleDKG.Fp2Point({ a: addmod(value1.a, value2.a, P), b: addmod(value1.b, value2.b, P) });\\n    }\\n\\n    function scalarMulFp2(ISkaleDKG.Fp2Point memory value, uint scalar)\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory)\\n    {\\n        return ISkaleDKG.Fp2Point({ a: mulmod(scalar, value.a, P), b: mulmod(scalar, value.b, P) });\\n    }\\n\\n    function minusFp2(ISkaleDKG.Fp2Point memory diminished, ISkaleDKG.Fp2Point memory subtracted) internal pure\\n        returns (ISkaleDKG.Fp2Point memory difference)\\n    {\\n        uint p = P;\\n        if (diminished.a >= subtracted.a) {\\n            difference.a = addmod(diminished.a, p - subtracted.a, p);\\n        } else {\\n            difference.a = (p - addmod(subtracted.a, p - diminished.a, p)) % p;\\n        }\\n        if (diminished.b >= subtracted.b) {\\n            difference.b = addmod(diminished.b, p - subtracted.b, p);\\n        } else {\\n            difference.b = (p - addmod(subtracted.b, p - diminished.b, p)) % p;\\n        }\\n    }\\n\\n    function mulFp2(\\n        ISkaleDKG.Fp2Point memory value1,\\n        ISkaleDKG.Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory result)\\n    {\\n        uint p = P;\\n        ISkaleDKG.Fp2Point memory point = ISkaleDKG.Fp2Point({\\n            a: mulmod(value1.a, value2.a, p),\\n            b: mulmod(value1.b, value2.b, p)});\\n        result.a = addmod(\\n            point.a,\\n            mulmod(p - 1, point.b, p),\\n            p);\\n        result.b = addmod(\\n            mulmod(\\n                addmod(value1.a, value1.b, p),\\n                addmod(value2.a, value2.b, p),\\n                p),\\n            p - addmod(point.a, point.b, p),\\n            p);\\n    }\\n\\n    function squaredFp2(ISkaleDKG.Fp2Point memory value) internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        uint p = P;\\n        uint ab = mulmod(value.a, value.b, p);\\n        uint multiplication = mulmod(addmod(value.a, value.b, p), addmod(value.a, mulmod(p - 1, value.b, p), p), p);\\n        return ISkaleDKG.Fp2Point({ a: multiplication, b: addmod(ab, ab, p) });\\n    }\\n\\n    function isEqual(\\n        ISkaleDKG.Fp2Point memory value1,\\n        ISkaleDKG.Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.a == value2.a && value1.b == value2.b;\\n    }\\n}\\n\\nlibrary G1Operations {\\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n\\n    function getG1Generator() internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.Fp2Point({\\n            a: 1,\\n            b: 2\\n        });\\n    }\\n\\n    function isG1Point(uint x, uint y) internal pure returns (bool) {\\n        uint p = Fp2Operations.P;\\n        return mulmod(y, y, p) == \\n            addmod(mulmod(mulmod(x, x, p), x, p), 3, p);\\n    }\\n\\n    function isG1(ISkaleDKG.Fp2Point memory point) internal pure returns (bool) {\\n        return isG1Point(point.a, point.b);\\n    }\\n\\n    function checkRange(ISkaleDKG.Fp2Point memory point) internal pure returns (bool) {\\n        return point.a < Fp2Operations.P && point.b < Fp2Operations.P;\\n    }\\n\\n    function negate(uint y) internal pure returns (uint) {\\n        return (Fp2Operations.P - y) % Fp2Operations.P;\\n    }\\n\\n}\\n\\n\\nlibrary G2Operations {\\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n\\n    function doubleG2(ISkaleDKG.G2Point memory value)\\n        internal\\n        view\\n        returns (ISkaleDKG.G2Point memory result)\\n    {\\n        if (isG2Zero(value)) {\\n            return value;\\n        } else {\\n            ISkaleDKG.Fp2Point memory s =\\n                value.x.squaredFp2().scalarMulFp2(3).mulFp2(value.y.scalarMulFp2(2).inverseFp2());\\n            result.x = s.squaredFp2().minusFp2(value.x.addFp2(value.x));\\n            result.y = value.y.addFp2(s.mulFp2(result.x.minusFp2(value.x)));\\n            uint p = Fp2Operations.P;\\n            result.y.a = (p - result.y.a) % p;\\n            result.y.b = (p - result.y.b) % p;\\n        }\\n    }\\n\\n    function addG2(\\n        ISkaleDKG.G2Point memory value1,\\n        ISkaleDKG.G2Point memory value2\\n    )\\n        internal\\n        view\\n        returns (ISkaleDKG.G2Point memory sum)\\n    {\\n        if (isG2Zero(value1)) {\\n            return value2;\\n        }\\n        if (isG2Zero(value2)) {\\n            return value1;\\n        }\\n        if (isEqual(value1, value2)) {\\n            return doubleG2(value1);\\n        }\\n        if (value1.x.isEqual(value2.x)) {\\n            sum.x.a = 0;\\n            sum.x.b = 0;\\n            sum.y.a = 1;\\n            sum.y.b = 0;\\n            return sum;\\n        }\\n\\n        ISkaleDKG.Fp2Point memory s = value2.y.minusFp2(value1.y).mulFp2(value2.x.minusFp2(value1.x).inverseFp2());\\n        sum.x = s.squaredFp2().minusFp2(value1.x.addFp2(value2.x));\\n        sum.y = value1.y.addFp2(s.mulFp2(sum.x.minusFp2(value1.x)));\\n        uint p = Fp2Operations.P;\\n        sum.y.a = (p - sum.y.a) % p;\\n        sum.y.b = (p - sum.y.b) % p;\\n    }\\n\\n    function getTWISTB() internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.Fp2Point({\\n            a: 19485874751759354771024239261021720505790618469301721065564631296452457478373,\\n            b: 266929791119991161246907387137283842545076965332900288569378510910307636690\\n        });\\n    }\\n\\n    function getG2Generator() internal pure returns (ISkaleDKG.G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.G2Point({\\n            x: ISkaleDKG.Fp2Point({\\n                a: 10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n                b: 11559732032986387107991004021392285783925812861821192530917403151452391805634\\n            }),\\n            y: ISkaleDKG.Fp2Point({\\n                a: 8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n                b: 4082367875863433681332203403145435568316851327593401208105741076214120093531\\n            })\\n        });\\n    }\\n\\n    function getG2Zero() internal pure returns (ISkaleDKG.G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.G2Point({\\n            x: ISkaleDKG.Fp2Point({\\n                a: 0,\\n                b: 0\\n            }),\\n            y: ISkaleDKG.Fp2Point({\\n                a: 1,\\n                b: 0\\n            })\\n        });\\n    }\\n\\n    function isG2Point(ISkaleDKG.Fp2Point memory x, ISkaleDKG.Fp2Point memory y) internal pure returns (bool) {\\n        if (isG2ZeroPoint(x, y)) {\\n            return true;\\n        }\\n        ISkaleDKG.Fp2Point memory squaredY = y.squaredFp2();\\n        ISkaleDKG.Fp2Point memory res = squaredY.minusFp2(\\n                x.squaredFp2().mulFp2(x)\\n            ).minusFp2(getTWISTB());\\n        return res.a == 0 && res.b == 0;\\n    }\\n\\n    function isG2(ISkaleDKG.G2Point memory value) internal pure returns (bool) {\\n        return isG2Point(value.x, value.y);\\n    }\\n\\n    function isG2ZeroPoint(\\n        ISkaleDKG.Fp2Point memory x,\\n        ISkaleDKG.Fp2Point memory y\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return x.a == 0 && x.b == 0 && y.a == 1 && y.b == 0;\\n    }\\n\\n    function isG2Zero(ISkaleDKG.G2Point memory value) internal pure returns (bool) {\\n        return value.x.a == 0 && value.x.b == 0 && value.y.a == 1 && value.y.b == 0;\\n        // return isG2ZeroPoint(value.x, value.y);\\n    }\\n\\n    /**\\n     * @dev Checks are G2 points identical.\\n     * This function will return false if following coordinates\\n     * of points are different, even if its different on P.\\n     */\\n    function isEqual(\\n        ISkaleDKG.G2Point memory value1,\\n        ISkaleDKG.G2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.x.isEqual(value2.x) && value1.y.isEqual(value2.y);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Precompiled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Precompiled.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\n\\nlibrary Precompiled {\\n\\n    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\\n        uint[6] memory inputToBigModExp;\\n        inputToBigModExp[0] = 32;\\n        inputToBigModExp[1] = 32;\\n        inputToBigModExp[2] = 32;\\n        inputToBigModExp[3] = base;\\n        inputToBigModExp[4] = power;\\n        inputToBigModExp[5] = modulus;\\n        uint[1] memory out;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 5, inputToBigModExp, mul(6, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"BigModExp failed\\\");\\n        return out[0];\\n    }\\n\\n    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\\n        uint[3] memory inputToMul;\\n        uint[2] memory output;\\n        inputToMul[0] = x;\\n        inputToMul[1] = y;\\n        inputToMul[2] = k;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 7, inputToMul, 0x60, output, 0x40)\\n        }\\n        require(success, \\\"Multiplication failed\\\");\\n        return (output[0], output[1]);\\n    }\\n\\n    function bn256Pairing(\\n        uint x1,\\n        uint y1,\\n        uint a1,\\n        uint b1,\\n        uint c1,\\n        uint d1,\\n        uint x2,\\n        uint y2,\\n        uint a2,\\n        uint b2,\\n        uint c2,\\n        uint d2)\\n        internal view returns (bool)\\n    {\\n        bool success;\\n        uint[12] memory inputToPairing;\\n        inputToPairing[0] = x1;\\n        inputToPairing[1] = y1;\\n        inputToPairing[2] = a1;\\n        inputToPairing[3] = b1;\\n        inputToPairing[4] = c1;\\n        inputToPairing[5] = d1;\\n        inputToPairing[6] = x2;\\n        inputToPairing[7] = y2;\\n        inputToPairing[8] = a2;\\n        inputToPairing[9] = b2;\\n        inputToPairing[10] = c2;\\n        inputToPairing[11] = d2;\\n        uint[1] memory out;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 8, inputToPairing, mul(12, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"Pairing check failed\\\");\\n        return out[0] != 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/dkg/SkaleDkgAlright.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDkgAlright.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IKeyStorage.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\n\\n\\n/**\\n * @title SkaleDkgAlright\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\nlibrary SkaleDkgAlright {\\n\\n    event AllDataReceived(bytes32 indexed schainHash, uint nodeIndex);\\n    event SuccessfulDKG(bytes32 indexed schainHash);\\n\\n    function alright(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.Channel) storage channels,\\n        mapping(bytes32 => ISkaleDKG.ProcessDKG) storage dkgProcess,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints,\\n        mapping(bytes32 => uint) storage lastSuccessfulDKG,\\n        mapping(bytes32 => uint) storage startAlrightTimestamp\\n        \\n    )\\n        external\\n    {\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        (uint index, ) = skaleDKG.checkAndReturnIndexInGroup(schainHash, fromNodeIndex, true);\\n        uint numberOfParticipant = channels[schainHash].n;\\n        require(numberOfParticipant == dkgProcess[schainHash].numberOfBroadcasted, \\\"Still Broadcasting phase\\\");\\n        require(\\n            startAlrightTimestamp[schainHash] + _getComplaintTimeLimit(contractManager) > block.timestamp,\\n            \\\"Incorrect time for alright\\\"\\n        );\\n        require(\\n            complaints[schainHash].fromNodeToComplaint != fromNodeIndex ||\\n            (fromNodeIndex == 0 && complaints[schainHash].startComplaintBlockTimestamp == 0),\\n            \\\"Node has already sent complaint\\\"\\n        );\\n        require(!dkgProcess[schainHash].completed[index], \\\"Node is already alright\\\");\\n        dkgProcess[schainHash].completed[index] = true;\\n        dkgProcess[schainHash].numberOfCompleted++;\\n        emit AllDataReceived(schainHash, fromNodeIndex);\\n        if (dkgProcess[schainHash].numberOfCompleted == numberOfParticipant) {\\n            lastSuccessfulDKG[schainHash] = block.timestamp;\\n            channels[schainHash].active = false;\\n            IKeyStorage(contractManager.getContract(\\\"KeyStorage\\\")).finalizePublicKey(schainHash);\\n            emit SuccessfulDKG(schainHash);\\n        }\\n    }\\n\\n    function _getComplaintTimeLimit(IContractManager contractManager) private view returns (uint) {\\n        return IConstantsHolder(contractManager.getConstantsHolder()).complaintTimeLimit();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/dkg/SkaleDkgBroadcast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDkgBroadcast.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IKeyStorage.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\n\\nimport \\\"../utils/FieldOperations.sol\\\";\\n\\n\\n/**\\n * @title SkaleDkgBroadcast\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\nlibrary SkaleDkgBroadcast {\\n\\n    /**\\n     * @dev Emitted when a node broadcasts key share.\\n     */\\n    event BroadcastAndKeyShare(\\n        bytes32 indexed schainHash,\\n        uint indexed fromNode,\\n        ISkaleDKG.G2Point[] verificationVector,\\n        ISkaleDKG.KeyShare[] secretKeyContribution\\n    );\\n\\n\\n    /**\\n     * @dev Broadcasts verification vector and secret key contribution to all\\n     * other nodes in the group.\\n     *\\n     * Emits BroadcastAndKeyShare event.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must have an associated node.\\n     * - `verificationVector` must be a certain length.\\n     * - `secretKeyContribution` length must be equal to number of nodes in group.\\n     */\\n    function broadcast(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        ISkaleDKG.KeyShare[] memory secretKeyContribution,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.Channel) storage channels,\\n        mapping(bytes32 => ISkaleDKG.ProcessDKG) storage dkgProcess,\\n        mapping(bytes32 => mapping(uint => bytes32)) storage hashedData\\n    )\\n        external\\n    {\\n        uint n = channels[schainHash].n;\\n        require(verificationVector.length == getT(n), \\\"Incorrect number of verification vectors\\\");\\n        require(\\n            secretKeyContribution.length == n,\\n            \\\"Incorrect number of secret key shares\\\"\\n        );\\n        require(\\n            channels[schainHash].startedBlockTimestamp + _getComplaintTimeLimit(contractManager) > block.timestamp,\\n            \\\"Incorrect time for broadcast\\\"\\n        );\\n        (uint index, ) = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).checkAndReturnIndexInGroup(\\n            schainHash, nodeIndex, true\\n        );\\n        require(!dkgProcess[schainHash].broadcasted[index], \\\"This node has already broadcasted\\\");\\n        dkgProcess[schainHash].broadcasted[index] = true;\\n        dkgProcess[schainHash].numberOfBroadcasted++;\\n        if (dkgProcess[schainHash].numberOfBroadcasted == channels[schainHash].n) {\\n            ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).setStartAlrightTimestamp(schainHash);\\n        }\\n        hashedData[schainHash][index] = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).hashData(\\n            secretKeyContribution, verificationVector\\n        );\\n        IKeyStorage(contractManager.getContract(\\\"KeyStorage\\\")).adding(schainHash, verificationVector[0]);\\n        emit BroadcastAndKeyShare(\\n            schainHash,\\n            nodeIndex,\\n            verificationVector,\\n            secretKeyContribution\\n        );\\n    }\\n\\n    function getT(uint n) public pure returns (uint) {\\n        return (n * 2 + 1) / 3;\\n    }\\n\\n    function _getComplaintTimeLimit(IContractManager contractManager) private view returns (uint) {\\n        return IConstantsHolder(contractManager.getConstantsHolder()).complaintTimeLimit();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/dkg/SkaleDkgComplaint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDkgComplaint.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\n\\n/**\\n * @title SkaleDkgComplaint\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\nlibrary SkaleDkgComplaint {\\n\\n    /**\\n     * @dev Emitted when an incorrect complaint is sent.\\n     */\\n    event ComplaintError(string error);\\n\\n    /**\\n     * @dev Emitted when a complaint is sent.\\n     */\\n    event ComplaintSent(\\n        bytes32 indexed schainHash, uint indexed fromNodeIndex, uint indexed toNodeIndex);\\n\\n\\n    /**\\n     * @dev Creates a complaint from a node (accuser) to a given node.\\n     * The accusing node must broadcast additional parameters within 1800 blocks.\\n     *\\n     * Emits {ComplaintSent} or {ComplaintError} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must have an associated node.\\n     */\\n    function complaint(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.Channel) storage channels,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints,\\n        mapping(bytes32 => uint) storage startAlrightTimestamp\\n    )\\n        external\\n    {\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        require(skaleDKG.isNodeBroadcasted(schainHash, fromNodeIndex), \\\"Node has not broadcasted\\\");\\n        if (skaleDKG.isNodeBroadcasted(schainHash, toNodeIndex)) {\\n            _handleComplaintWhenBroadcasted(\\n                schainHash,\\n                fromNodeIndex,\\n                toNodeIndex,\\n                contractManager,\\n                complaints,\\n                startAlrightTimestamp\\n            );\\n        } else {\\n            // not broadcasted in 30 min\\n            _handleComplaintWhenNotBroadcasted(schainHash, toNodeIndex, contractManager, channels);\\n        }\\n        skaleDKG.setBadNode(schainHash, toNodeIndex);\\n    }\\n\\n    function complaintBadData(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints\\n    )\\n        external\\n    { \\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        require(skaleDKG.isNodeBroadcasted(schainHash, fromNodeIndex), \\\"Node has not broadcasted\\\");\\n        require(skaleDKG.isNodeBroadcasted(schainHash, toNodeIndex), \\\"Accused node has not broadcasted\\\");\\n        require(!skaleDKG.isAllDataReceived(schainHash, fromNodeIndex), \\\"Node has already sent alright\\\");\\n        if (complaints[schainHash].nodeToComplaint == type(uint).max) {\\n            complaints[schainHash].nodeToComplaint = toNodeIndex;\\n            complaints[schainHash].fromNodeToComplaint = fromNodeIndex;\\n            complaints[schainHash].startComplaintBlockTimestamp = block.timestamp;\\n            emit ComplaintSent(schainHash, fromNodeIndex, toNodeIndex);\\n        } else {\\n            emit ComplaintError(\\\"First complaint has already been processed\\\");\\n        }\\n    }\\n\\n    function _handleComplaintWhenBroadcasted(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints,\\n        mapping(bytes32 => uint) storage startAlrightTimestamp\\n    )\\n        private\\n    {\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        // missing alright\\n        if (complaints[schainHash].nodeToComplaint == type(uint).max) {\\n            if (\\n                skaleDKG.isEveryoneBroadcasted(schainHash) &&\\n                !skaleDKG.isAllDataReceived(schainHash, toNodeIndex) &&\\n                startAlrightTimestamp[schainHash] + _getComplaintTimeLimit(contractManager) <= block.timestamp\\n            ) {\\n                // missing alright\\n                skaleDKG.finalizeSlashing(schainHash, toNodeIndex);\\n                return;\\n            } else if (!skaleDKG.isAllDataReceived(schainHash, fromNodeIndex)) {\\n                // incorrect data\\n                skaleDKG.finalizeSlashing(schainHash, fromNodeIndex);\\n                return;\\n            }\\n            emit ComplaintError(\\\"Has already sent alright\\\");\\n            return;\\n        } else if (complaints[schainHash].nodeToComplaint == toNodeIndex) {\\n            // 30 min after incorrect data complaint\\n            if (complaints[schainHash].startComplaintBlockTimestamp + _getComplaintTimeLimit(contractManager)\\n                <= block.timestamp\\n            ) {\\n                skaleDKG.finalizeSlashing(schainHash, complaints[schainHash].nodeToComplaint);\\n                return;\\n            }\\n            emit ComplaintError(\\\"The same complaint rejected\\\");\\n            return;\\n        }\\n        emit ComplaintError(\\\"One complaint is already sent\\\");\\n    }\\n\\n\\n    function _handleComplaintWhenNotBroadcasted(\\n        bytes32 schainHash,\\n        uint toNodeIndex,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.Channel) storage channels\\n    ) \\n        private\\n    {\\n        if (channels[schainHash].startedBlockTimestamp + _getComplaintTimeLimit(contractManager) <= block.timestamp) {\\n            ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).finalizeSlashing(schainHash, toNodeIndex);\\n            return;\\n        }\\n        emit ComplaintError(\\\"Complaint sent too early\\\");\\n    }\\n\\n    function _getComplaintTimeLimit(IContractManager contractManager) private view returns (uint) {\\n        return IConstantsHolder(contractManager.getConstantsHolder()).complaintTimeLimit();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/dkg/SkaleDkgPreResponse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDkgPreResponse.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\n\\nimport \\\"../utils/FieldOperations.sol\\\";\\n\\n/**\\n * @title SkaleDkgPreResponse\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\nlibrary SkaleDkgPreResponse {\\n    using G2Operations for ISkaleDKG.G2Point;\\n\\n    function preResponse(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        ISkaleDKG.G2Point[] memory verificationVectorMultiplication,\\n        ISkaleDKG.KeyShare[] memory secretKeyContribution,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints,\\n        mapping(bytes32 => mapping(uint => bytes32)) storage hashedData\\n    )\\n        external\\n    {\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        uint index = _preResponseCheck(\\n            schainHash,\\n            fromNodeIndex,\\n            verificationVector,\\n            verificationVectorMultiplication,\\n            secretKeyContribution,\\n            skaleDKG,\\n            complaints,\\n            hashedData\\n        );\\n        _processPreResponse(\\n            secretKeyContribution[index].share,\\n            schainHash,\\n            verificationVectorMultiplication,\\n            complaints\\n        );\\n    }\\n\\n    function _processPreResponse(\\n        bytes32 share,\\n        bytes32 schainHash,\\n        ISkaleDKG.G2Point[] memory verificationVectorMultiplication,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints\\n    )\\n        private\\n    {\\n        complaints[schainHash].keyShare = share;\\n        complaints[schainHash].sumOfVerVec = _calculateSum(verificationVectorMultiplication);\\n        complaints[schainHash].isResponse = true;\\n    }\\n\\n    function _preResponseCheck(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        ISkaleDKG.G2Point[] memory verificationVectorMultiplication,\\n        ISkaleDKG.KeyShare[] memory secretKeyContribution,\\n        ISkaleDKG skaleDKG,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints,\\n        mapping(bytes32 => mapping(uint => bytes32)) storage hashedData\\n    )\\n        private\\n        view\\n        returns (uint index)\\n    {\\n        (uint indexOnSchain, ) = skaleDKG.checkAndReturnIndexInGroup(schainHash, fromNodeIndex, true);\\n        require(complaints[schainHash].nodeToComplaint == fromNodeIndex, \\\"Not this Node\\\");\\n        require(!complaints[schainHash].isResponse, \\\"Already submitted pre response data\\\");\\n        require(\\n            hashedData[schainHash][indexOnSchain] == skaleDKG.hashData(secretKeyContribution, verificationVector),\\n            \\\"Broadcasted Data is not correct\\\"\\n        );\\n        require(\\n            verificationVector.length == verificationVectorMultiplication.length,\\n            \\\"Incorrect length of multiplied verification vector\\\"\\n        );\\n        (index, ) = skaleDKG.checkAndReturnIndexInGroup(schainHash, complaints[schainHash].fromNodeToComplaint, true);\\n        require(\\n            _checkCorrectVectorMultiplication(index, verificationVector, verificationVectorMultiplication),\\n            \\\"Multiplied verification vector is incorrect\\\"\\n        ); \\n    }\\n\\n    function _calculateSum(ISkaleDKG.G2Point[] memory verificationVectorMultiplication)\\n        private\\n        view\\n        returns (ISkaleDKG.G2Point memory)\\n    {\\n        ISkaleDKG.G2Point memory value = G2Operations.getG2Zero();\\n        for (uint i = 0; i < verificationVectorMultiplication.length; i++) {\\n            value = value.addG2(verificationVectorMultiplication[i]);\\n        }\\n        return value;\\n    }\\n\\n    function _checkCorrectVectorMultiplication(\\n        uint indexOnSchain,\\n        ISkaleDKG.G2Point[] memory verificationVector,\\n        ISkaleDKG.G2Point[] memory verificationVectorMultiplication\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        ISkaleDKG.Fp2Point memory value = G1Operations.getG1Generator();\\n        ISkaleDKG.Fp2Point memory tmp = G1Operations.getG1Generator();\\n        for (uint i = 0; i < verificationVector.length; i++) {\\n            (tmp.a, tmp.b) = Precompiled.bn256ScalarMul(value.a, value.b, (indexOnSchain + 1) ** i);\\n            if (!_checkPairing(tmp, verificationVector[i], verificationVectorMultiplication[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _checkPairing(\\n        ISkaleDKG.Fp2Point memory g1Mul,\\n        ISkaleDKG.G2Point memory verificationVector,\\n        ISkaleDKG.G2Point memory verificationVectorMultiplication\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        require(G1Operations.checkRange(g1Mul), \\\"g1Mul is not valid\\\");\\n        g1Mul.b = G1Operations.negate(g1Mul.b);\\n        ISkaleDKG.Fp2Point memory one = G1Operations.getG1Generator();\\n        return Precompiled.bn256Pairing(\\n            one.a, one.b,\\n            verificationVectorMultiplication.x.b, verificationVectorMultiplication.x.a,\\n            verificationVectorMultiplication.y.b, verificationVectorMultiplication.y.a,\\n            g1Mul.a, g1Mul.b,\\n            verificationVector.x.b, verificationVector.x.a,\\n            verificationVector.y.b, verificationVector.y.a\\n        );\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/dkg/SkaleDkgResponse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleDkgResponse.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IDecryption.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/INodes.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/IECDH.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\n\\nimport \\\"../utils/FieldOperations.sol\\\";\\n\\n/**\\n * @title SkaleDkgResponse\\n * @dev Contains functions to manage distributed key generation per\\n * Joint-Feldman protocol.\\n */\\nlibrary SkaleDkgResponse {\\n    using G2Operations for ISkaleDKG.G2Point;\\n\\n    function response(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint secretNumber,\\n        ISkaleDKG.G2Point memory multipliedShare,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.Channel) storage channels,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints\\n    )\\n        external\\n    {\\n        uint index = ISchainsInternal(contractManager.getContract(\\\"SchainsInternal\\\"))\\n            .getNodeIndexInGroup(schainHash, fromNodeIndex);\\n        require(index < channels[schainHash].n, \\\"Node is not in this group\\\");\\n        require(complaints[schainHash].nodeToComplaint == fromNodeIndex, \\\"Not this Node\\\");\\n        require(\\n            complaints[schainHash].startComplaintBlockTimestamp\\n                + _getComplaintTimeLimit(contractManager) > block.timestamp,\\n            \\\"Incorrect time for response\\\"\\n        );\\n        require(complaints[schainHash].isResponse, \\\"Have not submitted pre-response data\\\");\\n        uint badNode = _verifyDataAndSlash(\\n            schainHash,\\n            secretNumber,\\n            multipliedShare,\\n            contractManager,\\n            complaints\\n         );\\n        ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).setBadNode(schainHash, badNode);\\n    }\\n\\n    function _verifyDataAndSlash(\\n        bytes32 schainHash,\\n        uint secretNumber,\\n        ISkaleDKG.G2Point memory multipliedShare,\\n        IContractManager contractManager,\\n        mapping(bytes32 => ISkaleDKG.ComplaintData) storage complaints\\n    )\\n        private\\n        returns (uint badNode)\\n    {\\n        bytes32[2] memory publicKey = INodes(contractManager.getContract(\\\"Nodes\\\")).getNodePublicKey(\\n            complaints[schainHash].fromNodeToComplaint\\n        );\\n        uint256 pkX = uint(publicKey[0]);\\n\\n        (pkX, ) = IECDH(contractManager.getContract(\\\"ECDH\\\")).deriveKey(secretNumber, pkX, uint(publicKey[1]));\\n        bytes32 key = bytes32(pkX);\\n\\n        // Decrypt secret key contribution\\n        uint secret = IDecryption(contractManager.getContract(\\\"Decryption\\\")).decrypt(\\n            complaints[schainHash].keyShare,\\n            sha256(abi.encodePacked(key))\\n        );\\n\\n        badNode = (\\n            _checkCorrectMultipliedShare(multipliedShare, secret) &&\\n            multipliedShare.isEqual(complaints[schainHash].sumOfVerVec) ?\\n            complaints[schainHash].fromNodeToComplaint :\\n            complaints[schainHash].nodeToComplaint\\n        );\\n        ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\")).finalizeSlashing(schainHash, badNode);\\n    }\\n\\n    function _checkCorrectMultipliedShare(\\n        ISkaleDKG.G2Point memory multipliedShare,\\n        uint secret\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        if (!multipliedShare.isG2()) {\\n            return false;\\n        }\\n        ISkaleDKG.G2Point memory tmp = multipliedShare;\\n        ISkaleDKG.Fp2Point memory g1 = G1Operations.getG1Generator();\\n        ISkaleDKG.Fp2Point memory share = ISkaleDKG.Fp2Point({\\n            a: 0,\\n            b: 0\\n        });\\n        (share.a, share.b) = Precompiled.bn256ScalarMul(g1.a, g1.b, secret);\\n        require(G1Operations.checkRange(share), \\\"share is not valid\\\");\\n        share.b = G1Operations.negate(share.b);\\n\\n        require(G1Operations.isG1(share), \\\"mulShare not in G1\\\");\\n\\n        ISkaleDKG.G2Point memory g2 = G2Operations.getG2Generator();\\n\\n        return Precompiled.bn256Pairing(\\n            share.a, share.b,\\n            g2.x.b, g2.x.a, g2.y.b, g2.y.a,\\n            g1.a, g1.b,\\n            tmp.x.b, tmp.x.a, tmp.y.b, tmp.y.a);\\n    }\\n\\n    function _getComplaintTimeLimit(IContractManager contractManager) private view returns (uint) {\\n        return IConstantsHolder(contractManager.getConstantsHolder()).complaintTimeLimit();\\n    }\\n\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IContractManager {\\n    /**\\n     * @dev Emitted when contract is upgraded.\\n     */\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external;\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external;\\n    function contracts(bytes32 nameHash) external view returns (address);\\n    function getDelegationPeriodManager() external view returns (address);\\n    function getBounty() external view returns (address);\\n    function getValidatorService() external view returns (address);\\n    function getTimeHelpers() external view returns (address);\\n    function getConstantsHolder() external view returns (address);\\n    function getSkaleToken() external view returns (address);\\n    function getTokenState() external view returns (address);\\n    function getPunisher() external view returns (address);\\n    function getContract(string calldata name) external view returns (address);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IPermissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IPermissions {\\n    function initialize(address contractManagerAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\\\";\\nimport \\\"./InitializableWithGap.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeableLegacy is InitializableWithGap, ContextUpgradeable, IAccessControlUpgradeableLegacy {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IAccessControlUpgradeableLegacy.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IAccessControlUpgradeableLegacy {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    \\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/InitializableWithGap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract InitializableWithGap is Initializable {\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IConstantsHolder.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IConstantsHolder {\\n\\n    /**\\n     * @dev Emitted when constants updated.\\n     */\\n    event ConstantUpdated(\\n        bytes32 indexed constantHash,\\n        uint previousValue,\\n        uint newValue\\n    );\\n\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external;\\n    function setCheckTime(uint newCheckTime) external;\\n    function setLatency(uint32 newAllowableLatency) external;\\n    function setMSR(uint newMSR) external;\\n    function setLaunchTimestamp(uint timestamp) external;\\n    function setRotationDelay(uint newDelay) external;\\n    function setProofOfUseLockUpPeriod(uint periodDays) external;\\n    function setProofOfUseDelegationPercentage(uint percentage) external;\\n    function setLimitValidatorsPerDelegator(uint newLimit) external;\\n    function setSchainCreationTimeStamp(uint timestamp) external;\\n    function setMinimalSchainLifetime(uint lifetime) external;\\n    function setComplaintTimeLimit(uint timeLimit) external;\\n    function msr() external view returns (uint);\\n    function launchTimestamp() external view returns (uint);\\n    function rotationDelay() external view returns (uint);\\n    function limitValidatorsPerDelegator() external view returns (uint);\\n    function schainCreationTimeStamp() external view returns (uint);\\n    function minimalSchainLifetime() external view returns (uint);\\n    function complaintTimeLimit() external view returns (uint);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IDecryption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IDecryption.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IDecryption {\\n    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32);\\n    function decrypt(bytes32 cipherText, bytes32 key) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/INodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    INodes.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./utils/IRandom.sol\\\";\\n\\ninterface INodes {\\n    // All Nodes states\\n    enum NodeStatus {Active, Leaving, Left, In_Maintenance}\\n\\n    struct Node {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIP;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint startBlock;\\n        uint lastRewardDate;\\n        uint finishTime;\\n        NodeStatus status;\\n        uint validatorId;\\n    }\\n\\n    // struct to note which Nodes and which number of Nodes owned by user\\n    struct CreatedNodes {\\n        mapping (uint => bool) isNodeExist;\\n        uint numberOfNodes;\\n    }\\n\\n    struct SpaceManaging {\\n        uint8 freeSpace;\\n        uint indexInSpaceMap;\\n    }\\n\\n    struct NodeCreationParams {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIp;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint16 nonce;\\n        string domainName;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a node is created.\\n     */\\n    event NodeCreated(\\n        uint nodeIndex,\\n        address owner,\\n        string name,\\n        bytes4 ip,\\n        bytes4 publicIP,\\n        uint16 port,\\n        uint16 nonce,\\n        string domainName\\n    );\\n\\n    /**\\n     * @dev Emitted when a node completes a network exit.\\n     */\\n    event ExitCompleted(\\n        uint nodeIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when a node begins to exit from the network.\\n     */\\n    event ExitInitialized(\\n        uint nodeIndex,\\n        uint startLeavingPeriod\\n    );\\n\\n    /**\\n     * @dev Emitted when a node set to in compliant or compliant.\\n     */\\n    event IncompliantNode(\\n        uint indexed nodeIndex,\\n        bool status\\n    );\\n\\n    /**\\n     * @dev Emitted when a node set to in maintenance or from in maintenance.\\n     */\\n    event MaintenanceNode(\\n        uint indexed nodeIndex,\\n        bool status\\n    );\\n\\n    /**\\n     * @dev Emitted when a node status changed.\\n     */\\n    event IPChanged(\\n        uint indexed nodeIndex,\\n        bytes4 previousIP,\\n        bytes4 newIP\\n    );\\n    \\n    function removeSpaceFromNode(uint nodeIndex, uint8 space) external returns (bool);\\n    function addSpaceToNode(uint nodeIndex, uint8 space) external;\\n    function changeNodeLastRewardDate(uint nodeIndex) external;\\n    function changeNodeFinishTime(uint nodeIndex, uint time) external;\\n    function createNode(address from, NodeCreationParams calldata params) external;\\n    function initExit(uint nodeIndex) external;\\n    function completeExit(uint nodeIndex) external returns (bool);\\n    function deleteNodeForValidator(uint validatorId, uint nodeIndex) external;\\n    function checkPossibilityCreatingNode(address nodeAddress) external;\\n    function checkPossibilityToMaintainNode(uint validatorId, uint nodeIndex) external returns (bool);\\n    function setNodeInMaintenance(uint nodeIndex) external;\\n    function removeNodeFromInMaintenance(uint nodeIndex) external;\\n    function setNodeIncompliant(uint nodeIndex) external;\\n    function setNodeCompliant(uint nodeIndex) external;\\n    function setDomainName(uint nodeIndex, string memory domainName) external;\\n    function makeNodeVisible(uint nodeIndex) external;\\n    function makeNodeInvisible(uint nodeIndex) external;\\n    function changeIP(uint nodeIndex, bytes4 newIP, bytes4 newPublicIP) external;\\n    function numberOfActiveNodes() external view returns (uint);\\n    function incompliant(uint nodeIndex) external view returns (bool);\\n    function getRandomNodeWithFreeSpace(\\n        uint8 freeSpace,\\n        IRandom.RandomGenerator memory randomGenerator\\n    )\\n        external\\n        view\\n        returns (uint);\\n    function isTimeForReward(uint nodeIndex) external view returns (bool);\\n    function getNodeIP(uint nodeIndex) external view returns (bytes4);\\n    function getNodeDomainName(uint nodeIndex) external view returns (string memory);\\n    function getNodePort(uint nodeIndex) external view returns (uint16);\\n    function getNodePublicKey(uint nodeIndex) external view returns (bytes32[2] memory);\\n    function getNodeAddress(uint nodeIndex) external view returns (address);\\n    function getNodeFinishTime(uint nodeIndex) external view returns (uint);\\n    function isNodeLeft(uint nodeIndex) external view returns (bool);\\n    function isNodeInMaintenance(uint nodeIndex) external view returns (bool);\\n    function getNodeLastRewardDate(uint nodeIndex) external view returns (uint);\\n    function getNodeNextRewardDate(uint nodeIndex) external view returns (uint);\\n    function getNumberOfNodes() external view returns (uint);\\n    function getNumberOnlineNodes() external view returns (uint);\\n    function getActiveNodeIds() external view returns (uint[] memory activeNodeIds);\\n    function getNodeStatus(uint nodeIndex) external view returns (NodeStatus);\\n    function getValidatorNodeIndexes(uint validatorId) external view returns (uint[] memory);\\n    function countNodesWithFreeSpace(uint8 freeSpace) external view returns (uint count);\\n    function getValidatorId(uint nodeIndex) external view returns (uint);\\n    function isNodeExist(address from, uint nodeIndex) external view returns (bool);\\n    function isNodeActive(uint nodeIndex) external view returns (bool);\\n    function isNodeLeaving(uint nodeIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/utils/IRandom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IRandom.sol - SKALE Manager Interfaces\\n    Copyright (C) 2022-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\n\\ninterface IRandom {\\n    struct RandomGenerator {\\n        uint seed;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/dkg/SkaleDkgAlright.sol\": {\r\n        \"SkaleDkgAlright\": \"0x6fda3fb36e8365203b7566c7edd1601839ab0d6d\"\r\n      },\r\n      \"contracts/dkg/SkaleDkgBroadcast.sol\": {\r\n        \"SkaleDkgBroadcast\": \"0xf92532bd7367a49a4ed7c3c24febad9f85d8bd64\"\r\n      },\r\n      \"contracts/dkg/SkaleDkgComplaint.sol\": {\r\n        \"SkaleDkgComplaint\": \"0x874a776722574099169299d9f2d0a24de8b29ecd\"\r\n      },\r\n      \"contracts/dkg/SkaleDkgPreResponse.sol\": {\r\n        \"SkaleDkgPreResponse\": \"0x331544c06a0c2fb8fd0452b16c1d74101618ff43\"\r\n      },\r\n      \"contracts/dkg/SkaleDkgResponse.sol\": {\r\n        \"SkaleDkgResponse\": \"0xc5e7ce74968c9efb467979e0f29cae34d673188a\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"AllDataReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"BadGuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromNode\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct ISkaleDKG.G2Point[]\",\"name\":\"verificationVector\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"publicKey\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32\",\"name\":\"share\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ISkaleDKG.KeyShare[]\",\"name\":\"secretKeyContribution\",\"type\":\"tuple[]\"}],\"name\":\"BroadcastAndKeyShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"ChannelClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"ComplaintError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toNodeIndex\",\"type\":\"uint256\"}],\"name\":\"ComplaintSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"FailedDKG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"NewGuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"SuccessfulDKG\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"}],\"name\":\"alright\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point[]\",\"name\":\"verificationVector\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"publicKey\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32\",\"name\":\"share\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISkaleDKG.KeyShare[]\",\"name\":\"secretKeyContribution\",\"type\":\"tuple[]\"}],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revertCheck\",\"type\":\"bool\"}],\"name\":\"checkAndReturnIndexInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNodeIndex\",\"type\":\"uint256\"}],\"name\":\"complaint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNodeIndex\",\"type\":\"uint256\"}],\"name\":\"complaintBadData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"complaints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeToComplaint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeToComplaint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startComplaintBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResponse\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"keyShare\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point\",\"name\":\"sumOfVerVec\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"deleteChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dkgProcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBroadcasted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCompleted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"badNode\",\"type\":\"uint256\"}],\"name\":\"finalizeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getAlrightStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getChannelStartedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getChannelStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getComplaintData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getComplaintStartedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getNumberOfBroadcasted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getNumberOfCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getTimeOfLastSuccessfulDKG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"publicKey\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32\",\"name\":\"share\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISkaleDKG.KeyShare[]\",\"name\":\"secretKeyContribution\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point[]\",\"name\":\"verificationVector\",\"type\":\"tuple[]\"}],\"name\":\"hashData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashedData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isAllDataReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isAlrightPossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isBroadcastPossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNodeIndex\",\"type\":\"uint256\"}],\"name\":\"isComplaintPossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isEveryoneBroadcasted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isLastDKGSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isNodeBroadcasted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isPreResponsePossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"isResponsePossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lastSuccessfulDKG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point[]\",\"name\":\"verificationVector\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point[]\",\"name\":\"verificationVectorMultiplication\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"publicKey\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32\",\"name\":\"share\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISkaleDKG.KeyShare[]\",\"name\":\"secretKeyContribution\",\"type\":\"tuple[]\"}],\"name\":\"preResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fromNodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secretNumber\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point\",\"name\":\"multipliedShare\",\"type\":\"tuple\"}],\"name\":\"response\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"setBadNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"setStartAlrightTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"startAlrightTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SkaleDKG", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}