{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    /**\r\n    * Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering.\r\n     * One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0\r\n     * and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Returns the total number of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * Gets the balance of the address specified.\r\n    * @param addr The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address addr) external view returns (uint256);\r\n\r\n    /**\r\n     * Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * This event is triggered when a given amount of tokens is sent to an address.\r\n     * @param from The address of the sender\r\n     * @param to The address of the receiver\r\n     * @param value The amount transferred\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * This event is triggered when a given address is approved to spend a specific amount of tokens\r\n     * on behalf of the sender.\r\n     * @param owner The owner of the token\r\n     * @param spender The spender\r\n     * @param value The amount to transfer\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Represents a resource that works per Commit-and-Reveal scheme with 4 passwords.\r\n */\r\ncontract CommitRevealVault {\r\n    // The hash of the authorized caller\r\n    bytes32 private _authorizedCaller;\r\n\r\n    // The challenge to solve\r\n    bytes32 private _challenge;\r\n\r\n    // The reentrancy guard\r\n    bool private _reentrancyGuard;\r\n\r\n    /**\r\n     * @notice This event is triggered when the authorized caller is updated.\r\n     * @param previousCaller The hash of the previous caller\r\n     * @param newCaller The hash of the new caller\r\n     */\r\n    event AuthorizedCallerChanged (bytes32 previousCaller, bytes32 newCaller);\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param newChallenge The challenge to solve\r\n     * @param newAuthorizedCaller The hash of the authorized caller\r\n     */\r\n    constructor (bytes32 newChallenge, bytes32 newAuthorizedCaller) {\r\n        require(newAuthorizedCaller != bytes32(0), \"Authorized caller required\");\r\n        require(newChallenge != bytes32(0), \"Challenge required\");\r\n\r\n        _challenge = newChallenge;\r\n        _authorizedCaller = newAuthorizedCaller;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if called by an unauthorized sender.\r\n     * @dev Calling this function requires impersonating the message sender.\r\n     */\r\n    modifier onlyAuthorizedCaller () {\r\n        require(keccak256(abi.encodePacked(msg.sender, address(this))) == _authorizedCaller, \"Unauthorized caller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws in case of a reentrant call\r\n     */\r\n    modifier ifNotReentrant () {\r\n        require(!_reentrancyGuard, \"Reentrant call rejected\");\r\n        _reentrancyGuard = true;\r\n        _;\r\n        _reentrancyGuard = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Function to receive Ether. It is called if \"msg.data\" is empty\r\n     * @dev Anyone is allowed to deposit Ether in this contract.\r\n     */\r\n    receive() external payable {} // solhint-disable-line no-empty-blocks\r\n\r\n    /**\r\n     * @notice Fallback function for receiving Ether. It is called when \"msg.data\" is not empty\r\n     * @dev Anyone is allowed to deposit Ether in this contract.\r\n     */\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @notice Transfers ownership to another address.\r\n     * @param newAuthorizedCaller The hash of the new authorized caller\r\n     * @param newChallenge The new challenge\r\n     * @param a Proof A\r\n     * @param b Proof B\r\n     * @param c Proof C\r\n     * @param d Proof D\r\n     */\r\n    function transferOwnership (bytes32 newAuthorizedCaller, bytes32 newChallenge, bytes32 a, bytes32 b, bytes32 c, bytes32 d) \r\n    public onlyAuthorizedCaller ifNotReentrant {\r\n        // Parameter checks\r\n        require(newAuthorizedCaller != bytes32(0) && newAuthorizedCaller != _authorizedCaller, \"Caller rotation required\");\r\n        require(newChallenge != bytes32(0) && newChallenge != _challenge, \"Challenge rotation required\");\r\n\r\n        // Validate the challenge\r\n        require(_challenge == keccak256(abi.encode(a, b, c, d)), \"Invalid proof\");\r\n\r\n        // State changes\r\n        emit AuthorizedCallerChanged(_authorizedCaller, newAuthorizedCaller);\r\n        _authorizedCaller = newAuthorizedCaller;\r\n        _challenge = newChallenge;\r\n    }\r\n\r\n    /**\r\n     * @notice Runs a native transfer.\r\n     * @param toAddress The payable destination address\r\n     * @param toAmount The transfer amount\r\n     * @param newChallenge The new challenge\r\n     * @param a Proof A\r\n     * @param b Proof B\r\n     * @param c Proof C\r\n     * @param d Proof D\r\n     */\r\n    function transferNative (address payable toAddress, uint256 toAmount, bytes32 newChallenge, bytes32 a, bytes32 b, bytes32 c, bytes32 d) \r\n    public onlyAuthorizedCaller ifNotReentrant {\r\n        // Parameter checks\r\n        require(toAddress != address(0), \"Invalid address\");\r\n        require(toAmount > 0, \"Invalid amount\");\r\n        require(newChallenge != bytes32(0) && newChallenge != _challenge, \"Challenge rotation required\");\r\n\r\n         // Validate the challenge\r\n        require(_challenge == keccak256(abi.encode(a, b, c, d)), \"Invalid proof\");\r\n\r\n        // State changes\r\n        _challenge = newChallenge;\r\n\r\n        // Trusted native call, with gas limit.\r\n        toAddress.transfer(toAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Runs a token transfer per EIP20.\r\n     * @param contractAddr The contract address\r\n     * @param toAddress The destination address\r\n     * @param toAmount The transfer amount\r\n     * @param newChallenge The new challenge\r\n     * @param a Proof A\r\n     * @param b Proof B\r\n     * @param c Proof C\r\n     * @param d Proof D\r\n     */\r\n    function transferToken (IERC20 contractAddr, address toAddress, uint256 toAmount, bytes32 newChallenge, bytes32 a, bytes32 b, bytes32 c, bytes32 d) \r\n    public onlyAuthorizedCaller ifNotReentrant {\r\n        // Parameter checks\r\n        require(toAddress != address(0), \"Invalid address\");\r\n        require(toAmount > 0, \"Invalid amount\");\r\n        require(newChallenge != bytes32(0) && newChallenge != _challenge, \"Challenge rotation required\");\r\n\r\n        // Validate the challenge\r\n        require(_challenge == keccak256(abi.encode(a, b, c, d)), \"Invalid proof\");\r\n\r\n        // Apply state changes prior making any external call, Check-Effect-Interactions\r\n        _challenge = newChallenge;\r\n\r\n        // Fire the untrusted external call\r\n        require(contractAddr.transfer(toAddress, toAmount), \"ERC20 transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newAuthorizedCaller\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"previousCaller\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newCaller\",\"type\":\"bytes32\"}],\"name\":\"AuthorizedCallerChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"a\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"c\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"d\",\"type\":\"bytes32\"}],\"name\":\"transferNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newAuthorizedCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"a\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"c\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"d\",\"type\":\"bytes32\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"newChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"a\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"c\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"d\",\"type\":\"bytes32\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CommitRevealVault", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "93c77803120a3e9de46d5cafda76adc6f451e768697cb0f59001ffbe223ace533b8b0725dc51d9257d2b5e18dbe8d15fbd25973e944eb7729ab15d302eb996fe", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd523d5705dde5355d3e24dedf156707d30e4b90c391a7335387b7ac757b3643"}]}