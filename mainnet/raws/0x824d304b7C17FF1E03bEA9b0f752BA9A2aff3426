{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/co-bots/CoBotsRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport {Integers} from \\\"../lib/Integers.sol\\\";\\nimport \\\"../interfaces/ICoBotsRenderer.sol\\\";\\n\\n/*  @title CoBots Renderer\\n    @author Clement Walter\\n    @dev Encode each traits as a \\\"sum\\\" of `rect`, each rect being stored using 4 bytes\\n*/\\ncontract CoBotsRenderer is Ownable, ReentrancyGuard, ICoBotsRenderer {\\n    using Integers for uint8;\\n    using Strings for uint256;\\n\\n    // We have a total of 4 * 6 = 24 bits = 3 bytes for coordinates + 1 byte for the color\\n    // Hence each rect is 4 bytes\\n    uint8 public constant BITS_PER_COORDINATES = 6;\\n    uint8 public constant BITS_PER_FILL_INDEX = 8;\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n    string public constant SVG_TAG_START =\\n        \\\"%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20viewBox=%270%200%2045%2045%27%20width=%27450px%27%20height=%27450px%27%3e\\\";\\n    string public constant SVG_TAG_END =\\n        \\\"%3cstyle%3erect{shape-rendering:crispEdges}%3c/style%3e%3c/svg%3e\\\";\\n\\n    address public fillPalette;\\n    address public traitPalette;\\n    address public traitPaletteIndexes; // where each trait begins in the traits' palette\\n    bytes public layerIndexes; // the index of the first item of each layer, uint8/bytes1 for each layer\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////  Rendering mechanics  /////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /// @dev Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\\n    function setFillPalette(bytes calldata _fillPalette) external onlyOwner {\\n        fillPalette = SSTORE2.write(_fillPalette);\\n    }\\n\\n    /// @dev All the rects are concatenated together to save gas.\\n    ///      The traitPaletteIndexes is used to retrieve the rect from the traitPalette.\\n    function setTraitPalette(bytes calldata _traitPalette) external onlyOwner {\\n        traitPalette = SSTORE2.write(_traitPalette);\\n    }\\n\\n    /// @dev Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\\n    function setTraitPaletteIndexes(bytes calldata _traitPaletteIndexes)\\n        external\\n        onlyOwner\\n    {\\n        traitPaletteIndexes = SSTORE2.write(_traitPaletteIndexes);\\n    }\\n\\n    /// @dev Traits are stored as a plain list while the rendering works with layer and items within each layer.\\n    ///      Since each layer has a variable number of items, we store the index of the first trait of each layer.\\n    function setLayerIndexes(bytes calldata _layerIndexes) external onlyOwner {\\n        layerIndexes = _layerIndexes;\\n    }\\n\\n    /// @dev 3 bytes per color because svg does not handle alpha.\\n    function getFill(uint256 _index) public view returns (string memory) {\\n        bytes memory palette = SSTORE2.read(fillPalette);\\n        return\\n            string.concat(\\n                uint8(palette[3 * _index]).toString(16, 2),\\n                uint8(palette[3 * _index + 1]).toString(16, 2),\\n                uint8(palette[3 * _index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /// @dev This function lets map from layerIndex and itemIndex to traitIndex.\\n    function getTraitIndex(uint256 _layerIndex, uint256 _itemIndex)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint8 traitIndex = uint8(layerIndexes[_layerIndex]);\\n        uint8 nextTraitIndex = uint8(layerIndexes[_layerIndex + 1]);\\n        if (traitIndex + _itemIndex > nextTraitIndex - 1) {\\n            return type(uint8).max;\\n        }\\n\\n        return _itemIndex + traitIndex;\\n    }\\n\\n    /// @dev Retrieve the bytes for the given trait from the traitPalette storage.\\n    function getTraitBytes(uint256 _index) public view returns (bytes memory) {\\n        bytes memory _indexes = SSTORE2.read(traitPaletteIndexes);\\n        uint32 start = uint32(BytesLib.toUint16(_indexes, _index * 2));\\n        uint32 next = uint32(BytesLib.toUint16(_indexes, _index * 2 + 2));\\n        bytes memory _traitPalette = SSTORE2.read(traitPalette);\\n        return BytesLib.slice(_traitPalette, start, next - start);\\n    }\\n\\n    function decodeRect(bytes memory rectBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return decodeRect(rectBytes, 0, 0);\\n    }\\n\\n    function decodeRect(\\n        bytes memory rectBytes,\\n        uint8 offsetX,\\n        uint8 offsetY\\n    ) public view returns (string memory) {\\n        require(rectBytes.length == 4, \\\"Rect bytes must be 4 bytes long\\\");\\n        string memory fill = getFill(uint8(rectBytes[3]));\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(rectBytes[0] >> 2) + offsetX).toString(),\\n                Y_TAG,\\n                (uint8(((rectBytes[0] << 4) | (rectBytes[1] >> 4)) & 0x3f) +\\n                    offsetY).toString(),\\n                WIDTH_TAG,\\n                uint8(((rectBytes[1] << 2) & 0x3f) | (rectBytes[2] >> 6))\\n                    .toString(),\\n                HEIGHT_TAG,\\n                uint8(rectBytes[2] & 0x3f).toString(),\\n                FILL_TAG,\\n                fill,\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decode8Rects(bytes32 rectsBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[0],\\n                        rectsBytes[1],\\n                        rectsBytes[2],\\n                        rectsBytes[3]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[4],\\n                        rectsBytes[5],\\n                        rectsBytes[6],\\n                        rectsBytes[7]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[8],\\n                        rectsBytes[9],\\n                        rectsBytes[10],\\n                        rectsBytes[11]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[12],\\n                        rectsBytes[13],\\n                        rectsBytes[14],\\n                        rectsBytes[15]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[16],\\n                        rectsBytes[17],\\n                        rectsBytes[18],\\n                        rectsBytes[19]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[20],\\n                        rectsBytes[21],\\n                        rectsBytes[22],\\n                        rectsBytes[23]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[24],\\n                        rectsBytes[25],\\n                        rectsBytes[26],\\n                        rectsBytes[27]\\n                    )\\n                ),\\n                decodeRect(\\n                    bytes.concat(\\n                        rectsBytes[28],\\n                        rectsBytes[29],\\n                        rectsBytes[30],\\n                        rectsBytes[31]\\n                    )\\n                )\\n            );\\n    }\\n\\n    function decode32Rects(bytes memory rectsBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 0)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 32)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 64)),\\n                decode8Rects(BytesLib.toBytes32(rectsBytes, 96))\\n            );\\n    }\\n\\n    /// @dev Decode the rect and returns it as a plain string to be used in the svg rect attribute.\\n    ///      One rect is 4 bytes so 8 rects is a bytes32.\\n    ///      With 20 bytes32, we have up to 160 rects per trait / co-bots actually if we concat the bytes first.\\n    ///      This magic number comes from a small data analysis of the traits. We use the fact that an empty\\n    ///      bytes32 will lead to an empty rect (width and height 0).\\n    function getTrait(bytes memory traitEncodedBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        // buffer is 20 * 32 bytes = up to 160 rects\\n        bytes memory buffer = bytes.concat(\\n            traitEncodedBytes,\\n            new bytes(640 - traitEncodedBytes.length)\\n        );\\n        return\\n            string.concat(\\n                SVG_TAG_START,\\n                decode32Rects(BytesLib.slice(buffer, 0, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 128, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 256, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 384, 128)),\\n                decode32Rects(BytesLib.slice(buffer, 512, 128)),\\n                SVG_TAG_END\\n            );\\n    }\\n\\n    function getImageURI(bytes memory traitEncodedBytes)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\\"data:image/svg+xml,\\\", getTrait(traitEncodedBytes));\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////  Co-bots  ////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n    function getRandomItems(uint256 tokenId, uint8 seed)\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        uint256 randomBotMemory = uint256(\\n            keccak256(abi.encodePacked(tokenId, seed))\\n        );\\n\\n        // Eyes\\n        uint256 randomEyes = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        eyesIndex = randomEyes < 25\\n            ? 11\\n            : (randomEyes < 75 ? 10 : randomEyes % 10);\\n\\n        // Mouth\\n        uint256 randomMouth = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        mouthIndex = randomMouth < 50 ? 10 : randomMouth % 10;\\n\\n        // Antenna\\n        uint256 randomAntenna = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        antennaIndex = randomAntenna < 50\\n            ? 10\\n            : (randomAntenna < 75 ? 11 : randomAntenna % 10);\\n\\n        // Feet\\n        uint256 randomFeet = randomBotMemory % 10_000;\\n        randomBotMemory >>= 14;\\n        feetIndex = randomFeet < 50 ? 10 : randomFeet % 10;\\n    }\\n\\n    function getToadItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 12, 6);\\n    }\\n\\n    function getNounishItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 13, 0);\\n    }\\n\\n    function getWizardItems()\\n        public\\n        pure\\n        returns (\\n            uint256 eyesIndex,\\n            uint256 mouthIndex,\\n            uint256 antennaIndex,\\n            uint256 feetIndex\\n        )\\n    {\\n        return (0, 0, 14, 9);\\n    }\\n\\n    function getCoBotItems(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) public pure returns (uint256[10] memory) {\\n        uint256 eyesIndex;\\n        uint256 mouthIndex;\\n        uint256 antennaIndex;\\n        uint256 feetIndex;\\n        if (tokenId == 0) {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getToadItems();\\n        } else if (tokenId == 1) {\\n            (\\n                eyesIndex,\\n                mouthIndex,\\n                antennaIndex,\\n                feetIndex\\n            ) = getNounishItems();\\n        } else if (tokenId == 2) {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getWizardItems();\\n        } else {\\n            (eyesIndex, mouthIndex, antennaIndex, feetIndex) = getRandomItems(\\n                tokenId,\\n                seed\\n            );\\n        }\\n\\n        uint256[10] memory items;\\n        // 0. Colour\\n        items[0] = color ? 0 : 1;\\n        // 1. Digit 1\\n        items[1] = tokenId / 1000;\\n        // 2. Digit 2\\n        items[2] = (tokenId / 100) % 10;\\n        // 3. Digit 3\\n        items[3] = (tokenId / 10) % 10;\\n        // 4. Digit 4\\n        items[4] = tokenId % 10;\\n        // 5. Eyes\\n        items[5] = eyesIndex;\\n        // 6. Mouth\\n        items[6] = mouthIndex;\\n        // 7. Antenna\\n        items[7] = antennaIndex;\\n        // 8. Status\\n        items[8] = status ? 1 : 0;\\n        // 9. Feet\\n        items[9] = feetIndex;\\n        return items;\\n    }\\n\\n    function getCoBotBytes(uint256[10] memory items)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            bytes.concat(\\n                getTraitBytes(getTraitIndex(0, items[0])),\\n                getTraitBytes(getTraitIndex(1, items[1])),\\n                getTraitBytes(getTraitIndex(2, items[2])),\\n                getTraitBytes(getTraitIndex(3, items[3])),\\n                getTraitBytes(getTraitIndex(4, items[4])),\\n                getTraitBytes(getTraitIndex(5, items[5])),\\n                getTraitBytes(getTraitIndex(6, items[6])),\\n                getTraitBytes(getTraitIndex(7, items[7])),\\n                items[8] == 1\\n                    ? new bytes(4)\\n                    : getTraitBytes(getTraitIndex(8, items[8])),\\n                getTraitBytes(getTraitIndex(9, items[9]))\\n            );\\n    }\\n\\n    function getCoBotImageURI(uint256[10] memory items)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return getImageURI(getCoBotBytes(items));\\n    }\\n\\n    function getCoBotAttributes(\\n        uint256[10] memory items,\\n        bool status,\\n        bool color\\n    ) public pure returns (string memory) {\\n        string[12] memory eyes = [\\n            \\\"Classic\\\", // 0\\n            \\\"Cyclops\\\", // 1\\n            \\\"Awoken\\\", // 2\\n            \\\"Flirty\\\", // 3\\n            \\\"Zen\\\", // 4\\n            \\\"Sadhappy\\\", // 5\\n            \\\"Unaligned\\\", // 6\\n            \\\"Smitten\\\", // 7\\n            \\\"Optimistic\\\", // 8\\n            \\\"Hacky\\\", // 9\\n            \\\"Super\\\", // 50 times\\n            \\\"Nounish\\\" // 25 times\\n        ];\\n        string[11] memory mouths = [\\n            \\\"Classic\\\", // 0\\n            \\\"Worried\\\", // 1\\n            \\\"Knightly\\\", // 2\\n            \\\"Shy\\\", // 3\\n            \\\"Happy\\\", // 4\\n            \\\"Bigsad\\\", // 5\\n            \\\"Smug\\\", // 6\\n            \\\"Wowed\\\", // 7\\n            \\\"Thirsty\\\", // 8\\n            \\\"Villainous\\\", // 9\\n            \\\"Shady\\\" // 50 times\\n        ];\\n        string[15] memory antennas = [\\n            \\\"Classic\\\", // 0\\n            \\\"Serious\\\", // 1\\n            \\\"Jumpy\\\", // 2\\n            \\\"Buzzed\\\", // 3\\n            \\\"Buggy\\\", // 4\\n            \\\"Punk\\\", // 5\\n            \\\"Angelic\\\", // 6\\n            \\\"Impish\\\", // 7\\n            \\\"Humbled\\\", // 8\\n            \\\"Western\\\", // 9\\n            \\\"Royal\\\", // 50 times\\n            \\\"Hacky\\\", // 25 times\\n            \\\"!croak\\\", // 1 time\\n            \\\"Nounish\\\", // 1 time\\n            \\\"Wizard\\\" // 1 time\\n        ];\\n        string[11] memory feet = [\\n            \\\"Classic\\\", // 0\\n            \\\"Heavy Duty\\\", // 1\\n            \\\"Firey\\\", // 2\\n            \\\"Little Firey\\\", // 3\\n            \\\"Roller\\\", // 4\\n            \\\"Little Roller\\\", // 5\\n            \\\"Energetic\\\", // 6\\n            \\\"Little Energetic\\\", // 7\\n            \\\"Hobbled\\\", // 8\\n            \\\"Ghostly\\\", // 9\\n            \\\"Pushy\\\" // 50 times\\n        ];\\n        return\\n            string.concat(\\n                \\\"[\\\",\\n                items[7] > 11 ? \\\"\\\" : '{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"',\\n                items[7] > 11 ? \\\"\\\" : eyes[items[5]],\\n                items[7] > 11 ? \\\"\\\" : '\\\"},',\\n                items[7] > 11 ? \\\"\\\" : '{\\\"trait_type\\\": \\\"Mouth\\\", \\\"value\\\": \\\"',\\n                items[7] > 11 ? \\\"\\\" : mouths[items[6]],\\n                items[7] > 11 ? \\\"\\\" : '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Antenna\\\", \\\"value\\\": \\\"',\\n                antennas[items[7]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Feet\\\", \\\"value\\\": \\\"',\\n                feet[items[9]],\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Status\\\", \\\"value\\\": \\\"',\\n                status ? \\\"Online\\\" : \\\"Offline\\\",\\n                '\\\"},',\\n                '{\\\"trait_type\\\": \\\"Color\\\", \\\"value\\\": \\\"',\\n                color ? \\\"Blue\\\" : \\\"Red\\\",\\n                '\\\"}',\\n                \\\"]\\\"\\n            );\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) public view returns (string memory) {\\n        uint256[10] memory items = getCoBotItems(tokenId, seed, status, color);\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image_data\\\": \\\"',\\n                getCoBotImageURI(items),\\n                '\\\"',\\n                ',\\\"description\\\": \\\"Co-Bots are cooperation robots | CC0 & 100% On-Chain | co-bots.com.\\\"',\\n                ',\\\"name\\\": \\\"Co-Bot #',\\n                tokenId.toString(),\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                getCoBotAttributes(items, status, color),\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Integers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICoBotsRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\ninterface ICoBotsRenderer {\\n    function tokenURI(\\n        uint256 tokenId,\\n        uint8 seed,\\n        bool status,\\n        bool color\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/Integers.sol\": {\r\n        \"Integers\": \"0xe5d03576716d2d66becf01a3f3bc7b80eb05952e\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITS_PER_COORDINATES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_PER_FILL_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"}],\"name\":\"decode32Rects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rectsBytes\",\"type\":\"bytes32\"}],\"name\":\"decode8Rects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectBytes\",\"type\":\"bytes\"}],\"name\":\"decodeRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectBytes\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"offsetX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offsetY\",\"type\":\"uint8\"}],\"name\":\"decodeRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"getCoBotAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"items\",\"type\":\"uint256[10]\"}],\"name\":\"getCoBotImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"getCoBotItems\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"traitEncodedBytes\",\"type\":\"bytes\"}],\"name\":\"getImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNounishItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"}],\"name\":\"getRandomItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToadItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"traitEncodedBytes\",\"type\":\"bytes\"}],\"name\":\"getTrait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWizardItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eyesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antennaIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerIndexes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_fillPalette\",\"type\":\"bytes\"}],\"name\":\"setFillPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_layerIndexes\",\"type\":\"bytes\"}],\"name\":\"setLayerIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPalette\",\"type\":\"bytes\"}],\"name\":\"setTraitPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPaletteIndexes\",\"type\":\"bytes\"}],\"name\":\"setTraitPaletteIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"seed\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"color\",\"type\":\"bool\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPaletteIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoBotsRenderer", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}