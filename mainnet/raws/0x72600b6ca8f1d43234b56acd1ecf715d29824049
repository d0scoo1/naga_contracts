{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * mul \r\n     * @dev Safe math multiply function\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n   * add\r\n   * @dev Safe math addition function\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable has an owner address to simplify \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address payable public owner;\r\n\r\n  /**\r\n   * Ownable\r\n   * @dev Ownable constructor sets the `owner` of the contract to sender\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * ownerOnly\r\n   * @dev Throws an error if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the WILD Token contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * @title ShaktiioICO\r\n * @dev ShaktiioICO contract is Ownable\r\n **/\r\ncontract ShaktiioICO is Ownable {\r\n  using SafeMath for uint256;\r\n  Token private token;\r\n  uint256 public START;\r\n  // ICO Varibales\r\n  uint256 public constant RATE = 22222; // Number of tokens per Ether\r\n  uint256 public raisedAmount = 0;\r\n  bool public initialized = false;\r\n    \r\n  uint256 public constant CAP = 25200; // Cap in Ether\r\n  uint256 public constant DAYS = 60; // 60 Day\r\n  uint256 public constant initialTokens = 560000000 * 10**18; // Initial number of tokens available\r\n\r\n\r\n  \r\n  /**\r\n   * BoughtTokens\r\n   * @dev Log tokens bought onto the blockchain\r\n   */\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  /**\r\n   * whenSaleIsActive\r\n   * @dev ensures that the contract is still active\r\n   **/\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    require(isActive(), \"ICO Sale is not active\");\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * ShaktiioICO\r\n   * @dev LavevelICO constructor\r\n   **/\r\n  constructor(address _tokenAddr) public {\r\n      require(_tokenAddr == address(_tokenAddr), \"Invalid token address\");\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  /**\r\n   * initialize\r\n   * @dev Initialize the contract\r\n   **/\r\n  function initialize() public onlyOwner {\r\n      require(initialized == false, \"Can only be initialized once\");\r\n      require(tokensAvailable() >= initialTokens, \"Must have enough tokens allocated\");\r\n      START = now;\r\n      initialized = true;\r\n  }\r\n\r\n  /**\r\n   * isActive\r\n   * @dev Determins if the contract is still active\r\n   **/\r\n  function isActive() public view returns (bool) {\r\n    return (\r\n        initialized == true &&\r\n        now >= START && // Must be after the START date\r\n        now <= START.add(DAYS * 1 days) && // Must be before the end date\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  /**\r\n   * goalReached\r\n   * @dev Function to determin is goal has been reached\r\n   **/\r\n  function goalReached() public view returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function if ether is sent to address insted of buyTokens function\r\n   **/\r\n  function () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * buyTokens\r\n   * @dev function that sells available tokens\r\n   **/\r\n  function buyTokens() public payable whenSaleIsActive {\r\n    uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n    \r\n    emit BoughtTokens(msg.sender, tokens); // log event onto the blockchain\r\n    raisedAmount = raisedAmount.add(msg.value); // Increment raised amount\r\n    token.transfer(msg.sender, tokens); // Send tokens to buyer\r\n    \r\n    owner.transfer(msg.value);// Send money to owner\r\n  }\r\n\r\n  /**\r\n   * tokensAvailable\r\n   * @dev returns the number of tokens allocated to this contract\r\n   **/\r\n  function tokensAvailable() public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * destroy\r\n   * @notice Terminate contract and refund to owner\r\n   **/\r\n  function destroy() onlyOwner public {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(address(this));\r\n    if(balance > 0) {\r\n        token.transfer(owner, balance);\r\n    }\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(owner);\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"}]", "ContractName": "ShaktiioICO", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cdf1a51260861804ffe06e96becd8bcd4d018976", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9604548d0f5f90207d1dcacc582a4dbbbafad733f969feb275820ed3e25684d4"}]}