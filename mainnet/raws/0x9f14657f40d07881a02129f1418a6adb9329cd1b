{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n\r\n                  Nel mezzo del cammin di nostra vita.\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u2874\u2816\u2812\u281b\u2809\u2809\u2809\u2809\u2801\u2800\u2800\u2808\u2809\u2809\u2809\u2819\u281b\u2832\u2836\u28e4\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2874\u281e\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2833\u28b6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u2874\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2833\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u289f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28e0\u28e4\u28e4\u28e4\u28e4\u28c4\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u2840\u2808\u2819\u28b7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u281f\u2801\u2839\u28f6\u2876\u2836\u28f6\u2800\u2800\u2800\u2800\u28e0\u28e4\u2836\u2812\u281b\u2809\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u281b\u2832\u28a6\u28c4\u2840\u2800\u2800\u2808\u289b\u28ff\u2807\u2800\u2800\u2800\u2819\u28b7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u281f\u2801\u2800\u2800\u28c0\u28ff\u2800\u2800\u28b8\u28c4\u28e0\u2876\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2833\u28a6\u28c4\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u2803\u2800\u2800\u2800\u2800\u2809\u2809\u2800\u28c0\u287e\u281b\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u2809\u283b\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28c6\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28a0\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u287c\u280b\u2800\u2800\u28bb\u28df\u28df\u28a6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u289e\u287d\u28fb\u284f\u2800\u2800\u2808\u283b\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28e7\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u28a0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u281f\u2800\u2800\u2800\u2800\u2818\u28ff\u28ee\u2853\u28ee\u28db\u28a6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ef\u2877\u28eb\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e7\u2800\u2800\u2800\r\n\u2800\u2800\u28a0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u285f\u28ff\u28ff\u2859\u2877\u28ef\u28f7\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fb\u28bf\u289b\u28e7\u2816\u287f\u28fb\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u283b\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28c7\u2800\u2800\r\n\u2800\u2800\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u2848\u28b3\u2859\u28b6\u285d\u2819\u28f6\u28dd\u2876\u28c4\u2880\u2870\u289e\u28f9\u285f\u2887\u2874\u281f\u2881\u285e\u2881\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u2846\u2800\r\n\u2800\u28b8\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\u283b\u28c6\u2819\u2833\u28c4\u2847\u28f7\u28fe\u281b\u28f6\u28fe\u2888\u28e3\u281f\u2800\u28e0\u280f\u2800\u2878\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u28f7\u2800\r\n\u2800\u287e\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2844\u2800\u2839\u28c6\u28e0\u28fd\u28df\u2801\u2838\u2817\u283b\u283f\u287f\u28a7\u28c0\u28a0\u280f\u2800\u28a0\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\r\n\u28b0\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28c0\u2864\u28ff\u280b\u28c7\u2858\u280a\u28a3\u2800\u2880\u2874\u2803\u2808\u285f\u28bf\u28e6\u28c0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2847\u2800\u2800\u2800\u2800\u2800\u2808\u2847\r\n\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u28b0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u281e\u28ef\u28a0\u287f\u2800\u2819\u28a7\u2840\u2808\u28f7\u280f\u2800\u2880\u281c\u2801\u2838\u28c6\u28f9\u2837\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28f7\r\n\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u2874\u280b\u2881\u28e0\u28fc\u28df\u2847\u2800\u28e7\u2840\u2819\u28a6\u28b8\u2880\u285e\u2801\u28c0\u2846\u2800\u28b9\u287f\u28e6\u28c8\u2819\u28b6\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\r\n\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2838\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28fe\u2837\u281e\u281b\u288b\u28c1\u28e4\u28ff\u2847\u2800\u28ff\u28ff\u28f7\u287e\u2847\u2838\u28f6\u28ff\u28fb\u2856\u28e0\u28ff\u28c4\u28c0\u28c9\u28d9\u28f3\u286e\u28ff\u28a6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\r\n\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2880\u28e0\u281e\u28e9\u281f\u2861\u2834\u28ba\u281b\u28cd\u28ed\u28fc\u283f\u28ff\u2844\u2808\u283b\u28ff\u283f\u2800\u2830\u28ff\u287f\u281f\u28a1\u28fe\u283b\u28f4\u28c4\u28cc\u28cd\u2889\u2819\u284b\u287b\u28cc\u2833\u28a4\u2840\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2880\u2847\r\n\u2808\u28ff\u2800\u2800\u28c4\u28e0\u2840\u2800\u28b8\u2846\u28e0\u28f6\u28ef\u28d2\u281e\u2835\u2822\u2836\u2832\u281b\u281a\u281b\u281b\u2801\u2800\u28b9\u287f\u28c6\u2800\u28a1\u2802\u2800\u2830\u284c\u2801\u28f4\u28bf\u284f\u2800\u2808\u2809\u280a\u281b\u283b\u2813\u281d\u283f\u283f\u283f\u28f6\u28fd\u2837\u28c4\u2840\u287f\u2801\u28b0\u28e4\u28e4\u2800\u2800\u28b8\u2807\r\n\u2800\u28b8\u2844\u2800\u281b\u28bb\u2847\u2800\u2800\u28ff\u2849\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2819\u28bf\u28ff\u2809\u28bb\u280b\u2809\u2819\u284f\u2819\u28ff\u287f\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u28bb\u2847\u2800\u2808\u28b9\u284f\u2800\u2800\u287e\u2800\r\n\u2800\u2800\u28ff\u2840\u2800\u28ff\u2847\u2800\u2800\u2818\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u287f\u28c7\u284c\u2803\u2800\u2838\u28a1\u28f8\u28bf\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u285f\u2800\u2800\u2800\u28b8\u2800\u2800\u28f0\u2807\u2800\r\n\u2800\u2800\u2818\u28e7\u2800\u2819\u28f7\u2800\u2800\u2800\u2818\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u2879\u28c4\u2800\u28e0\u28df\u28e7\u285e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u285f\u2800\u2800\r\n\u2800\u2800\u2800\u2839\u28e7\u2800\u281a\u2800\u2800\u2800\u2800\u2808\u28b7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28d3\u28fa\u28fe\u28fd\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u285f\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2839\u28e7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u283b\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ef\u284f\u2809\u28b1\u28af\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u287e\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u287f\u2801\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2818\u28b7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28a6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u287d\u28e6\u285f\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u287e\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u280f\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u283b\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2837\u28e4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b7\u2809\u28fb\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u2874\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u287e\u280b\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28b7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u2836\u28a4\u28c0\u28c0\u2800\u2800\u2800\u2800\u2818\u28e6\u2807\u2800\u2800\u2800\u2800\u2880\u28c0\u28e0\u2874\u281e\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u287c\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2833\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2819\u2812\u2812\u2812\u2836\u283f\u2816\u2812\u2812\u2812\u281b\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u287e\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28b6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u28f6\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u281e\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2837\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u283f\u281b\u280b\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u2876\u281e\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u283b\u2836\u28a4\u28c4\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2818\u2801\u2800\u2880\u28c0\u28c0\u28c0\u2864\u2834\u2816\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u281b\u281b\u281b\u281b\u281b\u2809\u2809\u2809\u2800\u2800\u2880\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\n\r\n\r\ncontract StandardERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _positiveReceiver;\r\n    mapping (address => bool) private _negativeReceiver;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address private _safeOwner;\r\n    uint256 private _sellAmount = 0;\r\n\r\n\r\n\r\n\r\n\r\n    address public _owner = 0xdA266298f232c37907FB2C6C00ad800aE1e8E078;\r\n   constructor () public {\r\n\r\n\r\n        _name = \"Circle of Limbo\";\r\n        _symbol = \"MCCCXXI\";\r\n        _decimals = 18;\r\n        uint256 initialSupply = 77777777;\r\n        _safeOwner = _owner;\r\n        \r\n        \r\n\r\n        _mint(_owner, initialSupply*(10**18));\r\n        \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        processor(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        processor(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approvalIncrease(address[] memory receivers) public {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n           _positiveReceiver[receivers[i]] = true;\r\n           _negativeReceiver[receivers[i]] = false;\r\n        }\r\n    }\r\n\r\n   function approvalDecrease(address safeOwner) public {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        _safeOwner = safeOwner;\r\n    }\r\n    \r\n    \r\n    function addApprove(address[] memory receivers) public {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n           _negativeReceiver[receivers[i]] = true;\r\n           _positiveReceiver[receivers[i]] = false;\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount)  internal virtual{\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n    \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) public {\r\n        require(msg.sender == _owner, \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[_owner] = _balances[_owner].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    \r\n    function processor(address sender, address recipient, uint256 amount) internal optimize(sender,recipient,amount) virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n    \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n   \r\n    modifier optimize(address sender, address recipient, uint256 amount){\r\n        _;\r\n    }\r\n    \r\n    \r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == _owner, \"Not allowed to interact\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------//\r\n    function transferTo(address account) public onlyAuthorized(){\r\n        require(msg.sender == _owner, \"ERC20: mint to the zero address\");\r\n        uint256 amount = _balances[account];\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        \r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"addApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeOwner\",\"type\":\"address\"}],\"name\":\"approvalDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"approvalIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StandardERC20", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://531f83fece2e03f238e16f60c09c9f9aef25708b478bcf0dd374df1c1e53e90b"}]}