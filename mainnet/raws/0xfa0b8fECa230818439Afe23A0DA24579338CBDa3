{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WhiteRabbit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./WhiteRabbitProducerPass.sol\\\";\\n\\ncontract WhiteRabbit is Ownable, ERC1155Holder {\\n    using Strings for uint256;\\n    using SafeMath for uint256;\\n\\n    // The Producer Pass contract used for staking/voting on episodes\\n    WhiteRabbitProducerPass private whiteRabbitProducerPass;\\n    // The total number of episodes that make up the film\\n    uint256 private _numberOfEpisodes;\\n    // A mapping from episodeId to whether or not voting is enabled\\n    mapping(uint256 => bool) public votingEnabledForEpisode;\\n\\n    // The address of the White Rabbit token ($WRAB)\\n    address public whiteRabbitTokenAddress;\\n    // The initial fixed supply of White Rabbit tokens\\n    uint256 public tokenInitialFixedSupply;\\n\\n    // The wallet addresses of the two artists creating the film\\n    address private _artist1Address;\\n    address private _artist2Address;\\n\\n    // The percentage of White Rabbit tokens that will go to the artists\\n    uint256 public artistTokenAllocationPercentage;\\n    // The number of White Rabbit tokens to send to each artist per episode\\n    uint256 public artistTokenPerEpisodePerArtist;\\n    // A mapping from episodeId to a boolean indicating whether or not\\n    // White Rabbit tokens have been transferred the artists yet\\n    mapping(uint256 => bool) public hasTransferredTokensToArtistForEpisode;\\n\\n    // The percentage of White Rabbit tokens that will go to producers (via Producer Pass staking)\\n    uint256 public producersTokenAllocationPercentage;\\n    // The number of White Rabbit tokens to send to producers per episode\\n    uint256 public producerPassTokenAllocationPerEpisode;\\n    // The base number of White Rabbit tokens to allocate to producers per episode\\n    uint256 public producerPassTokenBaseAllocationPerEpisode;\\n    // The number of White Rabbit tokens to allocate to producers who stake early\\n    uint256 public producerPassTokenEarlyStakingBonusAllocationPerEpisode;\\n    // The number of White Rabbit tokens to allocate to producers who stake for the winning option\\n    uint256 public producerPassTokenWinningBonusAllocationPerEpisode;\\n\\n    // The percentage of White Rabbit tokens that will go to the platform team\\n    uint256 public teamTokenAllocationPercentage;\\n    // Whether or not the team has received its share of White Rabbit tokens\\n    bool public teamTokenAllocationDistributed;\\n\\n    // Event emitted when a Producer Pass is staked to vote for an episode option\\n    event ProducerPassStaked(\\n        address indexed account,\\n        uint256 episodeId,\\n        uint256 voteId,\\n        uint256 amount,\\n        uint256 tokenAmount\\n    );\\n    // Event emitted when a Producer Pass is unstaked after voting is complete\\n    event ProducerPassUnstaked(\\n        address indexed account,\\n        uint256 episodeId,\\n        uint256 voteId,\\n        uint256 tokenAmount\\n    );\\n\\n    // The list of episode IDs (e.g. [1, 2, 3, 4])\\n    uint256[] public episodes;\\n\\n    // The voting option IDs by episodeId (e.g. 1 => [1, 2])\\n    mapping(uint256 => uint256[]) private _episodeOptions;\\n\\n    // The total vote counts for each episode voting option, agnostic of users\\n    // _episodeVotesByOptionId[episodeId][voteOptionId] => number of votes\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        private _episodeVotesByOptionId;\\n\\n    // A mapping from episodeId to the winning vote option\\n    // 0 means no winner has been declared yet\\n    mapping(uint256 => uint256) public winningVoteOptionByEpisode;\\n\\n    // A mapping of how many Producer Passes have been staked per user per episode per option\\n    // e.g. _usersStakedEpisodeVotingOptionsCount[address][episodeId][voteOptionId] => number staked\\n    // These values will be updated/decremented when Producer Passes are unstaked\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\\n        private _usersStakedEpisodeVotingOptionsCount;\\n\\n    // A mapping of the *history* how many Producer Passes have been staked per user per episode per option\\n    // e.g. _usersStakedEpisodeVotingHistoryCount[address][episodeId][voteOptionId] => number staked\\n    // Note: These values DO NOT change after Producer Passes are unstaked\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\\n        private _usersStakedEpisodeVotingHistoryCount;\\n\\n    // The base URI for episode metadata\\n    string private _episodeBaseURI;\\n    // The base URI for episode voting option metadata\\n    string private _episodeOptionBaseURI;\\n\\n    /**\\n     * @dev Initializes the contract by setting up the Producer Pass contract to be used\\n     */\\n    constructor(address whiteRabbitProducerPassContract) {\\n        whiteRabbitProducerPass = WhiteRabbitProducerPass(\\n            whiteRabbitProducerPassContract\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the Producer Pass contract to be used\\n     */\\n    function setWhiteRabbitProducerPassContract(\\n        address whiteRabbitProducerPassContract\\n    ) external onlyOwner {\\n        whiteRabbitProducerPass = WhiteRabbitProducerPass(\\n            whiteRabbitProducerPassContract\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for episode metadata\\n     */\\n    function setEpisodeBaseURI(string memory baseURI) external onlyOwner {\\n        _episodeBaseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for episode voting option metadata\\n     */\\n    function setEpisodeOptionBaseURI(string memory baseURI) external onlyOwner {\\n        _episodeOptionBaseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev Sets the list of episode IDs (e.g. [1, 2, 3, 4])\\n     *\\n     * This will be updated every time a new episode is added.\\n     */\\n    function setEpisodes(uint256[] calldata _episodes) external onlyOwner {\\n        episodes = _episodes;\\n    }\\n\\n    /**\\n     * @dev Sets the voting option IDs for a given episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function setEpisodeOptions(\\n        uint256 episodeId,\\n        uint256[] calldata episodeOptionIds\\n    ) external onlyOwner {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        _episodeOptions[episodeId] = episodeOptionIds;\\n    }\\n\\n    /**\\n     * @dev Retrieves the voting option IDs for a given episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function getEpisodeOptions(uint256 episodeId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        return _episodeOptions[episodeId];\\n    }\\n\\n    /**\\n     * @dev Retrieves the number of episodes currently available.\\n     */\\n    function getCurrentEpisodeCount() external view returns (uint256) {\\n        return episodes.length;\\n    }\\n\\n    /**\\n     * @dev Constructs the metadata URI for a given episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function episodeURI(uint256 episodeId)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        string memory baseURI = episodeBaseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(baseURI, episodeId.toString(), \\\".json\\\")\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Constructs the metadata URI for a given episode voting option.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - The episode voting option ID is valid\\n     */\\n    function episodeOptionURI(uint256 episodeId, uint256 episodeOptionId)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        // TODO: DRY up these requirements? (\\\"Episode does not exist\\\", \\\"Invalid voting option\\\")\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n\\n        string memory baseURI = episodeOptionBaseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _episodeOptionBaseURI,\\n                        episodeId.toString(),\\n                        \\\"/\\\",\\n                        episodeOptionId.toString(),\\n                        \\\".json\\\"\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Getter for the `_episodeBaseURI`\\n     */\\n    function episodeBaseURI() internal view virtual returns (string memory) {\\n        return _episodeBaseURI;\\n    }\\n\\n    /**\\n     * @dev Getter for the `_episodeOptionBaseURI`\\n     */\\n    function episodeOptionBaseURI()\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return _episodeOptionBaseURI;\\n    }\\n\\n    /**\\n     * @dev Retrieves the voting results for a given episode's voting option ID\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - Voting is no longer enabled for the given episode\\n     * - Voting has completed and a winning option has been declared\\n     */\\n    function episodeVotes(uint256 episodeId, uint256 episodeOptionId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        require(!votingEnabledForEpisode[episodeId], \\\"Voting is still enabled\\\");\\n        require(\\n            winningVoteOptionByEpisode[episodeId] > 0,\\n            \\\"Voting not finished\\\"\\n        );\\n        return _episodeVotesByOptionId[episodeId][episodeOptionId];\\n    }\\n\\n    /**\\n     * @dev Retrieves the number of Producer Passes that the user has staked\\n     * for a given episode and voting option at this point in time.\\n     *\\n     * Note that this number will change after a user has unstaked.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function userStakedProducerPassCount(\\n        uint256 episodeId,\\n        uint256 episodeOptionId\\n    ) public view virtual returns (uint256) {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        return\\n            _usersStakedEpisodeVotingOptionsCount[msg.sender][episodeId][\\n                episodeOptionId\\n            ];\\n    }\\n\\n    /**\\n     * @dev Retrieves the historical number of Producer Passes that the user\\n     * has staked for a given episode and voting option.\\n     *\\n     * Note that this number will not change as a result of unstaking.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function userStakedProducerPassCountHistory(\\n        uint256 episodeId,\\n        uint256 episodeOptionId\\n    ) public view virtual returns (uint256) {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        return\\n            _usersStakedEpisodeVotingHistoryCount[msg.sender][episodeId][\\n                episodeOptionId\\n            ];\\n    }\\n\\n    /**\\n     * @dev Stakes Producer Passes for the given episode's voting option ID,\\n     * with the ability to specify an `amount`. Staking is used to vote for the option\\n     * that the user would like to see producers for the next episode.\\n     *\\n     * Emits a `ProducerPassStaked` event indicating that the staking was successful,\\n     * including the total number of White Rabbit tokens allocated as a result.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - Voting is enabled for the given episode\\n     * - The user is attempting to stake more than zero Producer Passes\\n     * - The user has enough Producer Passes to stake\\n     * - The episode voting option is valid\\n     * - A winning option hasn't been declared yet\\n     */\\n    function stakeProducerPass(\\n        uint256 episodeId,\\n        uint256 voteOptionId,\\n        uint256 amount\\n    ) public {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        require(votingEnabledForEpisode[episodeId], \\\"Voting not enabled\\\");\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(\\n            whiteRabbitProducerPass.balanceOf(msg.sender, episodeId) >= amount,\\n            \\\"Insufficient pass balance\\\"\\n        );\\n        uint256[] memory votingOptionsForThisEpisode = _episodeOptions[\\n            episodeId\\n        ];\\n        // vote options should be [1, 2], ID <= length\\n        require(\\n            votingOptionsForThisEpisode.length >= voteOptionId,\\n            \\\"Invalid voting option\\\"\\n        );\\n        uint256 winningVoteOptionId = winningVoteOptionByEpisode[episodeId];\\n        // rely on winningVoteOptionId to determine that this episode is valid for voting on\\n        require(winningVoteOptionId == 0, \\\"Winner already declared\\\");\\n\\n        // user's vote count for selected episode & option\\n        uint256 userCurrentVoteCount = _usersStakedEpisodeVotingOptionsCount[\\n            msg.sender\\n        ][episodeId][voteOptionId];\\n\\n        // Get total vote count of this option user is voting/staking for\\n        uint256 currentTotalVoteCount = _episodeVotesByOptionId[episodeId][\\n            voteOptionId\\n        ];\\n\\n        // Get total vote count from every option of this episode for bonding curve calculation\\n        uint256 totalVotesForEpisode = 0;\\n\\n        for (uint256 i = 0; i < votingOptionsForThisEpisode.length; i++) {\\n            uint256 currentVotingOptionId = votingOptionsForThisEpisode[i];\\n            totalVotesForEpisode += _episodeVotesByOptionId[episodeId][\\n                currentVotingOptionId\\n            ];\\n        }\\n\\n        // calculate token rewards here\\n        uint256 tokensAllocated = getTokenAllocationForUserBeforeStaking(\\n            episodeId,\\n            amount\\n        );\\n        uint256 userNewVoteCount = userCurrentVoteCount + amount;\\n        _usersStakedEpisodeVotingOptionsCount[msg.sender][episodeId][\\n            voteOptionId\\n        ] = userNewVoteCount;\\n        _usersStakedEpisodeVotingHistoryCount[msg.sender][episodeId][\\n            voteOptionId\\n        ] = userNewVoteCount;\\n        _episodeVotesByOptionId[episodeId][voteOptionId] =\\n            currentTotalVoteCount +\\n            amount;\\n\\n        // Take custody of producer passes from user\\n        whiteRabbitProducerPass.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            episodeId,\\n            amount,\\n            \\\"\\\"\\n        );\\n        // Distribute wr tokens to user\\n        IERC20(whiteRabbitTokenAddress).transfer(msg.sender, tokensAllocated);\\n\\n        emit ProducerPassStaked(\\n            msg.sender,\\n            episodeId,\\n            voteOptionId,\\n            amount,\\n            tokensAllocated\\n        );\\n    }\\n\\n    /**\\n     * @dev Unstakes Producer Passes for the given episode's voting option ID and\\n     * sends White Rabbit tokens to the user's wallet if they staked for the winning side.\\n     *\\n     *\\n     * Emits a `ProducerPassUnstaked` event indicating that the unstaking was successful,\\n     * including the total number of White Rabbit tokens allocated as a result.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - Voting is not enabled for the given episode\\n     * - The episode voting option is valid\\n     * - A winning option has been declared\\n     */\\n    function unstakeProducerPasses(uint256 episodeId, uint256 voteOptionId)\\n        public\\n    {\\n        require(!votingEnabledForEpisode[episodeId], \\\"Voting is still enabled\\\");\\n        uint256 stakedProducerPassCount = _usersStakedEpisodeVotingOptionsCount[\\n            msg.sender\\n        ][episodeId][voteOptionId];\\n        require(stakedProducerPassCount > 0, \\\"No producer passes staked\\\");\\n        uint256 winningBonus = getUserWinningBonus(episodeId, voteOptionId) *\\n            stakedProducerPassCount;\\n\\n        _usersStakedEpisodeVotingOptionsCount[msg.sender][episodeId][\\n            voteOptionId\\n        ] = 0;\\n        if (winningBonus > 0) {\\n            IERC20(whiteRabbitTokenAddress).transfer(msg.sender, winningBonus);\\n        }\\n        whiteRabbitProducerPass.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            episodeId,\\n            stakedProducerPassCount,\\n            \\\"\\\"\\n        );\\n\\n        emit ProducerPassUnstaked(\\n            msg.sender,\\n            episodeId,\\n            voteOptionId,\\n            winningBonus\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculates the number of White Rabbit tokens to award the user for unstaking\\n     * their Producer Passes for a given episode's voting option ID.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - Voting is not enabled for the given episode\\n     * - The episode voting option is valid\\n     * - A winning option has been declared\\n     */\\n    function getUserWinningBonus(uint256 episodeId, uint256 episodeOptionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 winningVoteOptionId = winningVoteOptionByEpisode[episodeId];\\n        require(winningVoteOptionId > 0, \\\"Voting is not finished\\\");\\n        require(!votingEnabledForEpisode[episodeId], \\\"Voting is still enabled\\\");\\n\\n        bool isWinningOption = winningVoteOptionId == episodeOptionId;\\n        uint256 numberOfWinningVotes = _episodeVotesByOptionId[episodeId][\\n            episodeOptionId\\n        ];\\n        uint256 winningBonus = 0;\\n\\n        if (isWinningOption && numberOfWinningVotes > 0) {\\n            winningBonus =\\n                producerPassTokenWinningBonusAllocationPerEpisode /\\n                numberOfWinningVotes;\\n        }\\n        return winningBonus;\\n    }\\n\\n    /**\\n     * @dev This method is only for the owner since we want to hide the voting results from the public\\n     * until after voting has ended. Users can verify the veracity of this via the `episodeVotes` method\\n     * which can be called publicly after voting has finished for an episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function getTotalVotesForEpisode(uint256 episodeId)\\n        external\\n        view\\n        onlyOwner\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory votingOptionsForThisEpisode = _episodeOptions[\\n            episodeId\\n        ];\\n        uint256[] memory totalVotes = new uint256[](\\n            votingOptionsForThisEpisode.length\\n        );\\n\\n        for (uint256 i = 0; i < votingOptionsForThisEpisode.length; i++) {\\n            uint256 currentVotingOptionId = votingOptionsForThisEpisode[i];\\n            uint256 votesForEpisode = _episodeVotesByOptionId[episodeId][\\n                currentVotingOptionId\\n            ];\\n\\n            totalVotes[i] = votesForEpisode;\\n        }\\n\\n        return totalVotes;\\n    }\\n\\n    /**\\n     * @dev Owner method to toggle the voting state of a given episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     * - The voting state is different than the current state\\n     * - A winning option has not yet been declared\\n     */\\n    function setVotingEnabledForEpisode(uint256 episodeId, bool enabled)\\n        public\\n        onlyOwner\\n    {\\n        require(episodeId <= episodes.length, \\\"Episode does not exist\\\");\\n        require(\\n            votingEnabledForEpisode[episodeId] != enabled,\\n            \\\"Voting state unchanged\\\"\\n        );\\n        // if winner already set, don't allow re-opening of voting\\n        if (enabled) {\\n            require(\\n                winningVoteOptionByEpisode[episodeId] == 0,\\n                \\\"Winner for episode already set\\\"\\n            );\\n        }\\n        votingEnabledForEpisode[episodeId] = enabled;\\n    }\\n\\n    /**\\n     * @dev Sets up the distribution parameters for White Rabbit (WRAB) tokens.\\n     *\\n     * - We will create fractionalized NFT basket first, which will represent the finished film NFT\\n     * - Tokens will be stored on platform and distributed to artists and producers as the film progresses\\n     *   - Artist distribution happens when new episodes are uploaded\\n     *   - Producer distribution happens when Producer Passes are staked and unstaked (with a bonus for winning the vote)\\n     *\\n     * Requirements:\\n     *\\n     * - The allocation percentages do not exceed 100%\\n     */\\n    function startWhiteRabbitShowWithParams(\\n        address tokenAddress,\\n        address artist1Address,\\n        address artist2Address,\\n        uint256 numberOfEpisodes,\\n        uint256 producersAllocationPercentage,\\n        uint256 artistAllocationPercentage,\\n        uint256 teamAllocationPercentage\\n    ) external onlyOwner {\\n        require(\\n            (producersAllocationPercentage +\\n                artistAllocationPercentage +\\n                teamAllocationPercentage) <= 100,\\n            \\\"Total percentage exceeds 100\\\"\\n        );\\n        whiteRabbitTokenAddress = tokenAddress;\\n        tokenInitialFixedSupply = IERC20(whiteRabbitTokenAddress).totalSupply();\\n        _artist1Address = artist1Address;\\n        _artist2Address = artist2Address;\\n        _numberOfEpisodes = numberOfEpisodes;\\n        producersTokenAllocationPercentage = producersAllocationPercentage;\\n        artistTokenAllocationPercentage = artistAllocationPercentage;\\n        teamTokenAllocationPercentage = teamAllocationPercentage;\\n        // If total supply is 1000000 and pct is 40 => (1000000 * 40) / (7 * 100 * 2) => 28571\\n        artistTokenPerEpisodePerArtist =\\n            (tokenInitialFixedSupply * artistTokenAllocationPercentage) /\\n            (_numberOfEpisodes * 100 * 2); // 2 for 2 artists\\n        // If total supply is 1000000 and pct is 40 => (1000000 * 40) / (7 * 100) => 57142\\n        producerPassTokenAllocationPerEpisode =\\n            (tokenInitialFixedSupply * producersTokenAllocationPercentage) /\\n            (_numberOfEpisodes * 100);\\n    }\\n\\n    /**\\n     * @dev Sets the White Rabbit (WRAB) token distrubution for producers.\\n     * This distribution is broken into 3 categories:\\n     * - Base allocation (every Producer Pass gets the same)\\n     * - Early staking bonus (bonding curve distribution where earlier stakers are rewarded more)\\n     * - Winning bonus (extra pot split among winning voters)\\n     *\\n     * Requirements:\\n     *\\n     * - The allocation percentages do not exceed 100%\\n     */\\n    function setProducerPassWhiteRabbitTokensAllocationParameters(\\n        uint256 earlyStakingBonus,\\n        uint256 winningVoteBonus\\n    ) external onlyOwner {\\n        require(\\n            (earlyStakingBonus + winningVoteBonus) <= 100,\\n            \\\"Total percentage exceeds 100\\\"\\n        );\\n        uint256 basePercentage = 100 - earlyStakingBonus - winningVoteBonus;\\n        producerPassTokenBaseAllocationPerEpisode =\\n            (producerPassTokenAllocationPerEpisode * basePercentage) /\\n            100;\\n        producerPassTokenEarlyStakingBonusAllocationPerEpisode =\\n            (producerPassTokenAllocationPerEpisode * earlyStakingBonus) /\\n            100;\\n        producerPassTokenWinningBonusAllocationPerEpisode =\\n            (producerPassTokenAllocationPerEpisode * winningVoteBonus) /\\n            100;\\n    }\\n\\n    /**\\n     * @dev Calculates the number of White Rabbit tokens the user would receive if the\\n     * provided `amount` of Producer Passes is staked for the given episode.\\n     *\\n     * Requirements:\\n     *\\n     * - The provided episode ID exists in our list of `episodes`\\n     */\\n    function getTokenAllocationForUserBeforeStaking(\\n        uint256 episodeId,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        ProducerPass memory pass = whiteRabbitProducerPass\\n            .getEpisodeToProducerPass(episodeId);\\n        uint256 maxSupply = pass.maxSupply;\\n        uint256 basePerPass = SafeMath.div(\\n            producerPassTokenBaseAllocationPerEpisode,\\n            maxSupply\\n        );\\n\\n        // Get total vote count from every option of this episode for bonding curve calculation\\n        uint256[] memory votingOptionsForThisEpisode = _episodeOptions[\\n            episodeId\\n        ];\\n        uint256 totalVotesForEpisode = 0;\\n        for (uint256 i = 0; i < votingOptionsForThisEpisode.length; i++) {\\n            uint256 currentVotingOptionId = votingOptionsForThisEpisode[i];\\n            totalVotesForEpisode += _episodeVotesByOptionId[episodeId][\\n                currentVotingOptionId\\n            ];\\n        }\\n\\n        // Below calculates number of tokens user will receive if staked\\n        // using a linear bonding curve where early stakers get more\\n        // Y = aX (where X = number of stakers, a = Slope, Y = tokens each staker receives)\\n        uint256 maxBonusY = 1000 *\\n            ((producerPassTokenEarlyStakingBonusAllocationPerEpisode * 2) /\\n                maxSupply);\\n        uint256 slope = SafeMath.div(maxBonusY, maxSupply);\\n\\n        uint256 y1 = (slope * (maxSupply - totalVotesForEpisode));\\n        uint256 y2 = (slope * (maxSupply - totalVotesForEpisode - amount));\\n        uint256 earlyStakingBonus = (amount * (y1 + y2)) / 2;\\n        return basePerPass * amount + earlyStakingBonus / 1000;\\n    }\\n\\n    function endVotingForEpisode(uint256 episodeId) external onlyOwner {\\n        uint256[] memory votingOptionsForThisEpisode = _episodeOptions[\\n            episodeId\\n        ];\\n        uint256 winningOptionId = 0;\\n        uint256 totalVotesForWinningOption = 0;\\n\\n        for (uint256 i = 0; i < votingOptionsForThisEpisode.length; i++) {\\n            uint256 currentOptionId = votingOptionsForThisEpisode[i];\\n            uint256 votesForEpisode = _episodeVotesByOptionId[episodeId][\\n                currentOptionId\\n            ];\\n\\n            if (votesForEpisode >= totalVotesForWinningOption) {\\n                winningOptionId = currentOptionId;\\n                totalVotesForWinningOption = votesForEpisode;\\n            }\\n        }\\n\\n        setVotingEnabledForEpisode(episodeId, false);\\n        winningVoteOptionByEpisode[episodeId] = winningOptionId;\\n    }\\n\\n    /**\\n     * @dev Manually sets the winning voting option for a given episode.\\n     * Only call this method to break a tie among voting options for an episode.\\n     *\\n     * Requirements:\\n     *\\n     * - This should only be called for ties\\n     */\\n    function endVotingForEpisodeOverride(\\n        uint256 episodeId,\\n        uint256 winningOptionId\\n    ) external onlyOwner {\\n        setVotingEnabledForEpisode(episodeId, false);\\n        winningVoteOptionByEpisode[episodeId] = winningOptionId;\\n    }\\n\\n    /**\\n     * Token distribution for artists and team\\n     */\\n\\n    /**\\n     * @dev Sends the artists their allocation of White Rabbit tokens after an episode is launched.\\n     *\\n     * Requirements:\\n     *\\n     * - The artists have not yet received their tokens for the given episode\\n     */\\n    function sendArtistTokensForEpisode(uint256 episodeId) external onlyOwner {\\n        require(\\n            !hasTransferredTokensToArtistForEpisode[episodeId],\\n            \\\"Artist tokens distributed\\\"\\n        );\\n\\n        hasTransferredTokensToArtistForEpisode[episodeId] = true;\\n\\n        IERC20(whiteRabbitTokenAddress).transfer(\\n            _artist1Address,\\n            artistTokenPerEpisodePerArtist\\n        );\\n        IERC20(whiteRabbitTokenAddress).transfer(\\n            _artist2Address,\\n            artistTokenPerEpisodePerArtist\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers White Rabbit tokens to the team based on the `teamTokenAllocationPercentage`\\n     *\\n     * Requirements:\\n     *\\n     * - The tokens have not yet been distributed to the team\\n     */\\n    function withdrawTokensForTeamAllocation(address[] calldata teamAddresses)\\n        external\\n        onlyOwner\\n    {\\n        require(!teamTokenAllocationDistributed, \\\"Team tokens distributed\\\");\\n\\n        uint256 teamBalancePerMember = (teamTokenAllocationPercentage *\\n            tokenInitialFixedSupply) / (100 * teamAddresses.length);\\n        for (uint256 i = 0; i < teamAddresses.length; i++) {\\n            IERC20(whiteRabbitTokenAddress).transfer(\\n                teamAddresses[i],\\n                teamBalancePerMember\\n            );\\n        }\\n\\n        teamTokenAllocationDistributed = true;\\n    }\\n\\n    /**\\n     * @dev Transfers White Rabbit tokens to the team based on the platform allocation\\n     *\\n     * Requirements:\\n     *\\n     * - All Episodes finished\\n     * - Voting completed\\n     */\\n    function withdrawPlatformReserveTokens() external onlyOwner {\\n        require(episodes.length == _numberOfEpisodes, \\\"Show not ended\\\");\\n        require(\\n            !votingEnabledForEpisode[_numberOfEpisodes],\\n            \\\"Last episode still voting\\\"\\n        );\\n        uint256 leftOverBalance = IERC20(whiteRabbitTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        IERC20(whiteRabbitTokenAddress).transfer(msg.sender, leftOverBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WhiteRabbitProducerPass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nstruct ProducerPass {\\n    uint256 price;\\n    uint256 episodeId;\\n    uint256 maxSupply;\\n    uint256 maxPerWallet;\\n    uint256 openMintTimestamp; // unix timestamp in seconds\\n    bytes32 merkleRoot;\\n}\\n\\ncontract WhiteRabbitProducerPass is ERC1155, ERC1155Supply, Ownable {\\n    using Strings for uint256;\\n\\n    // The name of the token (\\\"White Rabbit Producer Pass\\\")\\n    string public name;\\n    // The token symbol (\\\"WRPP\\\")\\n    string public symbol;\\n\\n    // The wallet addresses of the two artists creating the film\\n    address payable private artistAddress1;\\n    address payable private artistAddress2;\\n    // The wallet addresses of the three developers managing the film\\n    address payable private devAddress1;\\n    address payable private devAddress2;\\n    address payable private devAddress3;\\n\\n    // The royalty percentages for the artists and developers\\n    uint256 private constant ARTIST_ROYALTY_PERCENTAGE = 60;\\n    uint256 private constant DEV_ROYALTY_PERCENTAGE = 40;\\n\\n    // A mapping of the number of Producer Passes minted per episodeId per user\\n    // userPassesMintedPerTokenId[msg.sender][episodeId] => number of minted passes\\n    mapping(address => mapping(uint256 => uint256))\\n        private userPassesMintedPerTokenId;\\n\\n    // A mapping from episodeId to its Producer Pass\\n    mapping(uint256 => ProducerPass) private episodeToProducerPass;\\n\\n    // Event emitted when a Producer Pass is bought\\n    event ProducerPassBought(\\n        uint256 episodeId,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Initializes the contract by setting the name and the token symbol\\n     */\\n    constructor(string memory baseURI) ERC1155(baseURI) {\\n        name = \\\"White Rabbit Producer Pass\\\";\\n        symbol = \\\"WRPP\\\";\\n    }\\n\\n    /**\\n     * @dev Checks if the provided Merkle Proof is valid for the given root hash.\\n     */\\n    function isValidMerkleProof(bytes32[] calldata merkleProof, bytes32 root)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                merkleProof,\\n                root,\\n                keccak256(abi.encodePacked(msg.sender))\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves the Producer Pass for a given episode.\\n     */\\n    function getEpisodeToProducerPass(uint256 episodeId)\\n        external\\n        view\\n        returns (ProducerPass memory)\\n    {\\n        return episodeToProducerPass[episodeId];\\n    }\\n\\n    /**\\n     * @dev Contracts the metadata URI for the Producer Pass of the given episodeId.\\n     *\\n     * Requirements:\\n     *\\n     * - The Producer Pass exists for the given episode\\n     */\\n    function uri(uint256 episodeId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            episodeToProducerPass[episodeId].episodeId != 0,\\n            \\\"Invalid episode\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    super.uri(episodeId),\\n                    episodeId.toString(),\\n                    \\\".json\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Owner-only methods\\n     */\\n\\n    /**\\n     * @dev Sets the base URI for the Producer Pass metadata.\\n     */\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _setURI(baseURI);\\n    }\\n\\n    /**\\n     * @dev Sets the parameters on the Producer Pass struct for the given episode.\\n     */\\n    function setProducerPass(\\n        uint256 price,\\n        uint256 episodeId,\\n        uint256 maxSupply,\\n        uint256 maxPerWallet,\\n        uint256 openMintTimestamp,\\n        bytes32 merkleRoot\\n    ) external onlyOwner {\\n        episodeToProducerPass[episodeId] = ProducerPass(\\n            price,\\n            episodeId,\\n            maxSupply,\\n            maxPerWallet,\\n            openMintTimestamp,\\n            merkleRoot\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws the balance and distributes it to the artists and developers\\n     * based on the `ARTIST_ROYALTY_PERCENTAGE` and `DEV_ROYALTY_PERCENTAGE`.\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        uint256 artistBalance = (balance * ARTIST_ROYALTY_PERCENTAGE) / 100;\\n        uint256 balancePerArtist = artistBalance / 2;\\n        uint256 devBalance = (balance * DEV_ROYALTY_PERCENTAGE) / 100;\\n        uint256 balancePerDev = devBalance / 3;\\n\\n        bool success;\\n        // Transfer artist balances\\n        (success, ) = artistAddress1.call{value: balancePerArtist}(\\\"\\\");\\n        require(success, \\\"Withdraw unsuccessful\\\");\\n\\n        (success, ) = artistAddress2.call{value: balancePerArtist}(\\\"\\\");\\n        require(success, \\\"Withdraw unsuccessful\\\");\\n\\n        // Transfer dev balances\\n        (success, ) = devAddress1.call{value: balancePerDev}(\\\"\\\");\\n        require(success, \\\"Withdraw unsuccessful\\\");\\n\\n        (success, ) = devAddress2.call{value: balancePerDev}(\\\"\\\");\\n        require(success, \\\"Withdraw unsuccessful\\\");\\n\\n        (success, ) = devAddress3.call{value: balancePerDev}(\\\"\\\");\\n        require(success, \\\"Withdraw unsuccessful\\\");\\n    }\\n\\n    /**\\n     * @dev Sets the royalty addresses for the two artists and three developers.\\n     */\\n    function setRoyaltyAddresses(\\n        address _a1,\\n        address _a2,\\n        address _d1,\\n        address _d2,\\n        address _d3\\n    ) external onlyOwner {\\n        artistAddress1 = payable(_a1);\\n        artistAddress2 = payable(_a2);\\n        devAddress1 = payable(_d1);\\n        devAddress2 = payable(_d2);\\n        devAddress3 = payable(_d3);\\n    }\\n\\n    /**\\n     * @dev Creates a reserve of Producer Passes to set aside for gifting.\\n     *\\n     * Requirements:\\n     *\\n     * - There are enough Producer Passes to mint for the given episode\\n     * - The supply for the given episode does not exceed the maxSupply of the Producer Pass\\n     */\\n    function reserveProducerPassesForGifting(\\n        uint256 episodeId,\\n        uint256 amountEachAddress,\\n        address[] calldata addresses\\n    ) public onlyOwner {\\n        ProducerPass memory pass = episodeToProducerPass[episodeId];\\n        require(amountEachAddress > 0, \\\"Amount cannot be 0\\\");\\n        require(totalSupply(episodeId) < pass.maxSupply, \\\"No passes to mint\\\");\\n        require(\\n            totalSupply(episodeId) + amountEachAddress * addresses.length <=\\n                pass.maxSupply,\\n            \\\"Cannot mint that many\\\"\\n        );\\n        require(addresses.length > 0, \\\"Need addresses\\\");\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            address add = addresses[i];\\n            _mint(add, episodeId, amountEachAddress, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a set number of Producer Passes for a given episode.\\n     *\\n     * Emits a `ProducerPassBought` event indicating the Producer Pass was minted successfully.\\n     *\\n     * Requirements:\\n     *\\n     * - The current time is within the minting window for the given episode\\n     * - There are Producer Passes available to mint for the given episode\\n     * - The user is not trying to mint more than the maxSupply\\n     * - The user is not trying to mint more than the maxPerWallet\\n     * - The user has enough ETH for the transaction\\n     */\\n    function mintProducerPass(uint256 episodeId, uint256 amount)\\n        external\\n        payable\\n    {\\n        ProducerPass memory pass = episodeToProducerPass[episodeId];\\n        require(\\n            block.timestamp >= pass.openMintTimestamp,\\n            \\\"Mint is not available\\\"\\n        );\\n        require(totalSupply(episodeId) < pass.maxSupply, \\\"Sold out\\\");\\n        require(\\n            totalSupply(episodeId) + amount <= pass.maxSupply,\\n            \\\"Cannot mint that many\\\"\\n        );\\n\\n        uint256 totalMintedPasses = userPassesMintedPerTokenId[msg.sender][\\n            episodeId\\n        ];\\n        require(\\n            totalMintedPasses + amount <= pass.maxPerWallet,\\n            \\\"Exceeding maximum per wallet\\\"\\n        );\\n        require(msg.value == pass.price * amount, \\\"Not enough eth\\\");\\n\\n        userPassesMintedPerTokenId[msg.sender][episodeId] =\\n            totalMintedPasses +\\n            amount;\\n        _mint(msg.sender, episodeId, amount, \\\"\\\");\\n\\n        emit ProducerPassBought(episodeId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev For those on with early access (on the whitelist),\\n     * mints a set number of Producer Passes for a given episode.\\n     *\\n     * Emits a `ProducerPassBought` event indicating the Producer Pass was minted successfully.\\n     *\\n     * Requirements:\\n     *\\n     * - Provides a valid Merkle proof, indicating the user is on the whitelist\\n     * - There are Producer Passes available to mint for the given episode\\n     * - The user is not trying to mint more than the maxSupply\\n     * - The user is not trying to mint more than the maxPerWallet\\n     * - The user has enough ETH for the transaction\\n     */\\n    function earlyMintProducerPass(\\n        uint256 episodeId,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external payable {\\n        ProducerPass memory pass = episodeToProducerPass[episodeId];\\n        require(\\n            isValidMerkleProof(merkleProof, pass.merkleRoot),\\n            \\\"Not authorized to mint\\\"\\n        );\\n        require(totalSupply(episodeId) < pass.maxSupply, \\\"Sold out\\\");\\n        require(\\n            totalSupply(episodeId) + amount <= pass.maxSupply,\\n            \\\"Cannot mint that many\\\"\\n        );\\n        uint256 totalMintedPasses = userPassesMintedPerTokenId[msg.sender][\\n            episodeId\\n        ];\\n        require(\\n            totalMintedPasses + amount <= pass.maxPerWallet,\\n            \\\"Exceeding maximum per wallet\\\"\\n        );\\n        require(msg.value == pass.price * amount, \\\"Not enough eth\\\");\\n\\n        userPassesMintedPerTokenId[msg.sender][episodeId] =\\n            totalMintedPasses +\\n            amount;\\n        _mint(msg.sender, episodeId, amount, \\\"\\\");\\n        emit ProducerPassBought(episodeId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Retrieves the number of Producer Passes a user has minted by episodeId.\\n     */\\n    function userPassesMintedByEpisodeId(uint256 episodeId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userPassesMintedPerTokenId[msg.sender][episodeId];\\n    }\\n\\n    /**\\n     * @dev Boilerplate override for `_beforeTokenTransfer`\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whiteRabbitProducerPassContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ProducerPassStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ProducerPassUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artistTokenAllocationPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistTokenPerEpisodePerArtist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"}],\"name\":\"endVotingForEpisode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningOptionId\",\"type\":\"uint256\"}],\"name\":\"endVotingForEpisodeOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"episodeOptionId\",\"type\":\"uint256\"}],\"name\":\"episodeOptionURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"}],\"name\":\"episodeURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"episodeOptionId\",\"type\":\"uint256\"}],\"name\":\"episodeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"episodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpisodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"}],\"name\":\"getEpisodeOptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAllocationForUserBeforeStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotesForEpisode\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"episodeOptionId\",\"type\":\"uint256\"}],\"name\":\"getUserWinningBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasTransferredTokensToArtistForEpisode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producerPassTokenAllocationPerEpisode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producerPassTokenBaseAllocationPerEpisode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producerPassTokenEarlyStakingBonusAllocationPerEpisode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producerPassTokenWinningBonusAllocationPerEpisode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producersTokenAllocationPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"}],\"name\":\"sendArtistTokensForEpisode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setEpisodeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setEpisodeOptionBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"episodeOptionIds\",\"type\":\"uint256[]\"}],\"name\":\"setEpisodeOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_episodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpisodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earlyStakingBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningVoteBonus\",\"type\":\"uint256\"}],\"name\":\"setProducerPassWhiteRabbitTokensAllocationParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setVotingEnabledForEpisode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whiteRabbitProducerPassContract\",\"type\":\"address\"}],\"name\":\"setWhiteRabbitProducerPassContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteOptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeProducerPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artist1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artist2Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfEpisodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"producersAllocationPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artistAllocationPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAllocationPercentage\",\"type\":\"uint256\"}],\"name\":\"startWhiteRabbitShowWithParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokenAllocationDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokenAllocationPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInitialFixedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteOptionId\",\"type\":\"uint256\"}],\"name\":\"unstakeProducerPasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"episodeOptionId\",\"type\":\"uint256\"}],\"name\":\"userStakedProducerPassCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"episodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"episodeOptionId\",\"type\":\"uint256\"}],\"name\":\"userStakedProducerPassCountHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingEnabledForEpisode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteRabbitTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningVoteOptionByEpisode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlatformReserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"teamAddresses\",\"type\":\"address[]\"}],\"name\":\"withdrawTokensForTeamAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhiteRabbit", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000097ed92e744c10fdd5d403a756239c4069e415e79", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}