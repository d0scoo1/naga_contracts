{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ReitPublicSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface OracleWrapper {\\n    function latestAnswer() external view returns (uint128);\\n}\\n\\ninterface Token {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ncontract ReitPublicSale is Ownable, ReentrancyGuard {\\n    uint256 public totalTokenSold;\\n    uint256 public totalTokenSoldUSD;\\n    uint128 public decimalsValue;\\n    uint8 public totalPhases;\\n    uint8 public defaultPhase;\\n    address public tokenAddress;\\n    uint32 public ICOStartTime;\\n\\n    address public BNBOracleAddress =\\n        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n    address public BUSDOracleAddress =\\n        0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\\n    address public BUSDAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    address public receiverAddress = 0x783b966bC8049bf33D0A573B36127184aDE9C8A7;\\n\\n    /* ============= STRUCT SECTION ============= */\\n\\n    // Stores instances of Phases\\n    struct PhaseInfo {\\n        uint256 tokenSold;\\n        uint256 tokenLimit;\\n        uint32 expirationTimestamp;\\n        uint32 price; //10**2\\n        bool isComplete;\\n    }\\n    mapping(uint8 => PhaseInfo) public phaseInfo;\\n\\n    /* ============= EVENT SECTION ============= */\\n\\n    // Emits when tokens are bought\\n    event TokensBought(\\n        uint256 buyAmount,\\n        uint256 noOfTokens,\\n        uint8 tokenType,\\n        address userAddress\\n    );\\n\\n    /* ============= CONSTRUCTOR SECTION ============= */\\n\\n    constructor(address _tokenAddress) {\\n        tokenAddress = _tokenAddress;\\n        decimalsValue = uint128(10**Token(tokenAddress).decimals());\\n        ICOStartTime = uint32(block.timestamp);\\n\\n        defaultPhase = 1;\\n        totalPhases = 4;\\n\\n        phaseInfo[1] = PhaseInfo({\\n            tokenLimit: 1_000_000_000 * decimalsValue,\\n            tokenSold: 0,\\n            expirationTimestamp: ICOStartTime + 60 days,\\n            price: 5,\\n            isComplete: false\\n        });\\n        phaseInfo[2] = PhaseInfo({\\n            tokenLimit: 1_000_000_000 * decimalsValue,\\n            tokenSold: 0,\\n            expirationTimestamp: phaseInfo[1].expirationTimestamp + 15 days,\\n            price: 10,\\n            isComplete: false\\n        });\\n        phaseInfo[3] = PhaseInfo({\\n            tokenLimit: 1_000_000_000 * decimalsValue,\\n            tokenSold: 0,\\n            expirationTimestamp: phaseInfo[2].expirationTimestamp + 15 days,\\n            price: 15,\\n            isComplete: false\\n        });\\n        phaseInfo[4] = PhaseInfo({\\n            tokenLimit: 1_000_000_000 * decimalsValue,\\n            tokenSold: 0,\\n            expirationTimestamp: phaseInfo[3].expirationTimestamp + 15 days,\\n            price: 20,\\n            isComplete: false\\n        });\\n    }\\n\\n    /* ============= BUY TOKENS SECTION ============= */\\n\\n    function buyTokens(uint8 _type, uint256 _busdAmount)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        //_type=1 for BNB and type =2 for BUSD\\n        require(\\n            block.timestamp < phaseInfo[totalPhases].expirationTimestamp,\\n            \\\"Buying Phases are over\\\"\\n        );\\n\\n        uint256 buyAmount;\\n        if (_type == 1) {\\n            buyAmount = msg.value;\\n        } else {\\n            buyAmount = _busdAmount;\\n\\n            // Balance Check\\n            require(\\n                (Token(BUSDAddress).balanceOf(msg.sender)) >= buyAmount,\\n                \\\"check your balance.\\\"\\n            );\\n\\n            // Allowance Check\\n            require(\\n                Token(BUSDAddress).allowance(msg.sender, address(this)) >=\\n                    buyAmount,\\n                \\\"Approve BUSD.\\\"\\n            );\\n        }\\n\\n        // Zero value not possible\\n        require(buyAmount > 0, \\\"Enter valid amount\\\");\\n\\n        // Calculates token amount\\n        (\\n            uint256 _tokenAmount,\\n            uint8 _phaseValue,\\n            uint256 _amountGivenInUsd\\n        ) = calculateTokens(_type, buyAmount);\\n\\n        setPhaseInfo(_tokenAmount, defaultPhase);\\n        totalTokenSoldUSD += _amountGivenInUsd;\\n        totalTokenSold += _tokenAmount;\\n        defaultPhase = _phaseValue;\\n\\n        // Transfers the tokens bought to the user\\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, _tokenAmount);\\n\\n        // Sending the amount to the receiver address\\n        if (_type == 1) {\\n            TransferHelper.safeTransferETH(receiverAddress, msg.value);\\n        } else {\\n            TransferHelper.safeTransferFrom(\\n                BUSDAddress,\\n                msg.sender,\\n                receiverAddress,\\n                buyAmount\\n            );\\n        }\\n        // Emits event\\n        emit TokensBought(buyAmount, _tokenAmount, _type, msg.sender);\\n    }\\n\\n    /* ============= TOKEN CALCULATION SECTION ============= */\\n    // Calculates Tokens\\n    function calculateTokens(uint8 _type, uint256 _amount)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint8,\\n            uint256\\n        )\\n    {\\n        (uint256 _amountToUSD, uint256 _typeDecimal) = cryptoValues(_type);\\n        uint256 _amountGivenInUsd = ((_amount * _amountToUSD) / _typeDecimal);\\n        (uint256 _tokenAmount, uint8 _phaseValue) = calculateTokensInternal(\\n            _amountGivenInUsd,\\n            defaultPhase,\\n            0\\n        );\\n        return (_tokenAmount, _phaseValue, _amountGivenInUsd);\\n    }\\n\\n    // Internal Function to calculate tokens\\n    function calculateTokensInternal(\\n        uint256 _amount,\\n        uint8 _phaseNo,\\n        uint256 _previousTokens\\n    ) internal view returns (uint256, uint8) {\\n        // Phases cannot exceed totalPhases\\n        require(\\n            _phaseNo <= totalPhases,\\n            \\\"Not enough tokens in the contract or Phase expired\\\"\\n        );\\n\\n        PhaseInfo memory pInfo = phaseInfo[_phaseNo];\\n\\n        // If phase is still going on\\n        if (pInfo.expirationTimestamp > block.timestamp) {\\n            uint256 _tokensAmount = tokensUserWillGet(_amount, pInfo.price);\\n\\n            uint256 _tokensLeftToSell = (pInfo.tokenLimit + _previousTokens) -\\n                pInfo.tokenSold;\\n\\n            // If token left are 0. Next phase will be executed\\n            if (_tokensLeftToSell == 0) {\\n                return\\n                    calculateTokensInternal(\\n                        _amount,\\n                        _phaseNo + 1,\\n                        _previousTokens\\n                    );\\n            }\\n            // If the phase have enough tokens left\\n            else if (_tokensLeftToSell >= _tokensAmount) {\\n                return (_tokensAmount, _phaseNo);\\n            }\\n            // If the phase doesn't have enough tokens\\n            else {\\n                _tokensAmount =\\n                    pInfo.tokenLimit +\\n                    _previousTokens -\\n                    pInfo.tokenSold;\\n\\n                uint256 _tokenPriceInPhase = tokenValueInPhase(\\n                    pInfo.price,\\n                    _tokensAmount\\n                );\\n\\n                (\\n                    uint256 _remainingTokens,\\n                    uint8 _newPhase\\n                ) = calculateTokensInternal(\\n                        _amount - _tokenPriceInPhase,\\n                        _phaseNo + 1,\\n                        0\\n                    );\\n\\n                return (_remainingTokens + _tokensAmount, _newPhase);\\n            }\\n        }\\n        // In case the phase is expired. New will begin after sending the left tokens to the next phase\\n        else {\\n            uint256 _remainingTokens = pInfo.tokenLimit - pInfo.tokenSold;\\n            return\\n                calculateTokensInternal(\\n                    _amount,\\n                    _phaseNo + 1,\\n                    _remainingTokens + _previousTokens\\n                );\\n        }\\n    }\\n\\n    // Returns the value of tokens in the phase in dollors\\n    function tokenValueInPhase(uint32 _price, uint256 _tokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ((_tokenAmount * uint256(_price) * (10**8)) /\\n            (100 * decimalsValue));\\n    }\\n\\n    // Calculate tokens user will get for an amount\\n    // **@ making this method public for testing\\n    // Tokens user will get according to the price\\n    function tokensUserWillGet(uint256 _amount, uint32 _price)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ((_amount * decimalsValue * 100) / ((10**8) * uint256(_price)));\\n    }\\n\\n    // Returns the crypto values used\\n    function cryptoValues(uint8 _type)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint128 _amountToUsd;\\n        uint128 _decimalValue;\\n\\n        if (_type == 1) {\\n            _amountToUsd = OracleWrapper(BNBOracleAddress).latestAnswer();\\n            _decimalValue = 10**18;\\n        } else if (_type == 2) {\\n            _amountToUsd = OracleWrapper(BUSDOracleAddress).latestAnswer();\\n            _decimalValue = uint128(10**Token(BUSDAddress).decimals());\\n        }\\n        return (_amountToUsd, _decimalValue);\\n    }\\n\\n    /* ============= SETS PHASE INFO SECTION ============= */\\n\\n    // Updates phase struct instances according to the new tokens bought\\n    function setPhaseInfo(uint256 _totalTokens, uint8 _phase) internal {\\n        require(_phase <= totalPhases, \\\"All phases have been exhausted\\\");\\n        PhaseInfo storage pInfo = phaseInfo[_phase];\\n\\n        if (block.timestamp < pInfo.expirationTimestamp) {\\n            // Case 1: Tokens left in the current phase are more than the tokens bought\\n            if ((pInfo.tokenLimit - pInfo.tokenSold) > _totalTokens) {\\n                pInfo.tokenSold += _totalTokens;\\n            }\\n            // Case 2: Tokens left in the current phase are equal to the tokens bought\\n            else if ((pInfo.tokenLimit - pInfo.tokenSold) == _totalTokens) {\\n                pInfo.tokenSold = pInfo.tokenLimit;\\n                pInfo.isComplete = true;\\n            }\\n            // Case 3: Tokens left in the current phase are less than the tokens bought (Recursion)\\n            else {\\n                uint256 _leftTokens = _totalTokens -\\n                    (pInfo.tokenLimit - pInfo.tokenSold);\\n                pInfo.tokenSold = pInfo.tokenLimit;\\n                pInfo.isComplete = true;\\n\\n                setPhaseInfo(_leftTokens, _phase + 1);\\n            }\\n        } else {\\n            uint256 _remainingTokens = pInfo.tokenLimit - pInfo.tokenSold;\\n            pInfo.tokenLimit = pInfo.tokenSold;\\n            pInfo.isComplete = true;\\n\\n            // Limit of next phase is increased\\n            phaseInfo[_phase + 1].tokenLimit += _remainingTokens;\\n            setPhaseInfo(_totalTokens, _phase + 1);\\n        }\\n    }\\n\\n    /* ============= TRANSFER LEFTOVER TOKENS TO receiver SECTION ============= */\\n\\n    // Transfers left over tokens to the receiver\\n    function transferToReceiverAfterICO() external onlyOwner {\\n        uint256 _contractBalance = Token(tokenAddress).balanceOf(address(this));\\n\\n        // Phases should have ended\\n        require(\\n            (phaseInfo[totalPhases].expirationTimestamp < block.timestamp),\\n            \\\"ICO is running.\\\"\\n        );\\n\\n        // Balance should not already be claimed\\n        require(_contractBalance > 0, \\\"Already Claimed.\\\");\\n\\n        // Transfers the left over tokens to the receiver\\n        TransferHelper.safeTransfer(\\n            tokenAddress,\\n            receiverAddress,\\n            _contractBalance\\n        );\\n    }\\n\\n    /* ============= OTHER FUNCTION SECTION ============= */\\n    // Updates receiver address\\n    function updateReceiverAddress(address _receiverAddress)\\n        external\\n        onlyOwner\\n    {\\n        receiverAddress = _receiverAddress;\\n    }\\n\\n    // Updates BUSD Address\\n    function updateBUSDAddress(address _BUSDAddress) external onlyOwner {\\n        BUSDAddress = _BUSDAddress;\\n    }\\n\\n    // Updates BNB Oracle Address\\n    function updateBNBOracleAddress(address _BNBOracleAddress)\\n        external\\n        onlyOwner\\n    {\\n        BNBOracleAddress = _BNBOracleAddress;\\n    }\\n\\n    // Updates BUSD Oracle Address\\n    function updateBUSDOracleAddress(address _BUSDOracleAddress)\\n        external\\n        onlyOwner\\n    {\\n        BUSDOracleAddress = _BUSDOracleAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSDOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOStartTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_busdAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsValue\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPhase\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"phaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"price\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_price\",\"type\":\"uint32\"}],\"name\":\"tokensUserWillGet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPhases\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSoldUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToReceiverAfterICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BNBOracleAddress\",\"type\":\"address\"}],\"name\":\"updateBNBOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BUSDAddress\",\"type\":\"address\"}],\"name\":\"updateBUSDAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BUSDOracleAddress\",\"type\":\"address\"}],\"name\":\"updateBUSDOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"updateReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReitPublicSale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ea3cdbee3cbdef606fceb42402e89ee4ec04d55", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}