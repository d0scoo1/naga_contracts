{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/vshg2d131zzwv70wlf0ivb4pzch0jhw6-geb-fsm-governance-interface/dapp/geb-fsm-governance-interface/src/FsmGovernanceInterface.sol\npragma solidity =0.6.7;\n\n////// /nix/store/vshg2d131zzwv70wlf0ivb4pzch0jhw6-geb-fsm-governance-interface/dapp/geb-fsm-governance-interface/src/FsmGovernanceInterface.sol\n/// FsmGovernanceInterface -- governance interface for oracle security modules\n\n// Copyright (C) 2019 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published\n// by the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\nabstract contract FsmLike {\n    function stop() virtual external;\n}\n\nabstract contract AuthorityLike {\n    function canCall(address src, address dst, bytes4 sig) virtual public view returns (bool);\n}\n\ncontract FsmGovernanceInterface {\n    // --- Authorization ---\n    // The owner of the FSM interface\n    address public owner;\n    // Modifier that checks if the msg.sender is the owner\n    modifier onlyOwner { require(msg.sender == owner, \"fsm-governance-interface/only-owner\"); _;}\n\n    // The FSM interface authority\n    address public authority;\n    // Checks if msg.sender is allowed to call a specific function\n    modifier isAuthorized {\n        require(canCall(msg.sender, msg.sig), \"fsm-governance-interface/not-authorized\");\n        _;\n    }\n    /*\n    * @notice View function that checks whether an address is allowed to call a function\n    * @param src The address for which we check permissions\n    * @param sig The signature of the function to check permissions for\n    */\n    function canCall(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == address(0)) {\n            return false;\n        } else {\n            return AuthorityLike(authority).canCall(src, address(this), sig);\n        }\n    }\n\n    // --- Variables ---\n    // Mapping of collateral types and associated FSMs\n    mapping (bytes32 => address) public fsms;\n\n    // --- Events ---\n    event SetFsm(bytes32 collateralType, address fsm);\n    event SetOwner(address owner);\n    event SetAuthority(address authority);\n    event StopFsm(bytes32 collateralType);\n\n    constructor() public {\n        owner = msg.sender;\n        emit SetOwner(owner);\n    }\n\n    // --- Core Logic ---\n    /*\n    * @notice Whitelist a new FSM for a specific collateral type\n    * @param collateralType The collateral type for which we set a FSM\n    * @param fsm The FSM address to associate with the collateral type\n    */\n    function setFsm(bytes32 collateralType, address fsm) external onlyOwner {\n        fsms[collateralType] = fsm;\n        emit SetFsm(collateralType, fsm);\n    }\n\n    /*\n    * @notice Set a new owner in the contract\n    * @param owner_ New owner to set\n    */\n    function setOwner(address owner_) external onlyOwner {\n        owner = owner_;\n        emit SetOwner(owner);\n    }\n    /*\n    * @notice Set a new authority in the contract\n    * @notice authority_ New authority address\n    */\n    function setAuthority(address authority_) external onlyOwner {\n        authority = authority_;\n        emit SetAuthority(authority);\n    }\n    /*\n    * @notice Stop a whitelisted FSM\n    * @param collateralType Collateral type whose FSM will be stopped\n    */\n    function stopFsm(bytes32 collateralType) external isAuthorized {\n        FsmLike(fsms[collateralType]).stop();\n        emit StopFsm(collateralType);\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"SetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fsm\",\"type\":\"address\"}],\"name\":\"SetFsm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"StopFsm\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fsms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fsm\",\"type\":\"address\"}],\"name\":\"setFsm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"stopFsm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FsmGovernanceInterface", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}