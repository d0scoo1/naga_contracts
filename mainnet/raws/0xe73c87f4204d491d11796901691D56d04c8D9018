{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport \\\"IAuction.sol\\\";\\nimport \\\"INFTContract.sol\\\";\\nimport \\\"NFTCommon.sol\\\";\\n\\n\\ncontract Auction is IAuction {\\n    using NFTCommon for INFTContract;\\n\\n    /// State variables\\n\\n    address private immutable ADMIN;\\n    mapping(address => uint256) public bids;\\n\\n    uint256 public constant MINIMUM_BID_INCREMENT = 0.1 ether;\\n\\n    uint256 public floorPrice;\\n    uint256 public auctionEndTimestamp;\\n    INFTContract public whitelistedCollection;\\n\\n    bool private auctionActive = false;\\n    bool private initialized = false;\\n\\n    /// Modifiers\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != ADMIN) revert NotAdmin();\\n        _;\\n    }\\n\\n    /// Constructor\\n\\n    constructor() {\\n        ADMIN = msg.sender;\\n    }\\n\\n    /// Init\\n\\n    /// @inheritdoc IAuction\\n    function initialize(\\n        uint256 initFloorPrice,\\n        uint256 initAuctionEndTimestamp,\\n        INFTContract initWhitelistedCollection\\n    ) external override {\\n        if (tx.origin != ADMIN) revert NotAdmin();\\n        if (initialized) revert AlreadyInitialized();\\n\\n        floorPrice = initFloorPrice;\\n        auctionEndTimestamp = initAuctionEndTimestamp;\\n        whitelistedCollection = initWhitelistedCollection;\\n\\n        initialized = true;\\n    }\\n\\n    /// Receiver\\n\\n    /// @dev Reject direct contract payments\\n    receive() external payable {\\n        revert RejectDirectPayments();\\n    }\\n\\n    /// Check if Whitelisted, Place Bid\\n\\n    function checkIfWhitelisted(uint256 tokenID) internal view {\\n        // ! be very careful with this\\n        // ! only whitelist the collections with trusted code\\n        // ! you are giving away control here to the nft contract\\n        // ! for balance checking purposes, but the code can be\\n        // ! anything\\n\\n        // if address is zero, any collection can bid\\n        if (address(whitelistedCollection) == address(0)) {\\n            return;\\n        }\\n\\n        uint256 sendersBalance = whitelistedCollection.quantityOf(\\n            address(msg.sender),\\n            tokenID\\n        );\\n\\n        if (sendersBalance == 0) {\\n            revert BidForbidden();\\n        }\\n    }\\n\\n    /// @inheritdoc IAuction\\n    function placeBid(uint256 tokenID) external payable override {\\n        if (!auctionActive) revert AuctionNotActive();\\n        if (msg.value <= 0) revert NoEtherSent();\\n        checkIfWhitelisted(tokenID);\\n\\n        /// Ensures that if the bidder has an existing bid, the delta that\\n        /// he sent, is at least MINIMUM_BID_INCREMENT\\n        if (bids[msg.sender] > 0) {\\n            if (msg.value < MINIMUM_BID_INCREMENT) {\\n                revert LessThanMinIncrement({actualSent: msg.value});\\n            }\\n        } else {\\n            /// If this is the first bid, then make sure it's higher than\\n            /// the floor price\\n            if (msg.value < floorPrice)\\n                revert LessThanFloorPrice({actualSent: msg.value});\\n        }\\n\\n        bids[msg.sender] += msg.value;\\n\\n        emit PlaceBid({bidder: msg.sender, price: msg.value});\\n\\n        if (block.timestamp >= auctionEndTimestamp) endAuction();\\n    }\\n\\n    function endAuction() internal {\\n        auctionActive = false;\\n        emit EndAuction();\\n    }\\n\\n    /// Admin\\n\\n    function startAuction() external override onlyOwner {\\n        auctionActive = true;\\n        emit StartAuction();\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        (bool success, ) = payable(ADMIN).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        if (!success) revert TransferFailed();\\n    }\\n}\\n\\n/*\\n * 88888888ba  88      a8P  88\\n * 88      \\\"8b 88    ,88'   88\\n * 88      ,8P 88  ,88\\\"     88\\n * 88aaaaaa8P' 88,d88'      88\\n * 88\\\"\\\"\\\"\\\"88'   8888\\\"88,     88\\n * 88    `8b   88P   Y8b    88\\n * 88     `8b  88     \\\"88,  88\\n * 88      `8b 88       Y8b 88888888888\\n *\\n * Auction.sol\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2022 Rumble League Studios Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\"\r\n    },\r\n    \"IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport \\\"INFTContract.sol\\\";\\n\\n\\ninterface IAuction {\\n\\n    error AlreadyInitialized();\\n    error AuctionIsActive();\\n    error AuctionNotActive();\\n    error BidForbidden();\\n    error LessThanFloorPrice(uint256 actualSent);\\n    error LessThanMinIncrement(uint256 actualSent);\\n    error NotAdmin();\\n    error NoEtherSent();\\n    error RejectDirectPayments();\\n    error TransferFailed();\\n\\n    /// @notice Emitted when auction starts\\n    event StartAuction();\\n    /// @notice Emitted when auction ends\\n    event EndAuction();\\n\\n    /// @notice Emitted when bid is placed\\n    /// @param bidder Address of the bidder\\n    /// @param price Amount the bidder has bid\\n    event PlaceBid(address indexed bidder, uint256 indexed price);\\n\\n    /// @notice This function should be ran first thing after deploy.\\n    /// It initializes the state of the contract\\n    /// @param initFloorPrice Auction floor price\\n    /// @param initAuctionEndBlock Auction end block number\\n    /// @param initWhitelistedCollection Collection that is whitelisted to\\n    /// participate in the auction\\n    function initialize(\\n        uint256 initFloorPrice,\\n        uint256 initAuctionEndBlock,\\n        INFTContract initWhitelistedCollection\\n    ) external;\\n\\n    /// @notice Starts the auction\\n    function startAuction() external;\\n\\n    /// @notice Places the bid. Handles modifying the bid as well.\\n    /// If the same bidder calls this function again, then that alters\\n    /// their original bid\\n    /// @param tokenID this is only used if whitelistedCollection is set\\n    /// to a valid nft contract address. This tokenID indicates what\\n    /// token from the collection the bidder owns. In the case, where\\n    /// whitelistedCollection is not set, anyone can bid, so any value\\n    /// can be passed for tokenID\\n    function placeBid(uint256 tokenID) external payable;\\n\\n    /// Bidder refunds happen off-chain\\n}\\n\\n/*\\n * 88888888ba  88      a8P  88\\n * 88      \\\"8b 88    ,88'   88\\n * 88      ,8P 88  ,88\\\"     88\\n * 88aaaaaa8P' 88,d88'      88\\n * 88\\\"\\\"\\\"\\\"88'   8888\\\"88,     88\\n * 88    `8b   88P   Y8b    88\\n * 88     `8b  88     \\\"88,  88\\n * 88      `8b 88       Y8b 88888888888\\n *\\n * IAuction.sol\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2022 Rumble League Studios Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\"\r\n    },\r\n    \"INFTContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface INFTContract {\\n    // --------------- ERC1155 -----------------------------------------------------\\n\\n    /// @notice Get the balance of an account's tokens.\\n    /// @param _owner  The address of the token holder\\n    /// @param _id     ID of the token\\n    /// @return        The _owner's balance of the token type requested\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n    /// @dev MUST emit the ApprovalForAll event on success.\\n    /// @param _operator  Address to add to the set of authorized operators\\n    /// @param _approved  True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n    /// MUST revert if `_to` is the zero address.\\n    /// MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n    /// MUST revert on any other error.\\n    /// MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// @param _from    Source address\\n    /// @param _to      Target address\\n    /// @param _id      ID of the token type\\n    /// @param _value   Transfer amount\\n    /// @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n\\n    /// @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n    /// MUST revert if `_to` is the zero address.\\n    /// MUST revert if length of `_ids` is not the same as length of `_values`.\\n    /// MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\n    /// MUST revert on any other error.        \\n    /// MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n    /// Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n    /// After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).                      \\n    /// @param _from    Source address\\n    /// @param _to      Target address\\n    /// @param _ids     IDs of each token type (order and length must match _values array)\\n    /// @param _values  Transfer amounts per token type (order and length must match _ids array)\\n    /// @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    // ---------------------- ERC721 ------------------------------------------------\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param tokenId The identifier for an NFT\\n    /// @return owner  The address of the owner of the NFT\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    // function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external payable;\\n}\\n\\n/*\\n * 88888888ba  88      a8P  88\\n * 88      \\\"8b 88    ,88'   88\\n * 88      ,8P 88  ,88\\\"     88\\n * 88aaaaaa8P' 88,d88'      88\\n * 88\\\"\\\"\\\"\\\"88'   8888\\\"88,     88\\n * 88    `8b   88P   Y8b    88\\n * 88     `8b  88     \\\"88,  88\\n * 88      `8b 88       Y8b 88888888888\\n *\\n * INFTContract.sol\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2022 Rumble League Studios Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\"\r\n    },\r\n    \"NFTCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport \\\"INFTContract.sol\\\";\\n\\nlibrary NFTCommon {\\n\\n    /// @notice Determines if potentialOwner is in fact an owner of at least 1 qty of NFT token ID.\\n    /// @param nft NFT address\\n    /// @param potentialOwner suspected owner of the NFT token ID\\n    /// @param tokenID id of the token\\n    /// @return quantity of held token, possibly zero\\n    function quantityOf(\\n        INFTContract nft,\\n        address potentialOwner,\\n        uint256 tokenID\\n    ) internal view returns (uint256) {\\n        // assumes it's a 721 standard\\n        try nft.ownerOf(tokenID) returns (address owner) {\\n            if (owner == potentialOwner) {\\n                return 1;\\n            } else {\\n                return 0;\\n            }\\n        // it's actually a 1155\\n        } catch (bytes memory) {\\n            try nft.balanceOf(potentialOwner, tokenID) returns (\\n                uint256 amount\\n            ) {\\n                return amount;\\n            } catch (bytes memory) {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n}\\n\\n/*\\n * 88888888ba  88      a8P  88\\n * 88      \\\"8b 88    ,88'   88\\n * 88      ,8P 88  ,88\\\"     88\\n * 88aaaaaa8P' 88,d88'      88\\n * 88\\\"\\\"\\\"\\\"88'   8888\\\"88,     88\\n * 88    `8b   88P   Y8b    88\\n * 88     `8b  88     \\\"88,  88\\n * 88      `8b 88       Y8b 88888888888\\n *\\n * NFTCommon.sol\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2022 Rumble League Studios Inc.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Auction.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionIsActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualSent\",\"type\":\"uint256\"}],\"name\":\"LessThanFloorPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualSent\",\"type\":\"uint256\"}],\"name\":\"LessThanMinIncrement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoEtherSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RejectDirectPayments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PlaceBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartAuction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_BID_INCREMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initAuctionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract INFTContract\",\"name\":\"initWhitelistedCollection\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedCollection\",\"outputs\":[{\"internalType\":\"contract INFTContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Auction", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}