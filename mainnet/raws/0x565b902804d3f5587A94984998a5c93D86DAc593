{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/background/SvgBuilder.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../common/Color.sol';\\nimport '../common/SvgFill.sol';\\nimport '../common/LogoHelper.sol';\\nimport '../common/SvgHeader.sol';\\nimport './SvgBackground.sol';\\n\\nlibrary SvgBackgroundBuilder {\\n\\n  struct SvgDescriptor {\\n    string seed;\\n    string svgVal;\\n    SvgBackground.Background background;\\n  }\\n\\n  function getSvg(SvgDescriptor memory svg) public pure returns (SvgDescriptor memory) { \\n    svg.svgVal = getSvgOpen(svg.background.width, svg.background.height);\\n    svg.svgVal = string(abi.encodePacked(svg.svgVal, getSvgDefs(svg)));\\n    svg.svgVal = string(abi.encodePacked(svg.svgVal, getSvgStyles(svg)));\\n    svg.svgVal = string(abi.encodePacked(svg.svgVal, getSvgContent(svg)));\\n    svg.svgVal = string(abi.encodePacked(svg.svgVal, getSvgClose()));\\n    return svg;\\n  }\\n\\n  function getSvgOpen(uint16 width, uint16 height) public pure returns (string memory) {\\n    return SvgHeader.getHeader(width, height);\\n  }\\n\\n  function getSvgDefs(SvgDescriptor memory svg) public pure returns (string memory) {\\n    string memory defs = '<defs>';\\n    defs = string(abi.encodePacked(defs, SvgBackground.getSvgDefs(svg.seed, svg.background)));\\n    defs = string(abi.encodePacked(defs, '</defs>'));\\n    return defs;\\n  }\\n\\n  function getSvgStyles(SvgDescriptor memory svg) public pure returns (string memory) {\\n    string memory styles = '';\\n    styles = string(abi.encodePacked(styles, SvgBackground.getSvgStyles(svg.background)));\\n    styles = string(abi.encodePacked('<style>', styles, '</style>'));\\n    return styles;\\n  }\\n\\n  function getSvgContent(SvgDescriptor memory svg) public pure returns (string memory) {\\n    return SvgBackground.getSvgContent(svg.background);\\n  }\\n\\n  function getSvgClose() public pure returns (string memory) {\\n    return '</svg>';\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Color.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Color {\\n  \\n  struct Palette {\\n    string name;\\n    string[] backgroundColors;\\n    string[] emoticonColors;\\n    string[] textColors;\\n  }\\n\\n  function getPalettes() public pure returns (Palette[] memory) {\\n    Palette[] memory palettes = new Palette[](9);\\n    palettes[0] = getPalette1();\\n    palettes[1] = getPalette2();\\n    palettes[2] = getPalette3();\\n    palettes[3] = getPalette4();\\n    palettes[4] = getPalette5();\\n    palettes[5] = getPalette6();\\n    palettes[6] = getPalette7();\\n    palettes[7] = getPalette8();\\n    palettes[8] = getPalette9();\\n    return palettes;\\n  }\\n\\n  function getPalette1() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#D9D161';\\n    backgroundColors[1] = '#FFC9ED';\\n    backgroundColors[2] = '#C9CAF7';\\n    backgroundColors[3] = '#F2FA7F';\\n    backgroundColors[4] = '#53B7F0';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#AFA1C7';\\n    textColors[1] = '#644A91';\\n    textColors[2] = '#6C637A';\\n    textColors[3] = '#CCB9ED';\\n    textColors[4] = '#3F3A47';\\n\\n    return Palette('1', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette2() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#C25F4A';\\n    backgroundColors[1] = '#F5DDD7';\\n    backgroundColors[2] = '#8F4561';\\n    backgroundColors[3] = '#7D9C72';\\n    backgroundColors[4] = '#94C24A';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#3E7F8C';\\n    textColors[1] = '#425559';\\n    textColors[2] = '#1C3A40';\\n    textColors[3] = '#68868C';\\n    textColors[4] = '#998971';\\n\\n    return Palette('2', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette3() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#885FBD';\\n    backgroundColors[1] = '#80788D';\\n    backgroundColors[2] = '#495AF0';\\n    backgroundColors[3] = '#F5F1DF';\\n    backgroundColors[4] = '#BD955C';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#3E3D54';\\n    textColors[1] = '#716BDB';\\n    textColors[2] = '#9D9BD4';\\n    textColors[3] = '#312E5E';\\n    textColors[4] = '#7775A1';\\n\\n    return Palette('3', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette4() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#568F82';\\n    backgroundColors[1] = '#79DBC5';\\n    backgroundColors[2] = '#DBB36E';\\n    backgroundColors[3] = '#59478F';\\n    backgroundColors[4] = '#8163DB';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#5C441E';\\n    textColors[1] = '#E1C18E';\\n    textColors[2] = '#FFBE54';\\n    textColors[3] = '#574C3A';\\n    textColors[4] = '#A87D03';\\n\\n    return Palette('4', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette5() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#D9A561';\\n    backgroundColors[1] = '#FFEFED';\\n    backgroundColors[2] = '#FACAF7';\\n    backgroundColors[3] = '#CBED2E';\\n    backgroundColors[4] = '#78C7AC';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#B8A561';\\n    textColors[1] = '#856F1E';\\n    textColors[2] = '#C21D3E';\\n    textColors[3] = '#D1EAED';\\n    textColors[4] = '#769C96';\\n\\n    return Palette('5', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette6() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#D9D161';\\n    backgroundColors[1] = '#FFC9ED';\\n    backgroundColors[2] = '#C9CAF7';\\n    backgroundColors[3] = '#F2FA7F';\\n    backgroundColors[4] = '#53B7F0';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#AFA1C7';\\n    textColors[1] = '#644A91';\\n    textColors[2] = '#6C637A';\\n    textColors[3] = '#CCB9ED';\\n    textColors[4] = '#3F3A47';\\n\\n    return Palette('6', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette7() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#F5E564';\\n    backgroundColors[1] = '#F5C971';\\n    backgroundColors[2] = '#F5595B';\\n    backgroundColors[3] = '#D0C6F5';\\n    backgroundColors[4] = '#95BAF5';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#FFEE00';\\n    textColors[1] = '#F5A318';\\n    textColors[2] = '#F50008';\\n    textColors[3] = '#4B00F5';\\n    textColors[4] = '#1685F5';\\n\\n    return Palette('7', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette8() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#FDAD0E';\\n    backgroundColors[1] = '#F4671F';\\n    backgroundColors[2] = '#D60441';\\n    backgroundColors[3] = '#84265E';\\n    backgroundColors[4] = '#247D75';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#FFF6E1';\\n    textColors[1] = '#A01356';\\n    textColors[2] = '#4F516A';\\n    textColors[3] = '#F25322';\\n    textColors[4] = '#5B3486';\\n\\n    return Palette('8', backgroundColors, textColors, textColors);\\n  }\\n\\n  function getPalette9() public pure returns (Palette memory) {\\n    string[] memory backgroundColors = new string[](5);\\n    backgroundColors[0] = '#5E4D3D';\\n    backgroundColors[1] = '#FFFFE9';\\n    backgroundColors[2] = '#C1C9C3';\\n    backgroundColors[3] = '#F4F3F0';\\n    backgroundColors[4] = '#CFC9A5';\\n\\n    string[] memory textColors = new string[](5);\\n    textColors[0] = '#85A383';\\n    textColors[1] = '#CCCCBA';\\n    textColors[2] = '#A6ADA8';\\n    textColors[3] = '#4A4A48';\\n    textColors[4] = '#D1D0CD';\\n\\n    return Palette('9', backgroundColors, textColors, textColors);\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/SvgFill.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './SvgElement.sol';\\nimport './LogoHelper.sol';\\n\\nlibrary SvgFill {\\n  struct Fill {\\n    string id;\\n    string class;\\n    string fillType;\\n    string[] colors;\\n    bool animate;\\n  }\\n\\n  // FILL //\\n  function getFillDefs(string memory seed, Fill memory fill) public pure returns (string memory) {\\n    string memory defs = '';\\n    if (LogoHelper.equal(fill.fillType, 'Linear Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), ''));\\n      } else {\\n       string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100 , 0));\\n       string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 50000 , 5000));\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), SvgElement.getAnimate(SvgElement.Animate(getLinearAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n      }\\n    } else if (LogoHelper.equal(fill.fillType, 'Radial Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), ''));\\n      } else {\\n        string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100, 0));\\n        string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 10000 , 5000));\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), SvgElement.getAnimate(SvgElement.Animate(getRadialAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n        \\n      }\\n    }\\n    return defs;\\n  }\\n\\n  function getFillStyles(Fill memory fill) public pure returns (string memory) {\\n    if (LogoHelper.equal(fill.fillType, 'Solid')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: ', fill.colors[0], ' } '));\\n    } else if (LogoHelper.equal(fill.fillType, 'Linear Gradient')\\n                || LogoHelper.equal(fill.fillType, 'Radial Gradient')\\n                  || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')\\n                    || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: url(#', fill.id, ') } '));\\n    }\\n    string memory styles = '';\\n    return styles;\\n  }\\n\\n  function getLinearAnimationType(string memory seed) private pure returns (string memory) {\\n    string[4] memory types = ['x1', 'x2', 'y1', 'y2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getRadialAnimationType(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['fx', 'fy', 'r'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getAnimationRepeat(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['indefinite', '1', '2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/LogoHelper.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary LogoHelper {\\n  function getRotate(string memory text) public pure returns (string memory) {\\n    bytes memory byteString = bytes(text);\\n    string memory rotate = string(abi.encodePacked('-', toString(random(text) % 10 + 1)));\\n    for (uint i=1; i < byteString.length; i++) {\\n      uint nextRotate = random(rotate) % 10 + 1;\\n      if (i % 2 == 0) {\\n        rotate = string(abi.encodePacked(rotate, ',-', toString(nextRotate)));\\n      } else {\\n        rotate = string(abi.encodePacked(rotate, ',', toString(nextRotate)));\\n      }\\n    }\\n    return rotate;\\n  }\\n\\n  function getTurbulance(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory turbulance = decimalInRange(seed, max, magnitudeOffset);\\n    uint rand = randomInRange(turbulance, max, 0);\\n    return string(abi.encodePacked(turbulance, ', ', getDecimal(rand, magnitudeOffset)));\\n  }\\n\\n  function decimalInRange(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    uint rand = randomInRange(seed, max, 0);\\n    return getDecimal(rand, magnitudeOffset);\\n  }\\n\\n  // CORE HELPERS //\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomFromInt(uint256 seed) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed)));\\n  }\\n\\n  function randomInRange(string memory input, uint max, uint offset) public pure returns (uint256) {\\n    max = max - offset;\\n    return (random(input) % max) + offset;\\n  }\\n\\n  function equal(string memory a, string memory b) public pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);            \\n    }\\n    return string(s);\\n  }\\n\\nfunction char(bytes1 b) internal pure returns (bytes1 c) {\\n  if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n  else return bytes1(uint8(b) + 0x57);\\n}\\n  \\n  function getDecimal(uint val, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory decimal;\\n    if (val != 0) {\\n      for (uint i = 10; i < magnitudeOffset / val; i=10*i) {\\n        decimal = string(abi.encodePacked(decimal, '0'));\\n      }\\n    }\\n    decimal = string(abi.encodePacked('0.', decimal, toString(val)));\\n    return decimal;\\n  }\\n\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgHeader.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice Helper to build svg elements\\npragma solidity ^0.8.0;\\n\\nimport './LogoHelper.sol';\\n\\nlibrary SvgHeader {\\n  function getHeader(uint16 width, uint16 height) public pure returns (string memory) {\\n    string memory svg = '<svg version=\\\"2.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 ';\\n    if (width != 0 && height != 0) {\\n      svg = string(abi.encodePacked(svg, LogoHelper.toString(width), ' ', LogoHelper.toString(height), '\\\">'));\\n    } else {\\n      svg = string(abi.encodePacked(svg, '300 300\\\">'));\\n    }\\n    return svg;\\n  }\\n\\n  function getTransform(uint8 translateXDirection, uint16 translateX, uint8 translateYDirection, uint16 translateY, uint8 scaleDirection, uint8 scaleMagnitude) public pure returns (string memory) {\\n    string memory translateXStr = translateXDirection == 0 ? string(abi.encodePacked('-', LogoHelper.toString(translateX))) : LogoHelper.toString(translateX);\\n    string memory translateYStr = translateYDirection == 0 ? string(abi.encodePacked('-', LogoHelper.toString(translateY))) : LogoHelper.toString(translateY);\\n\\n    string memory scale = '1';\\n    if (scaleMagnitude != 0) {\\n      if (scaleDirection == 0) { \\n        scale = string(abi.encodePacked('0.', scaleMagnitude < 10 ? LogoHelper.toString(scaleMagnitude): LogoHelper.toString(scaleMagnitude % 10)));\\n      } else {\\n        scale = string(abi.encodePacked(LogoHelper.toString((scaleMagnitude / 10) + 1), '.', LogoHelper.toString(scaleMagnitude % 10)));\\n      }\\n    }\\n\\n    return string(abi.encodePacked('translate(', translateXStr, ', ', translateYStr, ') ', 'scale(', scale, ')'));\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/background/SvgBackground.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../common/SvgFill.sol';\\nimport '../common/SvgFilter.sol';\\nimport '../common/SvgElement.sol';\\nimport '../common/LogoHelper.sol';\\nimport './SvgPattern.sol';\\n\\nlibrary SvgBackground {\\n\\n  struct Background {\\n    string id;\\n    string class;\\n    string backgroundType;\\n    string paletteName;\\n    uint16 width;\\n    uint16 height;\\n    SvgFill.Fill[] fills;\\n    SvgFilter.Filter filter;\\n  }\\n\\n  function getSvgDefs(string memory seed, Background memory background) public pure returns (string memory) {\\n    string memory defs = '';\\n    // Fill defs\\n    for (uint i=0; i < background.fills.length; i++) {\\n      defs = string(abi.encodePacked(defs, SvgFill.getFillDefs(seed, background.fills[i])));\\n    }\\n\\n    // Filter defs\\n    if (LogoHelper.equal(background.filter.filterType, 'A')) {\\n      defs = string(abi.encodePacked(defs, SvgFilter.getFilterDef(string(abi.encodePacked(seed, 'a')), background.filter)));\\n      if (LogoHelper.equal(background.backgroundType, 'GM')) {\\n        string memory originalId = background.filter.id;\\n        background.filter.id = string(abi.encodePacked(background.filter.id, '-2'));\\n        defs = string(abi.encodePacked(defs, SvgFilter.getFilterDef(string(abi.encodePacked(seed, 'b')), background.filter)));\\n        background.filter.id = originalId;\\n      }\\n    }\\n\\n    // Pattern defs\\n    if (LogoHelper.equal(background.backgroundType, 'Pattern A')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getADef(seed, background.id, background.fills[0].fillType, background.fills[0].class)));\\n    } else if (LogoHelper.equal(background.backgroundType, 'Pattern B')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getBDef(seed, background.id, background.fills[0].class)));\\n    } else if (LogoHelper.equal(background.backgroundType, 'Pattern AX2')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getAX2Def(seed, background.id, background.fills[0].class, background.fills[0].fillType, background.fills[1].class)));\\n    } else if (LogoHelper.equal(background.backgroundType, 'Pattern BX2')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getBX2Def(seed, background.id, background.fills[0].class, background.fills[1].class)));\\n    } else if (LogoHelper.equal(background.backgroundType, 'Pattern AB')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getABDef(seed, background.id, background.fills[0].fillType, background.fills[0].class, background.fills[1].class)));\\n    } else if (LogoHelper.equal(background.backgroundType, 'GM')) { \\n      defs = string(abi.encodePacked(defs, SvgPattern.getGMDef(seed, background.id, background.fills[0].class, background.fills[1].class, background.fills[2].class, background.fills[3].class)));\\n    }\\n    return defs;\\n  }\\n\\n  function getSvgStyles(Background memory background) public pure returns (string memory) {\\n    string memory styles = '';\\n    for (uint i=0; i < background.fills.length; i++) {\\n      styles = string(abi.encodePacked(styles, SvgFill.getFillStyles(background.fills[i])));\\n    }\\n    return styles;\\n  }\\n\\n  function getSvgContent(Background memory background) public pure returns (string memory) {\\n    if (LogoHelper.equal(background.backgroundType, 'Box')) {\\n      return SvgElement.getRect(SvgElement.Rect(background.class, '0', '0', '100%', '100%', '', '', ''));\\n    } else if (LogoHelper.equal(background.backgroundType, 'Pattern A')\\n                || LogoHelper.equal(background.backgroundType, 'Pattern AX2')\\n                  || LogoHelper.equal(background.backgroundType, 'Pattern B')\\n                    || LogoHelper.equal(background.backgroundType, 'Pattern BX2')\\n                      || LogoHelper.equal(background.backgroundType, 'Pattern AB')) {\\n      if (LogoHelper.equal(background.filter.filterType, 'None')) {\\n        return SvgElement.getRect(SvgElement.Rect('', '0', '0', '100%', '100%', '', background.id, ''));\\n      } else {\\n        return SvgElement.getRect(SvgElement.Rect('', '0', '0', '100%', '100%', '', background.id, background.filter.id));\\n      }\\n    } else if (LogoHelper.equal(background.backgroundType, 'GM')) {\\n      string memory backgroundId1 = string(abi.encodePacked(background.id, '-1'));\\n      string memory backgroundId2 = string(abi.encodePacked(background.id, '-2'));\\n      string memory content = '';\\n      if (LogoHelper.equal(background.filter.filterType, 'None')) {\\n        content = SvgElement.getRect(SvgElement.Rect('', '0', '0', '100%', '70%', '0.8', backgroundId1, ''));\\n        content = string(abi.encodePacked(content, SvgElement.getCircle(SvgElement.Circle(background.fills[4].class, '80%', '50%', '15%', ''))));\\n        content = string(abi.encodePacked(content, SvgElement.getRect(SvgElement.Rect('', '0', '60%', '100%', '70%', '', backgroundId2, ''))));\\n        return content;\\n      } else {\\n        content = SvgElement.getRect(SvgElement.Rect('', '0', '0', '100%', '100%', '0.8', backgroundId1, background.filter.id));\\n        content = string(abi.encodePacked(content, SvgElement.getCircle(SvgElement.Circle(background.fills[4].class, '80%', '50%', '15%', ''))));\\n        content = string(abi.encodePacked(content, SvgElement.getRect(SvgElement.Rect('', '0', '60%', '100%', '70%', '', backgroundId2, string(abi.encodePacked(background.filter.id, '-2'))))));\\n        return content;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgElement.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice Helper to build svg elements\\npragma solidity ^0.8.0;\\n\\nlibrary SvgElement {\\n  struct Rect {\\n    string class;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string opacity;\\n    string fill;\\n    string filter;\\n  }\\n\\n  function getRect(Rect memory rect) public pure returns (string memory) {\\n    string memory element = '<rect ';\\n    element = !equal(rect.class, '') ? string(abi.encodePacked(element, 'class=\\\"', rect.class, '\\\" ')) : element;\\n    element = !equal(rect.x, '') ? string(abi.encodePacked(element, 'x=\\\"', rect.x, '\\\" ')) : element;\\n    element = !equal(rect.y, '') ? string(abi.encodePacked(element, 'y=\\\"', rect.y, '\\\" ')) : element;\\n    element = !equal(rect.width, '') ? string(abi.encodePacked(element, 'width=\\\"', rect.width, '\\\" ')) : element;\\n    element = !equal(rect.height, '') ? string(abi.encodePacked(element, 'height=\\\"', rect.height, '\\\" ')) : element;\\n    element = !equal(rect.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', rect.opacity, '\\\" ')) : element;\\n    element = !equal(rect.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"url(#', rect.fill, ')\\\" ')) : element;\\n    element = !equal(rect.filter, '') ? string(abi.encodePacked(element, 'filter=\\\"url(#', rect.filter, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Circle {\\n    string class;\\n    string cx;\\n    string cy;\\n    string r;\\n    string opacity;\\n  }\\n\\n  function getCircle(Circle memory circle) public pure returns (string memory) {\\n    string memory element = '<circle ';\\n    element = !equal(circle.class, '') ? string(abi.encodePacked(element, 'class=\\\"', circle.class, '\\\" ')) : element;\\n    element = !equal(circle.cx, '') ? string(abi.encodePacked(element, 'cx=\\\"', circle.cx, '\\\" ')) : element;\\n    element = !equal(circle.cy, '') ? string(abi.encodePacked(element, 'cy=\\\"', circle.cy, '\\\" ')) : element;\\n    element = !equal(circle.r, '') ? string(abi.encodePacked(element, 'r=\\\"', circle.r, '\\\" ')) : element;\\n    element = !equal(circle.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', circle.opacity, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Text {\\n    string class;\\n    string x;\\n    string y;\\n    string dx;\\n    string dy;\\n    string display;\\n    string baseline;\\n    string anchor;\\n    string rotate;\\n    string transform;\\n    string clipPath;\\n    string val;\\n  }\\n\\n  function getText(Text memory txt) public pure returns (string memory) {\\n    string memory element = '<text ';\\n    element = !equal(txt.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txt.class, '\\\" ')) : element;\\n    element = !equal(txt.x, '') ? string(abi.encodePacked(element, 'x=\\\"', txt.x, '\\\" ')) : element;\\n    element = !equal(txt.y, '') ? string(abi.encodePacked(element, 'y=\\\"', txt.y, '\\\" ')) : element;\\n    element = !equal(txt.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', txt.dx, '\\\" ')) : element;\\n    element = !equal(txt.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', txt.dy, '\\\" ')) : element;\\n    element = !equal(txt.display, '') ? string(abi.encodePacked(element, 'display=\\\"', txt.display, '\\\" ')) : element;\\n    element = !equal(txt.baseline, '') ? string(abi.encodePacked(element, 'dominant-baseline=\\\"', txt.baseline, '\\\" ')) : element;\\n    element = !equal(txt.anchor, '') ? string(abi.encodePacked(element, 'text-anchor=\\\"', txt.anchor, '\\\" ')) : element;\\n    element = !equal(txt.rotate, '') ? string(abi.encodePacked(element, 'rotate=\\\"', txt.rotate, '\\\" ')) : element;\\n    element = !equal(txt.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', txt.transform, '\\\" ')) : element;\\n    element = !equal(txt.clipPath, '') ? string(abi.encodePacked(element, 'clip-path=\\\"url(#', txt.clipPath, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txt.val, '</text>'));\\n    return element;\\n  }\\n\\n  struct TextPath {\\n    string class;\\n    string href;\\n    string val;\\n  }\\n\\n  function getTextPath(TextPath memory txtPath) public pure returns (string memory) {\\n    string memory element = '<textPath ';\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txtPath.class, '\\\" ')) : element;\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'href=\\\"#', txtPath.href, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txtPath.val, '</textPath>'));\\n    return element;\\n  }\\n\\n  struct Tspan {\\n    string class;\\n    string display;\\n    string dx;\\n    string dy;\\n    string val;\\n  }\\n\\n  function getTspan(Tspan memory tspan) public pure returns (string memory) {\\n    string memory element = '<tspan ';\\n    element = !equal(tspan.class, '') ? string(abi.encodePacked(element, 'class=\\\"', tspan.class, '\\\" ')) : element;\\n    element = !equal(tspan.display, '') ? string(abi.encodePacked(element, 'display=\\\"', tspan.display, '\\\" ')) : element;\\n    element = !equal(tspan.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', tspan.dx, '\\\" ')) : element;\\n    element = !equal(tspan.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', tspan.dy, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', tspan.val, '</tspan>'));\\n    return element;\\n  }\\n\\n  struct Animate {\\n    string attributeName;\\n    string to;\\n    string values;\\n    string duration;\\n    string begin;\\n    string repeatCount;\\n    string fill;\\n  }\\n\\n  function getAnimate(Animate memory animate) public pure returns (string memory) {\\n    string memory element = '<animate ';\\n    element = !equal(animate.attributeName, '') ? string(abi.encodePacked(element, 'attributeName=\\\"', animate.attributeName, '\\\" ')) : element;\\n    element = !equal(animate.to, '') ? string(abi.encodePacked(element, 'to=\\\"', animate.to, '\\\" ')) : element;\\n    element = !equal(animate.values, '') ? string(abi.encodePacked(element, 'values=\\\"', animate.values, '\\\" ')) : element;\\n    element = !equal(animate.duration, '') ? string(abi.encodePacked(element, 'dur=\\\"', animate.duration, 'ms\\\" ')) : element;\\n    element = !equal(animate.begin, '') ? string(abi.encodePacked(element, 'begin=\\\"', animate.begin, 'ms\\\" ')) : element;\\n    element = !equal(animate.repeatCount, '') ? string(abi.encodePacked(element, 'repeatCount=\\\"', animate.repeatCount, '\\\" ')) : element;\\n    element = !equal(animate.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"', animate.fill, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Path {\\n    string id;\\n    string pathAttr;\\n    string val;\\n  }\\n\\n  function getPath(Path memory path) public pure returns (string memory) {\\n    string memory element = '<path ';\\n    element = !equal(path.id, '') ? string(abi.encodePacked(element, 'id=\\\"', path.id, '\\\" ')) : element;\\n    element = !equal(path.pathAttr, '') ? string(abi.encodePacked(element, 'd=\\\"', path.pathAttr, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', path.val, '</path>'));\\n    return element;\\n  }\\n\\n  struct Group {\\n    string transform;\\n    string val;\\n  }\\n\\n  function getGroup(Group memory group) public pure returns (string memory) {\\n    string memory element = '<g ';\\n    element = !equal(group.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', group.transform, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', group.val, '</g>'));\\n    return element;\\n  }\\n\\n  struct Pattern {\\n    string id;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string patternUnits;\\n    string val;\\n  }\\n\\n  function getPattern(Pattern memory pattern) public pure returns (string memory) {\\n    string memory element = '<pattern ';\\n    element = !equal(pattern.id, '') ? string(abi.encodePacked(element, 'id=\\\"', pattern.id, '\\\" ')) : element;\\n    element = !equal(pattern.x, '') ? string(abi.encodePacked(element, 'x=\\\"', pattern.x, '\\\" ')) : element;\\n    element = !equal(pattern.y, '') ? string(abi.encodePacked(element, 'y=\\\"', pattern.y, '\\\" ')) : element;\\n    element = !equal(pattern.width, '') ? string(abi.encodePacked(element, 'width=\\\"', pattern.width, '\\\" ')) : element;\\n    element = !equal(pattern.height, '') ? string(abi.encodePacked(element, 'height=\\\"', pattern.height, '\\\" ')) : element;\\n    element = !equal(pattern.patternUnits, '') ? string(abi.encodePacked(element, 'patternUnits=\\\"', pattern.patternUnits, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', pattern.val, '</pattern>'));\\n    return element;\\n  }\\n\\n  struct Filter {\\n    string id;\\n    string val;\\n  }\\n\\n  function getFilter(Filter memory filter) public pure returns (string memory) {\\n    string memory element = '<filter ';\\n    element = !equal(filter.id, '') ? string(abi.encodePacked(element, 'id=\\\"', filter.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', filter.val, '</filter>'));\\n    return element;\\n  }\\n\\n  struct Turbulance {\\n    string fType;\\n    string baseFrequency;\\n    string octaves;\\n    string result;\\n    string val;\\n  }\\n\\n  function getTurbulance(Turbulance memory turbulance) public pure returns (string memory) {\\n    string memory element = '<feTurbulence ';\\n    element = !equal(turbulance.fType, '') ? string(abi.encodePacked(element, 'type=\\\"', turbulance.fType, '\\\" ')) : element;\\n    element = !equal(turbulance.baseFrequency, '') ? string(abi.encodePacked(element, 'baseFrequency=\\\"', turbulance.baseFrequency, '\\\" ')) : element;\\n    element = !equal(turbulance.octaves, '') ? string(abi.encodePacked(element, 'numOctaves=\\\"', turbulance.octaves, '\\\" ')) : element;\\n    element = !equal(turbulance.result, '') ? string(abi.encodePacked(element, 'result=\\\"', turbulance.result, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', turbulance.val, '</feTurbulence>'));\\n    return element;\\n  }\\n\\n  struct DisplacementMap {\\n    string mIn;\\n    string in2;\\n    string result;\\n    string scale;\\n    string xChannelSelector;\\n    string yChannelSelector;\\n    string val;\\n  }\\n\\n  function getDisplacementMap(DisplacementMap memory displacementMap) public pure returns (string memory) {\\n    string memory element = '<feDisplacementMap ';\\n    element = !equal(displacementMap.mIn, '') ? string(abi.encodePacked(element, 'in=\\\"', displacementMap.mIn, '\\\" ')) : element;\\n    element = !equal(displacementMap.in2, '') ? string(abi.encodePacked(element, 'in2=\\\"', displacementMap.in2, '\\\" ')) : element;\\n    element = !equal(displacementMap.result, '') ? string(abi.encodePacked(element, 'result=\\\"', displacementMap.result, '\\\" ')) : element;\\n    element = !equal(displacementMap.scale, '') ? string(abi.encodePacked(element, 'scale=\\\"', displacementMap.scale, '\\\" ')) : element;\\n    element = !equal(displacementMap.xChannelSelector, '') ? string(abi.encodePacked(element, 'xChannelSelector=\\\"', displacementMap.xChannelSelector, '\\\" ')) : element;\\n    element = !equal(displacementMap.yChannelSelector, '') ? string(abi.encodePacked(element, 'yChannelSelector=\\\"', displacementMap.yChannelSelector, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', displacementMap.val, '</feDisplacementMap>'));\\n    return element;\\n  }\\n\\n  struct ClipPath {\\n    string id;\\n    string val;\\n  }\\n\\n  function getClipPath(ClipPath memory clipPath) public pure returns (string memory) {\\n    string memory element = '<clipPath ';\\n    element = !equal(clipPath.id, '') ? string(abi.encodePacked(element, 'id=\\\"', clipPath.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, ' >', clipPath.val, '</clipPath>'));\\n    return element;\\n  }\\n\\n  struct LinearGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getLinearGradient(LinearGradient memory linearGradient) public pure returns (string memory) {\\n    string memory element = '<linearGradient ';\\n    element = !equal(linearGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', linearGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (linearGradient.colors.length - 1);\\n    for (uint i=0; i<linearGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != linearGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (linearGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!linearGradient.blockScheme || (linearGradient.blockScheme && i != linearGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(linearGradient.animate, '') ? string(abi.encodePacked(element, linearGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</linearGradient>'));\\n    return element;\\n  }\\n\\n  struct RadialGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getRadialGradient(RadialGradient memory radialGradient) public pure returns (string memory) {\\n    string memory element = '<radialGradient ';\\n    element = !equal(radialGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', radialGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (radialGradient.colors.length - 1);\\n    for (uint i=0; i<radialGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != radialGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (radialGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!radialGradient.blockScheme || (radialGradient.blockScheme && i != radialGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(radialGradient.animate, '') ? string(abi.encodePacked(element, radialGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</radialGradient>'));\\n    return element;\\n  }\\n\\n  function equal(string memory a, string memory b) private pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) private pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/SvgFilter.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './SvgElement.sol';\\nimport './LogoHelper.sol';\\n\\nlibrary SvgFilter {\\n\\n  struct Filter {\\n    string id;\\n    string filterType;\\n    string scale;\\n    bool animate;\\n  }\\n\\n  function getFilterDef(string memory seed, Filter memory filter) public pure returns (string memory) {\\n    string memory defs = '';\\n    string memory turbulance;\\n    string memory animateTurbulance;\\n    if (LogoHelper.equal(filter.scale, '50')) {\\n      turbulance = LogoHelper.getTurbulance(seed, 10000, 100000);\\n      if (filter.animate) {\\n        animateTurbulance = string(abi.encodePacked(turbulance, '; ', LogoHelper.getTurbulance(filter.id, 10000, 100000), '; ', turbulance, '; '));\\n      }\\n    }\\n\\n    if (filter.animate) {\\n      string memory element = SvgElement.getAnimate(SvgElement.Animate('baseFrequency', '', animateTurbulance, LogoHelper.toString(LogoHelper.randomInRange(seed, 100000, 100)), '0', 'indefinite', ''));\\n      element = SvgElement.getTurbulance(SvgElement.Turbulance('fractalNoise', turbulance, '5', 'r1', element));\\n      element = string(abi.encodePacked(element, SvgElement.getDisplacementMap(SvgElement.DisplacementMap('SourceGraphic', 'r1', 'r2', filter.scale, 'R', 'G', ''))));\\n      defs = string(abi.encodePacked(defs, SvgElement.getFilter(SvgElement.Filter(filter.id, element))));\\n    } else {\\n      string memory element = SvgElement.getTurbulance(SvgElement.Turbulance('fractalNoise', turbulance, '5', 'r1', ''));\\n      element = string(abi.encodePacked(element, SvgElement.getDisplacementMap(SvgElement.DisplacementMap('SourceGraphic', 'r1', 'r2', filter.scale, 'R', 'G', ''))));\\n      defs = string(abi.encodePacked(defs, SvgElement.getFilter(SvgElement.Filter(filter.id, element))));\\n    }\\n    return defs;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/background/SvgPattern.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../common/SvgElement.sol';\\nimport '../common/LogoHelper.sol';\\nimport '../common/InlineSvgElement.sol';\\n\\nlibrary SvgPattern {\\n  function getADef(string memory seed, string memory backgroundId, string memory fillType, string memory fillZeroClass) public pure returns (string memory) {\\n    uint patternSize = randomInRange(string(abi.encodePacked(seed, 'a')), 140, 10);\\n    // pattern should end in frame\\n    for (uint i = 0; i < 150; i++) {\\n      if (300 % (patternSize + i) == 0) {\\n        patternSize = patternSize + i;\\n        break;\\n      } \\n    }\\n    uint squareSize = randomInRange(string(abi.encodePacked(seed, 'b')), LogoHelper.equal(fillType, 'Solid') ? patternSize - (patternSize / 6) : patternSize + (patternSize / 2), patternSize / 6);\\n    string memory element = SvgElement.getRect(SvgElement.Rect(fillZeroClass, '0', '0', LogoHelper.toString(squareSize), LogoHelper.toString(squareSize), '', '', ''));\\n    return SvgElement.getPattern(SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSize), LogoHelper.toString(patternSize), 'userSpaceOnUse', element));\\n  }\\n\\n  function getBDef(string memory seed, string memory backgroundId, string memory fillZeroClass) public pure returns (string memory) {\\n    uint patternSize = randomInRange(string(abi.encodePacked(seed, 'a')), 200, 10);\\n    for (uint i = 0; i < 150; i++) {\\n      if (300 % (patternSize + i) == 0) {\\n        patternSize = patternSize + i;\\n        break;\\n      }  \\n    }\\n    uint circleRadius = randomInRange(string(abi.encodePacked(seed, 'b')), patternSize - (patternSize / 4), patternSize / 12);\\n    string memory center = LogoHelper.toString(randomInRange(string(abi.encodePacked(seed, 'c')), patternSize, patternSize / 4));\\n    string memory element = SvgElement.getCircle(SvgElement.Circle(fillZeroClass, center, center, LogoHelper.toString(circleRadius), ''));\\n    return SvgElement.getPattern(SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSize), LogoHelper.toString(patternSize), 'userSpaceOnUse', element));\\n  }\\n  \\n  function getAX2Def(string memory seed, string memory backgroundId, string memory fillZeroClass, string memory fillType, string memory fillOneClass) public pure returns (string memory) {\\n    uint patternSize = randomInRange(string(abi.encodePacked(seed, 'a')), 200, 2);\\n    for (uint i = 0; i < 150; i++) {\\n      if (300 % (patternSize + i) == 0) {\\n        patternSize = patternSize + i;\\n        break;\\n      } \\n    }\\n    uint squareSize1 = randomInRange(string(abi.encodePacked(seed, 'b')), LogoHelper.equal(fillType, 'Solid') ? patternSize : patternSize + (patternSize / 2), patternSize / 6);\\n    uint squareSize2 = randomInRange(string(abi.encodePacked(seed, 'c')), LogoHelper.equal(fillType, 'Solid') ? patternSize : patternSize + (patternSize / 2), patternSize / 6);\\n\\n    uint offset = randomInRange(string(abi.encodePacked(seed, 'd')), patternSize - (squareSize2 / 2) , 0);\\n    string memory opactiy = LogoHelper.decimalInRange(seed, 8, 10);\\n    string memory element = SvgElement.getRect(SvgElement.Rect(fillZeroClass, '0', '0', LogoHelper.toString(squareSize1), LogoHelper.toString(squareSize1), '', '', ''));\\n    element = string(abi.encodePacked(element, SvgElement.getRect(SvgElement.Rect(fillOneClass, LogoHelper.toString(offset), LogoHelper.toString(offset), LogoHelper.toString(squareSize2), LogoHelper.toString(squareSize2), opactiy, '', ''))));\\n    return SvgElement.getPattern(SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSize), LogoHelper.toString(patternSize), 'userSpaceOnUse', element));\\n  }\\n\\n  function getBX2Def(string memory seed, string memory backgroundId, string memory fillZeroClass, string memory fillOneClass) public pure returns (string memory) {\\n    uint patternSize = randomInRange(string(abi.encodePacked(seed, 'a')), 200, 20);\\n    for (uint i = 0; i < 150; i++) {\\n      if (300 % (patternSize + i) == 0) {\\n        patternSize = patternSize + i;\\n        break;\\n      } \\n    }\\n    uint circleRadius = randomInRange(string(abi.encodePacked(seed, 'b')), patternSize - (patternSize / 4), patternSize / 6);\\n\\n    string memory center = LogoHelper.toString(randomInRange(string(abi.encodePacked(seed, 'c')), patternSize, patternSize / 4));\\n    string memory element = SvgElement.getCircle(SvgElement.Circle(fillZeroClass, center, center, LogoHelper.toString(circleRadius), ''));\\n\\n    circleRadius = randomInRange(string(abi.encodePacked(seed, 'e')), patternSize, patternSize / 6);\\n    center = LogoHelper.toString(randomInRange(string(abi.encodePacked(seed, 'f')), patternSize, patternSize / 4));\\n    string memory opactiy = LogoHelper.decimalInRange(seed, 8, 10);\\n    element = string(abi.encodePacked(element, SvgElement.getCircle(SvgElement.Circle(fillOneClass, center, center, LogoHelper.toString(circleRadius), opactiy))));\\n    return SvgElement.getPattern(SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSize), LogoHelper.toString(patternSize), 'userSpaceOnUse', element));\\n  }\\n\\n  function getABDef(string memory seed, string memory backgroundId, string memory fillType, string memory fillZeroClass, string memory fillOneClass) public pure returns (string memory) {\\n    uint patternSize = randomInRange(string(abi.encodePacked(seed, 'a')), 200, 20);\\n    for (uint i = 0; i < 150; i++) {\\n      if ((patternSize + i) % 300 == 0) {\\n        patternSize = patternSize + i;\\n        break;\\n      } \\n    }\\n    uint squareSize1 = randomInRange(string(abi.encodePacked(seed, 'b')), LogoHelper.equal(fillType, 'Solid') ? patternSize : patternSize + (patternSize / 2), patternSize / 6);\\n    string memory element = SvgElement.getRect(SvgElement.Rect(fillZeroClass, '0', '0', LogoHelper.toString(squareSize1), LogoHelper.toString(squareSize1), '', '', ''));\\n\\n    uint circleRadius = randomInRange(string(abi.encodePacked(seed, 'b')), patternSize - (patternSize / 4), patternSize / 6);\\n    string memory center = LogoHelper.toString(randomInRange(string(abi.encodePacked(seed, 'c')), patternSize, patternSize / 4));\\n    element = string(abi.encodePacked(element, SvgElement.getCircle(SvgElement.Circle(fillOneClass, center, center, LogoHelper.toString(circleRadius), ''))));\\n    return SvgElement.getPattern(SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSize), LogoHelper.toString(patternSize), 'userSpaceOnUse', element));\\n  }\\n\\n  function getGMDef(string memory seed, string memory backgroundId, string memory fillZeroClass, string memory fillOneClass, string memory fillTwoClass, string memory fillThreeClass) public pure returns (string memory) {\\n    // sky\\n    uint patternSizeX = randomInRange(string(abi.encodePacked(seed, 'a')), 300, 6);\\n    uint patternSizeY = randomInRange(string(abi.encodePacked(seed, 'b')), 300, 6);\\n    uint squareSize2 = randomInRange(seed, patternSizeX / 2, patternSizeX / 6);\\n\\n    uint offset = randomInRange(seed, patternSizeX - (squareSize2 / 2) , 0);\\n\\n    string memory element = SvgElement.getRect(SvgElement.Rect(fillZeroClass, '0', '0', LogoHelper.toString(patternSizeX), LogoHelper.toString(patternSizeX), '', '', ''));\\n    element = string(abi.encodePacked(element, SvgElement.getRect(SvgElement.Rect(fillOneClass, LogoHelper.toString(offset), LogoHelper.toString(offset), LogoHelper.toString(squareSize2), LogoHelper.toString(squareSize2), '0.8', '', ''))));\\n    SvgElement.Pattern memory pattern = SvgElement.Pattern(string(abi.encodePacked(backgroundId, '-1')), '0', '0', LogoHelper.toString(patternSizeX), LogoHelper.toString(patternSizeY), 'userSpaceOnUse', element);\\n    string memory defs = SvgElement.getPattern(pattern);\\n\\n    // ocean\\n    patternSizeX = 300;\\n    patternSizeY = randomInRange(string(abi.encodePacked(seed, 'c')), 30, 0);\\n    squareSize2 = randomInRange(seed, patternSizeX, patternSizeX / 4);\\n    offset = 230 - (squareSize2 / 2);\\n    backgroundId = string(abi.encodePacked(backgroundId, '-2'));\\n\\n    element = SvgElement.getRect(SvgElement.Rect(fillTwoClass, '0', '0', LogoHelper.toString(patternSizeX), LogoHelper.toString(squareSize2), '', '', ''));\\n    // element = string(abi.encodePacked(element, SvgElement.getRect(SvgElement.Rect(fillThreeClass, LogoHelper.toString(offset), '5', LogoHelper.toString(squareSize2), '10', '0.8', '', ''))));\\n    element = string(abi.encodePacked(element, SvgElement.getRect(SvgElement.Rect(fillThreeClass, LogoHelper.toString(offset), LogoHelper.toString(patternSizeY), LogoHelper.toString(squareSize2), LogoHelper.toString(patternSizeY), '0.8', '', ''))));\\n    patternSizeY = randomInRange(string(abi.encodePacked(seed, 'd')), 100, 0);\\n    pattern = SvgElement.Pattern(backgroundId, '0', '0', LogoHelper.toString(patternSizeX), LogoHelper.toString(patternSizeY), 'userSpaceOnUse', element);\\n    return string(abi.encodePacked(defs, SvgElement.getPattern(pattern)));\\n  }\\n\\n  function randomInRange(string memory input, uint max, uint offset) public pure returns (uint256) {\\n    max = max - offset;\\n    return (random(input) % max) + offset;\\n  }\\n\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/InlineSvgElement.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice A helper to create svg elements\\npragma solidity ^0.8.0;\\n\\n\\nlibrary InlineSvgElement {\\n  function getTspanBytes1(\\n      string memory class,\\n      string memory display, \\n      string memory dx, \\n      string memory dy, \\n      bytes1 val)\\n      public pure \\n      returns (string memory) {\\n    return string(abi.encodePacked('<tspan class=\\\"', class, '\\\" display=\\\"', display, '\\\" dx=\\\"', dx, '\\\" dy=\\\"', dy, '\\\" >', val));\\n  }\\n\\n  function getAnimate(\\n      string memory attributeName,\\n      string memory values,\\n      string memory duration,\\n      string memory begin,\\n      string memory repeatCount,\\n      string memory fill) \\n      public pure \\n      returns (string memory) {\\n    return string(abi.encodePacked('<animate attributeName=\\\"', attributeName, '\\\" values=\\\"', values, '\\\" dur=\\\"', duration, 'ms\\\" begin=\\\"', begin, 'ms\\\" repeatCount=\\\"', repeatCount, '\\\"  fill=\\\"', fill, '\\\" />'));\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/background/SvgBackground.sol\": {\r\n        \"SvgBackground\": \"0x9cc2155cbbe2abe94a410cf4a343d0b63631e1ac\"\r\n      },\r\n      \"contracts/common/SvgHeader.sol\": {\r\n        \"SvgHeader\": \"0xbc7b0af4b0626f4efb589f0f0e6c729e27f6f8cb\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svgVal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"backgroundType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filterType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFilter.Filter\",\"name\":\"filter\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackground.Background\",\"name\":\"background\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackgroundBuilder.SvgDescriptor\",\"name\":\"svg\",\"type\":\"tuple\"}],\"name\":\"getSvg\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svgVal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"backgroundType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filterType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFilter.Filter\",\"name\":\"filter\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackground.Background\",\"name\":\"background\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackgroundBuilder.SvgDescriptor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSvgClose\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svgVal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"backgroundType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filterType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFilter.Filter\",\"name\":\"filter\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackground.Background\",\"name\":\"background\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackgroundBuilder.SvgDescriptor\",\"name\":\"svg\",\"type\":\"tuple\"}],\"name\":\"getSvgContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svgVal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"backgroundType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filterType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFilter.Filter\",\"name\":\"filter\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackground.Background\",\"name\":\"background\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackgroundBuilder.SvgDescriptor\",\"name\":\"svg\",\"type\":\"tuple\"}],\"name\":\"getSvgDefs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"}],\"name\":\"getSvgOpen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svgVal\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"backgroundType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filterType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFilter.Filter\",\"name\":\"filter\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackground.Background\",\"name\":\"background\",\"type\":\"tuple\"}],\"internalType\":\"struct SvgBackgroundBuilder.SvgDescriptor\",\"name\":\"svg\",\"type\":\"tuple\"}],\"name\":\"getSvgStyles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SvgBackgroundBuilder", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}