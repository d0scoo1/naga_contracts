{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.22;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;       \r\n    }       \r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender != address(0));\r\n        require(msg.sender == newOwner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public onlyNewOwner returns(bool) {\r\n        emit OwnershipTransferred(owner, newOwner);        \r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    uint256 public count;\r\n    using SafeMath for uint256;\r\n\r\n    //mapping (uint256 => address) public whitelist;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (uint256 => address) public indexlist;\r\n    mapping (address => uint256) public reverseWhitelist;\r\n\r\n\r\n    constructor() public {\r\n        count = 0;\r\n    }\r\n    \r\n    function AddWhitelist(address account) public onlyOwner returns(bool) {\r\n        require(account != address(0));\r\n        whitelist[account] = true;\r\n        if( reverseWhitelist[account] == 0 ) {\r\n            count = count.add(1);\r\n            indexlist[count] = account;\r\n            reverseWhitelist[account] = count;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function GetLengthofList() public view returns(uint256) {\r\n        return count;\r\n    }\r\n\r\n    function RemoveWhitelist(address account) public onlyOwner {\r\n        require( reverseWhitelist[account] != 0 );\r\n        whitelist[account] = false;\r\n    }\r\n\r\n    function GetWhitelist(uint256 index) public view returns(address) {\r\n        return indexlist[index];        \r\n    }\r\n    \r\n    function IsWhite(address account) public view returns(bool) {\r\n        return whitelist[account];\r\n    }\r\n}\r\n\r\n\r\ncontract Formysale is Ownable, Pausable, Whitelist {    \r\n    uint256 public weiRaised;         // \ud604\uc7ac\uae4c\uc9c0\uc758 Ether \ubaa8\uae08\uc561\r\n    uint256 public personalMincap;    // \ucd5c\uc18c \ubaa8\uae08 \ucc38\uc5ec \uac00\ub2a5 Ether\r\n    uint256 public personalMaxcap;    // \ucd5c\ub300 \ubaa8\uae08 \ucc38\uc5ec \uac00\ub2a5 Ether\r\n    uint256 public startTime;         // \ud504\ub9ac\uc138\uc77c \uc2dc\uc791\uc2dc\uac04\r\n    uint256 public endTime;           // \ud504\ub9ac\uc138\uc77c \uc885\ub8cc\uc2dc\uac04\r\n    uint256 public exchangeRate;      // 1 Ether \ub2f9 SYNCO \uad50\ud658\ube44\uc728\r\n    uint256 public remainToken;       // \ud310\ub9e4 \uac00\ub2a5\ud55c \ud1a0\ud070\uc758 \uc218\ub7c9\r\n    bool    public isFinalized;       // \uc885\ub8cc\uc5ec\ubd80\r\n\r\n    uint256 public mtStartTime;       // \uad50\ud658\ube44\uc728 \uc870\uc815 \uc2dc\uc791 \uc2dc\uac04\r\n    uint256 public mtEndTime;         // \uad50\ud658\ube44\uc728 \uc870\uc815 \uc885\ub8cc \uc2dc\uac04\r\n\r\n\r\n    mapping (address => uint256) public beneficiaryFunded; //\uad6c\ub9e4\uc790 : \uc9c0\ubd88\ud55c \uc774\ub354\r\n    mapping (address => uint256) public beneficiaryBought; //\uad6c\ub9e4\uc790 : \uad6c\ub9e4\ud55c \ud1a0\ud070\r\n\r\n    event Buy(address indexed beneficiary, uint256 payedEther, uint256 tokenAmount);\r\n\r\n    constructor(uint256 _rate) public { \r\n        startTime = 1532919600;           // 2018\ub144 7\uc6d4 30\uc77c \uc6d4\uc694\uc77c \uc624\ud6c4 12:00:00 KST    (2018\ub144 7\uc6d4 30\uc77c Mon AM 3:00:00 GMT)\r\n        endTime = 1534647600;             // 2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 12:00:00 KST    (2018\ub144 8\uc6d4 19\uc77c Sun AM 3:00:00 GMT)\r\n        remainToken = 6500000000 * 10 ** 18; // 6,500,000,000 \uac1c\uc758 \ud1a0\ud070 \ud310\ub9e4\r\n\r\n        exchangeRate = _rate;\r\n        personalMincap = (1 ether);\r\n        personalMaxcap = (1000 ether);\r\n        isFinalized = false;\r\n        weiRaised = 0x00;\r\n        mtStartTime = 28800;  //\uc624\ud6c4 5\uc2dc KST\r\n        mtEndTime = 32400;    //\uc624\ud6c4 6\uc2dc KST\r\n    }    \r\n\r\n    function buyPresale() public payable whenNotPaused {\r\n        address beneficiary = msg.sender;\r\n        uint256 toFund = msg.value;     // \uc720\uc800\uac00 \ubcf4\ub0b8 \uc774\ub354\ub9ac\uc6c0 \uc591(\ud380\ub529 \ud560 \uc774\ub354)\r\n\r\n        // \ud604\uc7ac \ube44\uc728\uc5d0\uc11c \uad6c\ub9e4\ud558\uac8c \ub420 \ud1a0\ud070\uc758 \uc218\ub7c9\r\n        uint256 tokenAmount = SafeMath.mul(toFund,exchangeRate);\r\n        // check validity\r\n        require(!isFinalized);\r\n        require(validPurchase());       // \ud310\ub9e4\uc870\uac74 \uac80\uc99d(\ucd5c\uc18c \uc774\ub354\ub7c9 && \ud310\ub9e4\uc2dc\uac04 \uc900\uc218 && gas\ub7c9 && \uac1c\uc778\ud558\ub4dc\ucea1 \ucd08\uacfc)\r\n        require(whitelist[beneficiary]);// WhitList \ub4f1\ub85d\ub418\uc5b4\uc57c\ub9cc \uc138\uc77c\uc5d0 \ucc38\uc5ec \uac00\ub2a5\r\n        require(remainToken >= tokenAmount);// \ub0a8\uc740 \ud1a0\ud070\uc774 \uad50\ud658\ud574 \uc904 \ud1a0\ud070\uc758 \uc591\ubcf4\ub2e4 \ub9ce\uc544\uc57c \ud55c\ub2e4.\r\n                \r\n\r\n        weiRaised = SafeMath.add(weiRaised, toFund);            //\ud604\uc7ac\uae4c\uc9c0\uc9c0 \ubaa8\uae08\uc561\uc5d0 \ud380\ub529\uae08\uc561 \ud569\uc0b0\r\n        remainToken = SafeMath.sub(remainToken, tokenAmount);   //\ub0a8\uc740 \ud310\ub9e4 \uc218\ub7c9\uc5d0\uc11c \uad6c\ub9e4\ub7c9\ub9cc\ud07c \ucc28\uac10\r\n        beneficiaryFunded[beneficiary] = SafeMath.add(beneficiaryFunded[msg.sender], toFund);\r\n        beneficiaryBought[beneficiary] = SafeMath.add(beneficiaryBought[msg.sender], tokenAmount);\r\n\r\n        emit Buy(beneficiary, toFund, tokenAmount);\r\n        \r\n    }\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        //\ubcf4\ub0b4\uc900 \uc774\ub354\uc591\uc774 0.1 \uc774\uc0c1\uc778\uc9c0 \uadf8\ub9ac\uace0 \uc804\uccb4 \uc9c0\ubd88\ud55c Ethere\uac00 1,000\uc744 \ub118\uc5b4\uac00\ub294\uc9c0 \uccb4\ud06c \r\n        bool validValue = msg.value >= personalMincap && beneficiaryFunded[msg.sender].add(msg.value) <= personalMaxcap;\r\n\r\n        //\ud604\uc7ac \ud310\ub9e4\uae30\uac04\uc778\uc9c0 \uccb4\ud06c && \uc815\ube44\uc2dc\uac04\uc774 \uc544\ub2cc\uc9c0 \uccb4\ud06c \r\n        bool validTime = now >= startTime && now <= endTime && !checkMaintenanceTime();\r\n\r\n        return validValue && validTime;\r\n    }\r\n\r\n    function checkMaintenanceTime() public view returns (bool){\r\n        uint256 datetime = now % (60 * 60 * 24);\r\n        return (datetime >= mtStartTime && datetime < mtEndTime);\r\n    }\r\n\r\n    function getNowTime() public view returns(uint256) {\r\n        return now;\r\n    }\r\n\r\n    // Owner only Functions\r\n    function changeStartTime( uint64 newStartTime ) public onlyOwner {\r\n        startTime = newStartTime;\r\n    }\r\n\r\n    function changeEndTime( uint64 newEndTime ) public onlyOwner {\r\n        endTime = newEndTime;\r\n    }\r\n\r\n    function changePersonalMincap( uint256 newpersonalMincap ) public onlyOwner {\r\n        personalMincap = newpersonalMincap * (1 ether);\r\n    }\r\n\r\n    function changePersonalMaxcap( uint256 newpersonalMaxcap ) public onlyOwner {\r\n        personalMaxcap = newpersonalMaxcap * (1 ether);\r\n    }\r\n\r\n    function FinishTokenSale() public onlyOwner {\r\n        require(now > endTime || remainToken == 0);\r\n        isFinalized = true;        \r\n        owner.transfer(weiRaised); //\ud604\uc7ac\uae4c\uc9c0\uc758 \ubaa8\uae08\uc561\uc744 Owner\uc9c0\uac11\uc73c\ub85c \uc804\uc1a1.\r\n    }\r\n\r\n    function changeRate(uint256 _newRate) public onlyOwner {\r\n        require(checkMaintenanceTime());\r\n        exchangeRate = _newRate; \r\n    }\r\n\r\n    function changeMaintenanceTime(uint256 _startTime, uint256 _endTime) public onlyOwner{\r\n        mtStartTime = _startTime;\r\n        mtEndTime = _endTime;\r\n    }\r\n\r\n    // Fallback Function. \uad6c\ub9e4\uc790\uac00 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\ub85c \uadf8\ub0e5 \uc774\ub354\ub97c \uc3dc\uacbd\uc6b0 \ubc14\uc774\ud504\ub9ac\uc138\uc77c \uc218\ud589\ud568\r\n    function () public payable {\r\n        buyPresale();\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reverseWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalMaxcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkMaintenanceTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GetWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newpersonalMaxcap\",\"type\":\"uint256\"}],\"name\":\"changePersonalMaxcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FinishTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeMaintenanceTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStartTime\",\"type\":\"uint64\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLengthofList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexlist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndTime\",\"type\":\"uint64\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newpersonalMincap\",\"type\":\"uint256\"}],\"name\":\"changePersonalMincap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalMincap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IsWhite\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payedEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Formysale", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000052080", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d41dd9d9d630bbef111bc1f62071720d9071427c5dac084ec9a47954e5026d10"}]}