{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Params.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.6.0 <=0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IParams.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Params is Ownable, IParams {\\n    uint256 public minimumSwapAmountForWBTC;\\n    uint256 public expirationTime;\\n    address public paraswapAddress;\\n    uint8 public nodeRewardsRatio;\\n    uint8 public depositFeesBPS;\\n    uint8 public withdrawalFeeBPS;\\n    uint8 public loopCount; //max loops when cleaning up expired SkyPools TXs\\n\\n    constructor() {\\n        //Initialize minimumSwapAmountForWBTC\\n        minimumSwapAmountForWBTC = 24000;\\n        // Initialize expirationTime\\n        expirationTime = 172800; //2 days\\n        // Initialize paraswap address to current address\\n        paraswapAddress = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57;\\n        // Initialize nodeRewardsRatio\\n        nodeRewardsRatio = 66;\\n        // Initialize withdrawalFeeBPS\\n        withdrawalFeeBPS = 20;\\n        // Initialize depositFeesBPS\\n        depositFeesBPS = 0;\\n        // Initialize loopCount\\n        loopCount = 10;\\n    }\\n\\n    function setMinimumSwapAmountForWBTC(uint256 _minimumSwapAmountForWBTC)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _minimumSwapAmountForWBTC > 0,\\n            \\\"_minimumSwapAmountForWBTC can not be 0\\\"\\n        );\\n        minimumSwapAmountForWBTC = _minimumSwapAmountForWBTC;\\n    }\\n\\n    function setExpirationTime(uint256 _expirationTime) external onlyOwner {\\n        require(_expirationTime >= 0, \\\"_expirationTime can not be 0\\\");\\n        expirationTime = _expirationTime;\\n    }\\n\\n    function setParaswapAddress(address _paraswapAddress) external onlyOwner {\\n        paraswapAddress = _paraswapAddress;\\n    }\\n\\n    function setNodeRewardsRatio(uint8 _nodeRewardsRatio) external onlyOwner {\\n        require(\\n            _nodeRewardsRatio >= 0 && _nodeRewardsRatio <= 100,\\n            \\\"_nodeRewardsRatio is not valid\\\"\\n        );\\n        nodeRewardsRatio = _nodeRewardsRatio;\\n    }\\n\\n    function setWithdrawalFeeBPS(uint8 _withdrawalFeeBPS) external onlyOwner {\\n        require(\\n            _withdrawalFeeBPS >= 0 && _withdrawalFeeBPS <= 100,\\n            \\\"_withdrawalFeeBPS is invalid\\\"\\n        );\\n        withdrawalFeeBPS = _withdrawalFeeBPS;\\n    }\\n\\n    function setDepositFeesBPS(uint8 _depositFeesBPS) external onlyOwner {\\n        require(\\n            _depositFeesBPS >= 0 && _depositFeesBPS <= 100,\\n            \\\"_depositFeesBPS is invalid\\\"\\n        );\\n        depositFeesBPS = _depositFeesBPS;\\n    }\\n\\n    function setLoopCount(uint8 _loopCount) external onlyOwner {\\n        require(_loopCount != 0, \\\"_loopCount can not equal 0\\\");\\n        loopCount = _loopCount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.6.0 <=0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IParams {\\n\\n    function minimumSwapAmountForWBTC() external view returns (uint256);\\n    function expirationTime() external view returns (uint256);\\n    function paraswapAddress() external view returns (address);\\n    function nodeRewardsRatio() external view returns (uint8);\\n    function depositFeesBPS() external view returns (uint8);\\n    function withdrawalFeeBPS() external view returns (uint8);\\n    function loopCount() external view returns (uint8);\\n\\n    function setMinimumSwapAmountForWBTC(uint256 _minimumSwapAmountForWBTC) external;\\n\\n    function setExpirationTime(uint256 _expirationTime) external;\\n\\n    function setParaswapAddress(address _paraswapAddress) external;\\n\\n    function setNodeRewardsRatio(uint8 _nodeRewardsRatio) external;\\n\\n    function setWithdrawalFeeBPS(uint8 _withdrawalFeeBPS) external;\\n\\n    function setDepositFeesBPS(uint8 _depositFeesBPS) external;\\n\\n    function setLoopCount(uint8 _loopCount) external;\\n}   \\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depositFeesBPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loopCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumSwapAmountForWBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRewardsRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paraswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_depositFeesBPS\",\"type\":\"uint8\"}],\"name\":\"setDepositFeesBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"setExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_loopCount\",\"type\":\"uint8\"}],\"name\":\"setLoopCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumSwapAmountForWBTC\",\"type\":\"uint256\"}],\"name\":\"setMinimumSwapAmountForWBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_nodeRewardsRatio\",\"type\":\"uint8\"}],\"name\":\"setNodeRewardsRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paraswapAddress\",\"type\":\"address\"}],\"name\":\"setParaswapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_withdrawalFeeBPS\",\"type\":\"uint8\"}],\"name\":\"setWithdrawalFeeBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeBPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Params", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}