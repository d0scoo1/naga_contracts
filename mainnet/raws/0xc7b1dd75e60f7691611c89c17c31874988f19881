{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: VETUS\r\npragma solidity ^0.6.12;\r\n\r\ncontract VetusToken{\r\nstring public constant name = \"VetusToken\";\r\nstring public constant symbol = \"VETUS\";\r\n    // pay 1% of all transactions to target address\r\n    address payable target = 0x651B7929cAd0Af75903E273304ceF8bf7c2FF71a;\r\n\r\n    // state variables for your token to track balances\r\n    mapping (address => uint) public balanceOf;\r\n    uint public totalSupply = 15000000;\r\n\r\n    // create a token and assign all the tokens to the creator\r\n    constructor(uint _totalSupply) public {\r\n        totalSupply = _totalSupply;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    // the token transfer function with the addition of a 1% share that\r\n    // goes to the target address specified above for our Veterans\r\n    function transfer(address _to, uint amount) public {\r\n\r\n        // calculate the share of tokens for your target address\r\n        uint shareForX = amount/100;\r\n\r\n        // save the previous balance of the sender for later assertion\r\n        // verify that all works as intended\r\n        uint senderBalance = balanceOf[msg.sender];\r\n        \r\n        // check the sender actually has enough tokens to transfer with function \r\n        // modifier\r\n        require(senderBalance >= amount, 'Not enough balance');\r\n        \r\n        // reduce senders balance first to prevent the sender from sending more \r\n        // than he owns by submitting multiple transactions\r\n        balanceOf[msg.sender] -= amount;\r\n        \r\n        // store the previous balance of the receiver for later assertion\r\n        // verify that all works as intended\r\n        uint receiverBalance = balanceOf[_to];\r\n\r\n        // add the amount of tokens to the receiver but deduct the share for the\r\n        // target address\r\n        balanceOf[_to] += amount-shareForX;\r\n        \r\n        // add the share to the target address\r\n        balanceOf[target] += shareForX;\r\n\r\n        // check that everything works as intended, specifically checking that\r\n        // the sum of tokens in all accounts is the same before and after\r\n        // the transaction. \r\n        assert(balanceOf[msg.sender] + balanceOf[_to] + shareForX ==\r\n            senderBalance + receiverBalance);\r\n    \r\n    \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VetusToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000e4e1c0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://60ebad4bceb3affb55d5628da4da83d0d462e4f3a7475bc99d19ad168975c127"}]}