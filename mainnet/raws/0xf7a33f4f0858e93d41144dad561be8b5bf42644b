{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OtoCoJurisdiction.sol\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract OtoCoJurisdiction {\r\n\r\n    string private name;\r\n    string private defaultBadge;\r\n    string private goldBadge;\r\n\r\n    constructor (\r\n        string memory _name,\r\n        string memory _defaultBadge,\r\n        string memory _goldBadge\r\n    ) {\r\n        name = _name;\r\n        defaultBadge = _defaultBadge;\r\n        goldBadge = _goldBadge;\r\n    }\r\n\r\n    /**\r\n     * Get formatted name according to the jurisdiction requirement.\r\n     * To use when create new series, before series creation.\r\n     * Returns the string name formatted accordingly.\r\n     *\r\n     * @param count current number of series deployed at the jurisdiction.\r\n     * @return nameToFormat name of the series to format accordingly.\r\n     */\r\n    function getSeriesNameFormatted (uint256 count, string calldata nameToFormat) public pure virtual returns(string memory);\r\n    \r\n    /**\r\n     * Return the name of the jurisdiction.\r\n     * \r\n     * @return name the name of the jurisdiction.\r\n     */\r\n    function getJurisdictionName () external view returns(string memory){\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Return the NFT URI link of the jurisdiction.\r\n     * \r\n     * @return defaultBadge the badge URI.\r\n     */\r\n    function getJurisdictionBadge () external view returns(string memory) {\r\n        return defaultBadge;\r\n    }\r\n\r\n    /**\r\n     * Return the Gold NFT URI link of the jurisdiction.\r\n     * \r\n     * @return goldBadge the gold badge URI.\r\n     */\r\n    function getJurisdictionGoldBadge () external view returns(string memory){\r\n        return goldBadge;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/jurisdictions/Wyoming.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract JurisdictionWyoming is OtoCoJurisdiction {\r\n\r\n    // Libraries\r\n    using Strings for uint256;\r\n\r\n    constructor (\r\n        string memory _name,\r\n        string memory _defaultBadge,\r\n        string memory _goldBadge\r\n    ) OtoCoJurisdiction(_name, _defaultBadge, _goldBadge) {}\r\n\r\n    /**\r\n     * @dev See {OtoCoJurisdiction-getSeriesNameFormatted}.\r\n     */\r\n    function getSeriesNameFormatted (\r\n        uint256 count,\r\n        string calldata nameToFormat\r\n    ) public pure override returns(string memory){\r\n        return string(abi.encodePacked(nameToFormat, ' - Series ', uint256(count+1).toString()));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_defaultBadge\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_goldBadge\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getJurisdictionBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJurisdictionGoldBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJurisdictionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nameToFormat\",\"type\":\"string\"}],\"name\":\"getSeriesNameFormatted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "JurisdictionWyoming", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000757594f4d494e4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f697066732f516d64624659506879796f4746376f5a3133663370386450473636647a724e794b393438337753616f506f6f79590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f697066732f516d53617966686a726e414665566b7141637759696d746372545a646d7971504b4a51444136484343364b3278380000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be9e3e993b7f3d8eb357f1304388e317f79d8339448fb9f958819a3188f29f2e"}]}