{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { SafeCast } from \\\"./libraries/SafeCast.sol\\\";\\nimport { Timestamp } from \\\"./base/Timestamp.sol\\\";\\nimport { ICorePool } from \\\"./interfaces/ICorePool.sol\\\";\\nimport { IERC20Mintable } from \\\"./interfaces/IERC20Mintable.sol\\\";\\nimport { ErrorHandler } from \\\"./libraries/ErrorHandler.sol\\\";\\n\\n/**\\n * @title Pool Factory V2\\n *\\n * @dev Pool Factory manages Illuvium staking pools, provides a single\\n *      public interface to access the pools, provides an interface for the pools\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\n *\\n * @dev The factory is authorized (via its owner) to register new pools, change weights\\n *      of the existing pools, removing the pools (by changing their weights to zero).\\n *\\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the ILV and sILV tokens to mint yield\\n *      (see `mintYieldTo` function).\\n *\\n * @notice The contract uses Ownable implementation, so only the eDAO is able to handle\\n *         admin activities, such as registering new pools, doing contract upgrades,\\n *         changing pool weights, managing emission schedules and so on.\\n *\\n */\\ncontract PoolFactory is Initializable, UUPSUpgradeable, OwnableUpgradeable, Timestamp {\\n    using ErrorHandler for bytes4;\\n    using SafeCast for uint256;\\n\\n    /// @dev Auxiliary data structure used only in getPoolData() view function\\n    struct PoolData {\\n        // @dev pool token address (like ILV)\\n        address poolToken;\\n        // @dev pool address (like deployed core pool instance)\\n        address poolAddress;\\n        // @dev pool weight (200 for ILV pools, 800 for ILV/ETH pools - set during deployment)\\n        uint32 weight;\\n        // @dev flash pool flag\\n        bool isFlashPool;\\n    }\\n\\n    /**\\n     * @dev ILV/second determines yield farming reward base\\n     *      used by the yield pools controlled by the factory.\\n     */\\n    uint192 public ilvPerSecond;\\n\\n    /**\\n     * @dev The yield is distributed proportionally to pool weights;\\n     *      total weight is here to help in determining the proportion.\\n     */\\n    uint32 public totalWeight;\\n\\n    /**\\n     * @dev ILV/second decreases by 3% every seconds/update\\n     *      an update is triggered by executing `updateILVPerSecond` public function.\\n     */\\n    uint32 public secondsPerUpdate;\\n\\n    /**\\n     * @dev End time is the last timestamp when ILV/second can be decreased;\\n     *      it is implied that yield farming stops after that timestamp.\\n     */\\n    uint32 public endTime;\\n\\n    /**\\n     * @dev Each time the ILV/second ratio gets updated, the timestamp\\n     *      when the operation has occurred gets recorded into `lastRatioUpdate`.\\n     * @dev This timestamp is then used to check if seconds/update `secondsPerUpdate`\\n     *      has passed when decreasing yield reward by 3%.\\n     */\\n    uint32 public lastRatioUpdate;\\n\\n    /// @dev ILV token address.\\n    address private _ilv;\\n\\n    /// @dev sILV token address\\n    address private _silv;\\n\\n    /// @dev Maps pool token address (like ILV) -> pool address (like core pool instance).\\n    mapping(address => address) public pools;\\n\\n    /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag.\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Fired in registerPool()\\n     *\\n     * @param by an address which executed an action\\n     * @param poolToken pool token address (like ILV)\\n     * @param poolAddress deployed pool instance address\\n     * @param weight pool weight\\n     * @param isFlashPool flag indicating if pool is a flash pool\\n     */\\n    event LogRegisterPool(\\n        address indexed by,\\n        address indexed poolToken,\\n        address indexed poolAddress,\\n        uint64 weight,\\n        bool isFlashPool\\n    );\\n\\n    /**\\n     * @dev Fired in `changePoolWeight()`.\\n     *\\n     * @param by an address which executed an action\\n     * @param poolAddress deployed pool instance address\\n     * @param weight new pool weight\\n     */\\n    event LogChangePoolWeight(address indexed by, address indexed poolAddress, uint32 weight);\\n\\n    /**\\n     * @dev Fired in `updateILVPerSecond()`.\\n     *\\n     * @param by an address which executed an action\\n     * @param newIlvPerSecond new ILV/second value\\n     */\\n    event LogUpdateILVPerSecond(address indexed by, uint256 newIlvPerSecond);\\n\\n    /**\\n     * @dev Fired in `setEndTime()`.\\n     *\\n     * @param by an address which executed the action\\n     * @param endTime new endTime value\\n     */\\n    event LogSetEndTime(address indexed by, uint32 endTime);\\n\\n    /**\\n     * @dev Initializes a factory instance\\n     *\\n     * @param ilv_ ILV ERC20 token address\\n     * @param silv_ sILV ERC20 token address\\n     * @param _ilvPerSecond initial ILV/second value for rewards\\n     * @param _secondsPerUpdate how frequently the rewards gets updated (decreased by 3%), seconds\\n     * @param _initTime timestamp to measure _secondsPerUpdate from\\n     * @param _endTime timestamp number when farming stops and rewards cannot be updated anymore\\n     */\\n\\n    function initialize(\\n        address ilv_,\\n        address silv_,\\n        uint192 _ilvPerSecond,\\n        uint32 _secondsPerUpdate,\\n        uint32 _initTime,\\n        uint32 _endTime\\n    ) external initializer {\\n        bytes4 fnSelector = this.initialize.selector;\\n        // verify the inputs are set correctly\\n        fnSelector.verifyNonZeroInput(uint160(ilv_), 0);\\n        fnSelector.verifyNonZeroInput(uint160(silv_), 1);\\n        fnSelector.verifyNonZeroInput(_ilvPerSecond, 2);\\n        fnSelector.verifyNonZeroInput(_secondsPerUpdate, 3);\\n        fnSelector.verifyNonZeroInput(_initTime, 4);\\n        fnSelector.verifyInput(_endTime > _now256(), 5);\\n\\n        __Ownable_init();\\n\\n        // save the inputs into internal state variables\\n        _ilv = ilv_;\\n        _silv = silv_;\\n        ilvPerSecond = _ilvPerSecond;\\n        secondsPerUpdate = _secondsPerUpdate;\\n        lastRatioUpdate = _initTime;\\n        endTime = _endTime;\\n    }\\n\\n    /**\\n     * @notice Given a pool token retrieves corresponding pool address.\\n     *\\n     * @dev A shortcut for `pools` mapping.\\n     *\\n     * @param poolToken pool token address (like ILV) to query pool address for\\n     * @return pool address for the token specified\\n     */\\n    function getPoolAddress(address poolToken) external view virtual returns (address) {\\n        // read the mapping and return\\n        return address(pools[poolToken]);\\n    }\\n\\n    /**\\n     * @notice Reads pool information for the pool defined by its pool token address,\\n     *      designed to simplify integration with the front ends.\\n     *\\n     * @param _poolToken pool token address to query pool information for.\\n     * @return pool information packed in a PoolData struct.\\n     */\\n    function getPoolData(address _poolToken) public view virtual returns (PoolData memory) {\\n        bytes4 fnSelector = this.getPoolData.selector;\\n        // get the pool address from the mapping\\n        ICorePool pool = ICorePool(pools[_poolToken]);\\n\\n        // throw if there is no pool registered for the token specified\\n        fnSelector.verifyState(uint160(address(pool)) != 0, 0);\\n\\n        // read pool information from the pool smart contract\\n        // via the pool interface (ICorePool)\\n        address poolToken = pool.poolToken();\\n        bool isFlashPool = pool.isFlashPool();\\n        uint32 weight = pool.weight();\\n\\n        // create the in-memory structure and return it\\n        return PoolData({ poolToken: poolToken, poolAddress: address(pool), weight: weight, isFlashPool: isFlashPool });\\n    }\\n\\n    /**\\n     * @dev Verifies if `secondsPerUpdate` has passed since last ILV/second\\n     *      ratio update and if ILV/second reward can be decreased by 3%.\\n     *\\n     * @return true if enough time has passed and `updateILVPerSecond` can be executed.\\n     */\\n    function shouldUpdateRatio() public view virtual returns (bool) {\\n        // if yield farming period has ended\\n        if (_now256() > endTime) {\\n            // ILV/second reward cannot be updated anymore\\n            return false;\\n        }\\n\\n        // check if seconds/update have passed since last update\\n        return _now256() >= lastRatioUpdate + secondsPerUpdate;\\n    }\\n\\n    /**\\n     * @dev Registers an already deployed pool instance within the factory.\\n     *\\n     * @dev Can be executed by the pool factory owner only.\\n     *\\n     * @param pool address of the already deployed pool instance\\n     */\\n    function registerPool(address pool) public virtual onlyOwner {\\n        // read pool information from the pool smart contract\\n        // via the pool interface (ICorePool)\\n        address poolToken = ICorePool(pool).poolToken();\\n        bool isFlashPool = ICorePool(pool).isFlashPool();\\n        uint32 weight = ICorePool(pool).weight();\\n\\n        // create pool structure, register it within the factory\\n        pools[poolToken] = pool;\\n        poolExists[pool] = true;\\n        // update total pool weight of the factory\\n        totalWeight += weight;\\n\\n        // emit an event\\n        emit LogRegisterPool(msg.sender, poolToken, address(pool), weight, isFlashPool);\\n    }\\n\\n    /**\\n     * @notice Decreases ILV/second reward by 3%, can be executed\\n     *      no more than once per `secondsPerUpdate` seconds.\\n     */\\n    function updateILVPerSecond() external virtual {\\n        bytes4 fnSelector = this.updateILVPerSecond.selector;\\n        // checks if ratio can be updated i.e. if seconds/update have passed\\n        fnSelector.verifyState(shouldUpdateRatio(), 0);\\n\\n        // decreases ILV/second reward by 3%.\\n        // To achieve that we multiply by 97 and then\\n        // divide by 100\\n        ilvPerSecond = (ilvPerSecond * 97) / 100;\\n\\n        // set current timestamp as the last ratio update timestamp\\n        lastRatioUpdate = (_now256()).toUint32();\\n\\n        // emit an event\\n        emit LogUpdateILVPerSecond(msg.sender, ilvPerSecond);\\n    }\\n\\n    /**\\n     * @dev Mints ILV tokens; executed by ILV Pool only.\\n     *\\n     * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\\n     *      on the ILV ERC20 token instance.\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param _value amount of ILV tokens to mint\\n     * @param _useSILV whether ILV or sILV should be minted\\n     */\\n    function mintYieldTo(\\n        address _to,\\n        uint256 _value,\\n        bool _useSILV\\n    ) external virtual {\\n        bytes4 fnSelector = this.mintYieldTo.selector;\\n        // verify that sender is a pool registered withing the factory\\n        fnSelector.verifyState(poolExists[msg.sender], 0);\\n\\n        // mints the requested token to the indicated address\\n        if (!_useSILV) {\\n            IERC20Mintable(_ilv).mint(_to, _value);\\n        } else {\\n            IERC20Mintable(_silv).mint(_to, _value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the weight of the pool;\\n     *      executed by the pool itself or by the factory owner.\\n     *\\n     * @param pool address of the pool to change weight for\\n     * @param weight new weight value to set to\\n     */\\n    function changePoolWeight(address pool, uint32 weight) external virtual {\\n        bytes4 fnSelector = this.changePoolWeight.selector;\\n        // verify function is executed either by factory owner or by the pool itself\\n        fnSelector.verifyAccess(msg.sender == owner() || poolExists[msg.sender]);\\n\\n        // recalculate total weight\\n        totalWeight = totalWeight + weight - ICorePool(pool).weight();\\n\\n        // set the new pool weight\\n        ICorePool(pool).setWeight(weight);\\n\\n        // emit an event\\n        emit LogChangePoolWeight(msg.sender, address(pool), weight);\\n    }\\n\\n    /**\\n     * @dev Updates yield generation ending timestamp.\\n     *\\n     * @param _endTime new end time value to be stored\\n     */\\n    function setEndTime(uint32 _endTime) external virtual onlyOwner {\\n        bytes4 fnSelector = this.setEndTime.selector;\\n        // checks if _endTime is a timestap after the last time that\\n        // ILV/second has been updated\\n        fnSelector.verifyInput(_endTime > lastRatioUpdate, 0);\\n        // updates endTime state var\\n        endTime = _endTime;\\n\\n        // emits an event\\n        emit LogSetEndTime(msg.sender, _endTime);\\n    }\\n\\n    /**\\n     * @dev Overrides `Ownable.renounceOwnership()`, to avoid accidentally\\n     *      renouncing ownership of the PoolFactory contract.\\n     */\\n    function renounceOwnership() public virtual override {}\\n\\n    /// @dev See `CorePool._authorizeUpgrade()`\\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {}\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity 0.8.4;\\n\\nimport { ErrorHandler } from \\\"./ErrorHandler.sol\\\";\\n\\n/**\\n * @notice Copied from OpenZeppelin's SafeCast.sol, adapted to use just in the required\\n * uint sizes.\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    using ErrorHandler for bytes4;\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 _value) internal pure returns (uint248) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint248(uint256))\\\"))`\\n        bytes4 fnSelector = 0x3fd72672;\\n        fnSelector.verifyInput(_value <= type(uint248).max, 0);\\n\\n        return uint248(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 _value) internal pure returns (uint128) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint128(uint256))\\\"))`\\n        bytes4 fnSelector = 0x809fdd33;\\n        fnSelector.verifyInput(_value <= type(uint128).max, 0);\\n\\n        return uint128(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 _value) internal pure returns (uint120) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint120(uint256))\\\"))`\\n        bytes4 fnSelector = 0x1e4e4bad;\\n        fnSelector.verifyInput(_value <= type(uint120).max, 0);\\n\\n        return uint120(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 _value) internal pure returns (uint64) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint64(uint256))\\\"))`\\n        bytes4 fnSelector = 0x2665fad0;\\n        fnSelector.verifyInput(_value <= type(uint64).max, 0);\\n\\n        return uint64(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 _value) internal pure returns (uint32) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint32(uint256))\\\"))`\\n        bytes4 fnSelector = 0xc8193255;\\n        fnSelector.verifyInput(_value <= type(uint32).max, 0);\\n\\n        return uint32(_value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Timestamp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Function for getting block timestamp.\\n/// @dev Base contract that is overridden for tests.\\nabstract contract Timestamp {\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts.\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden).\\n     */\\n    function _now256() internal view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Stake } from \\\"../libraries/Stake.sol\\\";\\n\\ninterface ICorePool {\\n    function users(address _user)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            uint128,\\n            uint248,\\n            uint8,\\n            uint256,\\n            uint256\\n        );\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint32);\\n\\n    function lastYieldDistribution() external view returns (uint64);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function globalWeight() external view returns (uint256);\\n\\n    function pendingRewards(address _user) external view returns (uint256, uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getTotalReserves() external view returns (uint256);\\n\\n    function getStake(address _user, uint256 _stakeId) external view returns (Stake.Data memory);\\n\\n    function getStakesLength(address _user) external view returns (uint256);\\n\\n    function sync() external;\\n\\n    function setWeight(uint32 _weight) external;\\n\\n    function receiveVaultRewards(uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20Mintable is IERC20Upgradeable {\\n    function mint(address _to, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ErrorHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors Library.\\n *\\n * @notice Introduces some very common input and state validation for smart contracts,\\n *      such as non-zero input validation, general boolean expression validation, access validation.\\n *\\n * @notice Throws pre-defined errors instead of string error messages to reduce gas costs.\\n *\\n * @notice Since the library handles only very common errors, concrete smart contracts may\\n *      also introduce their own error types and handling.\\n *\\n * @author Basil Gorin\\n */\\nlibrary ErrorHandler {\\n    /**\\n     * @notice Thrown on zero input at index specified in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param paramIndex function parameter index which caused an error thrown\\n     */\\n    error ZeroInput(bytes4 fnSelector, uint8 paramIndex);\\n\\n    /**\\n     * @notice Thrown on invalid input at index specified in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param paramIndex function parameter index which caused an error thrown\\n     */\\n    error InvalidInput(bytes4 fnSelector, uint8 paramIndex);\\n\\n    /**\\n     * @notice Thrown on invalid state in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param errorCode unique error code determining the exact place in code where error was thrown\\n     */\\n    error InvalidState(bytes4 fnSelector, uint256 errorCode);\\n\\n    /**\\n     * @notice Thrown on invalid access to a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param addr an address which access was denied, usually transaction sender\\n     */\\n    error AccessDenied(bytes4 fnSelector, address addr);\\n\\n    /**\\n     * @notice Verifies an input is set (non-zero).\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param value a value to check if it's set (non-zero)\\n     * @param paramIndex function parameter index which is verified\\n     */\\n    function verifyNonZeroInput(\\n        bytes4 fnSelector,\\n        uint256 value,\\n        uint8 paramIndex\\n    ) internal pure {\\n        if (value == 0) {\\n            revert ZeroInput(fnSelector, paramIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an input is correct.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the input\\n     * @param paramIndex function parameter index which is verified\\n     */\\n    function verifyInput(\\n        bytes4 fnSelector,\\n        bool expr,\\n        uint8 paramIndex\\n    ) internal pure {\\n        if (!expr) {\\n            revert InvalidInput(fnSelector, paramIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies smart contract state is correct.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the contract state\\n     * @param errorCode unique error code determining the exact place in code which is verified\\n     */\\n    function verifyState(\\n        bytes4 fnSelector,\\n        bool expr,\\n        uint256 errorCode\\n    ) internal pure {\\n        if (!expr) {\\n            revert InvalidState(fnSelector, errorCode);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an access to the function.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the access\\n     */\\n    function verifyAccess(bytes4 fnSelector, bool expr) internal view {\\n        if (!expr) {\\n            revert AccessDenied(fnSelector, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Stake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Stake library used by ILV pool and Sushi LP Pool.\\n *\\n * @dev Responsible to manage weight calculation and store important constants\\n *      related to stake period, base weight and multipliers utilized.\\n */\\nlibrary Stake {\\n    struct Data {\\n        /// @dev token amount staked\\n        uint120 value;\\n        /// @dev locking period - from\\n        uint64 lockedFrom;\\n        /// @dev locking period - until\\n        uint64 lockedUntil;\\n        /// @dev indicates if the stake was created as a yield reward\\n        bool isYield;\\n    }\\n\\n    /**\\n     * @dev Stake weight is proportional to stake value and time locked, precisely\\n     *      \\\"stake value wei multiplied by (fraction of the year locked plus one)\\\".\\n     * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n     *      weight is stored multiplied by 1e6 constant, as an integer.\\n     * @dev Corner case 1: if time locked is zero, weight is stake value multiplied by 1e6 + base weight\\n     * @dev Corner case 2: if time locked is two years, division of\\n            (lockedUntil - lockedFrom) / MAX_STAKE_PERIOD is 1e6, and\\n     *      weight is a stake value multiplied by 2 * 1e6.\\n     */\\n    uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\n\\n    /**\\n     * @dev Minimum weight value, if result of multiplication using WEIGHT_MULTIPLIER\\n     *      is 0 (e.g stake flexible), then BASE_WEIGHT is used.\\n     */\\n    uint256 internal constant BASE_WEIGHT = 1e6;\\n    /**\\n     * @dev Minimum period that someone can lock a stake for.\\n     */\\n    uint256 internal constant MIN_STAKE_PERIOD = 30 days;\\n\\n    /**\\n     * @dev Maximum period that someone can lock a stake for.\\n     */\\n    uint256 internal constant MAX_STAKE_PERIOD = 365 days;\\n\\n    /**\\n     * @dev Rewards per weight are stored multiplied by 1e20 as uint.\\n     */\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e20;\\n\\n    /**\\n     * @dev When we know beforehand that staking is done for yield instead of\\n     *      executing `weight()` function we use the following constant.\\n     */\\n    uint256 internal constant YIELD_STAKE_WEIGHT_MULTIPLIER = 2 * 1e6;\\n\\n    function weight(Data storage _self) internal view returns (uint256) {\\n        return\\n            uint256(\\n                (((_self.lockedUntil - _self.lockedFrom) * WEIGHT_MULTIPLIER) / MAX_STAKE_PERIOD + BASE_WEIGHT) *\\n                    _self.value\\n            );\\n    }\\n\\n    /**\\n     * @dev Converts stake weight (not to be mixed with the pool weight) to\\n     *      ILV reward value, applying the 10^12 division on weight\\n     *\\n     * @param _weight stake weight\\n     * @param _rewardPerWeight ILV reward per weight\\n     * @param _rewardPerWeightPaid last reward per weight value used for user earnings\\n     * @return reward value normalized to 10^12\\n     */\\n    function earned(\\n        uint256 _weight,\\n        uint256 _rewardPerWeight,\\n        uint256 _rewardPerWeightPaid\\n    ) internal pure returns (uint256) {\\n        // apply the formula and return\\n        return (_weight * (_rewardPerWeight - _rewardPerWeightPaid)) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward ILV value to stake weight (not to be mixed with the pool weight),\\n     *      applying the 10^12 multiplication on the reward.\\n     *      - OR -\\n     * @dev Converts reward ILV value to reward/weight if stake weight is supplied as second\\n     *      function parameter instead of reward/weight.\\n     *\\n     * @param _reward yield reward\\n     * @param _globalWeight total weight in the pool\\n     * @return reward per weight value\\n     */\\n    function getRewardPerWeight(uint256 _reward, uint256 _globalWeight) internal pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (_reward * REWARD_PER_WEIGHT_MULTIPLIER) / _globalWeight;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"ZeroInput\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"LogChangePoolWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"name\":\"LogRegisterPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"name\":\"LogSetEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIlvPerSecond\",\"type\":\"uint256\"}],\"name\":\"LogUpdateILVPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"changePoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"internalType\":\"struct PoolFactory.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilvPerSecond\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ilv_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"silv_\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"_ilvPerSecond\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"_secondsPerUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRatioUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"mintYieldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateILVPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "PoolFactory", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}