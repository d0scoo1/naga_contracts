{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TheVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {Vault} from \\\"Vault.sol\\\";\\n\\ncontract TheVault is Vault {\\n    // So Brownie compiles it tbh\\n    // Changes here invalidate the bytecode, breaking trust of the mix\\n    // DO NOT CHANGE THIS FILE\\n}\\n\"\r\n    },\r\n    \"Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"IERC20Upgradeable.sol\\\";\\nimport \\\"SafeMathUpgradeable.sol\\\";\\nimport \\\"AddressUpgradeable.sol\\\";\\nimport \\\"SafeERC20Upgradeable.sol\\\";\\nimport \\\"ERC20Upgradeable.sol\\\";\\nimport \\\"PausableUpgradeable.sol\\\";\\nimport \\\"ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"SettAccessControl.sol\\\";\\n\\nimport {IVault} from \\\"IVault.sol\\\";\\nimport {IStrategy} from \\\"IStrategy.sol\\\";\\nimport {IERC20Detailed} from \\\"IERC20Detailed.sol\\\";\\nimport {BadgerGuestListAPI} from \\\"BadgerGuestlistApi.sol\\\";\\n\\n/*\\n    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol\\n    \\n    Changelog:\\n\\n    V1.1\\n    * Strategist no longer has special function calling permissions\\n    * Version function added to contract\\n    * All write functions, with the exception of transfer, are pausable\\n    * Keeper or governance can pause\\n    * Only governance can unpause\\n\\n    V1.2\\n    * Transfer functions are now pausable along with all other non-permissioned write functions\\n    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well\\n\\n    V1.3\\n    * Add guest list functionality\\n    * All deposits can be optionally gated by external guestList approval logic on set guestList contract\\n\\n    V1.4\\n    * Add depositFor() to deposit on the half of other users. That user will then be blockLocked.\\n\\n    V1.5\\n    * Removed Controller\\n        - Removed harvest from vault (only on strategy)\\n    * Params added to track autocompounded rewards (lifeTimeEarned, lastHarvestedAt, lastHarvestAmount, assetsAtLastHarvest)\\n      this would work in sync with autoCompoundRatio to help us track harvests better.\\n    * Fees\\n        - Strategy would report the autocompounded harvest amount to the vault\\n        - Calculation performanceFeeGovernance, performanceFeeStrategist, withdrawalFee, managementFee moved to the vault.\\n        - Vault mints shares for performanceFees and managementFee to the respective recipient (treasury, strategist)\\n        - withdrawal fees is transferred to the rewards address set\\n    * Permission:\\n        - Strategist can now set performance, withdrawal and management fees\\n        - Governance will determine maxPerformanceFee, maxWithdrawalFee, maxManagementFee that can be set to prevent rug of funds.\\n    * Strategy would take the actors from the vault it is connected to\\n    * All governance related fees goes to treasury\\n*/\\n\\ncontract Vault is ERC20Upgradeable, SettAccessControl, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 constant ONE_ETH = 1e18;\\n\\n    /// ===== Storage Variables ====\\n\\n    IERC20Upgradeable public token; // Token used for deposits\\n    BadgerGuestListAPI public guestList; // guestlist when vault is in experiment/ guarded state\\n\\n    bool public pausedDeposit; // false by default Allows to only block deposits, use pause for the normal pause state\\n\\n    address public strategy; // address of the strategy connected to the vault\\n    address public guardian; // guardian of vault and strategy\\n    address public treasury; // set by governance ... any fees go there\\n\\n    address public badgerTree; // Address we send tokens too via reportAdditionalTokens\\n\\n    /// @dev name and symbol prefixes for lpcomponent token of vault\\n    string internal constant _defaultNamePrefix = \\\"Badger Sett \\\";\\n    string internal constant _symbolSymbolPrefix = \\\"b\\\";\\n\\n    /// Params to track autocompounded rewards\\n    uint256 public lifeTimeEarned; // keeps track of total earnings\\n    uint256 public lastHarvestedAt; // timestamp of the last harvest\\n    uint256 public lastHarvestAmount; // amount harvested during last harvest\\n    uint256 public assetsAtLastHarvest; // assets for which the harvest took place.\\n\\n    mapping (address => uint256) public additionalTokensEarned;\\n    mapping (address => uint256) public lastAdditionalTokenAmount;\\n\\n    /// Fees ///\\n    /// @notice all fees will be in bps\\n    uint256 public performanceFeeGovernance; // Perf fee sent to `treasury`\\n    uint256 public performanceFeeStrategist; // Perf fee sent to `strategist`\\n    uint256 public withdrawalFee; // fee issued to `treasury` on withdrawal \\n    uint256 public managementFee; // fee issued to `treasury` on report (typically on harvest, but only if strat is autocompounding)\\n\\n    uint256 public maxPerformanceFee; // maximum allowed performance fees\\n    uint256 public maxWithdrawalFee; // maximum allowed withdrawal fees\\n    uint256 public maxManagementFee; // maximum allowed management fees\\n\\n    uint256 public toEarnBps; // NOTE: in BPS, minimum amount of token to deposit into strategy when earn is called\\n\\n    /// ===== Constants ====\\n\\n    uint256 public constant MAX_BPS = 10_000;\\n    uint256 public constant SECS_PER_YEAR = 31_556_952; // 365.2425 days\\n\\n    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; // Never higher than 2%\\n    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; // Never higher than 30% // 30% maximum performance fee // We usually do 20, so this is insanely high already\\n    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; // Never higher than 2%\\n\\n    /// ===== Events ====\\n\\n    // Emitted when a token is sent to the badgerTree for emissions\\n    event TreeDistribution(\\n        address indexed token,\\n        uint256 amount,\\n        uint256 indexed blockNumber,\\n        uint256 timestamp\\n    );\\n\\n    // Emitted during a report, when there has been an increase in pricePerFullShare (ppfs)\\n    event Harvested(address indexed token, uint256 amount, uint256 indexed blockNumber, uint256 timestamp);\\n\\n    event SetTreasury(address indexed newTreasury);\\n    event SetStrategy(address indexed newStrategy);\\n    event SetToEarnBps(uint256 newEarnToBps);\\n    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);\\n    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);\\n    event SetMaxManagementFee(uint256 newMaxManagementFee);\\n    event SetGuardian(address indexed newGuardian);\\n    event SetGuestList(address indexed newGuestList);\\n    event SetWithdrawalFee(uint256 newWithdrawalFee);\\n    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);\\n    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);\\n    event SetManagementFee(uint256 newManagementFee);\\n\\n    event PauseDeposits(address indexed pausedBy);\\n    event UnpauseDeposits(address indexed pausedBy);\\n\\n    /// @notice Initializes the Sett. Can only be called once, ideally when the contract is deployed.\\n    /// @param _token Address of the token that can be deposited into the sett.\\n    /// @param _governance Address authorized as governance.\\n    /// @param _keeper Address authorized as keeper.\\n    /// @param _guardian Address authorized as guardian.\\n    /// @param _treasury Address to distribute governance fees/rewards to.\\n    /// @param _strategist Address authorized as strategist.\\n    /// @param _badgerTree Address of badgerTree used for emissions.\\n    /// @param _name Specify a custom sett name. Leave empty for default value.\\n    /// @param _symbol Specify a custom sett symbol. Leave empty for default value.\\n    /// @param _feeConfig Values for the 4 different types of fees charges by the sett\\n    ///         [performanceFeeGovernance, performanceFeeStrategist, withdrawToVault, managementFee]\\n    ///         Each fee should be less than the constant hard-caps defined above. \\n    function initialize(\\n        address _token,\\n        address _governance,\\n        address _keeper,\\n        address _guardian,\\n        address _treasury,\\n        address _strategist,\\n        address _badgerTree,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[4] memory _feeConfig\\n    ) public initializer whenNotPaused {\\n        require(_token != address(0)); // dev: _token address should not be zero\\n        require(_governance != address(0)); // dev: _governance address should not be zero\\n        require(_keeper != address(0)); // dev: _keeper address should not be zero\\n        require(_guardian != address(0)); // dev: _guardian address should not be zero\\n        require(_treasury != address(0)); // dev: _treasury address should not be zero\\n        require(_strategist != address(0)); // dev: _strategist address should not be zero\\n        require(_badgerTree != address(0)); // dev: _badgerTree address should not be zero\\n\\n        // Check for fees being reasonable (see below for interpretation)\\n        require(_feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP, \\\"performanceFeeGovernance too high\\\");\\n        require(_feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP, \\\"performanceFeeStrategist too high\\\");\\n        require(_feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP, \\\"withdrawalFee too high\\\");\\n        require(_feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP, \\\"managementFee too high\\\");\\n\\n        string memory name;\\n        string memory symbol;\\n\\n\\n        // If they are non empty string we'll use the custom names\\n        // Else just add the default prefix\\n        IERC20Detailed namedToken = IERC20Detailed(_token);\\n\\n        if(keccak256(abi.encodePacked(_name)) != keccak256(\\\"\\\")) {\\n            name = _name;\\n        } else {\\n            name = string(abi.encodePacked(_defaultNamePrefix, namedToken.name()));\\n        }\\n\\n        if (keccak256(abi.encodePacked(_symbol)) != keccak256(\\\"\\\")) {\\n            symbol = _symbol;\\n        } else {\\n            symbol = string(abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol()));\\n        }\\n\\n        // Initializing the lpcomponent token\\n        __ERC20_init(name, symbol);\\n        // Initialize the other contracts\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        token = IERC20Upgradeable(_token);\\n        governance = _governance;\\n        treasury = _treasury;\\n        strategist = _strategist;\\n        keeper = _keeper;\\n        guardian = _guardian;\\n        badgerTree = _badgerTree;\\n\\n        lastHarvestedAt = block.timestamp; // setting initial value to the time when the vault was deployed\\n\\n        performanceFeeGovernance = _feeConfig[0];\\n        performanceFeeStrategist = _feeConfig[1];\\n        withdrawalFee = _feeConfig[2];\\n        managementFee = _feeConfig[3];\\n        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; // 30% max performance fee\\n        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; // 2% maximum withdrawal fee\\n        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; // 2% maximum management fee\\n\\n        toEarnBps = 9_500; // initial value of toEarnBps // 95% is invested to the strategy, 5% for cheap withdrawals\\n    }\\n\\n    /// ===== Modifiers ====\\n\\n    /// @notice Checks whether a call is from guardian or governance. \\n    function _onlyAuthorizedPausers() internal view {\\n        require(msg.sender == guardian || msg.sender == governance, \\\"onlyPausers\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from the strategy.\\n    function _onlyStrategy() internal view {\\n        require(msg.sender == strategy, \\\"onlyStrategy\\\");\\n    }\\n\\n    /// ===== View Functions =====\\n    \\n    /// @notice Used to track the deployed version of the contract.\\n    /// @return Current version of the contract.\\n    function version() external pure returns (string memory) {\\n        return \\\"1.5\\\";\\n    }\\n\\n    /// @notice Gives the price for a single Sett share.\\n    /// @dev Sett starts with a price per share of 1.\\n    /// @return Value of a single share.\\n    function getPricePerFullShare() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return ONE_ETH;\\n        }\\n        return balance().mul(ONE_ETH).div(totalSupply());\\n    }\\n\\n    /// @notice Gives the total balance of the underlying token within the sett and strategy system.\\n    /// @return Balance of token handled by the sett.\\n    function balance() public view returns (uint256) {\\n        return token.balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\\n    }\\n\\n    /// @notice Defines how much of the Setts' underlying is available for strategy to borrow.\\n    /// @return Amount of tokens that the sett can provide to the strategy.\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this)).mul(toEarnBps).div(MAX_BPS);\\n    }\\n\\n    /// ===== Public Actions =====\\n\\n    /// @notice Deposits `_amount` tokens, issuing shares. \\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositFor` for details on how deposit is implemented. \\n    /// @param _amount Quantity of tokens to deposit. \\n    function deposit(uint256 _amount) external whenNotPaused {\\n        _depositWithAuthorization(_amount, new bytes32[](0));\\n    }\\n\\n    /// @notice Deposits `_amount` tokens, issuing shares. \\n    ///         Checks the guestlist to verify that the calling account is authorized to make a deposit for the specified `_amount`.\\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\\n    /// @param _amount Quantity of tokens to deposit. \\n    /// @param proof Merkle proof to validate in the guestlist.\\n    function deposit(uint256 _amount, bytes32[] memory proof) external whenNotPaused {\\n        _depositWithAuthorization(_amount, proof);\\n    }\\n\\n    /// @notice Deposits all tokens, issuing shares. \\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositFor` for details on how deposit is implemented. \\n    function depositAll() external whenNotPaused {\\n        _depositWithAuthorization(token.balanceOf(msg.sender), new bytes32[](0));\\n    }\\n\\n    /// @notice Deposits all tokens, issuing shares. \\n    ///         Checks the guestlist to verify that the calling is authorized to make a full deposit.\\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\\n    /// @param proof Merkle proof to validate in the guestlist.\\n    function depositAll(bytes32[] memory proof) external whenNotPaused {\\n        _depositWithAuthorization(token.balanceOf(msg.sender), proof);\\n    }\\n\\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositFor` for details on how deposit is implemented. \\n    /// @param _recipient Address to issue the Sett shares to.\\n    /// @param _amount Quantity of tokens to deposit. \\n    function depositFor(address _recipient, uint256 _amount) external whenNotPaused {\\n        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));\\n    }\\n\\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \\n    ///         Checks the guestlist to verify that `recipient` is authorized to make a deposit for the specified `_amount`.\\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\\n    /// @param _recipient Address to issue the Sett shares to.\\n    /// @param _amount Quantity of tokens to deposit. \\n    function depositFor(\\n        address _recipient,\\n        uint256 _amount,\\n        bytes32[] memory proof\\n    ) external whenNotPaused {\\n        _depositForWithAuthorization(_recipient, _amount, proof);\\n    }\\n\\n    /// @notice Redeems `_shares` for an appropriate amount of tokens.\\n    ///         Note that withdrawals are not processed when the Sett is paused. \\n    /// @dev See `_withdraw` for details on how withdrawals are processed.\\n    /// @param _shares Quantity of shares to redeem. \\n    function withdraw(uint256 _shares) external whenNotPaused {\\n        _withdraw(_shares);\\n    }\\n\\n    /// @notice Redeems all shares, issuing an appropriate amount of tokens. \\n    ///         Note that withdrawals are not processed when the Sett is paused. \\n    /// @dev See `_withdraw` for details on how withdrawals are processed.\\n    function withdrawAll() external whenNotPaused {\\n        _withdraw(balanceOf(msg.sender));\\n    }\\n\\n    /// ===== Permissioned Actions: Strategy =====\\n\\n    /// @notice Used by the strategy to report a harvest to the sett.\\n    ///         Issues shares for the strategist and treasury based on the performance fees and harvested amount. \\n    ///         Issues shares for the treasury based on the management fee and the time elapsed since last harvest. \\n    ///         Updates harvest variables for on-chain APR tracking.\\n    ///         This can only be called by the strategy.\\n    /// @dev This implicitly trusts that the strategy reports the correct amount.\\n    ///      Pausing on this function happens at the strategy level.\\n    /// @param _harvestedAmount Amount of underlying token harvested by the strategy.\\n    function reportHarvest(\\n        uint256 _harvestedAmount\\n    ) external nonReentrant {\\n        _onlyStrategy();\\n\\n        uint256 harvestTime = block.timestamp;\\n        uint256 assetsAtHarvest = balance().sub(_harvestedAmount); // Must be less than or equal or revert\\n\\n        _handleFees(_harvestedAmount, harvestTime);\\n\\n        // Updated lastHarvestAmount\\n        lastHarvestAmount = _harvestedAmount;\\n\\n        // if we withdrawAll\\n        // we will have some yield left\\n        // having 0 for assets will inflate APY\\n        // Instead, have the last harvest report with the previous assets\\n        // And if you end up harvesting again, that report will have both 0s\\n        if (assetsAtHarvest != 0) {\\n            assetsAtLastHarvest = assetsAtHarvest;\\n        } else if (_harvestedAmount == 0) {\\n            // If zero\\n            assetsAtLastHarvest = 0;\\n        }\\n\\n        lifeTimeEarned = lifeTimeEarned.add(_harvestedAmount);\\n        // Update time either way\\n        lastHarvestedAt = harvestTime;\\n\\n        emit Harvested(address(token), _harvestedAmount, block.number, block.timestamp);\\n    }\\n\\n    /// @notice Used by the strategy to report harvest of additional tokens to the sett.\\n    ///         Charges performance fees on the additional tokens and transfers fees to treasury and strategist. \\n    ///         The remaining amount is sent to badgerTree for emissions.\\n    ///         Updates harvest variables for on-chain APR tracking.\\n    ///         This can only be called by the strategy.\\n    /// @dev This function is called after the strategy sends the additional tokens to the sett.\\n    ///      Pausing on this function happens at the strategy level.\\n    /// @param _token Address of additional token harvested by the strategy.\\n    function reportAdditionalToken(address _token) external nonReentrant {\\n        _onlyStrategy();\\n        require(address(token) != _token, \\\"No want\\\");\\n        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(address(this));\\n\\n        additionalTokensEarned[_token] = additionalTokensEarned[_token].add(tokenBalance);\\n        lastAdditionalTokenAmount[_token] = tokenBalance;\\n\\n        // We may have more, but we still report only what the strat sent\\n        uint256 governanceRewardsFee = _calculateFee(tokenBalance, performanceFeeGovernance);\\n        uint256 strategistRewardsFee = _calculateFee(tokenBalance, performanceFeeStrategist);\\n\\n        if(governanceRewardsFee != 0) {\\n            IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);\\n\\n        }\\n\\n        if(strategistRewardsFee != 0) {\\n            IERC20Upgradeable(_token).safeTransfer(strategist, strategistRewardsFee);\\n        }\\n\\n        // Send rest to tree\\n        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));\\n        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);\\n        emit TreeDistribution(_token, newBalance, block.number, block.timestamp);\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n\\n    /// @notice Changes the treasury address.\\n    ///         Treasury is recipient of management and governance performance fees.\\n    ///         This can only be called by governance.\\n    ///         Note that this can only be called when sett is not paused.\\n    /// @param _treasury Address of the new treasury.\\n    function setTreasury(address _treasury) external whenNotPaused {\\n        _onlyGovernance();\\n        require(_treasury != address(0), \\\"Address 0\\\");\\n\\n        treasury = _treasury;\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    /// @notice Changes the strategy address.\\n    ///         This can only be called by governance.\\n    ///         Note that this can only be called when sett is not paused.\\n    /// @dev This is a rug vector, pay extremely close attention to the next strategy being set.\\n    ///      Changing the strategy should happen only via timelock.\\n    ///      This function must not be callable when the sett is paused as this would force depositors into a strategy they may not want to use.\\n    /// @param _strategy Address of new strategy.\\n    function setStrategy(address _strategy) external whenNotPaused {\\n        _onlyGovernance();\\n        require(_strategy != address(0), \\\"Address 0\\\");\\n\\n\\n        /// NOTE: Migrate funds if settings strategy when already existing one\\n        if (strategy != address(0)) {\\n            require(IStrategy(strategy).balanceOf() == 0, \\\"Please withdrawToVault before changing strat\\\");\\n        }\\n        strategy = _strategy;\\n        emit SetStrategy(_strategy);\\n    }\\n\\n    // === Setters that can be called by governance even when paused ===\\n\\n    /// @notice Sets the max withdrawal fee that can be charged by the Sett.\\n    ///         This can only be called by governance.\\n    /// @dev The input `_fees` should be less than the `WITHDRAWAL_FEE_HARD_CAP` hard-cap.\\n    /// @param _fees The new maximum cap for withdrawal fee.\\n    function setMaxWithdrawalFee(uint256 _fees) external {\\n        _onlyGovernance();\\n        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, \\\"withdrawalFee too high\\\");\\n\\n        maxWithdrawalFee = _fees;\\n        emit SetMaxWithdrawalFee(_fees);\\n    }\\n\\n    /// @notice Sets the max performance fee that can be charged by the Sett.\\n    ///         This can only be called by governance.\\n    /// @dev The input `_fees` should be less than the `PERFORMANCE_FEE_HARD_CAP` hard-cap.\\n    /// @param _fees The new maximum cap for performance fee.\\n    function setMaxPerformanceFee(uint256 _fees) external {\\n        _onlyGovernance();\\n        require(_fees <= PERFORMANCE_FEE_HARD_CAP, \\\"performanceFeeStrategist too high\\\");\\n\\n        maxPerformanceFee = _fees;\\n        emit SetMaxPerformanceFee(_fees);\\n    }\\n\\n    /// @notice Sets the max management fee that can be charged by the Sett.\\n    ///         This can only be called by governance.\\n    /// @dev The input `_fees` should be less than the `MANAGEMENT_FEE_HARD_CAP` hard-cap.\\n    /// @param _fees The new maximum cap for management fee.\\n    function setMaxManagementFee(uint256 _fees) external {\\n        _onlyGovernance();\\n        require(_fees <= MANAGEMENT_FEE_HARD_CAP, \\\"managementFee too high\\\");\\n\\n        maxManagementFee = _fees;\\n        emit SetMaxManagementFee(_fees);\\n    }\\n\\n    /// @notice Changes the guardian address.\\n    ///         Guardian is an authorized actor that can pause the sett in case of an emergency.\\n    ///         This can only be called by governance.\\n    /// @param _guardian Address of the new guardian.\\n    function setGuardian(address _guardian) external {\\n        _onlyGovernance();\\n        require(_guardian != address(0), \\\"Address cannot be 0x0\\\");\\n\\n        guardian = _guardian;\\n        emit SetGuardian(_guardian);\\n    }\\n\\n    /// ===== Permissioned Functions: Trusted Actors =====\\n\\n    /// @notice Sets the fraction of sett balance (in basis points) that the strategy can borrow.\\n    ///         This can be called by either governance or strategist.\\n    ///         Note that this can only be called when the sett is not paused.\\n    /// @param _newToEarnBps The new maximum cap for management fee.\\n    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        require(_newToEarnBps <= MAX_BPS, \\\"toEarnBps should be <= MAX_BPS\\\");\\n\\n        toEarnBps = _newToEarnBps;\\n        emit SetToEarnBps(_newToEarnBps);\\n    } \\n\\n    /// @notice Changes the guestlist address.\\n    ///         The guestList is used to gate or limit deposits. If no guestlist is set then anyone can deposit any amount.\\n    ///         This can be called by either governance or strategist.\\n    ///         Note that this can only be called when the sett is not paused.\\n    /// @param _guestList Address of the new guestlist.\\n    function setGuestList(address _guestList) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        guestList = BadgerGuestListAPI(_guestList);\\n        emit SetGuestList(_guestList);\\n    }\\n\\n    /// @notice Sets the withdrawal fee charged by the Sett.\\n    ///         The fee is taken at the time of withdrawals in the underlying token which is then used to issue new shares for the treasury.\\n    ///         The new withdrawal fee should be less than `maxWithdrawalFee`.\\n    ///         This can be called by either governance or strategist.\\n    /// @dev See `_withdraw` to see how withdrawal fee is charged.\\n    /// @param _withdrawalFee The new withdrawal fee.\\n    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        require(_withdrawalFee <= maxWithdrawalFee, \\\"Excessive withdrawal fee\\\");\\n        withdrawalFee = _withdrawalFee;\\n        emit SetWithdrawalFee(_withdrawalFee);\\n    }\\n\\n    /// @notice Sets the performance fee taken by the strategist on the harvests.\\n    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.\\n    ///         For the underlying token, the fee is used to issue new shares for the strategist.\\n    ///         The new performance fee should be less than `maxPerformanceFee`.\\n    ///         This can be called by either governance or strategist.\\n    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.\\n    /// @param _performanceFeeStrategist The new performance fee.\\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        require(_performanceFeeStrategist <= maxPerformanceFee, \\\"Excessive strategist performance fee\\\");\\n        performanceFeeStrategist = _performanceFeeStrategist;\\n        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);\\n    }\\n\\n    /// @notice Sets the performance fee taken by the treasury on the harvests.\\n    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.\\n    ///         For the underlying token, the fee is used to issue new shares for the treasury.\\n    ///         The new performance fee should be less than `maxPerformanceFee`.\\n    ///         This can be called by either governance or strategist.\\n    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.\\n    /// @param _performanceFeeGovernance The new performance fee.\\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        require(_performanceFeeGovernance <= maxPerformanceFee, \\\"Excessive governance performance fee\\\");\\n        performanceFeeGovernance = _performanceFeeGovernance;\\n        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);\\n    }\\n\\n    /// @notice Sets the management fee taken by the treasury on the AUM in the sett.\\n    ///         The fee is calculated at the time of `reportHarvest` and is used to issue new shares for the treasury.\\n    ///         The new management fee should be less than `maxManagementFee`.\\n    ///         This can be called by either governance or strategist.\\n    /// @dev See `_handleFees` to see how the management fee is calculated.\\n    /// @param _fees The new management fee.\\n    function setManagementFee(uint256 _fees) external whenNotPaused {\\n        _onlyGovernanceOrStrategist();\\n        require(_fees <= maxManagementFee, \\\"Excessive management fee\\\");\\n        managementFee = _fees;\\n        emit SetManagementFee(_fees);\\n    }\\n\\n    /// === Strategist level operations that can be done even when paused ==\\n\\n    /// @notice Withdraws all funds from the strategy back to the sett.\\n    ///         This can be called by either governance or strategist.\\n    /// @dev This calls `_withdrawAll` on the strategy and transfers the balance to the sett.\\n    function withdrawToVault() external {\\n        _onlyGovernanceOrStrategist();\\n        IStrategy(strategy).withdrawToVault();\\n    }\\n\\n    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.) \\n    ///         to the badgerTree for emissions.\\n    ///         The `_token` should be different from any tokens managed by the strategy.\\n    ///         This can only be called by either strategist or governance.\\n    /// @dev See `BaseStrategy.emitNonProtectedToken` for details.\\n    /// @param _token Address of the token to be emitted.\\n    function emitNonProtectedToken(address _token) external {\\n        _onlyGovernanceOrStrategist();\\n\\n        IStrategy(strategy).emitNonProtectedToken(_token);\\n    }\\n\\n    /// @notice Sweeps the balance of an extra token from the vault and strategy and sends it to governance.\\n    ///         The `_token` should be different from any tokens managed by the strategy.\\n    ///         This can only be called by either strategist or governance.\\n    /// @dev Sweeping doesn't take any fee.\\n    /// @param _token Address of the token to be swept.\\n    function sweepExtraToken(address _token) external {\\n        _onlyGovernanceOrStrategist();\\n        require(address(token) != _token, \\\"No want\\\");\\n\\n        IStrategy(strategy).withdrawOther(_token);\\n        // Send all `_token` we have\\n        // Safe because `withdrawOther` will revert on protected tokens  \\n        // Done this way works for both a donation to strategy or to vault\\n        IERC20Upgradeable(_token).safeTransfer(governance, IERC20Upgradeable(_token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Deposits the available balance of the underlying token into the strategy.\\n    ///         The strategy then uses the amount for yield-generating activities.\\n    ///         This can be called by either the keeper or governance.\\n    ///         Note that earn cannot be called when deposits are paused.\\n    /// @dev Pause is enforced at the Strategy level (this allows to still earn yield when the Vault is paused)\\n    function earn() external {\\n        require(!pausedDeposit, \\\"pausedDeposit\\\"); // dev: deposits are paused, we don't earn as well\\n        _onlyAuthorizedActors();\\n\\n        uint256 _bal = available();\\n        token.safeTransfer(strategy, _bal);\\n        IStrategy(strategy).earn();\\n    }\\n\\n    /// @notice Pauses only deposits.\\n    ///         This can be called by either guardian or governance.\\n    function pauseDeposits() external {\\n        _onlyAuthorizedPausers();\\n        pausedDeposit = true;\\n        emit PauseDeposits(msg.sender);\\n    }\\n    \\n    /// @notice Unpauses deposits.\\n    ///         This can only be called by governance.\\n    function unpauseDeposits() external {\\n        _onlyGovernance();\\n        pausedDeposit = false;\\n        emit UnpauseDeposits(msg.sender);\\n    }\\n\\n    /// @notice Pauses everything.\\n    ///         This can be called by either guardian or governance.\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses everything\\n    ///         This can only be called by governance.\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Implementations =====\\n\\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \\n    ///         Note that deposits are not accepted when `pausedDeposit` is true. \\n    /// @dev This is the actual deposit operation.\\n    ///      Deposits are based on the realized value of underlying assets between Sett & associated Strategy\\n    /// @param _recipient Address to issue the Sett shares to.\\n    /// @param _amount Quantity of tokens to deposit. \\n    function _depositFor(address _recipient, uint256 _amount) internal nonReentrant {\\n        require(_recipient != address(0), \\\"Address 0\\\");\\n        require(_amount != 0, \\\"Amount 0\\\");\\n        require(!pausedDeposit, \\\"pausedDeposit\\\"); // dev: deposits are paused\\n\\n        uint256 _pool = balance();\\n        uint256 _before = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 _after = token.balanceOf(address(this));\\n        _mintSharesFor(_recipient, _after.sub(_before), _pool);\\n    }\\n\\n    /// @dev See `_depositWithAuthorization`\\n    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof) internal {\\n        _depositForWithAuthorization(msg.sender, _amount, proof);\\n    }\\n\\n    /// @dev Verifies that `_recipient` is authorized to deposit `_amount` based on the guestlist.\\n    ///      See `_depositFor` for deposit details.\\n    function _depositForWithAuthorization(\\n        address _recipient,\\n        uint256 _amount,\\n        bytes32[] memory proof\\n    ) internal {\\n        if (address(guestList) != address(0)) {\\n            require(guestList.authorized(_recipient, _amount, proof), \\\"GuestList: Not Authorized\\\");\\n        }\\n        _depositFor(_recipient, _amount);\\n    }\\n\\n\\n    /// @notice Redeems `_shares` for an appropriate amount of tokens.\\n    /// @dev This is the actual withdraw operation.\\n    ///      Withdraws from strategy positions if sett doesn't contain enough tokens to process the withdrawal. \\n    ///      Calculates withdrawal fees and issues corresponding shares to treasury.\\n    ///      No rebalance implementation for lower fees and faster swaps\\n    /// @param _shares Quantity of shares to redeem. \\n    function _withdraw(uint256 _shares) internal nonReentrant {\\n        require(_shares != 0, \\\"0 Shares\\\");\\n\\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\\n        _burn(msg.sender, _shares);\\n\\n        // Check balance\\n        uint256 b = token.balanceOf(address(this));\\n        if (b < r) {\\n            uint256 _toWithdraw = r.sub(b);\\n            IStrategy(strategy).withdraw(_toWithdraw);\\n            uint256 _after = token.balanceOf(address(this));\\n            uint256 _diff = _after.sub(b);\\n            if (_diff < _toWithdraw) {\\n                r = b.add(_diff);\\n            }\\n        }\\n        uint256 _fee = _calculateFee(r, withdrawalFee);\\n\\n        // Send funds to user\\n        token.safeTransfer(msg.sender, r.sub(_fee));\\n\\n        // After you burned the shares, and you have sent the funds, adding here is equivalent to depositing\\n        // Process withdrawal fee\\n        if(_fee > 0) {\\n            _mintSharesFor(treasury, _fee, balance().sub(_fee));\\n        }\\n    }\\n\\n    /// @dev Helper function to calculate fees.\\n    /// @param amount Amount to calculate fee on.\\n    /// @param feeBps The fee to be charged in basis points.\\n    /// @return Amount of fees to take.\\n    function _calculateFee(uint256 amount, uint256 feeBps) internal pure returns (uint256) {\\n        if (feeBps == 0) {\\n            return 0;\\n        }\\n        uint256 fee = amount.mul(feeBps).div(MAX_BPS);\\n        return fee;\\n    }\\n\\n    /// @dev Helper function to calculate governance and strategist performance fees. Make sure to use it to get paid!\\n    /// @param _amount Amount to calculate fee on.\\n    /// @return Tuple containing amount of (governance, strategist) fees to take.\\n    function _calculatePerformanceFee(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 governancePerformanceFee = _calculateFee(_amount, performanceFeeGovernance);\\n\\n        uint256 strategistPerformanceFee = _calculateFee(_amount, performanceFeeStrategist);\\n\\n        return (governancePerformanceFee, strategistPerformanceFee);\\n    }\\n\\n    /// @dev Helper function to issue shares to `recipient` based on an input `_amount` and `_pool` size.\\n    /// @param recipient Address to issue shares to.\\n    /// @param _amount Amount to issue shares on.\\n    /// @param _pool Pool size to use while calculating amount of shares to mint.\\n    function _mintSharesFor(\\n        address recipient,\\n        uint256 _amount,\\n        uint256 _pool\\n    ) internal {\\n        uint256 shares;\\n        if (totalSupply() == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = (_amount.mul(totalSupply())).div(_pool);\\n        }\\n\\n        if(shares != 0) {\\n            _mint(recipient, shares);\\n        }\\n    }\\n\\n    /// @dev Helper function that issues shares based on performance and management fee when a harvest is reported.\\n    /// @param _harvestedAmount The harvested amount to take fee on.\\n    /// @param harvestTime Time of harvest (block.timestamp).\\n    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime) internal {\\n        (uint256 feeGovernance, uint256 feeStrategist) = _calculatePerformanceFee(_harvestedAmount);\\n        uint256 duration = harvestTime.sub(lastHarvestedAt);\\n\\n        // Management fee is calculated against the assets before harvest, to make it fair to depositors\\n        uint256 management_fee = managementFee > 0 ? managementFee.mul(balance().sub(_harvestedAmount)).mul(duration).div(SECS_PER_YEAR).div(MAX_BPS) : 0;\\n        uint256 totalGovernanceFee = feeGovernance.add(management_fee);\\n\\n        // Pool size is the size of the pool minus the fees, this way \\n        // it's equivalent to sending the tokens as rewards after the harvest\\n        // and depositing them again\\n        uint256 _pool = balance().sub(totalGovernanceFee).sub(feeStrategist);\\n\\n        // uint != is cheaper and equivalent to >\\n        if (totalGovernanceFee != 0) {\\n            _mintSharesFor(treasury, totalGovernanceFee, _pool);\\n        }\\n\\n        if (feeStrategist != 0 && strategist != address(0)) {\\n            /// NOTE: adding feeGovernance backed to _pool as shares would have been issued for it.\\n            _mintSharesFor(strategist, feeStrategist, _pool.add(totalGovernanceFee));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"IERC20Upgradeable.sol\\\";\\nimport \\\"SafeMathUpgradeable.sol\\\";\\nimport \\\"AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"ContextUpgradeable.sol\\\";\\nimport \\\"IERC20Upgradeable.sol\\\";\\nimport \\\"SafeMathUpgradeable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"ContextUpgradeable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"SettAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"Initializable.sol\\\";\\n\\n/*\\n    Common base for permissioned roles throughout Sett ecosystem\\n*/\\ncontract SettAccessControl is Initializable {\\n    address public governance;\\n    address public strategist;\\n    address public keeper;\\n\\n    // ===== MODIFIERS =====\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"onlyGovernance\\\");\\n    }\\n\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"onlyGovernanceOrStrategist\\\");\\n    }\\n\\n    function _onlyAuthorizedActors() internal view {\\n        require(msg.sender == keeper || msg.sender == governance, \\\"onlyAuthorizedActors\\\");\\n    }\\n\\n    // ===== PERMISSIONED ACTIONS =====\\n\\n    /// @notice Change strategist address\\n    /// @notice Can only be changed by governance itself\\n    function setStrategist(address _strategist) external {\\n        _onlyGovernance();\\n        strategist = _strategist;\\n    }\\n\\n    /// @notice Change keeper address\\n    /// @notice Can only be changed by governance itself\\n    function setKeeper(address _keeper) external {\\n        _onlyGovernance();\\n        keeper = _keeper;\\n    }\\n\\n    /// @notice Change governance address\\n    /// @notice Can only be changed by governance itself\\n    function setGovernance(address _governance) public {\\n        _onlyGovernance();\\n        governance = _governance;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVault {\\n    function rewards() external view returns (address);\\n\\n    function reportHarvest(\\n        uint256 _harvestedAmount\\n    ) external;\\n\\n    function reportAdditionalToken(address _token) external;\\n\\n    // Fees\\n    function performanceFeeGovernance() external view returns (uint256);\\n\\n    function performanceFeeStrategist() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    // Actors\\n    function governance() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function strategist() external view returns (address);\\n\\n    // External\\n    function deposit(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStrategy {\\n    // Return value for harvest, tend and balanceOfRewards\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function balanceOf() external view returns (uint256 balance);\\n\\n    function balanceOfPool() external view returns (uint256 balance);\\n\\n    function balanceOfWant() external view returns (uint256 balance);\\n\\n    function earn() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawToVault() external;\\n\\n    function withdrawOther(address _asset) external;\\n\\n    function harvest() external returns (TokenAmount[] memory harvested);\\n    function tend() external returns (TokenAmount[] memory tended);\\n    function balanceOfRewards() external view returns (TokenAmount[] memory rewards);\\n\\n    function emitNonProtectedToken(address _token) external;\\n}\\n\"\r\n    },\r\n    \"IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Detailed {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"BadgerGuestlistApi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.7.0;\\n\\ninterface BadgerGuestListAPI {\\n    function authorized(\\n        address guest,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external view returns (bool);\\n\\n    function setGuests(address[] calldata _guests, bool[] calldata _invited) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"TheVault.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pausedBy\",\"type\":\"address\"}],\"name\":\"PauseDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"SetGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuestList\",\"type\":\"address\"}],\"name\":\"SetGuestList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxManagementFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEarnToBps\",\"type\":\"uint256\"}],\"name\":\"SetToEarnBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TreeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pausedBy\",\"type\":\"address\"}],\"name\":\"UnpauseDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANAGEMENT_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"additionalTokensEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsAtLastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgerTree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emitNonProtectedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guestList\",\"outputs\":[{\"internalType\":\"contract BadgerGuestListAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_badgerTree\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[4]\",\"name\":\"_feeConfig\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAdditionalTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lifeTimeEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reportAdditionalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"reportHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guestList\",\"type\":\"address\"}],\"name\":\"setGuestList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newToEarnBps\",\"type\":\"uint256\"}],\"name\":\"setToEarnBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepExtraToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEarnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TheVault", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}