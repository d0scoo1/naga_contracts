{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// solhint-disable-next-line compiler-version\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\\n/*\\n    ===== Badger Base Strategy =====\\n    Common base class for all Sett strategies\\n\\n    Changelog\\n    V1.1\\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\\n\\n    V1.2\\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\\n\\n    V1.5\\n    - No controller as middleman. The Strategy directly interacts with the vault\\n    - withdrawToVault would withdraw all the funds from the strategy and move it into vault\\n    - strategy would take the actors from the vault it is connected to\\n        - SettAccessControl removed\\n    - fees calculation for autocompounding rewards moved to vault\\n    - autoCompoundRatio param added to keep a track in which ratio harvested rewards are being autocompounded\\n*/\\n\\nabstract contract BaseStrategy is PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 public constant MAX_BPS = 10_000; // MAX_BPS in terms of BPS = 100%\\n\\n    address public want; // Token used for deposits\\n    address public vault; // address of the vault the strategy is connected to\\n    uint256 public withdrawalMaxDeviationThreshold; // max allowed slippage when withdrawing\\n\\n    /// @notice percentage of rewards converted to want\\n    /// @dev converting of rewards to want during harvest should take place in this ratio\\n    /// @dev change this ratio if rewards are converted in a different percentage\\n    /// value ranges from 0 to 10_000\\n    /// 0: keeping 100% harvest in reward tokens\\n    /// 10_000: converting all rewards tokens to want token\\n    uint256 public autoCompoundRatio; // NOTE: I believe this is unused\\n\\n    // NOTE: You have to set autoCompoundRatio in the initializer of your strategy\\n\\n    event SetWithdrawalMaxDeviationThreshold(uint256 newMaxDeviationThreshold);\\n\\n    // Return value for harvest, tend and balanceOfRewards\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Initializes BaseStrategy. Can only be called once. \\n    ///         Make sure to call it from the initializer of the derived strategy.\\n    /// @param _vault Address of the vault that the strategy reports to.\\n    function __BaseStrategy_init(address _vault) public initializer whenNotPaused {\\n        require(_vault != address(0), \\\"Address 0\\\");\\n        __Pausable_init();\\n\\n        vault = _vault;\\n\\n        withdrawalMaxDeviationThreshold = 50; // BPS\\n        // NOTE: See above\\n        autoCompoundRatio = 10_000;\\n    }\\n\\n    // ===== Modifiers =====\\n\\n    /// @notice Checks whether a call is from governance. \\n    /// @dev For functions that only the governance should be able to call \\n    ///      Most of the time setting setters, or to rescue/sweep funds\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance(), \\\"onlyGovernance\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from strategist or governance. \\n    /// @dev For functions that only known benign entities should call\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(msg.sender == strategist() || msg.sender == governance(), \\\"onlyGovernanceOrStrategist\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from keeper or governance. \\n    /// @dev For functions that only known benign entities should call\\n    function _onlyAuthorizedActors() internal view {\\n        require(msg.sender == keeper() || msg.sender == governance(), \\\"onlyAuthorizedActors\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from the vault. \\n    /// @dev For functions that only the vault should use\\n    function _onlyVault() internal view {\\n        require(msg.sender == vault, \\\"onlyVault\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from keeper, governance or the vault. \\n    /// @dev Modifier used to check if the function is being called by a benign entity\\n    function _onlyAuthorizedActorsOrVault() internal view {\\n        require(msg.sender == keeper() || msg.sender == governance() || msg.sender == vault, \\\"onlyAuthorizedActorsOrVault\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from guardian or governance.\\n    /// @dev Modifier used exclusively for pausing\\n    function _onlyAuthorizedPausers() internal view {\\n        require(msg.sender == guardian() || msg.sender == governance(), \\\"onlyPausers\\\");\\n    }\\n\\n    /// ===== View Functions =====\\n    /// @notice Used to track the deployed version of BaseStrategy.\\n    /// @return Current version of the contract.\\n    function baseStrategyVersion() external pure returns (string memory) {\\n        return \\\"1.5\\\";\\n    }\\n\\n    /// @notice Gives the balance of want held idle in the Strategy.\\n    /// @dev Public because used internally for accounting\\n    /// @return Balance of want held idle in the strategy.\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20Upgradeable(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Gives the total balance of want managed by the strategy.\\n    ///         This includes all want deposited to active strategy positions as well as any idle want in the strategy.\\n    /// @return Total balance of want managed by the strategy.\\n    function balanceOf() external view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /// @notice Tells whether the strategy is supposed to be tended.\\n    /// @dev This is usually a constant. The harvest keeper would only call `tend` if this is true.\\n    /// @return Boolean indicating whether strategy is supposed to be tended or not.\\n    function isTendable() external pure returns (bool) {\\n        return _isTendable();\\n    }\\n\\n    function _isTendable() internal virtual pure returns (bool);\\n\\n    /// @notice Checks whether a token is a protected token.\\n    ///         Protected tokens are managed by the strategy and can't be transferred/sweeped.\\n    /// @return Boolean indicating whether the token is a protected token.\\n    function isProtectedToken(address token) public view returns (bool) {\\n        require(token != address(0), \\\"Address 0\\\");\\n\\n        address[] memory protectedTokens = getProtectedTokens();\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (token == protectedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Fetches the governance address from the vault.\\n    /// @return The governance address.\\n    function governance() public view returns (address) {\\n        return IVault(vault).governance();\\n    }\\n\\n    /// @notice Fetches the strategist address from the vault.\\n    /// @return The strategist address.\\n    function strategist() public view returns (address) {\\n        return IVault(vault).strategist();\\n    }\\n\\n    /// @notice Fetches the keeper address from the vault.\\n    /// @return The keeper address.\\n    function keeper() public view returns (address) {\\n        return IVault(vault).keeper();\\n    }\\n\\n    /// @notice Fetches the guardian address from the vault.\\n    /// @return The guardian address.\\n    function guardian() public view returns (address) {\\n        return IVault(vault).guardian();\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n    \\n    /// @notice Sets the max withdrawal deviation (percentage loss) that is acceptable to the strategy.\\n    ///         This can only be called by governance.\\n    /// @dev This is used as a slippage check against the actual funds withdrawn from strategy positions.\\n    ///      See `withdraw`.\\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\\n        _onlyGovernance();\\n        require(_threshold <= MAX_BPS, \\\"_threshold should be <= MAX_BPS\\\");\\n        withdrawalMaxDeviationThreshold = _threshold;\\n        emit SetWithdrawalMaxDeviationThreshold(_threshold);\\n    }\\n\\n    /// @notice Deposits any idle want in the strategy into positions.\\n    ///         This can be called by either the vault, keeper or governance.\\n    ///         Note that deposits don't work when the strategy is paused. \\n    /// @dev See `deposit`.\\n    function earn() external whenNotPaused {\\n        deposit();\\n    }\\n\\n    /// @notice Deposits any idle want in the strategy into positions.\\n    ///         This can be called by either the vault, keeper or governance.\\n    ///         Note that deposits don't work when the strategy is paused. \\n    /// @dev Is basically the same as tend, except without custom code for it \\n    function deposit() public whenNotPaused {\\n        _onlyAuthorizedActorsOrVault();\\n        uint256 _amount = IERC20Upgradeable(want).balanceOf(address(this));\\n        if (_amount > 0) {\\n            _deposit(_amount);\\n        }\\n    }\\n\\n    // ===== Permissioned Actions: Vault =====\\n\\n    /// @notice Withdraw all funds from the strategy to the vault, unrolling all positions.\\n    ///         This can only be called by the vault.\\n    /// @dev This can be called even when paused, and strategist can trigger this via the vault.\\n    ///      The idea is that this can allow recovery of funds back to the strategy faster.\\n    ///      The risk is that if _withdrawAll causes a loss, this can be triggered.\\n    ///      However the loss could only be triggered once (just like if governance called)\\n    ///      as pausing the strats would prevent earning again.\\n    function withdrawToVault() external {\\n        _onlyVault();\\n\\n        _withdrawAll();\\n\\n        uint256 balance = IERC20Upgradeable(want).balanceOf(address(this));\\n        _transferToVault(balance);\\n    }\\n\\n    /// @notice Withdraw partial funds from the strategy to the vault, unrolling from strategy positions as necessary.\\n    ///         This can only be called by the vault.\\n    ///         Note that withdraws don't work when the strategy is paused. \\n    /// @dev If the strategy fails to recover sufficient funds (defined by `withdrawalMaxDeviationThreshold`), \\n    ///      the withdrawal would fail so that this unexpected behavior can be investigated.\\n    /// @param _amount Amount of funds required to be withdrawn.\\n    function withdraw(uint256 _amount) external whenNotPaused {\\n        _onlyVault();\\n        require(_amount != 0, \\\"Amount 0\\\");\\n\\n        // Withdraw from strategy positions, typically taking from any idle want first.\\n        _withdrawSome(_amount);\\n        uint256 _postWithdraw = IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // Sanity check: Ensure we were able to retrieve sufficient want from strategy positions\\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\\n        if (_postWithdraw < _amount) {\\n            uint256 diff = _diff(_amount, _postWithdraw);\\n\\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\\n            require(diff <= _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_BPS), \\\"withdraw-exceed-max-deviation-threshold\\\");\\n        }\\n\\n        // Return the amount actually withdrawn if less than amount requested\\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\\n\\n        // Transfer remaining to Vault to handle withdrawal\\n        _transferToVault(_toWithdraw);\\n    }\\n\\n    // Discussion: https://discord.com/channels/785315893960900629/837083557557305375\\n    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.) to the vault.\\n    ///         The `_token` should be different from any tokens managed by the strategy.\\n    ///         This can only be called by the vault.\\n    /// @dev This is a counterpart to `_processExtraToken`.\\n    ///      This is for tokens that the strategy didn't expect to receive. Instead of sweeping, we can directly\\n    ///      emit them via the badgerTree. This saves time while offering security guarantees.\\n    ///      No address(0) check because _onlyNotProtectedTokens does it.\\n    ///      This is not a rug vector as it can't use protected tokens.\\n    /// @param _token Address of the token to be emitted.\\n    function emitNonProtectedToken(address _token) external {\\n        _onlyVault();\\n        _onlyNotProtectedTokens(_token);\\n        IERC20Upgradeable(_token).safeTransfer(vault, IERC20Upgradeable(_token).balanceOf(address(this)));\\n        IVault(vault).reportAdditionalToken(_token);\\n    }\\n\\n    /// @notice Withdraw the balance of a non-protected token to the vault.\\n    ///         This can only be called by the vault.\\n    /// @dev Should only be used in an emergency to sweep any asset.\\n    ///      This is the version that sends the assets to governance.\\n    ///      No address(0) check because _onlyNotProtectedTokens does it.\\n    /// @param _asset Address of the token to be withdrawn.\\n    function withdrawOther(address _asset) external {\\n        _onlyVault();\\n        _onlyNotProtectedTokens(_asset);\\n        IERC20Upgradeable(_asset).safeTransfer(vault, IERC20Upgradeable(_asset).balanceOf(address(this)));\\n    }\\n\\n    /// ===== Permissioned Actions: Authorized Contract Pausers =====\\n\\n    /// @notice Pauses the strategy.\\n    ///         This can be called by either guardian or governance.\\n    /// @dev Check the `onlyWhenPaused` modifier for functionality that is blocked when pausing\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the strategy.\\n    ///         This can only be called by governance (usually a multisig behind a timelock).\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Helper Functions =====\\n\\n    /// @notice Transfers `_amount` of want to the vault.\\n    /// @dev Strategy should have idle funds >= `_amount`.\\n    /// @param _amount Amount of want to be transferred to the vault.\\n    function _transferToVault(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            IERC20Upgradeable(want).safeTransfer(vault, _amount);\\n        }\\n    }\\n\\n    /// @notice Report an harvest to the vault.\\n    /// @param _harvestedAmount Amount of want token autocompounded during harvest.\\n    function _reportToVault(\\n        uint256 _harvestedAmount\\n    ) internal {\\n        IVault(vault).reportHarvest(_harvestedAmount);\\n    }\\n\\n    /// @notice Sends balance of an additional token (eg. reward token) earned by the strategy to the vault.\\n    ///         This should usually be called exclusively on protectedTokens.\\n    ///         Calls `Vault.reportAdditionalToken` to process fees and forward amount to badgerTree to be emitted.\\n    /// @dev This is how you emit tokens in V1.5\\n    ///      After calling this function, the tokens are gone, sent to fee receivers and badgerTree\\n    ///      This is a rug vector as it allows to move funds to the tree\\n    ///      For this reason, it is recommended to verify the tree is the badgerTree from the registry\\n    ///      and also check for this to be used exclusively on harvest, exclusively on protectedTokens.\\n    /// @param _token Address of the token to be emitted.\\n    /// @param _amount Amount of token to transfer to vault.\\n    function _processExtraToken(address _token, uint256 _amount) internal {\\n        require(_token != want, \\\"Not want, use _reportToVault\\\");\\n        require(_token != address(0), \\\"Address 0\\\");\\n        require(_amount != 0, \\\"Amount 0\\\");\\n\\n        IERC20Upgradeable(_token).safeTransfer(vault, _amount);\\n        IVault(vault).reportAdditionalToken(_token);\\n    }\\n\\n    /// @notice Utility function to diff two numbers, expects higher value in first position\\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"a should be >= b\\\");\\n        return a.sub(b);\\n    }\\n\\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\\n\\n    /// @dev Internal deposit logic to be implemented by a derived strategy.\\n    /// @param _want Amount of want token to be deposited into the strategy.\\n    function _deposit(uint256 _want) internal virtual;\\n\\n    /// @notice Checks if a token is not used in yield process.\\n    /// @param _asset Address of token.\\n    function _onlyNotProtectedTokens(address _asset) internal view {\\n        require(!isProtectedToken(_asset), \\\"_onlyNotProtectedTokens\\\");\\n    }\\n\\n    /// @notice Gives the list of protected tokens.\\n    /// @return Array of protected tokens.\\n    function getProtectedTokens() public view virtual returns (address[] memory);\\n\\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible.\\n    function _withdrawAll() internal virtual;\\n\\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\\n    ///      Should ideally use idle want in the strategy before attempting to exit strategy positions.\\n    /// @param _amount Amount of want token to be withdrawn from the strategy.\\n    /// @return Withdrawn amount from the strategy.\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    /// @notice Realize returns from strategy positions.\\n    ///         This can only be called by keeper or governance.\\n    ///         Note that harvests don't work when the strategy is paused. \\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion.\\n    /// @return harvested An array of `TokenAmount` containing the address and amount harvested for each token.\\n    function harvest() external whenNotPaused returns (TokenAmount[] memory harvested) {\\n        _onlyAuthorizedActors();\\n        return _harvest();\\n    }\\n\\n    /// @dev Virtual function that should be overridden with the logic for harvest. \\n    ///      Should report any want or non-want gains to the vault.\\n    ///      Also see `harvest`.\\n    function _harvest() internal virtual returns (TokenAmount[] memory harvested);\\n\\n    /// @notice Tend strategy positions as needed to maximize returns.\\n    ///         This can only be called by keeper or governance.\\n    ///         Note that tend doesn't work when the strategy is paused. \\n    /// @dev Is only called by the keeper when `isTendable` is true.\\n    /// @return tended An array of `TokenAmount` containing the address and amount tended for each token.\\n    function tend() external whenNotPaused returns (TokenAmount[] memory tended) {\\n        _onlyAuthorizedActors();\\n\\n        return _tend();\\n    }\\n\\n    /// @dev Virtual function that should be overridden with the logic for tending. \\n    ///      Also see `tend`.\\n    function _tend() internal virtual returns (TokenAmount[] memory tended);\\n\\n    /// @notice Fetches the name of the strategy.\\n    /// @dev Should be user-friendly and easy to read.\\n    /// @return Name of the strategy.\\n    function getName() external pure virtual returns (string memory);\\n\\n    /// @notice Gives the balance of want held in strategy positions.\\n    /// @return Balance of want held in strategy positions.\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n    /// @notice Gives the total amount of pending rewards accrued for each token.\\n    /// @dev Should take into account all reward tokens.\\n    /// @return rewards An array of `TokenAmount` containing the address and amount of each reward token.\\n    function balanceOfRewards() external view virtual returns (TokenAmount[] memory rewards);\\n\\n    uint256[49] private __gap;\\n}\\n\\ninterface IVault {\\n    function token() external view returns (address);\\n\\n    function reportHarvest(uint256 _harvestedAmount) external;\\n\\n    function reportAdditionalToken(address _token) external;\\n\\n    // Fees\\n    function performanceFeeGovernance() external view returns (uint256);\\n\\n    function performanceFeeStrategist() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    // Actors\\n    function governance() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function strategist() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    // External\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFor(address _recipient, uint256 _amount) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\nenum ExitKind {\\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\\n    BPT_IN_FOR_EXACT_TOKENS_OUT\\n}\\n\\ninterface IBalancerVault {\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\\ninterface IAuraLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct Balances {\\n        uint112 locked;\\n        uint32 nextUnlockIndex;\\n    }\\n\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    struct Epoch {\\n        uint224 supply;\\n        uint32 date; //epoch start date\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function rewardTokens(uint256 _index) external view returns (address token);\\n\\n    function rewardPerToken(address _rewardsToken) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable(address _rewardsToken) external view returns (uint256);\\n\\n    //BOOSTED balance of an account which only includes properly locked tokens as of the most recent eligible epoch\\n    function balanceOf(address _user) external view returns (uint256 amount);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function balances(address _user) external view returns (Balances memory bals);\\n\\n    function userLocks(address _user, uint256 _index) external view returns (LockedBalance memory lockedBals);\\n\\n    function lockedBalances(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 unlockable,\\n            uint256 locked,\\n            LockedBalance[] memory lockData\\n        );\\n\\n    function findEpochId(uint256 _time) external view returns (uint256 epoch);\\n\\n    function epochs(uint256 _index) external view returns (Epoch memory epoch);\\n\\n    function lockedSupply() external view returns (uint256);\\n\\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\\n    function processExpiredLocks(\\n        bool _relock,\\n        uint256 _spendRatio,\\n        address _withdrawTo\\n    ) external;\\n\\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\\n    function processExpiredLocks(bool _relock) external;\\n\\n    function delegate(address newDelegatee) external;\\n\\n    function delegates(address account) external view returns (address);\\n}\\n\\ninterface IRewardDistributor {\\n    struct Claim {\\n        bytes32 identifier;\\n        address account;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n    }\\n    event RewardClaimed(bytes32 indexed identifier, address indexed token, address indexed account, uint256 amount, uint256 updateCount);\\n    event RewardMetadataUpdated(\\n        bytes32 indexed identifier,\\n        address indexed token,\\n        bytes32 merkleRoot,\\n        bytes32 proof,\\n        uint256 indexed updateCount\\n    );\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    function BRIBE_VAULT() external view returns (address);\\n\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function claim(Claim[] calldata _claims) external;\\n\\n    function claimed(bytes32, address) external view returns (uint256);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function rewards(bytes32)\\n        external\\n        view\\n        returns (\\n            address token,\\n            bytes32 merkleRoot,\\n            bytes32 proof,\\n            uint256 updateCount\\n        );\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function updateRewardsMetadata(Claim[] calldata _distributions) external;\\n}\\n\\ninterface IBribesProcessor {\\n    function notifyNewRound() external;\\n}\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n}\\n\\ncontract MyStrategy is BaseStrategy, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    bool public withdrawalSafetyCheck;\\n    // If nothing is unlocked, processExpiredLocks will revert\\n    bool public processLocksOnReinvest;\\n\\n    bool private isClaimingBribes;\\n\\n    IBribesProcessor public bribesProcessor;\\n\\n    IBalancerVault public constant BALANCER_VAULT = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    address public constant BADGER = 0x3472A5A71965499acd81997a54BBA8D852C6E53d;\\n    address public constant BADGER_TREE = 0x660802Fc641b154aBA66a62137e71f331B6d787A;\\n\\n    IAuraLocker public constant LOCKER = IAuraLocker(0x3Fa73f1E5d8A792C80F426fc8F84FBF7Ce9bBCAC);\\n\\n    IERC20Upgradeable public constant BAL = IERC20Upgradeable(0xba100000625a3754423978a60c9317c58a424e3D);\\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20Upgradeable public constant AURA = IERC20Upgradeable(0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF);\\n    IERC20Upgradeable public constant AURABAL = IERC20Upgradeable(0x616e8BfA43F920657B3497DBf40D6b1A02D4608d);\\n    IERC20Upgradeable public constant BALETH_BPT = IERC20Upgradeable(0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56);\\n\\n    bytes32 public constant AURABAL_BALETH_BPT_POOL_ID = 0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249;\\n    bytes32 public constant BAL_ETH_POOL_ID = 0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014;\\n    bytes32 public constant AURA_ETH_POOL_ID = 0xc29562b045d80fd77c69bec09541f5c16fe20d9d000200000000000000000251;\\n\\n    uint256 private constant BPT_WETH_INDEX = 1;\\n\\n    event RewardsCollected(address token, uint256 amount);\\n\\n    /// @dev Initialize the Strategy with security settings as well as tokens\\n    /// @notice Proxies will set any non constant variable you declare as default value\\n    /// @dev add any extra changeable variable at end of initializer as shown\\n    function initialize(address _vault) public initializer {\\n        assert(IVault(_vault).token() == address(AURA));\\n\\n        __BaseStrategy_init(_vault);\\n\\n        want = address(AURA);\\n\\n        /// @dev do one off approvals here\\n        // Permissions for Locker\\n        AURA.safeApprove(address(LOCKER), type(uint256).max);\\n\\n        AURABAL.safeApprove(address(BALANCER_VAULT), type(uint256).max);\\n        WETH.safeApprove(address(BALANCER_VAULT), type(uint256).max);\\n\\n        // Set Safe Defaults\\n        withdrawalSafetyCheck = true;\\n\\n        // Process locks on reinvest is best left false as gov can figure out if they need to save that gas\\n    }\\n\\n    /// ===== Extra Functions =====\\n\\n    /// @dev Change Delegation to another address\\n    function manualSetDelegate(address delegate) external {\\n        _onlyGovernance();\\n        // Set delegate is enough as it will clear previous delegate automatically\\n        LOCKER.delegate(delegate);\\n    }\\n\\n    ///@dev Should we check if the amount requested is more than what we can return on withdrawal?\\n    function setWithdrawalSafetyCheck(bool newWithdrawalSafetyCheck) external {\\n        _onlyGovernance();\\n        withdrawalSafetyCheck = newWithdrawalSafetyCheck;\\n    }\\n\\n    ///@dev Should we processExpiredLocks during reinvest?\\n    function setProcessLocksOnReinvest(bool newProcessLocksOnReinvest) external {\\n        _onlyGovernance();\\n        processLocksOnReinvest = newProcessLocksOnReinvest;\\n    }\\n\\n     ///@dev Change the contract that handles bribes\\n    function setBribesProcessor(IBribesProcessor newBribesProcessor) external {\\n        _onlyGovernance();\\n        bribesProcessor = newBribesProcessor;\\n    }\\n\\n    /// @dev Function to move rewards that are not protected\\n    /// @notice Only not protected, moves the whole amount using _handleRewardTransfer\\n    /// @notice because token paths are hardcoded, this function is safe to be called by anyone\\n    /// @notice Will not notify the BRIBES_PROCESSOR as this could be triggered outside bribes\\n    function sweepRewardToken(address token) public nonReentrant {\\n        _onlyGovernanceOrStrategist();\\n        _onlyNotProtectedTokens(token);\\n\\n        uint256 toSend = IERC20Upgradeable(token).balanceOf(address(this));\\n        _handleRewardTransfer(token, toSend);\\n    }\\n\\n    /// @dev Bulk function for sweepRewardToken\\n    function sweepRewards(address[] calldata tokens) external {\\n        uint256 length = tokens.length;\\n        for(uint i = 0; i < length; i++){\\n            sweepRewardToken(tokens[i]);\\n        }\\n    }\\n\\n   /// ===== View Functions =====\\n\\n    /// @dev Return the name of the strategy\\n    function getName() external pure override returns (string memory) {\\n        return \\\"vlAURA Voting Strategy\\\";\\n    }\\n\\n    /// @dev Specify the version of the Strategy, for upgrades\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0\\\";\\n    }\\n\\n    /// @dev Does this function require `tend` to be called?\\n    function _isTendable() internal pure override returns (bool) {\\n        return false; // Change to true if the strategy should be tended\\n    }\\n\\n    /// @dev Return the balance (in want) that the strategy has invested somewhere\\n    function balanceOfPool() public view override returns (uint256) {\\n        // Return the balance in locker\\n        IAuraLocker.Balances memory balances = LOCKER.balances(address(this));\\n        return balances.locked;\\n    }\\n\\n    /// @dev Return the balance of rewards that the strategy has accrued\\n    /// @notice Used for offChain APY and Harvest Health monitoring\\n    function balanceOfRewards() external view override returns (TokenAmount[] memory rewards) {\\n        IAuraLocker.EarnedData[] memory earnedData = LOCKER.claimableRewards(address(this));\\n        uint256 numRewards = earnedData.length;\\n        rewards = new TokenAmount[](numRewards);\\n        for (uint256 i; i < numRewards; ++i) {\\n            rewards[i] = TokenAmount(earnedData[i].token, earnedData[i].amount);\\n        }\\n    }\\n\\n    /// @dev Return a list of protected tokens\\n    /// @notice It's very important all tokens that are meant to be in the strategy to be marked as protected\\n    /// @notice this provides security guarantees to the depositors they can't be sweeped away\\n    function getProtectedTokens() public view virtual override returns (address[] memory) {\\n        address[] memory protectedTokens = new address[](2);\\n        protectedTokens[0] = want; // AURA\\n        protectedTokens[1] = address(AURABAL);\\n        return protectedTokens;\\n    }\\n\\n    /// ===== Internal Core Implementations =====\\n\\n    /// @dev Deposit `_amount` of want, investing it to earn yield\\n    function _deposit(uint256 _amount) internal override {\\n        // Lock tokens for 16 weeks, send credit to strat\\n        LOCKER.lock(address(this), _amount);\\n    }\\n\\n    /// @dev utility function to withdraw all AURA that we can from the lock\\n    function prepareWithdrawAll() external {\\n        manualProcessExpiredLocks();\\n    }\\n\\n    /// @dev Withdraw all funds, this is used for migrations, most of the time for emergency reasons\\n    function _withdrawAll() internal override {\\n        //NOTE: This probably will always fail unless we have all tokens expired\\n        require(\\n            balanceOfPool() == 0 && LOCKER.balanceOf(address(this)) == 0,\\n            \\\"You have to wait for unlock or have to manually rebalance out of it\\\"\\n        );\\n\\n        // Make sure to call prepareWithdrawAll before _withdrawAll\\n    }\\n\\n    /// @dev Withdraw `_amount` of want, so that it can be sent to the vault / depositor\\n    /// @notice just unlock the funds and return the amount you could unlock\\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\\n        uint256 max = balanceOfWant();\\n\\n        if (_amount > max) {\\n            // Try to unlock, as much as possible\\n            // @notice Reverts if no locks expired\\n            LOCKER.processExpiredLocks(false);\\n            max = balanceOfWant();\\n        }\\n\\n        if (withdrawalSafetyCheck) {\\n            require(max >= _amount.mul(9_980).div(MAX_BPS), \\\"Withdrawal Safety Check\\\"); // 20 BP of slippage\\n        }\\n\\n        if (_amount > max) {\\n            return max;\\n        }\\n\\n        return _amount;\\n    }\\n\\n    /// @notice Autocompound auraBAL rewards into AURA.\\n    /// @dev Anyone can claim bribes for this contract from hidden hands with \\n    ///      the correct merkle proof. Therefore, only tokens that are gained\\n    ///      after claiming rewards or swapping are auto-compunded.\\n    function _harvest() internal override returns (TokenAmount[] memory harvested) {\\n        uint256 auraBalBalanceBefore = AURABAL.balanceOf(address(this));\\n\\n        // Claim auraBAL from locker\\n        LOCKER.getReward(address(this));\\n\\n        harvested = new TokenAmount[](1);\\n        harvested[0].token = address(AURA);\\n\\n        uint256 auraBalEarned = AURABAL.balanceOf(address(this)).sub(auraBalBalanceBefore);\\n        // auraBAL -> BAL/ETH BPT -> WETH -> AURA\\n        if (auraBalEarned > 0) {\\n            // Common structs for swaps\\n            IBalancerVault.SingleSwap memory singleSwap;\\n            IBalancerVault.FundManagement memory fundManagement = IBalancerVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(this)),\\n                toInternalBalance: false\\n            });\\n\\n            // Swap auraBal -> BAL/ETH BPT\\n            singleSwap = IBalancerVault.SingleSwap({\\n                poolId: AURABAL_BALETH_BPT_POOL_ID,\\n                kind: IBalancerVault.SwapKind.GIVEN_IN,\\n                assetIn: IAsset(address(AURABAL)),\\n                assetOut: IAsset(address(BALETH_BPT)),\\n                amount: auraBalEarned,\\n                userData: new bytes(0)\\n            });\\n            uint256 balEthBptEarned = BALANCER_VAULT.swap(singleSwap, fundManagement, 0, type(uint256).max);\\n\\n            // Withdraw BAL/ETH BPT -> WETH\\n            uint256 wethBalanceBefore = WETH.balanceOf(address(this));\\n\\n            IAsset[] memory assets = new IAsset[](2);\\n            assets[0] = IAsset(address(BAL));\\n            assets[1] = IAsset(address(WETH));\\n            IBalancerVault.ExitPoolRequest memory exitPoolRequest = IBalancerVault.ExitPoolRequest({\\n                assets: assets,\\n                minAmountsOut: new uint256[](2),\\n                userData: abi.encode(ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, balEthBptEarned, BPT_WETH_INDEX),\\n                toInternalBalance: false\\n            });\\n            BALANCER_VAULT.exitPool(BAL_ETH_POOL_ID, address(this), payable(address(this)), exitPoolRequest);\\n\\n            // Swap WETH -> AURA\\n            uint256 wethEarned = WETH.balanceOf(address(this)).sub(wethBalanceBefore);\\n            singleSwap = IBalancerVault.SingleSwap({\\n                poolId: AURA_ETH_POOL_ID,\\n                kind: IBalancerVault.SwapKind.GIVEN_IN,\\n                assetIn: IAsset(address(WETH)),\\n                assetOut: IAsset(address(AURA)),\\n                amount: wethEarned,\\n                userData: new bytes(0)\\n            });\\n            harvested[0].amount = BALANCER_VAULT.swap(singleSwap, fundManagement, 0, type(uint256).max);\\n        }\\n\\n        _reportToVault(harvested[0].amount);\\n        if (harvested[0].amount > 0) {\\n            _deposit(harvested[0].amount);\\n        }\\n    }\\n\\n    // TODO: Hardcode claim.account = address(this)?\\n    /// @dev allows claiming of multiple bribes, badger is sent to tree\\n    /// @notice Hidden hand only allows to claim all tokens at once, not individually.\\n    ///         Allows claiming any token as it uses the difference in balance\\n    function claimBribesFromHiddenHand(IRewardDistributor hiddenHandDistributor, IRewardDistributor.Claim[] calldata _claims) external nonReentrant {\\n        _onlyGovernanceOrStrategist();\\n        require(address(bribesProcessor) != address(0), \\\"Bribes processor not set\\\");\\n\\n        uint256 beforeVaultBalance = _getBalance();\\n        uint256 beforePricePerFullShare = _getPricePerFullShare();\\n\\n        // Hidden hand uses BRIBE_VAULT address as a substitute for ETH\\n        address hhBribeVault = hiddenHandDistributor.BRIBE_VAULT();\\n\\n        // Track token balances before bribes claim\\n        uint256[] memory beforeBalance = new uint256[](_claims.length);\\n        for (uint256 i = 0; i < _claims.length; i++) {\\n            (address token, , , ) = hiddenHandDistributor.rewards(_claims[i].identifier);\\n            if (token == hhBribeVault) {\\n                beforeBalance[i] = address(this).balance;\\n            } else {\\n                beforeBalance[i] = IERC20Upgradeable(token).balanceOf(address(this));\\n            }\\n        }\\n\\n        // Claim bribes\\n        isClaimingBribes = true;\\n        hiddenHandDistributor.claim(_claims);\\n        isClaimingBribes = false;\\n\\n        bool nonZeroDiff; // Cached value but also to check if we need to notifyProcessor\\n        // Ultimately it's proof of non-zero which is good enough\\n\\n        for (uint256 i = 0; i < _claims.length; i++) {\\n            (address token, , , ) = hiddenHandDistributor.rewards(_claims[i].identifier);\\n\\n            if (token == hhBribeVault) {\\n                // ETH\\n                uint256 difference = address(this).balance.sub(beforeBalance[i]);\\n                if (difference > 0) {\\n                    IWeth(address(WETH)).deposit{value: difference}();\\n                    nonZeroDiff = true;\\n                    _handleRewardTransfer(address(WETH), difference);\\n                }\\n            } else {\\n                uint256 difference = IERC20Upgradeable(token).balanceOf(address(this)).sub(beforeBalance[i]);\\n                if (difference > 0) {\\n                    nonZeroDiff = true;\\n                    _handleRewardTransfer(token, difference);\\n                }\\n            }\\n        }\\n\\n        if (nonZeroDiff) {\\n            _notifyBribesProcessor();\\n        }\\n\\n        require(beforeVaultBalance == _getBalance(), \\\"Balance can't change\\\");\\n        require(beforePricePerFullShare == _getPricePerFullShare(), \\\"Ppfs can't change\\\");\\n    }\\n\\n    // Example tend is a no-op which returns the values, could also just revert\\n    function _tend() internal override returns (TokenAmount[] memory tended) {\\n        revert(\\\"no op\\\");\\n    }\\n\\n    /// MANUAL FUNCTIONS ///\\n\\n    /// @dev manual function to reinvest all Aura that was locked\\n    function reinvest() external whenNotPaused returns (uint256) {\\n        _onlyGovernance();\\n\\n        if (processLocksOnReinvest) {\\n            // Withdraw all we can\\n            LOCKER.processExpiredLocks(false);\\n        }\\n\\n        // Redeposit all into vlAURA\\n        uint256 toDeposit = IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // Redeposit into vlAURA\\n        _deposit(toDeposit);\\n\\n        return toDeposit;\\n    }\\n\\n    /// @dev process all locks, to redeem\\n    /// @notice No Access Control Checks, anyone can unlock an expired lock\\n    function manualProcessExpiredLocks() public whenNotPaused {\\n        // Unlock vlAURA that is expired and redeem AURA back to this strat\\n        LOCKER.processExpiredLocks(false);\\n    }\\n\\n    /// @dev Send all available Aura to the Vault\\n    /// @notice you can do this so you can earn again (re-lock), or just to add to the redemption pool\\n    function manualSendAuraToVault() external whenNotPaused {\\n        _onlyGovernance();\\n        uint256 auraAmount = balanceOfWant();\\n        _transferToVault(auraAmount);\\n    }\\n\\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        (, uint256 unlockable, ,) = LOCKER.lockedBalances(address(this));\\n        upkeepNeeded = unlockable > 0;\\n    }\\n\\n    /// @dev Function for ChainLink Keepers to automatically process expired locks\\n    function performUpkeep(bytes calldata performData) external {\\n        // Works like this because it reverts if lock is not expired\\n        LOCKER.processExpiredLocks(false);\\n    }\\n\\n    function _getBalance() internal view returns (uint256) {\\n        return IVault(vault).balance();\\n    }\\n\\n    function _getPricePerFullShare() internal view returns (uint256) {\\n        return IVault(vault).getPricePerFullShare();\\n    }\\n\\n    /// *** Handling of rewards ***\\n    function _handleRewardTransfer(address token, uint256 amount) internal {\\n        // NOTE: BADGER is emitted through the tree\\n        if (token == BADGER) {\\n            _sendBadgerToTree(amount);\\n        } else {\\n            // NOTE: All other tokens are sent to bribes processor\\n            _sendTokenToBribesProcessor(token, amount);\\n        }\\n    }\\n\\n    /// @dev Notify the BribesProcessor that a new round of bribes has happened\\n    function _notifyBribesProcessor() internal {\\n        bribesProcessor.notifyNewRound();\\n    }\\n\\n    /// @dev Send funds to the bribes receiver\\n    function _sendTokenToBribesProcessor(address token, uint256 amount) internal {\\n        // TODO: Too many SLOADs\\n        IERC20Upgradeable(token).safeTransfer(address(bribesProcessor), amount);\\n        emit RewardsCollected(token, amount);\\n    }\\n\\n    /// @dev Send the BADGER token to the badgerTree\\n    function _sendBadgerToTree(uint256 amount) internal {\\n        IERC20Upgradeable(BADGER).safeTransfer(BADGER_TREE, amount);\\n        _processExtraToken(address(BADGER), amount);\\n    }\\n\\n    /// PAYABLE FUNCTIONS ///\\n\\n    /// @dev Can only receive ether from Hidden Hand\\n    receive() external payable {\\n        require(isClaimingBribes, \\\"onlyWhileClaiming\\\");\\n    }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalMaxDeviationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AURA\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AURABAL\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AURABAL_BALETH_BPT_POOL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AURA_ETH_POOL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGER_TREE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALETH_BPT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAL_ETH_POOL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER\",\"outputs\":[{\"internalType\":\"contract IAuraLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompoundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribesProcessor\",\"outputs\":[{\"internalType\":\"contract IBribesProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"hiddenHandDistributor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IRewardDistributor.Claim[]\",\"name\":\"_claims\",\"type\":\"tuple[]\"}],\"name\":\"claimBribesFromHiddenHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emitNonProtectedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"harvested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isProtectedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualProcessExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSendAuraToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"manualSetDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLocksOnReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBribesProcessor\",\"name\":\"newBribesProcessor\",\"type\":\"address\"}],\"name\":\"setBribesProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newProcessLocksOnReinvest\",\"type\":\"bool\"}],\"name\":\"setProcessLocksOnReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newWithdrawalSafetyCheck\",\"type\":\"bool\"}],\"name\":\"setWithdrawalSafetyCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"sweepRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"tended\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalSafetyCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MyStrategy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}