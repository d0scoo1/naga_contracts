{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'math_add_over');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'math_sub_over');\r\n    }\r\n    function sub128(uint x , uint y) internal pure returns (uint128 z){\r\n        return uint128(sub(x , y));\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'math_mul_over');\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z){\r\n        require(y > 0, 'math_div_0');\r\n        z = x / y;\r\n    }\r\n\r\n    function mod(uint x, uint y) internal pure returns (uint z){\r\n        require(y != 0, 'math_mod_0');\r\n        z = x % y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Manager is Ownable {\r\n    address public manager;\r\n\r\n    modifier onlyManager() {\r\n        require(owner == msg.sender || manager == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    function setManager(address newManager) public onlyOwner {\r\n        manager = newManager;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Bridge is Manager, Pausable {\r\n    using SafeMath for *;\r\n    uint public immutable startNumber;\r\n    uint public immutable RATE100 = 10 ** 8;\r\n    address public immutable ETH = address(0);\r\n    //1=ETH, 2=BSC\r\n//  0x0000000000000000000000000000000000000000\r\n    struct ChainInfo {\r\n        uint256 chainID;\r\n        uint256 gasFee;\r\n        uint256 gasOutFee;\r\n    }\r\n\r\n    struct Whitelist {\r\n        uint256 chainID;\r\n        address fromToken;\r\n        string toToken;\r\n        uint256 taxFeeRate;\r\n    }\r\n\r\n    struct AllowedWhiteList {\r\n        address fromToken;\r\n        uint256 allowed;\r\n        uint256 balance;\r\n    }\r\n    \r\n    struct BridgeState {\r\n        address fromToken;\r\n        string toToken;\r\n        string name;\r\n        string symbol;\r\n        uint256 decimals;\r\n        uint256 balance;\r\n    }\r\n    event Convert (\r\n        address indexed sender,\r\n        address indexed fromToken,\r\n        uint256 indexed chainID,\r\n        string toToken,\r\n        string recipient,\r\n        uint256 amount,\r\n        uint256 conversionAmount,\r\n        uint256 gasFee,\r\n        uint256 tax\r\n    );\r\n\r\n    event Pay (\r\n        address indexed recipient,\r\n        address indexed token,\r\n        uint256 indexed chainID,\r\n        uint256 amount,\r\n        uint256 txhash\r\n    );\r\n\r\n    ChainInfo[] _chainInfo;\r\n    Whitelist[] _whitelist;\r\n    \r\n    mapping(uint256 => bool) public receipt;\r\n\r\n    address public depositWallet;\r\n    \r\n    constructor(address manager, address newDeposit) public{\r\n        startNumber = block.number;\r\n        setManager(manager);\r\n        setDepositWallet(newDeposit);\r\n    }\r\n    receive() payable external{}\r\n\r\n  \r\n    function setDepositWallet(address newDeposit) public onlyOwner {\r\n        require(newDeposit != address(0));\r\n        depositWallet = newDeposit;\r\n    }\r\n\r\n    function setChainInfo(uint256 chainID,uint256 gasFee, uint256 gasOutFee) public onlyManager {\r\n        require(chainID > 0);\r\n\r\n        for(uint i = 0 ; i < _chainInfo.length; i++) {\r\n            if(_chainInfo[i].chainID == chainID) {\r\n                _chainInfo[i].gasFee = gasFee;\r\n                _chainInfo[i].gasOutFee = gasOutFee;\r\n                return;\r\n            }\r\n        }\r\n        _chainInfo.push(ChainInfo({\r\n            chainID: chainID,\r\n            gasFee: gasFee,\r\n            gasOutFee: gasOutFee\r\n        }));\r\n    }\r\n    function removeChainInfo(uint256 chainID) public onlyManager {\r\n        for(uint i = 0 ; i < _chainInfo.length; i++) {\r\n            if(_chainInfo[i].chainID == chainID) {\r\n                uint256 lastIdx = _chainInfo.length - 1;\r\n                if(i != lastIdx) {\r\n                    _chainInfo[i].chainID = _chainInfo[lastIdx].chainID;\r\n                    _chainInfo[i].gasFee = _chainInfo[lastIdx].gasFee;\r\n                    _chainInfo[i].gasOutFee = _chainInfo[lastIdx].gasOutFee;\r\n                }\r\n                _chainInfo.pop();\r\n                return;\r\n            }\r\n        }\r\n        require(false, 'there is nothing to delete.');\r\n    }\r\n    function chainInfo(uint256 chainID) public view returns (ChainInfo memory) {\r\n        for(uint i = 0 ; i < _chainInfo.length; i++) {\r\n            if(_chainInfo[i].chainID == chainID) {\r\n                return _chainInfo[i];\r\n            }\r\n        }\r\n        require(false, 'chain not found.');\r\n    }\r\n    function chainInfos() public view returns (ChainInfo[] memory) {\r\n        return _chainInfo;\r\n    }\r\n   \r\n    function setWhitelist(uint256 chainID,address fromToken,string memory toToken, uint256 taxFeeRate) public onlyManager {\r\n        require(taxFeeRate < RATE100);\r\n\r\n        for(uint i = 0 ; i < _whitelist.length; i++) {\r\n            if(_whitelist[i].chainID == chainID && _whitelist[i].fromToken == fromToken) {\r\n                _whitelist[i].toToken = toToken;\r\n                _whitelist[i].taxFeeRate = taxFeeRate;\r\n                return;\r\n            }\r\n        }\r\n        _whitelist.push(Whitelist({\r\n            chainID: chainID,\r\n            fromToken: fromToken,\r\n            toToken: toToken,\r\n            taxFeeRate: taxFeeRate\r\n        }));\r\n    }\r\n    function removeWhitelist(uint256 chainID, address fromToken) public onlyManager {\r\n        for(uint i = 0 ; i < _whitelist.length; i++) {\r\n            if(_whitelist[i].chainID == chainID && _whitelist[i].fromToken == fromToken) {\r\n                uint256 lastIdx = _whitelist.length - 1;\r\n                if(i != lastIdx) {\r\n                    _whitelist[i].chainID = _whitelist[lastIdx].chainID;\r\n                    _whitelist[i].fromToken = _whitelist[lastIdx].fromToken;\r\n                    _whitelist[i].toToken = _whitelist[lastIdx].toToken;\r\n                    _whitelist[i].taxFeeRate = _whitelist[lastIdx].taxFeeRate;\r\n                }\r\n                _whitelist.pop();\r\n                return;\r\n            }\r\n        }\r\n        require(false, 'there is nothing to delete.');\r\n    }\r\n \r\n    function whitelist(uint256 chainID, address fromToken) public view returns (Whitelist memory) {\r\n        for(uint i = 0 ; i < _whitelist.length; i++) {\r\n            if(_whitelist[i].chainID == chainID && _whitelist[i].fromToken == fromToken) {\r\n                return _whitelist[i];\r\n            }\r\n        }\r\n        require(false, 'whitelist not found.');\r\n    }\r\n  \r\n    function whitelistPage(uint256 startIdx, uint256 endIdx) public view returns (Whitelist[] memory) {\r\n        uint256 maxIdx = endIdx;\r\n\r\n        if(endIdx >= _whitelist.length) {\r\n            maxIdx = _whitelist.length - 1;\r\n        }\r\n        \r\n        uint256 size = maxIdx - startIdx + 1;\r\n        Whitelist[] memory ret = new Whitelist[](size);\r\n        uint256 idx = 0;\r\n        for(uint i = startIdx ; i <= maxIdx; i++) {\r\n            ret[idx].chainID = _whitelist[i].chainID;\r\n            ret[idx].fromToken = _whitelist[i].fromToken;\r\n            ret[idx].toToken = _whitelist[i].toToken;\r\n            ret[idx].taxFeeRate = _whitelist[i].taxFeeRate;\r\n            idx++;\r\n        }\r\n        return ret;\r\n    }\r\n    function whitelistLength() public view returns (uint256) {\r\n        return _whitelist.length;\r\n    }\r\n    function whitelistAll() public view returns (Whitelist[] memory) {\r\n        return _whitelist;\r\n    }\r\n\r\n\r\n    function gasFee(uint256 chainID) public view returns(uint256) {\r\n        ChainInfo memory targetChainInfo = chainInfo(chainID);\r\n        return targetChainInfo.gasFee;\r\n    }\r\n    function taxFee(uint256 chainID, address fromToken, uint256 amount) public view returns(uint256) {\r\n        require(amount > 0);\r\n        Whitelist memory white = whitelist(chainID, fromToken);\r\n        if(white.taxFeeRate > 0) {\r\n            uint256 tax = amount.mul(white.taxFeeRate).div(RATE100);\r\n            uint256 originAmount = tax.mul(RATE100).div(white.taxFeeRate);\r\n            require(originAmount == amount);\r\n            return tax;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function convert(uint256 chainID, address fromToken, string memory recipient, uint256 amount) public payable whenNotPaused {\r\n        require(amount > 0);\r\n\r\n        Whitelist memory targetWhiteInfo = whitelist(chainID, fromToken);\r\n\r\n        uint256 gas = gasFee(chainID);\r\n        uint256 tax = taxFee(chainID, fromToken, amount);\r\n        \r\n        if(fromToken == ETH) {\r\n            require(amount.add(gas) == msg.value);\r\n        } else {\r\n            require(gas == msg.value);\r\n            uint256 beforeBridgeBalance = IERC20(fromToken).balanceOf(address(this));\r\n            TransferHelper.safeTransferFrom(fromToken, msg.sender, address(this), amount);\r\n            uint256 afterBridgeBalance = IERC20(fromToken).balanceOf(address(this));\r\n            require(beforeBridgeBalance.add(amount) == afterBridgeBalance);\r\n        }\r\n\r\n        uint256 conversionAmount = amount.sub(tax);\r\n        \r\n        TransferHelper.safeTransferETH(manager, gas);\r\n     \r\n        if(fromToken == ETH) {\r\n            TransferHelper.safeTransferETH(depositWallet, tax);\r\n        } else {\r\n            TransferHelper.safeTransfer(fromToken, depositWallet, tax);\r\n        }\r\n\r\n   \r\n        emit Convert(\r\n            msg.sender,\r\n            fromToken,\r\n            chainID,\r\n            targetWhiteInfo.toToken,\r\n            recipient,\r\n            amount,\r\n            conversionAmount,\r\n            gas,\r\n            tax\r\n        );\r\n        \r\n    }\r\n\r\n    function pay(uint256 chainID, address token, address recipient, uint256 amount, uint256 txhash) public onlyManager {\r\n        require(amount > 0);\r\n        require(!receipt[txhash]);\r\n        \r\n        if(token == ETH) {\r\n            TransferHelper.safeTransferETH(recipient, amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(token, recipient, amount);\r\n        }\r\n        receipt[txhash] = true;\r\n\r\n        emit Pay(\r\n            recipient,\r\n            token,\r\n            chainID,\r\n            amount,\r\n            txhash\r\n        );\r\n        \r\n    }\r\n\r\n    function payAll(uint256[] memory chainID, address[] memory token, address[] memory recipient, uint256[] memory amount, uint256[] memory txhash) public onlyManager {\r\n\r\n        for(uint i = 0 ; i < chainID.length; i++) {\r\n            pay(chainID[i], token[i], recipient[i], amount[i], txhash[i]);\r\n        }\r\n        \r\n    }\r\n\r\n    function withdraw(address token, address to, uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n\r\n        if(token == ETH) {\r\n            TransferHelper.safeTransferETH(to, amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(token, to, amount);\r\n        }\r\n  \r\n    }\r\n\r\n    function allowedBalanceOf(address owner) public view returns(AllowedWhiteList[] memory) {\r\n        AllowedWhiteList[] memory ret = new AllowedWhiteList[](whitelistLength());\r\n        for(uint i = 0 ; i < whitelistLength(); i++) {\r\n            if(_whitelist[i].fromToken == ETH) {\r\n                ret[i].fromToken = ETH;\r\n                ret[i].allowed = 100000000000000000000000000000000;\r\n                ret[i].balance = owner.balance; \r\n            } else {\r\n                ret[i].fromToken = _whitelist[i].fromToken;\r\n                ret[i].allowed = IERC20(_whitelist[i].fromToken).allowance(owner, address(this));\r\n                ret[i].balance = IERC20(_whitelist[i].fromToken).balanceOf(owner);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function bridgeState() public view returns(uint256, uint256, ChainInfo[] memory, BridgeState[] memory) {\r\n        BridgeState[] memory ret = new BridgeState[](whitelistLength());\r\n        for(uint i = 0 ; i < whitelistLength(); i++) {\r\n            if(_whitelist[i].fromToken != ETH) {\r\n                ret[i].fromToken = _whitelist[i].fromToken;\r\n                ret[i].toToken = _whitelist[i].toToken;\r\n                ret[i].name = IERC20(_whitelist[i].fromToken).name();\r\n                ret[i].symbol = IERC20(_whitelist[i].fromToken).symbol();\r\n                ret[i].decimals = IERC20(_whitelist[i].fromToken).decimals();\r\n                ret[i].balance = IERC20(_whitelist[i].fromToken).balanceOf(address(this));\r\n            }\r\n        }\r\n        return (address(this).balance, manager.balance, chainInfos(), ret);\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDeposit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txhash\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allowedBalanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.AllowedWhiteList[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOutFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.ChainInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.BridgeState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"chainInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOutFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.ChainInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOutFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.ChainInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"gasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txhash\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainID\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"txhash\",\"type\":\"uint256[]\"}],\"name\":\"payAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removeChainInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOutFee\",\"type\":\"uint256\"}],\"name\":\"setChainInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeposit\",\"type\":\"address\"}],\"name\":\"setDepositWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeRate\",\"type\":\"uint256\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Whitelist\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Whitelist[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"whitelistPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"toToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Whitelist[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1631c82382b56300d47da141bb93d91b7065359000000000000000000000000533e02bee6d75da9e90a20001c90d5331404da74", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2aee8b35c58e6e137fe967688f7e990d8dc088d27307464461a5d18e2ffe9e1"}]}