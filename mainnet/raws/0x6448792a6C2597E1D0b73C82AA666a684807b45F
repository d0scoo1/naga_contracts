{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Metadata.sol\": {\r\n      \"content\": \"/*\\n _   _ _  __ _      __          __   _ _\\n| \\\\ | (_)/ _| |     \\\\ \\\\        / /  | | |\\n|  \\\\| |_| |_| |_ _   \\\\ \\\\  /\\\\  / /_ _| | |___\\n| . ` | |  _| __| | | \\\\ \\\\/  \\\\/ / _` | | / __|\\n| |\\\\  | | | | |_| |_| |\\\\  /\\\\  / (_| | | \\\\__ \\\\\\n|_| \\\\_|_|_|  \\\\__|\\\\__, | \\\\/  \\\\/ \\\\__,_|_|_|___/\\n          __/ |\\n         |___/\\n\\nAn NFT project by vrypan.eth.\\n\\n*/\\n//Contract based on [https://docs.openzeppelin.com/contracts/3.x/erc721](https://docs.openzeppelin.com/contracts/3.x/erc721)\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Metadata is Ownable{\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    string  public     baseURI = \\\"https://arweave.net/zUr8QLeAV136LzRA7sNpR843-t-HF5HMLCA3BwGqnDk/\\\";\\n\\n    string[4] private     turmitesDict = ['LRR','LRL','LRRR','LRRL'];\\n    string[8] private     patternDict = ['Block','T-shape','C-shape','Stripes','Squares','Thorns','Inverse-L','O-shape'];\\n    string[68] private    color =      ['000000', '004b23', '007200', '38b000', '9ef01a', 'ffdd00', 'ffa200', 'ff8800',\\n                                        'ff7b00', '3c096c', '5a189a', '7b2cbf', '9d4edd', '48bfe3', '56cfe1', '64dfdf',\\n                                        '5aedc9', '9b2226', 'ae2012', 'bb3e03', 'ca6702', '582f0e', '7f4f24', '936639',\\n                                        'a68a64', 'b6ad90', '414833', 'bcbcbc', 'b1b1b1', '7d7d7d', '4d4d4d', 'ffc2d1',\\n                                        'ffb3c6', 'ff8fab', 'fb6f92', 'd62828', 'f77f00', 'fcbf49', 'eae2b7', '87bfff',\\n                                        '3f8efc', '2667ff', '3b28cc', 'ee9b00', 'ffffff', '780000', '660000', '520000',\\n                                        '3d0000', 'ffd700', '283035', '3b4c61', '569aaa', '6B8f6f', 'd7decd', 'fff963',\\n                                        '019d51', 'fb3195', '51b1cc', 'dab183', '573f77', '506a78', 'ad8b64', '703f21',\\n                                        '205947', 'ffd627', 'ff7626', '4e577e'];\\n    uint8[5][32] private colorDict = [\\n        [0, 1, 2, 3, 4],        [0, 5, 6, 7, 8],        [0, 9, 10, 11, 12],     [0, 13, 14, 15, 16],\\n        [0, 17, 18, 19, 20],    [0, 21, 22, 23, 24],    [0, 25, 26, 23, 22],    [0, 27, 28, 29, 30],\\n        [0, 31, 32, 33, 34],    [0, 35, 36, 37, 38],    [0, 39, 40, 41, 42],    [0, 43, 19, 18, 17],\\n        [44, 1, 2, 3, 4],       [44, 5, 6, 7, 8],       [44, 9, 10, 11, 12],    [44, 13, 14, 15, 16],\\n        [44, 17, 18, 19, 20],   [44, 21, 22, 23, 24],   [44, 25, 26, 23, 22],   [44, 27, 28, 29, 30],\\n        [44, 31, 32, 33, 34],   [44, 45, 46, 47, 48],   [44, 35, 36, 37, 38],   [44, 39, 40, 41, 42],\\n        [44, 43, 19, 18, 17],   [49, 9, 10, 11, 12],    [49, 21, 22, 23, 24],   [49, 39, 40, 41, 42],\\n        [50, 51, 52, 53, 54],   [0, 55, 56, 57, 58],    [59, 60, 61, 62, 63],   [0, 64, 65, 66, 67]\\n    ];\\n    \\n    struct Wall{\\n        uint8        turmite;\\n        uint8        pattern;\\n        string       background;\\n        string[4]    colors;\\n        uint8        fx;\\n        string       imageURL;\\n    }\\n\\n    constructor() {}\\n\\n    function setBaseURI(string memory _URI) public onlyOwner {\\n        baseURI = _URI;\\n    }\\n    \\n    function idToWall(uint _id) private view returns (Wall memory) {\\n        // Given any integer between 0 and 8191, there is a one way mapping to \\n        // NiftyWall metadata.\\n        uint8 turmiteId = uint8(_id & 0x03);\\n        uint8 patternId = uint8( (_id >> 2)  & 0x07 );\\n        uint256 colorId = uint8( (_id >> 5)  & 0x1f );\\n        uint8 fxId      = uint8( (_id >> 10) & 0x07 );\\n\\n        string memory background = color[colorDict[colorId][0]];\\n        string[4] memory colors = [\\n            color[colorDict[colorId][1]], color[colorDict[colorId][2]], color[colorDict[colorId][3]], color[colorDict[colorId][4]]\\n        ];\\n\\n        if (patternId == 0) {\\n            // Block pattern has no empty space for background\\n            // We use -1 to indicate no value.\\n            background = '';\\n        }\\n\\n        if (turmiteId <2) {\\n            // LRR and LRL only use 3 colors\\n            colors[3] = '';\\n        }\\n\\n        if ( (turmiteId>1) && ( (fxId == 2) || (fxId == 6) ) ) {\\n            // LRRR and LRRL in FX3 and FX8 loose the 4th color.\\n            colors[3] = '';\\n        }\\n\\n        return Wall(\\n            turmiteId,\\n            patternId,\\n            background,\\n            colors,\\n            fxId,\\n            ''\\n        );\\n    }\\n    function imageURI(uint _id) public view returns (string memory) {\\n        return( string( abi.encodePacked(baseURI, _id.toString(), '.png' )) );\\n    }\\n    function _traitToJson(string memory _type, string memory _value) private pure returns (string memory) {\\n        return( string(abi.encodePacked('{\\\"trait_type\\\":\\\"', _type  ,'\\\",\\\"value\\\":\\\"', _value, '\\\"}')) );\\n    }\\n    function idToJson(uint _id) external view returns (string memory) {\\n        Wall memory w = idToWall(_id);        \\n        string memory turmite     = _traitToJson('Turmite', turmitesDict[w.turmite]);\\n        string memory pattern     = _traitToJson('Pattern', patternDict[w.pattern]);\\n        string memory fx          = _traitToJson('Effect', (w.fx+1).toString() );\\n        string memory background  = _traitToJson('background', bytes(w.background).length > 0 ? w.background : 'None');\\n        string memory colors;\\n        string memory image       = imageURI(_id);\\n        string memory id_to_str   = _id.toString();\\n        if (bytes(w.colors[3]).length > 0) {\\n            colors = string( abi.encodePacked(\\n                _traitToJson('color', w.colors[0]), ',',\\n                _traitToJson('color', w.colors[1]), ',',\\n                _traitToJson('color', w.colors[2]), ',',\\n                _traitToJson('color', w.colors[3])\\n            ));\\n        } else {\\n            colors = string( abi.encodePacked(\\n                _traitToJson('color', w.colors[0]), ',',\\n                _traitToJson('color', w.colors[1]), ',',\\n                _traitToJson('color', w.colors[2])\\n            ) );\\n        }\\n        string memory name = string(abi.encodePacked('NiftyWall #', id_to_str));\\n        string memory json = string(abi.encodePacked(\\n            '{\\\"attributes\\\":[', turmite, ',', pattern, ',', fx, ',', background, ',', colors, '],',\\n            '\\\"description\\\":\\\"', \\n                \\\"Each NiftyWall is a unique, 3000x3000 algorithmically generated background. https://niftywalls.xyz/wall/\\\",\\n                id_to_str,'\\\",',\\n            '\\\"image\\\":\\\"', image, '\\\",',\\n            '\\\"external_url\\\":\\\"https://niftywalls.xyz/wall/', id_to_str, '\\\",',\\n            '\\\"name\\\":\\\"', name ,'\\\"}'\\n        ));\\n        return( json );\\n    }\\n\\n    /* Only on testnets\\n    function shutdown() public onlyOwner {\\n        selfdestruct( payable(owner()) );\\n    }\\n    */\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"idToJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Metadata", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}