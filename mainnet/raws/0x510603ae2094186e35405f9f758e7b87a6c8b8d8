{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-30\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /// @notice increase total supply of token\r\n    function mint(address account, uint256 amount) external;\r\n    /// @notice who can increase total supply\r\n    function addMinter(address account) external;\r\n    /// @notice remove msg.sender address from minter role\r\n    function renounceMinter() external;\r\n    /// @return true if account has minter role\r\n    function isMinter(address account) external view returns (bool);\r\n}\r\n\r\n/// @title contains all modifiers and stores variables.\r\ncontract MultiSigModifiers {\r\n    address public TokenAddress; //will change only in constractor\r\n    uint256 public MinSigners; //min signers amount to do action - will change only in constractor\r\n    uint256 public sigCounter; //vote count if the transaction can be implemented\r\n    mapping(address => bool) public AuthorizedMap; //can self change\r\n    mapping(uint => address) public VotesMap; // who voted\r\n    uint256 public Amount; //hold temp data for transaction\r\n    address public TargetAddress; //hold temp data for transaction\r\n\r\n    modifier OnlyAuthorized() {\r\n        require(\r\n            AuthorizedMap[msg.sender],\r\n            \"User is not Authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isThisContractMinter() {\r\n        require(\r\n            IERC20(TokenAddress).isMinter(address(this)),\r\n            \"MultiSig doesn't have a minter role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ValuesCheck(address target, uint256 amount) {\r\n        require(\r\n            TargetAddress == target && Amount == amount,\r\n            \"Must use the same values from initiation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier NotVoted(){\r\n        for (uint256 i = 0; i < sigCounter; i++) {\r\n            require(VotesMap[i] != msg.sender, \"your vote is already accepted\");\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\n/// @title contains all events.\r\ncontract MultiSigEvents {\r\n    event Setup(address[] Authorized, address Token, uint256 MinSignersAmount);\r\n    event StartMint(address target, uint256 amount);\r\n    event CompleteMint(address target, uint256 amount);\r\n    event StartChangeOwner(address target);\r\n    event CompleteChangeOwner(address target);\r\n    event AuthorizedChanged(address newAuthorize, address OldAuthorize);\r\n    event NewSig(address Signer, uint256 CurrentSigns, uint256 NeededSigns);\r\n    event Clear();\r\n}\r\n/// @title contains all request initiations.\r\ncontract MultiSigInitiator is MultiSigModifiers, MultiSigEvents {\r\n    /// @dev initiate a request to mint tokens\r\n    function InitiateMint(address target, uint256 amount)\r\n        external\r\n        OnlyAuthorized\r\n        isThisContractMinter\r\n        ValuesCheck(address(0), 0)\r\n    {\r\n        require(\r\n            amount > 0 && target != address(0),\r\n            \"Target address must be non-zero and amount must be greater than 0\"\r\n        );\r\n        Amount = amount;\r\n        TargetAddress = target;\r\n        emit StartMint(target, amount);\r\n        _confirmMint(target, amount);\r\n    }\r\n\r\n    /// @dev initiate a change of ownership of minting tokens\r\n    function InitiateTransferOwnership(address target)\r\n        external\r\n        OnlyAuthorized\r\n        isThisContractMinter\r\n        ValuesCheck(address(0), 0)\r\n    {\r\n        require(target != address(0), \"Target address must be non-zero\");\r\n        TargetAddress = target;\r\n        emit StartChangeOwner(target);\r\n        _confirmTransferOwnership(target);\r\n    }\r\n\r\n    /// @return true if there are enough votes to complete the transaction\r\n    function IsFinalSig() internal view returns (bool) {\r\n        return sigCounter == MinSigners;\r\n    }\r\n\r\n    function _newSignature() internal NotVoted {\r\n        VotesMap[sigCounter++] = msg.sender;\r\n        emit NewSig(msg.sender, sigCounter, MinSigners);\r\n    }\r\n\r\n    function _mint(address target, uint256 amount) internal {\r\n        IERC20(TokenAddress).mint(target, amount);\r\n        emit CompleteMint(target, amount);\r\n    }\r\n\r\n    /// @dev cancel the minting request\r\n    function ClearConfirmation() public OnlyAuthorized {\r\n        Amount = 0;\r\n        TargetAddress = address(0);\r\n        sigCounter = 0;\r\n        emit Clear();\r\n    }\r\n\r\n    function _confirmMint(address target, uint256 amount) internal {\r\n        _newSignature();\r\n        if (IsFinalSig()) {\r\n            _mint(target, amount);\r\n            ClearConfirmation();\r\n        }\r\n    }\r\n\r\n    function _confirmTransferOwnership(address target) internal {\r\n        _newSignature();\r\n        if (IsFinalSig()) {\r\n            IERC20(TokenAddress).addMinter(target);\r\n            IERC20(TokenAddress).renounceMinter();\r\n            emit CompleteChangeOwner(target);\r\n            ClearConfirmation();\r\n        }\r\n    }\r\n}\r\n\r\n/// @title contains confirmation requests.\r\ncontract MultiSigConfirmer is MultiSigInitiator {\r\n    /// @dev only authorized address can change himself\r\n    function ChangeAuthorizedAddress(address authorize)\r\n        external\r\n        OnlyAuthorized\r\n    {\r\n        require(\r\n            !AuthorizedMap[authorize],\r\n            \"AuthorizedMap must have unique addresses\"\r\n        );\r\n        require(authorize != address(0), \"Authorize address must be non-zero\");\r\n        emit AuthorizedChanged(authorize, msg.sender);\r\n        AuthorizedMap[msg.sender] = false;\r\n        AuthorizedMap[authorize] = true;\r\n    }\r\n\r\n    /// @dev collects votes to confirm mint tokens\r\n    /// if there are enough votes, coins will be minted\r\n    function ConfirmMint(address target, uint256 amount)\r\n        external\r\n        OnlyAuthorized\r\n        ValuesCheck(target, amount)\r\n    {\r\n        _confirmMint(target, amount);\r\n    }\r\n\r\n    /// @dev transfers the right to mint tokens\r\n    function ConfirmTransferOwnership(address target)\r\n        external\r\n        OnlyAuthorized\r\n        ValuesCheck(target, 0)\r\n    {\r\n        _confirmTransferOwnership(target);\r\n    }\r\n}\r\n\r\n/// @author The-Poolz contract team\r\n/// @title Smart contract of using multi signature for approval sending transactions.\r\ncontract MultiSig is MultiSigConfirmer {\r\n    /// @param Authorized who can votes and initiate mint transaction\r\n    /// @param Token mintable token address\r\n    /// @param MinSignersAmount minimum amount of votes for a successful mint transaction\r\n    constructor(\r\n        address[] memory Authorized,\r\n        address Token,\r\n        uint256 MinSignersAmount\r\n    ) {\r\n        require(Authorized.length >= MinSignersAmount, \"Authorized array length must be equal or greater than MinSignersAmount\");\r\n        require(Token != address(0), \"Token address must be non-zero\");\r\n        require(MinSignersAmount > 1, \"Minimum signers must be greater than 1\");\r\n        for (uint256 index = 0; index < Authorized.length; index++) {\r\n            require(Authorized[index] != address(0), \"Invalid Authorized address\");\r\n            AuthorizedMap[Authorized[index]] = true;\r\n        }\r\n        TokenAddress = Token;\r\n        MinSigners = MinSignersAmount;\r\n        emit Setup(Authorized, Token, MinSignersAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Authorized\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"MinSignersAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuthorize\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldAuthorize\",\"type\":\"address\"}],\"name\":\"AuthorizedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Clear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CompleteChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompleteMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CurrentSigns\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NeededSigns\",\"type\":\"uint256\"}],\"name\":\"NewSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"Authorized\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MinSignersAmount\",\"type\":\"uint256\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"StartChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorize\",\"type\":\"address\"}],\"name\":\"ChangeAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClearConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConfirmMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ConfirmTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitiateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"InitiateTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VotesMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiSig", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000069a95185ee2a045cdc4bcd1b1df10710395e4e230000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000078b780c9f8f0b3c1871d3d329ba6ee4a8a5509650000000000000000000000008fbcc3953aedcf7fe7085074ef66a177f4702ada000000000000000000000000ef58c75d7304b48dcb683a3cecf682b23f73e990000000000000000000000000f73bd1d40c95346725846dc895ac1d8b4c4689eb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c471d39fdfa6d81b9d289b2d3bd7b21d268c340a3c772d64343df9b64ca017c3"}]}