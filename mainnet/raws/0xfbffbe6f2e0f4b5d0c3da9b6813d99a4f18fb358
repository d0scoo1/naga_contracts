{"status": "1", "message": "OK", "result": [{"SourceCode": "// Pledge Mint contract by Culture Cubs\r\n// pledgemint.io\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC721Pledge {\r\n    function pledgeMint(address to, uint8 quantity)\r\n        external\r\n        payable;\r\n}\r\n\r\ncontract PledgeMint is Ownable, ReentrancyGuard {\r\n    // Phases allow to have different cohorts of pledgers, with different contracts, prices and limits.\r\n    struct PhaseConfig {\r\n        address admin;\r\n        IERC721Pledge mintContract;\r\n        uint256 mintPrice;\r\n        uint8 maxPerWallet;\r\n        // When locked, the contract on which the mint happens cannot ever be changed again\r\n        bool mintContractLocked;\r\n        // Can only be set to true if mint contract is locked, which is irreversible.\r\n        // Owner of the contract can still trigger refunds - but not access anyone's funds.\r\n        bool pledgesLocked;\r\n    }\r\n\r\n\r\n    mapping(uint16 => address[]) public pledgers;\r\n    mapping(uint16 => mapping(address => bool)) public allowlists;\r\n    mapping(uint16 => mapping(address => uint8)) public pledges;\r\n\r\n    PhaseConfig[] public phases;\r\n\r\n    modifier callerIsUser() {\r\n        require(tx.origin == msg.sender, \"The caller is another contract\");\r\n        _; \r\n    }\r\n\r\n    modifier onlyAdminOrOwner(uint16 phaseId) {\r\n        require(owner() == _msgSender() || phases[phaseId].admin == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function addPhase(address admin, IERC721Pledge mintContract, uint256 mintPrice, uint8 maxPerWallet) external onlyOwner {\r\n        phases.push(PhaseConfig(admin, mintContract, mintPrice, maxPerWallet, false, false));\r\n    }\r\n\r\n    function allowAddresses(uint16 phaseId, address[] calldata allowlist_) external onlyAdminOrOwner(phaseId) {\r\n        mapping(address => bool) storage _allowlist = allowlists[phaseId];\r\n        for (uint i=0; i < allowlist_.length; i++) {\r\n            _allowlist[allowlist_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function pledge(uint16 phaseId, uint8 number) external payable callerIsUser {\r\n        PhaseConfig memory phase = phases[phaseId];\r\n        require(number <= phase.maxPerWallet, \"Cannot buy that many NFTs\");\r\n        require(number > 0, \"Need to buy at least one\");\r\n        require(msg.value == phase.mintPrice * number, \"Amount mismatch\");\r\n        require(pledges[phaseId][msg.sender] == 0, \"Already pledged\");\r\n        pledgers[phaseId].push(msg.sender);\r\n        pledges[phaseId][msg.sender] = number;\r\n    }\r\n\r\n    function unpledge(uint16 phaseId) external nonReentrant callerIsUser {\r\n        require(phases[phaseId].pledgesLocked == false, \"Pledges are locked for this phase\");\r\n\r\n        uint nbPledged = pledges[phaseId][msg.sender];\r\n        require(nbPledged > 0, \"Nothing pledged\");\r\n        pledges[phaseId][msg.sender] = 0;\r\n\r\n        (bool success, ) = msg.sender.call{value: phases[phaseId].mintPrice * nbPledged}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function lockPhase(uint16 phaseId) external onlyAdminOrOwner(phaseId) {\r\n        require(phases[phaseId].mintContractLocked == true, \"Cannot lock pledges without locking the mint contract\");\r\n        phases[phaseId].pledgesLocked = true;\r\n    }\r\n\r\n    function unlockPhase(uint16 phaseId) external onlyAdminOrOwner(phaseId) {\r\n        phases[phaseId].pledgesLocked = false;\r\n    }\r\n\r\n    // mint for all participants\r\n    function mintPhase(uint16 phaseId) external onlyAdminOrOwner(phaseId) {\r\n        address[] memory _addresses = pledgers[phaseId];\r\n        _mintPhase(phaseId, _addresses, 0, _addresses.length);\r\n    }\r\n\r\n    // mint for all participants, paginated\r\n    function mintPhase(uint16 phaseId, uint startIdx, uint length) external onlyAdminOrOwner(phaseId) {\r\n        address[] memory _addresses = pledgers[phaseId];\r\n        _mintPhase(phaseId, _addresses, startIdx, length);\r\n    }\r\n\r\n    // mint for select participants\r\n    // internal function checks eligibility and pledged number.\r\n    function mintPhase(uint16 phaseId, address[] calldata selectPledgers) external onlyAdminOrOwner(phaseId) {\r\n        _mintPhase(phaseId, selectPledgers, 0, selectPledgers.length);\r\n    }\r\n\r\n    function _mintPhase(uint16 phaseId, address[] memory addresses, uint startIdx, uint count) internal {\r\n        PhaseConfig memory _phase = phases[phaseId];\r\n        require(_phase.mintContractLocked == true, \"Cannot launch the mint without locking the contract\");\r\n        mapping(address => uint8) storage _pledges = pledges[phaseId];\r\n        mapping(address => bool) storage _allowlist = allowlists[phaseId];\r\n        for (uint i = startIdx; i < count; i++) {\r\n            address addy = addresses[i];\r\n            uint8 quantity = _pledges[addy];\r\n\r\n            // Any address not allowed will have to withdraw their pledge manually. We skip them here.\r\n            if (_allowlist[addy] && quantity > 0) {\r\n                _pledges[addy] = 0;\r\n                _phase.mintContract.pledgeMint{ value: _phase.mintPrice * quantity }(addy, quantity);\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundPhase(uint16 phaseId) external onlyAdminOrOwner(phaseId) nonReentrant {\r\n        _refundPhase(phaseId);\r\n    }\r\n\r\n    function refundAll() external onlyOwner nonReentrant {\r\n        for (uint8 i=0; i < phases.length; i++) {\r\n            _refundPhase(i);\r\n        }\r\n    }\r\n\r\n    function refundPhasePledger(uint16 phaseId, address pledger) external onlyAdminOrOwner(phaseId) nonReentrant {\r\n        uint amount = pledges[phaseId][pledger] * phases[phaseId].mintPrice;\r\n        pledges[phaseId][pledger] = 0;\r\n        (bool success, ) = pledger.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function _refundPhase(uint16 phaseId) internal {\r\n        PhaseConfig memory _phase = phases[phaseId];\r\n        address[] storage _addresses = pledgers[phaseId];\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            address addy = _addresses[i];\r\n            uint8 quantity = pledges[phaseId][addy];\r\n            pledges[phaseId][addy] = 0;\r\n            (bool success, ) = addy.call{value: _phase.mintPrice * quantity}(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n    }\r\n\r\n    function emergencyRefund(uint16 phaseId, uint startIdx, uint count) external onlyOwner {\r\n        PhaseConfig memory _phase = phases[phaseId];\r\n        for (uint i = startIdx; i < count; i++) {\r\n            address addy = pledgers[phaseId][i];\r\n            uint8 quantity = pledges[phaseId][addy];\r\n\r\n            (bool success, ) = addy.call{value: _phase.mintPrice * quantity}(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n    }\r\n\r\n    function setMintContract(uint16 phaseId, IERC721Pledge mintContract_) external onlyOwner {\r\n        require(phases[phaseId].mintContractLocked != true, \"Cannot change the contract anymore\");\r\n        phases[phaseId].mintContract = mintContract_;\r\n    }\r\n\r\n    // there is no unlock function. Once this is locked, funds pledged can only be used to mint on this contract, or refunded.\r\n    function lockMintContract(uint16 phaseId) external onlyOwner {\r\n        phases[phaseId].mintContractLocked = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Pledge\",\"name\":\"mintContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPerWallet\",\"type\":\"uint8\"}],\"name\":\"addPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"allowlist_\",\"type\":\"address[]\"}],\"name\":\"allowAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"emergencyRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"lockMintContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"lockPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"mintPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"selectPledgers\",\"type\":\"address[]\"}],\"name\":\"mintPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"mintPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Pledge\",\"name\":\"mintContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"mintContractLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pledgesLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledges\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"refundPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"}],\"name\":\"refundPhasePledger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC721Pledge\",\"name\":\"mintContract_\",\"type\":\"address\"}],\"name\":\"setMintContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"unlockPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"unpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PledgeMint", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75939a879c8f10f073c449ac63ba2ce0205330840b9c3185ddc8bb3c79540c7f"}]}