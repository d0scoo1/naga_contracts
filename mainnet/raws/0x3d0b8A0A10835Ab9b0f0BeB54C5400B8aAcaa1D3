{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/managers/SherlockProtocolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './Manager.sol';\\nimport '../interfaces/managers/ISherlockProtocolManager.sol';\\n\\n/// @title Sherlock core interface for protocols\\n/// @author Evert Kors\\n// This is the contract that manages covered protocols\\n\\ncontract SherlockProtocolManager is ISherlockProtocolManager, Manager {\\n  using SafeERC20 for IERC20;\\n\\n  // Represents the token that protocols pay with (currently USDC)\\n  IERC20 public immutable token;\\n\\n  // This is the ceiling value that can be set for the threshold (based on USDC balance) at which a protocol can get removed\\n  uint256 public constant MIN_BALANCE_SANITY_CEILING = 30_000 * 10**6; // 30k usdc\\n\\n  // A removed protocol is still able to make a claim for this amount of time after its removal\\n  uint256 public constant PROTOCOL_CLAIM_DEADLINE = 7 days;\\n\\n  // This is the amount that cannot be withdrawn (measured in seconds of payment) if a protocol wants to remove active balance\\n  uint256 public constant MIN_SECONDS_LEFT = 7 days;\\n\\n  // Convenient for percentage calculations\\n  uint256 internal constant HUNDRED_PERCENT = 10**18;\\n\\n  // The minimum active \\\"seconds of coverage left\\\" a protocol must have before arbitragers can remove the protocol from coverage\\n  // This value is calculated from a protocol's active balance divided by the premium per second the protocol is paying\\n  uint256 public constant MIN_SECONDS_OF_COVERAGE = 12 hours;\\n\\n  // This is an address that is controlled by a covered protocol (maybe its a multisig used by that protocol, etc.)\\n  mapping(bytes32 => address) internal protocolAgent_;\\n\\n  // The percentage of premiums that is NOT sent to stakers (set aside for security experts, reinsurance partners, etc.)\\n  mapping(bytes32 => uint256) internal nonStakersPercentage;\\n\\n  // The premium per second paid by each protocol is stored in this mapping\\n  mapping(bytes32 => uint256) internal premiums_;\\n\\n  // Each protocol should keep an active balance (in USDC) which is drawn against to pay stakers, nonstakers, etc.\\n  // This \\\"active balance\\\" is really just an accounting concept, doesn't mean tokens have been transferred or not\\n  mapping(bytes32 => uint256) internal activeBalances;\\n\\n  // The timestamp at which Sherlock last ran this internal accounting (on the active balance) for each protocol\\n  mapping(bytes32 => uint256) internal lastAccountedEachProtocol;\\n\\n  // The amount that can be claimed by nonstakers for each protocol\\n  // We need this value so we can track how much payment is coming from each protocol\\n  mapping(bytes32 => uint256) internal nonStakersClaimableByProtocol;\\n\\n  // The last time where the global accounting was run (to calc allPremiumsPerSecToStakers below)\\n  uint256 internal lastAccountedGlobal;\\n\\n  // This is the total amount of premiums paid (per second) by all the covered protocols (added up)\\n  uint256 internal allPremiumsPerSecToStakers;\\n\\n  // This is the amount that was claimable by stakers the last time the accounting was run\\n  // The claimable amount presumably changes every second so this value is marked \\\"last\\\" because it is usually out-of-date\\n  uint256 internal lastClaimablePremiumsForStakers;\\n\\n  // The minimum active balance (measured in USDC) a protocol must keep before arbitragers can remove the protocol from coverage\\n  // This is one of two criteria a protocol must meet in order to avoid removal (the other is MIN_SECONDS_OF_COVERAGE)\\n  uint256 public override minActiveBalance;\\n\\n  // Removed protocols can still make a claim up until this timestamp (will be 10 days or something)\\n  mapping(bytes32 => uint256) internal removedProtocolClaimDeadline;\\n\\n  // Mapping to store the protocolAgents for removed protocols (useful for claims made by a removed protocol)\\n  mapping(bytes32 => address) internal removedProtocolAgent;\\n\\n  // Current amount of coverage (i.e. 20M USDC) for a protocol\\n  mapping(bytes32 => uint256) internal currentCoverage;\\n\\n  // Previous amount of coverage for a protocol\\n  // Previous is also tracked in case a protocol lowers their coverage amount but still needs to make a claim on the old, higher amount\\n  mapping(bytes32 => uint256) internal previousCoverage;\\n\\n  // Setting the token to USDC\\n  constructor(IERC20 _token) {\\n    if (address(_token) == address(0)) revert ZeroArgument();\\n    token = _token;\\n  }\\n\\n  // Modifier used to ensure a protocol exists (has been instantiated and not removed)\\n  modifier protocolExists(bytes32 _protocol) {\\n    _verifyProtocolExists(_protocol);\\n    _;\\n  }\\n\\n  /// @notice View current protocolAgent of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @return Address able to submit claims\\n  function protocolAgent(bytes32 _protocol) external view override returns (address) {\\n    address agent = protocolAgent_[_protocol];\\n    if (agent != address(0)) return agent;\\n\\n    // If a protocol has been removed but is still within the claim deadline, the protocolAgent is returned\\n    // Note: Old protocol agent will never be address(0)\\n    if (block.timestamp <= removedProtocolClaimDeadline[_protocol]) {\\n      return removedProtocolAgent[_protocol];\\n    }\\n\\n    // If a protocol was never instantiated or was removed and the claim deadline has passed, this error is returned\\n    revert ProtocolNotExists(_protocol);\\n  }\\n\\n  // Checks if the protocol exists, then returns the current premium per second being charged\\n  /// @notice View current premium of protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of premium `_protocol` pays per second\\n  function premium(bytes32 _protocol)\\n    external\\n    view\\n    override\\n    protocolExists(_protocol)\\n    returns (uint256)\\n  {\\n    return premiums_[_protocol];\\n  }\\n\\n  // Checks to see if a protocol has a protocolAgent assigned to it (we use this to check if a protocol exists)\\n  // If a protocol has been removed, it will throw an error here no matter what (even if still within claim window)\\n  function _verifyProtocolExists(bytes32 _protocol) internal view returns (address _protocolAgent) {\\n    _protocolAgent = protocolAgent_[_protocol];\\n    if (_protocolAgent == address(0)) revert ProtocolNotExists(_protocol);\\n  }\\n\\n  //\\n  // View methods\\n  //\\n\\n  // Calcs the debt accrued by the protocol since it last had an accounting update\\n  // This is the amount that needs to be removed from a protocol's active balance\\n  function _calcIncrementalProtocolDebt(bytes32 _protocol) internal view returns (uint256) {\\n    return (block.timestamp - lastAccountedEachProtocol[_protocol]) * premiums_[_protocol];\\n  }\\n\\n  /// @notice View the amount nonstakers can claim from this protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of tokens claimable by nonstakers\\n  /// @dev this reads from a storage variable + (now-lastsettled) * premiums\\n  // Note: This function works even for removed protocols because of nonStakersClaimableByProtocol[_protocol]\\n  // When a protocol gets removed, nonStakersClaimableByProtocol[_protocol] is updated and then doesn't change since the protocol has been removed\\n  function nonStakersClaimable(bytes32 _protocol) external view override returns (uint256) {\\n    // Calcs the debt of a protocol since the last accounting update\\n    uint256 debt = _calcIncrementalProtocolDebt(_protocol);\\n    // Gets the active balance of the protocol\\n    uint256 balance = activeBalances[_protocol];\\n    // The debt should never be higher than the balance (only happens if the arbitrages fail)\\n    if (debt > balance) debt = balance;\\n\\n    // Adds the incremental claimable amount owed to nonstakers to the total claimable amount\\n    return\\n      nonStakersClaimableByProtocol[_protocol] +\\n      (nonStakersPercentage[_protocol] * debt) /\\n      HUNDRED_PERCENT;\\n  }\\n\\n  /// @notice View current amount of all premiums that are owed to stakers\\n  /// @return Premiums claimable\\n  /// @dev Will increase every block\\n  /// @dev base + (now - last_settled) * ps\\n  function claimablePremiums() public view override returns (uint256) {\\n    // Takes last balance and adds (number of seconds since last accounting update * total premiums per second)\\n    return\\n      lastClaimablePremiumsForStakers +\\n      (block.timestamp - lastAccountedGlobal) *\\n      allPremiumsPerSecToStakers;\\n  }\\n\\n  /// @notice View seconds of coverage left for `_protocol` before it runs out of active balance\\n  /// @param _protocol Protocol identifier\\n  /// @return Seconds of coverage left\\n  function secondsOfCoverageLeft(bytes32 _protocol)\\n    external\\n    view\\n    override\\n    protocolExists(_protocol)\\n    returns (uint256)\\n  {\\n    return _secondsOfCoverageLeft(_protocol);\\n  }\\n\\n  // Helper function to return seconds of coverage left for a protocol\\n  // Gets the current active balance of the protocol and divides by the premium per second for the protocol\\n  function _secondsOfCoverageLeft(bytes32 _protocol) internal view returns (uint256) {\\n    uint256 premium = premiums_[_protocol];\\n    if (premium == 0) return 0;\\n    return _activeBalance(_protocol) / premium;\\n  }\\n\\n  /// @notice View current active balance of covered protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Active balance\\n  /// @dev Accrued debt is subtracted from the stored active balance\\n  function activeBalance(bytes32 _protocol)\\n    external\\n    view\\n    override\\n    protocolExists(_protocol)\\n    returns (uint256)\\n  {\\n    return _activeBalance(_protocol);\\n  }\\n\\n  // Helper function to calc the active balance of a protocol at current time\\n  function _activeBalance(bytes32 _protocol) internal view returns (uint256) {\\n    uint256 debt = _calcIncrementalProtocolDebt(_protocol);\\n    uint256 balance = activeBalances[_protocol];\\n    // The debt should never be higher than the balance (only happens if the arbitrages fail)\\n    if (debt > balance) return 0;\\n    return balance - debt;\\n  }\\n\\n  //\\n  // State methods\\n  //\\n\\n  /// @notice Helps set the premium per second for an individual protocol\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium New premium per second\\n  /// @return oldPremiumPerSecond and nonStakerPercentage are returned for gas savings in the calling function\\n  function _setSingleProtocolPremium(bytes32 _protocol, uint256 _premium)\\n    internal\\n    returns (uint256 oldPremiumPerSecond, uint256 nonStakerPercentage)\\n  {\\n    // _settleProtocolDebt() subtracts debt from the protocol's active balance and updates the % due to nonstakers\\n    // Also updates the last accounted timestamp for this protocol\\n    // nonStakerPercentage is carried over from _settleProtocolDebt() for gas savings\\n    // nonStakerPercentage represents the percentage that goes to nonstakers for this protocol\\n    nonStakerPercentage = _settleProtocolDebt(_protocol);\\n    // Stores the old premium before it gets updated\\n    oldPremiumPerSecond = premiums_[_protocol];\\n\\n    if (oldPremiumPerSecond != _premium) {\\n      // Sets the protocol's premium per second to the new value\\n      premiums_[_protocol] = _premium;\\n      emit ProtocolPremiumChanged(_protocol, oldPremiumPerSecond, _premium);\\n    }\\n    // We check if the NEW premium causes the _secondsOfCoverageLeft for the protocol to be less than the threshold for arbing\\n    // We don't need to check the min balance requirement for arbs because that value doesn't change like secondsOfCoverageLeft changes\\n    // Effectively we just need to make sure we don't accidentally run a protocol's active balance down below the point\\n    // Where arbs would no longer be incentivized to remove the protocol\\n    // Because if a protocol is not removed by arbs before running out of active balance, this can cause problems\\n    if (_premium != 0 && _secondsOfCoverageLeft(_protocol) < MIN_SECONDS_OF_COVERAGE) {\\n      revert InsufficientBalance(_protocol);\\n    }\\n  }\\n\\n  /// @notice Sets a single protocol's premium per second and also updates the global total of premiums per second\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium New premium per second\\n  function _setSingleAndGlobalProtocolPremium(bytes32 _protocol, uint256 _premium) internal {\\n    // Sets the individual protocol's premium and returns oldPremiumPerSecond and nonStakerPercentage for gas savings\\n    (uint256 oldPremiumPerSecond, uint256 nonStakerPercentage) = _setSingleProtocolPremium(\\n      _protocol,\\n      _premium\\n    );\\n    // Settling the total amount of premiums owed to stakers before a new premium per second gets set\\n    _settleTotalDebt();\\n    // This calculates the new global premium per second that gets paid to stakers\\n    // We input the same nonStakerPercentage twice because we simply aren't updating that value in this function\\n    allPremiumsPerSecToStakers = _calcGlobalPremiumPerSecForStakers(\\n      oldPremiumPerSecond,\\n      _premium,\\n      nonStakerPercentage,\\n      nonStakerPercentage,\\n      allPremiumsPerSecToStakers\\n    );\\n  }\\n\\n  // Internal function to set a new protocolAgent for a specific protocol\\n  // _oldAgent is only included as part of emitting an event\\n  function _setProtocolAgent(\\n    bytes32 _protocol,\\n    address _oldAgent,\\n    address _protocolAgent\\n  ) internal {\\n    protocolAgent_[_protocol] = _protocolAgent;\\n    emit ProtocolAgentTransfer(_protocol, _oldAgent, _protocolAgent);\\n  }\\n\\n  // Subtracts the accrued debt from a protocol's active balance\\n  // Credits the amount that can be claimed by nonstakers for this protocol\\n  // Takes the protocol ID as a param and returns the nonStakerPercentage for gas savings\\n  // Most of this function is dealing with an edge case related to a protocol not being removed by arbs\\n  function _settleProtocolDebt(bytes32 _protocol) internal returns (uint256 _nonStakerPercentage) {\\n    // This calcs the accrued debt of the protocol since it was last updated\\n    uint256 debt = _calcIncrementalProtocolDebt(_protocol);\\n    // This pulls the percentage that is sent to nonstakers\\n    _nonStakerPercentage = nonStakersPercentage[_protocol];\\n    // In case the protocol has accrued debt, this code block will ensure the debt is settled properly\\n    if (debt != 0) {\\n      // Pulls the stored active balance of the protocol\\n      uint256 balance = activeBalances[_protocol];\\n      // This is the start of handling an edge case where arbitragers don't remove this protocol before debt becomes greater than active balance\\n      // Economically speaking, this point should never be reached as arbs will get rewarded for removing the protocol before this point\\n      // The arb would use forceRemoveByActiveBalance and forceRemoveBySecondsOfCoverage\\n      // However, if arbs don't come in, the premium for this protocol should be set to 0 asap otherwise accounting for stakers/nonstakers gets messed up\\n      if (debt > balance) {\\n        // This error amount represents the magnitude of the mistake\\n        uint256 error = debt - balance;\\n        // Gets the latest value of claimable premiums for stakers\\n        _settleTotalDebt();\\n        // @note to production, set premium first to zero before solving accounting issue.\\n        // otherwise the accounting error keeps increasing\\n        uint256 lastClaimablePremiumsForStakers_ = lastClaimablePremiumsForStakers;\\n\\n        // Figures out the amount due to stakers by subtracting the nonstaker percentage from 100%\\n        uint256 claimablePremiumError = ((HUNDRED_PERCENT - _nonStakerPercentage) * error) /\\n          HUNDRED_PERCENT;\\n\\n        // This insufficient tokens var is simply how we know (emitted as an event) how many tokens the protocol is short\\n        uint256 insufficientTokens;\\n\\n        // The idea here is that lastClaimablePremiumsForStakers has gotten too big accidentally\\n        // We need to decrease the balance of lastClaimablePremiumsForStakers by the amount that was added in error\\n        // This first line can be true if claimPremiumsForStakers() has been called and\\n        // lastClaimablePremiumsForStakers would be 0 but a faulty protocol could cause claimablePremiumError to be >0 still\\n        if (claimablePremiumError > lastClaimablePremiumsForStakers_) {\\n          insufficientTokens = claimablePremiumError - lastClaimablePremiumsForStakers_;\\n          lastClaimablePremiumsForStakers = 0;\\n        } else {\\n          // If the error is not bigger than the claimable premiums, then we just decrease claimable premiums\\n          // By the amount that was added in error (error) and insufficientTokens = 0\\n          lastClaimablePremiumsForStakers =\\n            lastClaimablePremiumsForStakers_ -\\n            claimablePremiumError;\\n        }\\n\\n        // If two events are thrown, the values need to be summed up for the actual state.\\n        // This means an error of this type will continue until it is handled\\n        emit AccountingError(_protocol, claimablePremiumError, insufficientTokens);\\n        // We set the debt equal to the balance, and in the next line we effectively set the protocol's active balance to 0 in this case\\n        debt = balance;\\n      }\\n      // Subtracts the accrued debt (since last update) from the protocol's active balance and updates active balance\\n      activeBalances[_protocol] = balance - debt;\\n      // Adds the requisite amount of the debt to the balance claimable by nonstakers for this protocol\\n      nonStakersClaimableByProtocol[_protocol] += (_nonStakerPercentage * debt) / HUNDRED_PERCENT;\\n    }\\n    // Updates the last accounted timestamp for this protocol\\n    lastAccountedEachProtocol[_protocol] = block.timestamp;\\n  }\\n\\n  // Multiplies the total premium per second * number of seconds since the last global accounting update\\n  // And adds it to the total claimable amount for stakers\\n  function _settleTotalDebt() internal {\\n    lastClaimablePremiumsForStakers +=\\n      (block.timestamp - lastAccountedGlobal) *\\n      allPremiumsPerSecToStakers;\\n    lastAccountedGlobal = block.timestamp;\\n  }\\n\\n  // Calculates the global premium per second for stakers\\n  // Takes a specific protocol's old and new values for premium per second and nonstaker percentage and the old global premium per second to stakers\\n  // Subtracts out the old values of a protocol's premium per second and nonstaker percentage and adds the new ones\\n  function _calcGlobalPremiumPerSecForStakers(\\n    uint256 _premiumOld,\\n    uint256 _premiumNew,\\n    uint256 _nonStakerPercentageOld,\\n    uint256 _nonStakerPercentageNew,\\n    uint256 _inMemAllPremiumsPerSecToStakers\\n  ) internal pure returns (uint256) {\\n    return\\n      _inMemAllPremiumsPerSecToStakers +\\n      ((HUNDRED_PERCENT - _nonStakerPercentageNew) * _premiumNew) /\\n      HUNDRED_PERCENT -\\n      ((HUNDRED_PERCENT - _nonStakerPercentageOld) * _premiumOld) /\\n      HUNDRED_PERCENT;\\n  }\\n\\n  // Helper function to remove and clean up a protocol from Sherlock\\n  // Params are the protocol ID and the protocol agent to which funds should be sent and from which post-removal claims can be made\\n  function _forceRemoveProtocol(bytes32 _protocol, address _agent) internal {\\n    // Sets the individual protocol's premium to zero and updates the global premium variable for a zero premium at this protocol\\n    _setSingleAndGlobalProtocolPremium(_protocol, 0);\\n\\n    // Grabs the protocol's active balance\\n    uint256 balance = activeBalances[_protocol];\\n\\n    // If there's still some active balance, delete the entry and send the remaining balance to the protocol agent\\n    if (balance != 0) {\\n      delete activeBalances[_protocol];\\n      token.safeTransfer(_agent, balance);\\n\\n      emit ProtocolBalanceWithdrawn(_protocol, balance);\\n    }\\n\\n    // Sets the protocol agent to zero address (as part of clean up)\\n    _setProtocolAgent(_protocol, _agent, address(0));\\n\\n    // Cleans up other mappings for this protocol\\n    delete nonStakersPercentage[_protocol];\\n    delete lastAccountedEachProtocol[_protocol];\\n    // `premiums_` mapping is not deleted here as it's already 0 because of the `_setSingleAndGlobalProtocolPremium` call above\\n\\n    // Sets a deadline in the future until which this protocol agent can still make claims for this removed protocol\\n    removedProtocolClaimDeadline[_protocol] = block.timestamp + PROTOCOL_CLAIM_DEADLINE;\\n\\n    // This mapping allows Sherlock to verify the protocol agent making a claim after the protocol has been removed\\n    // Remember, only the protocol agent can make claims on behalf of the protocol, so this must be checked\\n    removedProtocolAgent[_protocol] = _agent;\\n\\n    emit ProtocolUpdated(_protocol, bytes32(0), uint256(0), uint256(0));\\n    emit ProtocolRemoved(_protocol);\\n  }\\n\\n  /// @notice Sets the minimum active balance before an arb can remove a protocol\\n  /// @param _minActiveBalance Minimum balance needed (in USDC)\\n  /// @dev Only gov\\n  /// @dev This call should be subject to a timelock\\n  function setMinActiveBalance(uint256 _minActiveBalance) external override onlyOwner {\\n    // New value cannot be the same as current value\\n    if (minActiveBalance == _minActiveBalance) revert InvalidArgument();\\n    // Can't set a value that is too high to be reasonable\\n    if (_minActiveBalance >= MIN_BALANCE_SANITY_CEILING) revert InvalidConditions();\\n\\n    emit MinBalance(minActiveBalance, _minActiveBalance);\\n    minActiveBalance = _minActiveBalance;\\n  }\\n\\n  // This function allows the nonstakers role to claim tokens owed to them by a specific protocol\\n  /// @notice Choose an `_amount` of tokens that nonstakers (`_receiver` address) will receive from `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens\\n  /// @param _receiver Address to receive tokens\\n  /// @dev Only callable by nonstakers role\\n  function nonStakersClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver\\n  ) external override whenNotPaused {\\n    if (_protocol == bytes32(0)) revert ZeroArgument();\\n    if (_amount == uint256(0)) revert ZeroArgument();\\n    if (_receiver == address(0)) revert ZeroArgument();\\n    // Only the nonstakers role (multisig or contract) can pull the funds\\n    if (msg.sender != sherlockCore.nonStakersAddress()) revert Unauthorized();\\n\\n    // Call can't be executed on protocol that is removed\\n    if (protocolAgent_[_protocol] != address(0)) {\\n      // Updates the amount that nonstakers can claim from this protocol\\n      _settleProtocolDebt(_protocol);\\n    }\\n\\n    // Sets balance to the amount that is claimable by nonstakers for this specific protocol\\n    uint256 balance = nonStakersClaimableByProtocol[_protocol];\\n    // If the amount requested is more than what's owed to nonstakers, revert\\n    if (_amount > balance) revert InsufficientBalance(_protocol);\\n\\n    // Sets the claimable amount to whatever is left over after this amount is pulled\\n    nonStakersClaimableByProtocol[_protocol] = balance - _amount;\\n    // Transfers the amount requested to the `_receiver` address\\n    token.safeTransfer(_receiver, _amount);\\n  }\\n\\n  // Transfers funds owed to stakers from this contract to the Sherlock core contract (where we handle paying out stakers)\\n  /// @notice Transfer current claimable premiums (for stakers) to core Sherlock address\\n  /// @dev Callable by everyone\\n  /// @dev Funds will be transferred to Sherlock core contract\\n  function claimPremiumsForStakers() external override whenNotPaused {\\n    // Gets address of core Sherlock contract\\n    address sherlock = address(sherlockCore);\\n    // Revert if core Sherlock contract not initialized yet\\n    if (sherlock == address(0)) revert InvalidConditions();\\n\\n    // claimablePremiums is different from _settleTotalDebt() because it does not change state\\n    // Retrieves current amount of all premiums that are owed to stakers\\n    uint256 amount = claimablePremiums();\\n\\n    // Transfers all the premiums owed to stakers to the Sherlock core contract\\n    if (amount != 0) {\\n      // Global value of premiums owed to stakers is set to zero since we are transferring the entire amount out\\n      lastClaimablePremiumsForStakers = 0;\\n      lastAccountedGlobal = block.timestamp;\\n      token.safeTransfer(sherlock, amount);\\n    }\\n  }\\n\\n  // Function is used in the SherlockClaimManager contract to decide if a proposed claim falls under either the current or previous coverage amounts\\n  /// @param _protocol Protocol identifier\\n  /// @return current and previous are the current and previous coverage amounts for this protocol\\n  // Note For this process to work, a protocol's coverage amount should not be set more than once in the span of claim delay period (7 days or something)\\n  function coverageAmounts(bytes32 _protocol)\\n    external\\n    view\\n    override\\n    returns (uint256 current, uint256 previous)\\n  {\\n    // Checks to see if the protocol has an active protocolAgent (protocol not removed)\\n    // OR checks to see if the removed protocol is still within the claim window\\n    // If so, gives the current and previous coverage, otherwise throws an error\\n    if (\\n      protocolAgent_[_protocol] != address(0) ||\\n      block.timestamp <= removedProtocolClaimDeadline[_protocol]\\n    ) {\\n      return (currentCoverage[_protocol], previousCoverage[_protocol]);\\n    }\\n\\n    revert ProtocolNotExists(_protocol);\\n  }\\n\\n  /// @notice Add a new protocol to Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Address able to submit a claim on behalf of the protocol\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Adding a protocol allows the `_protocolAgent` to submit a claim\\n  /// @dev Coverage is not started yet as the protocol doesn't pay a premium at this point\\n  /// @dev `_nonStakers` is scaled by 10**18\\n  /// @dev Only callable by governance\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _protocolAgent,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external override onlyOwner {\\n    if (_protocol == bytes32(0)) revert ZeroArgument();\\n    if (_protocolAgent == address(0)) revert ZeroArgument();\\n    // Checks to make sure the protocol doesn't exist already\\n    if (protocolAgent_[_protocol] != address(0)) revert InvalidConditions();\\n\\n    // Updates the protocol agent and passes in the old agent which is 0 address in this case\\n    _setProtocolAgent(_protocol, address(0), _protocolAgent);\\n\\n    // Delete mappings that are potentially non default values\\n    // From previous time protocol was added/removed\\n    delete removedProtocolClaimDeadline[_protocol];\\n    delete removedProtocolAgent[_protocol];\\n    delete currentCoverage[_protocol];\\n    delete previousCoverage[_protocol];\\n\\n    emit ProtocolAdded(_protocol);\\n\\n    // Most of the logic for actually adding a protocol in this function\\n    protocolUpdate(_protocol, _coverage, _nonStakers, _coverageAmount);\\n  }\\n\\n  /// @notice Update info regarding a protocol\\n  /// @param _protocol Protocol identifier\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Only callable by governance\\n  /// @dev `_nonStakers` can be 0\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) public override onlyOwner {\\n    if (_coverage == bytes32(0)) revert ZeroArgument();\\n    if (_nonStakers > HUNDRED_PERCENT) revert InvalidArgument();\\n    if (_coverageAmount == uint256(0)) revert ZeroArgument();\\n\\n    // Checks to make sure the protocol has been assigned a protocol agent\\n    _verifyProtocolExists(_protocol);\\n\\n    // Subtracts the accrued debt from a protocol's active balance (if any)\\n    // Updates the amount that can be claimed by nonstakers\\n    _settleProtocolDebt(_protocol);\\n\\n    // Updates the global claimable amount for stakers\\n    _settleTotalDebt();\\n\\n    // Gets the premium per second for this protocol\\n    uint256 premium = premiums_[_protocol];\\n\\n    // Updates allPremiumsPerSecToStakers (premium is not able to be updated in this function, but percentage to nonstakers can be)\\n    allPremiumsPerSecToStakers = _calcGlobalPremiumPerSecForStakers(\\n      premium,\\n      premium,\\n      nonStakersPercentage[_protocol],\\n      _nonStakers,\\n      allPremiumsPerSecToStakers\\n    );\\n\\n    // Updates the stored value of percentage of premiums that go to nonstakers\\n    nonStakersPercentage[_protocol] = _nonStakers;\\n\\n    // Updates previous coverage and current coverage amounts\\n    previousCoverage[_protocol] = currentCoverage[_protocol];\\n    currentCoverage[_protocol] = _coverageAmount;\\n\\n    emit ProtocolUpdated(_protocol, _coverage, _nonStakers, _coverageAmount);\\n  }\\n\\n  /// @notice Remove a protocol from coverage\\n  /// @param _protocol Protocol identifier\\n  /// @dev Before removing a protocol the premium must be 0\\n  /// @dev Removing a protocol basically stops the `_protocolAgent` from being active (can still submit claims until claim deadline though)\\n  /// @dev Pays off debt + sends remaining balance to protocol agent\\n  /// @dev This call should be subject to a timelock\\n  /// @dev Only callable by governance\\n  function protocolRemove(bytes32 _protocol) external override onlyOwner {\\n    // checks to make sure the protocol actually has a protocol agent\\n    address agent = _verifyProtocolExists(_protocol);\\n\\n    // Removes a protocol from Sherlock and cleans up its data\\n    // Params are the protocol ID and the protocol agent to which remaining active balance should be sent and from which post-removal claims can be made\\n    _forceRemoveProtocol(_protocol, agent);\\n  }\\n\\n  /// @notice Remove a protocol with insufficient active balance\\n  /// @param _protocol Protocol identifier\\n  // msg.sender receives whatever is left of the insufficient active balance, this should incentivize arbs to call this function\\n  /// @dev This call should be subject to a timelock\\n  function forceRemoveByActiveBalance(bytes32 _protocol) external override whenNotPaused {\\n    address agent = _verifyProtocolExists(_protocol);\\n\\n    // Gets the latest value of the active balance at this protocol\\n    _settleProtocolDebt(_protocol);\\n    // Sets latest value of active balance to remainingBalance variable\\n    uint256 remainingBalance = activeBalances[_protocol];\\n\\n    // This means the protocol still has adequate active balance and thus cannot be removed\\n    if (remainingBalance >= minActiveBalance) revert InvalidConditions();\\n\\n    // Sets the protocol's active balance to 0\\n    delete activeBalances[_protocol];\\n    // Removes the protocol from coverage\\n    _forceRemoveProtocol(_protocol, agent);\\n\\n    if (remainingBalance != 0) {\\n      // sends the remaining balance to msg.sender\\n      token.safeTransfer(msg.sender, remainingBalance);\\n    }\\n    emit ProtocolRemovedByArb(_protocol, msg.sender, remainingBalance);\\n  }\\n\\n  /// @notice Calculate if arb is possible and what the reward would be\\n  /// @param _protocol Protocol identifier\\n  /// @return arbAmount Amount reward for arbing\\n  /// @return able Indicator if arb call is even possible\\n  /// @dev Doesn't subtract the current protocol debt from the active balance\\n  function _calcForceRemoveBySecondsOfCoverage(bytes32 _protocol)\\n    internal\\n    view\\n    returns (uint256 arbAmount, bool able)\\n  {\\n    uint256 secondsLeft = _secondsOfCoverageLeft(_protocol);\\n\\n    // If arb is not possible return false\\n    if (secondsLeft >= MIN_SECONDS_OF_COVERAGE) return (0, false);\\n\\n    // This percentage scales over time\\n    // Reaches 100% on 0 seconds of coverage left\\n    uint256 percentageScaled = HUNDRED_PERCENT -\\n      (secondsLeft * HUNDRED_PERCENT) /\\n      MIN_SECONDS_OF_COVERAGE;\\n\\n    able = true;\\n    arbAmount = (activeBalances[_protocol] * percentageScaled) / HUNDRED_PERCENT;\\n  }\\n\\n  /// @notice Removes a protocol with insufficent seconds of coverage left\\n  /// @param _protocol Protocol identifier\\n  // Seconds of coverage is defined by the active balance of the protocol divided by the protocol's premium per second\\n  function forceRemoveBySecondsOfCoverage(bytes32 _protocol) external override whenNotPaused {\\n    // NOTE: We use _secondsOfCoverageLeft() below and include this check instead of secondsOfCoverageLeft() for gas savings\\n    address agent = _verifyProtocolExists(_protocol);\\n\\n    // NOTE: We don't give the arb the full remaining balance like we do in forceRemoveByActiveBalance()\\n    // This is because we know the exact balance the arb will get in forceRemoveByActiveBalance()\\n    // But when removing based on seconds of coverage left, the remainingBalance could still be quite large\\n    // So it's better to scale the arb reward over time. It's a little complex because the remainingBalance\\n    // Decreases over time also but reward will be highest at the midpoint of percentageScaled (50%)\\n    _settleProtocolDebt(_protocol);\\n    (uint256 arbAmount, bool able) = _calcForceRemoveBySecondsOfCoverage(_protocol);\\n    if (able == false) revert InvalidConditions();\\n\\n    if (arbAmount != 0) {\\n      // subtracts the amount that will be paid to the arb from the active balance\\n      activeBalances[_protocol] -= arbAmount;\\n    }\\n\\n    // Removes the protocol from coverage\\n    // This function also pays the active balance to the protocol agent, so it's good we do this after subtracting arb amount above\\n    _forceRemoveProtocol(_protocol, agent);\\n\\n    // Done after removing protocol to mitigate reentrency pattern\\n    // (In case token allows callback)\\n    if (arbAmount != 0) {\\n      token.safeTransfer(msg.sender, arbAmount);\\n    }\\n    emit ProtocolRemovedByArb(_protocol, msg.sender, arbAmount);\\n  }\\n\\n  /// @notice Set premium of `_protocol` to `_premium`\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium Amount of premium `_protocol` pays per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremium(bytes32 _protocol, uint256 _premium) external override onlyOwner {\\n    // Checks to see if protocol has a protocol agent\\n    _verifyProtocolExists(_protocol);\\n\\n    // Updates individual protocol's premium and allPremiumsPerSecToStakers\\n    _setSingleAndGlobalProtocolPremium(_protocol, _premium);\\n  }\\n\\n  /// @notice Set premium of multiple protocols\\n  /// @param _protocol Array of protocol identifiers\\n  /// @param _premium Array of premium amounts protocols pay per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremiums(bytes32[] calldata _protocol, uint256[] calldata _premium)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    // Checks to make sure there are an equal amount of entries in each array\\n    if (_protocol.length != _premium.length) revert UnequalArrayLength();\\n    if (_protocol.length == 0) revert InvalidArgument();\\n\\n    // Updates the global claimable amount for stakers\\n    _settleTotalDebt();\\n\\n    uint256 allPremiumsPerSecToStakers_ = allPremiumsPerSecToStakers;\\n\\n    // Loops through the array of protocols and checks to make sure each has a protocol agent assigned\\n    for (uint256 i; i < _protocol.length; i++) {\\n      _verifyProtocolExists(_protocol[i]);\\n\\n      // Sets the protocol premium for that specific protocol\\n      // Function returns the old premium and nonStakerPercentage for that specific protocol\\n      (uint256 oldPremiumPerSecond, uint256 nonStakerPercentage) = _setSingleProtocolPremium(\\n        _protocol[i],\\n        _premium[i]\\n      );\\n\\n      // Calculates the new global premium which adds up all premiums paid by all protocols\\n      allPremiumsPerSecToStakers_ = _calcGlobalPremiumPerSecForStakers(\\n        oldPremiumPerSecond,\\n        _premium[i],\\n        nonStakerPercentage,\\n        nonStakerPercentage,\\n        allPremiumsPerSecToStakers_\\n      );\\n    }\\n\\n    // After the loop has finished, sets allPremiumsPerSecToStakers to the final temp value\\n    allPremiumsPerSecToStakers = allPremiumsPerSecToStakers_;\\n  }\\n\\n  // This is how protocols pay for coverage by increasing their active balance\\n  /// @notice Deposits `_amount` of token to the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to deposit\\n  /// @dev Approval should be made before calling\\n  function depositToActiveBalance(bytes32 _protocol, uint256 _amount)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    if (_amount == uint256(0)) revert ZeroArgument();\\n    _verifyProtocolExists(_protocol);\\n\\n    // Transfers _amount to this contract\\n    token.safeTransferFrom(msg.sender, address(this), _amount);\\n    // Increases the active balance of the protocol by _amount\\n    activeBalances[_protocol] += _amount;\\n\\n    emit ProtocolBalanceDeposited(_protocol, _amount);\\n  }\\n\\n  // If a protocol has paid too much into the active balance (which is how a protocol pays the premium)\\n  // Then the protocol can remove some of the active balance (up until there is 7 days worth of balance left)\\n  /// @notice Withdraws `_amount` of token from the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to withdraw\\n  /// @dev Only protocol agent is able to withdraw\\n  /// @dev Balance can be withdrawn up until 7 days worth of active balance\\n  function withdrawActiveBalance(bytes32 _protocol, uint256 _amount)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    if (_amount == uint256(0)) revert ZeroArgument();\\n    // Only the protocol agent can call this function\\n    if (msg.sender != _verifyProtocolExists(_protocol)) revert Unauthorized();\\n\\n    // Updates the active balance of the protocol\\n    _settleProtocolDebt(_protocol);\\n\\n    // Sets currentBalance to the active balance of the protocol\\n    uint256 currentBalance = activeBalances[_protocol];\\n    // Reverts if trying to withdraw more than the active balance\\n    if (_amount > currentBalance) revert InsufficientBalance(_protocol);\\n\\n    // Removes the _amount to be withdrawn from the active balance\\n    activeBalances[_protocol] = currentBalance - _amount;\\n    // Reverts if a protocol has less than 7 days worth of active balance left\\n    if (_secondsOfCoverageLeft(_protocol) < MIN_SECONDS_LEFT) revert InsufficientBalance(_protocol);\\n\\n    // Transfers the amount to the msg.sender (protocol agent)\\n    token.safeTransfer(msg.sender, _amount);\\n    emit ProtocolBalanceWithdrawn(_protocol, _amount);\\n  }\\n\\n  /// @notice Transfer protocol agent role\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Account able to submit a claim on behalf of the protocol\\n  /// @dev Only the active protocolAgent is able to transfer the role\\n  function transferProtocolAgent(bytes32 _protocol, address _protocolAgent)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    if (_protocolAgent == address(0)) revert ZeroArgument();\\n    // Can't set the new protocol agent to the caller address\\n    if (msg.sender == _protocolAgent) revert InvalidArgument();\\n    // Because the caller must be the current protocol agent\\n    if (msg.sender != _verifyProtocolExists(_protocol)) revert Unauthorized();\\n\\n    // Sets the protocol agent to the new address\\n    _setProtocolAgent(_protocol, msg.sender, _protocolAgent);\\n  }\\n\\n  /// @notice Function used to check if this is the current active protocol manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() public view returns (bool) {\\n    return address(sherlockCore.sherlockProtocolManager()) == address(this);\\n  }\\n\\n  // Only contract owner can call this\\n  // Sends all specified tokens in this contract to the receiver's address (as well as ETH)\\n  function sweep(address _receiver, IERC20[] memory _extraTokens) external onlyOwner {\\n    if (_receiver == address(0)) revert ZeroArgument();\\n    // This contract must NOT be the current assigned protocol manager contract\\n    if (isActive()) revert InvalidConditions();\\n    // Executes the sweep for ERC-20s specified in _extraTokens as well as for ETH\\n    _sweep(_receiver, _extraTokens);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/managers/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport '../interfaces/managers/IManager.sol';\\n\\nabstract contract Manager is IManager, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  address private constant DEPLOYER = 0x1C11bE636415973520DdDf1b03822b4e2930D94A;\\n  ISherlock internal sherlockCore;\\n\\n  modifier onlySherlockCore() {\\n    if (msg.sender != address(sherlockCore)) revert InvalidSender();\\n    _;\\n  }\\n\\n  /// @notice Set sherlock core address\\n  /// @param _sherlock Current core contract\\n  /// @dev Only deployer is able to set core address on all chains except Hardhat network\\n  /// @dev One time function, will revert once `sherlock` != address(0)\\n  /// @dev This contract will be deployed first, passed on as argument in core constuctor\\n  /// @dev emits `SherlockCoreSet`\\n  function setSherlockCoreAddress(ISherlock _sherlock) external override {\\n    if (address(_sherlock) == address(0)) revert ZeroArgument();\\n    // 31337 is of the Hardhat network blockchain\\n    if (block.chainid != 31337 && msg.sender != DEPLOYER) revert InvalidSender();\\n\\n    if (address(sherlockCore) != address(0)) revert InvalidConditions();\\n    sherlockCore = _sherlock;\\n\\n    emit SherlockCoreSet(_sherlock);\\n  }\\n\\n  // Internal function to send tokens remaining in a contract to the receiver address\\n  function _sweep(address _receiver, IERC20[] memory _extraTokens) internal {\\n    // Loops through the extra tokens (ERC20) provided and sends all of them to the receiver address\\n    for (uint256 i; i < _extraTokens.length; i++) {\\n      IERC20 token = _extraTokens[i];\\n      token.safeTransfer(_receiver, token.balanceOf(address(this)));\\n    }\\n    // Sends any remaining ETH to the receiver address (as long as receiver address is payable)\\n    (bool success, ) = _receiver.call{ value: address(this).balance }('');\\n    if (success == false) revert InvalidConditions();\\n  }\\n\\n  function pause() external onlySherlockCore {\\n    _pause();\\n  }\\n\\n  function unpause() external onlySherlockCore {\\n    _unpause();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockProtocolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\n/// @title Sherlock core interface for protocols\\n/// @author Evert Kors\\ninterface ISherlockProtocolManager is IManager {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // If a protocol was never instantiated or was removed and the claim deadline has passed, this error is returned\\n  error ProtocolNotExists(bytes32 protocol);\\n\\n  // When comparing two arrays and the lengths are not equal (but are supposed to be equal)\\n  error UnequalArrayLength();\\n\\n  // If there is not enough balance in the contract for the amount requested (after any requirements are met), this is returned\\n  error InsufficientBalance(bytes32 protocol);\\n\\n  event MinBalance(uint256 previous, uint256 current);\\n\\n  event AccountingError(bytes32 indexed protocol, uint256 amount, uint256 insufficientTokens);\\n\\n  event ProtocolAdded(bytes32 indexed protocol);\\n\\n  event ProtocolRemovedByArb(bytes32 indexed protocol, address arb, uint256 profit);\\n\\n  event ProtocolRemoved(bytes32 indexed protocol);\\n\\n  event ProtocolUpdated(\\n    bytes32 indexed protocol,\\n    bytes32 coverage,\\n    uint256 nonStakers,\\n    uint256 coverageAmount\\n  );\\n\\n  event ProtocolAgentTransfer(bytes32 indexed protocol, address from, address to);\\n\\n  event ProtocolBalanceDeposited(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolBalanceWithdrawn(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolPremiumChanged(bytes32 indexed protocol, uint256 oldPremium, uint256 newPremium);\\n\\n  /// @notice View current amount of all premiums that are owed to stakers\\n  /// @return Premiums claimable\\n  /// @dev Will increase every block\\n  /// @dev base + (now - last_settled) * ps\\n  function claimablePremiums() external view returns (uint256);\\n\\n  /// @notice Transfer current claimable premiums (for stakers) to core Sherlock address\\n  /// @dev Callable by everyone\\n  /// @dev Funds will be transferred to Sherlock core contract\\n  function claimPremiumsForStakers() external;\\n\\n  /// @notice View current protocolAgent of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @return Address able to submit claims\\n  function protocolAgent(bytes32 _protocol) external view returns (address);\\n\\n  /// @notice View current premium of protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of premium `_protocol` pays per second\\n  function premium(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View current active balance of covered protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Active balance\\n  /// @dev Accrued debt is subtracted from the stored active balance\\n  function activeBalance(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View seconds of coverage left for `_protocol` before it runs out of active balance\\n  /// @param _protocol Protocol identifier\\n  /// @return Seconds of coverage left\\n  function secondsOfCoverageLeft(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Add a new protocol to Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Address able to submit a claim on behalf of the protocol\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Adding a protocol allows the `_protocolAgent` to submit a claim\\n  /// @dev Coverage is not started yet as the protocol doesn't pay a premium at this point\\n  /// @dev `_nonStakers` is scaled by 10**18\\n  /// @dev Only callable by governance\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _protocolAgent,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Update info regarding a protocol\\n  /// @param _protocol Protocol identifier\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Only callable by governance\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Remove a protocol from coverage\\n  /// @param _protocol Protocol identifier\\n  /// @dev Before removing a protocol the premium must be 0\\n  /// @dev Removing a protocol basically stops the `_protocolAgent` from being active (can still submit claims until claim deadline though)\\n  /// @dev Pays off debt + sends remaining balance to protocol agent\\n  /// @dev This call should be subject to a timelock\\n  /// @dev Only callable by governance\\n  function protocolRemove(bytes32 _protocol) external;\\n\\n  /// @notice Remove a protocol with insufficient active balance\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveByActiveBalance(bytes32 _protocol) external;\\n\\n  /// @notice Removes a protocol with insufficent seconds of coverage left\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveBySecondsOfCoverage(bytes32 _protocol) external;\\n\\n  /// @notice View minimal balance needed before liquidation can start\\n  /// @return Minimal balance needed\\n  function minActiveBalance() external view returns (uint256);\\n\\n  /// @notice Sets the minimum active balance before an arb can remove a protocol\\n  /// @param _minActiveBalance Minimum balance needed (in USDC)\\n  /// @dev Only gov\\n  function setMinActiveBalance(uint256 _minActiveBalance) external;\\n\\n  /// @notice Set premium of `_protocol` to `_premium`\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium Amount of premium `_protocol` pays per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremium(bytes32 _protocol, uint256 _premium) external;\\n\\n  /// @notice Set premium of multiple protocols\\n  /// @param _protocol Array of protocol identifiers\\n  /// @param _premium Array of premium amounts protocols pay per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremiums(bytes32[] calldata _protocol, uint256[] calldata _premium) external;\\n\\n  /// @notice Deposits `_amount` of token to the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to deposit\\n  /// @dev Approval should be made before calling\\n  function depositToActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Withdraws `_amount` of token from the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to withdraw\\n  /// @dev Only protocol agent is able to withdraw\\n  /// @dev Balance can be withdrawn up until 7 days worth of active balance\\n  function withdrawActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Transfer protocol agent role\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Account able to submit a claim on behalf of the protocol\\n  /// @dev Only the active protocolAgent is able to transfer the role\\n  function transferProtocolAgent(bytes32 _protocol, address _protocolAgent) external;\\n\\n  /// @notice View the amount nonstakers can claim from this protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of tokens claimable by nonstakers\\n  /// @dev this reads from a storage variable + (now-lastsettled) * premiums\\n  function nonStakersClaimable(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Choose an `_amount` of tokens that nonstakers (`_receiver` address) will receive from `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens\\n  /// @param _receiver Address to receive tokens\\n  /// @dev Only callable by nonstakers role\\n  function nonStakersClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  /// @param _protocol Protocol identifier\\n  /// @return current and previous are the current and previous coverage amounts for this protocol\\n  function coverageAmounts(bytes32 _protocol)\\n    external\\n    view\\n    returns (uint256 current, uint256 previous);\\n\\n  /// @notice Function used to check if this is the current active protocol manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '../ISherlock.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IManager {\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // If a required condition for executing the function is not met, it reverts and throws this error\\n  error InvalidConditions();\\n\\n  // Throws if the msg.sender is not the required address\\n  error InvalidSender();\\n\\n  event SherlockCoreSet(ISherlock sherlock);\\n\\n  /// @notice Set sherlock core address where premiums should be send too\\n  /// @param _sherlock Current core contract\\n  /// @dev Only deployer is able to set core address on all chains except Hardhat network\\n  /// @dev One time function, will revert once `sherlock` != address(0)\\n  /// @dev This contract will be deployed first, passed on as argument in core constuctor\\n  /// @dev ^ that's needed for tvl accounting, once core is deployed this function is called\\n  /// @dev emits `SherlockCoreSet`\\n  function setSherlockCoreAddress(ISherlock _sherlock) external;\\n\\n  /// @notice Pause external functions in contract\\n  function pause() external;\\n\\n  /// @notice Unpause external functions in contract\\n  function unpause() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './ISherlockStake.sol';\\nimport './ISherlockGov.sol';\\nimport './ISherlockPayout.sol';\\nimport './ISherlockStrategy.sol';\\n\\ninterface ISherlock is ISherlockStake, ISherlockGov, ISherlockPayout, ISherlockStrategy, IERC721 {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // Required conditions are not true/met\\n  error InvalidConditions();\\n\\n  // If the SHER tokens held in a contract are not the value they are supposed to be\\n  error InvalidSherAmount(uint256 expected, uint256 actual);\\n\\n  // Checks the ERC-721 functions _exists() to see if an NFT ID actually exists and errors if not\\n  error NonExistent();\\n\\n  event ArbRestaked(uint256 indexed tokenID, uint256 reward);\\n\\n  event Restaked(uint256 indexed tokenID);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock core interface for stakers\\n/// @author Evert Kors\\ninterface ISherlockStake {\\n  /// @notice View the current lockup end timestamp of `_tokenID`\\n  /// @return Timestamp when NFT position unlocks\\n  function lockupEnd(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current SHER reward of `_tokenID`\\n  /// @return Amount of SHER rewarded to owner upon reaching the end of the lockup\\n  function sherRewards(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current token balance claimable upon reaching end of the lockup\\n  /// @return Amount of tokens assigned to owner when unstaking position\\n  function tokenBalanceOf(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current TVL for all stakers\\n  /// @return Total amount of tokens staked\\n  /// @dev Adds principal + strategy + premiums\\n  /// @dev Will calculate the most up to date value for each piece\\n  function totalTokenBalanceStakers() external view returns (uint256);\\n\\n  /// @notice Stakes `_amount` of tokens and locks up for `_period` seconds, `_receiver` will receive the NFT receipt\\n  /// @param _amount Amount of tokens to stake\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @param _receiver Address that will receive the NFT representing the position\\n  /// @return _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to this ID after `_period` ends\\n  /// @dev `_period` needs to be whitelisted\\n  function initialStake(\\n    uint256 _amount,\\n    uint256 _period,\\n    address _receiver\\n  ) external returns (uint256 _id, uint256 _sher);\\n\\n  /// @notice Redeem NFT `_id` and receive `_amount` of tokens\\n  /// @param _id TokenID of the position\\n  /// @return _amount Amount of tokens (USDC) owed to NFT ID\\n  /// @dev Only the owner of `_id` will be able to redeem their position\\n  /// @dev The SHER rewards are sent to the NFT owner\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function redeemNFT(uint256 _id) external returns (uint256 _amount);\\n\\n  /// @notice Owner restakes position with ID: `_id` for `_period` seconds\\n  /// @param _id ID of the position\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @return _sher Amount of SHER tokens to be released to owner address after `_period` ends\\n  /// @dev Only the owner of `_id` will be able to restake their position using this call\\n  /// @dev `_period` needs to be whitelisted\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function ownerRestake(uint256 _id, uint256 _period) external returns (uint256 _sher);\\n\\n  /// @notice Allows someone who doesn't own the position (an arbitrager) to restake the position for 26 weeks (ARB_RESTAKE_PERIOD)\\n  /// @param _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to position owner on expiry of the 26 weeks lockup\\n  /// @return _arbReward Amount of tokens (USDC) sent to caller (the arbitrager) in return for calling the function\\n  /// @dev Can only be called after lockup `_period` is more than 2 weeks in the past (assuming ARB_RESTAKE_WAIT_TIME is 2 weeks)\\n  /// @dev Max 20% (ARB_RESTAKE_MAX_PERCENTAGE) of tokens associated with a position are used to incentivize arbs (x)\\n  /// @dev During a 2 week period the reward ratio will move from 0% to 100% (* x)\\n  function arbRestake(uint256 _id) external returns (uint256 _sher, uint256 _arbReward);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/ISherDistributionManager.sol';\\nimport './managers/ISherlockProtocolManager.sol';\\nimport './managers/ISherlockClaimManager.sol';\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for governance\\n/// @author Evert Kors\\ninterface ISherlockGov {\\n  event ClaimPayout(address receiver, uint256 amount);\\n  event YieldStrategyUpdateWithdrawAllError(bytes error);\\n  event YieldStrategyUpdated(IStrategyManager previous, IStrategyManager current);\\n  event ProtocolManagerUpdated(ISherlockProtocolManager previous, ISherlockProtocolManager current);\\n  event ClaimManagerUpdated(ISherlockClaimManager previous, ISherlockClaimManager current);\\n  event NonStakerAddressUpdated(address previous, address current);\\n  event SherDistributionManagerUpdated(\\n    ISherDistributionManager previous,\\n    ISherDistributionManager current\\n  );\\n\\n  event StakingPeriodEnabled(uint256 period);\\n\\n  event StakingPeriodDisabled(uint256 period);\\n\\n  /// @notice Allows stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already enabled\\n  function enableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice Disallow stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already disabled\\n  function disableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice View if `_period` is a valid period\\n  /// @return Boolean indicating if period is valid\\n  function stakingPeriods(uint256 _period) external view returns (bool);\\n\\n  /// @notice Update SHER distribution manager contract\\n  /// @param _sherDistributionManager New adddress of the manager\\n  function updateSherDistributionManager(ISherDistributionManager _sherDistributionManager)\\n    external;\\n\\n  /// @notice Deletes the SHER distribution manager altogether (if Sherlock decides to no longer pay out SHER rewards)\\n  function removeSherDistributionManager() external;\\n\\n  /// @notice Read SHER distribution manager\\n  /// @return Address of current SHER distribution manager\\n  function sherDistributionManager() external view returns (ISherDistributionManager);\\n\\n  /// @notice Update address eligible for non staker rewards from protocol premiums\\n  /// @param _nonStakers Address eligible for non staker rewards\\n  function updateNonStakersAddress(address _nonStakers) external;\\n\\n  /// @notice View current non stakers address\\n  /// @return Current non staker address\\n  /// @dev Is able to pull funds out of the contract\\n  function nonStakersAddress() external view returns (address);\\n\\n  /// @notice View current address able to manage protocols\\n  /// @return Protocol manager implemenation\\n  function sherlockProtocolManager() external view returns (ISherlockProtocolManager);\\n\\n  /// @notice Transfer protocol manager implementation address\\n  /// @param _protocolManager new implementation address\\n  function updateSherlockProtocolManager(ISherlockProtocolManager _protocolManager) external;\\n\\n  /// @notice View current address able to pull payouts\\n  /// @return Address able to pull payouts\\n  function sherlockClaimManager() external view returns (ISherlockClaimManager);\\n\\n  /// @notice Transfer claim manager role to different address\\n  /// @param _claimManager New address of claim manager\\n  function updateSherlockClaimManager(ISherlockClaimManager _claimManager) external;\\n\\n  /// @notice Update yield strategy\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev try a yieldStrategyWithdrawAll() on old, ignore failure\\n  function updateYieldStrategy(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Update yield strategy ignoring current state\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev tries a yieldStrategyWithdrawAll() on old strategy, ignore failure\\n  function updateYieldStrategyForce(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Read current strategy\\n  /// @return Address of current strategy\\n  /// @dev can never be address(0)\\n  function yieldStrategy() external view returns (IStrategyManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockPayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock interface for payout manager\\n/// @author Evert Kors\\ninterface ISherlockPayout {\\n  /// @notice Initiate a payout of `_amount` to `_receiver`\\n  /// @param _receiver Receiver of payout\\n  /// @param _amount Amount to send\\n  /// @dev only payout manager should call this\\n  /// @dev should pull money out of strategy\\n  function payoutClaim(address _receiver, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for yield strategy\\n/// @author Evert Kors\\ninterface ISherlockStrategy {\\n  /// @notice Deposit `_amount` into active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyDeposit(uint256 _amount) external;\\n\\n  /// @notice Withdraw `_amount` from active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyWithdraw(uint256 _amount) external;\\n\\n  /// @notice Withdraw all funds from active strategy\\n  /// @dev gov only\\n  function yieldStrategyWithdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IManager.sol';\\n\\ninterface ISherDistributionManager is IManager {\\n  // anyone can just send token to this contract to fund rewards\\n\\n  event Initialized(uint256 maxRewardsEndTVL, uint256 zeroRewardsStartTVL, uint256 maxRewardRate);\\n\\n  /// @notice Caller will receive `_sher` SHER tokens based on `_amount` and `_period`\\n  /// @param _amount Amount of tokens (in USDC) staked\\n  /// @param _period Period of time for stake, in seconds\\n  /// @param _id ID for this NFT position\\n  /// @param _receiver Address that will be linked to this position\\n  /// @return _sher Amount of SHER tokens sent to Sherlock core contract\\n  /// @dev Calling contract will depend on before + after balance diff and return value\\n  /// @dev INCLUDES stake in calculation, function expects the `_amount` to be deposited already\\n  /// @dev If tvl=50 and amount=50, this means it is calculating SHER rewards for the first 50 tokens going in\\n  function pullReward(\\n    uint256 _amount,\\n    uint256 _period,\\n    uint256 _id,\\n    address _receiver\\n  ) external returns (uint256 _sher);\\n\\n  /// @notice Calculates how many `_sher` SHER tokens are owed to a stake position based on `_amount` and `_period`\\n  /// @param _tvl TVL to use for reward calculation (pre-stake TVL)\\n  /// @param _amount Amount of tokens (USDC) staked\\n  /// @param _period Stake period (in seconds)\\n  /// @return _sher Amount of SHER tokens owed to this stake position\\n  /// @dev EXCLUDES `_amount` of stake, this will be added on top of TVL (_tvl is excluding _amount)\\n  /// @dev If tvl=0 and amount=50, it would calculate for the first 50 tokens going in (different from pullReward())\\n  function calcReward(\\n    uint256 _tvl,\\n    uint256 _amount,\\n    uint256 _period\\n  ) external view returns (uint256 _sher);\\n\\n  /// @notice Function used to check if this is the current active distribution manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockClaimManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './callbacks/ISherlockClaimManagerCallbackReceiver.sol';\\nimport '../UMAprotocol/OptimisticRequester.sol';\\nimport './IManager.sol';\\n\\ninterface ISherlockClaimManager is IManager, OptimisticRequester {\\n  // Doesn't allow a new claim to be submitted by a protocol agent if a claim is already active for that protocol\\n  error ClaimActive();\\n\\n  // If the current state of a claim does not match the expected state, this error is thrown\\n  error InvalidState();\\n\\n  event ClaimCreated(\\n    uint256 claimID,\\n    bytes32 indexed protocol,\\n    uint256 amount,\\n    address receiver,\\n    bool previousCoverageUsed\\n  );\\n\\n  event CallbackAdded(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event CallbackRemoved(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event ClaimStatusChanged(uint256 indexed claimID, State previousState, State currentState);\\n\\n  event ClaimPayout(uint256 claimID, address receiver, uint256 amount);\\n\\n  event ClaimHalted(uint256 claimID);\\n\\n  event UMAHORenounced();\\n\\n  enum State {\\n    NonExistent, // Claim doesn't exist (this is the default state on creation)\\n    SpccPending, // Claim is created, SPCC is able to set state to valid\\n    SpccApproved, // Final state, claim is valid\\n    SpccDenied, // Claim denied by SPCC, claim can be escalated within 4 weeks\\n    UmaPriceProposed, // Price is proposed but not escalated\\n    ReadyToProposeUmaDispute, // Price is proposed, callback received, ready to submit dispute\\n    UmaDisputeProposed, // Escalation is done, waiting for confirmation\\n    UmaPending, // Claim is escalated, in case Spcc denied or didn't act within 7 days.\\n    UmaApproved, // Final state, claim is valid, claim can be enacted after 1 day, umaHaltOperator has 1 day to change to denied\\n    UmaDenied, // Final state, claim is invalid\\n    Halted, // UMAHO can halt claim if state is UmaApproved\\n    Cleaned // Claim is removed by protocol agent\\n  }\\n\\n  struct Claim {\\n    uint256 created;\\n    uint256 updated;\\n    address initiator;\\n    bytes32 protocol;\\n    uint256 amount;\\n    address receiver;\\n    uint32 timestamp;\\n    State state;\\n    bytes ancillaryData;\\n  }\\n\\n  // requestAndProposePriceFor() --> proposer = sherlockCore (address to receive BOND if UMA denies claim)\\n  // disputePriceFor() --> disputer = protocolAgent\\n  // priceSettled will be the the callback that contains the main data\\n\\n  // Assume BOND = 9600, UMA's final fee = 1500.\\n  // Claim initiator (Sherlock) has to pay 22.2k to dispute a claim,\\n  // so we will execute a safeTransferFrom(claimInitiator, address(this), 22.2k).\\n  // We need to approve the contract 22.2k as it will be transferred from address(this).\\n\\n  // The 22.2k consists of 2 * (BOND + final fee charged by UMA), as follows:\\n  // 1. On requestAndProposePriceFor(), the fee will be 10k: 9600 BOND + 1500 UMA's final fee;\\n  // 2. On disputePriceFor(), the fee will be the same 10k.\\n  // note that half of the BOND (4800) + UMA's final fee (1500) is \\\"burnt\\\" and sent to UMA\\n\\n  // UMA's final fee can be changed in the future, which may result in lower or higher required staked amounts for escalating a claim.\\n\\n  // On settle, either the protocolAgent (dispute success) or sherlockCore (dispute failure)\\n  // will receive 9600 + 4800 + 1500 = 15900. In addition, the protocolAgent will be entitled to\\n  // the claimAmount if the dispute is successful/\\n\\n  // lastClaimID <-- starts with 0, so initial id = 1\\n  // have claim counter, easy to identify certain claims by their number\\n  // but use hash(callback.request.propose + callback.timestamp) as the internal UUID to handle the callbacks\\n\\n  // So SPCC and UMAHO are hardcoded (UMAHO can be renounced)\\n  // In case these need to be updated, deploy different contract and upgrade it on the sherlock gov side.\\n\\n  // On price proposed callback --> call disputePriceFor with callbackdata + sherlock.strategyManager() and address(this)\\n\\n  /// @notice `SHERLOCK_CLAIM` in utf8\\n  function UMA_IDENTIFIER() external view returns (bytes32);\\n\\n  function sherlockProtocolClaimsCommittee() external view returns (address);\\n\\n  /// @notice operator is able to deny approved UMA claims\\n  function umaHaltOperator() external view returns (address);\\n\\n  /// @notice gov is able to renounce the role\\n  function renounceUmaHaltOperator() external;\\n\\n  function claim(uint256 _claimID) external view returns (Claim memory);\\n\\n  /// @notice Initiate a claim for a specific protocol as the protocol agent\\n  /// @param _protocol protocol ID (different from the internal or public claim ID fields)\\n  /// @param _amount amount of USDC which is being claimed by the protocol\\n  /// @param _receiver address to receive the amount of USDC being claimed\\n  /// @param _timestamp timestamp at which the exploit first occurred\\n  /// @param ancillaryData other data associated with the claim, such as the coverage agreement\\n  /// @dev The protocol agent that starts a claim will be the protocol agent during the claims lifecycle\\n  /// @dev Even if the protocol agent role is tranferred during the lifecycle\\n  function startClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver,\\n    uint32 _timestamp,\\n    bytes memory ancillaryData\\n  ) external;\\n\\n  function spccApprove(uint256 _claimID) external;\\n\\n  function spccRefuse(uint256 _claimID) external;\\n\\n  /// @notice Callable by protocol agent\\n  /// @param _claimID Public claim ID\\n  /// @param _amount Bond amount sent by protocol agent\\n  /// @dev Use hardcoded USDC address\\n  /// @dev Use hardcoded bond amount\\n  /// @dev Use hardcoded liveness 7200 (2 hours)\\n  /// @dev proposedPrice = _amount\\n  function escalate(uint256 _claimID, uint256 _amount) external;\\n\\n  /// @notice Execute claim, storage will be removed after\\n  /// @param _claimID Public ID of the claim\\n  /// @dev Needs to be SpccApproved or UmaApproved && >UMAHO_TIME\\n  /// @dev Funds will be pulled from core\\n  function payoutClaim(uint256 _claimID) external;\\n\\n  /// @notice UMAHO is able to execute a halt if the state is UmaApproved and state was updated less than UMAHO_TIME ago\\n  function executeHalt(uint256 _claimID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStrategyManager is IManager {\\n  /// @return Returns the token type being deposited into a strategy\\n  function want() external view returns (IERC20);\\n\\n  /// @notice Withdraws all USDC from the strategy back into the Sherlock core contract\\n  /// @dev Only callable by the Sherlock core contract\\n  /// @return The final amount withdrawn\\n  function withdrawAll() external returns (uint256);\\n\\n  /// @notice Withdraws a specific amount of USDC from the strategy back into the Sherlock core contract\\n  /// @param _amount Amount of USDC to withdraw\\n  function withdraw(uint256 _amount) external;\\n\\n  /// @notice Deposits all USDC held in this contract into the strategy\\n  function deposit() external;\\n\\n  /// @return Returns the USDC balance in this contract\\n  function balanceOf() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/callbacks/ISherlockClaimManagerCallbackReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\ninterface ISherlockClaimManagerCallbackReceiver {\\n  /// @notice Calls this function on approved contracts and passes args\\n  /// @param _protocol The protocol that is receiving the payout\\n  /// @param _claimID The claim ID that is receiving the payout\\n  /// @param _amount The amount of USDC being paid out for this claim\\n  function PreCorePayoutCallback(\\n    bytes32 _protocol,\\n    uint256 _claimID,\\n    uint256 _amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticRequester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport './SkinnyOptimisticOracleInterface.sol';\\n\\n/**\\n * @title Optimistic Requester.\\n * @notice Optional interface that requesters can implement to receive callbacks.\\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\n * money themselves).\\n */\\ninterface OptimisticRequester {\\n  /**\\n   * @notice Callback for proposals.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after proposal.\\n   */\\n  function priceProposed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for disputes.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after dispute.\\n   */\\n  function priceDisputed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for settlement.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after settlement.\\n   */\\n  function priceSettled(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/SkinnyOptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './OptimisticOracleInterface.sol';\\n\\n/**\\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\\n * @notice Differences from normal OptimisticOracle:\\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\\n *   set in `requestPrice`, which has an expanded input set.\\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\\n *   can be fetched via the `Settle` event or the return value of `settle`.\\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\\n *   full request struct.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract SkinnyOptimisticOracleInterface {\\n  event RequestPrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event ProposePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event DisputePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event Settle(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\\n  // in that refundOnDispute is removed.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address proposer,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value where caller is the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\n   * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\n   * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\n   * @dev The caller is the requester, but the proposer can be customized.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function requestAndProposePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness,\\n    address proposer,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address disputer,\\n    address requester\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal where caller is the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * settle.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   * @return resolvedPrice the price that the request settled to.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 payout, int256 resolvedPrice);\\n\\n  /**\\n   * @notice Computes the current state of a price request. See the State enum for more details.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters.\\n   * @return the State.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (OptimisticOracleInterface.State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters. The hash of these parameters must match with the request hash that is\\n   * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\n   * will revert.\\n   * @return boolean indicating true if price exists and false if not.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) public virtual returns (bool);\\n\\n  /**\\n   * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param requester sender of the initial price request.\\n   * @return the stamped ancillary bytes.\\n   */\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    pure\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n  // Struct representing the state of a price request.\\n  enum State {\\n    Invalid, // Never requested.\\n    Requested, // Requested, no other actions taken.\\n    Proposed, // Proposed, but not expired or disputed yet.\\n    Expired, // Proposed, not disputed, past liveness.\\n    Disputed, // Disputed, but no DVM price returned yet.\\n    Resolved, // Disputed and DVM price is available.\\n    Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n  }\\n\\n  // Struct representing a price request.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n   * This can be changed with a subsequent call to setBond().\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Set the proposal bond associated with a price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param bond custom bond amount to set.\\n   * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n   * changed again with a subsequent call to setBond().\\n   */\\n  function setBond(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 bond\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n   * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n   * bond, so there is still profit to be made even if the reward is refunded.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   */\\n  function setRefundOnDispute(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n   * being auto-resolved.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param customLiveness new custom liveness.\\n   */\\n  function setCustomLiveness(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 customLiveness\\n  ) external virtual;\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param proposer address to set as the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address proposer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value for an existing price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was value (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    address disputer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price value for an existing price request with an active proposal.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n   * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n   * hasn't been settled.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return resolved price.\\n   */\\n  function settleAndGetPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (int256);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 payout);\\n\\n  /**\\n   * @notice Gets the current data structure containing all information about a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the Request data structure.\\n   */\\n  function getRequest(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (Request memory);\\n\\n  /**\\n   * @notice Returns the state of a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the State enum value.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return true if price has resolved or settled, false otherwise.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (bool);\\n\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    view\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"ProtocolNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insufficientTokens\",\"type\":\"uint256\"}],\"name\":\"AccountingError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"MinBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"ProtocolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ProtocolAgentTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolBalanceDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolBalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremium\",\"type\":\"uint256\"}],\"name\":\"ProtocolPremiumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"}],\"name\":\"ProtocolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ProtocolRemovedByArb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"coverage\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonStakers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverageAmount\",\"type\":\"uint256\"}],\"name\":\"ProtocolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISherlock\",\"name\":\"sherlock\",\"type\":\"address\"}],\"name\":\"SherlockCoreSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BALANCE_SANITY_CEILING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SECONDS_LEFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SECONDS_OF_COVERAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_CLAIM_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"activeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPremiumsForStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimablePremiums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"coverageAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToActiveBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"forceRemoveByActiveBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"forceRemoveBySecondsOfCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minActiveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"nonStakersClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"nonStakersClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_protocolAgent\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_coverage\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"protocolAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"protocolAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"protocolRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_coverage\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverageAmount\",\"type\":\"uint256\"}],\"name\":\"protocolUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"secondsOfCoverageLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minActiveBalance\",\"type\":\"uint256\"}],\"name\":\"setMinActiveBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"}],\"name\":\"setProtocolPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_protocol\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premium\",\"type\":\"uint256[]\"}],\"name\":\"setProtocolPremiums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISherlock\",\"name\":\"_sherlock\",\"type\":\"address\"}],\"name\":\"setSherlockCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_extraTokens\",\"type\":\"address[]\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_protocolAgent\",\"type\":\"address\"}],\"name\":\"transferProtocolAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawActiveBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SherlockProtocolManager", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}