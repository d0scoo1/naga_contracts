{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IWrappedEther.sol\\\";\\r\\nimport \\\"./interfaces/IExchangeAdapter.sol\\\";\\r\\n\\r\\ncontract Exchange is ReentrancyGuard, AccessControl {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    // struct size - 64 bytes, 2 slots\\r\\n    struct RouteEdge {\\r\\n        uint32 swapProtocol; // 0 - unknown edge, 1 - UniswapV2, 2 - Curve...\\r\\n        address pool; // address of pool to call\\r\\n        address fromCoin; // address of coin to deposit to pool\\r\\n        address toCoin; // address of coin to get from pool\\r\\n    }\\r\\n\\r\\n    // struct size - 32 bytes, 1 slots\\r\\n    struct LpToken {\\r\\n        uint32 swapProtocol; // 0 - unknown edge, 1 - UniswapV2, 2 - Curve...\\r\\n        address pool; // address of pool to call\\r\\n    }\\r\\n\\r\\n    // returns true if address is registered as major token, false otherwise\\r\\n    mapping(address => bool) public isMajorCoin;\\r\\n\\r\\n    // returns true if pool received approve of token. First address is pool,\\r\\n    // second is token\\r\\n    mapping(address => mapping(address => bool)) public approveCompleted;\\r\\n\\r\\n    // Storage of routes between major coins. Normally, any major coin should\\r\\n    // have route to any other major coin that is saved here\\r\\n    mapping(address => mapping(address => RouteEdge[]))\\r\\n        private internalMajorRoute;\\r\\n\\r\\n    // Storage of single edges from minor coin to major\\r\\n    mapping(address => RouteEdge) public minorCoins;\\r\\n\\r\\n    // Storage of LP tokens that are registeres in exchange\\r\\n    mapping(address => LpToken) public lpTokens;\\r\\n\\r\\n    // Storage of swap execution method for different protocols\\r\\n    mapping(uint32 => address) public adapters;\\r\\n\\r\\n    // Wrapped ether token that is used for native ether swaps\\r\\n    IWrappedEther public wrappedEther =\\r\\n        IWrappedEther(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n\\r\\n    // bytes4(keccak256(bytes(\\\"executeSwap(address,address,address,uint256)\\\")))\\r\\n    bytes4 public constant executeSwapSigHash = 0x6012856e;\\r\\n\\r\\n    // bytes4(keccak256(bytes(\\\"enterPool(address,address,uint256)\\\")))\\r\\n    bytes4 public constant enterPoolSigHash = 0x73ec962e;\\r\\n\\r\\n    // bytes4(keccak256(bytes(\\\"exitPool(address,address,uint256)\\\")))\\r\\n    bytes4 public constant exitPoolSigHash = 0x660cb8d4;\\r\\n\\r\\n    constructor(address gnosis, bool isTesting) {\\r\\n        require(gnosis.isContract(), \\\"Exchange: not contract\\\");\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, gnosis);\\r\\n        if (isTesting) _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Execute exchange of coins through predefined routes\\r\\n    /// @param from swap input token\\r\\n    /// @param to swap output token\\r\\n    /// @param amountIn amount of `from `tokens to be taken from caller\\r\\n    /// @param minAmountOut minimum amount of output tokens, revert if less\\r\\n    /// @return Amount of tokens that are returned\\r\\n    function exchange(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external payable nonReentrant returns (uint256) {\\r\\n        require(from != to, \\\"Exchange: from == to\\\");\\r\\n\\r\\n        if (lpTokens[to].swapProtocol != 0) {\\r\\n            IERC20(from).safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n            uint256 amountOut = _enterLiquidityPool(from, to, amountIn);\\r\\n            require(amountOut >= minAmountOut, \\\"Exchange: slippage\\\");\\r\\n\\r\\n            IERC20(to).safeTransfer(msg.sender, amountOut);\\r\\n\\r\\n            return amountOut;\\r\\n        }\\r\\n\\r\\n        if (lpTokens[from].swapProtocol != 0) {\\r\\n            IERC20(from).safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n            uint256 amountOut = _exitLiquidityPool(from, to, amountIn);\\r\\n            require(amountOut >= minAmountOut, \\\"Exchange: slippage\\\");\\r\\n\\r\\n            IERC20(to).safeTransfer(msg.sender, amountOut);\\r\\n\\r\\n            return amountOut;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            from == address(0) ||\\r\\n            from == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\r\\n        ) {\\r\\n            require(\\r\\n                to != address(0) &&\\r\\n                    to != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\\r\\n                \\\"Exchange: ETH to ETH\\\"\\r\\n            );\\r\\n            require(amountIn == msg.value, \\\"Exchange: value/amount discrep\\\");\\r\\n\\r\\n            wrappedEther.deposit{value: msg.value}();\\r\\n\\r\\n            uint256 amountOut = _exchange(address(wrappedEther), to, amountIn);\\r\\n            require(amountOut >= minAmountOut, \\\"Exchange: slippage\\\");\\r\\n            IERC20(to).safeTransfer(msg.sender, amountOut);\\r\\n\\r\\n            return amountOut;\\r\\n        }\\r\\n\\r\\n        IERC20(from).safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        if (\\r\\n            to == address(0) || to == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\r\\n        ) {\\r\\n            uint256 amountOut = _exchange(\\r\\n                from,\\r\\n                address(wrappedEther),\\r\\n                amountIn\\r\\n            );\\r\\n            require(amountOut >= minAmountOut, \\\"Exchange: slippage\\\");\\r\\n\\r\\n            wrappedEther.withdraw(amountOut);\\r\\n\\r\\n            Address.sendValue(payable(msg.sender), amountOut);\\r\\n\\r\\n            return amountOut;\\r\\n        }\\r\\n        uint256 amountOut_ = _exchange(from, to, amountIn);\\r\\n\\r\\n        require(amountOut_ >= minAmountOut, \\\"Exchange: slippage\\\");\\r\\n\\r\\n        IERC20(to).safeTransfer(msg.sender, amountOut_);\\r\\n\\r\\n        return amountOut_;\\r\\n    }\\r\\n\\r\\n    /// @notice Register swap/lp token adapters\\r\\n    /// @param protocolId protocol id of adapter to add\\r\\n    function registerAdapters(\\r\\n        address[] calldata adapters_,\\r\\n        uint32[] calldata protocolId\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        uint256 length = adapters_.length;\\r\\n        require(\\r\\n            adapters_.length == protocolId.length,\\r\\n            \\\"Exchange: length discrep\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            adapters[protocolId[i]] = adapters_[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Unregister swap/lp token adapters\\r\\n    /// @param protocolId protocol id of adapter to remove\\r\\n    function unregisterAdapters(uint32[] calldata protocolId)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        uint256 length = protocolId.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            delete adapters[protocolId[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Create single edge of a route from minor coin to major\\r\\n    /// @dev In order for swap from/to minor coin to be working, `toCoin` should\\r\\n    /// be registered as major\\r\\n    /// @param edges array of edges to store\\r\\n    function createMinorCoinEdge(RouteEdge[] calldata edges)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        uint256 length = edges.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            // validate protocol id - zero is interpreted as\\r\\n            // non-existing route\\r\\n            require(edges[i].swapProtocol != 0, \\\"Exchange: protocol type !set\\\");\\r\\n            require(\\r\\n                edges[i].fromCoin != edges[i].toCoin,\\r\\n                \\\"Exchange: edge is loop\\\"\\r\\n            );\\r\\n\\r\\n            if (!approveCompleted[edges[i].pool][edges[i].fromCoin]) {\\r\\n                IERC20(edges[i].fromCoin).safeApprove(\\r\\n                    edges[i].pool,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n                approveCompleted[edges[i].pool][edges[i].fromCoin] = true;\\r\\n            }\\r\\n\\r\\n            if (!approveCompleted[edges[i].pool][edges[i].toCoin]) {\\r\\n                IERC20(edges[i].toCoin).safeApprove(\\r\\n                    edges[i].pool,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n                approveCompleted[edges[i].pool][edges[i].toCoin] = true;\\r\\n            }\\r\\n\\r\\n            minorCoins[edges[i].fromCoin] = edges[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Remove internal minor route piece\\r\\n    /// @param edges source coin of route to delete\\r\\n    function deleteMinorCoinEdge(address[] calldata edges)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        for (uint256 i = 0; i < edges.length; i++) {\\r\\n            delete minorCoins[edges[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Create route between two tokens and set them as major\\r\\n    /// @param routes array of routes\\r\\n    function createInternalMajorRoutes(RouteEdge[][] calldata routes)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        for (uint256 i = 0; i < routes.length; i++) {\\r\\n            RouteEdge[] memory route = routes[i];\\r\\n\\r\\n            // extract start and beginning of given route\\r\\n            address start = route[0].fromCoin;\\r\\n            address end = route[route.length - 1].toCoin;\\r\\n            require(start != end, \\\"Exchange: route is loop\\\");\\r\\n\\r\\n            if (internalMajorRoute[start][end].length != 0) {\\r\\n                delete internalMajorRoute[start][end];\\r\\n            }\\r\\n\\r\\n            // validate protocol id - zero is interpreted as non-existing route\\r\\n            require(route[0].swapProtocol != 0, \\\"Exchange: protocol type !set\\\");\\r\\n\\r\\n            // set approve of the token to the pool\\r\\n            if (!approveCompleted[route[0].pool][route[0].fromCoin]) {\\r\\n                IERC20(route[0].fromCoin).safeApprove(\\r\\n                    route[0].pool,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n                approveCompleted[route[0].pool][route[0].fromCoin] = true;\\r\\n            }\\r\\n\\r\\n            require(\\r\\n                route[0].fromCoin != route[0].toCoin,\\r\\n                \\\"Exchange: edge is loop\\\"\\r\\n            );\\r\\n\\r\\n            // starting to save this route\\r\\n            internalMajorRoute[start][end].push(route[0]);\\r\\n\\r\\n            // if route is simple, then we've done everything for it\\r\\n            if (route.length == 1) {\\r\\n                // as route between these coins is set, we consider them as major\\r\\n                isMajorCoin[start] = true;\\r\\n                isMajorCoin[end] = true;\\r\\n\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // loop through whole route to check its continuity\\r\\n            address node = route[0].toCoin;\\r\\n            for (uint256 j = 1; j < route.length; j++) {\\r\\n                require(route[j].fromCoin == node, \\\"Exchange: route broken\\\");\\r\\n                node = route[j].toCoin;\\r\\n\\r\\n                // validate protocol id - zero is interpreted as\\r\\n                // non-existing route\\r\\n                require(\\r\\n                    route[j].swapProtocol != 0,\\r\\n                    \\\"Exchange: protocol type !set\\\"\\r\\n                );\\r\\n\\r\\n                require(\\r\\n                    route[j].fromCoin != route[j].toCoin,\\r\\n                    \\\"Exchange: edge is loop\\\"\\r\\n                );\\r\\n\\r\\n                // set approve of the token to the pool\\r\\n                if (!approveCompleted[route[j].pool][route[j].fromCoin]) {\\r\\n                    IERC20(route[j].fromCoin).safeApprove(\\r\\n                        route[j].pool,\\r\\n                        type(uint256).max\\r\\n                    );\\r\\n                    approveCompleted[route[j].pool][route[j].fromCoin] = true;\\r\\n                }\\r\\n\\r\\n                // continiuing to save this route\\r\\n                internalMajorRoute[start][end].push(route[j]);\\r\\n            }\\r\\n\\r\\n            // as route between these coins is set, we consider them as major\\r\\n            isMajorCoin[start] = true;\\r\\n            isMajorCoin[end] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Remove internal major routes and unregister them on demand\\r\\n    /// @param from source coin of route to delete\\r\\n    /// @param to destination coin of route to delete\\r\\n    /// @param removeMajor true if need to no longer recognize source and destination coin as major\\r\\n    function deleteInternalMajorRoutes(\\r\\n        address[] calldata from,\\r\\n        address[] calldata to,\\r\\n        bool removeMajor\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(from.length == to.length, \\\"Exchange: length discrep\\\");\\r\\n        for (uint256 i = 0; i < from.length; i++) {\\r\\n            delete internalMajorRoute[from[i]][to[i]];\\r\\n            if (removeMajor) {\\r\\n                isMajorCoin[from[i]] = false;\\r\\n                isMajorCoin[to[i]] = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Force unapprove of some coin to any pool\\r\\n    /// @param coins coins list\\r\\n    /// @param spenders pools list\\r\\n    function removeApproval(\\r\\n        address[] calldata coins,\\r\\n        address[] calldata spenders\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(coins.length == spenders.length, \\\"Exchange: length discrep\\\");\\r\\n        for (uint256 i = 0; i < coins.length; i++) {\\r\\n            IERC20(coins[i]).safeApprove(spenders[i], 0);\\r\\n            approveCompleted[spenders[i]][coins[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Force approve of some coin to any pool\\r\\n    /// @param coins coins list\\r\\n    /// @param spenders pools list\\r\\n    function createApproval(\\r\\n        address[] calldata coins,\\r\\n        address[] calldata spenders\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(coins.length == spenders.length, \\\"Exchange: length discrep\\\");\\r\\n        for (uint256 i = 0; i < coins.length; i++) {\\r\\n            IERC20(coins[i]).safeApprove(spenders[i], type(uint256).max);\\r\\n            approveCompleted[spenders[i]][coins[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add all info for enabling LP token swap and set up coin approval\\r\\n    /// @param edges info about protocol type and pools\\r\\n    /// @param lpTokensAddress coins that will be recognized as LP tokens\\r\\n    /// @param entryCoins coins which require approval to pool\\r\\n    function createLpToken(\\r\\n        LpToken[] calldata edges,\\r\\n        address[] calldata lpTokensAddress,\\r\\n        address[][] calldata entryCoins\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            edges.length == entryCoins.length &&\\r\\n                entryCoins.length == lpTokensAddress.length,\\r\\n            \\\"Exchange: length discrep\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < edges.length; i++) {\\r\\n            LpToken memory edge = edges[i];\\r\\n            require(edge.swapProtocol != 0, \\\"Exchange: protocol type !set\\\");\\r\\n\\r\\n            for (uint256 j = 0; j < entryCoins[i].length; j++) {\\r\\n                if (!approveCompleted[edge.pool][entryCoins[i][j]]) {\\r\\n                    IERC20(entryCoins[i][j]).safeApprove(\\r\\n                        edge.pool,\\r\\n                        type(uint256).max\\r\\n                    );\\r\\n                    approveCompleted[edge.pool][entryCoins[i][j]] = true;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            lpTokens[lpTokensAddress[i]] = edge;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Set addresses to be no longer recognized as LP tokens\\r\\n    /// @param edges list of LP tokens\\r\\n    function deleteLpToken(address[] calldata edges)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        for (uint256 i = 0; i < edges.length; i++) {\\r\\n            delete lpTokens[edges[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc\\tAccessControl\\r\\n    function grantRole(bytes32 role, address account)\\r\\n        public\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))\\r\\n    {\\r\\n        require(account.isContract(), \\\"Exchange: not contract\\\");\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /// @notice Build highest liquidity swap route between two ERC20 coins\\r\\n    /// @param from address of coin to start route from\\r\\n    /// @param to address of route destination coin\\r\\n    /// @return route containing liquidity pool addresses\\r\\n    function buildRoute(address from, address to)\\r\\n        public\\r\\n        view\\r\\n        returns (RouteEdge[] memory)\\r\\n    {\\r\\n        bool isFromMajorCoin = isMajorCoin[from];\\r\\n        bool isToMajorCoin = isMajorCoin[to];\\r\\n\\r\\n        if (isFromMajorCoin && isToMajorCoin) {\\r\\n            // Moscow - Heathrow\\r\\n            // in this case route of major coins is predefined\\r\\n            RouteEdge[] memory majorToMajor = internalMajorRoute[from][to];\\r\\n\\r\\n            // check if this part of route exists\\r\\n            require(\\r\\n                majorToMajor.length > 0,\\r\\n                \\\"Exchange: 1!path from major coin\\\"\\r\\n            );\\r\\n\\r\\n            return majorToMajor;\\r\\n        } else if (!isFromMajorCoin && isToMajorCoin) {\\r\\n            // Tomsk - Heathrow\\r\\n            // getting predefined route from minor coin to major coin\\r\\n            RouteEdge memory minorToMajor = minorCoins[from];\\r\\n\\r\\n            // revert if route is not predefined\\r\\n            require(\\r\\n                minorToMajor.swapProtocol != 0,\\r\\n                \\\"Exchange: 2!path from input coin\\\"\\r\\n            );\\r\\n\\r\\n            // if predefined route from minor to major coin is what we wanted\\r\\n            // to get, simply return it\\r\\n            if (minorToMajor.toCoin == to) {\\r\\n                RouteEdge[] memory result = new RouteEdge[](1);\\r\\n                result[0] = minorToMajor;\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // find continuation of the route, if these major coins don't match\\r\\n            RouteEdge[] memory majorToMajor = internalMajorRoute[\\r\\n                minorToMajor.toCoin\\r\\n            ][to];\\r\\n\\r\\n            // check if this part of route exists\\r\\n            require(\\r\\n                majorToMajor.length > 0,\\r\\n                \\\"Exchange: 2!path from major coin\\\"\\r\\n            );\\r\\n\\r\\n            // concatenate route and return it\\r\\n            RouteEdge[] memory route = new RouteEdge[](majorToMajor.length + 1);\\r\\n            route[0] = minorToMajor;\\r\\n\\r\\n            for (uint256 i = 0; i < majorToMajor.length; i++) {\\r\\n                route[i + 1] = majorToMajor[i];\\r\\n            }\\r\\n\\r\\n            return route;\\r\\n        } else if (isFromMajorCoin && !isToMajorCoin) {\\r\\n            // Heathrow - Sochi\\r\\n            // getting predefined route from any major coin to target minor coin\\r\\n            RouteEdge memory majorToMinor = reverseRouteEdge(minorCoins[to]);\\r\\n\\r\\n            // revert if route is not predefined\\r\\n            require(\\r\\n                majorToMinor.swapProtocol != 0,\\r\\n                \\\"Exchange: 3!path from input coin\\\"\\r\\n            );\\r\\n\\r\\n            // if predefined route from major to minor coin is what we wanted\\r\\n            // to get, simply return it\\r\\n            if (majorToMinor.fromCoin == from) {\\r\\n                RouteEdge[] memory result = new RouteEdge[](1);\\r\\n                result[0] = majorToMinor;\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // find beginning of route from start major coin to major coin\\r\\n            // that is linked to destination\\r\\n            RouteEdge[] memory majorToMajor = internalMajorRoute[from][\\r\\n                majorToMinor.fromCoin\\r\\n            ];\\r\\n\\r\\n            // check if this part of route exists\\r\\n            require(\\r\\n                majorToMajor.length > 0,\\r\\n                \\\"Exchange: 3!path from major coin\\\"\\r\\n            );\\r\\n\\r\\n            // concatenate route and return it\\r\\n            RouteEdge[] memory route = new RouteEdge[](majorToMajor.length + 1);\\r\\n            route[majorToMajor.length] = majorToMinor;\\r\\n\\r\\n            for (uint256 i = 0; i < majorToMajor.length; i++) {\\r\\n                route[i] = majorToMajor[i];\\r\\n            }\\r\\n\\r\\n            return route;\\r\\n        } else {\\r\\n            // Chelyabinsk - Glasgow\\r\\n            //       minor - minor\\r\\n            // get paths from source and target coin to\\r\\n            // corresponding major coins\\r\\n            RouteEdge memory minorToMajor = minorCoins[from];\\r\\n            RouteEdge memory majorToMinor = reverseRouteEdge(minorCoins[to]);\\r\\n\\r\\n            // revert if routes are not predefined\\r\\n            require(\\r\\n                minorToMajor.swapProtocol != 0,\\r\\n                \\\"Exchange: 4!path from input coin\\\"\\r\\n            );\\r\\n            require(\\r\\n                majorToMinor.swapProtocol != 0,\\r\\n                \\\"Exchange: 4!path from out coin\\\"\\r\\n            );\\r\\n\\r\\n            // if these paths overlap on one coin, simply return it\\r\\n            if (minorToMajor.toCoin == majorToMinor.fromCoin) {\\r\\n                RouteEdge[] memory result = new RouteEdge[](2);\\r\\n                result[0] = minorToMajor;\\r\\n                result[1] = majorToMinor;\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // connect input and output coins with major coins\\r\\n            RouteEdge[] memory majorToMajor = internalMajorRoute[\\r\\n                minorToMajor.toCoin\\r\\n            ][majorToMinor.fromCoin];\\r\\n\\r\\n            // check if this part of route exists\\r\\n            require(\\r\\n                majorToMajor.length > 0,\\r\\n                \\\"Exchange: 4!path from major coin\\\"\\r\\n            );\\r\\n\\r\\n            // concatenate route and return it\\r\\n            RouteEdge[] memory route = new RouteEdge[](majorToMajor.length + 2);\\r\\n            route[0] = minorToMajor;\\r\\n            route[majorToMajor.length + 1] = majorToMinor;\\r\\n\\r\\n            for (uint256 i = 0; i < majorToMajor.length; i++) {\\r\\n                route[i + 1] = majorToMajor[i];\\r\\n            }\\r\\n\\r\\n            return route;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get prebuilt route between two major coins\\r\\n    /// @param from major coin to start route from\\r\\n    /// @param to major coin that should be end of route\\r\\n    /// @return Prebuilt route between major coins\\r\\n    function getMajorRoute(address from, address to)\\r\\n        external\\r\\n        view\\r\\n        returns (RouteEdge[] memory)\\r\\n    {\\r\\n        return internalMajorRoute[from][to];\\r\\n    }\\r\\n\\r\\n    function _exchange(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amountIn\\r\\n    ) private returns (uint256) {\\r\\n        // this code was written at late evening of 14 Feb\\r\\n        // i would like to say to solidity: i love you <3\\r\\n        // you're naughty bitch, but anyway\\r\\n\\r\\n        RouteEdge[] memory edges = buildRoute(from, to);\\r\\n\\r\\n        uint256 swapAmount = amountIn;\\r\\n        for (uint256 i = 0; i < edges.length; i++) {\\r\\n            RouteEdge memory edge = edges[i];\\r\\n\\r\\n            address adapter = adapters[edge.swapProtocol];\\r\\n            require(adapter != address(0), \\\"Exchange: adapter not found\\\");\\r\\n\\r\\n            // using delegatecall for gas savings (no need to transfer tokens\\r\\n            // to/from adapter)\\r\\n            bytes memory returnedData = adapter.functionDelegateCall(\\r\\n                abi.encodeWithSelector(\\r\\n                    executeSwapSigHash,\\r\\n                    edge.pool,\\r\\n                    edge.fromCoin,\\r\\n                    edge.toCoin,\\r\\n                    swapAmount\\r\\n                )\\r\\n            );\\r\\n            // extract return value from delegatecall\\r\\n            swapAmount = abi.decode(returnedData, (uint256));\\r\\n        }\\r\\n\\r\\n        return swapAmount;\\r\\n    }\\r\\n\\r\\n    function _enterLiquidityPool(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amountIn\\r\\n    ) private returns (uint256) {\\r\\n        LpToken memory edge = lpTokens[to];\\r\\n        address adapter = adapters[edge.swapProtocol];\\r\\n        require(adapter != address(0), \\\"Exchange: adapter not found\\\");\\r\\n\\r\\n        // using delegatecall for gas savings (no need to transfer tokens\\r\\n        // to adapter)\\r\\n        bytes memory returnedData = adapter.functionDelegateCall(\\r\\n            abi.encodeWithSelector(enterPoolSigHash, edge.pool, from, amountIn)\\r\\n        );\\r\\n        // extract return value from delegatecall\\r\\n        return abi.decode(returnedData, (uint256));\\r\\n    }\\r\\n\\r\\n    function _exitLiquidityPool(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amountIn\\r\\n    ) private returns (uint256) {\\r\\n        LpToken memory edge = lpTokens[from];\\r\\n        address adapter = adapters[edge.swapProtocol];\\r\\n        require(adapter != address(0), \\\"Exchange: adapter not found\\\");\\r\\n\\r\\n        // using delegatecall for gas savings (no need to transfer tokens\\r\\n        // to adapter)\\r\\n        bytes memory returnedData = adapter.functionDelegateCall(\\r\\n            abi.encodeWithSelector(exitPoolSigHash, edge.pool, to, amountIn)\\r\\n        );\\r\\n        // extract return value from delegatecall\\r\\n        return abi.decode(returnedData, (uint256));\\r\\n    }\\r\\n\\r\\n    function reverseRouteEdge(RouteEdge memory route)\\r\\n        private\\r\\n        pure\\r\\n        returns (RouteEdge memory)\\r\\n    {\\r\\n        address cache = route.fromCoin;\\r\\n        route.fromCoin = route.toCoin;\\r\\n        route.toCoin = cache;\\r\\n\\r\\n        return route;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IWrappedEther {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function approve(address guy, uint256 wad) external returns (bool);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 wad\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function transfer(address dst, uint256 wad) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IExchangeAdapter {\\r\\n    // 0x6012856e  =>  executeSwap(address,address,address,uint256)\\r\\n    function executeSwap(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    // 0x73ec962e  =>  enterPool(address,address,uint256)\\r\\n    function enterPool(\\r\\n        address pool,\\r\\n        address fromToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    // 0x660cb8d4  =>  exitPool(address,address,uint256)\\r\\n    function exitPool(\\r\\n        address pool,\\r\\n        address toToken,\\r\\n        uint256 amount\\r\\n    ) external payable returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gnosis\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTesting\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approveCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buildRoute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.RouteEdge[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"name\":\"createApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.RouteEdge[][]\",\"name\":\"routes\",\"type\":\"tuple[][]\"}],\"name\":\"createInternalMajorRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.LpToken[]\",\"name\":\"edges\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"lpTokensAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"entryCoins\",\"type\":\"address[][]\"}],\"name\":\"createLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.RouteEdge[]\",\"name\":\"edges\",\"type\":\"tuple[]\"}],\"name\":\"createMinorCoinEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"removeMajor\",\"type\":\"bool\"}],\"name\":\"deleteInternalMajorRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"edges\",\"type\":\"address[]\"}],\"name\":\"deleteLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"edges\",\"type\":\"address[]\"}],\"name\":\"deleteMinorCoinEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterPoolSigHash\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSwapSigHash\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPoolSigHash\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getMajorRoute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.RouteEdge[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMajorCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minorCoins\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"swapProtocol\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCoin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters_\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"protocolId\",\"type\":\"uint32[]\"}],\"name\":\"registerAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"name\":\"removeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"protocolId\",\"type\":\"uint32[]\"}],\"name\":\"unregisterAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedEther\",\"outputs\":[{\"internalType\":\"contract IWrappedEther\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}