{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract EmergencyWithdraw is OwnableUpgradeable {\\n  event Received(address sender, uint amount);\\n\\n  /**\\n   * @dev allow contract to receive ethers\\n   */\\n  receive() external payable {\\n    emit Received(_msgSender(), msg.value);\\n  }\\n\\n  /**\\n   * @dev get the eth balance on the contract\\n   * @return eth balance\\n   */\\n  function getEthBalance() external view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n  /**\\n   * @dev withdraw eth balance\\n   */\\n  function emergencyWithdrawEthBalance(address _to, uint _amount) external onlyOwner {\\n    require(_to != address(0), \\\"Invalid to\\\");\\n    payable(_to).transfer(_amount);\\n  }\\n\\n  /**\\n   * @dev get the token balance\\n   * @param _tokenAddress token address\\n   */\\n  function getTokenBalance(address _tokenAddress) external view returns (uint) {\\n    IERC20 erc20 = IERC20(_tokenAddress);\\n    return erc20.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev withdraw token balance\\n   * @param _tokenAddress token address\\n   */\\n  function emergencyWithdrawTokenBalance(\\n    address _tokenAddress,\\n    address _to,\\n    uint _amount\\n  ) external onlyOwner {\\n    IERC20 erc20 = IERC20(_tokenAddress);\\n    erc20.transfer(_to, _amount);\\n  }\\n}\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint internal constant WAD = 10**18;\\n  uint internal constant RAY = 10**27;\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  //rounds to zero if x*y < WAD / 2\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n  }\\n\\n  //rounds to zero if x*y < RAY / 2\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //    x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //    floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n\\n  // MATH Exponentiation\\n  // x ^ n using base b\\n  // EX: rpow(1.1 ether, 30e6, 1 ether) = (1.1 ^ 30e6) ether\\n  function rpow(\\n    uint x,\\n    uint n,\\n    uint b\\n  ) internal pure returns (uint z) {\\n    // solhint-disable no-inline-assembly\\n    assembly {\\n      switch x\\n      case 0 {\\n        switch n\\n        case 0 {\\n          z := b\\n        }\\n        default {\\n          z := 0\\n        }\\n      }\\n      default {\\n        switch mod(n, 2)\\n        case 0 {\\n          z := b\\n        }\\n        default {\\n          z := x\\n        }\\n        let half := div(b, 2) // for rounding.\\n        for {\\n          n := div(n, 2)\\n        } n {\\n          n := div(n, 2)\\n        } {\\n          let xx := mul(x, x)\\n          if iszero(eq(div(xx, x), x)) {\\n            revert(0, 0)\\n          }\\n          let xxRound := add(xx, half)\\n          if lt(xxRound, xx) {\\n            revert(0, 0)\\n          }\\n          x := div(xxRound, b)\\n          if mod(n, 2) {\\n            let zx := mul(z, x)\\n            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n              revert(0, 0)\\n            }\\n            let zxRound := add(zx, half)\\n            if lt(zxRound, zx) {\\n              revert(0, 0)\\n            }\\n            z := div(zxRound, b)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\\ncontract Staking is OwnableUpgradeable, ReentrancyGuardUpgradeable, EmergencyWithdraw, DSMath {\\n  using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n  struct UserInfo {\\n    address addr; // Address of user\\n    uint256 amount; // How many staked tokens the user has provided\\n    uint256 lastRewardTime; // Last reward time\\n    uint256 depositTime; // Last deposit time\\n    uint256 lockDuration; // Lock duration in seconds\\n    bool registered; // It will add user in address list on first deposit\\n  }\\n\\n  struct UserLog {\\n    address addr; // Address of user\\n    uint256 amount1; // Raw amount of token\\n    uint256 amount2; // Amount after tax of token in Deposit case.\\n    uint256 amount3; // Pending reward\\n    bool isDeposit; // Deposit or withdraw\\n    uint256 logTime; // Log timestamp\\n  }\\n\\n  // Percentage nominator: 1% = 100\\n  uint256 private constant _RATE_NOMINATOR = 10_000;\\n  // Total second in a year\\n  uint256 public constant SECONDS_YEAR = 365 days;\\n\\n  // The reward token\\n  IERC20MetadataUpgradeable public rewardToken;\\n  // The staked token\\n  IERC20MetadataUpgradeable public stakedToken;\\n\\n  // Info of each user that stakes tokens (stakedToken)\\n  mapping(address => UserInfo) public userInfo;\\n  // User list\\n  address[] public userList;\\n  // User logs\\n  UserLog[] private _userLogs;\\n\\n  // Max reward tokens per pool\\n  uint256 public maxRewardPerPool;\\n  // Claimed reward tokens per pool\\n  uint256 public claimedRewardPerPool;\\n  // Max staked tokens per pool\\n  uint256 public maxStakedPerPool;\\n  // Whether a limit is set for users\\n  bool public hasUserLimit;\\n  // Max staked tokens per user (0 if none)\\n  uint256 public maxStakedPerUser;\\n  // Fixed APY, default is 100%\\n  uint256 public fixedAPY;\\n  // Pool mode: AUTO COMPOUND as default\\n  bool public isAutoCompound;\\n\\n  // Current staked tokens per pool\\n  uint256 public currentStakedPerPool;\\n  // The Pool start time.\\n  uint256 public startTime;\\n  // The Pool end time.\\n  uint256 public endTime;\\n  // Freeze start time\\n  uint256 public freezeStartTime;\\n  // Freeze end time\\n  uint256 public freezeEndTime;\\n  // Minimum deposit amount\\n  uint256 public minDepositAmount;\\n  // Time for withdraw. Allow user can withdraw if block.timestamp >= withdrawTime\\n  uint256 public withdrawTime;\\n  // Withdraw mode\\n  // 0: Apply withdrawTime to both (stake + reward)\\n  // 1: Apply withdrawTime to stake\\n  // 2: Apply withdrawTime to reward\\n  uint256 public withdrawMode;\\n  // Global lock to user mode\\n  bool public enableLockToUser;\\n  // Global lock duration\\n  uint256 public lockDuration;\\n\\n  // Operator\\n  mapping(address => bool) public isOperator;\\n\\n  event UserDeposit(address indexed user, uint256 amount);\\n  event UserWithdraw(address indexed user, uint256 amount);\\n  event NewStartAndEndTimes(uint256 startTime, uint256 endTime);\\n  event NewFreezeTimes(uint256 freezeStartTime, uint256 freezeEndTime);\\n\\n  /**\\n   * @dev Upgradable initializer\\n   */\\n  function __Staking_init(\\n    IERC20MetadataUpgradeable _stakedToken,\\n    IERC20MetadataUpgradeable _rewardToken,\\n    uint256 _maxStakedPerPool,\\n    uint256 _startTime,\\n    uint256 _endTime,\\n    uint256 _maxStakedPerUser,\\n    uint256 _minDepositAmount,\\n    uint256 _withdrawTime,\\n    uint256 _withdrawMode,\\n    uint256 _fixedAPY,\\n    bool _isAutoCompound,\\n    address _admin\\n  ) external initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n\\n    stakedToken = _stakedToken;\\n    rewardToken = _rewardToken;\\n    maxStakedPerPool = _maxStakedPerPool;\\n\\n    // 100% = 10000 = _RATE_NOMINATOR\\n    fixedAPY = _fixedAPY;\\n    isAutoCompound = _isAutoCompound;\\n    startTime = _startTime;\\n    endTime = _endTime;\\n    minDepositAmount = _minDepositAmount;\\n    withdrawTime = _withdrawTime;\\n    withdrawMode = _withdrawMode;\\n\\n    if (_maxStakedPerUser > 0) {\\n      hasUserLimit = true;\\n      maxStakedPerUser = _maxStakedPerUser;\\n    }\\n\\n    if (_admin != _msgSender()) {\\n      // Transfer ownership to the admin address who becomes owner of the contract\\n      transferOwnership(_admin);\\n    }\\n    enableLockToUser = true;\\n  }\\n\\n\\n\\n  /**\\n   * @dev Function to add a account to blacklist\\n   */\\n  function fSetOperator(address _pAccount, bool _pStatus) external onlyOwner {\\n    require(isOperator[_pAccount] != _pStatus, \\\"Added\\\");\\n    isOperator[_pAccount] = _pStatus;\\n  }\\n\\n  /*\\n   * @notice Compound mode is only enabled when stake token = reward token and isAutoCompound is true\\n   */\\n  function canCompound() public view returns (bool) {\\n    return address(stakedToken) == address(rewardToken) && isAutoCompound;\\n  }\\n\\n  /*\\n   * @notice Update compound mode\\n   */\\n  function setCompound(bool _mode) external onlyOwner {\\n    isAutoCompound = _mode;\\n  }\\n\\n  /*\\n   * @notice Get remaining reward\\n   */\\n  function getRemainingReward() public view returns (uint256) {\\n    if (maxRewardPerPool > claimedRewardPerPool) return maxRewardPerPool - claimedRewardPerPool;\\n    return 0;\\n  }\\n\\n  /*\\n   * @notice View function to see pending reward on frontend.\\n   * @param _user: user address\\n   * @return Pending reward for a given user\\n   */\\n  function getPendingReward(address _user) public view returns (uint256) {\\n    UserInfo storage user = userInfo[_user];\\n    uint userReward;\\n    if (block.timestamp > user.lastRewardTime && currentStakedPerPool != 0) {\\n      uint256 multiplier = _getMultiplier(user.lastRewardTime, block.timestamp);\\n      if (multiplier == 0) return 0;\\n      if (canCompound()) {\\n        // APY = 100% = 1\\n        // SecondsPerYear = 365 * 24 * 60 * 60 = 31536000  (365 days)\\n        // Duration = n\\n        // InitialAmount = P\\n        // FinalAmount = P * ( 1 + APY/SecondsPerYear )^n\\n        // Compounded interest = FinalAmount - P;\\n        uint rate = rpow(WAD + (fixedAPY * WAD) / SECONDS_YEAR / _RATE_NOMINATOR, multiplier, WAD);\\n        userReward = wmul(user.amount, rate - WAD);\\n      } else {\\n        // FinalAmount = P * APY/SecondsPerYear * n\\n        // Compounded interest = FinalAmount - P;\\n        userReward = (user.amount * fixedAPY * multiplier) / SECONDS_YEAR / _RATE_NOMINATOR;\\n      }\\n    }\\n    return userReward;\\n  }\\n\\n  /*\\n   * @notice Deposit staked tokens and collect reward tokens (if any)\\n   * @param _amount: amount to withdraw (in rewardToken)\\n   */\\n  function deposit(uint256 _amount) external nonReentrant {\\n    require(isFrozen() == false, \\\"Deposit is frozen\\\");\\n    if (maxStakedPerPool > 0) {\\n      require((currentStakedPerPool + _amount) <= maxStakedPerPool, \\\"Exceed max staked tokens\\\");\\n    }\\n\\n    UserInfo storage user = userInfo[msg.sender];\\n    require((user.amount + _amount) >= minDepositAmount, \\\"User amount below minimum\\\");\\n\\n    if (hasUserLimit) {\\n      require((_amount + user.amount) <= maxStakedPerUser, \\\"User amount above limit\\\");\\n    }\\n\\n    user.depositTime = block.timestamp;\\n\\n    uint256 pending;\\n    if (user.amount > 0) {\\n      pending = getPendingReward(msg.sender);\\n      if (pending > 0) {\\n        // If pool mode is non-compound -> transfer rewards to user\\n        // Otherwise, compound to user amount\\n        if (canCompound()) {\\n          user.amount += pending;\\n          currentStakedPerPool += pending;\\n          claimedRewardPerPool += pending;\\n        } else {\\n          _safeRewardTransfer(address(msg.sender), pending);\\n        }\\n        user.lastRewardTime = block.timestamp;\\n      }\\n    } else {\\n      if (user.registered == false) {\\n        userList.push(msg.sender);\\n        user.registered = true;\\n        user.addr = address(msg.sender);\\n        user.lastRewardTime = block.timestamp;\\n        // We're not apply lock per user this time\\n        user.lockDuration = 0;\\n      }\\n    }\\n\\n    uint256 addedAmount_;\\n    if (_amount > 0) {\\n      // Check real amount to avoid taxed token\\n      uint256 previousBalance_ = stakedToken.balanceOf(address(this));\\n      stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n      uint256 newBalance_ = stakedToken.balanceOf(address(this));\\n      addedAmount_ = newBalance_ - previousBalance_;\\n\\n      user.amount += addedAmount_;\\n      currentStakedPerPool += addedAmount_;\\n    }\\n    _addUserLog(msg.sender, _amount, addedAmount_, pending, true);\\n\\n    emit UserDeposit(msg.sender, _amount);\\n  }\\n\\n  /*\\n   * @notice Withdraw staked tokens and collect reward tokens\\n   * @param _amount: amount to withdraw (in rewardToken)\\n   */\\n  function withdraw(uint256 _amount) external nonReentrant {\\n    require(isFrozen() == false, \\\"Withdraw is frozen\\\");\\n    bool isClaim = _amount == 0;\\n\\n    UserInfo storage user = userInfo[msg.sender];\\n    if (withdrawMode == 0 || (withdrawMode == 1 && !isClaim) || (withdrawMode == 2 && isClaim)) {\\n      require(block.timestamp >= withdrawTime, \\\"Withdraw not available\\\");\\n      if (enableLockToUser) {\\n        require(block.timestamp >= user.depositTime + lockDuration, \\\"Global lock\\\");\\n      }\\n    }\\n\\n    // Claim reward\\n    uint256 pending = getPendingReward(msg.sender);\\n    if (pending > 0) {\\n      // If pool mode is non-compound -> transfer rewards to user\\n      // Otherwise, compound to user amount\\n      if (canCompound()) {\\n        user.amount += pending;\\n        currentStakedPerPool += pending;\\n        claimedRewardPerPool += pending;\\n      } else {\\n        _safeRewardTransfer(address(msg.sender), pending);\\n      }\\n      user.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Unstake\\n    if (_amount > 0) {\\n      require(block.timestamp >= user.depositTime + user.lockDuration, \\\"Locked\\\");\\n\\n      if (_amount > user.amount) {\\n        // Exit pool, withdraw all\\n        _amount = user.amount;\\n      }\\n      user.amount -= _amount;\\n      currentStakedPerPool -= _amount;\\n      stakedToken.safeTransfer(address(msg.sender), _amount);\\n    }\\n\\n    _addUserLog(msg.sender, _amount, 0, pending, false);\\n\\n\\n\\n    emit UserWithdraw(msg.sender, _amount);\\n  }\\n\\n\\n\\n  /*\\n   * @notice Add user log\\n   */\\n  function _addUserLog(\\n    address _addr,\\n    uint256 _amount1,\\n    uint256 _amount2,\\n    uint256 _amount3,\\n    bool _isDeposit\\n  ) private {\\n    _userLogs.push(UserLog(_addr, _amount1, _amount2, _amount3, _isDeposit, block.timestamp));\\n  }\\n\\n  /*\\n   * @notice Return length of user logs\\n   */\\n  function getUserLogLength() external view returns (uint) {\\n    return _userLogs.length;\\n  }\\n\\n  /*\\n   * @notice View function to get user logs.\\n   * @param _offset: offset for paging\\n   * @param _limit: limit for paging\\n   * @return get users, next offset and total users\\n   */\\n  function getUserLogsPaging(uint _offset, uint _limit)\\n    external\\n    view\\n    returns (\\n      UserLog[] memory users,\\n      uint nextOffset,\\n      uint total\\n    )\\n  {\\n    uint totalUsers = _userLogs.length;\\n    if (_limit == 0) {\\n      _limit = 1;\\n    }\\n\\n    if (_limit > totalUsers - _offset) {\\n      _limit = totalUsers - _offset;\\n    }\\n\\n    UserLog[] memory values = new UserLog[](_limit);\\n    for (uint i = 0; i < _limit; i++) {\\n      values[i] = _userLogs[_offset + i];\\n    }\\n\\n    return (values, _offset + _limit, totalUsers);\\n  }\\n\\n  /*\\n   * @notice return length of user addresses\\n   */\\n  function getUserListLength() external view returns (uint) {\\n    return userList.length;\\n  }\\n\\n  /*\\n   * @notice View function to get users.\\n   * @param _offset: offset for paging\\n   * @param _limit: limit for paging\\n   * @return get users, next offset and total users\\n   */\\n  function getUsersPaging(uint _offset, uint _limit)\\n    external\\n    view\\n    returns (\\n      UserInfo[] memory users,\\n      uint nextOffset,\\n      uint total\\n    )\\n  {\\n    uint totalUsers = userList.length;\\n    if (_limit == 0) {\\n      _limit = 1;\\n    }\\n\\n    if (_limit > totalUsers - _offset) {\\n      _limit = totalUsers - _offset;\\n    }\\n\\n    UserInfo[] memory values = new UserInfo[](_limit);\\n    for (uint i = 0; i < _limit; i++) {\\n      values[i] = userInfo[userList[_offset + i]];\\n    }\\n\\n    return (values, _offset + _limit, totalUsers);\\n  }\\n\\n  /*\\n   * @notice isFrozed returns if contract is frozen, user cannot call deposit, withdraw, emergencyWithdraw function\\n   * If this pool link with another ico project, the pool will be frozen when it's raising\\n   */\\n  function isFrozen() public view returns (bool) {\\n    return block.timestamp >= freezeStartTime && block.timestamp <= freezeEndTime;\\n  }\\n\\n  /*\\n   * @notice Reset user state\\n   * @dev Needs to be for emergency.\\n   */\\n  function resetUserState(\\n    address _userAddress,\\n    uint256 _amount,\\n    uint256 _lastRewardTime,\\n    uint256 _depositTime,\\n    uint256 _lockDuration,\\n    bool _registered\\n  ) external onlyOwner {\\n    UserInfo storage user = userInfo[msg.sender];\\n    user.addr = _userAddress;\\n    user.amount = _amount;\\n    user.lastRewardTime = _lastRewardTime;\\n    user.depositTime = _depositTime;\\n    user.lockDuration = _lockDuration;\\n    user.registered = _registered;\\n  }\\n\\n  /*\\n   * @notice Stop rewards\\n   * @dev Only callable by owner. Needs to be for emergency.\\n   */\\n  function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\n    maxRewardPerPool -= _amount;\\n    rewardToken.safeTransfer(address(msg.sender), _amount);\\n  }\\n\\n  /*\\n   * @dev Update lock to user mode\\n   */\\n  function setEnableLockToUser(bool _enable) external onlyOwner {\\n    enableLockToUser = _enable;\\n  }\\n\\n  /*\\n   * @dev Update lock duration\\n   */\\n  function setLockDuration(uint256 _duration) external onlyOwner {\\n    lockDuration = _duration;\\n  }\\n\\n  /*\\n   * @dev Reset user deposit time\\n   */\\n  function resetUserDepositTime(address _user, uint256 _time) external onlyOwner {\\n    userInfo[_user].depositTime = _time;\\n  }\\n\\n  /**\\n   * @notice It allows the admin to reward tokens\\n   * @param _amount: amount of tokens\\n   * @dev This function is only callable by admin.\\n   */\\n  function addRewardTokens(uint256 _amount) external onlyOwner {\\n    // Check real amount to avoid taxed token\\n    uint256 previousBalance_ = rewardToken.balanceOf(address(this));\\n    rewardToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n    uint256 newBalance_ = rewardToken.balanceOf(address(this));\\n    uint256 addedAmount_ = newBalance_ - previousBalance_;\\n\\n    maxRewardPerPool += addedAmount_;\\n  }\\n\\n  /*\\n   * @notice Stop rewards\\n   * @dev Only callable by owner\\n   */\\n  function stopReward() external onlyOwner {\\n    endTime = block.timestamp;\\n  }\\n\\n  /*\\n   * @notice Stop Freeze\\n   * @dev Only callable by owner\\n   */\\n  function stopFreeze() external onlyOwner {\\n    freezeStartTime = 0;\\n    freezeEndTime = 0;\\n  }\\n\\n  /*\\n   * @notice Update pool limit per user\\n   * @dev Only callable by owner.\\n   * @param _hasUserLimit: whether the limit remains forced\\n   * @param _maxStakedPerUser: new pool limit per user\\n   */\\n  function updateMaxStakedPerUser(bool _hasUserLimit, uint256 _maxStakedPerUser) external onlyOwner {\\n    require(hasUserLimit, \\\"Must be set\\\");\\n    if (_hasUserLimit) {\\n      require(_maxStakedPerUser > maxStakedPerUser, \\\"New limit must be higher\\\");\\n      maxStakedPerUser = _maxStakedPerUser;\\n    } else {\\n      hasUserLimit = _hasUserLimit;\\n      maxStakedPerUser = 0;\\n    }\\n  }\\n\\n  /*\\n   * @notice Update reward per block\\n   * @dev Only callable by owner.\\n   * @param _maxStakedPerPool: Max tokens can be staked to this pool\\n   */\\n  function updateMaxStakedPerPool(uint256 _maxStakedPerPool) external onlyOwner {\\n    maxStakedPerPool = _maxStakedPerPool;\\n  }\\n\\n  /**\\n   * @notice It allows the admin to update start and end times\\n   * @dev This function is only callable by owner.\\n   * @param _startTime: the new start time\\n   * @param _endTime: the new end time\\n   */\\n  function updateStartAndEndTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\\n    require(block.timestamp > endTime, \\\"Pool has started\\\");\\n    require(_startTime < _endTime, \\\"Invalid start and end time\\\");\\n    endTime = _endTime;\\n\\n    if (_startTime > block.timestamp) {\\n      startTime = _startTime;\\n    }\\n    emit NewStartAndEndTimes(_startTime, _endTime);\\n  }\\n\\n  /**\\n   * @notice It allows the admin to update freeze start and end times\\n   * @dev This function is only callable by owner.\\n   * @param _freezeStartTime: the new freeze start time\\n   * @param _freezeEndTime: the new freeze end time\\n   */\\n  function updateFreezeTimes(uint256 _freezeStartTime, uint256 _freezeEndTime) external onlyOwner {\\n    require(_freezeStartTime < _freezeEndTime, \\\"Invalid start and end time\\\");\\n    require(block.timestamp < _freezeStartTime, \\\"Invalid start and current\\\");\\n\\n    freezeStartTime = _freezeStartTime;\\n    freezeEndTime = _freezeEndTime;\\n    emit NewFreezeTimes(freezeStartTime, freezeEndTime);\\n  }\\n\\n  /**\\n   * @notice Update minimum deposit amount\\n   * @dev This function is only callable by owner.\\n   * @param _minDepositAmount: the new minimum deposit amount\\n   */\\n  function updateMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\\n    minDepositAmount = _minDepositAmount;\\n  }\\n\\n  /**\\n   * @dev Update withdraw config\\n   * @param _time: time for withdraw\\n   * @param _mode: withdraw mode\\n   * 0: Apply withdrawTime to both (stake + reward)\\n   * 1: Apply withdrawTime to stake\\n   * 2: Apply withdrawTime to reward\\n   */\\n  function updateWithdrawConfig(uint256 _time, uint256 _mode) external onlyOwner {\\n    withdrawTime = _time;\\n    withdrawMode = _mode;\\n  }\\n\\n  /*\\n   * @notice Return reward multiplier over the given _from to _to time.\\n   * @param _from: time to start\\n   * @param _to: time to finish\\n   */\\n  function _getMultiplier(uint256 _from, uint256 _to) private view returns (uint256) {\\n    if (_from < startTime) _from = startTime;\\n    if (_to > endTime) _to = endTime;\\n    if (_from >= _to) return 0;\\n    return _to - _from;\\n  }\\n\\n  /*\\n   * @notice transfer reward tokens.\\n   * @param _to: address where tokens will transfer\\n   * @param _amount: amount of tokens\\n   */\\n  function _safeRewardTransfer(address _to, uint256 _amount) private {\\n    uint256 rewardBal = rewardToken.balanceOf(address(this));\\n    uint256 remaining = getRemainingReward();\\n    if (remaining > rewardBal) {\\n      remaining = rewardBal;\\n    }\\n\\n    if (_amount > remaining) {\\n      claimedRewardPerPool += remaining;\\n      rewardToken.safeTransfer(_to, remaining);\\n    } else {\\n      claimedRewardPerPool += _amount;\\n      rewardToken.safeTransfer(_to, _amount);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeEndTime\",\"type\":\"uint256\"}],\"name\":\"NewFreezeTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SECONDS_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakedPerPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakedPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedAPY\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoCompound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__Staking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedRewardPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakedPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawEthBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLockToUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_pStatus\",\"type\":\"bool\"}],\"name\":\"fSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserLogLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getUserLogsPaging\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"logTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.UserLog[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getUsersPaging\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakedPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakedPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"resetUserDepositTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_registered\",\"type\":\"bool\"}],\"name\":\"resetUserState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\"}],\"name\":\"setCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableLockToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freezeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freezeEndTime\",\"type\":\"uint256\"}],\"name\":\"updateFreezeTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStakedPerPool\",\"type\":\"uint256\"}],\"name\":\"updateMaxStakedPerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakedPerUser\",\"type\":\"uint256\"}],\"name\":\"updateMaxStakedPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}