{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ASMR.sol\": {\r\n      \"content\": \"/*\\n* NFT Lottery powered by ChainLink....shhhh.....\\n* 10% buy taxes / 15% sell taxes\\n* Website: https://ASMRtoken.com\\n* Telegram: https://t.me/ASMRtoken\\n* Twitter: https://twitter.com/ASMRERC20\\n* NFT Lottery Contract: 0x7754feb3015376ecb625efdb503adf75315a1246\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IUniswapV2Router02 {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ncontract ASMR is Ownable, IERC20 {\\n    bool private _swapping;\\n    uint256 public _launched;\\n\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply = 10000000000 * 10**9;\\n    uint256 private _txLimit = 30000000 * 10**9;\\n\\n    string private _name = \\\"ASMR\\\";\\n    string private _symbol = \\\"ASMR\\\";\\n    uint8 private _decimals = 9;\\n    uint8 private _buyTax = 10;\\n    uint8 private _sellTax = 15;\\n\\n    mapping (address => bool) private _blacklist;\\n    mapping (address => bool) private _excludedAddress;\\n    mapping (address => uint) private _cooldown;\\n    bool public _cooldownEnabled = false;\\n\\n    address private _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private _uniswapV2Pair;\\n    address private _dev;\\n    IUniswapV2Router02 private UniV2Router;\\n\\n    constructor(address dev) {\\n        _dev = dev;\\n        _balances[owner()] = _totalSupply;\\n        _excludedAddress[owner()] = true;\\n        _excludedAddress[_dev] = true;\\n        _excludedAddress[address(this)] = true;\\n        UniV2Router = IUniswapV2Router02(_uniRouter);\\n    }\\n\\n    modifier devOrOwner() {\\n        require(owner() == _msgSender() || _dev == _msgSender(), \\\"Caller is not the owner or dev\\\");\\n        _;\\n    }\\n\\n    modifier lockSwap {\\n        _swapping = true;\\n        _;\\n        _swapping = false;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function isBuy(address sender) private view returns (bool) {\\n        return sender == _uniswapV2Pair;\\n    }\\n\\n    function trader(address sender, address recipient) private view returns (bool) {\\n        return !(_excludedAddress[sender] ||  _excludedAddress[recipient]);\\n    }\\n\\n    function txRestricted(address sender, address recipient) private view returns (bool) {\\n        return sender == _uniswapV2Pair && recipient != address(_uniRouter) && !_excludedAddress[recipient];\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        require (_allowances[sender][_msgSender()] >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(_balances[sender] >= amount, \\\"ERC20: transfer exceeds balance\\\");\\n        require(amount > 0, \\\"ERC20: cannot transfer zero\\\");\\n        require(!_blacklist[sender] && !_blacklist[recipient] && !_blacklist[tx.origin]);\\n\\n        uint256 taxedAmount = amount;\\n        uint256 tax = 0;\\n\\n        if (trader(sender, recipient)) {\\n             require (_launched != 0, \\\"ASMR: trading not enabled\\\");\\n            if (txRestricted(sender, recipient)){\\n                require(amount <= _txLimit, \\\"ASMR: max tx buy limit\\\");\\n                 if (_cooldownEnabled) {\\n                    require(_cooldown[recipient] < block.timestamp);\\n                    _cooldown[recipient] = block.timestamp + 30 seconds;\\n                }\\n            }\\n            tax = amount * _buyTax / 100;\\n            taxedAmount = amount - tax;\\n            if (!isBuy(sender)){\\n                tax = amount * _sellTax / 100;\\n                taxedAmount = amount - tax;\\n                if (_balances[address(this)] > 100 * 10**9 && !_swapping) {\\n                    uint256 _swapAmount = _balances[address(this)];\\n                    if (_swapAmount > amount * 40 / 100) _swapAmount = amount * 40 / 100;\\n                    _tokensToETH(_swapAmount);\\n                }\\n            }\\n        }\\n\\n        _balances[address(this)] += tax;\\n        _balances[recipient] += taxedAmount;\\n        _balances[sender] -= amount;\\n        \\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function whisperSoftly() external onlyOwner {\\n        require (_launched <= block.number, \\\"ASMR: already launched...\\\");\\n        _cooldownEnabled = true;\\n        _launched = block.number;\\n    }\\n\\n    function reduceBuyTax(uint8 newTax) external onlyOwner {\\n        require (newTax < _buyTax, \\\"ASMR: new tax must be lower - tax can only go down!\\\");\\n        _buyTax = newTax;\\n    }\\n\\n    function setPair(address pairAddress) external onlyOwner {\\n        _uniswapV2Pair = pairAddress;\\n    }\\n\\n    function setCooldownEnabled(bool cooldownEnabled) external onlyOwner {\\n        _cooldownEnabled = cooldownEnabled;\\n    }\\n\\n    function reduceSellTax(uint8 newTax) external onlyOwner {\\n        require (newTax < _sellTax, \\\"ASMR: new tax must be lower - tax can only go down!\\\");\\n        _sellTax = newTax;\\n    }\\n\\n    function _transferETH(uint256 amount, address payable _to) private {\\n        (bool sent, ) = payable(_to).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function _tokensToETH(uint256 amount) private lockSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UniV2Router.WETH();\\n        _approve(address(this), _uniRouter, amount);\\n        UniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\\n        if (address(this).balance > 0) \\n        {\\n            _transferETH(address(this).balance, payable(_dev));\\n        }\\n    }\\n\\n    // State of the art bot banning software starts here\\n    // =============================================================================\\n    function blacklistBots(address[] memory wallet) external onlyOwner {\\n        for (uint i = 0; i < wallet.length; i++) {\\n        \\t    _blacklist[wallet[i]] = true;\\n        }\\n    }\\n\\n    function rmBlacklist(address wallet) external onlyOwner {\\n        _blacklist[wallet] = false;\\n    }\\n\\n    function checkIfBlacklist(address wallet) public view returns (bool) {\\n        return _blacklist[wallet];\\n    }\\n    // State of the art bot banning software ends here\\n    // =============================================================================\\n\\n    function _setTxLimit(uint256 txLimit) external devOrOwner {\\n        require(txLimit >= _txLimit, \\\"ASMR: tx limit can only go up!\\\");\\n        _txLimit = txLimit;\\n    }\\n\\n    function changeDev(address dev) external devOrOwner {\\n        _dev = dev;\\n    }\\n\\n    function failsafeTokenSwap() external devOrOwner {\\n        //In case router clogged\\n        _tokensToETH(_balances[address(this)]);\\n    }\\n\\n    function failsafeETHtransfer() external devOrOwner {\\n        (bool sent, ) = payable(_msgSender()).call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"_setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"}],\"name\":\"blacklistBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeETHtransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"reduceBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newTax\",\"type\":\"uint8\"}],\"name\":\"reduceSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"cooldownEnabled\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whisperSoftly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ASMR", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009b92e39c89a124b1f251141492e7fce257d61bd0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}