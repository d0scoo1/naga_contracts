{"status": "1", "message": "OK", "result": [{"SourceCode": "// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/RoborovskiMetadataStore.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract RoborovskiMetadataStore is Ownable {\r\n    bytes2 public constant IPFS_PREFIX = 0x1220;\r\n    bytes internal constant _ALPHABET =\r\n        \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n\r\n    mapping(uint256 => bytes32) private ipfsHashBytes;\r\n    mapping(uint256 => bytes13) private traitBytes;\r\n\r\n    function storeMetadata(\r\n        uint256[] memory tokenIds,\r\n        bytes32[] memory ipfsHex,\r\n        bytes13[] memory traitsHex\r\n    ) public onlyOwner {\r\n        require(\r\n            tokenIds.length == ipfsHex.length &&\r\n                tokenIds.length == traitsHex.length,\r\n            \"Not equal length\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            ipfsHashBytes[tokenId] = ipfsHex[i];\r\n            traitBytes[tokenId] = traitsHex[i];\r\n        }\r\n    }\r\n\r\n    function getIpfsHashHex(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return abi.encodePacked(IPFS_PREFIX, ipfsHashBytes[tokenId]);\r\n    }\r\n\r\n    function getIpfsHash(uint256 tokenId) public view returns (string memory) {\r\n        return _toBase58(getIpfsHashHex(tokenId));\r\n    }\r\n\r\n    function getTraitBytes(uint256 tokenId) public view returns (bytes memory) {\r\n        return abi.encodePacked(traitBytes[tokenId]);\r\n    }\r\n\r\n    // Source: verifyIPFS (https://github.com/MrChico/verifyIPFS/blob/master/contracts/verifyIPFS.sol)\r\n    // @author Martin Lundfall (martin.lundfall@consensys.net)\r\n    // @dev Converts hex string to base 58\r\n    function _toBase58(bytes memory source)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (source.length == 0) return new string(0);\r\n        uint8[] memory digits = new uint8[](46);\r\n        digits[0] = 0;\r\n        uint8 digitlength = 1;\r\n        for (uint256 i = 0; i < source.length; ++i) {\r\n            uint256 carry = uint8(source[i]);\r\n            for (uint256 j = 0; j < digitlength; ++j) {\r\n                carry += uint256(digits[j]) * 256;\r\n                digits[j] = uint8(carry % 58);\r\n                carry = carry / 58;\r\n            }\r\n\r\n            while (carry > 0) {\r\n                digits[digitlength] = uint8(carry % 58);\r\n                digitlength++;\r\n                carry = carry / 58;\r\n            }\r\n        }\r\n        return string(_toAlphabet(_reverse(_truncate(digits, digitlength))));\r\n    }\r\n\r\n    function _truncate(uint8[] memory array, uint8 length)\r\n        internal\r\n        pure\r\n        returns (uint8[] memory)\r\n    {\r\n        uint8[] memory output = new uint8[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            output[i] = array[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function _reverse(uint8[] memory input)\r\n        internal\r\n        pure\r\n        returns (uint8[] memory)\r\n    {\r\n        uint8[] memory output = new uint8[](input.length);\r\n        for (uint256 i = 0; i < input.length; i++) {\r\n            output[i] = input[input.length - 1 - i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function _toAlphabet(uint8[] memory indices)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory output = new bytes(indices.length);\r\n        for (uint256 i = 0; i < indices.length; i++) {\r\n            output[i] = _ALPHABET[indices[i]];\r\n        }\r\n        return output;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IPFS_PREFIX\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIpfsHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIpfsHashHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ipfsHex\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes13[]\",\"name\":\"traitsHex\",\"type\":\"bytes13[]\"}],\"name\":\"storeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoborovskiMetadataStore", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7524ec8e5b585e18f23323989a05ec836753d5bee20f1b851d3c1b7c72ab3714"}]}