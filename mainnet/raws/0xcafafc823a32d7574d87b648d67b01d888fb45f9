{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"YOLKAirdrop2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//$YOLK is NOT an investment and has NO economic value. \\r\\n//It will be earned by active holding within the Hatchlingz ecosystem. \\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n// import \\\"./Context.sol\\\";\\r\\n\\r\\n\\r\\ninterface IHatchlingz {\\r\\n    function _walletBalanceOfLegendary(address owner) external view returns (uint256);\\r\\n    function _walletBalanceOfRare(address owner) external view returns (uint256);\\r\\n    function _walletBalanceOfCommon(address owner) external view returns (uint256);\\r\\n    function _walletBalanceOfEggs(address owner) external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IYolk {\\r\\n    function transfer(address recipient, uint256 amount) external;\\r\\n    function balanceOf(address account) external returns (uint256);\\r\\n  \\r\\n}\\r\\n\\r\\ncontract YolkAirdrop2 is Ownable {\\r\\n\\r\\n    IHatchlingz public Hatchlingz;\\r\\n    IYolk public Yolk;\\r\\n\\r\\n    uint256 public airdropAmount = 100 ether;\\r\\n\\r\\n    mapping(address =\\u003e bool) private receivedAirdrop;\\r\\n  \\r\\n    constructor(address HatchlingzAddress, address YolkAddress)  {\\r\\n        Hatchlingz = IHatchlingz(HatchlingzAddress);\\r\\n        Yolk = IYolk(YolkAddress);\\r\\n    }\\r\\n \\r\\n    function setAirdropAmount(uint256 newAmount) external onlyOwner {\\r\\n        airdropAmount = newAmount;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n        // Yolk.balanceOf(address(this));\\r\\n        Yolk.transfer(msg.sender, Yolk.balanceOf(address(this)));\\r\\n            }\\r\\n\\r\\n    function YolkAirdropForEachHatchlingz(uint256 perHatchlingzAmount) external onlyOwner {\\r\\n\\r\\n        for(uint i=1 ; i \\u003c= Hatchlingz.totalSupply() ; i++){\\r\\n            Yolk.transfer(Hatchlingz.ownerOf(i), perHatchlingzAmount);\\r\\n\\r\\n        }\\r\\n       \\r\\n\\r\\n    }\\r\\n\\r\\n     function YolkAirdropForMint() external onlyOwner {\\r\\n\\r\\n        for(uint i=1 ; i \\u003c= Hatchlingz.totalSupply() ; i++){\\r\\n            if( receivedAirdrop[Hatchlingz.ownerOf(i)] == false){\\r\\n                Yolk.transfer(Hatchlingz.ownerOf(i), airdropAmount);\\r\\n                receivedAirdrop[Hatchlingz.ownerOf(i)] = true;\\r\\n            }\\r\\n\\r\\n        }\\r\\n         for(uint i=1 ; i \\u003c= Hatchlingz.totalSupply() ; i++){\\r\\n           receivedAirdrop[Hatchlingz.ownerOf(i)] = false;\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setYolk(address yolkAddress) external onlyOwner {\\r\\n        Yolk = IYolk(yolkAddress);\\r\\n    }\\r\\n    \\r\\n    function setHatchlingz(address hatchlingzAddress) external onlyOwner {\\r\\n        Hatchlingz = IHatchlingz(hatchlingzAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n \\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"HatchlingzAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"YolkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Hatchlingz\",\"outputs\":[{\"internalType\":\"contract IHatchlingz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Yolk\",\"outputs\":[{\"internalType\":\"contract IYolk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perHatchlingzAmount\",\"type\":\"uint256\"}],\"name\":\"YolkAirdropForEachHatchlingz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YolkAirdropForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hatchlingzAddress\",\"type\":\"address\"}],\"name\":\"setHatchlingz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yolkAddress\",\"type\":\"address\"}],\"name\":\"setYolk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YolkAirdrop2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000581616396252a34970b8f9944d854c5181b24de700000000000000000000000068f488c5265bc6a240d4af9a1c4ec2e7b51d3d18", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40a83b3b221340c8cbc1d27753bf5abc51f07b769ac48611380195767e3a19de"}]}