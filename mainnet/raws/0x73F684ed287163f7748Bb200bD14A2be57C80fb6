{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LostSocksGenesisV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ControllableUpgradeable} from \\\"./base/ControllableUpgradeable.sol\\\";\\nimport {ERC721AUpgradeable} from \\\"./base/ERC721AUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport {ILostSocksThread} from \\\"./interfaces/ILostSocksThread.sol\\\";\\n\\n/// @title Lost Socks Genesis V3\\ncontract LostSocksGenesisV3 is\\n  Initializable,\\n  OwnableUpgradeable,\\n  PausableUpgradeable,\\n  ControllableUpgradeable,\\n  ERC721AUpgradeable\\n{\\n  using StringsUpgradeable for uint256;\\n  using MerkleProofUpgradeable for bytes32[];\\n\\n  event NameChange(uint256 indexed id, string newName);\\n  event DescriptionChange(uint256 indexed id, string newDescription);\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                Token Details                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Max genesis token count.\\n  uint256 public constant LSG_MAX = 2_500;\\n\\n  /// @notice Max mints per transaction.\\n  uint256 public constant LSG_PER_TX = 10;\\n\\n  /// @notice Max mints at presale.\\n  uint256 public constant LSG_PER_WL = 3;\\n\\n  /// @notice Purchase price.\\n  uint256 public constant LSG_PRICE = 0.069 ether;\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                Utility Token                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Utility token use for changing name / description.\\n  ILostSocksThread public utilityToken;\\n\\n  /// @notice Price of utilityToken to change name\\n  uint256 public nameChangePrice;\\n\\n  /// @notice Price of utilityToken to change description\\n  uint256 public descriptionChangePrice;\\n\\n  /// @notice false = cant change name/description\\n  bool public renameState;\\n\\n  /// @notice Name of token by ID\\n  mapping(uint256 => string) public nameOf;\\n\\n  /// @notice Description of token by ID\\n  mapping(uint256 => string) public descriptionOf;\\n\\n  /// @notice Name of token by ID\\n  mapping(string => bool) internal _isNameReserved;\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                Sale Details                                */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice 0 = CLOSED, 1 = WHITELIST, 2 = PUBLIC.\\n  uint256 public saleState;\\n\\n  /// @notice Whitelist merkle root.\\n  bytes32 public root;\\n\\n  /// @notice Amount of tokens minted by address during presale.\\n  mapping(address => uint256) public presaleBought;\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                              Metadata Details                              */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Token metadata uri.\\n  string public baseURI;\\n\\n  /// @notice Token metadata uri hosted on ipfs.\\n  string public ipfsURI;\\n\\n  /// @notice An array of bitpacked uint256 to keep track of left/right token traits.\\n  uint256[] internal _dna;\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                             Marketplace Details                            */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Check if marketplaces pre-approve is enabled.\\n  bool public marketplacesApproved;\\n\\n  /// @notice OpenSea proxy registry.\\n  address public opensea;\\n\\n  /// @notice LooksRare marketplace transfer manager.\\n  address public looksrare;\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               Reedem Details                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice End time for reedems.\\n  uint256 public redeemEnd;\\n\\n  /// @notice token id => redeem state.\\n  mapping(uint256 => bool) public redeemed;\\n\\n  function initialize(\\n    string memory newBaseURI,\\n    address newUtilityToken,\\n    bytes32 newRoot\\n  ) external initializer {\\n    // Initialize the contract\\n    __Ownable_init();\\n    __Pausable_init();\\n    __Controllable_init();\\n    __ERC721A_init(\\\"Lost Socks Genesis\\\", \\\"LSG\\\");\\n\\n    // Set initializer variables\\n    baseURI = newBaseURI;\\n    utilityToken = ILostSocksThread(newUtilityToken);\\n    root = newRoot;\\n\\n    // Set initial variables\\n    opensea = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\\n    looksrare = 0xf42aa99F011A1fA7CDA90E5E98b277E306BcA83e;\\n    marketplacesApproved = true;\\n    nameChangePrice = 50 ether;\\n    descriptionChangePrice = 50 ether;\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                 Sale Logic                                 */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Purchase one or more Lost Socks tokens.\\n  /// @param amount Number of tokens to buy.\\n  function buy(uint256 amount) external payable {\\n    if (block.timestamp <= redeemEnd) {\\n      require(totalSupply() + amount <= LSG_MAX - 423, \\\"Max genesis supply exceeded\\\");\\n    } else {\\n      require(totalSupply() + amount <= LSG_MAX, \\\"Max genesis supply exceeded\\\");\\n    }\\n\\n    if (msg.sender != owner()) {\\n      require(saleState == 2, \\\"Invalid sale state\\\");\\n      require(msg.value == LSG_PRICE * amount, \\\"Invalid ether amount\\\");\\n      require(amount > 0 && amount <= LSG_PER_TX, \\\"Invalid claim amount\\\");\\n    }\\n\\n    _safeMint(msg.sender, amount);\\n  }\\n\\n  /// @notice Redeem new genesis tokens for each old one you have.\\n  /// @param ids Array of token ids.\\n  function redeem(uint256[] calldata ids) external {\\n    require(block.timestamp <= redeemEnd, \\\"Reedem window already closed\\\");\\n    for (uint256 i; i < ids.length; i++) {\\n      require(!redeemed[ids[i]] && ids[i] < 474 && ids[i] > 49, \\\"Invalid token id\\\");\\n      require(ownerOf(ids[i]) == msg.sender, \\\"ERC721: caller is not the owner\\\");\\n      redeemed[ids[i]] = true;\\n    }\\n\\n    _safeMint(msg.sender, ids.length);\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                       Change name / description                            */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Change name of token.\\n  /// @param id Token id.\\n  /// @param newName New token name.\\n  function changeName(uint256 id, string memory newName) public {\\n    require(renameState, \\\"Changing name is not allowed\\\");\\n    require(msg.sender == ownerOf(id), \\\"ERC721: caller is not the owner\\\");\\n    require(isValidName(newName) == true, \\\"Invalid new name\\\");\\n    require(sha256(bytes(newName)) != sha256(bytes(nameOf[id])), \\\"New name already set\\\");\\n    require(isNameReserved(newName) == false, \\\"New name already reserved\\\");\\n\\n    // Burn utility token\\n    utilityToken.burn(msg.sender, nameChangePrice);\\n\\n    // If already named, de-reserve old name\\n    if (bytes(nameOf[id]).length > 0) _setIsNameReserved(nameOf[id], false);\\n    _setIsNameReserved(newName, true);\\n\\n    // Set new name and emit event\\n    nameOf[id] = newName;\\n    emit NameChange(id, newName);\\n  }\\n\\n  /// @notice Change description of token.\\n  /// @param id Token id.\\n  /// @param newDescription New token description.\\n  function changeDescription(uint256 id, string memory newDescription) public {\\n    require(renameState, \\\"Changing description is not allowed\\\");\\n    require(msg.sender == ownerOf(id), \\\"ERC721: caller is not the owner\\\");\\n\\n    // burn utility token\\n    utilityToken.burn(msg.sender, descriptionChangePrice);\\n\\n    descriptionOf[id] = newDescription;\\n    emit DescriptionChange(id, newDescription);\\n  }\\n\\n  /// @notice Set if a name is reserved.\\n  /// @param str Token name.\\n  /// @param isReserved New reserved state.\\n  function _setIsNameReserved(string memory str, bool isReserved) internal {\\n    _isNameReserved[toLower(str)] = isReserved;\\n  }\\n\\n  /// @notice Check if name is reserved.\\n  /// @param str Name to be checked.\\n  function isNameReserved(string memory str) public view returns (bool) {\\n    return _isNameReserved[toLower(str)];\\n  }\\n\\n  /// @notice Check if name is valid.\\n  /// @param str Name to be checked.\\n  function isValidName(string memory str) public pure returns (bool) {\\n    bytes memory bStr = bytes(str);\\n\\n    if (bStr.length == 0) return false; // Empty\\n    if (bStr.length > 25) return false; // Longer than 25 characters\\n    if (bStr[0] == 0x20) return false; // Leading space\\n    if (bStr[bStr.length - 1] == 0x20) return false; // Trailing space\\n\\n    bytes1 lastChar = bStr[0];\\n    for (uint256 i; i < bStr.length; i++) {\\n      bytes1 char = bStr[i];\\n      if (char == 0x20 && lastChar == 0x20) return false; // Continous spaces\\n      if (\\n        !(char >= 0x30 && char <= 0x39) && // 9-0\\n        !(char >= 0x41 && char <= 0x5A) && // A-Z\\n        !(char >= 0x61 && char <= 0x7A) && // a-z\\n        !(char == 0x20) // space\\n      ) return false;\\n\\n      lastChar = char;\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Convert string to lower.\\n  /// @param str Name to be checked.\\n  function toLower(string memory str) public pure returns (string memory) {\\n    bytes memory bStr = bytes(str);\\n    bytes memory bLower = new bytes(bStr.length);\\n    for (uint256 i = 0; i < bStr.length; i++) {\\n      // Uppercase character\\n      if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n        bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n      } else bLower[i] = bStr[i];\\n    }\\n    return string(bLower);\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               Metadata Logic                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Retrieve if a sock position is left (rare trait).\\n  /// @param tokenId Sock token id.\\n  function isLeft(uint256 tokenId) external view returns (bool) {\\n    require(_exists(tokenId), \\\"Query for nonexisting token\\\");\\n    uint256 tokenIndex = tokenId % 256;\\n    uint256 dnaIndex = (tokenId - tokenIndex) / 256;\\n    return (_dna[dnaIndex] >> tokenIndex) & 1 == 1;\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                 Owner Logic                                */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Set redeemEnd to `newRedeemEnd`.\\n  /// @param newRedeemEnd New redeem end.\\n  function setRedeemEnd(uint256 newRedeemEnd) external onlyOwner {\\n    redeemEnd = newRedeemEnd;\\n  }\\n\\n  /// @notice Set baseURI to `newBaseURI`.\\n  /// @param newBaseURI New base uri.\\n  function setBaseURI(string memory newBaseURI) external onlyOwner {\\n    baseURI = newBaseURI;\\n  }\\n\\n  /// @notice Set ipfsURI to `newIpfsURI`.\\n  /// @param newIpfsURI New IPFS base uri.\\n  function setIpfsURI(string memory newIpfsURI) external onlyOwner {\\n    ipfsURI = newIpfsURI;\\n  }\\n\\n  /// @notice Set `_dna` to `newDNA`.\\n  /// @param newDNA New dna bytes.\\n  function setDNA(uint256[] memory newDNA) external onlyOwner {\\n    _dna = newDNA;\\n  }\\n\\n  /// @notice Set saleState.\\n  /// @param newSaleState New sale state.\\n  function setSaleState(uint256 newSaleState) external onlyOwner {\\n    saleState = newSaleState;\\n  }\\n\\n  /// @notice Set marketplace addresses.\\n  /// @param newOpensea Opensea's proxy registry contract address.\\n  /// @param newLooksrare Looksrare's transfer manager contract address.\\n  function setMarketplaces(address newOpensea, address newLooksrare) external onlyOwner {\\n    opensea = newOpensea;\\n    looksrare = newLooksrare;\\n  }\\n\\n  /// @notice Set root.\\n  /// @param newRoot New merkle root.\\n  function setRoot(bytes32 newRoot) external onlyOwner {\\n    root = newRoot;\\n  }\\n\\n  /// @notice Set utilityToken\\n  /// @param newUtilityToken new token\\n  function setUtilityToken(address newUtilityToken) external onlyOwner {\\n    utilityToken = ILostSocksThread(newUtilityToken);\\n  }\\n\\n  /// @notice Set saleState.\\n  /// @param newRenameState New rename state.\\n  function setRenameState(bool newRenameState) external onlyOwner {\\n    renameState = newRenameState;\\n  }\\n\\n  /// @notice Set rename prices\\n  /// @param newNameChangePrice new nameChangePrice\\n  /// @param newDescriptionChangePrice new descriptionChangePrice\\n  function setRenamePrices(uint256 newNameChangePrice, uint256 newDescriptionChangePrice) external onlyOwner {\\n    nameChangePrice = newNameChangePrice;\\n    descriptionChangePrice = newDescriptionChangePrice;\\n  }\\n\\n  /// @notice Add or edit contract controllers.\\n  /// @param addrs Array of addresses to be added/edited.\\n  /// @param state New controller state of addresses.\\n  function setControllers(address[] calldata addrs, bool state) external onlyOwner {\\n    for (uint256 i = 0; i < addrs.length; i++) super._setController(addrs[i], state);\\n  }\\n\\n  /// @notice Toggle marketplaces pre-approve feature.\\n  function toggleMarketplacesApproved() external onlyOwner {\\n    marketplacesApproved = !marketplacesApproved;\\n  }\\n\\n  /// @notice Toggle contract paused state.\\n  function togglePaused() external onlyOwner {\\n    if (paused()) _unpause();\\n    else _pause();\\n  }\\n\\n  /// @notice Withdraw ether from the contract.\\n  function withdraw() external {\\n    address creatorAddress = 0x0EA462f88BFA7ed17041381350976B145D12f011;\\n    address developerAddress = 0x74D864Bcd1a8ba1c1851E2CAEc33760f83dfF837;\\n\\n    uint256 creatorAmount = (address(this).balance * 7930) / 10000;\\n    uint256 developerAmount = (address(this).balance * 2070) / 10000;\\n\\n    (bool success1, ) = creatorAddress.call{value: creatorAmount}(\\\"\\\");\\n    (bool success2, ) = developerAddress.call{value: developerAmount}(\\\"\\\");\\n    require(success1 && success2, \\\"Withdraw failed\\\");\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                ERC-721 Logic                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice See {ERC721-tokenURI}.\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n    return string(abi.encodePacked(baseURI, tokenId.toString()));\\n  }\\n\\n  /// @notice Retrieve tokens owned by `account`.\\n  /// @param account Token owner.\\n  function walletOfOwner(address account) external view returns (uint256[] memory) {\\n    uint256 balance = super.balanceOf(account);\\n    uint256[] memory ids = new uint256[](balance);\\n\\n    for (uint256 i = 0; i < balance; i++) ids[i] = super.tokenOfOwnerByIndex(account, i);\\n    return ids;\\n  }\\n\\n  /// @notice See {ERC721-isApprovedForAll}.\\n  /// @dev Overriden to bypass marketplace operators, pre-approving sales.\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    bool isMarketplace = operator == address(ProxyRegistry(opensea).proxies(owner)) || operator == looksrare;\\n\\n    if (!marketplacesApproved)\\n      return isMarketplace || isController(operator) || super.isApprovedForAll(owner, operator);\\n    return isController(operator) || super.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @notice See {ERC721A-_beforeTokenTransfers}\\n  /// @dev Overriden to block transfer while contract is paused (avoiding bugs).\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal override whenNotPaused {\\n    super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n  }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/ControllableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title Controllable Upgradeable\\nabstract contract ControllableUpgradeable is Initializable {\\n  /// @notice address => is controller.\\n  mapping(address => bool) private _isController;\\n\\n  /// @notice Require the caller to be a controller.\\n  modifier onlyController() {\\n    require(_isController[msg.sender], \\\"Controllable: Caller is not a controller\\\");\\n    _;\\n  }\\n\\n  function __Controllable_init() internal onlyInitializing {\\n    __Controllable_init_unchained();\\n  }\\n\\n  function __Controllable_init_unchained() internal onlyInitializing {}\\n\\n  /// @notice Check if `addr` is a controller.\\n  function isController(address addr) public view returns (bool) {\\n    return _isController[addr];\\n  }\\n\\n  /// @notice Set the `addr` controller status to `status`.\\n  function _setController(address addr, bool status) internal {\\n    _isController[addr] = status;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721AUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165Upgradeable,\\n  IERC721Upgradeable,\\n  IERC721MetadataUpgradeable,\\n  IERC721EnumerableUpgradeable\\n{\\n  using AddressUpgradeable for address;\\n  using StringsUpgradeable for uint256;\\n\\n  // Compiler will pack this into a single 256bit word.\\n  struct TokenOwnership {\\n    // The address of the owner.\\n    address addr;\\n    // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    uint64 startTimestamp;\\n    // Whether the token has been burned.\\n    bool burned;\\n  }\\n\\n  // Compiler will pack this into a single 256bit word.\\n  struct AddressData {\\n    // Realistically, 2**64-1 is more than enough.\\n    uint64 balance;\\n    // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberMinted;\\n    // Keeps track of burn count with minimal overhead for tokenomics.\\n    uint64 numberBurned;\\n  }\\n\\n  // Compiler will pack the following\\n  // _currentIndex and _burnCounter into a single 256bit word.\\n\\n  // The tokenId of the next token to be minted.\\n  uint128 internal _currentIndex;\\n\\n  // The number of tokens burned.\\n  uint128 internal _burnCounter;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n    __ERC721_init_unchained(name_, symbol_);\\n  }\\n\\n  function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    // Counter underflow is impossible as _burnCounter cannot be incremented\\n    // more than _currentIndex times\\n    unchecked {\\n      return _currentIndex - _burnCounter;\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    uint256 numMintedSoFar = _currentIndex;\\n    uint256 tokenIdsIdx;\\n\\n    // Counter overflow is impossible as the loop breaks when\\n    // uint256 i is equal to another uint256 numMintedSoFar.\\n    unchecked {\\n      for (uint256 i; i < numMintedSoFar; i++) {\\n        TokenOwnership memory ownership = _ownerships[i];\\n        if (!ownership.burned) {\\n          if (tokenIdsIdx == index) {\\n            return i;\\n          }\\n          tokenIdsIdx++;\\n        }\\n      }\\n    }\\n    revert TokenIndexOutOfBounds();\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n    if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n    uint256 numMintedSoFar = _currentIndex;\\n    uint256 tokenIdsIdx;\\n    address currOwnershipAddr;\\n\\n    // Counter overflow is impossible as the loop breaks when\\n    // uint256 i is equal to another uint256 numMintedSoFar.\\n    unchecked {\\n      for (uint256 i; i < numMintedSoFar; i++) {\\n        TokenOwnership memory ownership = _ownerships[i];\\n        if (ownership.burned) {\\n          continue;\\n        }\\n        if (ownership.addr != address(0)) {\\n          currOwnershipAddr = ownership.addr;\\n        }\\n        if (currOwnershipAddr == owner) {\\n          if (tokenIdsIdx == index) {\\n            return i;\\n          }\\n          tokenIdsIdx++;\\n        }\\n      }\\n    }\\n\\n    // Execution should never reach this point.\\n    revert();\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721Upgradeable).interfaceId ||\\n      interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n      interfaceId == type(IERC721EnumerableUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    if (owner == address(0)) revert MintedQueryForZeroAddress();\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  function _numberBurned(address owner) internal view returns (uint256) {\\n    if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n    return uint256(_addressData[owner].numberBurned);\\n  }\\n\\n  /**\\n   * Gas spent here starts off proportional to the maximum mint batch size.\\n   * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n   */\\n  function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n    uint256 curr = tokenId;\\n\\n    unchecked {\\n      if (curr < _currentIndex) {\\n        TokenOwnership memory ownership = _ownerships[curr];\\n        if (!ownership.burned) {\\n          if (ownership.addr != address(0)) {\\n            return ownership;\\n          }\\n          // Invariant:\\n          // There will always be an ownership that has an address and is not burned\\n          // before an ownership that does not have an address and is not burned.\\n          // Hence, curr will not underflow.\\n          while (true) {\\n            curr--;\\n            ownership = _ownerships[curr];\\n            if (ownership.addr != address(0)) {\\n              return ownership;\\n            }\\n          }\\n        }\\n      }\\n    }\\n    revert OwnerQueryForNonexistentToken();\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n    string memory baseURI = _baseURI();\\n    return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n    if (to == owner) revert ApprovalToCurrentOwner();\\n\\n    if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n      revert ApprovalCallerNotOwnerNorApproved();\\n    }\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    if (operator == _msgSender()) revert ApproveToCaller();\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    _transfer(from, to, tokenId);\\n    if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n      revert TransferToNonERC721ReceiverImplementer();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n  }\\n\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    _mint(to, quantity, _data, true);\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` must be greater than 0.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data,\\n    bool safe\\n  ) internal {\\n    uint256 startTokenId = _currentIndex;\\n    if (to == address(0)) revert MintToZeroAddress();\\n    if (quantity == 0) revert MintZeroQuantity();\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    // Overflows are incredibly unrealistic.\\n    // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n    // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n    unchecked {\\n      _addressData[to].balance += uint64(quantity);\\n      _addressData[to].numberMinted += uint64(quantity);\\n\\n      _ownerships[startTokenId].addr = to;\\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n      uint256 updatedIndex = startTokenId;\\n\\n      for (uint256 i; i < quantity; i++) {\\n        emit Transfer(address(0), to, updatedIndex);\\n        if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n          revert TransferToNonERC721ReceiverImplementer();\\n        }\\n        updatedIndex++;\\n      }\\n\\n      _currentIndex = uint128(updatedIndex);\\n    }\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n      isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n      getApproved(tokenId) == _msgSender());\\n\\n    if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n    if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n    if (to == address(0)) revert TransferToZeroAddress();\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n    unchecked {\\n      _addressData[from].balance -= 1;\\n      _addressData[to].balance += 1;\\n\\n      _ownerships[tokenId].addr = to;\\n      _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n      uint256 nextTokenId = tokenId + 1;\\n      if (_ownerships[nextTokenId].addr == address(0)) {\\n        // This will suffice for checking _exists(nextTokenId),\\n        // as a burned slot cannot contain the zero address.\\n        if (nextTokenId < _currentIndex) {\\n          _ownerships[nextTokenId].addr = prevOwnership.addr;\\n          _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n        }\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    // Underflow of the sender's balance is impossible because we check for\\n    // ownership above and the recipient's balance can't realistically overflow.\\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n    unchecked {\\n      _addressData[prevOwnership.addr].balance -= 1;\\n      _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n      // Keep track of who burned the token, and the timestamp of burning.\\n      _ownerships[tokenId].addr = prevOwnership.addr;\\n      _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n      _ownerships[tokenId].burned = true;\\n\\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n      uint256 nextTokenId = tokenId + 1;\\n      if (_ownerships[nextTokenId].addr == address(0)) {\\n        // This will suffice for checking _exists(nextTokenId),\\n        // as a burned slot cannot contain the zero address.\\n        if (nextTokenId < _currentIndex) {\\n          _ownerships[nextTokenId].addr = prevOwnership.addr;\\n          _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n        }\\n      }\\n    }\\n\\n    emit Transfer(prevOwnership.addr, address(0), tokenId);\\n    _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n    unchecked {\\n      _burnCounter++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n        return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert TransferToNonERC721ReceiverImplementer();\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   * And also called before burning one token.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, `tokenId` will be burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   * And also called after one token has been burned.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` has been minted for `to`.\\n   * - When `to` is zero, `tokenId` has been burned by `from`.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILostSocksThread.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ILostSocksThread {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1024\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"DescriptionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LSG_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LSG_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LSG_PER_WL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LSG_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptionChangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"descriptionOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newUtilityToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipfsURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"isNameReserved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"isValidName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameChangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renameState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newDNA\",\"type\":\"uint256[]\"}],\"name\":\"setDNA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newIpfsURI\",\"type\":\"string\"}],\"name\":\"setIpfsURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOpensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newLooksrare\",\"type\":\"address\"}],\"name\":\"setMarketplaces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRedeemEnd\",\"type\":\"uint256\"}],\"name\":\"setRedeemEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNameChangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDescriptionChangePrice\",\"type\":\"uint256\"}],\"name\":\"setRenamePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newRenameState\",\"type\":\"bool\"}],\"name\":\"setRenameState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSaleState\",\"type\":\"uint256\"}],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUtilityToken\",\"type\":\"address\"}],\"name\":\"setUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"toLower\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilityToken\",\"outputs\":[{\"internalType\":\"contract ILostSocksThread\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LostSocksGenesisV3", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1024", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}