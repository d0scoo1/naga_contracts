{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/impl/StrategyBalStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\nimport \\\"../strategies/balancer/BalStakingStrategyBase.sol\\\";\\n\\ncontract StrategyBalStaking is BalStakingStrategyBase {\\n\\n  // !!! ONLY CONSTANTS AND DYNAMIC ARRAYS/MAPS !!!\\n  // push elements to arrays instead of predefine setup\\n  address private constant _BPT_BAL_WETH = 0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56;\\n  address private constant _BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\n  address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  address[] private _assets;\\n  address[] private _poolRewards;\\n\\n  function initialize(\\n    address controller_,\\n    address vault_,\\n    address depositor_,\\n    address veLocker_\\n  ) external initializer {\\n    _assets.push(_BAL);\\n    _assets.push(_WETH);\\n    _poolRewards.push(_BAL);\\n    BalStakingStrategyBase.initializeStrategy(\\n      controller_,\\n      _BPT_BAL_WETH,\\n      vault_,\\n      _poolRewards,\\n      veLocker_,\\n      depositor_\\n    );\\n  }\\n\\n  // assets should reflect underlying tokens need to investing\\n  function assets() external override view returns (address[] memory) {\\n    return _assets;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/balancer/BalStakingStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@tetu_io/tetu-contracts/contracts/base/strategies/ProxyStrategyBase.sol\\\";\\nimport \\\"./IBalLocker.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts/contracts/base/SlotsLib.sol\\\";\\nimport \\\"../../third_party/balancer/IBVault.sol\\\";\\n\\n/// @title Base contract for BAL stake into veBAL pool\\n/// @author belbix\\nabstract contract BalStakingStrategyBase is ProxyStrategyBase {\\n  using SafeERC20 for IERC20;\\n  using SlotsLib for bytes32;\\n\\n  // --------------------- CONSTANTS -------------------------------\\n  /// @notice Strategy type for statistical purposes\\n  string public constant override STRATEGY_NAME = \\\"BalStakingStrategyBase\\\";\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant VERSION = \\\"1.1.0\\\";\\n  /// @dev 0% buybacks, all should be done on polygon\\n  ///      Probably we will change it later\\n  uint256 private constant _BUY_BACK_RATIO = 0;\\n\\n  address private constant _BAL_TOKEN = 0xba100000625a3754423978a60c9317c58a424e3D;\\n  address private constant _WETH_TOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  address private constant _BB_USD_TOKEN = 0x7B50775383d3D6f0215A8F290f2C9e2eEBBEceb2;\\n  address private constant _BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n  bytes32 private constant _WETH_BB_USD_POOL_ID = 0x70b7d3b3209a59fb0400e17f67f3ee8c37363f4900020000000000000000018f;\\n  bytes32 private constant _WETH_BAL_POOL_ID = 0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014;\\n\\n  bytes32 internal constant _VE_LOCKER_KEY = bytes32(uint256(keccak256(\\\"s.ve_locker\\\")) - 1);\\n  bytes32 internal constant _DEPOSITOR_KEY = bytes32(uint256(keccak256(\\\"s.depositor\\\")) - 1);\\n\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function initializeStrategy(\\n    address controller_,\\n    address underlying_,\\n    address vault_,\\n    address[] memory rewardTokens_,\\n    address veLocker_,\\n    address depositor_\\n  ) public initializer {\\n    _VE_LOCKER_KEY.set(veLocker_);\\n    _DEPOSITOR_KEY.set(depositor_);\\n    ProxyStrategyBase.initializeStrategyBase(\\n      controller_,\\n      underlying_,\\n      vault_,\\n      rewardTokens_,\\n      _BUY_BACK_RATIO\\n    );\\n\\n    IERC20(underlying_).safeApprove(veLocker_, type(uint256).max);\\n  }\\n\\n\\n  // --------------------------------------------\\n\\n  /// @dev Contract for bridge assets between networks\\n  function depositor() external view returns (address){\\n    return _DEPOSITOR_KEY.getAddress();\\n  }\\n\\n\\n  function veLocker() external view returns (address) {\\n    return _VE_LOCKER_KEY.getAddress();\\n  }\\n\\n  /// @dev Set locker if empty\\n  function setVeLocker(address newVeLocker) external {\\n    require(_VE_LOCKER_KEY.getAddress() == address(0), \\\"Not zero locker\\\");\\n    _VE_LOCKER_KEY.set(newVeLocker);\\n    IERC20(_underlying()).safeApprove(newVeLocker, type(uint256).max);\\n  }\\n\\n  // --------------------------------------------\\n\\n  /// @notice Return only pool balance. Assume that we ALWAYS invest on vault deposit action\\n  function investedUnderlyingBalance() external override view returns (uint) {\\n    return _rewardPoolBalance();\\n  }\\n\\n  /// @dev Returns underlying balance in the pool\\n  function _rewardPoolBalance() internal override view returns (uint256) {\\n    return IBalLocker(_VE_LOCKER_KEY.getAddress()).investedUnderlyingBalance();\\n  }\\n\\n  /// @dev Collect profit and do something useful with them\\n  function doHardWork() external override {\\n    address _depositor = _DEPOSITOR_KEY.getAddress();\\n    require(msg.sender == _depositor, \\\"Not depositor\\\");\\n\\n    IERC20[] memory rtToClaim = new IERC20[](1);\\n\\n    // claim BAL rewards\\n    rtToClaim[0] = IERC20(_BAL_TOKEN);\\n    IBalLocker(_VE_LOCKER_KEY.getAddress()).claimVeRewards(rtToClaim, _depositor);\\n\\n    // claim bb-usd rewards\\n    rtToClaim[0] = IERC20(_BB_USD_TOKEN);\\n    IBalLocker(_VE_LOCKER_KEY.getAddress()).claimVeRewards(rtToClaim, address(this));\\n\\n    uint amount = IERC20(_BB_USD_TOKEN).balanceOf(address(this));\\n\\n    if (amount != 0) {\\n\\n      // bbUSD token already have max allowance for balancer vault\\n\\n      IBVault.BatchSwapStep[] memory swaps = new IBVault.BatchSwapStep[](2);\\n\\n      IAsset[] memory assets = new IAsset[](3);\\n      assets[0] = IAsset(_BB_USD_TOKEN);\\n      assets[1] = IAsset(_WETH_TOKEN);\\n      assets[2] = IAsset(_BAL_TOKEN);\\n\\n      IBVault.FundManagement memory fundManagement = IBVault.FundManagement({\\n      sender : address(this),\\n      fromInternalBalance : false,\\n      recipient : payable (_depositor),\\n      toInternalBalance : false\\n      });\\n\\n      int256[] memory limits = new int256[](3);\\n      limits[0] = type(int256).max;\\n      limits[1] = type(int256).max;\\n      limits[2] = type(int256).max;\\n\\n      // set first step\\n      swaps[0] = IBVault.BatchSwapStep({\\n      poolId : _WETH_BB_USD_POOL_ID,\\n      assetInIndex : 0,\\n      assetOutIndex : 1,\\n      amount : amount,\\n      userData : \\\"\\\"\\n      });\\n\\n      // set second step\\n      swaps[1] = IBVault.BatchSwapStep({\\n      poolId : _WETH_BAL_POOL_ID,\\n      assetInIndex : 1,\\n      assetOutIndex : 2,\\n      amount : 0,\\n      userData : \\\"\\\"\\n      });\\n\\n      IBVault(_BALANCER_VAULT).batchSwap(\\n        IBVault.SwapKind.GIVEN_IN,\\n        swaps,\\n        assets,\\n        fundManagement,\\n        limits,\\n        block.timestamp\\n      );\\n\\n    }\\n  }\\n\\n  /// @dev Stake underlying to the pool with maximum lock period\\n  function depositToPool(uint256 amount) internal override {\\n    if (amount > 0) {\\n      address locker = _VE_LOCKER_KEY.getAddress();\\n      IERC20(_underlying()).safeTransfer(locker, amount);\\n      IBalLocker(locker).depositVe(amount);\\n    }\\n  }\\n\\n  /// @dev We will not able to withdraw from the pool\\n  function withdrawAndClaimFromPool(uint256) internal pure override {\\n    revert(\\\"BSS: Withdraw forbidden\\\");\\n  }\\n\\n  /// @dev Curve implementation does not have emergency withdraw\\n  function emergencyWithdrawFromPool() internal pure override {\\n    revert(\\\"BSS: Withdraw forbidden\\\");\\n  }\\n\\n  /// @dev No claimable tokens\\n  function readyToClaim() external view override returns (uint256[] memory) {\\n    uint256[] memory toClaim = new uint256[](_rewardTokens.length);\\n    return toClaim;\\n  }\\n\\n  /// @dev Return full amount of staked tokens\\n  function poolTotalAmount() external view override returns (uint256) {\\n    return IERC20(_underlying()).balanceOf(IBalLocker(_VE_LOCKER_KEY.getAddress()).VE_BAL());\\n  }\\n\\n  /// @dev Platform name for statistical purposes\\n  /// @return Platform enum index\\n  function platform() external override pure returns (Platform) {\\n    return Platform.BALANCER;\\n  }\\n\\n  function liquidateReward() internal pure override {\\n    // noop\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/strategies/ProxyStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\nimport \\\"../../openzeppelin/Math.sol\\\";\\r\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"./StrategyStorage.sol\\\";\\r\\nimport \\\"../governance/ControllableV2.sol\\\";\\r\\nimport \\\"../interface/IStrategy.sol\\\";\\r\\nimport \\\"../interface/IFeeRewardForwarder.sol\\\";\\r\\nimport \\\"../interface/IBookkeeper.sol\\\";\\r\\nimport \\\"../interface/ISmartVault.sol\\\";\\r\\nimport \\\"../../third_party/uniswap/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../../third_party/uniswap/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/// @title Abstract contract for base strategy functionality\\r\\n///        Implementation must support proxy\\r\\n/// @author belbix\\r\\nabstract contract ProxyStrategyBase is IStrategy, ControllableV2, StrategyStorage {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  uint internal constant _BUY_BACK_DENOMINATOR = 100_00;\\r\\n  uint internal constant _TOLERANCE_DENOMINATOR = 1000;\\r\\n\\r\\n  //************************ MODIFIERS **************************\\r\\n\\r\\n  /// @dev Only for linked Vault or Governance/Controller.\\r\\n  ///      Use for functions that should have strict access.\\r\\n  modifier restricted() {\\r\\n    require(msg.sender == _vault()\\r\\n    || msg.sender == address(_controller())\\r\\n      || IController(_controller()).governance() == msg.sender,\\r\\n      \\\"SB: Not Gov or Vault\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Extended strict access with including HardWorkers addresses\\r\\n  ///      Use for functions that should be called by HardWorkers\\r\\n  modifier hardWorkers() {\\r\\n    require(msg.sender == _vault()\\r\\n    || msg.sender == address(_controller())\\r\\n    || IController(_controller()).isHardWorker(msg.sender)\\r\\n      || IController(_controller()).governance() == msg.sender,\\r\\n      \\\"SB: Not HW or Gov or Vault\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Allow operation only for Controller\\r\\n  modifier onlyController() {\\r\\n    require(_controller() == msg.sender, \\\"SB: Not controller\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev This is only used in `investAllUnderlying()`\\r\\n  ///      The user can still freely withdraw from the strategy\\r\\n  modifier onlyNotPausedInvesting() {\\r\\n    require(!_onPause(), \\\"SB: Paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  /// @param _controller Controller address\\r\\n  /// @param _underlying Underlying token address\\r\\n  /// @param _vault SmartVault address that will provide liquidity\\r\\n  /// @param __rewardTokens Reward tokens that the strategy will farm\\r\\n  /// @param _bbRatio Buy back ratio\\r\\n  function initializeStrategyBase(\\r\\n    address _controller,\\r\\n    address _underlying,\\r\\n    address _vault,\\r\\n    address[] memory __rewardTokens,\\r\\n    uint _bbRatio\\r\\n  ) public initializer {\\r\\n    ControllableV2.initializeControllable(_controller);\\r\\n    require(ISmartVault(_vault).underlying() == _underlying, \\\"SB: Wrong underlying\\\");\\r\\n    require(IControllable(_vault).isController(_controller), \\\"SB: Wrong controller\\\");\\r\\n    _setUnderlying(_underlying);\\r\\n    _setVault(_vault);\\r\\n    require(_bbRatio <= _BUY_BACK_DENOMINATOR, \\\"SB: Too high buyback ratio\\\");\\r\\n    _setBuyBackRatio(_bbRatio);\\r\\n\\r\\n    // prohibit the movement of tokens that are used in the main logic\\r\\n    for (uint i = 0; i < __rewardTokens.length; i++) {\\r\\n      _rewardTokens.push(__rewardTokens[i]);\\r\\n      _unsalvageableTokens[__rewardTokens[i]] = true;\\r\\n    }\\r\\n    _unsalvageableTokens[_underlying] = true;\\r\\n    _setToleranceNumerator(999);\\r\\n  }\\r\\n\\r\\n  // *************** VIEWS ****************\\r\\n\\r\\n  /// @notice Reward tokens of external project\\r\\n  /// @return Reward tokens array\\r\\n  function rewardTokens() external view override returns (address[] memory) {\\r\\n    return _rewardTokens;\\r\\n  }\\r\\n\\r\\n  /// @notice Strategy underlying, the same in the Vault\\r\\n  /// @return Strategy underlying token\\r\\n  function underlying() external view override returns (address) {\\r\\n    return _underlying();\\r\\n  }\\r\\n\\r\\n  /// @notice Underlying balance of this contract\\r\\n  /// @return Balance of underlying token\\r\\n  function underlyingBalance() external view override returns (uint) {\\r\\n    return IERC20(_underlying()).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @notice SmartVault address linked to this strategy\\r\\n  /// @return Vault address\\r\\n  function vault() external view override returns (address) {\\r\\n    return _vault();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true for tokens that governance can't touch\\r\\n  /// @return True if given token unsalvageable\\r\\n  function unsalvageableTokens(address token) external override view returns (bool) {\\r\\n    return _unsalvageableTokens[token];\\r\\n  }\\r\\n\\r\\n  /// @notice Strategy buy back ratio\\r\\n  /// @return Buy back ratio\\r\\n  function buyBackRatio() external view override returns (uint) {\\r\\n    return _buyBackRatio();\\r\\n  }\\r\\n\\r\\n  /// @notice Return underlying balance + balance in the reward pool\\r\\n  /// @return Sum of underlying balances\\r\\n  function investedUnderlyingBalance() external override virtual view returns (uint) {\\r\\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\\r\\n    // both are in the units of \\\"underlying\\\"\\r\\n    // The second part is needed because there is the emergency exit mechanism\\r\\n    // which would break the assumption that all the funds are always inside of the reward pool\\r\\n    return _rewardPoolBalance() + IERC20(_underlying()).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function rewardPoolBalance() external override view returns (uint) {\\r\\n    return _rewardPoolBalance();\\r\\n  }\\r\\n\\r\\n  /// @dev When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\\r\\n  function pausedInvesting() external override view returns (bool) {\\r\\n    return _onPause();\\r\\n  }\\r\\n\\r\\n  //******************** GOVERNANCE *******************\\r\\n\\r\\n\\r\\n  /// @notice In case there are some issues discovered about the pool or underlying asset\\r\\n  ///         Governance can exit the pool properly\\r\\n  ///         The function is only used for emergency to exit the pool\\r\\n  ///         Pause investing\\r\\n  function emergencyExit() external override hardWorkers {\\r\\n    emergencyExitRewardPool();\\r\\n    _setOnPause(true);\\r\\n  }\\r\\n\\r\\n  /// @notice Pause investing into the underlying reward pools\\r\\n  function pauseInvesting() external override hardWorkers {\\r\\n    _setOnPause(true);\\r\\n  }\\r\\n\\r\\n  /// @notice Resumes the ability to invest into the underlying reward pools\\r\\n  function continueInvesting() external override restricted {\\r\\n    _setOnPause(false);\\r\\n  }\\r\\n\\r\\n  /// @notice Controller can claim coins that are somehow transferred into the contract\\r\\n  ///         Note that they cannot come in take away coins that are used and defined in the strategy itself\\r\\n  /// @param recipient Recipient address\\r\\n  /// @param recipient Token address\\r\\n  /// @param recipient Token amount\\r\\n  function salvage(address recipient, address token, uint amount)\\r\\n  external override onlyController {\\r\\n    // To make sure that governance cannot come in and take away the coins\\r\\n    require(!_unsalvageableTokens[token], \\\"SB: Not salvageable\\\");\\r\\n    IERC20(token).safeTransfer(recipient, amount);\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws all the asset to the vault\\r\\n  function withdrawAllToVault() external override hardWorkers {\\r\\n    exitRewardPool();\\r\\n    IERC20(_underlying()).safeTransfer(_vault(), IERC20(_underlying()).balanceOf(address(this)));\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws some asset to the vault\\r\\n  /// @param amount Asset amount\\r\\n  function withdrawToVault(uint amount) external override hardWorkers {\\r\\n    // Typically there wouldn't be any amount here\\r\\n    // however, it is possible because of the emergencyExit\\r\\n    uint uBalance = IERC20(_underlying()).balanceOf(address(this));\\r\\n    if (amount > uBalance) {\\r\\n      // While we have the check above, we still using SafeMath below\\r\\n      // for the peace of mind (in case something gets changed in between)\\r\\n      uint needToWithdraw = amount - uBalance;\\r\\n      uint toWithdraw = Math.min(_rewardPoolBalance(), needToWithdraw);\\r\\n      withdrawAndClaimFromPool(toWithdraw);\\r\\n    }\\r\\n    uBalance = IERC20(_underlying()).balanceOf(address(this));\\r\\n    uint amountAdjusted = Math.min(amount, uBalance);\\r\\n    require(amountAdjusted > amount * toleranceNumerator() / _TOLERANCE_DENOMINATOR, \\\"SB: Withdrew too low\\\");\\r\\n    IERC20(_underlying()).safeTransfer(_vault(), amountAdjusted);\\r\\n  }\\r\\n\\r\\n  /// @notice Stakes everything the strategy holds into the reward pool\\r\\n  function investAllUnderlying() external override hardWorkers onlyNotPausedInvesting {\\r\\n    _investAllUnderlying();\\r\\n  }\\r\\n\\r\\n  /// @dev Set withdraw loss tolerance numerator\\r\\n  function setToleranceNumerator(uint numerator) external restricted {\\r\\n    require(numerator <= _TOLERANCE_DENOMINATOR, \\\"SB: Too high\\\");\\r\\n    _setToleranceNumerator(numerator);\\r\\n  }\\r\\n\\r\\n  function setBuyBackRatio(uint value) external restricted {\\r\\n    require(value <= _BUY_BACK_DENOMINATOR, \\\"SB: Too high buyback ratio\\\");\\r\\n    _setBuyBackRatio(value);\\r\\n  }\\r\\n\\r\\n  // ***************** INTERNAL ************************\\r\\n\\r\\n  /// @notice Balance of given reward token on this contract\\r\\n  function _rewardBalance(uint rewardTokenIdx) internal view returns (uint) {\\r\\n    return IERC20(_rewardTokens[rewardTokenIdx]).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @dev Tolerance to difference between asked and received values on user withdraw action\\r\\n  ///      Where 0 is full tolerance, and range of 1-999 means how many % of tokens do you expect as minimum\\r\\n  function toleranceNumerator() internal view virtual returns (uint){\\r\\n    return _toleranceNumerator();\\r\\n  }\\r\\n\\r\\n  /// @notice Stakes everything the strategy holds into the reward pool\\r\\n  function _investAllUnderlying() internal {\\r\\n    // this check is needed, because most of the SNX reward pools will revert if\\r\\n    // you try to stake(0).\\r\\n    uint uBalance = IERC20(_underlying()).balanceOf(address(this));\\r\\n    if (uBalance > 0) {\\r\\n      depositToPool(uBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Withdraw everything from external pool\\r\\n  function exitRewardPool() internal virtual {\\r\\n    uint bal = _rewardPoolBalance();\\r\\n    if (bal != 0) {\\r\\n      withdrawAndClaimFromPool(bal);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Withdraw everything from external pool without caring about rewards\\r\\n  function emergencyExitRewardPool() internal {\\r\\n    uint bal = _rewardPoolBalance();\\r\\n    if (bal != 0) {\\r\\n      emergencyWithdrawFromPool();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Default implementation of liquidation process\\r\\n  ///      Send all profit to FeeRewardForwarder\\r\\n  function liquidateRewardDefault() internal {\\r\\n    _liquidateReward(true);\\r\\n  }\\r\\n\\r\\n  function liquidateRewardSilently() internal {\\r\\n    _liquidateReward(false);\\r\\n  }\\r\\n\\r\\n  function _liquidateReward(bool revertOnErrors) internal {\\r\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\r\\n    uint targetTokenEarnedTotal = 0;\\r\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\r\\n      address rt = _rewardTokens[i];\\r\\n      uint amount = IERC20(rt).balanceOf(address(this));\\r\\n      if (amount != 0) {\\r\\n        IERC20(rt).safeApprove(forwarder, 0);\\r\\n        IERC20(rt).safeApprove(forwarder, amount);\\r\\n        // it will sell reward token to Target Token and distribute it to SmartVault and PS\\r\\n        uint targetTokenEarned = 0;\\r\\n        if (revertOnErrors) {\\r\\n          targetTokenEarned = IFeeRewardForwarder(forwarder).distribute(amount, rt, _vault());\\r\\n        } else {\\r\\n          //slither-disable-next-line unused-return,variable-scope,uninitialized-local\\r\\n          try IFeeRewardForwarder(forwarder).distribute(amount, rt, _vault()) returns (uint r) {\\r\\n            targetTokenEarned = r;\\r\\n          } catch {}\\r\\n        }\\r\\n        targetTokenEarnedTotal += targetTokenEarned;\\r\\n      }\\r\\n    }\\r\\n    if (targetTokenEarnedTotal > 0) {\\r\\n      IBookkeeper(IController(_controller()).bookkeeper()).registerStrategyEarned(targetTokenEarnedTotal);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Liquidate rewards and buy underlying asset\\r\\n  function autocompound() internal {\\r\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\r\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\r\\n      address rt = _rewardTokens[i];\\r\\n      uint amount = IERC20(rt).balanceOf(address(this));\\r\\n      if (amount != 0) {\\r\\n        uint toCompound = amount * (_BUY_BACK_DENOMINATOR - _buyBackRatio()) / _BUY_BACK_DENOMINATOR;\\r\\n        IERC20(rt).safeApprove(forwarder, 0);\\r\\n        IERC20(rt).safeApprove(forwarder, toCompound);\\r\\n        IFeeRewardForwarder(forwarder).liquidate(rt, _underlying(), toCompound);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Default implementation of auto-compounding for swap pairs\\r\\n  ///      Liquidate rewards, buy assets and add to liquidity pool\\r\\n  function autocompoundLP(address _router) internal {\\r\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\r\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\r\\n      address rt = _rewardTokens[i];\\r\\n      uint amount = IERC20(rt).balanceOf(address(this));\\r\\n      if (amount != 0) {\\r\\n        uint toCompound = amount * (_BUY_BACK_DENOMINATOR - _buyBackRatio()) / _BUY_BACK_DENOMINATOR;\\r\\n        IERC20(rt).safeApprove(forwarder, 0);\\r\\n        IERC20(rt).safeApprove(forwarder, toCompound);\\r\\n\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(_underlying());\\r\\n        if (rt != pair.token0()) {\\r\\n          uint token0Amount = IFeeRewardForwarder(forwarder).liquidate(rt, pair.token0(), toCompound / 2);\\r\\n          require(token0Amount != 0, \\\"SB: Token0 zero amount\\\");\\r\\n        }\\r\\n        if (rt != pair.token1()) {\\r\\n          uint token1Amount = IFeeRewardForwarder(forwarder).liquidate(rt, pair.token1(), toCompound / 2);\\r\\n          require(token1Amount != 0, \\\"SB: Token1 zero amount\\\");\\r\\n        }\\r\\n        addLiquidity(_underlying(), _router);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Add all available tokens to given pair\\r\\n  function addLiquidity(address _pair, address _router) internal {\\r\\n    IUniswapV2Router02 router = IUniswapV2Router02(_router);\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\r\\n    address _token0 = pair.token0();\\r\\n    address _token1 = pair.token1();\\r\\n\\r\\n    uint amount0 = IERC20(_token0).balanceOf(address(this));\\r\\n    uint amount1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n    IERC20(_token0).safeApprove(_router, 0);\\r\\n    IERC20(_token0).safeApprove(_router, amount0);\\r\\n    IERC20(_token1).safeApprove(_router, 0);\\r\\n    IERC20(_token1).safeApprove(_router, amount1);\\r\\n    //slither-disable-next-line unused-return\\r\\n    router.addLiquidity(\\r\\n      _token0,\\r\\n      _token1,\\r\\n      amount0,\\r\\n      amount1,\\r\\n      1,\\r\\n      1,\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  //******************** VIRTUAL *********************\\r\\n  // This functions should be implemented in the strategy contract\\r\\n\\r\\n  function _rewardPoolBalance() internal virtual view returns (uint);\\r\\n\\r\\n  //slither-disable-next-line dead-code\\r\\n  function depositToPool(uint amount) internal virtual;\\r\\n\\r\\n  //slither-disable-next-line dead-code\\r\\n  function withdrawAndClaimFromPool(uint amount) internal virtual;\\r\\n\\r\\n  //slither-disable-next-line dead-code\\r\\n  function emergencyWithdrawFromPool() internal virtual;\\r\\n\\r\\n  //slither-disable-next-line dead-code\\r\\n  function liquidateReward() internal virtual;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/balancer/IBalLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@tetu_io/tetu-contracts/contracts/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBalLocker {\\n\\n  function VE_BAL() external view returns (address);\\n\\n  function VE_BAL_UNDERLYING() external view returns (address);\\n\\n  function BALANCER_MINTER() external view returns (address);\\n\\n  function BAL() external view returns (address);\\n\\n  function gaugeController() external view returns (address);\\n\\n  function feeDistributor() external view returns (address);\\n\\n  function operator() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function delegateVotes(bytes32 _id, address _delegateContract, address _delegate) external;\\n\\n  function clearDelegatedVotes(bytes32 _id, address _delegateContract) external;\\n\\n  function depositVe(uint256 amount) external;\\n\\n  function claimVeRewards(IERC20[] memory tokens, address recipient) external;\\n\\n  function investedUnderlyingBalance() external view returns (uint);\\n\\n  function depositToGauge(address gauge, uint amount) external;\\n\\n  function withdrawFromGauge(address gauge, uint amount) external;\\n\\n  function claimRewardsFromGauge(address gauge, address receiver) external;\\n\\n  function claimRewardsFromMinter(address gauge, address receiver) external returns (uint claimed);\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/SlotsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\r\\n/// @author bogdoslav\\r\\n/// @notice Example usage. Declare a slot variable. Change contract name and var name at string\\r\\n/// @notice uint internal constant _MY_VAR = bytes32(uint(keccak256(\\\"eip1967.MyContract.myVar\\\"))) - 1;\\r\\n/// @notice use SlotsLib:\\r\\n/// @notice using SlotsLib for uint;\\r\\n/// @notice write value:\\r\\n/// @notice _MY_VAR.set(100);\\r\\n/// @notice read value:\\r\\n/// @notice uint myVar = _MY_VAR.getUint();\\r\\nlibrary SlotsLib {\\r\\n\\r\\n  function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\\r\\n    bytes memory tempEmptyStringTest = bytes(source);\\r\\n    if (tempEmptyStringTest.length == 0) {\\r\\n      return 0x0;\\r\\n    }\\r\\n    assembly {\\r\\n      result := mload(add(source, 32))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\r\\n    uint8 i = 0;\\r\\n    while(i < 32 && _bytes32[i] != 0) {\\r\\n      i++;\\r\\n    }\\r\\n    bytes memory bytesArray = new bytes(i);\\r\\n    for (uint8 j = 0; j < i; j++) {\\r\\n      bytesArray[j] = _bytes32[j];\\r\\n    }\\r\\n    return string(bytesArray);\\r\\n  }\\r\\n\\r\\n  // ************* GETTERS *******************\\r\\n\\r\\n  /// @dev Gets a slot as bytes32\\r\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as an address\\r\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as uint256\\r\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot as string\\r\\n  function getString(bytes32 slot) internal view returns (string memory result) {\\r\\n    bytes32 data;\\r\\n    assembly {\\r\\n      data := sload(slot)\\r\\n    }\\r\\n    result = bytes32ToString(data);\\r\\n  }\\r\\n\\r\\n  // ************* ARRAY GETTERS *******************\\r\\n\\r\\n  /// @dev Gets an array length\\r\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot array by index as address\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      result := sload(pointer)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets a slot array by index as uint\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      result := sload(pointer)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS *******************\\r\\n\\r\\n  /// @dev Sets a slot with bytes32\\r\\n  /// @notice Check address for 0 at the setter\\r\\n  function set(bytes32 slot, bytes32 value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with address\\r\\n  /// @notice Check address for 0 at the setter\\r\\n  function set(bytes32 slot, address value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with uint\\r\\n  function set(bytes32 slot, uint value) internal {\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot with string (WARNING!!! truncated to 32 bytes)\\r\\n  function set(bytes32 slot, string memory str) internal {\\r\\n    bytes32 value = stringToBytes32(str);\\r\\n    assembly {\\r\\n      sstore(slot, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ************* ARRAY SETTERS *******************\\r\\n\\r\\n  /// @dev Sets a slot array at index with address\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function setAt(bytes32 slot, uint index, address value) internal {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      sstore(pointer, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets a slot array at index with uint\\r\\n  /// @notice First slot is array length, elements ordered backward in memory\\r\\n  /// @notice This is unsafe, without checking array length.\\r\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\r\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\r\\n    assembly {\\r\\n      sstore(pointer, value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Sets an array length\\r\\n  function setLength(bytes32 slot, uint length) internal {\\r\\n    assembly {\\r\\n      sstore(slot, length)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Pushes an address to the array\\r\\n  function push(bytes32 slot, address value) internal {\\r\\n    uint length = arrayLength(slot);\\r\\n    setAt(slot, length, value);\\r\\n    setLength(slot, length + 1);\\r\\n  }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.4;\\n\\nimport \\\"@tetu_io/tetu-contracts/contracts/openzeppelin/IERC20.sol\\\";\\n\\n\\ninterface IAsset {\\n}\\n\\ninterface IBVault {\\n  // Internal Balance\\n  //\\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n  //\\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n  // operations of different kinds, with different senders and recipients, at once.\\n\\n  /**\\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\\n\\n  /**\\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n  struct UserBalanceOp {\\n    UserBalanceOpKind kind;\\n    IAsset asset;\\n    uint256 amount;\\n    address sender;\\n    address payable recipient;\\n  }\\n\\n  // There are four possible operations in `manageUserBalance`:\\n  //\\n  // - DEPOSIT_INTERNAL\\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n  // relevant for relayers).\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - WITHDRAW_INTERNAL\\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n  // it to the recipient as ETH.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_INTERNAL\\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_EXTERNAL\\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n  // relayers, as it lets them reuse a user's Vault allowance.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `ExternalBalanceTransfer` event.\\n\\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\\n\\n  /**\\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n  /**\\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n  // Pools\\n  //\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n  // functionality:\\n  //\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n  // which increase with the number of registered tokens.\\n  //\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n  // independent of the number of registered tokens.\\n  //\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\n\\n  /**\\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n  /**\\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n  /**\\n   * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n  /**\\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n  function registerTokens(\\n    bytes32 poolId,\\n    IERC20[] calldata tokens,\\n    address[] calldata assetManagers\\n  ) external;\\n\\n  /**\\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n  /**\\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n  /**\\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n  external\\n  view\\n  returns (\\n    uint256 cash,\\n    uint256 managed,\\n    uint256 lastChangeBlock,\\n    address assetManager\\n  );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n  function getPoolTokens(bytes32 poolId)\\n  external\\n  view\\n  returns (\\n    IERC20[] memory tokens,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock\\n  );\\n\\n  /**\\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest calldata request\\n  ) external payable;\\n\\n  enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT}\\n  enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\\n\\n  struct JoinPoolRequest {\\n    IAsset[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest calldata request\\n  ) external;\\n\\n  struct ExitPoolRequest {\\n    IAsset[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n  event PoolBalanceChanged(\\n    bytes32 indexed poolId,\\n    address indexed liquidityProvider,\\n    IERC20[] tokens,\\n    int256[] deltas,\\n    uint256[] protocolFeeAmounts\\n  );\\n\\n  enum PoolBalanceChangeKind {JOIN, EXIT}\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n  function swap(\\n    SingleSwap calldata singleSwap,\\n    FundManagement calldata funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds,\\n    int256[] calldata limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds\\n  ) external returns (int256[] memory assetDeltas);\\n\\n  // BasePool.sol\\n\\n  /**\\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock,\\n    uint256 protocolSwapFeePercentage,\\n    bytes memory userData\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n  /**\\r\\n   * @dev Returns the largest of two numbers.\\r\\n   */\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the smallest of two numbers.\\r\\n   */\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average of two numbers. The result is rounded towards\\r\\n   * zero.\\r\\n   */\\r\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b) / 2 can overflow.\\r\\n    return (a & b) + (a ^ b) / 2;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ceiling of the division of two numbers.\\r\\n   *\\r\\n   * This differs from standard division with `/` in that it rounds up instead\\r\\n   * of rounding down.\\r\\n   */\\r\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n    return a / b + (a % b == 0 ? 0 : 1);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n  unchecked {\\r\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n    uint256 newAllowance = oldAllowance - value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/strategies/StrategyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\n\\r\\n/// @title Eternal storage + getters and setters pattern\\r\\n/// @dev If you will change a key value it will require setup it again\\r\\n/// @author belbix\\r\\nabstract contract StrategyStorage is Initializable {\\r\\n\\r\\n  // don't change names or ordering!\\r\\n  mapping(bytes32 => uint256) private uintStorage;\\r\\n  mapping(bytes32 => address) private addressStorage;\\r\\n  mapping(bytes32 => bool) private boolStorage;\\r\\n\\r\\n  //************************ VARIABLES **************************\\r\\n  /// @dev Tokens that forbidden to transfer from strategy contract\\r\\n  mapping(address => bool) internal _unsalvageableTokens;\\r\\n  address[] internal _rewardTokens;\\r\\n\\r\\n  /// @notice Address changed the variable with `name`\\r\\n  event UpdatedAddressSlot(string name, address oldValue, address newValue);\\r\\n  /// @notice Value changed the variable with `name`\\r\\n  event UpdatedUint256Slot(string name, uint256 oldValue, uint256 newValue);\\r\\n  /// @notice Boolean value changed the variable with `name`\\r\\n  event UpdatedBoolSlot(string name, bool oldValue, bool newValue);\\r\\n\\r\\n  // ******************* SETTERS AND GETTERS **********************\\r\\n\\r\\n  function _setUnderlying(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"underlying\\\", _underlying(), _address);\\r\\n    setAddress(\\\"underlying\\\", _address);\\r\\n  }\\r\\n\\r\\n  function _underlying() internal view returns (address) {\\r\\n    return getAddress(\\\"underlying\\\");\\r\\n  }\\r\\n\\r\\n  function _setVault(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"vault\\\", _vault(), _address);\\r\\n    setAddress(\\\"vault\\\", _address);\\r\\n  }\\r\\n\\r\\n  function _vault() internal view returns (address) {\\r\\n    return getAddress(\\\"vault\\\");\\r\\n  }\\r\\n\\r\\n  function _setBuyBackRatio(uint _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"buyBackRatio\\\", _buyBackRatio(), _value);\\r\\n    setUint256(\\\"buyBackRatio\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @dev Buyback numerator - reflects but does not guarantee that this percent of the profit will go to distribution\\r\\n  function _buyBackRatio() internal view returns (uint) {\\r\\n    return getUint256(\\\"buyBackRatio\\\");\\r\\n  }\\r\\n\\r\\n  function _setOnPause(bool _value) internal {\\r\\n    emit UpdatedBoolSlot(\\\"onPause\\\", _onPause(), _value);\\r\\n    setBoolean(\\\"onPause\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @dev When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\\r\\n  function _onPause() internal view returns (bool) {\\r\\n    return getBoolean(\\\"onPause\\\");\\r\\n  }\\r\\n\\r\\n  function _setToleranceNumerator(uint _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"tolerance\\\", _toleranceNumerator(), _value);\\r\\n    setUint256(\\\"tolerance\\\", _value);\\r\\n  }\\r\\n\\r\\n  function _toleranceNumerator() internal view returns (uint) {\\r\\n    return getUint256(\\\"tolerance\\\");\\r\\n  }\\r\\n\\r\\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\\r\\n\\r\\n  function setAddress(string memory key, address _address) private {\\r\\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\\r\\n  }\\r\\n\\r\\n  function getAddress(string memory key) private view returns (address) {\\r\\n    return addressStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  function setUint256(string memory key, uint256 _value) private {\\r\\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\\r\\n  }\\r\\n\\r\\n  function getUint256(string memory key) private view returns (uint256) {\\r\\n    return uintStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  function setBoolean(string memory key, bool _value) private {\\r\\n    boolStorage[keccak256(abi.encodePacked(key))] = _value;\\r\\n  }\\r\\n\\r\\n  function getBoolean(string memory key) private view returns (bool) {\\r\\n    return boolStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  //slither-disable-next-line unused-state\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\nimport \\\"../interface/IControllable.sol\\\";\\r\\nimport \\\"../interface/IControllableExtended.sol\\\";\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\n\\r\\n/// @title Implement basic functionality for any contract that require strict control\\r\\n///        V2 is optimised version for less gas consumption\\r\\n/// @dev Can be used with upgradeable pattern.\\r\\n///      Require call initializeControllable() in any case.\\r\\n/// @author belbix\\r\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\r\\n\\r\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\r\\n\\r\\n  event ContractInitialized(address controller, uint ts, uint block);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __controller Controller address\\r\\n  function initializeControllable(address __controller) public initializer {\\r\\n    _setController(__controller);\\r\\n    _setCreated(block.timestamp);\\r\\n    _setCreatedBlock(block.number);\\r\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\r\\n  }\\r\\n\\r\\n  /// @dev Return true if given address is controller\\r\\n  function isController(address _value) external override view returns (bool) {\\r\\n    return _isController(_value);\\r\\n  }\\r\\n\\r\\n  function _isController(address _value) internal view returns (bool) {\\r\\n    return _value == _controller();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is setup as governance in Controller\\r\\n  function isGovernance(address _value) external override view returns (bool) {\\r\\n    return _isGovernance(_value);\\r\\n  }\\r\\n\\r\\n  function _isGovernance(address _value) internal view returns (bool) {\\r\\n    return IController(_controller()).governance() == _value;\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS/GETTERS *******************\\r\\n\\r\\n  /// @notice Return controller address saved in the contract slot\\r\\n  function controller() external view override returns (address) {\\r\\n    return _controller();\\r\\n  }\\r\\n\\r\\n  function _controller() internal view returns (address result) {\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Set a controller address to contract slot\\r\\n  function _setController(address _newController) private {\\r\\n    require(_newController != address(0));\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _newController)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation timestamp\\r\\n  /// @return ts Creation timestamp\\r\\n  function created() external view override returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.timestamp\\r\\n  function _setCreated(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation block number\\r\\n  /// @return ts Creation block number\\r\\n  function createdBlock() external view returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.number\\r\\n  function _setCreatedBlock(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n  enum Platform {\\r\\n    UNKNOWN, // 0\\r\\n    TETU, // 1\\r\\n    QUICK, // 2\\r\\n    SUSHI, // 3\\r\\n    WAULT, // 4\\r\\n    IRON, // 5\\r\\n    COSMIC, // 6\\r\\n    CURVE, // 7\\r\\n    DINO, // 8\\r\\n    IRON_LEND, // 9\\r\\n    HERMES, // 10\\r\\n    CAFE, // 11\\r\\n    TETU_SWAP, // 12\\r\\n    SPOOKY, // 13\\r\\n    AAVE_LEND, //14\\r\\n    AAVE_MAI_BAL, // 15\\r\\n    GEIST, //16\\r\\n    HARVEST, //17\\r\\n    SCREAM_LEND, //18\\r\\n    KLIMA, //19\\r\\n    VESQ, //20\\r\\n    QIDAO, //21\\r\\n    SUNFLOWER, //22\\r\\n    NACHO, //23\\r\\n    STRATEGY_SPLITTER, //24\\r\\n    TOMB, //25\\r\\n    TAROT, //26\\r\\n    BEETHOVEN, //27\\r\\n    IMPERMAX, //28\\r\\n    TETU_SF, //29\\r\\n    ALPACA, //30\\r\\n    MARKET, //31\\r\\n    UNIVERSE, //32\\r\\n    MAI_BAL, //33\\r\\n    UMA, //34\\r\\n    SPHERE, //35\\r\\n    BALANCER, //36\\r\\n    OTTERCLAM, //37\\r\\n    MESH, //38\\r\\n    SLOT_39, //39\\r\\n    SLOT_40, //40\\r\\n    SLOT_41, //41\\r\\n    SLOT_42, //42\\r\\n    SLOT_43, //43\\r\\n    SLOT_44, //44\\r\\n    SLOT_45, //45\\r\\n    SLOT_46, //46\\r\\n    SLOT_47, //47\\r\\n    SLOT_48, //48\\r\\n    SLOT_49, //49\\r\\n    SLOT_50 //50\\r\\n  }\\r\\n\\r\\n  // *************** GOVERNANCE ACTIONS **************\\r\\n  function STRATEGY_NAME() external view returns (string memory);\\r\\n\\r\\n  function withdrawAllToVault() external;\\r\\n\\r\\n  function withdrawToVault(uint256 amount) external;\\r\\n\\r\\n  function salvage(address recipient, address token, uint256 amount) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function investAllUnderlying() external;\\r\\n\\r\\n  function emergencyExit() external;\\r\\n\\r\\n  function pauseInvesting() external;\\r\\n\\r\\n  function continueInvesting() external;\\r\\n\\r\\n  // **************** VIEWS ***************\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function rewardPoolBalance() external view returns (uint256);\\r\\n\\r\\n  function buyBackRatio() external view returns (uint256);\\r\\n\\r\\n  function unsalvageableTokens(address token) external view returns (bool);\\r\\n\\r\\n  function vault() external view returns (address);\\r\\n\\r\\n  function investedUnderlyingBalance() external view returns (uint256);\\r\\n\\r\\n  function platform() external view returns (Platform);\\r\\n\\r\\n  function assets() external view returns (address[] memory);\\r\\n\\r\\n  function pausedInvesting() external view returns (bool);\\r\\n\\r\\n  function readyToClaim() external view returns (uint256[] memory);\\r\\n\\r\\n  function poolTotalAmount() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IFeeRewardForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IFeeRewardForwarder {\\r\\n\\r\\n  function DEFAULT_UNI_FEE_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function DEFAULT_UNI_FEE_NUMERATOR() external view returns (uint256);\\r\\n\\r\\n  function LIQUIDITY_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function MINIMUM_AMOUNT() external view returns (uint256);\\r\\n\\r\\n  function ROUTE_LENGTH_MAX() external view returns (uint256);\\r\\n\\r\\n  function SLIPPAGE_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function VERSION() external view returns (string memory);\\r\\n\\r\\n  function liquidityRouter() external view returns (address);\\r\\n\\r\\n  function liquidityNumerator() external view returns (uint);\\r\\n\\r\\n  function addBlueChipsLps(address[] memory _lps) external;\\r\\n\\r\\n  function addLargestLps(address[] memory _tokens, address[] memory _lps)\\r\\n  external;\\r\\n\\r\\n  function blueChipsTokens(address) external view returns (bool);\\r\\n\\r\\n  function distribute(\\r\\n    uint256 _amount,\\r\\n    address _token,\\r\\n    address _vault\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function getBalData()\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    address balToken,\\r\\n    address vault,\\r\\n    bytes32 pool,\\r\\n    address tokenOut\\r\\n  );\\r\\n\\r\\n  function initialize(address _controller) external;\\r\\n\\r\\n  function liquidate(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint256 amount\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function notifyCustomPool(\\r\\n    address,\\r\\n    address,\\r\\n    uint256\\r\\n  ) external pure returns (uint256);\\r\\n\\r\\n  function notifyPsPool(address, uint256) external pure returns (uint256);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function setBalData(\\r\\n    address balToken,\\r\\n    address vault,\\r\\n    bytes32 pool,\\r\\n    address tokenOut\\r\\n  ) external;\\r\\n\\r\\n  function setLiquidityNumerator(uint256 _value) external;\\r\\n\\r\\n  function setLiquidityRouter(address _value) external;\\r\\n\\r\\n  function setSlippageNumerator(uint256 _value) external;\\r\\n\\r\\n  function setUniPlatformFee(\\r\\n    address _factory,\\r\\n    uint256 _feeNumerator,\\r\\n    uint256 _feeDenominator\\r\\n  ) external;\\r\\n\\r\\n  function slippageNumerator() external view returns (uint256);\\r\\n\\r\\n  function tetu() external view returns (address);\\r\\n\\r\\n  function uniPlatformFee(address)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256 numerator, uint256 denominator);\\r\\n\\r\\n  function largestLps(address _token) external view returns (\\r\\n    address lp,\\r\\n    address token,\\r\\n    address oppositeToken\\r\\n  );\\r\\n\\r\\n  function blueChipsLps(address _token0, address _token1) external view returns (\\r\\n    address lp,\\r\\n    address token,\\r\\n    address oppositeToken\\r\\n  );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IBookkeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IBookkeeper {\\r\\n\\r\\n  struct PpfsChange {\\r\\n    address vault;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 value;\\r\\n    uint256 oldBlock;\\r\\n    uint256 oldTime;\\r\\n    uint256 oldValue;\\r\\n  }\\r\\n\\r\\n  struct HardWork {\\r\\n    address strategy;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 targetTokenAmount;\\r\\n  }\\r\\n\\r\\n  function addVault(address _vault) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\\r\\n\\r\\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\\r\\n\\r\\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\\r\\n\\r\\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\\r\\n\\r\\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\\r\\n\\r\\n  function registerPpfsChange(address vault, uint256 value) external;\\r\\n\\r\\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\\r\\n\\r\\n  function vaults() external view returns (address[] memory);\\r\\n\\r\\n  function vaultsLength() external view returns (uint256);\\r\\n\\r\\n  function strategies() external view returns (address[] memory);\\r\\n\\r\\n  function strategiesLength() external view returns (uint256);\\r\\n\\r\\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\\r\\n\\r\\n  /// @notice Return total earned TETU tokens for strategy\\r\\n  /// @dev Should be incremented after strategy rewards distribution\\r\\n  /// @param strategy Strategy address\\r\\n  /// @return Earned TETU tokens\\r\\n  function targetTokenEarned(address strategy) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return share(xToken) balance of given user\\r\\n  /// @dev Should be calculated for each xToken transfer\\r\\n  /// @param vault Vault address\\r\\n  /// @param user User address\\r\\n  /// @return User share (xToken) balance\\r\\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return earned token amount for given token and user\\r\\n  /// @dev Fills when user claim rewards\\r\\n  /// @param user User address\\r\\n  /// @param vault Vault address\\r\\n  /// @param token Token address\\r\\n  /// @return User's earned tokens amount\\r\\n  function userEarned(address user, address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function lastHardWork(address vault) external view returns (HardWork memory);\\r\\n\\r\\n  /// @notice Return users quantity for given Vault\\r\\n  /// @dev Calculation based in Bookkeeper user balances\\r\\n  /// @param vault Vault address\\r\\n  /// @return Users quantity\\r\\n  function vaultUsersQuantity(address vault) external view returns (uint256);\\r\\n\\r\\n  function fundKeeperEarned(address vault) external view returns (uint256);\\r\\n\\r\\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ISmartVault {\\r\\n\\r\\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n  function VERSION() external view returns (string memory);\\r\\n\\r\\n  function active() external view returns (bool);\\r\\n\\r\\n  function addRewardToken(address rt) external;\\r\\n\\r\\n  function alwaysInvest() external view returns (bool);\\r\\n\\r\\n  function availableToInvestOut() external view returns (uint256);\\r\\n\\r\\n  function changeActivityStatus(bool _active) external;\\r\\n\\r\\n  function changeAlwaysInvest(bool _active) external;\\r\\n\\r\\n  function changeDoHardWorkOnInvest(bool _active) external;\\r\\n\\r\\n  function changePpfsDecreaseAllowed(bool _value) external;\\r\\n\\r\\n  function changeProtectionMode(bool _active) external;\\r\\n\\r\\n  function deposit(uint256 amount) external;\\r\\n\\r\\n  function depositAndInvest(uint256 amount) external;\\r\\n\\r\\n  function depositFeeNumerator() external view returns (uint256);\\r\\n\\r\\n  function depositFor(uint256 amount, address holder) external;\\r\\n\\r\\n  function disableLock() external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function doHardWorkOnInvest() external view returns (bool);\\r\\n\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function earned(address rt, address account)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function earnedWithBoost(address rt, address account)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function exit() external;\\r\\n\\r\\n  function getAllRewards() external;\\r\\n\\r\\n  function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n  function getReward(address rt) external;\\r\\n\\r\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\r\\n\\r\\n  function initializeSmartVault(\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    address _controller,\\r\\n    address __underlying,\\r\\n    uint256 _duration,\\r\\n    bool _lockAllowed,\\r\\n    address _rewardToken,\\r\\n    uint256 _depositFee\\r\\n  ) external;\\r\\n\\r\\n  function lastTimeRewardApplicable(address rt)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function lastUpdateTimeForToken(address) external view returns (uint256);\\r\\n\\r\\n  function lockAllowed() external view returns (bool);\\r\\n\\r\\n  function lockPenalty() external view returns (uint256);\\r\\n\\r\\n  function notifyRewardWithoutPeriodChange(\\r\\n    address _rewardToken,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\\r\\n  external;\\r\\n\\r\\n  function overrideName(string memory value) external;\\r\\n\\r\\n  function overrideSymbol(string memory value) external;\\r\\n\\r\\n  function periodFinishForToken(address) external view returns (uint256);\\r\\n\\r\\n  function ppfsDecreaseAllowed() external view returns (bool);\\r\\n\\r\\n  function protectionMode() external view returns (bool);\\r\\n\\r\\n  function rebalance() external;\\r\\n\\r\\n  function removeRewardToken(address rt) external;\\r\\n\\r\\n  function rewardPerToken(address rt) external view returns (uint256);\\r\\n\\r\\n  function rewardPerTokenStoredForToken(address)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function rewardRateForToken(address) external view returns (uint256);\\r\\n\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint256);\\r\\n\\r\\n  function rewardsForToken(address, address) external view returns (uint256);\\r\\n\\r\\n  function setLockPenalty(uint256 _value) external;\\r\\n\\r\\n  function setLockPeriod(uint256 _value) external;\\r\\n\\r\\n  function setStrategy(address newStrategy) external;\\r\\n\\r\\n  function setToInvest(uint256 _value) external;\\r\\n\\r\\n  function stop() external;\\r\\n\\r\\n  function strategy() external view returns (address);\\r\\n\\r\\n  function toInvest() external view returns (uint256);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestmentForHolder(address holder)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function underlyingUnit() external view returns (uint256);\\r\\n\\r\\n  function userBoostTs(address) external view returns (uint256);\\r\\n\\r\\n  function userLastDepositTs(address) external view returns (uint256);\\r\\n\\r\\n  function userLastWithdrawTs(address) external view returns (uint256);\\r\\n\\r\\n  function userLockTs(address) external view returns (uint256);\\r\\n\\r\\n  function userRewardPerTokenPaidForToken(address, address)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256);\\r\\n\\r\\n  function withdraw(uint256 numberOfShares) external;\\r\\n\\r\\n  function withdrawAllToVault() external;\\r\\n\\r\\n  function getAllRewardsFor(address rewardsReceiver) external;\\r\\n\\r\\n  function lockPeriod() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/third_party/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint amount0In,\\r\\n    uint amount1In,\\r\\n    uint amount0Out,\\r\\n    uint amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/third_party/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function WETH() external view returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IControllable {\\r\\n\\r\\n  function isController(address _contract) external view returns (bool);\\r\\n\\r\\n  function isGovernance(address _contract) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @dev This interface contains additional functions for Controllable class\\r\\n///      Don't extend the exist Controllable for the reason of huge coherence\\r\\ninterface IControllableExtended {\\r\\n\\r\\n  function created() external view returns (uint256 ts);\\r\\n\\r\\n  function controller() external view returns (address adr);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IController {\\r\\n\\r\\n\\r\\n  function VERSION() external view returns (string memory);\\r\\n\\r\\n  function addHardWorker(address _worker) external;\\r\\n\\r\\n  function addStrategiesToSplitter(\\r\\n    address _splitter,\\r\\n    address[] memory _strategies\\r\\n  ) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function addVaultsAndStrategies(\\r\\n    address[] memory _vaults,\\r\\n    address[] memory _strategies\\r\\n  ) external;\\r\\n\\r\\n  function announcer() external view returns (address);\\r\\n\\r\\n  function bookkeeper() external view returns (address);\\r\\n\\r\\n  function changeWhiteListStatus(address[] memory _targets, bool status)\\r\\n  external;\\r\\n\\r\\n  function controllerTokenMove(\\r\\n    address _recipient,\\r\\n    address _token,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function dao() external view returns (address);\\r\\n\\r\\n  function distributor() external view returns (address);\\r\\n\\r\\n  function doHardWork(address _vault) external;\\r\\n\\r\\n  function feeRewardForwarder() external view returns (address);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function fundDenominator() external view returns (uint256);\\r\\n\\r\\n  function fundKeeperTokenMove(\\r\\n    address _fund,\\r\\n    address _token,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function fundNumerator() external view returns (uint256);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function governance() external view returns (address);\\r\\n\\r\\n  function hardWorkers(address) external view returns (bool);\\r\\n\\r\\n  function initialize() external;\\r\\n\\r\\n  function isAllowedUser(address _adr) external view returns (bool);\\r\\n\\r\\n  function isDao(address _adr) external view returns (bool);\\r\\n\\r\\n  function isHardWorker(address _adr) external view returns (bool);\\r\\n\\r\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\r\\n\\r\\n  function isRewardDistributor(address _adr) external view returns (bool);\\r\\n\\r\\n  function isValidStrategy(address _strategy) external view returns (bool);\\r\\n\\r\\n  function isValidVault(address _vault) external view returns (bool);\\r\\n\\r\\n  function mintAndDistribute(uint256 totalAmount, bool mintAllAvailable)\\r\\n  external;\\r\\n\\r\\n  function mintHelper() external view returns (address);\\r\\n\\r\\n  function psDenominator() external view returns (uint256);\\r\\n\\r\\n  function psNumerator() external view returns (uint256);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function pureRewardConsumers(address) external view returns (bool);\\r\\n\\r\\n  function rebalance(address _strategy) external;\\r\\n\\r\\n  function removeHardWorker(address _worker) external;\\r\\n\\r\\n  function rewardDistribution(address) external view returns (bool);\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function setAnnouncer(address _newValue) external;\\r\\n\\r\\n  function setBookkeeper(address newValue) external;\\r\\n\\r\\n  function setDao(address newValue) external;\\r\\n\\r\\n  function setDistributor(address _distributor) external;\\r\\n\\r\\n  function setFeeRewardForwarder(address _feeRewardForwarder) external;\\r\\n\\r\\n  function setFund(address _newValue) external;\\r\\n\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator)\\r\\n  external;\\r\\n\\r\\n  function setFundToken(address _newValue) external;\\r\\n\\r\\n  function setGovernance(address newValue) external;\\r\\n\\r\\n  function setMintHelper(address _newValue) external;\\r\\n\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator)\\r\\n  external;\\r\\n\\r\\n  function setPsVault(address _newValue) external;\\r\\n\\r\\n  function setPureRewardConsumers(address[] memory _targets, bool _flag)\\r\\n  external;\\r\\n\\r\\n  function setRewardDistribution(\\r\\n    address[] memory _newRewardDistribution,\\r\\n    bool _flag\\r\\n  ) external;\\r\\n\\r\\n  function setRewardToken(address _newValue) external;\\r\\n\\r\\n  function setVaultController(address _newValue) external;\\r\\n\\r\\n  function setVaultStrategyBatch(\\r\\n    address[] memory _vaults,\\r\\n    address[] memory _strategies\\r\\n  ) external;\\r\\n\\r\\n  function strategies(address) external view returns (bool);\\r\\n\\r\\n  function strategyTokenMove(\\r\\n    address _strategy,\\r\\n    address _token,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function upgradeTetuProxyBatch(\\r\\n    address[] memory _contracts,\\r\\n    address[] memory _implementations\\r\\n  ) external;\\r\\n\\r\\n  function vaultController() external view returns (address);\\r\\n\\r\\n  function vaults(address) external view returns (bool);\\r\\n\\r\\n  function whiteList(address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdatedAddressSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"UpdatedBoolSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedUint256Slot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STRATEGY_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veLocker_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"veLocker_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"__rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_bbRatio\",\"type\":\"uint256\"}],\"name\":\"initializeStrategyBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investAllUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseInvesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"enum IStrategy.Platform\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyToClaim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setToleranceNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVeLocker\",\"type\":\"address\"}],\"name\":\"setVeLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsalvageableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrategyBalStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}