{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Interfaces\r\ninterface IERC721 {\r\n  function mint(\r\n    address _to,\r\n    bytes12 _traitCode,\r\n    string memory _metadataHash,\r\n    string memory _contentHash) external returns (bool);\r\n}\r\n\r\n// Abstract Contracts\r\nabstract contract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// Contract\r\ncontract ShizukSales is Ownable {\r\n  IERC721 public nft;\r\n  address payable public treasury;\r\n  uint256 public price = 0;\r\n  uint256 public constant LIMIT = 3;\r\n  mapping (address => bool) public signers;\r\n  mapping (address => uint256) private numPurchased;\r\n\r\n  modifier underLimit() {\r\n    require(numPurchased[msg.sender] < LIMIT, \"ShizukSales: purchase limit exceeded\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    treasury = payable(msg.sender);\r\n  }\r\n\r\n  function setNft(address _nftAddress) external onlyOwner returns (bool) {\r\n    require(address(nft) == address(0), 'ShizukSales: NFT address is already set');\r\n    nft = IERC721(_nftAddress);\r\n    return true;\r\n  }\r\n\r\n  function setTreasury(address payable _treasury) external onlyOwner returns (bool) {\r\n    treasury = _treasury;\r\n    return true;\r\n  }\r\n\r\n  function setSigner(address _signer) external onlyOwner returns (bool) {\r\n    require(!signers[_signer], 'ShizukSales: _signer is already a signer');\r\n    signers[_signer] = true;\r\n    return true;\r\n  }\r\n\r\n  function removeSigner(address _signer) external onlyOwner returns (bool) {\r\n    require(signers[_signer], 'ShizukSales: _signer is not a signer');\r\n    signers[_signer] = false;\r\n    return true;\r\n  }\r\n\r\n  function setPrice(uint256 _price) external onlyOwner returns (bool) {\r\n    price = _price;\r\n    return true;\r\n  }\r\n\r\n  function purchase(\r\n    address _to,\r\n    bytes12 _traitCode,\r\n    string memory _metadataHash,\r\n    string memory _contentHash,\r\n    bytes memory _sig) external payable underLimit() returns (bool) {\r\n    require(msg.value >= price, 'ShizukSales: insufficient msg.value');\r\n    require(signers[getSigner(_traitCode, _metadataHash, _contentHash, _sig)], 'SizukSales: invalid signature');\r\n    if(msg.value > 0) treasury.transfer(msg.value);\r\n    nft.mint(_to, _traitCode, _metadataHash, _contentHash);\r\n    numPurchased[msg.sender]++;\r\n    return true;\r\n  }\r\n\r\n  function getSigner(\r\n    bytes12 _traitCode,\r\n    string memory _metadataHash,\r\n    string memory _contentHash,\r\n    bytes memory _sig) private pure returns (address) {\r\n    bytes32 hash = keccak256(abi.encodePacked(_traitCode, _metadataHash, _contentHash));\r\n    return recover(hash, _sig);\r\n  }\r\n\r\n  function getLimit(address _addr) external view returns (uint256 purchased, uint256 limit) {\r\n    purchased = numPurchased[_addr];\r\n    limit = LIMIT;\r\n  }\r\n\r\n  function recover(bytes32 _hash, bytes memory _sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (_sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(_sig, 32))\r\n      s := mload(add(_sig, 64))\r\n      v := byte(0, mload(add(_sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(_hash, v, r, s);\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"_traitCode\",\"type\":\"bytes12\"},{\"internalType\":\"string\",\"name\":\"_metadataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShizukSales", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37270bfb0c806a89e3ac229fd8d6c8d97ccc8d3f2324f5b5448737993dc65fb9"}]}