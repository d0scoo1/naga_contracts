{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// InuDAO by 0xInuarashi\r\n// Seriously. Just a Joke. (Or maybe not)\r\n\r\nabstract contract ERC721ICompliant {\r\n    // Name and Symbol\r\n    string public name;\r\n    string public symbol;\r\n\r\n    // Constructor\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_; symbol = symbol_; }\r\n\r\n    // Magic Events \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    // Magic Logic\r\n    function totalSupply() public virtual view returns (uint256) {}\r\n    function ownerOf(uint256 tokenId_) public virtual view returns (address) {}\r\n    function balanceOf(address address_) public virtual view returns (uint256) {}\r\n\r\n    // Magic Compliance\r\n    function supportsInterface(bytes4 interfaceId_) public virtual pure returns (bool) { \r\n        return (interfaceId_ == 0x80ac58cd || interfaceId_ == 0x5b5e139f);\r\n    }\r\n\r\n    // Magic NFT Metadata\r\n    string internal baseTokenURI;\r\n    string internal baseTokenURI_EXT;\r\n\r\n    function _toString(uint256 value_) internal pure returns (string memory) {\r\n        if (value_ == 0) { return \"0\"; }\r\n        uint256 _iterate = value_; uint256 _digits;\r\n        while (_iterate != 0) { _digits++; _iterate /= 10; }\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (value_ != 0) { _digits--; _buffer[_digits] = bytes1(uint8(\r\n            48 + uint256(value_ % 10 ))); value_ /= 10; } \r\n        return string(_buffer); \r\n    }\r\n\r\n    function _setBaseTokenURI(string memory uri_) internal {\r\n        baseTokenURI = uri_;\r\n    }\r\n    function _setBaseTokenURI_EXT(string memory ext_) internal {\r\n        baseTokenURI_EXT = ext_;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view virtual returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            baseTokenURI, _toString(tokenId_), baseTokenURI_EXT));\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner; \r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner!\"); _; }\r\n    function transferOwnership(address new_) external onlyOwner { owner = new_; }\r\n}\r\n\r\ncontract InuDAOToken is ERC721ICompliant(\"InuDAO\", \"InuDAO\"), Ownable {\r\n\r\n    // Internal Trackers\r\n    uint256 public totalMembers;\r\n    function totalSupply() public view override returns (uint256) {\r\n        return totalMembers - burnedTokenIdsUnassigned.length; \r\n    }\r\n\r\n    // Token Settings\r\n    function setBaseTokenURI(string memory uri_) public onlyOwner {\r\n        _setBaseTokenURI(uri_);\r\n    }\r\n    function setBaseTokenURI_EXT(string memory ext_) public onlyOwner {\r\n        _setBaseTokenURI_EXT(ext_);\r\n    }\r\n\r\n    // Ownership Tracker\r\n    struct OwnerData {\r\n        address owner;\r\n        uint40 memberSince;\r\n    }\r\n    mapping(uint256 => OwnerData) public tokenToOwnerData;\r\n\r\n    // Membership Tracker\r\n    mapping(address => uint256) public addressToMemberId;\r\n    function balanceOf(address member_) public view override returns (uint256) {\r\n        return addressToMemberId[member_] != 0 ? 1 : 0; \r\n    }\r\n\r\n    // Next Token Tracker\r\n    uint256[] public burnedTokenIdsUnassigned;\r\n    function getNextTokenId() public view returns (uint256) {\r\n        return burnedTokenIdsUnassigned.length > 0 ? \r\n            burnedTokenIdsUnassigned[burnedTokenIdsUnassigned.length - 1] : \r\n            totalMembers;\r\n    }\r\n    \r\n    function mint(address to_) external onlyOwner {\r\n        uint256 _tokenId = getNextTokenId();\r\n        \r\n        if (_tokenId == totalMembers) { totalMembers++; }\r\n        else { burnedTokenIdsUnassigned.pop(); }\r\n\r\n        tokenToOwnerData[_tokenId] = OwnerData(to_, uint40(block.timestamp));\r\n        addressToMemberId[to_] = _tokenId;\r\n\r\n        emit Transfer(address(0), to_, _tokenId);\r\n    }\r\n\r\n    function burn(address from_) external onlyOwner {\r\n        uint256 _tokenId = addressToMemberId[from_];\r\n        \r\n        require(_tokenId != 0, \"Invalid member\");\r\n\r\n        delete tokenToOwnerData[_tokenId];\r\n        delete addressToMemberId[from_];\r\n        burnedTokenIdsUnassigned.push(_tokenId);\r\n\r\n        emit Transfer(from_, address(0), _tokenId);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMemberId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnedTokenIdsUnassigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI_EXT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwnerData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"memberSince\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InuDAOToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ee2e104c5f8eccdac94779101e3039b90bb0ed32473a2979d9fc8e783535863"}]}