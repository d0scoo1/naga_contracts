{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Governor/TimelockUpgradeable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@fractal-framework/core-contracts/contracts/ModuleBase.sol\\\";\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\\\";\\nimport \\\"../interfaces/ITimelockUpgradeable.sol\\\";\\n\\n/// @dev Contract module which acts as a timelocked controller. When set as the\\n/// executor for the DAO execute action, it enforces a timelock on all\\n/// DAO executions initiated by the governor contract. This gives time for users of the\\n/// controlled contract to exit before a potentially dangerous maintenance\\n/// operation is applied.\\ncontract TimelockUpgradeable is ModuleBase, ITimelockUpgradeable {\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 public minDelay;\\n    IDAO public dao;\\n\\n    /// @dev Contract might receive/hold ETH as part of the maintenance process.\\n    receive() external payable {}\\n\\n    /// @notice Function for initializing the contract that can only be called once\\n    /// @param _accessControl The address of the access control contract\\n    /// @param _dao The address of the dao contract\\n    /// @param _minDelay init the contract with a given `minDelay`.\\n    function initialize(\\n        address _accessControl,\\n        address _dao,\\n        uint256 _minDelay\\n    ) external initializer {\\n        __initBase(_accessControl, msg.sender, \\\"Timelock Module\\\");\\n        dao = IDAO(_dao);\\n        minDelay = _minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /// @dev Changes the minimum timelock duration for future operations.\\n    /// Emits a {MinDelayChange} event.\\n    /// Requirements:\\n    /// - the caller must be authorized.\\n    /// @param newDelay Update the delay between queue and execute\\n    function updateDelay(uint256 newDelay) external virtual authorized {\\n        require(\\n            msg.sender == address(this),\\n            \\\"TimelockController: caller must be timelock\\\"\\n        );\\n        emit MinDelayChange(minDelay, newDelay);\\n        minDelay = newDelay;\\n    }\\n\\n    /// @dev Schedule an operation containing a batch of transactions.\\n    /// Emits one {CallScheduled} event per transaction in the batch.\\n    /// - the caller must be authorized.\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    /// @param delay current delay set in contract\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) external virtual authorized {\\n        require(\\n            targets.length == values.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n        require(\\n            targets.length == datas.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n\\n        bytes32 id = hashOperationBatch(\\n            targets,\\n            values,\\n            datas,\\n            predecessor,\\n            salt\\n        );\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(\\n                id,\\n                i,\\n                targets[i],\\n                values[i],\\n                datas[i],\\n                predecessor,\\n                delay\\n            );\\n        }\\n    }\\n\\n    /// @dev Cancel an operation.\\n    /// - the caller must be authorized.\\n    /// @param id keccak256 hash of proposal params\\n    function cancel(bytes32 id) external virtual authorized {\\n        require(\\n            isOperationPending(id),\\n            \\\"TimelockController: operation cannot be cancelled\\\"\\n        );\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /// @dev Execute an (ready) operation containing a batch of transactions.\\n    /// Emits one {CallExecuted} event per transaction in the batch.\\n    /// - the caller must be authorized\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable virtual authorized {\\n        require(\\n            targets.length == values.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n        require(\\n            targets.length == datas.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n\\n        bytes32 id = hashOperationBatch(\\n            targets,\\n            values,\\n            datas,\\n            predecessor,\\n            salt\\n        );\\n        _beforeCall(id, predecessor);\\n        dao.execute(targets, values, datas);\\n        _afterCall(id);\\n    }\\n\\n    /// @dev Returns whether an id correspond to a registered operation. This\\n    /// includes both Pending, Ready and Done operations.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperation(bytes32 id)\\n        public\\n        view\\n        virtual\\n        returns (bool pending)\\n    {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /// @dev Returns whether an operation is pending or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationPending(bytes32 id)\\n        public\\n        view\\n        virtual\\n        returns (bool pending)\\n    {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /// @dev Returns whether an operation is ready or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationReady(bytes32 id)\\n        public\\n        view\\n        virtual\\n        returns (bool ready)\\n    {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /// @dev Returns whether an operation is done or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationDone(bytes32 id)\\n        public\\n        view\\n        virtual\\n        returns (bool done)\\n    {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /// @dev Returns the timestamp at with an operation becomes ready (0 for\\n    /// unset operations, 1 for done operations).\\n    /// @param id keccak256 hash of proposal params\\n    function getTimestamp(bytes32 id)\\n        public\\n        view\\n        virtual\\n        returns (uint256 timestamp)\\n    {\\n        return _timestamps[id];\\n    }\\n\\n    /// @dev Returns the minimum delay for an operation to become valid.\\n    /// This value can be changed by executing an operation that calls `updateDelay`.\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return minDelay;\\n    }\\n\\n    /// @dev Returns the identifier of an operation containing a batch of\\n    /// transactions.\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /// @dev Schedule an operation that is to becomes valid after a given delay.\\n    /// @param id keccak256 hash of proposal params\\n    /// @param delay current delay set in contract\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(\\n            !isOperation(id),\\n            \\\"TimelockController: operation already scheduled\\\"\\n        );\\n        require(\\n            delay >= getMinDelay(),\\n            \\\"TimelockController: insufficient delay\\\"\\n        );\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /// @dev Checks before execution of an operation's calls.\\n    /// @param id keccak256 hash of proposal params\\n    /// @param predecessor GovTimelock passes this as 0\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(\\n            isOperationReady(id),\\n            \\\"TimelockController: operation is not ready\\\"\\n        );\\n        require(\\n            predecessor == bytes32(0) || isOperationDone(predecessor),\\n            \\\"TimelockController: missing dependency\\\"\\n        );\\n    }\\n\\n    /// @dev Checks after execution of an operation's calls.\\n    /// @param id keccak256 hash of proposal params\\n    function _afterCall(bytes32 id) private {\\n        require(\\n            isOperationReady(id),\\n            \\\"TimelockController: operation is not ready\\\"\\n        );\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /// @dev Execute an operation's call.\\n    /// Emits a {CallExecuted} event.\\n    /// @param id keccak256 hash of proposal params\\n    /// @param index current index of call\\n    /// @param target Contract address the DAO will call\\n    /// @param value Ether value to be sent to the target address\\n    /// @param data Function Sig w/ Params \\n    function _call(\\n        bytes32 id,\\n        uint256 index,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/ModuleBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./interfaces/IModuleBase.sol\\\";\\n\\n/// @notice An abstract contract to be inherited by module contracts\\nabstract contract ModuleBase is IModuleBase, UUPSUpgradeable, ERC165 {\\n    IAccessControlDAO public accessControl;\\n    address public moduleFactory;\\n    string internal _name;\\n\\n    /// @notice Requires that a function caller has the associated role\\n    modifier authorized() {\\n        if (\\n            !accessControl.actionIsAuthorized(\\n                msg.sender,\\n                address(this),\\n                msg.sig\\n            )\\n        ) {\\n            revert NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Function for initializing the contract that can only be called once\\n    /// @param _accessControl The address of the access control contract\\n    /// @param _moduleFactory The address of the factory deploying the module\\n    /// @param __name Human readable string of the module name\\n    function __initBase(address _accessControl, address _moduleFactory, string memory __name)\\n        internal\\n        onlyInitializing\\n    {\\n        accessControl = IAccessControlDAO(_accessControl);\\n        moduleFactory = _moduleFactory;\\n        _name = __name;\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @dev Applies authorized modifier so that an upgrade require the caller to have the correct role\\n    /// @param newImplementation The address of the new implementation contract being upgraded to\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        authorized\\n    {}\\n\\n    /// @notice Returns the module name\\n    /// @return The module name\\n    function name() public view virtual returns (string memory) {\\n      return _name;\\n    }\\n\\n    /// @notice Returns whether a given interface ID is supported\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\n    /// @return bool Indicates whether the interface is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IModuleBase)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IModuleBase).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\": {\r\n      \"content\": \"import \\\"./IModuleBase.sol\\\";\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDAO {\\n    error Unauthorized(bytes32 role, address account);\\n    error UnequalArrayLengths();\\n\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\n\\n    /// @notice Function for initializing the Dao\\n    /// @param _accessControl The address of the access control contract\\n    /// @param _moduleFactoryBase The address of the module factory\\n    /// @param _name Name of the Dao\\n    function initialize(address _accessControl, address _moduleFactoryBase, string calldata _name) external;\\n\\n    /// @notice A function for executing function calls from the DAO\\n    /// @param targets An array of addresses to target for the function calls\\n    /// @param values An array of ether values to send with the function calls\\n    /// @param calldatas An array of bytes defining the function calls\\n    function execute(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITimelockUpgradeable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ITimelockUpgradeable {\\n    /// @dev Emitted when a call is scheduled as part of operation `id`.\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /// @dev Emitted when a call is performed as part of operation `id`.\\n    event CallExecuted(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    /// @dev Emitted when operation `id` is cancelled.\\n    event Cancelled(bytes32 indexed id);\\n\\n    /// @dev Emitted when the minimum delay for future operations is modified.\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /// @dev Contract might receive/hold ETH as part of the maintenance process.\\n    receive() external payable;\\n\\n    /// @notice Function for initializing the contract that can only be called once\\n    /// @param _accessControl The address of the access control contract\\n    /// @param _dao The address of the dao contract\\n    /// @param _minDelay init the contract with a given `minDelay`.\\n    function initialize(\\n        address _accessControl,\\n        address _dao,\\n        uint256 _minDelay\\n    ) external;\\n\\n    /// @dev Changes the minimum timelock duration for future operations.\\n    /// Emits a {MinDelayChange} event.\\n    /// Requirements:\\n    /// - the caller must be authorized.\\n    /// @param newDelay Update the delay between queue and execute\\n    function updateDelay(uint256 newDelay) external;\\n\\n    /// @dev Schedule an operation containing a batch of transactions.\\n    /// Emits one {CallScheduled} event per transaction in the batch.\\n    /// - the caller must be authorized.\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    /// @param delay current delay set in contract\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) external;\\n\\n    /// @dev Cancel an operation.\\n    /// - the caller must be authorized.\\n    /// @param id keccak256 hash of proposal params\\n    function cancel(bytes32 id) external;\\n\\n    /// @dev Execute an (ready) operation containing a batch of transactions.\\n    /// Emits one {CallExecuted} event per transaction in the batch.\\n    /// - the caller must be authorized\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable;\\n\\n    /// @dev Returns whether an id correspond to a registered operation. This\\n    /// includes both Pending, Ready and Done operations.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperation(bytes32 id) external view returns (bool pending);\\n\\n    /// @dev Returns whether an operation is pending or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationPending(bytes32 id)\\n        external\\n        view\\n        returns (bool pending);\\n\\n    /// @dev Returns whether an operation is ready or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationReady(bytes32 id) external view returns (bool ready);\\n\\n    /// @dev Returns whether an operation is done or not.\\n    /// @param id keccak256 hash of proposal params\\n    function isOperationDone(bytes32 id) external view returns (bool done);\\n\\n    /// @dev Returns the timestamp at with an operation becomes ready (0 for\\n    /// unset operations, 1 for done operations).\\n    /// @param id keccak256 hash of proposal params\\n    function getTimestamp(bytes32 id) external view returns (uint256 timestamp);\\n\\n    /// @dev Returns the minimum delay for an operation to become valid.\\n    /// This value can be changed by executing an operation that calls `updateDelay`.\\n    function getMinDelay() external view returns (uint256 duration);\\n\\n    /// @dev Returns the identifier of an operation containing a batch of\\n    /// transactions.\\n    /// @param targets Contract addresses the DAO will call\\n    /// @param values Ether values to be sent to the target address\\n    /// @param datas Function Sigs w/ Params \\n    /// @param predecessor GovTimelock passes this as 0\\n    /// @param salt Description Hash\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external pure returns (bytes32 hash);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IModuleBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlDAO.sol\\\";\\n\\ninterface IModuleBase {\\n    error NotAuthorized();\\n\\n    /// @return IAccessControlDAO The Access control interface\\n    function accessControl() external view returns (IAccessControlDAO);\\n\\n    /// @notice Returns whether a given interface ID is supported\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\n    /// @return bool Indicates whether the interface is supported\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /// @return string The string \\\"Name\\\"\\n    function name() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IAccessControlDAO.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IAccessControlDAO {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        string adminRole;\\n    }\\n\\n    error UnequalArrayLengths();\\n    error MissingRole(address account, string role);\\n    error OnlySelfRenounce();\\n\\n    event ActionRoleAdded(\\n        address target,\\n        string functionDesc,\\n        bytes4 encodedSig,\\n        string role\\n    );\\n    event ActionRoleRemoved(\\n        address target,\\n        string functionDesc,\\n        bytes4 encodedSig,\\n        string role\\n    );\\n    event RoleAdminChanged(\\n        string role,\\n        string previousAdminRole,\\n        string adminRole\\n    );\\n    event RoleGranted(string role, address account, address admin);\\n    event RoleRevoked(string role, address account, address admin);\\n\\n    /// @notice Initialize DAO action and role permissions\\n    /// @param dao Address to receive DAO role\\n    /// @param roles What permissions are assigned to\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\n    /// @param members Addresses to be granted the specified roles\\n    /// @param targets Contract addresses for actions to be defined on\\n    /// @param functionDescs Function descriptions used to define actions\\n    /// @param actionRoles Roles being granted permission for an action\\n    function initialize(\\n        address dao,\\n        string[] memory roles,\\n        string[] memory roleAdmins,\\n        address[][] memory members,\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory actionRoles\\n    ) external;\\n\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\n    /// @param roles The roles being granted\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\n    /// @param members Addresses being granted each specified role\\n    function grantRolesAndAdmins(\\n        string[] memory roles,\\n        string[] memory roleAdmins,\\n        address[][] memory members\\n    ) external;\\n\\n    /// @notice Grants roles to the specified addresses\\n    /// @param roles The roles being granted\\n    /// @param members Addresses being granted each specified role\\n    function grantRoles(string[] memory roles, address[][] memory members)\\n        external;\\n\\n    /// @notice Grants a role to the specified address\\n    /// @param role The role being granted\\n    /// @param account The address being granted the specified role\\n    function grantRole(string memory role, address account) external;\\n\\n    /// @notice Revokes a role from the specified address\\n    /// @param role The role being revoked\\n    /// @param account The address the role is being revoked from\\n    function revokeRole(string memory role, address account) external;\\n\\n    /// @notice Enables an address to remove one of its own roles\\n    /// @param role The role being renounced\\n    /// @param account The address renouncing the role\\n    function renounceRole(string memory role, address account) external;\\n\\n    /// @notice Authorizes roles to execute the specified actions\\n    /// @param targets The contract addresses that the action functions are implemented on\\n    /// @param functionDescs The function descriptions used to define the actions\\n    /// @param roles Roles being granted permission for an action\\n    function addActionsRoles(\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory roles\\n    ) external;\\n\\n    /// @notice Removes autorization for roles to execute the specified actions\\n    /// @param targets The contract addresses that the action functions are implemented on\\n    /// @param functionDescs The function description used to define the actions\\n    /// @param roles Roles that action permissions are being removed on\\n    function removeActionsRoles(\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory roles\\n    ) external;\\n\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\n    /// @param caller Address attempting to execute the action\\n    /// @param target Contract address corresponding to the action\\n    /// @param sig The function signature used to define the action\\n    function actionIsAuthorized(\\n        address caller,\\n        address target,\\n        bytes4 sig\\n    ) external view returns (bool isAuthorized);\\n\\n    /// @notice Returns the roles autorized to execute the specified action\\n    /// @param target Contract address corresponding to the action\\n    /// @param functionDesc The function description used to define the action\\n    function getActionRoles(address target, string memory functionDesc)\\n        external\\n        view\\n        returns (string[] memory roles);\\n\\n    /// @notice Checks if a specific role is authorized for an action\\n    /// @param role Role that authorization is being checked on\\n    /// @param target Contract address corresponding to the action\\n    /// @param functionDesc Function description used to define the action\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\n    function isRoleAuthorized(\\n        string calldata role,\\n        address target,\\n        string memory functionDesc\\n    ) external view returns (bool isAuthorized);\\n\\n    /// @notice Returns whether the account has been granted the role\\n    /// @param role Role that authorization is being checked on\\n    /// @param account Address that the role authorization is being check on\\n    /// @return boolean Indicates whether the address has been granted the role\\n    function hasRole(string memory role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Returns the role that is the admin of the specified role\\n    /// @param role Role that the admin role is being returned for\\n    /// @return string The admin role of the specified role\\n    function getRoleAdmin(string memory role)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return string The string \\\"DAO_ROLE\\\"\\n    function DAO_ROLE() external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract IAccessControlDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TimelockUpgradeable", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}