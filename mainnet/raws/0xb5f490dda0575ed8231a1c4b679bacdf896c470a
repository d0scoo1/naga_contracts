{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier:UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n    */\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n*/\r\n\r\ninterface IERC721 is IERC165 {\r\n    function royaltyFee(uint256 tokenId) external view returns(address[] memory, uint256[] memory);\r\n    function getCreator(uint256 tokenId) external view returns(address);\r\n\r\n    function contractOwner() external view returns(address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function createCollectible(address from, string memory tokenURI, address[] memory royalty, uint256[] memory _royaltyFee) external returns(uint256);\r\n    function mintAndTransfer(address from, address to, address[] memory _royaltyAddress, uint256[] memory _royaltyfee, string memory _tokenURI, bytes memory data)external returns(uint256);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n\r\n    function royaltyFee(uint256 tokenId) external view returns(address[] memory, uint256[] memory);\r\n    function getCreator(uint256 tokenId) external view returns(address);\r\n    function mint(address from, string memory uri, uint256 supply, address[] memory royaltyAddress, uint256[] memory _royaltyFee) external;\r\n    function mintAndTransfer(address from, address to, address[] memory _royaltyAddress, uint256[] memory _royaltyfee, uint256 _supply, string memory _tokenURI, uint256 qty, bytes memory data)external returns(uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n*/\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n    */ \r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n   \r\n\r\ncontract TransferProxy {\r\n\r\n    function erc721mint(IERC721 token, address from, string memory tokenURI, address[] memory royalty, uint256[] memory royaltyFee) external {\r\n        token.createCollectible(from, tokenURI, royalty, royaltyFee);\r\n    }\r\n\r\n    function erc1155mint(IERC1155 token, address from, string memory tokenURI, address[] memory royalty, uint256[] memory royaltyFee, uint256 supply) external {\r\n        token.mint(from, tokenURI, supply, royalty, royaltyFee);\r\n    }\r\n\r\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external  {\r\n        token.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external  {\r\n        token.safeTransferFrom(from, to, id, value, data);\r\n    }\r\n    \r\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external  {\r\n        require(token.transferFrom(from, to, value), \"failure while transferring\");\r\n    }   \r\n\r\n    function erc721mintAndTransfer(IERC721 token, address from, address to, address[] memory _royaltyAddress, uint256[] memory _royaltyfee, string memory tokenURI, bytes calldata data) external {\r\n        token.mintAndTransfer(from, to, _royaltyAddress, _royaltyfee, tokenURI, data);\r\n    }\r\n\r\n    function erc1155mintAndTransfer(IERC1155 token, address from, address to, address[] memory _royaltyAddress, uint256[] memory _royaltyfee, uint256 supply, string memory tokenURI, uint256 qty, bytes calldata data) external {\r\n        token.mintAndTransfer(from, to, _royaltyAddress, _royaltyfee, supply, tokenURI, qty, data);\r\n    }\r\n}\r\n\r\ncontract Trade {\r\n\r\n    enum BuyingAssetType {ERC1155, ERC721 , LazyMintERC1155, LazyMintERC721}\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SellerFee(uint8 sellerFee);\r\n    event BuyerFee(uint8 buyerFee);\r\n    event BuyAsset(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\r\n    event ExecuteBid(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\r\n    event MintersAdded(address indexed minters);\r\n    event MintersRemoved(address indexed minters);\r\n\r\n    uint8 private buyerFeePermille;\r\n    uint8 private sellerFeePermille;\r\n    TransferProxy public transferProxy;\r\n    address public owner;\r\n    mapping (address => bool) internal minters;\r\n\r\n    struct Fee {\r\n        uint platformFee;\r\n        uint assetFee;\r\n        address[] royaltyAddress;\r\n        uint[] royaltyFee;\r\n        uint price;\r\n    }\r\n\r\n    /* An ECDSA signature. */\r\n    struct Sign {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct Order {\r\n        address seller;\r\n        address buyer;\r\n        address erc20Address;\r\n        address nftAddress;\r\n        BuyingAssetType nftType;\r\n        uint unitPrice;\r\n        uint amount;\r\n        uint tokenId;\r\n        uint256 supply;\r\n        string tokenURI;\r\n        address[] royaltyAddress;\r\n        uint256[] royaltyfee;\r\n        uint qty;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Minter : caller is not the minter\");\r\n        _;\r\n    }\r\n\r\n    constructor (uint8 _buyerFee, uint8 _sellerFee, TransferProxy _transferProxy) {\r\n        buyerFeePermille = _buyerFee;\r\n        sellerFeePermille = _sellerFee;\r\n        transferProxy = _transferProxy;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function buyerServiceFee() external view virtual returns (uint8) {\r\n        return buyerFeePermille;\r\n    }\r\n\r\n    function sellerServiceFee() external view virtual returns (uint8) {\r\n        return sellerFeePermille;\r\n    }\r\n\r\n    function setBuyerServiceFee(uint8 _buyerFee) external onlyOwner returns(bool) {\r\n        buyerFeePermille = _buyerFee;\r\n        emit BuyerFee(buyerFeePermille);\r\n        return true;\r\n    }\r\n\r\n    function setSellerServiceFee(uint8 _sellerFee) external onlyOwner returns(bool) {\r\n        sellerFeePermille = _sellerFee;\r\n        emit SellerFee(sellerFeePermille);\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner returns(bool){\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    function getSigner(bytes32 hash, Sign memory sign) internal pure returns(address) {\r\n        return ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), sign.v, sign.r, sign.s); \r\n    }\r\n\r\n    function verifySellerSign(address seller, uint256 tokenId, uint amount, address paymentAssetAddress, address assetAddress, Sign memory sign) internal pure {\r\n        bytes32 hash = keccak256(abi.encodePacked(assetAddress, tokenId, paymentAssetAddress, amount));\r\n        require(seller == getSigner(hash, sign), \"seller sign verification failed\");\r\n    }\r\n\r\n    function verifyBuyerSign(address buyer, uint256 tokenId, uint amount, address paymentAssetAddress, address assetAddress, uint qty, Sign memory sign) internal pure {\r\n        bytes32 hash = keccak256(abi.encodePacked(assetAddress, tokenId, paymentAssetAddress, amount,qty));\r\n        require(buyer == getSigner(hash, sign), \"buyer sign verification failed\");\r\n    }\r\n\r\n    function getFees(Order memory order) internal view returns(Fee memory){\r\n        uint platformFee;\r\n        uint fee;\r\n        address[] memory royaltyAddress;\r\n        uint[] memory royaltyPermille;\r\n        uint assetFee;\r\n        uint price = order.amount * 1000 / (1000 + buyerFeePermille);\r\n        uint buyerFee = order.amount - price;\r\n        uint sellerFee = price * sellerFeePermille / 1000;\r\n        platformFee = buyerFee + sellerFee;\r\n        if(order.nftType == BuyingAssetType.ERC721) {\r\n            (royaltyAddress, royaltyPermille) = ((IERC721(order.nftAddress).royaltyFee(order.tokenId)));\r\n        }\r\n        if(order.nftType == BuyingAssetType.ERC1155)  {\r\n            (royaltyAddress, royaltyPermille) = ((IERC1155(order.nftAddress).royaltyFee(order.tokenId)));\r\n        }\r\n        if(order.nftType == BuyingAssetType.LazyMintERC721) {\r\n            royaltyAddress = order.royaltyAddress;\r\n            royaltyPermille = order.royaltyfee;\r\n        }\r\n        if(order.nftType == BuyingAssetType.LazyMintERC1155) {\r\n            royaltyAddress = order.royaltyAddress;\r\n            royaltyPermille = order.royaltyfee;\r\n        }\r\n\r\n        uint[] memory royaltyFee =  new uint[](royaltyAddress.length);\r\n\r\n        for(uint i = 0; i < royaltyAddress.length; i++) {\r\n            fee += price * royaltyPermille[i] / 1000;\r\n            royaltyFee[i] = price * royaltyPermille[i] / 1000;\r\n        }\r\n\r\n        assetFee = price - fee - sellerFee;\r\n        return Fee(platformFee, assetFee, royaltyAddress, royaltyFee, price);\r\n    }\r\n\r\n\r\n    function tradeAsset(Order calldata order, Fee memory fee, address buyer, address seller) internal virtual {\r\n        if(order.nftType == BuyingAssetType.ERC721) {\r\n            transferProxy.erc721safeTransferFrom(IERC721(order.nftAddress), seller, buyer, order.tokenId);\r\n        }\r\n        if(order.nftType == BuyingAssetType.ERC1155)  {\r\n            transferProxy.erc1155safeTransferFrom(IERC1155(order.nftAddress), seller, buyer, order.tokenId, order.qty, \"\"); \r\n        }\r\n        if(order.nftType == BuyingAssetType.LazyMintERC721){\r\n            transferProxy.erc721mintAndTransfer(IERC721(order.nftAddress), order.seller, order.buyer, order.royaltyAddress, order.royaltyfee, order.tokenURI,\"\" );\r\n        }\r\n        if(order.nftType == BuyingAssetType.LazyMintERC1155){\r\n            transferProxy.erc1155mintAndTransfer(IERC1155(order.nftAddress), order.seller, order.buyer, order.royaltyAddress, order.royaltyfee, order.supply, order.tokenURI, order.qty, \"\");\r\n        }\r\n        if(fee.platformFee > 0) {\r\n            transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, owner, fee.platformFee);\r\n        }\r\n        for(uint i = 0; i < fee.royaltyAddress.length; i++) {\r\n            if(fee.royaltyFee[i] > 0) {\r\n                transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, fee.royaltyAddress[i], fee.royaltyFee[i]);\r\n            }\r\n        }\r\n        transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), buyer, seller, fee.assetFee);\r\n    }\r\n\r\n    function mint(address nftAddress, BuyingAssetType nftType, string memory tokenURI, uint256 supply, address[] memory recipient, uint256[] memory royaltyFee ) external onlyMinter returns(bool) {\r\n        if(nftType == BuyingAssetType.ERC721) {\r\n            transferProxy.erc721mint(IERC721(nftAddress), msg.sender, tokenURI, recipient, royaltyFee);\r\n        }\r\n        else if(nftType == BuyingAssetType.ERC1155) {\r\n            transferProxy.erc1155mint(IERC1155(nftAddress), msg.sender, tokenURI, recipient, royaltyFee, supply);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addMinters(address account) external onlyOwner returns(bool) {\r\n        require(account != address(0), \"Minters: Given address is zero address\");\r\n        require(!minters[account],\"account already added in minters\");\r\n        minters[account] = true;\r\n        emit MintersAdded(account); \r\n        return true;\r\n    }\r\n\r\n    function removeMinters(address account) external onlyOwner returns(bool) {\r\n        require(account != address(0), \"Minters: Given address is zero address\");\r\n        require(minters[account],\"account already remived in minters\");\r\n        minters[account] = false;\r\n        emit MintersRemoved(account); \r\n        return true;\r\n    }\r\n\r\n    function minter(address account) external view returns(bool) {\r\n        return minters[account];\r\n    }\r\n\r\n    function mintAndBuyAsset(Order calldata order, Sign calldata sign) external returns(bool){\r\n        require(minters[order.seller], \"Minters: seller is not minter\");\r\n        Fee memory fee = getFees(order);\r\n        require((fee.price >= order.unitPrice * order.qty), \"Paid invalid amount\");\r\n        verifySellerSign(order.seller, order.tokenId, order.unitPrice, order.erc20Address, order.nftAddress, sign);\r\n        address buyer = msg.sender;\r\n        tradeAsset(order, fee, buyer, order.seller);\r\n        emit BuyAsset(order.seller , order.tokenId, order.qty, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function mintAndExecuteBid(Order calldata order, Sign calldata sign) external returns(bool){\r\n        require(minters[msg.sender], \"Minters: User is not minter\");\r\n        Fee memory fee = getFees(order);\r\n        require((fee.price >= order.unitPrice * order.qty), \"Paid invalid amount\");\r\n        verifyBuyerSign(order.buyer, order.tokenId, order.amount, order.erc20Address, order.nftAddress, order.qty,sign);\r\n        address seller = msg.sender;\r\n        tradeAsset(order, fee, order.buyer, seller);\r\n        emit ExecuteBid(order.seller , order.tokenId, order.qty, msg.sender);\r\n        return true;\r\n\r\n    }\r\n\r\n    function buyAsset(Order calldata order, Sign calldata sign) external returns(Fee memory) {\r\n        Fee memory fee = getFees(order);\r\n        require((fee.price >= order.unitPrice * order.qty), \"Paid invalid amount\");\r\n        verifySellerSign(order.seller, order.tokenId, order.unitPrice, order.erc20Address, order.nftAddress, sign);\r\n        address buyer = msg.sender;\r\n        tradeAsset(order, fee, buyer, order.seller);\r\n        emit BuyAsset(order.seller, order.tokenId, order.qty, msg.sender);\r\n        return fee;\r\n    }\r\n\r\n    function executeBid(Order calldata order, Sign calldata sign) external returns(bool) {\r\n        Fee memory fee = getFees(order);\r\n        verifyBuyerSign(order.buyer, order.tokenId, order.amount, order.erc20Address, order.nftAddress, order.qty, sign);\r\n        address seller = msg.sender;\r\n        tradeAsset(order, fee, order.buyer, seller);\r\n        emit ExecuteBid(msg.sender , order.tokenId, order.qty, order.buyer);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyerFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sellerFee\",\"type\":\"uint8\"},{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyerFee\",\"type\":\"uint8\"}],\"name\":\"BuyerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ExecuteBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minters\",\"type\":\"address\"}],\"name\":\"MintersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minters\",\"type\":\"address\"}],\"name\":\"MintersRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sellerFee\",\"type\":\"uint8\"}],\"name\":\"SellerFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"enum Trade.BuyingAssetType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyfee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"internalType\":\"struct Trade.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Trade.Sign\",\"name\":\"sign\",\"type\":\"tuple\"}],\"name\":\"buyAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyFee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Trade.Fee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerServiceFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"enum Trade.BuyingAssetType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyfee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"internalType\":\"struct Trade.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Trade.Sign\",\"name\":\"sign\",\"type\":\"tuple\"}],\"name\":\"executeBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"enum Trade.BuyingAssetType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyFee\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"enum Trade.BuyingAssetType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyfee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"internalType\":\"struct Trade.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Trade.Sign\",\"name\":\"sign\",\"type\":\"tuple\"}],\"name\":\"mintAndBuyAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"enum Trade.BuyingAssetType\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyfee\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"internalType\":\"struct Trade.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Trade.Sign\",\"name\":\"sign\",\"type\":\"tuple\"}],\"name\":\"mintAndExecuteBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerServiceFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyerFee\",\"type\":\"uint8\"}],\"name\":\"setBuyerServiceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_sellerFee\",\"type\":\"uint8\"}],\"name\":\"setSellerServiceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Trade", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000019000000000000000000000000f32cefb83d0f91610a441356701c9547fa5031a7", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab040d2f8c96194359c6d5a5d6dcd18559ad98470ba370bdc38753728c327a4f"}]}