{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Liquidator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"./interfaces/IVaultController.sol\\\";\\nimport \\\"./interfaces/IUSDI.sol\\\";\\nimport \\\"./interfaces/IOracleMaster.sol\\\";\\n\\nimport \\\"./aave/FlashLoanReceiverBase.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\n\\ncontract Liquidator is IUniswapV2Callee, FlashLoanReceiverBase {\\n    IVaultController public constant CONTROLLER =\\n        IVaultController(0x4aaE9823Fb4C70490F1d802fC697F3ffF8D5CbE3);\\n\\n    IUSDI public constant USDI =\\n        IUSDI(0x2A54bA2964C8Cd459Dc568853F79813a60761B58);\\n\\n    IUniswapV2Factory public constant FACTORY =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    ISwapRouter public constant ROUTERV3 =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    IERC20 public constant USDC =\\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n\\n    IOracleMaster public oracle;\\n\\n    event FlashLiquidate(\\n        string method,\\n        address tokenBorrow,\\n        uint96 vault,\\n        address assetLiquidated,\\n        uint256 amountBorrow,\\n        uint256 amountRepaid\\n    );\\n\\n    ///@notice pass in LendingPoolAddressesProvider address to FlashLoanReceiverBase constructor\\n    constructor()\\n        FlashLoanReceiverBase(\\n            ILendingPoolAddressesProvider(\\n                0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5\\n            )\\n        )\\n    {\\n        setOracle();\\n    }\\n\\n    ///@notice sets the oracle to Interest Protocol's oracle master, call this if the oracle changes\\n    function setOracle() public {\\n        oracle = IOracleMaster(CONTROLLER.getOracleMaster());\\n    }\\n\\n    ///@notice how much USDC is needed to liq completely\\n    ///@param vault - which vault to liq\\n    ///@param asset - which asset in @param vault to liq\\n    ///@return amount - amount to borrow in USDC terms 1e6\\n    ///@notice it is cheaper in gas to read this first and then pass to the liq function after (~855k vs ~1MM gas)\\n    function calculateCost(uint96 vault, address asset)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 price = oracle.getLivePrice(asset);\\n        uint256 t2l = CONTROLLER.tokensToLiquidate(vault, asset);\\n\\n        amount = ((price * t2l) / 1e18) / 1e12;\\n    }\\n\\n    /***************AAVE FLASH LOANS**************************/\\n    ///@notice liquidate using a flash loan from aave\\n    ///@param amount - amount of USDC to borrow, see calculateCost()\\n    ///@param vault - which vault to liquidate\\n    ///@param asset - which asset in @param vault to liquidate\\n    ///@param profitCheck - check to make sure revenue > gas cost\\n    function aaveFlashLiquidate(\\n        uint256 amount,\\n        uint96 vault,\\n        address asset,\\n        bool profitCheck\\n    ) external {\\n        //check how much gas has been sent at the start of the tx\\n        uint256 startGas = gasleft();\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(USDC);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        // 0 = no debt, 1 = stable, 2 = variable\\n        // 0 = pay all loaned\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        LENDING_POOL.flashLoan(\\n            address(this), //who receives flash loan\\n            assets, //borrowed assets, can be just 1\\n            amounts, //amounts to borrow\\n            modes, //what kind of loan - 0 for full repay\\n            address(this), //address to receive debt if mode is !0\\n            abi.encode(amount, vault, asset), //extra data to pass abi.encode(...)\\n            0 //referralCode - not used\\n        );\\n\\n        //transfer USDC to msg.sender, should not leave on here due to griefing attack https://ethereum.stackexchange.com/questions/92391/explain-griefing-attack-on-aave-flash-loan/92457#92457\\n        uint256 revenue = USDC.balanceOf(address(this)) * 1e12;\\n        USDC.transfer(msg.sender, USDC.balanceOf(address(this)));\\n\\n        if (profitCheck) {\\n            checkGas(startGas, revenue);\\n        }\\n    }\\n\\n    ///@notice aave calls this after we call flashloan() inside aaveFlashLiquidate()\\n    ///@param assets - should always be length 1 and == USDC -- NOT USED\\n    ///@param amounts - should always be length 1 and == USDC borrow amount\\n    ///@param premiums - should always be length 1 and == Fee amount to be added to repay amount\\n    ///@param initiator - Who initiated the flash loan, should be this contract\\n    ///@param params - data we encoded in aaveFlashLiquidate() is passed back to us here\\n    function executeOperation(\\n        address[] calldata assets, //should be usdc\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums, //fees\\n        address initiator, //address executed flash loan\\n        bytes calldata params //encoded data\\n    ) external override returns (bool) {\\n        (uint256 amount, uint96 vault, address asset) = abi.decode(\\n            params,\\n            (uint256, uint96, address)\\n        );\\n        //convert all USDC borrowed into USDI to use in liquidation\\n        getUSDI();\\n\\n        //do the liquidation\\n        liquidate(amount, vault, asset);\\n\\n        //convert all of asset to USDC to repay\\n        getUSDC(asset, IERC20(asset).balanceOf(initiator));\\n\\n        //convert any remianing USDI back to USDC to repay\\n        USDI.approve(address(USDI), USDC.balanceOf(initiator));\\n        USDI.withdrawAll();\\n\\n        uint256 amountOwing = amounts[0] + (premiums[0]);\\n\\n        //emit event - could remove to save ~3k gas\\n        emit FlashLiquidate(\\n            \\\"executeOperation\\\",\\n            address(USDC),\\n            vault,\\n            asset,\\n            amount,\\n            amountOwing\\n        );\\n\\n        //approve aave to take from this contract to repay\\n        USDC.approve(address(LENDING_POOL), amountOwing);\\n        return true;\\n    }\\n\\n    /***************UNI V2 FLASH LOANS**************************/\\n    ///@notice liquidate vault\\n    ///@param tokenBorrow - USDI to borrow USDI and be paid in USDI, USDC to borrow USDC and be paid in USDC\\n    ///@param amount - amount of USDI to borrow, should be close to the amount needed to liquidate\\n    ///@param vault - which vault to liquidate\\n    ///@param asset - which asset to liquidate from the vault\\n    ///@param profitCheck - check to make sure revenue > gas cost\\n    function uniV2FlashLiquidate(\\n        address tokenBorrow,\\n        uint256 amount,\\n        uint96 vault,\\n        address asset,\\n        bool profitCheck\\n    ) external {\\n        uint256 startGas = gasleft();\\n        address pair = FACTORY.getPair(tokenBorrow, asset);\\n        require(pair != address(0), \\\"invalid pair\\\");\\n\\n        // scope for token{0,1}, avoids stack too deep errors\\n        address token0 = IUniswapV2Pair(pair).token0();\\n        address token1 = IUniswapV2Pair(pair).token1();\\n\\n        uint256 amount0Out = tokenBorrow == token0 ? amount : 0;\\n        uint256 amount1Out = tokenBorrow == token1 ? amount : 0;\\n\\n        bytes memory data = abi.encode(tokenBorrow, amount, vault, asset);\\n\\n        //perform flash swap\\n        IUniswapV2Pair(pair).swap(amount0Out, amount1Out, address(this), data); //final arg determines if flash swap or normal swap, pass \\\"\\\" for normal swap\\n\\n        if (tokenBorrow == address(USDI)) {\\n            uint256 revenue = USDI.balanceOf(address(this));\\n            USDI.transfer(msg.sender, revenue);\\n            if (profitCheck) {\\n                checkGas(startGas, revenue);\\n            }\\n        } else if (tokenBorrow == address(USDC)) {\\n            uint256 revenue = USDC.balanceOf(address(this)) * 1e12;\\n            USDC.transfer(msg.sender, USDC.balanceOf(address(this)));\\n            if (profitCheck) {\\n                checkGas(startGas, revenue);\\n            }\\n        }\\n    }\\n\\n    ///@notice - The V2 pair we are borrowing from calls this after we call swap() in uniV2FlashLiquidate()\\n    ///@param sender - Who initiated the FlashSwap, should be this contract, there is a check for this below\\n    ///@param amount0 - not used, see @param data instead\\n    ///@param amount1 - not used, see @param data instead\\n    ///@param data - data we encoded in uniV2FlashLiquidate() is passed back to us here\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override {\\n        address token0 = IUniswapV2Pair(msg.sender).token0();\\n        address token1 = IUniswapV2Pair(msg.sender).token1();\\n\\n        address pair = FACTORY.getPair(token0, token1);\\n        require(pair == pair, \\\"!pair\\\");\\n\\n        require(sender == address(this), \\\"!sender\\\"); //this contract is sender\\n\\n        (address tokenBorrow, uint256 amount, uint96 vault, address asset) = abi\\n            .decode(data, (address, uint256, uint96, address));\\n\\n        // ~~0.3% fee\\n        uint256 fee = ((amount * 3) / 997) + 1;\\n        uint256 amountToRepay = amount + fee;\\n\\n        if (tokenBorrow == address(USDI)) {\\n            //do the liquidation\\n            liquidate(amount, vault, asset);\\n\\n            //swap asset for USDi\\n            getUSDC(asset, IERC20(asset).balanceOf(address(this))); //full amount\\n            getUSDI();\\n            require(\\n                USDI.balanceOf(address(this)) > amountToRepay,\\n                \\\"Insufficient repay\\\"\\n            );\\n        } else if (tokenBorrow == address(USDC)) {\\n            getUSDI();\\n\\n            //do the liquidation\\n            liquidate(amount, vault, asset);\\n\\n            //convert all of asset to USDC to repay\\n            getUSDC(asset, IERC20(asset).balanceOf(address(this)));\\n\\n            //convert any remianing USDI back to USDC to repay\\n            USDI.approve(address(USDI), USDC.balanceOf(address(this)));\\n            USDI.withdrawAll();\\n\\n            require(\\n                USDC.balanceOf(address(this)) > amountToRepay,\\n                \\\"Insufficient repay\\\"\\n            );\\n        } else {\\n            revert(\\\"Unsupported borrow\\\");\\n        }\\n\\n        //emit event - could remove to save ~3k gas\\n        emit FlashLiquidate(\\n            \\\"uniswapV2Call\\\",\\n            token0,\\n            vault,\\n            asset,\\n            amount,\\n            amountToRepay\\n        );\\n\\n        //repay + fee\\n        IERC20(tokenBorrow).transfer(pair, amountToRepay);\\n    }\\n\\n    /***************HELPER FUNCS**************************/\\n    ///@notice - internal function to perform the liquidation on Interest Protocol\\n    ///@param amount - amount of USDI we have available to liquidate\\n    ///@param vault - which vault to liq\\n    ///@param asset - which asset in @param vault to liq\\n    function liquidate(\\n        uint256 amount,\\n        uint96 vault,\\n        address asset\\n    ) internal {\\n        require(!CONTROLLER.checkVault(vault), \\\"Vault is solvent\\\");\\n\\n        USDI.approve(address(CONTROLLER), amount);\\n\\n        IVaultController(address(CONTROLLER)).liquidateVault(\\n            vault,\\n            asset,\\n            2**256 - 1 //liquidate maximum\\n        );\\n    }\\n\\n    ///@notice convert collateral liquidated to USDC on Uniswap V3\\n    ///@notice Because using V2 flashSwap places a lock on the pair, we can't use that pair to sell the asset again in the same TX, hence V3\\n    ///@param asset - convert this asset to USDC\\n    ///@param amount - convert this amount of @param asset into USDC\\n    function getUSDC(address asset, uint256 amount) internal {\\n        IERC20(asset).approve(address(ROUTERV3), amount);\\n        ROUTERV3.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams(\\n                asset,\\n                address(USDC),\\n                500,\\n                address(this),\\n                block.timestamp + 10,\\n                amount,\\n                0,\\n                0\\n            )\\n        );\\n    }\\n\\n    ///@notice converts all USDC held by this contract to USDI using Interest Protocol\\n    function getUSDI() internal {\\n        uint256 amount = USDC.balanceOf(address(this));\\n        USDC.approve(address(USDI), amount);\\n        USDI.deposit(amount);\\n    }\\n\\n    ///@notice ensure the gas cost does not exceed revenue so tx is always profitable\\n    ///@param startGas - gas available at the start of the tx\\n    ///@param revenue - in USDI terms, dollars e18\\n    function checkGas(uint256 startGas, uint256 revenue) internal view {\\n        uint256 txCost = (oracle.getLivePrice(\\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2//WETH\\n        ) *\\n            (startGas - gasleft()) *\\n            tx.gasprice) / 1e18;\\n\\n        require(int256(revenue) - int256(txCost) > 0, \\\"Gas cost too high\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// @title VaultController Events\\n/// @notice interface which contains any events which the VaultController contract emits\\ninterface VaultControllerEvents {\\n  event InterestEvent(uint64 epoch, uint192 amount, uint256 curve_val);\\n  event NewProtocolFee(uint256 protocol_fee);\\n  event RegisteredErc20(address token_address, uint256 LTVe4, address oracle_address, uint256 liquidationIncentivee4);\\n  event UpdateRegisteredErc20(\\n    address token_address,\\n    uint256 LTVe4,\\n    address oracle_address,\\n    uint256 liquidationIncentivee4\\n  );\\n  event NewVault(address vault_address, uint256 vaultId, address vaultOwner);\\n  event RegisterOracleMaster(address oracleMasterAddress);\\n  event RegisterCurveMaster(address curveMasterAddress);\\n  event BorrowUSDi(uint256 vaultId, address vaultAddress, uint256 borrowAmount);\\n  event RepayUSDi(uint256 vaultId, address vaultAddress, uint256 repayAmount);\\n  event Liquidate(uint256 vaultId, address asset_address, uint256 usdi_to_repurchase, uint256 tokens_to_liquidate);\\n}\\n\\n/// @title VaultController Interface\\n/// @notice extends VaultControllerEvents\\ninterface IVaultController is VaultControllerEvents {\\n  // initializer\\n  function initialize() external;\\n\\n  // view functions\\n\\n  function tokensRegistered() external view returns (uint256);\\n\\n  function vaultsMinted() external view returns (uint96);\\n\\n  function lastInterestTime() external view returns (uint64);\\n\\n  function totalBaseLiability() external view returns (uint192);\\n\\n  function interestFactor() external view returns (uint192);\\n\\n  function protocolFee() external view returns (uint192);\\n\\n  function vaultAddress(uint96 id) external view returns (address);\\n\\n  function vaultIDs(address wallet) external view returns (uint96[] memory);\\n\\n  function amountToSolvency(uint96 id) external view returns (uint256);\\n\\n  function vaultLiability(uint96 id) external view returns (uint192);\\n\\n  function vaultBorrowingPower(uint96 id) external view returns (uint192);\\n\\n  function tokensToLiquidate(uint96 id, address token) external view returns (uint256);\\n\\n  function checkVault(uint96 id) external view returns (bool);\\n\\n  struct VaultSummary {\\n    uint96 id;\\n    uint192 borrowingPower;\\n    uint192 vaultLiability;\\n    address[] tokenAddresses;\\n    uint256[] tokenBalances;\\n  }\\n  function vaultSummaries(uint96 start, uint96 stop) external view returns (VaultSummary[] memory);\\n\\n  // interest calculations\\n  function calculateInterest() external returns (uint256);\\n\\n  // vault management business\\n  function mintVault() external returns (address);\\n\\n  function liquidateVault(\\n    uint96 id,\\n    address asset_address,\\n    uint256 tokenAmount\\n  ) external returns (uint256);\\n\\n  function borrowUsdi(uint96 id, uint192 amount) external;\\n\\n  function repayUSDi(uint96 id, uint192 amount) external;\\n\\n  function repayAllUSDi(uint96 id) external;\\n\\n  // admin\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function getOracleMaster() external view returns (address);\\n\\n  function registerOracleMaster(address master_oracle_address) external;\\n\\n  function getCurveMaster() external view returns (address);\\n\\n  function registerCurveMaster(address master_curve_address) external;\\n\\n  function changeProtocolFee(uint192 new_protocol_fee) external;\\n\\n  function registerErc20(\\n    address token_address,\\n    uint256 LTV,\\n    address oracle_address,\\n    uint256 liquidationIncentive\\n  ) external;\\n\\n  function registerUSDi(address usdi_address) external;\\n\\n  function updateRegisteredErc20(\\n    address token_address,\\n    uint256 LTV,\\n    address oracle_address,\\n    uint256 liquidationIncentive\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUSDI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/// @title USDI Events\\n/// @notice interface which contains any events which the USDI contract emits\\ninterface USDIEvents {\\n  event Deposit(address indexed _from, uint256 _value);\\n  event Withdraw(address indexed _from, uint256 _value);\\n  event Mint(address to, uint256 _value);\\n  event Burn(address from, uint256 _value);\\n  event Donation(address indexed _from, uint256 _value, uint256 _totalSupply);\\n}\\n\\n/// @title USDI Interface\\n/// @notice extends USDIEvents and IERC20Metadata\\ninterface IUSDI is IERC20Metadata, USDIEvents {\\n  /// @notice initializer specifies the reserveAddress\\n  function initialize(address reserveAddress) external;\\n\\n  // getters\\n  function reserveRatio() external view returns (uint192);\\n\\n  function reserveAddress() external view returns (address);\\n\\n  // owner\\n  function owner() external view returns (address);\\n\\n  // business\\n  function deposit(uint256 usdc_amount) external;\\n\\n  function withdraw(uint256 usdc_amount) external;\\n\\n  function withdrawAll() external;\\n\\n  function donate(uint256 usdc_amount) external;\\n\\n  function donateReserve() external;\\n\\n  // admin functions\\n\\n  function setPauser(address pauser_) external;\\n\\n  function pauser() external view returns (address);\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function mint(uint256 usdc_amount) external;\\n\\n  function burn(uint256 usdc_amount) external;\\n\\n  function setVaultController(address vault_master_address) external;\\n\\n  function getVaultController() external view returns (address);\\n\\n  // functions for the vault controller to call\\n  function vaultControllerBurn(address target, uint256 amount) external;\\n\\n  function vaultControllerMint(address target, uint256 amount) external;\\n\\n  function vaultControllerDonate(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @title OracleMaster Interface\\r\\n/// @notice Interface for interacting with OracleMaster\\r\\ninterface IOracleMaster {\\r\\n  // calling function\\r\\n  function getLivePrice(address token_address) external view returns (uint256);\\r\\n  // admin functions\\r\\n  function setRelay(address token_address, address relay_address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/aave/FlashLoanReceiverBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\r\\nimport \\\"./ILendingPoolAddressProvider.sol\\\";\\r\\nimport \\\"./ILendingPool.sol\\\";\\r\\n\\r\\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  ILendingPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n  ILendingPool public immutable LENDING_POOL;\\r\\n\\r\\n  constructor(ILendingPoolAddressesProvider provider) {\\r\\n    ADDRESSES_PROVIDER = provider;\\r\\n    LENDING_POOL = ILendingPool(provider.getLendingPool());\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.9;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.9;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.9;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/aave/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title IFlashLoanReceiver interface\\r\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\r\\n * @author Aave\\r\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\r\\n **/\\r\\ninterface IFlashLoanReceiver {\\r\\n    function executeOperation(\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata premiums,\\r\\n        address initiator,\\r\\n        bytes calldata params\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/aave/ILendingPoolAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface ILendingPoolAddressesProvider {\\r\\n  function getLendingPool() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/aave/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface ILendingPool {\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint[] calldata amounts,\\r\\n    uint[] calldata modes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBorrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"vault\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetLiquidated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"}],\"name\":\"FlashLiquidate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"contract IVaultController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTERV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDI\",\"outputs\":[{\"internalType\":\"contract IUSDI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"vault\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"profitCheck\",\"type\":\"bool\"}],\"name\":\"aaveFlashLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"vault\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"calculateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracleMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBorrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"vault\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"profitCheck\",\"type\":\"bool\"}],\"name\":\"uniV2FlashLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Liquidator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}