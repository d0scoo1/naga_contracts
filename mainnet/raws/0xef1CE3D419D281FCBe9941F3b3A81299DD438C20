{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/drops/BeeShop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"./DropShop721.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title A contract for selling on-chain generative bees.\\r\\n\\r\\n  Bees are generated 100% on-chain and cost 0.04 ETH each.\\r\\n  bzz bzz\\r\\n\\r\\n  March 10th, 2022.\\r\\n*/\\r\\ncontract BeeShop is\\r\\n  DropShop721\\r\\n{\\r\\n\\r\\n  /**\\r\\n    Construct a new shop with configuration details about the intended sale.\\r\\n\\r\\n    @param _collection The address of the ERC-721 item being sold.\\r\\n    @param _configuration A parameter containing shop configuration information,\\r\\n      passed here as a struct to avoid a stack-to-deep error.\\r\\n  */\\r\\n  constructor (\\r\\n    address _collection,\\r\\n    ShopConfiguration memory _configuration\\r\\n  ) DropShop721(_collection, _configuration) {\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Allow a caller to purchase a bee. Bees cost 0.04 ETH each.\\r\\n\\r\\n    @param _amount The amount of items that the caller would like to purchase.\\r\\n  */\\r\\n  function mint (\\r\\n    uint256 _amount\\r\\n  ) public override payable {\\r\\n    super.mint(_amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/drops/DropShop721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ITiny721.sol\\\";\\r\\n\\r\\n/*\\r\\n  It saves bytecode to revert on custom errors instead of using require\\r\\n  statements. We are just declaring these errors for reverting with upon various\\r\\n  conditions later in this contract.\\r\\n*/\\r\\nerror CannotEndSaleBeforeItStarts();\\r\\nerror CannotEndAtHigherPrice();\\r\\nerror CannotTransferIncorrectAmount();\\r\\nerror PaymentTransferFailed();\\r\\nerror CannotVerifyAsWhitelistMember();\\r\\nerror CannotExceedWhitelistAllowance();\\r\\nerror CannotBuyZeroItems();\\r\\nerror CannotBuyBeforeSaleStarts();\\r\\nerror CannotBuyFromEndedSale();\\r\\nerror CannotExceedPerTransactionCap();\\r\\nerror CannotExceedPerCallerCap();\\r\\nerror CannotExceedTotalCap();\\r\\nerror CannotUnderpayForMint();\\r\\nerror RefundTransferFailed();\\r\\nerror SweepingTransferFailed();\\r\\n\\r\\n/**\\r\\n  @title A contract for selling NFTs for a flat price with presale.\\r\\n  @author Tim Clancy\\r\\n  @author Qazawat Zirak\\r\\n  @author Rostislav Khlebnikov\\r\\n  @author Nikita Elunin\\r\\n  @author 0xthrpw\\r\\n\\r\\n  This contract is a modified version of SuperFarm mint shops optimized for the\\r\\n  specific use case of:\\r\\n    1. selling a single type of ERC-721 item from a single contract for ETH\\r\\n\\r\\n  This launchpad contract sells new items by minting them into existence. It\\r\\n  cannot be used to sell items that already exist.\\r\\n\\r\\n  March 10th, 2022.\\r\\n*/\\r\\ncontract DropShop721 is\\r\\n  Ownable, ReentrancyGuard\\r\\n{\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// The address of the ERC-721 item being sold.\\r\\n  address public immutable collection;\\r\\n\\r\\n  /// The time when the public sale begins.\\r\\n  uint256 public immutable startTime;\\r\\n\\r\\n  /// The time when the public sale ends.\\r\\n  uint256 public immutable endTime;\\r\\n\\r\\n  /// The maximum number of items from the `collection` that may be sold.\\r\\n  uint256 public immutable totalCap;\\r\\n\\r\\n  /// The maximum number of items that a single address may purchase.\\r\\n  uint256 public immutable callerCap;\\r\\n\\r\\n  /// The maximum number of items that may be purchased in a single transaction.\\r\\n  uint256 public immutable transactionCap;\\r\\n\\r\\n  /// The price at which to sell the item.\\r\\n  uint256 public immutable price;\\r\\n\\r\\n  /// The destination of claimed payments.\\r\\n  address public immutable paymentDestination;\\r\\n\\r\\n  /// A mapping to track the number of items purchases by each caller.\\r\\n  mapping ( address => uint256 ) public purchaseCounts;\\r\\n\\r\\n  /// The total number of items sold by the shop.\\r\\n  uint256 public sold;\\r\\n\\r\\n  /*\\r\\n    A struct used to pass shop configuration details upon contract construction.\\r\\n\\r\\n    @param startTime The time when the public sale begins.\\r\\n    @param endTime The time when the public sale ends.\\r\\n    @param totalCap The maximum number of items from the `collection` that may\\r\\n      be sold.\\r\\n    @param callerCap The maximum number of items that a single address may\\r\\n      purchase.\\r\\n    @param transactionCap The maximum number of items that may be purchased in\\r\\n      a single transaction.\\r\\n    @param price The price to sell the item at.\\r\\n  */\\r\\n  struct ShopConfiguration {\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n    uint256 totalCap;\\r\\n    uint256 callerCap;\\r\\n    uint256 transactionCap;\\r\\n    uint256 price;\\r\\n    address paymentDestination;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Construct a new shop with configuration details about the intended sale.\\r\\n\\r\\n    @param _collection The address of the ERC-721 item being sold.\\r\\n    @param _configuration A parameter containing shop configuration information,\\r\\n      passed here as a struct to avoid a stack-to-deep error.\\r\\n  */\\r\\n  constructor (\\r\\n    address _collection,\\r\\n    ShopConfiguration memory _configuration\\r\\n  ) {\\r\\n\\r\\n    // Perform basic input validation.\\r\\n    if (_configuration.endTime < _configuration.startTime) {\\r\\n      revert CannotEndSaleBeforeItStarts();\\r\\n    }\\r\\n\\r\\n    // Once input parameters have been validated, set storage.\\r\\n    collection = _collection;\\r\\n    startTime = _configuration.startTime;\\r\\n    endTime = _configuration.endTime;\\r\\n    totalCap = _configuration.totalCap;\\r\\n    callerCap = _configuration.callerCap;\\r\\n    transactionCap = _configuration.transactionCap;\\r\\n    price = _configuration.price;\\r\\n    paymentDestination = _configuration.paymentDestination;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Allow a caller to purchase an item.\\r\\n\\r\\n    @param _amount The amount of items that the caller would like to purchase.\\r\\n  */\\r\\n  function mint (\\r\\n    uint256 _amount\\r\\n  ) public virtual payable nonReentrant {\\r\\n\\r\\n    // Reject purchases for no items.\\r\\n    if (_amount < 1) { revert CannotBuyZeroItems(); }\\r\\n\\r\\n    /// Reject purchases that happen before the start of the sale.\\r\\n    if (block.timestamp < startTime) { revert CannotBuyBeforeSaleStarts(); }\\r\\n\\r\\n    /// Reject purchases that happen after the end of the sale.\\r\\n    if (block.timestamp > endTime) { revert CannotBuyFromEndedSale(); }\\r\\n\\r\\n    // Reject purchases that exceed the per-transaction cap.\\r\\n    if (_amount > transactionCap) {\\r\\n      revert CannotExceedPerTransactionCap();\\r\\n    }\\r\\n\\r\\n    // Reject purchases that exceed the per-caller cap.\\r\\n    if (purchaseCounts[_msgSender()] + _amount > callerCap) {\\r\\n      revert CannotExceedPerCallerCap();\\r\\n    }\\r\\n\\r\\n    // Reject purchases that exceed the total sale cap.\\r\\n    if (sold + _amount > totalCap) { revert CannotExceedTotalCap(); }\\r\\n\\r\\n    // Reject the purchase if the caller is underpaying.\\r\\n    uint256 totalCharge = price * _amount;\\r\\n    if (msg.value < totalCharge) { revert CannotUnderpayForMint(); }\\r\\n\\r\\n    // Refund the caller's excess payment if they overpaid.\\r\\n    if (msg.value > totalCharge) {\\r\\n      uint256 excess = msg.value - totalCharge;\\r\\n      (bool returned, ) = payable(_msgSender()).call{ value: excess }(\\\"\\\");\\r\\n      if (!returned) { revert RefundTransferFailed(); }\\r\\n    }\\r\\n\\r\\n    // Update the count of items sold.\\r\\n    sold += _amount;\\r\\n\\r\\n    // Update the caller's purchase count.\\r\\n    purchaseCounts[_msgSender()] += _amount;\\r\\n\\r\\n    // Mint the items.\\r\\n    ITiny721(collection).mint_Qgo(_msgSender(), _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Allow any caller to send this contract's balance of Ether to the payment\\r\\n    destination.\\r\\n  */\\r\\n  function claim () external nonReentrant {\\r\\n    (bool success, ) = payable(paymentDestination).call{\\r\\n      value: address(this).balance\\r\\n    }(\\\"\\\");\\r\\n    if (!success) { revert SweepingTransferFailed(); }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    Allow the owner to sweep either Ether or a particular ERC-20 token from the\\r\\n    contract and send it to another address. This allows the owner of the shop\\r\\n    to withdraw their funds after the sale is completed.\\r\\n\\r\\n    @param _token The token to sweep the balance from; if a zero address is sent\\r\\n      then the contract's balance of Ether will be swept.\\r\\n    @param _amount The amount of token to sweep.\\r\\n    @param _destination The address to send the swept tokens to.\\r\\n  */\\r\\n  function sweep (\\r\\n    address _token,\\r\\n    address _destination,\\r\\n    uint256 _amount\\r\\n  ) external onlyOwner nonReentrant {\\r\\n\\r\\n    // A zero address means we should attempt to sweep Ether.\\r\\n    if (_token == address(0)) {\\r\\n      (bool success, ) = payable(_destination).call{ value: _amount }(\\\"\\\");\\r\\n      if (!success) { revert SweepingTransferFailed(); }\\r\\n\\r\\n    // Otherwise, we should try to sweep an ERC-20 token.\\r\\n    } else {\\r\\n      IERC20(_token).safeTransfer(_destination, _amount);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITiny721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n  @title A minimalistic, gas-efficient ERC-721 implementation forked from the\\r\\n    `Super721` ERC-721 implementation used by SuperFarm.\\r\\n  @author Tim Clancy\\r\\n  @author 0xthrpw\\r\\n  @author Qazawat Zirak\\r\\n  @author Rostislav Khlebnikov\\r\\n\\r\\n  Compared to the original `Super721` implementation that this contract forked\\r\\n  from, this is a very pared-down contract that includes simple delegated\\r\\n  minting and transfer locks.\\r\\n\\r\\n  This contract includes the gas efficiency techniques graciously shared with\\r\\n  the world in the specific ERC-721 implementation by Chiru Labs that is being\\r\\n  called \\\"ERC-721A\\\" (https://github.com/chiru-labs/ERC721A). We have validated\\r\\n  this contract against their test cases.\\r\\n\\r\\n  February 8th, 2022.\\r\\n*/\\r\\ninterface ITiny721 {\\r\\n\\r\\n  /**\\r\\n    Return whether or not the transfer of a particular token ID `_id` is locked.\\r\\n\\r\\n    @param _id The ID of the token to check the lock status of.\\r\\n\\r\\n    @return Whether or not the particular token ID `_id` has transfers locked.\\r\\n  */\\r\\n  function transferLocks (\\r\\n    uint256 _id\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n    Return the address that holds a particular token ID.\\r\\n\\r\\n    @param _id The token ID to check for the holding address of.\\r\\n\\r\\n    @return The address that holds the token with ID of `_id`.\\r\\n  */\\r\\n  function ownerOf (\\r\\n    uint256 _id\\r\\n  ) external returns (address);\\r\\n\\r\\n  /**\\r\\n    This function allows permissioned minters of this contract to mint one or\\r\\n    more tokens dictated by the `_amount` parameter. Any minted tokens are sent\\r\\n    to the `_recipient` address.\\r\\n\\r\\n    Note that tokens are always minted sequentially starting at one. That is,\\r\\n    the list of token IDs is always increasing and looks like [ 1, 2, 3... ].\\r\\n    Also note that per our use cases the intended recipient of these minted\\r\\n    items will always be externally-owned accounts and not other contracts. As a\\r\\n    result there is no safety check on whether or not the mint destination can\\r\\n    actually correctly handle an ERC-721 token.\\r\\n\\r\\n    @param _recipient The recipient of the tokens being minted.\\r\\n    @param _amount The amount of tokens to mint.\\r\\n  */\\r\\n  function mint_Qgo (\\r\\n    address _recipient,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n    This function allows an administrative caller to lock the transfer of\\r\\n    particular token IDs. This is designed for a non-escrow staking contract\\r\\n    that comes later to lock a user's NFT while still letting them keep it in\\r\\n    their wallet.\\r\\n\\r\\n    @param _id The ID of the token to lock.\\r\\n    @param _locked The status of the lock; true to lock, false to unlock.\\r\\n  */\\r\\n  function lockTransfer (\\r\\n    uint256 _id,\\r\\n    bool _locked\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentDestination\",\"type\":\"address\"}],\"internalType\":\"struct DropShop721.ShopConfiguration\",\"name\":\"_configuration\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotBuyBeforeSaleStarts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBuyFromEndedSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBuyZeroItems\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotEndSaleBeforeItStarts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotExceedPerCallerCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotExceedPerTransactionCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotExceedTotalCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnderpayForMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SweepingTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callerCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeeShop", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c4af0400ada37f36f17d09fbd7341d91bd41011000000000000000000000000000000000000000000000000000000000622aa614ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000202bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000008e1bc9bf04000000000000000000000000000015afa5b83783a565e90d207553c9e2449b7db2da", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}