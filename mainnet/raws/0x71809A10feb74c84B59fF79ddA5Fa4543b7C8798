{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JAXRE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./JaxToken.sol\\\";\\r\\n\\r\\ncontract JAXRE is JaxToken {\\r\\n\\r\\n  constructor() JaxToken(\\\"Jax Rupee\\\", \\\"JAX RUPEE\\\", 18){}  \\r\\n  \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/JaxToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./lib/BEP20.sol\\\";\\r\\nimport \\\"./JaxAdmin.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n\\r\\ninterface IJaxPlanet {\\r\\n\\r\\n  struct Colony {\\r\\n    uint128 level;\\r\\n    uint128 transaction_tax;\\r\\n    bytes32 _policy_hash;\\r\\n    string _policy_link;\\r\\n  }\\r\\n\\r\\n  function ubi_tax_wallet() external view returns (address);\\r\\n  function ubi_tax() external view returns (uint);\\r\\n  function jaxcorp_dao_wallet() external view returns (address);\\r\\n  function getMotherColonyAddress(address) external view returns(address);\\r\\n  function getColony(address addr) external view returns(Colony memory);\\r\\n  function getUserColonyAddress(address user) external view returns(address);\\r\\n}\\r\\n\\r\\ninterface IJaxAdmin {\\r\\n  \\r\\n  function userIsAdmin (address _user) external view returns (bool);\\r\\n\\r\\n  function jaxSwap() external view returns (address);\\r\\n  function jaxPlanet() external view returns (address);\\r\\n\\r\\n  function system_status() external view returns (uint);\\r\\n\\r\\n  function blacklist(address _user) external view returns (bool);\\r\\n  function fee_freelist(address _user) external view returns (bool);\\r\\n} \\r\\n\\r\\n/**\\r\\n* @title JaxToken\\r\\n* @dev Implementation of the JaxToken. Extension of {BEP20} that adds a fee transaction behaviour.\\r\\n*/\\r\\ncontract JaxToken is BEP20 {\\r\\n  \\r\\n  IJaxAdmin public jaxAdmin;\\r\\n\\r\\n  // transaction fee\\r\\n  uint public transaction_fee = 0;\\r\\n  uint public transaction_fee_cap = 0;\\r\\n\\r\\n  // transaction fee wallet\\r\\n  uint public referral_fee = 0;\\r\\n  uint public referrer_amount_threshold = 0;\\r\\n  uint public cashback = 0; // 8 decimals\\r\\n  // transaction fee decimal \\r\\n  // uint public constant _fee_decimal = 8;\\r\\n\\r\\n  struct Colony {\\r\\n    uint128 level;\\r\\n    uint128 transaction_tax;\\r\\n    bytes32 _policy_hash;\\r\\n    string _policy_link;\\r\\n  }\\r\\n\\r\\n  address public tx_fee_wallet;\\r\\n  \\r\\n  mapping (address => address) public referrers;\\r\\n\\r\\n  event Set_Jax_Admin(address jax_admin);\\r\\n  event Set_Transaction_Fee(uint transaction_fee, uint trasnaction_fee_cap, address transaction_fee_wallet);\\r\\n  event Set_Referral_Fee(uint referral_fee, uint referral_amount_threshold);\\r\\n  event Set_Cashback(uint cashback_percent);\\r\\n\\r\\n  /**\\r\\n    * @dev Sets the value of the `cap`. This value is immutable, it can only be\\r\\n    * set once during construction.\\r\\n    */\\r\\n    \\r\\n  constructor (\\r\\n      string memory name,\\r\\n      string memory symbol,\\r\\n      uint8 decimals\\r\\n  )\\r\\n      BEP20(name, symbol)\\r\\n  {\\r\\n      _setupDecimals(decimals);\\r\\n      tx_fee_wallet = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyJaxAdmin() {\\r\\n    require(msg.sender == address(jaxAdmin), \\\"Only JaxAdmin Contract\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyJaxSwap() {\\r\\n  require(msg.sender == jaxAdmin.jaxSwap(), \\\"Only JaxSwap can perform this operation.\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier notFrozen() {\\r\\n    require(jaxAdmin.system_status() > 0, \\\"Transactions have been frozen.\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setJaxAdmin(address _jaxAdmin) external onlyOwner {\\r\\n    jaxAdmin = IJaxAdmin(_jaxAdmin);  \\r\\n    require(jaxAdmin.system_status() >= 0, \\\"Invalid jax admin\\\");\\r\\n    emit Set_Jax_Admin(_jaxAdmin);\\r\\n  }\\r\\n\\r\\n  function setTransactionFee(uint tx_fee, uint tx_fee_cap, address wallet) external onlyJaxAdmin {\\r\\n      require(tx_fee <= 1e8 * 3 / 100 , \\\"Tx Fee percent can't be more than 3.\\\");\\r\\n      require(wallet != address(0x0), \\\"Only non-zero address\\\");\\r\\n      transaction_fee = tx_fee;\\r\\n      transaction_fee_cap = tx_fee_cap;\\r\\n      tx_fee_wallet = wallet;\\r\\n      emit Set_Transaction_Fee(tx_fee, tx_fee_cap, wallet);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Set referral fee and minimum amount that can set sender as referrer\\r\\n    */\\r\\n  function setReferralFee(uint _referral_fee, uint _referrer_amount_threshold) external onlyJaxAdmin {\\r\\n      require(_referral_fee <= 1e8 * 50 / 100 , \\\"Referral Fee percent can't be more than 50.\\\");\\r\\n      referral_fee = _referral_fee;\\r\\n      referrer_amount_threshold = _referrer_amount_threshold;\\r\\n      emit Set_Referral_Fee(_referral_fee, _referrer_amount_threshold);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Set cashback\\r\\n    */\\r\\n  function setCashback(uint cashback_percent) external onlyJaxAdmin {\\r\\n      require(cashback_percent <= 1e8 * 30 / 100 , \\\"Cashback percent can't be more than 30.\\\");\\r\\n      cashback = cashback_percent; // 8 decimals\\r\\n      emit Set_Cashback(cashback_percent);\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint amount) public override(BEP20) notFrozen returns (bool) {\\r\\n    _transfer(msg.sender, recipient, amount);\\r\\n    return true;\\r\\n  } \\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint amount) public override(BEP20) notFrozen returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    uint currentAllowance = allowance(sender, msg.sender);\\r\\n    require(currentAllowance >= amount, \\\"BEP20: transfer amount exceeds allowance\\\");\\r\\n    _approve(sender, msg.sender, currentAllowance - amount);\\r\\n    return true;\\r\\n  } \\r\\n\\r\\n  function _transfer(address sender, address recipient, uint amount) internal override(BEP20) {\\r\\n    require(!jaxAdmin.blacklist(sender), \\\"sender is blacklisted\\\");\\r\\n    require(!jaxAdmin.blacklist(recipient), \\\"recipient is blacklisted\\\");\\r\\n    if(amount == 0) return;\\r\\n    if(jaxAdmin.fee_freelist(msg.sender) == true || jaxAdmin.fee_freelist(recipient) == true) {\\r\\n        return super._transfer(sender, recipient, amount);\\r\\n    }\\r\\n    if(referrers[sender] == address(0)) {\\r\\n        referrers[sender] = address(0xdEaD);\\r\\n    }\\r\\n\\r\\n    // Calculate transaction fee\\r\\n    uint tx_fee_amount = amount * transaction_fee / 1e8;\\r\\n\\r\\n    if(tx_fee_amount > transaction_fee_cap) {\\r\\n        tx_fee_amount = transaction_fee_cap;\\r\\n    }\\r\\n    \\r\\n    address referrer = referrers[recipient];\\r\\n    uint totalreferral_fees = 0;\\r\\n    uint maxreferral_fee = tx_fee_amount * referral_fee;\\r\\n\\r\\n    IJaxPlanet jaxPlanet = IJaxPlanet(jaxAdmin.jaxPlanet());\\r\\n    \\r\\n    //Transfer of UBI Tax        \\r\\n    uint ubi_tax_amount = amount * jaxPlanet.ubi_tax() / 1e8;\\r\\n\\r\\n    address colony_address = jaxPlanet.getUserColonyAddress(recipient);\\r\\n\\r\\n    if(colony_address == address(0)) {\\r\\n        colony_address = jaxPlanet.getMotherColonyAddress(recipient);\\r\\n    }\\r\\n    \\r\\n    // Transfer transaction tax to colonies.\\r\\n    // immediate colony will get 50% of transaction tax, mother of that colony will get 25% ... mother of 4th colony will get 3.125%\\r\\n    // 3.125% of transaction tax will go to JaxCorp Dao public key address.\\r\\n    uint tx_tax_amount = amount * jaxPlanet.getColony(colony_address).transaction_tax / 1e8;     // Calculate transaction tax amount\\r\\n   \\r\\n    // Transfer tokens to recipient. recipient will pay the fees.\\r\\n    require( amount > (tx_fee_amount + ubi_tax_amount + tx_tax_amount), \\\"Total fee is greater than the transfer amount\\\");\\r\\n    super._transfer(sender, recipient, amount - tx_fee_amount - ubi_tax_amount - tx_tax_amount);\\r\\n\\r\\n    // Transfer transaction fee to transaction fee wallet\\r\\n    // Sender will get cashback.\\r\\n    if( tx_fee_amount > 0){\\r\\n        uint cashback_amount = (tx_fee_amount * cashback / 1e8);\\r\\n        if(cashback_amount > 0)\\r\\n          super._transfer(sender, sender, cashback_amount);\\r\\n        \\r\\n        // Transfer referral fees to referrers (70% to first referrer, each 10% to other referrers)\\r\\n        if( maxreferral_fee > 0 && referrer != address(0xdEaD) && referrer != address(0)){\\r\\n\\r\\n            super._transfer(sender, referrer, 70 * maxreferral_fee / 1e8 / 100);\\r\\n            referrer = referrers[referrer];\\r\\n            totalreferral_fees += 70 * maxreferral_fee / 1e8 / 100;\\r\\n            if( referrer != address(0xdEaD) && referrer != address(0)){\\r\\n                super._transfer(sender, referrer, 10 * maxreferral_fee / 1e8 / 100);\\r\\n                referrer = referrers[referrer];\\r\\n                totalreferral_fees += 10 * maxreferral_fee / 1e8 / 100;\\r\\n                if( referrer != address(0xdEaD) && referrer != address(0)){\\r\\n                    super._transfer(sender, referrer, 10 * maxreferral_fee / 1e8 / 100);\\r\\n                    referrer = referrers[referrer];\\r\\n                    totalreferral_fees += 10 * maxreferral_fee / 1e8 / 100;\\r\\n                    if( referrer != address(0xdEaD) && referrer != address(0)){\\r\\n                        super._transfer(sender, referrer, 10 * maxreferral_fee / 1e8 / 100);\\r\\n                        referrer = referrers[referrer];\\r\\n                        totalreferral_fees += 10 * maxreferral_fee / 1e8 / 100;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        super._transfer(sender, tx_fee_wallet, tx_fee_amount - totalreferral_fees - cashback_amount); //1e8\\r\\n    }\\r\\n    \\r\\n    if(ubi_tax_amount > 0){\\r\\n        super._transfer(sender, jaxPlanet.ubi_tax_wallet(), ubi_tax_amount);  // ubi tax\\r\\n    }\\r\\n     \\r\\n    // transferTransactionTax(mother_colony_addresses[recipient], tx_tax_amount, 1);          // Transfer tax to colonies and jaxCorp Dao\\r\\n    // Optimize transferTransactionTax by using loop instead of recursive function\\r\\n\\r\\n    if( tx_tax_amount > 0 ){\\r\\n        uint level = 1;\\r\\n        uint tx_tax_temp = tx_tax_amount;\\r\\n        \\r\\n        // Level is limited to 5\\r\\n        while( colony_address != address(0) && level++ <= 5 ){\\r\\n            super._transfer(sender, colony_address, tx_tax_temp / 2);\\r\\n            colony_address = jaxPlanet.getMotherColonyAddress(colony_address);\\r\\n            tx_tax_temp = tx_tax_temp / 2;            \\r\\n        }\\r\\n\\r\\n        // transfer remain tx_tax to jaxcorpDao\\r\\n        super._transfer(sender, jaxPlanet.jaxcorp_dao_wallet(), tx_tax_temp);\\r\\n    }\\r\\n\\r\\n\\r\\n    // set referrers as first sender when transferred amount exceeds the certain limit.\\r\\n    // recipient mustn't be sender's referrer, recipient couldn't be referrer itself\\r\\n    if( recipient != sender  && amount >= referrer_amount_threshold  && referrers[recipient] == address(0)) {\\r\\n        referrers[recipient] = sender;\\r\\n\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function mint(address account, uint amount) public notFrozen onlyJaxSwap {\\r\\n      require(!jaxAdmin.blacklist(account), \\\"account is blacklisted\\\");\\r\\n      _mint(account, amount);\\r\\n  }\\r\\n\\r\\n  function burnFrom(address account, uint amount) public override(BEP20) notFrozen onlyJaxSwap {\\r\\n    require(!jaxAdmin.blacklist(account), \\\"account is blacklisted\\\");\\r\\n    super.burnFrom(account, amount);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\ncontract BEP20 is Ownable, IBEP20 {\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n   constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n   function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n   function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n   function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n   function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"BEP20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"BEP20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n      uint256 currentAllowance = allowance(account, _msgSender());\\r\\n      require(currentAllowance >= amount, \\\"BEP20: burn amount exceeds allowance\\\");\\r\\n      _approve(account, _msgSender(), currentAllowance - amount);\\r\\n      _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n   function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/JaxAdmin.sol\": {\r\n      \"content\": \"\\r\\n // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./interface/IPancakeRouter.sol\\\";\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./JaxOwnable.sol\\\";\\r\\nimport \\\"./JaxLibrary.sol\\\";\\r\\nimport \\\"./JaxProtection.sol\\\";\\r\\n\\r\\ninterface IJaxSwap {\\r\\n  function setTokenAddresses(address _busd, address _wjxn, address _wjax, address _vrp, address _jusd) external;\\r\\n}\\r\\n\\r\\ninterface IJaxToken {\\r\\n  function setTransactionFee(uint tx_fee, uint tx_fee_cap, address wallet) external;\\r\\n  function setReferralFee(uint _referral_fee, uint _referrer_amount_threshold) external;\\r\\n  function setCashback(uint cashback_percent) external;\\r\\n}\\r\\n\\r\\ncontract JaxAdmin is Initializable, JaxOwnable, JaxProtection {\\r\\n\\r\\n  using JaxLibrary for JaxAdmin;\\r\\n\\r\\n  address public admin;\\r\\n  address public new_admin;\\r\\n  uint public new_admin_locktime;\\r\\n\\r\\n  address public ajaxPrime;\\r\\n  address public new_ajaxPrime;\\r\\n  uint public new_ajaxPrime_locktime;\\r\\n\\r\\n  address public newGovernor;\\r\\n  address public governor;\\r\\n  address public new_governor_by_ajaxprime;\\r\\n\\r\\n  address public jaxSwap;\\r\\n  address public jaxPlanet;\\r\\n\\r\\n  uint governorStartDate;\\r\\n\\r\\n  uint public system_status;\\r\\n\\r\\n  string public readme_hash;\\r\\n  string public readme_link;\\r\\n  string public system_policy_hash;\\r\\n  string public system_policy_link;\\r\\n  string public governor_policy_hash;\\r\\n  string public governor_policy_link;\\r\\n\\r\\n  event Set_Blacklist(address[] accounts, bool flag);\\r\\n  event Set_Fee_Freelist(address[] accounts, bool flag);\\r\\n\\r\\n  mapping (address => bool) public blacklist;\\r\\n  mapping (address => bool) public fee_freelist;\\r\\n\\r\\n  uint public priceImpactLimit;\\r\\n\\r\\n  // ------ JaxSwap Control Parameters -------\\r\\n  IPancakeRouter01 public router;\\r\\n\\r\\n  IERC20 public wjxn;\\r\\n  IERC20 public busd;\\r\\n  IERC20 public wjax;\\r\\n  IERC20 public vrp; \\r\\n  IERC20 public jusd;\\r\\n\\r\\n  uint public wjax_usd_ratio;\\r\\n  uint public use_wjax_usd_dex_pair;\\r\\n\\r\\n  uint public wjxn_usd_ratio;\\r\\n  uint public use_wjxn_usd_dex_pair;\\r\\n\\r\\n  uint public wjax_jusd_markup_fee;    \\r\\n  address public wjax_jusd_markup_fee_wallet;\\r\\n\\r\\n  uint public wjxn_wjax_collateralization_ratio;\\r\\n  uint public wjax_collateralization_ratio;\\r\\n  uint public freeze_vrp_wjxn_swap;\\r\\n  \\r\\n  struct JToken{\\r\\n    uint jusd_ratio;\\r\\n    uint markup_fee;\\r\\n    address markup_fee_wallet;\\r\\n    string name;\\r\\n  }\\r\\n\\r\\n  mapping (address => JToken) public jtokens;\\r\\n  address[] public jtoken_addresses;\\r\\n\\r\\n  address[] public operators;\\r\\n\\r\\n  mapping(address => bytes4[]) function_call_whitelist;\\r\\n  mapping(uint => uint) last_call_timestamps;\\r\\n\\r\\n\\r\\n  event Set_Admin(address newAdmin, uint newAdminLocktime);\\r\\n  event Update_Admin(address newAdmin);\\r\\n  event Set_AjaxPrime(address ajaxPrime, uint newAjaxPrimeLocktime);\\r\\n  event Update_AjaxPrime(address newAjaxPrime);\\r\\n  event Set_Governor(address governor);\\r\\n  event Accept_Governor(address governor);\\r\\n  event Set_Operators(address[] operator);\\r\\n  event Set_Jax_Swap(address jaxSwap);\\r\\n  event Set_Jax_Planet(address jaxPlanet);\\r\\n  event Elect_Governor(address governor);\\r\\n  event Update_Governor(address old_governor, address new_governor_by_ajaxprime);\\r\\n  event Set_System_Status(uint flag);\\r\\n  event Set_System_Policy(string policy_hash, string policy_link);\\r\\n  event Set_Readme(string readme_hash, string readme_link);\\r\\n  event Set_Governor_Policy(string governor_policy_hash, string governor_policy_link);\\r\\n\\r\\n  event Set_Price_Impact_Limit(uint limit);\\r\\n  event Set_Token_Addresses(address busd, address wjxn, address wjax, address vrp, address jusd);\\r\\n  event Add_JToken(address token, string name, uint jusd_ratio, uint markup_fee, address markup_fee_wallet);\\r\\n  event Freeze_Vrp_Wjxn_Swap(uint flag);\\r\\n  event Set_Wjxn_Wjax_Collateralization_Ratio(uint wjxn_wjax_collateralization_ratio);\\r\\n  event Set_Wjax_Collateralization_Ratio(uint wjax_collateralization_ratio);\\r\\n  event Set_Wjxn_Usd_Ratio(uint ratio);\\r\\n  event Set_Wjax_Usd_Ratio(uint ratio);\\r\\n  event Set_Use_Wjxn_Usd_Dex_Pair(uint flag);\\r\\n  event Set_Use_Wjax_Usd_Dex_Pair(uint flag);\\r\\n  event Set_Wjax_Jusd_Markup_Fee(uint wjax_jusd_markup_fee, address wallet);\\r\\n  event Set_Jusd_Jtoken_Ratio(address jtoken, uint old_ratio, uint new_ratio);\\r\\n  event Set_Whitelist_For_Operator(address operator, bytes4[] functions);\\r\\n  event Delete_JToken(address jtoken);\\r\\n\\r\\n  modifier checkZeroAddress(address account) {\\r\\n    require(account != address(0x0), \\\"Only non-zero address\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function userIsAdmin (address _user) public view returns (bool) {\\r\\n    return admin == _user;\\r\\n  }\\r\\n\\r\\n  function userIsGovernor (address _user) public view returns (bool) {\\r\\n    return governor == _user;\\r\\n  }\\r\\n\\r\\n  function userIsAjaxPrime (address _user) public view returns (bool) {\\r\\n    return ajaxPrime == _user;\\r\\n  }\\r\\n\\r\\n  function userIsOperator (address _user) public view returns (bool) {\\r\\n    uint index = 0;\\r\\n    uint j = 0;\\r\\n    uint operatorCnt = operators.length;\\r\\n    bytes4[] memory functions_whitelisted;\\r\\n    for(index; index < operatorCnt; index += 1) {\\r\\n      if(operators[index] == _user){\\r\\n        functions_whitelisted = function_call_whitelist[_user];\\r\\n        for(j = 0; j < functions_whitelisted.length; j+=1) {\\r\\n          if(functions_whitelisted[j] == msg.sig)\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  modifier onlyAdmin() {\\r\\n    require(userIsAdmin(msg.sender) || msg.sender == owner, \\\"Only Admin can perform this operation\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernor() {\\r\\n    require(userIsGovernor(msg.sender), \\\"Only Governor can perform this operation\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAjaxPrime() {\\r\\n    require(userIsAjaxPrime(msg.sender) || msg.sender == owner, \\\"Only AjaxPrime can perform this operation\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator() {\\r\\n    require(userIsOperator(msg.sender) || userIsGovernor(msg.sender), \\\"Only operators can perform this operation\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier callLimit(uint key, uint period) {\\r\\n    require(last_call_timestamps[key] + period <= block.timestamp, \\\"Not cool down yet\\\");\\r\\n    _;\\r\\n    last_call_timestamps[key] = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function setSystemStatus(uint status) external onlyGovernor {\\r\\n    system_status = status;\\r\\n    emit Set_System_Status(status);\\r\\n  }\\r\\n\\r\\n  function setAdmin (address _admin ) external onlyAdmin {\\r\\n    if(_admin == address(0x0)){\\r\\n      admin = _admin;\\r\\n      new_admin = address(0x0);\\r\\n      emit Update_Admin(_admin);\\r\\n      return;\\r\\n    }\\r\\n    else {\\r\\n      new_admin = _admin;\\r\\n      new_admin_locktime = block.timestamp + 2 days;\\r\\n    }\\r\\n    emit Set_Admin(_admin, new_admin_locktime);\\r\\n  }\\r\\n\\r\\n  function updateAdmin () external {\\r\\n    require(msg.sender == new_admin, \\\"Only new admin\\\");\\r\\n    require(block.timestamp >= new_admin_locktime, \\\"New admin is not unlocked yet\\\");\\r\\n    admin = new_admin;\\r\\n    new_admin = address(0x0);\\r\\n    emit Update_Admin(admin);\\r\\n  }\\r\\n\\r\\n  function setGovernor (address _governor) external checkZeroAddress(_governor) onlyAjaxPrime runProtection {\\r\\n    new_governor_by_ajaxprime = _governor;\\r\\n    emit Set_Governor(_governor);\\r\\n  }\\r\\n\\r\\n  function acceptGovernorship () external {\\r\\n    require(msg.sender == new_governor_by_ajaxprime, \\\"Only new governor\\\");\\r\\n    governor = new_governor_by_ajaxprime;\\r\\n    new_governor_by_ajaxprime = address(0x0);\\r\\n    emit Accept_Governor(governor);\\r\\n  }\\r\\n\\r\\n  function setOperators (address[] calldata _operators) external onlyGovernor {\\r\\n    uint operatorsCnt = _operators.length;\\r\\n    delete operators;\\r\\n    for(uint index = 0; index < operatorsCnt; index += 1 ) {\\r\\n      operators.push(_operators[index]);\\r\\n    }\\r\\n    emit Set_Operators(_operators);\\r\\n  }\\r\\n\\r\\n  function setWhitelistForOperator(address operator, bytes4[] calldata functions) external onlyGovernor {\\r\\n    bytes4[] storage whitelist = function_call_whitelist[operator];\\r\\n    uint length = whitelist.length;\\r\\n    uint i = 0;\\r\\n    for(; i < length; i+=1 ) {\\r\\n      whitelist.pop();\\r\\n    }\\r\\n    for(i = 0; i < functions.length; i+=1) {\\r\\n      whitelist.push(functions[i]);\\r\\n    }\\r\\n    emit Set_Whitelist_For_Operator(operator, functions);\\r\\n  }\\r\\n\\r\\n  function electGovernor (address _governor) external {\\r\\n    require(msg.sender == address(vrp), \\\"Only VRP contract can perform this operation.\\\");\\r\\n    newGovernor = _governor;\\r\\n    governorStartDate = block.timestamp + 7 days;\\r\\n    emit Elect_Governor(_governor);\\r\\n  }\\r\\n\\r\\n  function setAjaxPrime (address _ajaxPrime) external onlyAjaxPrime {\\r\\n    if(_ajaxPrime == address(0x0)) {\\r\\n      ajaxPrime = _ajaxPrime;\\r\\n      new_ajaxPrime = address(0x0);\\r\\n      emit Update_AjaxPrime(_ajaxPrime);\\r\\n      return;\\r\\n    }\\r\\n    new_ajaxPrime = _ajaxPrime;\\r\\n    new_ajaxPrime_locktime = block.timestamp + 2 days;\\r\\n    emit Set_AjaxPrime(_ajaxPrime, new_ajaxPrime_locktime);\\r\\n  }\\r\\n\\r\\n  function updateAjaxPrime () external {\\r\\n    require(msg.sender == new_ajaxPrime, \\\"Only new ajax prime\\\");\\r\\n    require(block.timestamp >= new_ajaxPrime_locktime, \\\"New ajax prime is not unlocked yet\\\");\\r\\n    ajaxPrime = new_ajaxPrime;\\r\\n    new_ajaxPrime = address(0x0);\\r\\n    emit Update_AjaxPrime(ajaxPrime);\\r\\n  }\\r\\n\\r\\n  function updateGovernor () external {\\r\\n    require(newGovernor != governor && newGovernor != address(0x0), \\\"New governor hasn't been elected\\\");\\r\\n    require(governorStartDate <= block.timestamp, \\\"New governor is not ready\\\");\\r\\n    require(msg.sender == newGovernor, \\\"You are not nominated as potential governor\\\");\\r\\n    address old_governor = governor;\\r\\n    governor = newGovernor;\\r\\n    newGovernor = address(0x0);\\r\\n    emit Update_Governor(old_governor, newGovernor);\\r\\n  }\\r\\n\\r\\n  function set_system_policy(string memory _policy_hash, string memory _policy_link) public onlyAdmin runProtection {\\r\\n    system_policy_hash = _policy_hash;\\r\\n    system_policy_link = _policy_link;\\r\\n    emit Set_System_Policy(_policy_hash, _policy_link);\\r\\n  }\\r\\n\\r\\n  function set_readme(string memory _readme_hash, string memory _readme_link) external onlyGovernor {\\r\\n    readme_hash = _readme_hash;\\r\\n    readme_link = _readme_link;\\r\\n    emit Set_Readme(_readme_hash, _readme_link);\\r\\n  }\\r\\n  \\r\\n  function set_governor_policy(string memory _hash, string memory _link) external onlyGovernor {\\r\\n    governor_policy_hash = _hash;\\r\\n    governor_policy_link = _link;\\r\\n    emit Set_Governor_Policy(_hash, _link);\\r\\n  }\\r\\n\\r\\n\\r\\n  function set_fee_freelist(address[] calldata accounts, bool flag) external onlyAjaxPrime runProtection {\\r\\n      uint length = accounts.length;\\r\\n      for(uint i = 0; i < length; i++) {\\r\\n          fee_freelist[accounts[i]] = flag;\\r\\n      }\\r\\n    emit Set_Fee_Freelist(accounts, flag);\\r\\n  }\\r\\n\\r\\n  function set_blacklist(address[] calldata accounts, bool flag) external onlyGovernor {\\r\\n    uint length = accounts.length;\\r\\n    for(uint i = 0; i < length; i++) {\\r\\n      blacklist[accounts[i]] = flag;\\r\\n    }\\r\\n    emit Set_Blacklist(accounts, flag);\\r\\n  }\\r\\n\\r\\n  function setTransactionFee(address token, uint tx_fee, uint tx_fee_cap, address wallet) external onlyGovernor {\\r\\n      IJaxToken(token).setTransactionFee(tx_fee, tx_fee_cap, wallet);\\r\\n  }\\r\\n\\r\\n  function setReferralFee(address token, uint _referral_fee, uint _referrer_amount_threshold) public onlyGovernor {\\r\\n      IJaxToken(token).setReferralFee(_referral_fee, _referrer_amount_threshold);\\r\\n  }\\r\\n\\r\\n  function setCashback(address token, uint cashback_percent) public onlyGovernor {\\r\\n      IJaxToken(token).setCashback(cashback_percent);\\r\\n  }\\r\\n\\r\\n  // ------ jaxSwap -----\\r\\n  function setJaxSwap(address _jaxSwap) public checkZeroAddress(_jaxSwap) onlyAdmin runProtection {\\r\\n    jaxSwap = _jaxSwap;\\r\\n    emit Set_Jax_Swap(_jaxSwap);\\r\\n  }\\r\\n\\r\\n  // ------ jaxPlanet -----\\r\\n  function setJaxPlanet(address _jaxPlanet) public checkZeroAddress(_jaxPlanet) onlyAdmin runProtection {\\r\\n    jaxPlanet = _jaxPlanet;\\r\\n    emit Set_Jax_Planet(_jaxPlanet);\\r\\n  }\\r\\n\\r\\n  function setTokenAddresses(address _busd, address _wjxn, address _wjax, address _vrp, address _jusd) public onlyAdmin \\r\\n     checkZeroAddress(_busd) checkZeroAddress(_wjxn) checkZeroAddress(_wjax) checkZeroAddress(_vrp) checkZeroAddress(_jusd)\\r\\n     runProtection\\r\\n  {\\r\\n    busd = IERC20(_busd);\\r\\n    wjxn = IERC20(_wjxn);\\r\\n    wjax = IERC20(_wjax);\\r\\n    vrp = IERC20(_vrp);\\r\\n    jusd = IERC20(_jusd);\\r\\n    IJaxSwap(jaxSwap).setTokenAddresses(_busd, _wjxn, _wjax, _vrp, _jusd);\\r\\n    emit Set_Token_Addresses(_busd, _wjxn, _wjax, _vrp, _jusd);\\r\\n  }\\r\\n\\r\\n  function add_jtoken(address token, string calldata name, uint jusd_ratio, uint markup_fee, address markup_fee_wallet) external onlyAjaxPrime runProtection {\\r\\n    require(markup_fee <= 25 * 1e5, \\\"markup fee cannot over 2.5%\\\");\\r\\n    require(jusd_ratio > 0, \\\"JUSD-JToken ratio should not be zero\\\");\\r\\n\\r\\n    JToken storage newtoken = jtokens[token];\\r\\n    require(newtoken.jusd_ratio == 0, \\\"Already added\\\");\\r\\n    jtoken_addresses.push(token);\\r\\n\\r\\n    newtoken.name = name;\\r\\n    newtoken.jusd_ratio = jusd_ratio;\\r\\n    newtoken.markup_fee = markup_fee;\\r\\n    newtoken.markup_fee_wallet = markup_fee_wallet;\\r\\n    emit Add_JToken(token, name, jusd_ratio, markup_fee, markup_fee_wallet);\\r\\n  }\\r\\n\\r\\n  function delete_jtoken(address token) external onlyAjaxPrime runProtection {\\r\\n    JToken storage jtoken = jtokens[token];\\r\\n    jtoken.jusd_ratio = 0;\\r\\n    uint jtoken_index = 0;\\r\\n    uint jtoken_count = jtoken_addresses.length;\\r\\n    for(jtoken_index; jtoken_index < jtoken_count; jtoken_index += 1){\\r\\n      if(jtoken_addresses[jtoken_index] == token)\\r\\n      {\\r\\n        if(jtoken_count > 1)\\r\\n          jtoken_addresses[jtoken_index] = jtoken_addresses[jtoken_count-1];\\r\\n        jtoken_addresses.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    require(jtoken_index != jtoken_count, \\\"Invalid JToken Address\\\");\\r\\n    emit Delete_JToken(token);\\r\\n  }\\r\\n\\r\\n  function check_price_bound(uint oldPrice, uint newPrice, uint percent) internal pure returns(bool) {\\r\\n    return newPrice <= oldPrice * (100 + percent) / 100 \\r\\n           && newPrice >= oldPrice * (100 - percent) / 100;\\r\\n  }\\r\\n\\r\\n  function set_jusd_jtoken_ratio(address token, uint jusd_ratio) external onlyOperator callLimit(uint(uint160(token)), 1 hours) {\\r\\n    JToken storage jtoken = jtokens[token];\\r\\n    uint old_ratio = jtoken.jusd_ratio;\\r\\n    require(check_price_bound(old_ratio, jusd_ratio, 3), \\\"Out of 3% ratio change\\\");\\r\\n    jtoken.jusd_ratio = jusd_ratio;\\r\\n    emit Set_Jusd_Jtoken_Ratio(token, old_ratio, jusd_ratio);\\r\\n  }\\r\\n\\r\\n  function set_use_wjxn_usd_dex_pair(uint flag) external onlyGovernor {\\r\\n    use_wjxn_usd_dex_pair = flag;\\r\\n    emit Set_Use_Wjxn_Usd_Dex_Pair(flag);\\r\\n  }\\r\\n\\r\\n  function set_use_wjax_usd_dex_pair(uint flag) external onlyGovernor {\\r\\n    use_wjax_usd_dex_pair = flag;\\r\\n    emit Set_Use_Wjax_Usd_Dex_Pair(flag);\\r\\n  }\\r\\n\\r\\n  function set_wjxn_usd_ratio(uint ratio) external onlyOperator callLimit(0x1, 1 hours){\\r\\n    require(wjxn_usd_ratio == 0 || check_price_bound(wjxn_usd_ratio, ratio, 10),\\r\\n        \\\"Out of 10% ratio change\\\");\\r\\n    wjxn_usd_ratio = ratio;\\r\\n    emit Set_Wjxn_Usd_Ratio(ratio);\\r\\n  }\\r\\n\\r\\n  function set_wjax_usd_ratio(uint ratio) external onlyOperator callLimit(0x2, 1 hours) {\\r\\n    require(wjax_usd_ratio == 0 || check_price_bound(wjax_usd_ratio, ratio, 5), \\r\\n      \\\"Out of 5% ratio change\\\");\\r\\n    wjax_usd_ratio = ratio;\\r\\n    emit Set_Wjax_Usd_Ratio(ratio);\\r\\n  }\\r\\n\\r\\n  function get_wjxn_wjax_ratio(uint withdrawal_amount) public view returns (uint) {\\r\\n    if( wjax.balanceOf(jaxSwap) == 0 ) return 1e8;\\r\\n    if( wjxn.balanceOf(jaxSwap) == 0 ) return 0;\\r\\n    return 1e8 * ((10 ** wjax.decimals()) * (wjxn.balanceOf(jaxSwap) - withdrawal_amount) \\r\\n        * get_wjxn_usd_ratio()) / (wjax.balanceOf(jaxSwap) * get_wjax_usd_ratio() * (10 ** wjxn.decimals()));\\r\\n  }\\r\\n  \\r\\n  function get_wjxn_usd_ratio() public view returns (uint){\\r\\n    \\r\\n    // Using manual ratio.\\r\\n    if( use_wjxn_usd_dex_pair == 0 ) {\\r\\n      return wjxn_usd_ratio;\\r\\n    }\\r\\n\\r\\n    return getPrice(address(wjxn), address(busd)); // return amount of token0 needed to buy token1\\r\\n  }\\r\\n\\r\\n  function get_wjxn_vrp_ratio() public view returns (uint wjxn_vrp_ratio) {\\r\\n    if( vrp.totalSupply() == 0){\\r\\n      wjxn_vrp_ratio = 1e8;\\r\\n    }\\r\\n    else if(wjxn.balanceOf(jaxSwap) == 0) {\\r\\n      wjxn_vrp_ratio = 0;\\r\\n    }\\r\\n    else {\\r\\n      wjxn_vrp_ratio = 1e8 * vrp.totalSupply() * (10 ** wjxn.decimals()) / wjxn.balanceOf(jaxSwap) / (10 ** vrp.decimals());\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  function get_vrp_wjxn_ratio() public view returns (uint) {\\r\\n    uint vrp_wjxn_ratio = 0;\\r\\n    if(wjxn.balanceOf(jaxSwap) == 0 || vrp.totalSupply() == 0) {\\r\\n        vrp_wjxn_ratio = 0;\\r\\n    }\\r\\n    else {\\r\\n        vrp_wjxn_ratio = 1e8 * wjxn.balanceOf(jaxSwap) * (10 ** vrp.decimals()) / vrp.totalSupply() / (10 ** wjxn.decimals());\\r\\n    }\\r\\n    return (vrp_wjxn_ratio);\\r\\n  }\\r\\n\\r\\n  function get_wjax_usd_ratio() public view returns (uint){\\r\\n    // Using manual ratio.\\r\\n    if( use_wjax_usd_dex_pair == 0 ) {\\r\\n        return wjax_usd_ratio;\\r\\n    }\\r\\n\\r\\n    return getPrice(address(wjax), address(busd));\\r\\n  }\\r\\n\\r\\n  function get_usd_wjax_ratio() public view returns (uint){\\r\\n    return 1e8 * 1e8 / get_wjax_usd_ratio();\\r\\n  }\\r\\n\\r\\n  function set_freeze_vrp_wjxn_swap(uint flag) external onlyGovernor {\\r\\n    freeze_vrp_wjxn_swap = flag;\\r\\n    emit Freeze_Vrp_Wjxn_Swap(flag);\\r\\n  }\\r\\n\\r\\n  function set_wjxn_wjax_collateralization_ratio(uint ratio) external onlyGovernor {\\r\\n    require(ratio >= 1e7 && ratio <= 2e8, \\\"Ratio must be 10% - 200%\\\");\\r\\n    wjxn_wjax_collateralization_ratio = ratio;\\r\\n    emit Set_Wjxn_Wjax_Collateralization_Ratio(ratio);\\r\\n  }\\r\\n\\r\\n  function set_wjax_collateralization_ratio(uint ratio) external onlyGovernor {\\r\\n    require(ratio >= 5e7 && ratio <= 1e8, \\\"Ratio must be 50% - 100%\\\");\\r\\n    wjax_collateralization_ratio = ratio;\\r\\n    emit Set_Wjax_Collateralization_Ratio(ratio);\\r\\n  }\\r\\n\\r\\n  function set_wjax_jusd_markup_fee(uint _wjax_jusd_markup_fee, address _wallet) external checkZeroAddress(_wallet) onlyGovernor {\\r\\n    require(_wjax_jusd_markup_fee <= 25 * 1e5, \\\"Markup fee must be less than 2.5%\\\");\\r\\n    wjax_jusd_markup_fee = _wjax_jusd_markup_fee;\\r\\n    wjax_jusd_markup_fee_wallet = _wallet;\\r\\n    emit Set_Wjax_Jusd_Markup_Fee(_wjax_jusd_markup_fee, _wallet);\\r\\n  }\\r\\n\\r\\n  function setPriceImpactLimit(uint limit) external onlyGovernor {\\r\\n    require(limit <= 3e6, \\\"price impact cannot be over 3%\\\");\\r\\n    priceImpactLimit = limit;\\r\\n    emit Set_Price_Impact_Limit(limit);\\r\\n  }\\r\\n\\r\\n  // wjax_usd_value: decimal 8, lsc_usd_value decimal: 18\\r\\n  function show_reserves() public view returns(uint, uint, uint){\\r\\n    uint wjax_reserves = wjax.balanceOf(jaxSwap);\\r\\n\\r\\n    uint wjax_usd_value = wjax_reserves * get_wjax_usd_ratio() * (10 ** jusd.decimals()) / 1e8 / (10 ** wjax.decimals());\\r\\n    uint lsc_usd_value = jusd.totalSupply();\\r\\n\\r\\n    uint jtoken_count = jtoken_addresses.length;\\r\\n    for(uint i = 0; i < jtoken_count; i++) {\\r\\n      address addr = jtoken_addresses[i];\\r\\n      lsc_usd_value += IERC20(addr).totalSupply() * 1e8 / jtokens[addr].jusd_ratio;\\r\\n    }\\r\\n    uint wjax_lsc_ratio = 1;\\r\\n    if( lsc_usd_value > 0 ){\\r\\n      wjax_lsc_ratio = wjax_usd_value * 1e8 / lsc_usd_value;\\r\\n    }\\r\\n    return (wjax_lsc_ratio, wjax_usd_value, lsc_usd_value);\\r\\n  }\\r\\n  // ------ end jaxSwap ------\\r\\n\\r\\n  function getPrice(address token0, address token1) internal view returns(uint) {\\r\\n    IPancakePair pair = IPancakePair(IPancakeFactory(router.factory()).getPair(token0, token1));\\r\\n    (uint res0, uint res1,) = pair.getReserves();\\r\\n    res0 *= 10 ** (18 - IERC20(pair.token0()).decimals());\\r\\n    res1 *= 10 ** (18 - IERC20(pair.token1()).decimals());\\r\\n    if(pair.token0() == token1) {\\r\\n        if(res1 > 0)\\r\\n            return 1e8 * res0 / res1;\\r\\n    } \\r\\n    else {\\r\\n        if(res0 > 0)\\r\\n            return 1e8 * res1 / res0;\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n  \\r\\n  function initialize(address pancakeRouter) public initializer {\\r\\n    admin = msg.sender;\\r\\n    governor = msg.sender;\\r\\n    ajaxPrime = msg.sender;\\r\\n    // System state\\r\\n    system_status = 2;\\r\\n    owner = msg.sender;\\r\\n    router = IPancakeRouter01(pancakeRouter);\\r\\n  }\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() initializer {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP standard.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external view returns (address);\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP standard.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function getOwner() external view returns (address);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/JaxOwnable.sol\": {\r\n      \"content\": \"\\r\\n // SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ncontract JaxOwnable {\\r\\n\\r\\n  address public owner;\\r\\n  address public new_owner;\\r\\n  uint public new_owner_locktime;\\r\\n  \\r\\n  event Set_New_Owner(address newOwner, uint newOwnerLocktime);\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n      require(owner == msg.sender, \\\"JaxOwnable: caller is not the owner\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  function setNewOwner(address newOwner) external onlyOwner {\\r\\n    require(newOwner != address(0x0), \\\"New owner cannot be zero address\\\");\\r\\n    new_owner = newOwner;\\r\\n    new_owner_locktime = block.timestamp + 2 days;\\r\\n    emit Set_New_Owner(newOwner, new_owner_locktime);\\r\\n  }\\r\\n\\r\\n  function updateOwner() external {\\r\\n    require(msg.sender == new_owner, \\\"Only new owner\\\");\\r\\n    require(block.timestamp >= new_owner_locktime, \\\"New admin is not unlocked yet\\\");\\r\\n    _transferOwnership(new_owner);\\r\\n    new_owner = address(0x0);\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() external onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n  * Internal function without access restriction.\\r\\n  */\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = owner;\\r\\n    owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/JaxLibrary.sol\": {\r\n      \"content\": \"\\r\\n // SPDX-License-Identifier: MIT\\r\\n pragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"./interface/IPancakeRouter.sol\\\";\\r\\n\\r\\nlibrary JaxLibrary {\\r\\n\\r\\n  function swapWithPriceImpactLimit(address router, uint amountIn, uint limit, address[] memory path, address to) internal returns(uint[] memory) {\\r\\n    IPancakeRouter01 pancakeRouter = IPancakeRouter01(router);\\r\\n    \\r\\n    IPancakePair pair = IPancakePair(IPancakeFactory(pancakeRouter.factory()).getPair(path[0], path[1]));\\r\\n    (uint res0, uint res1, ) = pair.getReserves();\\r\\n    uint reserveIn;\\r\\n    uint reserveOut;\\r\\n    if(pair.token0() == path[0]) {\\r\\n      reserveIn = res0;\\r\\n      reserveOut = res1;\\r\\n    } else {\\r\\n      reserveIn = res1;\\r\\n      reserveOut = res0;\\r\\n    }\\r\\n    uint amountOut = pancakeRouter.getAmountOut(amountIn, reserveIn, reserveOut);\\r\\n    require(reserveOut * 1e36 * (1e8 - limit) / 1e8 / reserveIn <= amountOut * 1e36 / amountIn, \\\"Price Impact too high\\\");\\r\\n    return pancakeRouter.swapExactTokensForTokens(amountIn, 0, path, to, block.timestamp);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/JaxProtection.sol\": {\r\n      \"content\": \"\\n // SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ncontract JaxProtection {\\n\\n    struct RunProtection {\\n        bytes32 data_hash;\\n        uint64 request_timestamp;\\n        address sender;\\n        bool executed;\\n    }\\n\\n    mapping(bytes4 => RunProtection) run_protection_info;\\n\\n    event Request_Update(bytes4 sig, bytes data);\\n\\n    modifier runProtection() {\\n        RunProtection storage protection = run_protection_info[msg.sig];\\n        bytes32 data_hash = keccak256(msg.data);\\n        if(data_hash != protection.data_hash || protection.sender != msg.sender) {\\n        protection.sender = msg.sender;\\n        protection.data_hash = keccak256(msg.data);\\n            protection.request_timestamp = uint64(block.timestamp);\\n            protection.executed = false;\\n            emit Request_Update(msg.sig, msg.data);\\n            return;\\n        }\\n        require(protection.executed == false, \\\"Already executed\\\");\\n        require(block.timestamp >= uint(protection.request_timestamp) + 2 days, \\\"Running is Locked\\\");\\n        _;\\n        protection.executed = true;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashback_percent\",\"type\":\"uint256\"}],\"name\":\"Set_Cashback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jax_admin\",\"type\":\"address\"}],\"name\":\"Set_Jax_Admin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_amount_threshold\",\"type\":\"uint256\"}],\"name\":\"Set_Referral_Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transaction_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trasnaction_fee_cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transaction_fee_wallet\",\"type\":\"address\"}],\"name\":\"Set_Transaction_Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jaxAdmin\",\"outputs\":[{\"internalType\":\"contract IJaxAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer_amount_threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cashback_percent\",\"type\":\"uint256\"}],\"name\":\"setCashback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jaxAdmin\",\"type\":\"address\"}],\"name\":\"setJaxAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referral_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrer_amount_threshold\",\"type\":\"uint256\"}],\"name\":\"setReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tx_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tx_fee_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transaction_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transaction_fee_cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tx_fee_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "JAXRE", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}