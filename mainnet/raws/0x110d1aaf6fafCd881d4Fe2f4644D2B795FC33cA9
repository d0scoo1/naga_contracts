{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\npragma abicoder v2;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract OwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract Ownable is OwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function add32(uint32 x, uint32 y) internal pure returns (uint32 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function sub32(uint32 x, uint32 y) internal pure returns (uint32 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 value, \r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 weiValue, \r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target, \r\n        bytes memory data, \r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success, \r\n        bytes memory returndata, \r\n        string memory errorMessage\r\n    ) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using LowGasSafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender)\r\n            .sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ );\r\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\r\n}\r\n\r\ninterface IBondCalculator {\r\n    function valuation( address _LP, uint _amount ) external view returns ( uint );\r\n    function markdown( address _LP ) external view returns ( uint );\r\n    function marketPrice( address _LP ) external view returns ( uint );\r\n}\r\n\r\ninterface IStaking {\r\n    enum LOCKUPS { NONE, MONTH1, MONTH3, MONTH6 }\r\n    function stake( uint _amount, address _recipient, LOCKUPS _lockup ) external returns ( bool );\r\n}\r\n\r\ninterface IStakingHelper {\r\n    function stake( uint _amount, address _recipient ) external;\r\n    function stakeOneMonth( uint _amount, address _recipient ) external;\r\n    function stakeThreeMonths( uint _amount, address _recipient ) external;\r\n    function stakeSixMonths( uint _amount, address _recipient ) external;\r\n}\r\n\r\ncontract SINBondDepository is Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using LowGasSafeMath for uint;\r\n    using LowGasSafeMath for uint32;\r\n\r\n\r\n\r\n\r\n    /* ======== EVENTS ======== */\r\n\r\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\r\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\r\n    event BondPriceChanged( uint indexed priceInUSD, uint indexed internalPrice, uint indexed debtRatio );\r\n    event DiscountAdjustment( uint initialDiscount, uint newDiscount, uint adjustment, bool addition );\r\n    event InitTerms( Terms terms);\r\n    event LogSetTerms(PARAMETER param, uint value);\r\n    event LogSetAdjustment( Adjust adjust);\r\n    event LogSetStaking( address indexed stakingContract, bool isHelper);\r\n    event LogRecoverLostToken( address indexed tokenToRecover, uint amount);\r\n\r\n\r\n\r\n    /* ======== STATE VARIABLES ======== */\r\n\r\n    IERC20 public immutable SIN; // token given as payment for bond\r\n    IERC20 public immutable principle; // token used to create bond\r\n    ITreasury public immutable treasury; // mints SIN when receives principle\r\n    address public immutable DAO; // receives profit share from bond\r\n\r\n    bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\r\n    IBondCalculator public immutable bondCalculator; // calculates value of LP tokens\r\n\r\n    IStaking public staking; // to auto-stake payout\r\n    IStakingHelper public stakingHelper; // to stake and claim if no staking warmup\r\n    bool public useHelper;\r\n\r\n    Terms public terms; // stores terms for new bonds\r\n    Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\r\n    uint32 public lastDecay; // reference time for debt decay\r\n\r\n    mapping (address => bool) public allowedZappers;\r\n    \r\n    address public liquidityPool;\r\n\r\n\r\n\r\n    /* ======== STRUCTS ======== */\r\n\r\n    // Info for creating new bonds\r\n    struct Terms {\r\n        uint discount; // scaling variable for price\r\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n        uint fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\r\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n        uint32 vestingTerm; // in seconds\r\n    }\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // SIN remaining to be paid\r\n        uint pricePaid; // In DAI, for front end viewing\r\n        uint32 lastTime; // Last interaction\r\n        uint32 vesting; // Seconds left to vest\r\n    }\r\n\r\n    // Info for incremental adjustments to control variable \r\n    struct Adjust {\r\n        bool add; // addition or subtraction\r\n        uint rate; // increment\r\n        uint target; // BCV when adjustment finished\r\n        uint32 buffer; // minimum length (in seconds) between adjustments\r\n        uint32 lastTime; // time when last adjustment made\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======== INITIALIZATION ======== */\r\n\r\n    constructor ( \r\n        address _SIN,\r\n        address _principle,\r\n        address _treasury, \r\n        address _DAO, \r\n        address _bondCalculator,\r\n        address _liquidityPool,\r\n        bool _isLiquidityBond\r\n    ) {\r\n        require( _SIN != address(0) );\r\n        SIN = IERC20(_SIN);\r\n        require( _principle != address(0) );\r\n        principle = IERC20(_principle);\r\n        require( _treasury != address(0) );\r\n        treasury = ITreasury(_treasury);\r\n        require( _DAO != address(0) );\r\n        DAO = _DAO;\r\n        // bondCalculator should be address(0) if not LP bond\r\n        bondCalculator = IBondCalculator(_bondCalculator);\r\n        isLiquidityBond = _isLiquidityBond;\r\n        liquidityPool = _liquidityPool;\r\n    }\r\n\r\n    /**\r\n     *  @notice initializes bond parameters\r\n     *  @param _discount uint\r\n     *  @param _vestingTerm uint32\r\n     *  @param _maxPayout uint\r\n     *  @param _fee uint\r\n     *  @param _maxDebt uint\r\n     */\r\n    function initializeBondTerms( \r\n        uint _discount, \r\n        uint _maxPayout,\r\n        uint _fee,\r\n        uint _maxDebt,\r\n        uint32 _vestingTerm\r\n    ) external onlyOwner() {\r\n        require( terms.discount == 0, \"Bonds must be initialized from 0\" );\r\n        require( _discount <= 10000, \"Discount can't be more than 10000 percent\" );\r\n        require( _maxPayout <= 1000, \"Payout cannot be above 1 percent\" );\r\n        require( _vestingTerm >= 129600, \"Vesting must be longer than 36 hours\" );\r\n        require( _fee <= 10000, \"DAO fee cannot exceed payout\" );\r\n        terms = Terms ({\r\n            discount: _discount,\r\n            maxPayout: _maxPayout,\r\n            fee: _fee,\r\n            maxDebt: _maxDebt,\r\n            vestingTerm: _vestingTerm\r\n        });\r\n        lastDecay = uint32(block.timestamp);\r\n        emit InitTerms(terms);\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== POLICY FUNCTIONS ======== */\r\n\r\n    enum PARAMETER { VESTING, PAYOUT, FEE, DEBT}\r\n    /**\r\n     *  @notice set parameters for new bonds\r\n     *  @param _parameter PARAMETER\r\n     *  @param _input uint\r\n     */\r\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyOwner() {\r\n        if ( _parameter == PARAMETER.VESTING ) { // 0\r\n            require( _input >= 129600, \"Vesting must be longer than 36 hours\" );\r\n            terms.vestingTerm = uint32(_input);\r\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\r\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\r\n            terms.maxPayout = _input;\r\n        } else if ( _parameter == PARAMETER.FEE ) { // 2\r\n            require( _input <= 10000, \"DAO fee cannot exceed payout\" );\r\n            terms.fee = _input;\r\n        } else if ( _parameter == PARAMETER.DEBT ) { // 3\r\n            terms.maxDebt = _input;\r\n        }\r\n        emit LogSetTerms(_parameter, _input);\r\n    }\r\n\r\n    /**\r\n     *  @notice set control variable adjustment\r\n     *  @param _addition bool\r\n     *  @param _increment uint\r\n     *  @param _target uint\r\n     *  @param _buffer uint\r\n     */\r\n    function setAdjustment ( \r\n        bool _addition,\r\n        uint _increment, \r\n        uint _target,\r\n        uint32 _buffer \r\n    ) external onlyOwner() {\r\n        require(_target <= 10000, \"Target can't be more than 10000\");\r\n        require(_increment <= 200, \"Increment can't be greater than 2 percent\");\r\n        adjustment = Adjust({\r\n            add: _addition,\r\n            rate: _increment,\r\n            target: _target,\r\n            buffer: _buffer,\r\n            lastTime: uint32(block.timestamp)\r\n        });\r\n        emit LogSetAdjustment(adjustment);\r\n    }\r\n\r\n    /**\r\n     *  @notice set contract for auto stake\r\n     *  @param _staking address\r\n     *  @param _helper bool\r\n     */\r\n    function setStaking( address _staking, bool _helper ) external onlyOwner() {\r\n        require( _staking != address(0), \"IA\" );\r\n        if ( _helper ) {\r\n            useHelper = true;\r\n            stakingHelper = IStakingHelper(_staking);\r\n        } else {\r\n            useHelper = false;\r\n            staking = IStaking(_staking);\r\n        }\r\n        emit LogSetStaking(_staking, _helper);\r\n    }\r\n\r\n    function allowZapper(address zapper) external onlyOwner {\r\n        require(zapper != address(0), \"ZNA\");\r\n        \r\n        allowedZappers[zapper] = true;\r\n    }\r\n\r\n    function removeZapper(address zapper) external onlyOwner {\r\n       \r\n        allowedZappers[zapper] = false;\r\n    }\r\n\r\n\r\n    \r\n\r\n    /* ======== USER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice deposit bond\r\n     *  @param _amount uint\r\n     *  @param _maxPrice uint\r\n     *  @param _depositor address\r\n     *  @return uint\r\n     */\r\n    function deposit( \r\n        uint _amount, \r\n        uint _maxPrice,\r\n        address _depositor\r\n    ) external returns ( uint ) {\r\n        require( _depositor != address(0), \"Invalid address\" );\r\n        require(msg.sender == _depositor || allowedZappers[msg.sender], \"LFNA\");\r\n        \r\n        \r\n        uint priceInUSD = bondPriceInUSD(); // Stored in bond info\r\n        uint nativePrice = bondPrice();\r\n\r\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = treasury.valueOf( address(principle), _amount );\r\n        uint payout = payoutFor( value ); // payout to bonder is computed\r\n        require( totalDebt.add(value) <= terms.maxDebt, \"Max capacity reached\" );\r\n        require( payout >= 10000000, \"Bond too small\" ); // must be > 0.01 SIN ( underflow protection )\r\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n        // profits are calculated\r\n        uint fee = payout.mul( terms.fee )/ 10000 ;\r\n        uint profit = value.sub( payout ).sub( fee );\r\n\r\n        /**\r\n            principle is transferred in\r\n            approved and\r\n            deposited into the treasury, returning (_amount - profit) SIN\r\n         */\r\n        principle.safeTransferFrom( msg.sender, address(this), _amount );\r\n        principle.approve( address( treasury ), _amount );\r\n        treasury.deposit( _amount, address(principle), profit );\r\n        \r\n        if ( fee != 0 ) { // fee is transferred to dao \r\n            SIN.safeTransfer( DAO, fee ); \r\n        }\r\n        // total debt is increased\r\n        totalDebt = totalDebt.add( value ); \r\n                \r\n        // depositor info is stored\r\n        bondInfo[ _depositor ] = Bond({ \r\n            payout: bondInfo[ _depositor ].payout.add( payout ),\r\n            vesting: terms.vestingTerm,\r\n            lastTime: uint32(block.timestamp),\r\n            pricePaid: priceInUSD\r\n        });\r\n\r\n        // indexed events are emitted\r\n        emit BondCreated( _amount, payout, block.timestamp.add( terms.vestingTerm ), priceInUSD );\r\n        emit BondPriceChanged( bondPriceInUSD(), bondPrice(), debtRatio() );\r\n\r\n        adjust(); // control variable is adjusted\r\n        return payout; \r\n    }\r\n\r\n    /** \r\n     *  @notice redeem bond for user\r\n     *  @param _recipient address\r\n     *  @param _stake bool\r\n     *  @return uint\r\n     */ \r\n    function redeem( address _recipient, bool _stake, IStaking.LOCKUPS _lockup ) external returns ( uint ) {\r\n        require(msg.sender == _recipient, \"NA\");     \r\n        Bond memory info = bondInfo[ _recipient ];\r\n        // (seconds since last interaction / vesting term remaining)\r\n        uint percentVested = percentVestedFor( _recipient );\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested\r\n            delete bondInfo[ _recipient ]; // delete user info\r\n            emit BondRedeemed( _recipient, info.payout, 0 ); // emit bond data\r\n            return stakeOrSend( _recipient, _stake, info.payout, _lockup ); // pay user everything due\r\n\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul( percentVested ) / 10000 ;\r\n            // store updated deposit info\r\n            bondInfo[ _recipient ] = Bond({\r\n                payout: info.payout.sub( payout ),\r\n                vesting: info.vesting.sub32( uint32( block.timestamp ).sub32( info.lastTime ) ),\r\n                lastTime: uint32(block.timestamp),\r\n                pricePaid: info.pricePaid\r\n            });\r\n\r\n            emit BondRedeemed( _recipient, payout, bondInfo[ _recipient ].payout );\r\n            return stakeOrSend( _recipient, _stake, payout, _lockup ); // pay user everything due\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice allow user to stake payout automatically\r\n     *  @param _stake bool\r\n     *  @param _amount uint\r\n     *  @return uint\r\n     */\r\n\r\n    function stakeOrSend( address _recipient, bool _stake, uint _amount, IStaking.LOCKUPS _lockup ) internal returns ( uint ) {\r\n        if ( !_stake ) { // if user does not want to stake\r\n            SIN.transfer( _recipient, _amount ); // send payout\r\n        } else { // if user wants to stake\r\n            if ( useHelper ) { // use if staking warmup is 0\r\n                SIN.approve( address(stakingHelper), _amount );\r\n                if (_lockup == IStaking.LOCKUPS.NONE){\r\n                    stakingHelper.stake( _amount, _recipient );\r\n                }\r\n                if (_lockup == IStaking.LOCKUPS.MONTH1){\r\n                    stakingHelper.stakeOneMonth( _amount, _recipient );\r\n                }\r\n                if (_lockup == IStaking.LOCKUPS.MONTH3){\r\n                    stakingHelper.stakeThreeMonths( _amount, _recipient );\r\n                }\r\n                if (_lockup == IStaking.LOCKUPS.MONTH6){\r\n                    stakingHelper.stakeSixMonths( _amount, _recipient );\r\n                }\r\n            } else {\r\n                SIN.approve( address(staking), _amount );\r\n                staking.stake( _amount, _recipient, _lockup);\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     *  @notice makes incremental adjustment to control variable\r\n     */\r\n    function adjust() internal {\r\n        uint timeCanAdjust = adjustment.lastTime.add32( adjustment.buffer );\r\n        if( adjustment.rate != 0 && block.timestamp >= timeCanAdjust ) {\r\n            uint initial = terms.discount;\r\n            uint discount = initial;\r\n            if ( adjustment.add ) {\r\n                discount = discount.add(adjustment.rate);\r\n                if ( discount >= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                    discount = adjustment.target;\r\n                }\r\n            } else {\r\n                discount = discount.sub(adjustment.rate);\r\n                if ( discount <= adjustment.target ) {\r\n                    adjustment.rate = 0;\r\n                    discount = adjustment.target;\r\n                }\r\n            }\r\n            terms.discount = discount;\r\n            adjustment.lastTime = uint32(block.timestamp);\r\n            emit DiscountAdjustment( initial, discount, adjustment.rate, adjustment.add );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* ======== VIEW FUNCTIONS ======== */\r\n\r\n    /**\r\n     *  @notice determine maximum bond size\r\n     *  @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        return SIN.totalSupply().mul( terms.maxPayout ) / 100000 ;\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate interest due for new bond\r\n     *  @param _value uint\r\n     *  @return uint\r\n     */\r\n    function payoutFor( uint _value ) public view returns ( uint ) {\r\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18() / 1e16 ;\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current bond premium\r\n     *  @return price_ uint\r\n     */\r\n    function bondPrice() public view returns ( uint price_ ) {        \r\n        uint current_price = bondCalculator.marketPrice(liquidityPool);\r\n        price_ = current_price.sub(current_price.mul(terms.discount)/10000) / 1e7;\r\n        return price_;\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice converts bond price to DAI value\r\n     *  @return price_ uint\r\n     */\r\n    function bondPriceInUSD() public view returns ( uint price_ ) {\r\n        return bondPrice().mul(1e16);\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate current ratio of debt to SIN supply\r\n     *  @return debtRatio_ uint\r\n     */\r\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \r\n        uint supply = SIN.totalSupply();\r\n        debtRatio_ = FixedPoint.fraction( \r\n            currentDebt().mul( 1e9 ), \r\n            supply\r\n        ).decode112with18() / 1e18;\r\n    }\r\n\r\n    /**\r\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\r\n     *  @return uint\r\n     */\r\n    function standardizedDebtRatio() external view returns ( uint ) {\r\n        if ( isLiquidityBond ) {\r\n            return debtRatio().mul( bondCalculator.markdown( address(principle) ) ) / 1e9;\r\n        } else {\r\n            return debtRatio();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate debt factoring in decay\r\n     *  @return uint\r\n     */\r\n    function currentDebt() public view returns ( uint ) {\r\n        return totalDebt.sub( debtDecay() );\r\n    }\r\n\r\n    /**\r\n     *  @notice amount to decay total debt by\r\n     *  @return decay_ uint\r\n     */\r\n    function debtDecay() public view returns ( uint decay_ ) {\r\n        uint32 timeSinceLast = uint32(block.timestamp).sub32( lastDecay );\r\n        decay_ = totalDebt.mul( timeSinceLast ) / terms.vestingTerm;\r\n        if ( decay_ > totalDebt ) {\r\n            decay_ = totalDebt;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *  @notice calculate how far into vesting a depositor is\r\n     *  @param _depositor address\r\n     *  @return percentVested_ uint\r\n     */\r\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\r\n        Bond memory bond = bondInfo[ _depositor ];\r\n        uint secondsSinceLast = uint32(block.timestamp).sub32( bond.lastTime );\r\n        uint vesting = bond.vesting;\r\n\r\n        if ( vesting > 0 ) {\r\n            percentVested_ = secondsSinceLast.mul( 10000 ) / vesting;\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @notice calculate amount of SIN available for claim by depositor\r\n     *  @param _depositor address\r\n     *  @return pendingPayout_ uint\r\n     */\r\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\r\n        uint percentVested = percentVestedFor( _depositor );\r\n        uint payout = bondInfo[ _depositor ].payout;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul( percentVested ) / 10000;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ======= AUXILLIARY ======= */\r\n\r\n    /**\r\n     *  @notice allow anyone to send lost tokens (excluding principle or SIN) to the DAO\r\n     *  @return bool\r\n     */\r\n    function recoverLostToken(IERC20 _token ) external returns ( bool ) {\r\n        require( _token != SIN, \"NAT\" );\r\n        require( _token != principle, \"NAP\" );\r\n        uint balance = _token.balanceOf( address(this));\r\n        _token.safeTransfer( DAO,  balance );\r\n        emit LogRecoverLostToken(address(_token), balance);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SIN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondCalculator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityPool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLiquidityBond\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"DiscountAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestingTerm\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct SINBondDepository.Terms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"InitTerms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToRecover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecoverLostToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"buffer\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct SINBondDepository.Adjust\",\"name\":\"adjust\",\"type\":\"tuple\"}],\"name\":\"LogSetAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHelper\",\"type\":\"bool\"}],\"name\":\"LogSetStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SINBondDepository.PARAMETER\",\"name\":\"param\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogSetTerms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"buffer\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zapper\",\"type\":\"address\"}],\"name\":\"allowZapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedZappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"contract IBondCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesting\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_vestingTerm\",\"type\":\"uint32\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"enum IStaking.LOCKUPS\",\"name\":\"_lockup\",\"type\":\"uint8\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zapper\",\"type\":\"address\"}],\"name\":\"removeZapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_buffer\",\"type\":\"uint32\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SINBondDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"contract IStakingHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestingTerm\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SINBondDepository", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000804a4f2705f7bd08b1d84ae8698014a18c708dbc00000000000000000000000039b71cb975280df8f1390c95c4dc861d2c2e7a2b000000000000000000000000319ef1897e4220714b3c4814bc4daccfea5eee86000000000000000000000000b7ea488df41af7f96157383331988f7f981610d8000000000000000000000000215f08fb8439110684ccc589d2b2bae434b969d900000000000000000000000039b71cb975280df8f1390c95c4dc861d2c2e7a2b0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40a33013bb2249b97397f51e5b746ad943b8e0e5588db3c086268b14e51b341a"}]}