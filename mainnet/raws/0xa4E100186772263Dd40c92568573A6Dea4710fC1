{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SkaleVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleVerifier.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleVerifier.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./utils/Precompiled.sol\\\";\\nimport \\\"./utils/FieldOperations.sol\\\";\\n\\n/**\\n * @title SkaleVerifier\\n * @dev Contains verify function to perform BLS signature verification.\\n */\\ncontract SkaleVerifier is Permissions, ISkaleVerifier {  \\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n    using G2Operations for ISkaleDKG.G2Point;\\n\\n    /**\\n    * @dev Verifies a BLS signature.\\n    * \\n    * Requirements:\\n    * \\n    * - Signature is in G1.\\n    * - Hash is in G1.\\n    * - G2.one in G2.\\n    * - Public Key in G2.\\n    */\\n    function verify(\\n        ISkaleDKG.Fp2Point calldata signature,\\n        bytes32 hash,\\n        uint counter,\\n        uint hashA,\\n        uint hashB,\\n        ISkaleDKG.G2Point calldata publicKey\\n    )\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        require(G1Operations.checkRange(signature), \\\"Signature is not valid\\\");\\n        if (!_checkHashToGroupWithHelper(\\n            hash,\\n            counter,\\n            hashA,\\n            hashB\\n            )\\n        )\\n        {\\n            return false;\\n        }\\n\\n        uint newSignB = G1Operations.negate(signature.b);\\n        require(G1Operations.isG1Point(signature.a, newSignB), \\\"Sign not in G1\\\");\\n        require(G1Operations.isG1Point(hashA, hashB), \\\"Hash not in G1\\\");\\n\\n        ISkaleDKG.G2Point memory g2 = G2Operations.getG2Generator();\\n        require(\\n            G2Operations.isG2(publicKey),\\n            \\\"Public Key not in G2\\\"\\n        );\\n\\n        return Precompiled.bn256Pairing(\\n            signature.a, newSignB,\\n            g2.x.b, g2.x.a, g2.y.b, g2.y.a,\\n            hashA, hashB,\\n            publicKey.x.b, publicKey.x.a, publicKey.y.b, publicKey.y.a\\n        );\\n    }\\n\\n    function initialize(address newContractsAddress) public override initializer {\\n        Permissions.initialize(newContractsAddress);\\n    }\\n\\n    function _checkHashToGroupWithHelper(\\n        bytes32 hash,\\n        uint counter,\\n        uint hashA,\\n        uint hashB\\n    )\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        if (counter > 100) {\\n            return false;\\n        }\\n        uint xCoord = uint(hash) % Fp2Operations.P;\\n        xCoord = (xCoord + counter) % Fp2Operations.P;\\n\\n        uint ySquared = addmod(\\n            mulmod(mulmod(xCoord, xCoord, Fp2Operations.P), xCoord, Fp2Operations.P),\\n            3,\\n            Fp2Operations.P\\n        );\\n        if (hashB < Fp2Operations.P / 2 || mulmod(hashB, hashB, Fp2Operations.P) != ySquared || xCoord != hashA) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISkaleVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISkaleVerifier.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./ISkaleDKG.sol\\\";\\n\\ninterface ISkaleVerifier {\\n    function verify(\\n        ISkaleDKG.Fp2Point calldata signature,\\n        bytes32 hash,\\n        uint counter,\\n        uint hashA,\\n        uint hashB,\\n        ISkaleDKG.G2Point calldata publicKey\\n    )\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IPermissions.sol\\\";\\n\\nimport \\\"./thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\\\";\\n\\n\\n/**\\n * @title Permissions\\n * @dev Contract is connected module for Upgradeable approach, knows ContractManager\\n */\\ncontract Permissions is AccessControlUpgradeableLegacy, IPermissions {\\n    using AddressUpgradeable for address;\\n    \\n    IContractManager public contractManager;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is an Admin.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner or `contractName`.\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1` or `contractName2` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, or `contractName2`.\\n     */\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1`, `contractName2`, or `contractName3` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, `contractName2`, or \\n     * `contractName3`.\\n     */\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            contractManager.getContract(contractName3) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual override initializer {\\n        AccessControlUpgradeableLegacy.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeableLegacy skaleManager = AccessControlUpgradeableLegacy(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = IContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Precompiled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Precompiled.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\n\\nlibrary Precompiled {\\n\\n    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\\n        uint[6] memory inputToBigModExp;\\n        inputToBigModExp[0] = 32;\\n        inputToBigModExp[1] = 32;\\n        inputToBigModExp[2] = 32;\\n        inputToBigModExp[3] = base;\\n        inputToBigModExp[4] = power;\\n        inputToBigModExp[5] = modulus;\\n        uint[1] memory out;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 5, inputToBigModExp, mul(6, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"BigModExp failed\\\");\\n        return out[0];\\n    }\\n\\n    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\\n        uint[3] memory inputToMul;\\n        uint[2] memory output;\\n        inputToMul[0] = x;\\n        inputToMul[1] = y;\\n        inputToMul[2] = k;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 7, inputToMul, 0x60, output, 0x40)\\n        }\\n        require(success, \\\"Multiplication failed\\\");\\n        return (output[0], output[1]);\\n    }\\n\\n    function bn256Pairing(\\n        uint x1,\\n        uint y1,\\n        uint a1,\\n        uint b1,\\n        uint c1,\\n        uint d1,\\n        uint x2,\\n        uint y2,\\n        uint a2,\\n        uint b2,\\n        uint c2,\\n        uint d2)\\n        internal view returns (bool)\\n    {\\n        bool success;\\n        uint[12] memory inputToPairing;\\n        inputToPairing[0] = x1;\\n        inputToPairing[1] = y1;\\n        inputToPairing[2] = a1;\\n        inputToPairing[3] = b1;\\n        inputToPairing[4] = c1;\\n        inputToPairing[5] = d1;\\n        inputToPairing[6] = x2;\\n        inputToPairing[7] = y2;\\n        inputToPairing[8] = a2;\\n        inputToPairing[9] = b2;\\n        inputToPairing[10] = c2;\\n        inputToPairing[11] = d2;\\n        uint[1] memory out;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 8, inputToPairing, mul(12, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"Pairing check failed\\\");\\n        return out[0] != 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/FieldOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n// cSpell:words twistb\\n\\n/*\\n    FieldOperations.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\n\\nimport \\\"./Precompiled.sol\\\";\\n\\n\\nlibrary Fp2Operations {\\n\\n    uint constant public P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    function inverseFp2(ISkaleDKG.Fp2Point memory value) internal view returns (ISkaleDKG.Fp2Point memory result) {\\n        uint p = P;\\n        uint t0 = mulmod(value.a, value.a, p);\\n        uint t1 = mulmod(value.b, value.b, p);\\n        uint t2 = mulmod(p - 1, t1, p);\\n        if (t0 >= t2) {\\n            t2 = addmod(t0, p - t2, p);\\n        } else {\\n            t2 = (p - addmod(t2, p - t0, p)) % p;\\n        }\\n        uint t3 = Precompiled.bigModExp(t2, p - 2, p);\\n        result.a = mulmod(value.a, t3, p);\\n        result.b = (p - mulmod(value.b, t3, p)) % p;\\n    }\\n\\n    function addFp2(ISkaleDKG.Fp2Point memory value1, ISkaleDKG.Fp2Point memory value2)\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory)\\n    {\\n        return ISkaleDKG.Fp2Point({ a: addmod(value1.a, value2.a, P), b: addmod(value1.b, value2.b, P) });\\n    }\\n\\n    function scalarMulFp2(ISkaleDKG.Fp2Point memory value, uint scalar)\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory)\\n    {\\n        return ISkaleDKG.Fp2Point({ a: mulmod(scalar, value.a, P), b: mulmod(scalar, value.b, P) });\\n    }\\n\\n    function minusFp2(ISkaleDKG.Fp2Point memory diminished, ISkaleDKG.Fp2Point memory subtracted) internal pure\\n        returns (ISkaleDKG.Fp2Point memory difference)\\n    {\\n        uint p = P;\\n        if (diminished.a >= subtracted.a) {\\n            difference.a = addmod(diminished.a, p - subtracted.a, p);\\n        } else {\\n            difference.a = (p - addmod(subtracted.a, p - diminished.a, p)) % p;\\n        }\\n        if (diminished.b >= subtracted.b) {\\n            difference.b = addmod(diminished.b, p - subtracted.b, p);\\n        } else {\\n            difference.b = (p - addmod(subtracted.b, p - diminished.b, p)) % p;\\n        }\\n    }\\n\\n    function mulFp2(\\n        ISkaleDKG.Fp2Point memory value1,\\n        ISkaleDKG.Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (ISkaleDKG.Fp2Point memory result)\\n    {\\n        uint p = P;\\n        ISkaleDKG.Fp2Point memory point = ISkaleDKG.Fp2Point({\\n            a: mulmod(value1.a, value2.a, p),\\n            b: mulmod(value1.b, value2.b, p)});\\n        result.a = addmod(\\n            point.a,\\n            mulmod(p - 1, point.b, p),\\n            p);\\n        result.b = addmod(\\n            mulmod(\\n                addmod(value1.a, value1.b, p),\\n                addmod(value2.a, value2.b, p),\\n                p),\\n            p - addmod(point.a, point.b, p),\\n            p);\\n    }\\n\\n    function squaredFp2(ISkaleDKG.Fp2Point memory value) internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        uint p = P;\\n        uint ab = mulmod(value.a, value.b, p);\\n        uint multiplication = mulmod(addmod(value.a, value.b, p), addmod(value.a, mulmod(p - 1, value.b, p), p), p);\\n        return ISkaleDKG.Fp2Point({ a: multiplication, b: addmod(ab, ab, p) });\\n    }\\n\\n    function isEqual(\\n        ISkaleDKG.Fp2Point memory value1,\\n        ISkaleDKG.Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.a == value2.a && value1.b == value2.b;\\n    }\\n}\\n\\nlibrary G1Operations {\\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n\\n    function getG1Generator() internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.Fp2Point({\\n            a: 1,\\n            b: 2\\n        });\\n    }\\n\\n    function isG1Point(uint x, uint y) internal pure returns (bool) {\\n        uint p = Fp2Operations.P;\\n        return mulmod(y, y, p) == \\n            addmod(mulmod(mulmod(x, x, p), x, p), 3, p);\\n    }\\n\\n    function isG1(ISkaleDKG.Fp2Point memory point) internal pure returns (bool) {\\n        return isG1Point(point.a, point.b);\\n    }\\n\\n    function checkRange(ISkaleDKG.Fp2Point memory point) internal pure returns (bool) {\\n        return point.a < Fp2Operations.P && point.b < Fp2Operations.P;\\n    }\\n\\n    function negate(uint y) internal pure returns (uint) {\\n        return (Fp2Operations.P - y) % Fp2Operations.P;\\n    }\\n\\n}\\n\\n\\nlibrary G2Operations {\\n    using Fp2Operations for ISkaleDKG.Fp2Point;\\n\\n    function doubleG2(ISkaleDKG.G2Point memory value)\\n        internal\\n        view\\n        returns (ISkaleDKG.G2Point memory result)\\n    {\\n        if (isG2Zero(value)) {\\n            return value;\\n        } else {\\n            ISkaleDKG.Fp2Point memory s =\\n                value.x.squaredFp2().scalarMulFp2(3).mulFp2(value.y.scalarMulFp2(2).inverseFp2());\\n            result.x = s.squaredFp2().minusFp2(value.x.addFp2(value.x));\\n            result.y = value.y.addFp2(s.mulFp2(result.x.minusFp2(value.x)));\\n            uint p = Fp2Operations.P;\\n            result.y.a = (p - result.y.a) % p;\\n            result.y.b = (p - result.y.b) % p;\\n        }\\n    }\\n\\n    function addG2(\\n        ISkaleDKG.G2Point memory value1,\\n        ISkaleDKG.G2Point memory value2\\n    )\\n        internal\\n        view\\n        returns (ISkaleDKG.G2Point memory sum)\\n    {\\n        if (isG2Zero(value1)) {\\n            return value2;\\n        }\\n        if (isG2Zero(value2)) {\\n            return value1;\\n        }\\n        if (isEqual(value1, value2)) {\\n            return doubleG2(value1);\\n        }\\n        if (value1.x.isEqual(value2.x)) {\\n            sum.x.a = 0;\\n            sum.x.b = 0;\\n            sum.y.a = 1;\\n            sum.y.b = 0;\\n            return sum;\\n        }\\n\\n        ISkaleDKG.Fp2Point memory s = value2.y.minusFp2(value1.y).mulFp2(value2.x.minusFp2(value1.x).inverseFp2());\\n        sum.x = s.squaredFp2().minusFp2(value1.x.addFp2(value2.x));\\n        sum.y = value1.y.addFp2(s.mulFp2(sum.x.minusFp2(value1.x)));\\n        uint p = Fp2Operations.P;\\n        sum.y.a = (p - sum.y.a) % p;\\n        sum.y.b = (p - sum.y.b) % p;\\n    }\\n\\n    function getTWISTB() internal pure returns (ISkaleDKG.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.Fp2Point({\\n            a: 19485874751759354771024239261021720505790618469301721065564631296452457478373,\\n            b: 266929791119991161246907387137283842545076965332900288569378510910307636690\\n        });\\n    }\\n\\n    function getG2Generator() internal pure returns (ISkaleDKG.G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.G2Point({\\n            x: ISkaleDKG.Fp2Point({\\n                a: 10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n                b: 11559732032986387107991004021392285783925812861821192530917403151452391805634\\n            }),\\n            y: ISkaleDKG.Fp2Point({\\n                a: 8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n                b: 4082367875863433681332203403145435568316851327593401208105741076214120093531\\n            })\\n        });\\n    }\\n\\n    function getG2Zero() internal pure returns (ISkaleDKG.G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return ISkaleDKG.G2Point({\\n            x: ISkaleDKG.Fp2Point({\\n                a: 0,\\n                b: 0\\n            }),\\n            y: ISkaleDKG.Fp2Point({\\n                a: 1,\\n                b: 0\\n            })\\n        });\\n    }\\n\\n    function isG2Point(ISkaleDKG.Fp2Point memory x, ISkaleDKG.Fp2Point memory y) internal pure returns (bool) {\\n        if (isG2ZeroPoint(x, y)) {\\n            return true;\\n        }\\n        ISkaleDKG.Fp2Point memory squaredY = y.squaredFp2();\\n        ISkaleDKG.Fp2Point memory res = squaredY.minusFp2(\\n                x.squaredFp2().mulFp2(x)\\n            ).minusFp2(getTWISTB());\\n        return res.a == 0 && res.b == 0;\\n    }\\n\\n    function isG2(ISkaleDKG.G2Point memory value) internal pure returns (bool) {\\n        return isG2Point(value.x, value.y);\\n    }\\n\\n    function isG2ZeroPoint(\\n        ISkaleDKG.Fp2Point memory x,\\n        ISkaleDKG.Fp2Point memory y\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return x.a == 0 && x.b == 0 && y.a == 1 && y.b == 0;\\n    }\\n\\n    function isG2Zero(ISkaleDKG.G2Point memory value) internal pure returns (bool) {\\n        return value.x.a == 0 && value.x.b == 0 && value.y.a == 1 && value.y.b == 0;\\n        // return isG2ZeroPoint(value.x, value.y);\\n    }\\n\\n    /**\\n     * @dev Checks are G2 points identical.\\n     * This function will return false if following coordinates\\n     * of points are different, even if its different on P.\\n     */\\n    function isEqual(\\n        ISkaleDKG.G2Point memory value1,\\n        ISkaleDKG.G2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.x.isEqual(value2.x) && value1.y.isEqual(value2.y);\\n    }\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISkaleDKG.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISkaleDKG {\\n\\n    struct Fp2Point {\\n        uint a;\\n        uint b;\\n    }\\n\\n    struct G2Point {\\n        Fp2Point x;\\n        Fp2Point y;\\n    }\\n\\n    struct Channel {\\n        bool active;\\n        uint n;\\n        uint startedBlockTimestamp;\\n        uint startedBlock;\\n    }\\n\\n    struct ProcessDKG {\\n        uint numberOfBroadcasted;\\n        uint numberOfCompleted;\\n        bool[] broadcasted;\\n        bool[] completed;\\n    }\\n\\n    struct ComplaintData {\\n        uint nodeToComplaint;\\n        uint fromNodeToComplaint;\\n        uint startComplaintBlockTimestamp;\\n        bool isResponse;\\n        bytes32 keyShare;\\n        G2Point sumOfVerVec;\\n    }\\n\\n    struct KeyShare {\\n        bytes32[2] publicKey;\\n        bytes32 share;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a channel is opened.\\n     */\\n    event ChannelOpened(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a channel is closed.\\n     */\\n    event ChannelClosed(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a node broadcasts key share.\\n     */\\n    event BroadcastAndKeyShare(\\n        bytes32 indexed schainHash,\\n        uint indexed fromNode,\\n        G2Point[] verificationVector,\\n        KeyShare[] secretKeyContribution\\n    );\\n\\n    /**\\n     * @dev Emitted when all group data is received by node.\\n     */\\n    event AllDataReceived(bytes32 indexed schainHash, uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG is successful.\\n     */\\n    event SuccessfulDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a complaint against a node is verified.\\n     */\\n    event BadGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG failed.\\n     */\\n    event FailedDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a new node is rotated in.\\n     */\\n    event NewGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when an incorrect complaint is sent.\\n     */\\n    event ComplaintError(string error);\\n\\n    /**\\n     * @dev Emitted when a complaint is sent.\\n     */\\n    event ComplaintSent(bytes32 indexed schainHash, uint indexed fromNodeIndex, uint indexed toNodeIndex);\\n    \\n    function alright(bytes32 schainHash, uint fromNodeIndex) external;\\n    function broadcast(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        G2Point[] memory verificationVector,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaintBadData(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function preResponse(\\n        bytes32 schainId,\\n        uint fromNodeIndex,\\n        G2Point[] memory verificationVector,\\n        G2Point[] memory verificationVectorMultiplication,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaint(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function response(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint secretNumber,\\n        G2Point memory multipliedShare\\n    )\\n        external;\\n    function openChannel(bytes32 schainHash) external;\\n    function deleteChannel(bytes32 schainHash) external;\\n    function setStartAlrightTimestamp(bytes32 schainHash) external;\\n    function setBadNode(bytes32 schainHash, uint nodeIndex) external;\\n    function finalizeSlashing(bytes32 schainHash, uint badNode) external;\\n    function getChannelStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getChannelStartedBlock(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfBroadcasted(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfCompleted(bytes32 schainHash) external view returns (uint);\\n    function getTimeOfLastSuccessfulDKG(bytes32 schainHash) external view returns (uint);\\n    function getComplaintData(bytes32 schainHash) external view returns (uint, uint);\\n    function getComplaintStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getAlrightStartedTime(bytes32 schainHash) external view returns (uint);\\n    function isChannelOpened(bytes32 schainHash) external view returns (bool);\\n    function isLastDKGSuccessful(bytes32 groupIndex) external view returns (bool);\\n    function isBroadcastPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isComplaintPossible(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex\\n    )\\n        external\\n        view\\n        returns (bool);\\n    function isAlrightPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isPreResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isNodeBroadcasted(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isAllDataReceived(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function checkAndReturnIndexInGroup(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        bool revertCheck\\n    )\\n        external\\n        view\\n        returns (uint, bool);\\n    function isEveryoneBroadcasted(bytes32 schainHash) external view returns (bool);\\n    function hashData(\\n        KeyShare[] memory secretKeyContribution,\\n        G2Point[] memory verificationVector\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IContractManager {\\n    /**\\n     * @dev Emitted when contract is upgraded.\\n     */\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external;\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external;\\n    function contracts(bytes32 nameHash) external view returns (address);\\n    function getDelegationPeriodManager() external view returns (address);\\n    function getBounty() external view returns (address);\\n    function getValidatorService() external view returns (address);\\n    function getTimeHelpers() external view returns (address);\\n    function getConstantsHolder() external view returns (address);\\n    function getSkaleToken() external view returns (address);\\n    function getTokenState() external view returns (address);\\n    function getPunisher() external view returns (address);\\n    function getContract(string calldata name) external view returns (address);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IPermissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IPermissions {\\n    function initialize(address contractManagerAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\\\";\\nimport \\\"./InitializableWithGap.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeableLegacy is InitializableWithGap, ContextUpgradeable, IAccessControlUpgradeableLegacy {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IAccessControlUpgradeableLegacy.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IAccessControlUpgradeableLegacy {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    \\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/InitializableWithGap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract InitializableWithGap is Initializable {\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashB\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct ISkaleDKG.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct ISkaleDKG.G2Point\",\"name\":\"publicKey\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SkaleVerifier", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}