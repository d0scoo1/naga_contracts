{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract Authorizable {\r\n    // This contract allows a flexible authorization scheme\r\n\r\n    // The owner who can change authorization status\r\n    address public owner;\r\n    // A mapping from an address to its authorization status\r\n    mapping(address => bool) public authorized;\r\n\r\n    /// @dev We set the deployer to the owner\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev This modifier checks if the msg.sender is the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Sender not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev This modifier checks if an address is authorized\r\n    modifier onlyAuthorized() {\r\n        require(isAuthorized(msg.sender), \"Sender not Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Returns true if an address is authorized\r\n    /// @param who the address to check\r\n    /// @return true if authorized false if not\r\n    function isAuthorized(address who) public view returns (bool) {\r\n        return authorized[who];\r\n    }\r\n\r\n    /// @dev Privileged function authorize an address\r\n    /// @param who the address to authorize\r\n    function authorize(address who) external onlyOwner {\r\n        _authorize(who);\r\n    }\r\n\r\n    /// @dev Privileged function to de authorize an address\r\n    /// @param who The address to remove authorization from\r\n    function deauthorize(address who) external onlyOwner {\r\n        authorized[who] = false;\r\n    }\r\n\r\n    /// @dev Function to change owner\r\n    /// @param who The new owner address\r\n    function setOwner(address who) public onlyOwner {\r\n        owner = who;\r\n    }\r\n\r\n    /// @dev Inheritable function which authorizes someone\r\n    /// @param who the address to authorize\r\n    function _authorize(address who) internal {\r\n        authorized[who] = true;\r\n    }\r\n}\r\n\r\ncontract WrapperRegistry is Authorizable {\r\n    address[] public wrappers;\r\n\r\n    /// @notice Constructs this contract and stores needed data\r\n    /// @param _owner The contract owner authorized to validate addresses\r\n    constructor(address _owner) {\r\n        // authorize the owner address to be able to execute the validations\r\n        _authorize(_owner);\r\n    }\r\n\r\n    /// @notice adds a vault + wrapper pair of addresses to state array\r\n    /// @param wrapper the wrapped position contract address\r\n    function registerWrapper(address wrapper) external onlyAuthorized {\r\n        wrappers.push(wrapper);\r\n    }\r\n\r\n    /// @notice shows the entire array of vault/wrapper pairs\r\n    /// @return the entire array of struct pairs\r\n    function viewRegistry() external view returns (address[] memory) {\r\n        return wrappers;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"registerWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRegistry\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WrapperRegistry", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000422494292e7a9dda8778bb4ea05c2779a3d60f5d", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a4d076e98464029844f26bdb42d92b0ecd515ce0feab882d33cf2426daca9103"}]}