{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BlackMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/EnumerableEscrow.sol\\\";\\nimport \\\"./interfaces/ICounterfeitMoney.sol\\\";\\nimport \\\"./interfaces/IStolenNFT.sol\\\";\\nimport \\\"./interfaces/IBlackMarket.sol\\\";\\n\\nerror MarketIsClosed();\\nerror NotTheSeller();\\nerror NotTheTokenOwner();\\nerror TokenNotListed();\\nerror TransactionFailed();\\n\\n/// @title A place where bad people do bad deals\\ncontract BlackMarket is IBlackMarket, EnumerableEscrow, Ownable {\\n\\t/// ERC20 Token used to pay for a listing\\n\\tICounterfeitMoney public money;\\n\\t/// ERC721 Token that is listed for sale\\n\\tIStolenNFT public stolenNFT;\\n\\t/// Whether listing / buying is possible\\n\\tbool public marketClosed;\\n\\n\\t/// Mappings between listed tokenIds and listings seller and price\\n\\tmapping(uint256 => Listing) private listings;\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\taddress _stolenNFT,\\n\\t\\taddress _money\\n\\t) Ownable(_owner) {\\n\\t\\tstolenNFT = IStolenNFT(_stolenNFT);\\n\\t\\tmoney = ICounterfeitMoney(_money);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction buyWithPermit(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override {\\n\\t\\tmoney.permit(msg.sender, address(this), price, deadline, v, r, s);\\n\\t\\tbuy(tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction listNftWithPermit(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override {\\n\\t\\tstolenNFT.permit(msg.sender, address(this), tokenId, deadline, v, r, s);\\n\\t\\tlistNft(tokenId, price);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction updateListing(uint256 tokenId, uint256 newPrice) external override {\\n\\t\\tListing storage listing = listings[tokenId];\\n\\t\\tif (msg.sender != listing.seller) revert NotTheSeller();\\n\\n\\t\\tlisting.price = newPrice;\\n\\n\\t\\temit Listed(msg.sender, tokenId, newPrice);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction cancelListing(uint256 tokenId) external override {\\n\\t\\tListing memory listing = listings[tokenId];\\n\\t\\tif (msg.sender != listing.seller && msg.sender != Ownable.owner()) revert NotTheSeller();\\n\\n\\t\\t_unlist(listing.seller, tokenId);\\n\\t\\temit Canceled(listing.seller, tokenId, listing.price);\\n\\n\\t\\tstolenNFT.transferFrom(address(this), listing.seller, tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction closeMarket(bool _marketClosed) external override onlyOwner {\\n\\t\\tmarketClosed = _marketClosed;\\n\\t\\temit MarketClosed(_marketClosed);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction getListing(uint256 tokenId) external view override returns (Listing memory) {\\n\\t\\tif (listings[tokenId].seller == address(0)) revert TokenNotListed();\\n\\t\\treturn listings[tokenId];\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction listNft(uint256 tokenId, uint256 price) public override {\\n\\t\\tif (stolenNFT.ownerOf(tokenId) != msg.sender) revert NotTheTokenOwner();\\n\\t\\tif (marketClosed) revert MarketIsClosed();\\n\\n\\t\\t_list(msg.sender, tokenId, price);\\n\\t\\temit Listed(msg.sender, tokenId, price);\\n\\n\\t\\tstolenNFT.transferFrom(msg.sender, address(this), tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IBlackMarket\\n\\tfunction buy(uint256 tokenId) public override {\\n\\t\\tListing memory listing = listings[tokenId];\\n\\t\\tif (listing.seller == address(0)) revert TokenNotListed();\\n\\t\\tif (marketClosed) revert MarketIsClosed();\\n\\n\\t\\t_unlist(listing.seller, tokenId);\\n\\t\\temit Sold(msg.sender, listing.seller, tokenId, listing.price);\\n\\n\\t\\t(address royaltyReceiver, uint256 royaltyShare) = stolenNFT.royaltyInfo(\\n\\t\\t\\ttokenId,\\n\\t\\t\\tlisting.price\\n\\t\\t);\\n\\n\\t\\tif (royaltyShare > 0) {\\n\\t\\t\\tbool sentRoyalty = money.transferFrom(msg.sender, royaltyReceiver, royaltyShare);\\n\\t\\t\\tif (!sentRoyalty) revert TransactionFailed();\\n\\t\\t}\\n\\n\\t\\tbool sent = money.transferFrom(msg.sender, listing.seller, listing.price - royaltyShare);\\n\\t\\tif (!sent) revert TransactionFailed();\\n\\n\\t\\tstolenNFT.transferFrom(address(this), msg.sender, tokenId);\\n\\t}\\n\\n\\t/// @dev Adds the listed NFT to the listings and enumerations mapping\\n\\t/// @param seller The listings seller\\n\\t/// @param tokenId The listed token\\n\\t/// @param price The listings price\\n\\tfunction _list(\\n\\t\\taddress seller,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price\\n\\t) internal {\\n\\t\\tlistings[tokenId] = Listing(seller, price);\\n\\t\\tEnumerableEscrow._addTokenToEnumeration(seller, tokenId);\\n\\t}\\n\\n\\t/// @dev Removes the listed NFT to the listings and enumerations mapping\\n\\t/// @param seller The listings seller\\n\\t/// @param tokenId The listed token\\n\\tfunction _unlist(address seller, uint256 tokenId) internal {\\n\\t\\tdelete listings[tokenId];\\n\\t\\tEnumerableEscrow._removeTokenFromEnumeration(seller, tokenId);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror CallerNotTheOwner();\\nerror NewOwnerIsZeroAddress();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n\\taddress private _contractOwner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Initializes the given owner as the initial owner.\\n\\t */\\n\\tconstructor(address contractOwner_) {\\n\\t\\t_transferOwnership(contractOwner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _contractOwner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\tif (owner() != msg.sender) revert CallerNotTheOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\tif (newOwner == address(0)) revert NewOwnerIsZeroAddress();\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Internal function without access restriction.\\n\\t */\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _contractOwner;\\n\\t\\t_contractOwner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EnumerableEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IEnumerableEscrow.sol\\\";\\n\\nerror OwnerIndexOutOfBounds(uint256 index);\\nerror GlobalIndexOutOfBounds(uint256 index);\\n\\n/**\\n * @title Adapted ERC-721 enumeration extension for escrow contracts\\n */\\nabstract contract EnumerableEscrow is IEnumerableEscrow {\\n\\t// Mapping from owner to amount of tokens stored in escrow\\n\\tmapping(address => uint256) private _ownedTokenBalances;\\n\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IEnumerableEscrow-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction balanceOf(address owner) public view returns (uint256) {\\n\\t\\treturn _ownedTokenBalances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IEnumerableEscrow-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n\\t\\tif (index >= _ownedTokenBalances[owner]) revert OwnerIndexOutOfBounds(index);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IEnumerableEscrow-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IEnumerableEscrow-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) public view returns (uint256) {\\n\\t\\tif (index >= EnumerableEscrow.totalSupply()) revert GlobalIndexOutOfBounds(index);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to remove a token from this extension's token-and-ownership-tracking data structures.\\n\\t * Checks whether token is part of the collection beforehand, so it can be used as part of token recovery\\n\\t * @param owner address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromEnumeration(address owner, uint256 tokenId) internal {\\n\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t_removeTokenFromOwnerEnumeration(owner, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to add a token to this extension's token-and-ownership-tracking data structures.\\n\\t * @param owner address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToEnumeration(address owner, uint256 tokenId) internal {\\n\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t_addTokenToOwnerEnumeration(owner, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param owner address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address owner, uint256 tokenId) private {\\n\\t\\tuint256 length = _ownedTokenBalances[owner];\\n\\t\\t_ownedTokens[owner][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t\\t_ownedTokenBalances[owner]++;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param owner address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address owner, uint256 tokenId) private {\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _ownedTokenBalances[owner] - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[owner][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[owner][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[owner][lastTokenIndex];\\n\\t\\t_ownedTokenBalances[owner]--;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICounterfeitMoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title Counterfeit Money is just as good as \\\"real\\\" money\\n/// @dev ERC20 Token with dynamic supply, supporting EIP-2612 signatures for token approvals\\ninterface ICounterfeitMoney is IERC20, IERC20Permit {\\n\\t/// @notice Prints and sends a certain amount of CounterfeitMoney to an user\\n\\t/// @dev Emits an Transfer event from zero-address\\n\\t/// @param to The address receiving the freshly printed money\\n\\t/// @param amount The amount of money that will be printed\\n\\tfunction print(address to, uint256 amount) external;\\n\\n\\t/// @notice Burns and removes an approved amount of CounterfeitMoney from an user\\n\\t/// @dev Emits an Transfer event to zero-address\\n\\t/// @param from The address losing the CounterfeitMoney\\n\\t/// @param amount The amount of money that will be removed from the account\\n\\tfunction burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStolenNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"../tokens/IERC721Permit.sol\\\";\\n\\n/// @title Steal somebody's NFTs (with their permission of course)\\n/// @dev ERC721 Token supporting EIP-2612 signatures for token approvals\\ninterface IStolenNFT is IERC2981, IERC721Metadata, IERC721Enumerable, IERC721Permit {\\n\\t/// @notice Emitted when a user steals / mints a NFT\\n\\t/// @param thief The user who stole a NFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the minted StolenNFT\\n\\tevent Stolen(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress indexed originalContract,\\n\\t\\tuint256 indexed originalId,\\n\\t\\tuint256 stolenId\\n\\t);\\n\\n\\t/// @notice Emitted when a user was reported and gets his StolenNFT taken away / burned\\n\\t/// @param thief The user who returned the StolenNFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tevent Seized(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalContract,\\n\\t\\tuint256 originalId,\\n\\t\\tuint256 indexed stolenId\\n\\t);\\n\\n\\t/// @notice Struct to store the contract and token ID of the NFT that was stolen\\n\\tstruct NftData {\\n\\t\\tuint32 tokenRoyalty;\\n\\t\\tuint64 chainId;\\n\\t\\taddress contractAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\t/// @notice Steal / Mint an original NFT to create a StolenNFT\\n\\t/// @dev Emits a Stolen event\\n\\t/// @param originalChainId The chainId the NFT originates from, used to trace where the nft was stolen from\\n\\t/// @param originalAddress The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param mintFrom Optional address the StolenNFT will be minted and transferred from\\n\\t/// @param royaltyFee Optional royalty that should be payed to the original owner on secondary market sales\\n\\t/// @param uri Optional Metadata URI to overwrite / censor the original NFT\\n\\tfunction steal(\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalAddress,\\n\\t\\tuint256 originalId,\\n\\t\\taddress mintFrom,\\n\\t\\tuint32 royaltyFee,\\n\\t\\tstring memory uri\\n\\t) external payable returns (uint256);\\n\\n\\t/// @notice Allows the StolenNFT to be taken away / burned by the authorities\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction swatted(uint256 stolenId) external;\\n\\n\\t/// @notice Allows the holder to return / burn the StolenNFT\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction surrender(uint256 stolenId) external;\\n\\n\\t/// @notice Returns the stolenID for a given original NFT address and tokenID if stolen\\n\\t/// @param originalAddress The contract address of the original NFT\\n\\t/// @param originalId The tokenID of the original NFT\\n\\t/// @return The stolenID\\n\\tfunction getStolen(address originalAddress, uint256 originalId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/// @notice Returns the original NFT address and tokenID for a given stolenID if stolen\\n\\t/// @param stolenId The stolenID to lookup\\n\\t/// @return originalChainId The chain the NFT was stolen from\\n\\t/// @return originalAddress The contract address of the original NFT\\n\\t/// @return originalId The tokenID of the original NFT\\n\\tfunction getOriginal(uint256 stolenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint64,\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBlackMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/IEnumerableEscrow.sol\\\";\\n\\n/// @title A place where bad people do bad deals\\ninterface IBlackMarket is IEnumerableEscrow {\\n\\t/// @notice Emitted when a user lists a StolenNFT\\n\\t/// @param seller The user who lists the StolenNFT\\n\\t/// @param tokenId The token ID of the listed StolenNFT\\n\\t/// @param price The listing price\\n\\tevent Listed(address indexed seller, uint256 indexed tokenId, uint256 price);\\n\\n\\t/// @notice Emitted when a user canceled a listed StolenNFT\\n\\t/// @param seller The user who listed the StolenNFT / canceled the listing\\n\\t/// @param tokenId The token ID of the listed StolenNFT\\n\\t/// @param price The original listing price\\n\\tevent Canceled(address indexed seller, uint256 indexed tokenId, uint256 price);\\n\\n\\t/// @notice Emitted when the market closes or opens\\n\\t/// @param state Whether the market closed or opened\\n\\tevent MarketClosed(bool state);\\n\\n\\t/// @notice Emitted when a user sells a StolenNFT\\n\\t/// @param buyer The user who buys the StolenNFT\\n\\t/// @param seller The user who sold the StolenNFT\\n\\t/// @param tokenId The token ID of the sold StolenNFT\\n\\t/// @param price The paid price\\n\\tevent Sold(\\n\\t\\taddress indexed buyer,\\n\\t\\taddress indexed seller,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 price\\n\\t);\\n\\n\\t/// @notice Struct to stores a listings seller and price\\n\\tstruct Listing {\\n\\t\\taddress seller;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @notice Buy a listed StolenNFT on the market\\n\\t/// @dev Emits a {Sold} Event\\n\\t/// @param tokenId The token id of the StolenNFT to buy\\n\\tfunction buy(uint256 tokenId) external;\\n\\n\\t/// @notice Buy a listed NFT on the market by providing a valid EIP-2612 Permit for the Money transaction\\n\\t/// @dev Same as {xref-IBlackMarket-buy-uint256-}[`buy`], with additional signature parameters which\\n\\t/// allow the approval and transfer of CounterfeitMoney in a single Transaction using EIP-2612 Permits\\n\\t/// Emits a {Sold} Event\\n\\t/// @param tokenId The token id of the StolenNFT to buy\\n\\t/// @param deadline timestamp until when the given signature will be valid\\n\\t/// @param v The parity of the y co-ordinate of r of the signature\\n\\t/// @param r The x co-ordinate of the r value of the signature\\n\\t/// @param s The x co-ordinate of the s value of the signature\\n\\tfunction buyWithPermit(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/// @notice List a StolenNFT on the market\\n\\t/// @dev Emits a {Listed} Event\\n\\t/// @param tokenId The token id of the StolenNFT to list\\n\\t/// @param price The price the StolenNFT should be listed for\\n\\tfunction listNft(uint256 tokenId, uint256 price) external;\\n\\n\\t/// @notice List a StolenNFT on the market by providing a valid EIP-2612 Permit for the token transaction\\n\\t/// @dev Same as {xref-IBlackMarket-listNft-uint256-uint256-}[`listNft`], with additional signature parameters which\\n\\t/// allow the approval and transfer of CounterfeitMoney in a single Transaction using EIP-2612 Permits\\n\\t/// Emits a {Listed} Event\\n\\t/// @param tokenId The token id of the StolenNFT to list\\n\\t/// @param price The price the StolenNFT should be listed for\\n\\t/// @param deadline timestamp until when the given signature will be valid\\n\\t/// @param v The parity of the y co-ordinate of r of the signature\\n\\t/// @param r The x co-ordinate of the r value of the signature\\n\\t/// @param s The x co-ordinate of the s value of the signature\\n\\tfunction listNftWithPermit(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/// @notice Update an existing listing on the market\\n\\t/// @dev Emits a {Listed} Event\\n\\t/// @param tokenId The token id of the StolenNFT that is already listed\\n\\t/// @param newPrice The new price the StolenNFT\\n\\tfunction updateListing(uint256 tokenId, uint256 newPrice) external;\\n\\n\\t/// @notice Cancel an existing listing on the market\\n\\t/// @dev Emits a {Canceled} Event\\n\\t/// @param tokenId The token id of the listed StolenNFT that should be canceled\\n\\tfunction cancelListing(uint256 tokenId) external;\\n\\n\\t/// @notice Allows the market to be closed, disabling listing and buying\\n\\t/// @param _marketClosed Whether the market should be closed or opened\\n\\tfunction closeMarket(bool _marketClosed) external;\\n\\n\\t/// @notice Get an existing listing on the market by its tokenId\\n\\t/// @param tokenId The token id of the listed StolenNFT that should be retrieved\\n\\tfunction getListing(uint256 tokenId) external view returns (Listing memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IEnumerableEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Adapted ERC-721 enumeration interface for escrow contracts\\n */\\ninterface IEnumerableEscrow {\\n\\t/**\\n\\t * @dev Returns the users balance of tokens stored by the contract.\\n\\t */\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n\\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n\\t * Use along with {totalSupply} to enumerate all tokens.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/IERC721Permit.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/**\\n * @dev Interface of extending the IERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 approval (see {IERC721-approval}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC721Permit is IERC20Permit {\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stolenNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_money\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GlobalIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheSeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MarketClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_marketClosed\",\"type\":\"bool\"}],\"name\":\"closeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IBlackMarket.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"listNftWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"money\",\"outputs\":[{\"internalType\":\"contract ICounterfeitMoney\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stolenNFT\",\"outputs\":[{\"internalType\":\"contract IStolenNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlackMarket", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000ab6405423374236559f5969e93fcdaee3f14dd00000000000000000000000000e17b5ac5bd4a70436af32aee07ba9e2ae262e2ee0000000000000000000000005ae23249a4f7ec4f7087fa5ade0eb385240f8ccc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}