{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\ncontract MoonbirdsNestingSwap {\r\n    struct Offer {\r\n        uint128 price;\r\n        uint32 minCurrentPeriod;\r\n        uint32 minTotalPeriod;\r\n        uint64 endTime;\r\n    }\r\n\r\n    struct Acceptance {\r\n        address buyer;\r\n        bytes32 offerHash;\r\n    }\r\n\r\n    IMoonbirds public immutable moonbirds;\r\n    IERC20 public immutable weth;\r\n    address internal _owner;\r\n    uint256 internal _fee;\r\n\r\n    /// @dev Record of buyer offers\r\n    mapping(address => Offer) public buyerOffers;\r\n\r\n    /// @dev Record of seller acceptances for buyer offers\r\n    mapping(address => Acceptance) public sellerAcceptances;\r\n\r\n    event Swap(address indexed buyer);\r\n\r\n    constructor(address _moonbirds, address _weth) {\r\n        moonbirds = IMoonbirds(_moonbirds);\r\n        weth = IERC20(_weth);\r\n        _owner = msg.sender;\r\n        _fee = 200;\r\n    }\r\n\r\n    /// @notice Check buyer offer is unchanged\r\n    function isValidOfferHash(address buyer, bytes32 offerHash) public view returns (bool) {\r\n        Offer memory offer = buyerOffers[buyer];\r\n        return\r\n            offerHash ==\r\n            keccak256(\r\n                abi.encodePacked(buyer, offer.price, offer.minCurrentPeriod, offer.minTotalPeriod, offer.endTime)\r\n            );\r\n    }\r\n\r\n    /// @notice Check buyer offer is rational\r\n    function isValidBuyerOffer(address buyer, Offer memory offer) public view returns (bool) {\r\n        return\r\n            weth.allowance(buyer, address(this)) >= offer.price &&\r\n            offer.minTotalPeriod >= offer.minCurrentPeriod &&\r\n            offer.endTime > block.timestamp;\r\n    }\r\n\r\n    /// @notice Check buyer offer is rational\r\n    function isValidBuyer(address buyer) external view returns (bool) {\r\n        Offer memory offer = buyerOffers[buyer];\r\n        return isValidBuyerOffer(buyer, offer);\r\n    }\r\n\r\n    /// @notice Buyer makes an offer\r\n    function buyerMakeOffer(Offer calldata offer) external {\r\n        require(isValidBuyerOffer(msg.sender, offer), 'Invalid offer');\r\n        buyerOffers[msg.sender] = offer;\r\n    }\r\n\r\n    /// @notice Buyer cancels the offer\r\n    function buyerCancelOffer() external {\r\n        delete buyerOffers[msg.sender];\r\n    }\r\n\r\n    /// @notice Seller accepts an offer\r\n    function sellerAcceptOffer(address buyer, bytes32 offerHash) external {\r\n        require(isValidOfferHash(buyer, offerHash), 'Invalid hash');\r\n\r\n        sellerAcceptances[msg.sender] = Acceptance({buyer: buyer, offerHash: offerHash});\r\n    }\r\n\r\n    /// @notice Seller cancels the acceptance\r\n    function sellerCancelAcceptance() external {\r\n        delete sellerAcceptances[msg.sender];\r\n    }\r\n\r\n    /// @notice Seller sends moonbird to this contract using `safeTransferWhileNesting()` and invoke swap\r\n    function onERC721Received(\r\n        address, // operator\r\n        address from, // seller\r\n        uint256 tokenId,\r\n        bytes calldata // data\r\n    ) external returns (bytes4) {\r\n        require(msg.sender == address(moonbirds), 'Invalid caller');\r\n\r\n        Acceptance memory acceptance = sellerAcceptances[from];\r\n        address buyer = acceptance.buyer;\r\n        Offer memory offer = buyerOffers[buyer];\r\n\r\n        require(isValidOfferHash(buyer, acceptance.offerHash), 'Invalid hash');\r\n        require(isValidBuyerOffer(buyer, offer), 'Invalid offer');\r\n\r\n        delete sellerAcceptances[from];\r\n        delete buyerOffers[buyer];\r\n\r\n        (, uint256 current, uint256 total) = moonbirds.nestingPeriod(tokenId);\r\n        require(current >= offer.minCurrentPeriod, '< min current');\r\n        require(total >= offer.minTotalPeriod, '< min total');\r\n\r\n        // Fee\r\n        uint256 fee = (offer.price * _fee) / 1e4;\r\n        weth.transferFrom(buyer, address(this), fee);\r\n\r\n        // Swap\r\n        weth.transferFrom(buyer, from, offer.price - fee);\r\n        moonbirds.safeTransferWhileNesting(address(this), buyer, tokenId);\r\n        emit Swap(buyer);\r\n\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function setOwner(address owner) external {\r\n        require(msg.sender == _owner);\r\n        _owner = owner;\r\n    }\r\n\r\n    function setFee(uint256 fee) external {\r\n        require(msg.sender == _owner);\r\n        _fee = fee;\r\n    }\r\n\r\n    function withdraw(address token) external {\r\n        require(msg.sender == _owner);\r\n        IERC20(token).transfer(_owner, IERC20(token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ninterface IMoonbirds {\r\n    function balanceOf(address owner) external returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n\r\n    function safeTransferWhileNesting(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function nestingPeriod(uint256 tokenId)\r\n        external\r\n        returns (\r\n            bool nesting,\r\n            uint256 current,\r\n            uint256 total\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moonbirds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyerCancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"minCurrentPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTotalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct MoonbirdsNestingSwap.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"buyerMakeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerOffers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"minCurrentPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTotalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"isValidBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"minCurrentPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTotalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"internalType\":\"struct MoonbirdsNestingSwap.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"isValidBuyerOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"name\":\"isValidOfferHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonbirds\",\"outputs\":[{\"internalType\":\"contract IMoonbirds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"name\":\"sellerAcceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellerAcceptances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerCancelAcceptance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonbirdsNestingSwap", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94f132d7150adbfacca95a8dcc6a3f1a346e2512c4f3cc0ba771539baf857bfc"}]}