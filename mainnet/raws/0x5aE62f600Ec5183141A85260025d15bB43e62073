{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/ProtocolAaveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DSMath} from \\\"../library/DSMath.sol\\\";\\nimport {ProtocolWETH, WethInterface} from \\\"./ProtocolWETH.sol\\\";\\n\\ncontract ProtocolAaveV2 is DSMath, ProtocolWETH {\\n    // Aave Referral Code\\n\\n    uint16 internal constant referralCode = 3228;\\n\\n    address internal constant ethAddr =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // // Aave Lending Pool Provider\\n    // AaveLendingPoolProviderInterface internal aaveProvider;\\n    // // Aave Protocol Data Provider\\n    // AaveDataProviderInterface internal aaveData;\\n    // // Aave Price Oracle\\n    // AavePriceOracleInterface internal aavePrice;\\n    address public immutable aaveProvider;\\n    address public immutable aaveData;\\n    address public immutable aavePrice;\\n\\n    constructor(\\n        address _wethAddress,\\n        address _aaveProvider,\\n        address _aaveData,\\n        address _aavePrice\\n    ) ProtocolWETH(_wethAddress) {\\n        //0x8bD206df9853d23bE158A9F7065Cf60A7A5F05DF\\n        aaveProvider = _aaveProvider;\\n        //0xBE24eEC0e36B39346Ccb1DFF7a4A9ef58383358E\\n        aaveData = _aaveData;\\n        //0x4578344f10246e3dc96b7D2c6E7854fF3798678A\\n        aavePrice = _aavePrice;\\n    }\\n\\n    event AaveV2Deposit(\\n        address indexed token,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event AaveV2Withdraw(\\n        address indexed token,\\n        uint256 tokenAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event AaveV2Borrow(\\n        address indexed token,\\n        uint256 tokenAmt,\\n        uint256 indexed rateMode,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event AaveV2Payback(\\n        address indexed token,\\n        uint256 tokenAmt,\\n        uint256 indexed rateMode,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event AaveV2EnableCollateral(address[] tokens);\\n\\n    event AaveV2SwapRateMode(address indexed token, uint256 rateMode);\\n\\n    function depositToken(address token, uint256 amt)\\n        public\\n        payable\\n        returns (uint256 _amt)\\n    {\\n        _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        WethInterface tokenContract = WethInterface(_token);\\n\\n        if (isEth) {\\n            _amt = _amt == type(uint256).max ? address(this).balance : _amt;\\n            convertEthToWeth(isEth, tokenContract, _amt);\\n        } else {\\n            _amt = _amt == type(uint256).max\\n                ? tokenContract.balanceOf(address(this))\\n                : _amt;\\n        }\\n\\n        approve(tokenContract, address(aave), _amt);\\n\\n        aave.deposit(_token, _amt, address(this), referralCode);\\n\\n        if (!getIsColl(_token)) {\\n            aave.setUserUseReserveAsCollateral(_token, true);\\n        }\\n    }\\n\\n    function withdrawToken(address token, uint256 amt)\\n        public\\n        payable\\n        returns (uint256 _amt)\\n    {\\n        _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        WethInterface tokenContract = WethInterface(_token);\\n\\n        uint256 initialBal = tokenContract.balanceOf(address(this));\\n        aave.withdraw(_token, _amt, address(this));\\n        uint256 finalBal = tokenContract.balanceOf(address(this));\\n\\n        _amt = sub(finalBal, initialBal);\\n\\n        convertWethToEth(isEth, tokenContract, _amt);\\n    }\\n\\n    function borrowToken(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode\\n    ) public payable returns (uint256 _amt) {\\n        _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        aave.borrow(_token, _amt, rateMode, referralCode, address(this));\\n        convertWethToEth(isEth, WethInterface(_token), _amt);\\n    }\\n\\n    function paybackToken(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode\\n    ) public payable returns (uint256 _amt) {\\n        _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        WethInterface tokenContract = WethInterface(_token);\\n\\n        _amt = _amt == type(uint256).max\\n            ? getPaybackBalance(_token, rateMode)\\n            : _amt;\\n\\n        require(\\n            _amt <= getPaybackBalance(_token, rateMode),\\n            \\\"CHFRY: AAVE repay overfloor\\\"\\n        );\\n\\n        if (isEth) convertEthToWeth(isEth, tokenContract, _amt);\\n\\n        approve(tokenContract, address(aave), _amt);\\n\\n        aave.repay(_token, _amt, rateMode, address(this));\\n    }\\n\\n    function enableTokenCollateral(address[] calldata tokens) public payable {\\n        uint256 _length = tokens.length;\\n        require(_length > 0, \\\"0-tokens-not-allowed\\\");\\n\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n\\n        for (uint256 i = 0; i < _length; i++) {\\n            address token = tokens[i];\\n            if (getCollateralBalance(token) > 0 && !getIsColl(token)) {\\n                aave.setUserUseReserveAsCollateral(token, true);\\n            }\\n        }\\n    }\\n\\n    function swapTokenBorrowRateMode(address token, uint256 rateMode)\\n        public\\n        payable\\n    {\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n\\n        uint256 currentRateMode = rateMode == 1 ? 2 : 1;\\n\\n        if (getPaybackBalance(token, currentRateMode) > 0) {\\n            aave.swapBorrowRateMode(token, rateMode);\\n        }\\n    }\\n\\n    function getIsColl(address token) internal view returns (bool isCol) {\\n        (, , , , , , , , isCol) = AaveDataProviderInterface(aaveData)\\n            .getUserReserveData(token, address(this));\\n    }\\n\\n    function getPaybackBalance(address token, uint256 rateMode)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        (\\n            ,\\n            uint256 stableDebt,\\n            uint256 variableDebt,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = AaveDataProviderInterface(aaveData).getUserReserveData(\\n                _token,\\n                address(this)\\n            );\\n        return rateMode == 1 ? stableDebt : variableDebt;\\n    }\\n\\n    function getCollateralBalance(address token)\\n        public\\n        view\\n        returns (uint256 bal)\\n    {\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        (bal, , , , , , , , ) = AaveDataProviderInterface(aaveData)\\n            .getUserReserveData(_token, address(this));\\n    }\\n\\n    function getPrice(address token) public view returns (uint256 price) {\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        price = AavePriceOracleInterface(aavePrice).getAssetPrice(_token);\\n    }\\n\\n    function getLTV(address token) public view returns (uint256 ltv) {\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        (, ltv, , , , , , , , ) = AaveDataProviderInterface(aaveData)\\n            .getReserveConfigurationData(_token);\\n    }\\n\\n    function getUserAccountData()\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        )\\n    {\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n        (\\n            totalCollateralETH,\\n            totalDebtETH,\\n            availableBorrowsETH,\\n            currentLiquidationThreshold,\\n            ltv,\\n            healthFactor\\n        ) = aave.getUserAccountData(address(this));\\n    }\\n\\n    function getEOAUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        )\\n    {\\n        AaveInterface aave = AaveInterface(\\n            AaveLendingPoolProviderInterface(aaveProvider).getLendingPool()\\n        );\\n        (\\n            totalCollateralETH,\\n            totalDebtETH,\\n            availableBorrowsETH,\\n            currentLiquidationThreshold,\\n            ltv,\\n            healthFactor\\n        ) = aave.getUserAccountData(user);\\n    }\\n}\\n\\ninterface AaveInterface {\\n    function getReserveData(address asset) external view returns (bytes memory);\\n\\n    function deposit(\\n        address _asset,\\n        uint256 _amount,\\n        address _onBehalfOf,\\n        uint16 _referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _rateMode,\\n        address _onBehalfOf\\n    ) external;\\n\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function setUserUseReserveAsCollateral(\\n        address _asset,\\n        bool _useAsCollateral\\n    ) external;\\n\\n    function swapBorrowRateMode(address _asset, uint256 _rateMode) external;\\n\\n    function getUserConfiguration(address user) external view returns (uint256);\\n\\n    function getReservesList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AavePriceOracleInterface {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AaveDataProviderInterface {\\n    function getReserveTokensAddresses(address _asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address _asset, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList()\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\\ninterface AWethInterface {\\n    function balanceOf(address _user) external view returns (uint256);\\n}\\n\\ninterface AaveStakedTokenIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/library/DSMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n\\n    uint256 constant WAD = 10**18;\\n    \\n    uint256 constant RAY = 10**27;\\n\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.add(x, y);\\n    }\\n\\n    function sub(uint256 x, uint256 y)\\n        internal\\n        pure\\n        virtual\\n        returns (uint256 z)\\n    {\\n        z = SafeMath.sub(x, y);\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.mul(x, y);\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.div(x, y);\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function toInt(uint256 x) internal pure returns (int256 y) {\\n        y = int256(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\\n        rad = mul(wad, 10**27);\\n    }\\n\\n    function convert18ToDec(uint256 _dec, uint256 _amt)\\n        internal\\n        pure\\n        returns (uint256 amt)\\n    {\\n        amt = (_amt / 10**(18 - _dec));\\n    }\\n\\n    function convertTo18(uint256 _dec, uint256 _amt)\\n        internal\\n        pure\\n        returns (uint256 amt)\\n    {\\n        amt = mul(_amt, 10**(18 - _dec));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/ProtocolWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface WethInterface {\\n    function approve(address, uint256) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function decimals() external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n}\\n\\nabstract contract ProtocolWETH {\\n\\n    address public immutable wethAddr;\\n\\n    constructor(address _wethAddr) {\\n        wethAddr = _wethAddr;\\n    }\\n\\n    function convertEthToWeth(\\n        bool isEth,\\n        WethInterface token,\\n        uint256 amount\\n    ) internal {\\n        if (isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(\\n        bool isEth,\\n        WethInterface token,\\n        uint256 amount\\n    ) internal {\\n        if (isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n\\n    function approve(\\n        WethInterface token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try token.approve(spender, amount) {} catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveData\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePrice\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"AaveV2Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"AaveV2Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"AaveV2EnableCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"AaveV2Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"AaveV2SwapRateMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"AaveV2Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aaveData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"enableTokenCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEOAUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"getPaybackBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"paybackToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"swapTokenBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ProtocolAaveV2", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c5000000000000000000000000057835ad21a177dbdd3090bb1cae03eacf78fc6d000000000000000000000000a50ba011c48153de246e5192c8f9258a2ba79ca9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}