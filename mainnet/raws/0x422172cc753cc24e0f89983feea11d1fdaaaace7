{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: RewardDistributor.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IRewardsDistributor {\r\n\r\n  function depositRewards() external payable;\r\n\r\n\r\n\r\n  function getShares(address wallet) external view returns (uint256);\r\n\r\n\r\n\r\n  function getBoostNfts(address wallet)\r\n\r\n    external\r\n\r\n    view\r\n\r\n    returns (uint256[] memory);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardDistributor is IRewardsDistributor, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  struct Reward {\r\n\r\n    uint256 totalExcluded; // excluded reward\r\n\r\n    uint256 totalRealised;\r\n\r\n    uint256 lastClaim; // used for boosting logic\r\n\r\n  }\r\n\r\n\r\n\r\n  struct Share {\r\n\r\n    uint256 amount;\r\n\r\n    uint256 amountBase;\r\n\r\n    uint256 stakedTime;\r\n\r\n    uint256[] nftBoostTokenIds;\r\n\r\n  }\r\n\r\n\r\n\r\n  uint256 public minSecondsBeforeUnstake = 43200;\r\n\r\n  address public shareholderToken;\r\n\r\n  address public nftBoosterToken;\r\n\r\n  uint256 public nftBoostPercentage = 2; // 2% boost per NFT staked\r\n\r\n  uint256 public maxNftsCanBoost = 10;\r\n\r\n  uint256 public totalStakedUsers;\r\n\r\n  uint256 public totalSharesBoosted;\r\n\r\n  uint256 public totalSharesDeposited; // will only be actual deposited tokens without handling any reflections or otherwise\r\n\r\n  address wrappedNative;\r\n\r\n  IUniswapV2Router02 router;\r\n\r\n\r\n\r\n  // amount of shares a user has\r\n\r\n  mapping(address => Share) shares;\r\n\r\n  // reward information per user\r\n\r\n  mapping(address => Reward) public rewards;\r\n\r\n  // staker list\r\n\r\n  address[] public stakers;\r\n\r\n  uint256 public totalRewards;\r\n\r\n  uint256 public totalDistributed;\r\n\r\n  uint256 public rewardsPerShare;\r\n\r\n\r\n\r\n  uint256 public constant ACC_FACTOR = 10**36;\r\n\r\n  address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n\r\n  constructor(\r\n\r\n    address _dexRouter,\r\n\r\n    address _shareholderToken,\r\n\r\n    address _nftBoosterToken,\r\n\r\n    address _wrappedNative\r\n\r\n  ) {\r\n\r\n    router = IUniswapV2Router02(_dexRouter);\r\n\r\n    shareholderToken = _shareholderToken;\r\n\r\n    nftBoosterToken = _nftBoosterToken;\r\n\r\n    wrappedNative = _wrappedNative;\r\n\r\n  }\r\n\r\n\r\n\r\n  function stake(uint256 amount, uint256[] memory nftTokenIds) external {\r\n\r\n    _stake(msg.sender, amount, nftTokenIds, false);\r\n\r\n  }\r\n\r\n\r\n\r\n  function _stake(\r\n\r\n    address shareholder,\r\n\r\n    uint256 amount,\r\n\r\n    uint256[] memory nftTokenIds,\r\n\r\n    bool overrideTransfers\r\n\r\n  ) private {\r\n\r\n    if (shares[shareholder].amount > 0 && !overrideTransfers) {\r\n\r\n      distributeReward(shareholder, false);\r\n\r\n    }\r\n\r\n\r\n\r\n    IERC20 shareContract = IERC20(shareholderToken);\r\n\r\n    uint256 stakeAmount = amount == 0\r\n\r\n      ? shareContract.balanceOf(shareholder)\r\n\r\n      : amount;\r\n\r\n    uint256 sharesBefore = shares[shareholder].amount;\r\n\r\n\r\n\r\n    // for compounding we will pass in this contract override flag and assume the tokens\r\n\r\n    // received by the contract during the compounding process are already here, therefore\r\n\r\n    // whatever the amount is passed in is what we care about and leave it at that. If a normal\r\n\r\n    // staking though by a user, transfer tokens from the user to the contract.\r\n\r\n    uint256 finalBaseAdded = stakeAmount;\r\n\r\n    if (!overrideTransfers) {\r\n\r\n      uint256 shareBalanceBefore = shareContract.balanceOf(address(this));\r\n\r\n      shareContract.transferFrom(shareholder, address(this), stakeAmount);\r\n\r\n      finalBaseAdded = shareContract.balanceOf(address(this)).sub(\r\n\r\n        shareBalanceBefore\r\n\r\n      );\r\n\r\n\r\n\r\n      if (\r\n\r\n        nftTokenIds.length > 0 &&\r\n\r\n        nftBoosterToken != address(0) &&\r\n\r\n        shares[shareholder].nftBoostTokenIds.length + nftTokenIds.length <=\r\n\r\n        maxNftsCanBoost\r\n\r\n      ) {\r\n\r\n        IERC721 nftContract = IERC721(nftBoosterToken);\r\n\r\n        for (uint256 i = 0; i < nftTokenIds.length; i++) {\r\n\r\n          nftContract.transferFrom(shareholder, address(this), nftTokenIds[i]);\r\n\r\n          shares[shareholder].nftBoostTokenIds.push(nftTokenIds[i]);\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    uint256 finalBoostedAmount = getElevatedSharesWithBooster(\r\n\r\n      shareholder,\r\n\r\n      shares[shareholder].amountBase.add(finalBaseAdded)\r\n\r\n    );\r\n\r\n\r\n\r\n    totalSharesDeposited = totalSharesDeposited.add(finalBaseAdded);\r\n\r\n    totalSharesBoosted = totalSharesBoosted.sub(shares[shareholder].amount).add(\r\n\r\n        finalBoostedAmount\r\n\r\n      );\r\n\r\n    shares[shareholder].amountBase += finalBaseAdded;\r\n\r\n    shares[shareholder].amount = finalBoostedAmount;\r\n\r\n    shares[shareholder].stakedTime = block.timestamp;\r\n\r\n    if (sharesBefore == 0 && shares[shareholder].amount > 0) {\r\n\r\n      totalStakedUsers++;\r\n\r\n    }\r\n\r\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\r\n\r\n      shares[shareholder].amount\r\n\r\n    );\r\n\r\n    stakers.push(shareholder);\r\n\r\n  }\r\n\r\n\r\n\r\n  function _unstake(address account, uint256 boostedAmount, bool relinquishRewards) private {\r\n\r\n    require(\r\n\r\n      shares[account].amount > 0 &&\r\n\r\n        (boostedAmount == 0 || boostedAmount <= shares[account].amount),\r\n\r\n      'you can only unstake if you have some staked'\r\n\r\n    );\r\n\r\n    require(\r\n\r\n      block.timestamp > shares[account].stakedTime + minSecondsBeforeUnstake,\r\n\r\n      'must be staked for minimum time and at least one block if no min'\r\n\r\n    );\r\n\r\n    if (!relinquishRewards) {\r\n\r\n      distributeReward(account, false);\r\n\r\n    }\r\n\r\n\r\n\r\n    IERC20 shareContract = IERC20(shareholderToken);\r\n\r\n    uint256 boostedAmountToUnstake = boostedAmount == 0\r\n\r\n      ? shares[account].amount\r\n\r\n      : boostedAmount;\r\n\r\n\r\n\r\n    uint256 baseAmount = getBaseSharesFromBoosted(\r\n\r\n      account,\r\n\r\n      boostedAmountToUnstake\r\n\r\n    );\r\n\r\n\r\n\r\n    if (boostedAmount == 0) {\r\n\r\n      uint256[] memory tokenIds = shares[account].nftBoostTokenIds;\r\n\r\n      IERC721 nftContract = IERC721(nftBoosterToken);\r\n\r\n      for (uint256 i = 0; i < tokenIds.length; i++) {\r\n\r\n        nftContract.safeTransferFrom(address(this), account, tokenIds[i]);\r\n\r\n      }\r\n\r\n      totalStakedUsers--;\r\n\r\n      delete shares[account].nftBoostTokenIds;\r\n\r\n    }\r\n\r\n\r\n\r\n    shareContract.transfer(account, baseAmount);\r\n\r\n\r\n\r\n    totalSharesDeposited = totalSharesDeposited.sub(baseAmount);\r\n\r\n    totalSharesBoosted = totalSharesBoosted.sub(boostedAmountToUnstake);\r\n\r\n    shares[account].amountBase -= baseAmount;\r\n\r\n    shares[account].amount -= boostedAmountToUnstake;\r\n\r\n    rewards[account].totalExcluded = getCumulativeRewards(\r\n\r\n      shares[account].amount\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n\r\n  function unstake(uint256 boostedAmount, bool relinquishRewards) external {\r\n\r\n    _unstake(msg.sender, boostedAmount, relinquishRewards);\r\n\r\n  }\r\n\r\n\r\n\r\n  function depositRewards() external payable override {\r\n\r\n    require(msg.value > 0, 'value must be greater than 0');\r\n\r\n    require(\r\n\r\n      totalSharesBoosted > 0,\r\n\r\n      'must be shares deposited to be rewarded rewards'\r\n\r\n    );\r\n\r\n\r\n\r\n    uint256 amount = msg.value;\r\n\r\n\r\n\r\n    totalRewards = totalRewards.add(amount);\r\n\r\n    rewardsPerShare = rewardsPerShare.add(\r\n\r\n      ACC_FACTOR.mul(amount).div(totalSharesBoosted)\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n\r\n  function distributeReward(address shareholder, bool compound) internal {\r\n\r\n    require(\r\n\r\n      block.timestamp > rewards[shareholder].lastClaim,\r\n\r\n      'can only claim once per block'\r\n\r\n    );\r\n\r\n    if (shares[shareholder].amount == 0) {\r\n\r\n      return;\r\n\r\n    }\r\n\r\n\r\n\r\n    uint256 amount = getUnpaid(shareholder);\r\n\r\n\r\n\r\n    rewards[shareholder].totalRealised = rewards[shareholder].totalRealised.add(\r\n\r\n      amount\r\n\r\n    );\r\n\r\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\r\n\r\n      shares[shareholder].amount\r\n\r\n    );\r\n\r\n    rewards[shareholder].lastClaim = block.timestamp;\r\n\r\n\r\n\r\n    if (amount > 0) {\r\n\r\n      totalDistributed = totalDistributed.add(amount);\r\n\r\n      uint256 balanceBefore = address(this).balance;\r\n\r\n      if (compound) {\r\n\r\n        IERC20 shareToken = IERC20(shareholderToken);\r\n\r\n        uint256 balBefore = shareToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = wrappedNative;\r\n\r\n        path[1] = shareholderToken;\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n\r\n          value: amount\r\n\r\n        }(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amountReceived = shareToken.balanceOf(address(this)).sub(\r\n\r\n          balBefore\r\n\r\n        );\r\n\r\n        if (amountReceived > 0) {\r\n\r\n          uint256[] memory _empty = new uint256[](0);\r\n\r\n          _stake(shareholder, amountReceived, _empty, true);\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        (bool sent, ) = payable(shareholder).call{ value: amount }('');\r\n\r\n        require(sent, 'ETH was not successfully sent');\r\n\r\n      }\r\n\r\n      require(\r\n\r\n        address(this).balance >= balanceBefore - amount,\r\n\r\n        'only take proper amount from contract'\r\n\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  function claimReward(bool compound) external {\r\n\r\n    distributeReward(msg.sender, compound);\r\n\r\n  }\r\n\r\n\r\n\r\n  // getElevatedSharesWithBooster:\r\n\r\n  // A + Ax = B\r\n\r\n  // ------------------------\r\n\r\n  // getBaseSharesFromBoosted:\r\n\r\n  // A + Ax = B\r\n\r\n  // A(1 + x) = B\r\n\r\n  // A = B/(1 + x)\r\n\r\n  function getElevatedSharesWithBooster(address shareholder, uint256 baseAmount)\r\n\r\n    internal\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    return\r\n\r\n      eligibleForRewardBooster(shareholder)\r\n\r\n        ? baseAmount.add(\r\n\r\n          baseAmount.mul(getBoostPercentage(shareholder)).div(10**2)\r\n\r\n        )\r\n\r\n        : baseAmount;\r\n\r\n  }\r\n\r\n\r\n\r\n  function getBaseSharesFromBoosted(address shareholder, uint256 boostedAmount)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    uint256 multiplier = 10**18;\r\n\r\n    return\r\n\r\n      eligibleForRewardBooster(shareholder)\r\n\r\n        ? boostedAmount.mul(multiplier).div(\r\n\r\n          multiplier.add(\r\n\r\n            multiplier.mul(getBoostPercentage(shareholder)).div(10**2)\r\n\r\n          )\r\n\r\n        )\r\n\r\n        : boostedAmount;\r\n\r\n  }\r\n\r\n\r\n\r\n  function getBoostPercentage(address wallet) public view returns (uint256) {\r\n\r\n    uint256[] memory _userNFTTokens = getBoostNfts(wallet);\r\n\r\n    uint256 _userNFTBalance = _userNFTTokens.length;\r\n\r\n    return nftBoostPercentage.mul(_userNFTBalance);\r\n\r\n  }\r\n\r\n\r\n\r\n  function eligibleForRewardBooster(address wallet) public view returns (bool) {\r\n\r\n    return getBoostNfts(wallet).length > 0;\r\n\r\n  }\r\n\r\n\r\n\r\n  function getUnpaid(address shareholder) public view returns (uint256) {\r\n\r\n    if (shares[shareholder].amount == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    uint256 earnedRewards = getCumulativeRewards(shares[shareholder].amount);\r\n\r\n    uint256 rewardsExcluded = rewards[shareholder].totalExcluded;\r\n\r\n    if (earnedRewards <= rewardsExcluded) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    return earnedRewards.sub(rewardsExcluded);\r\n\r\n  }\r\n\r\n\r\n\r\n  function getCumulativeRewards(uint256 share) internal view returns (uint256) {\r\n\r\n    return share.mul(rewardsPerShare).div(ACC_FACTOR);\r\n\r\n  }\r\n\r\n\r\n\r\n  function getBaseShares(address user) external view returns (uint256) {\r\n\r\n    return shares[user].amountBase;\r\n\r\n  }\r\n\r\n\r\n\r\n  function getShares(address user) external view override returns (uint256) {\r\n\r\n    return shares[user].amount;\r\n\r\n  }\r\n\r\n\r\n\r\n  function getBoostNfts(address user)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    override\r\n\r\n    returns (uint256[] memory)\r\n\r\n  {\r\n\r\n    return shares[user].nftBoostTokenIds;\r\n\r\n  }\r\n\r\n\r\n\r\n  function setShareholderToken(address _token) external onlyOwner {\r\n\r\n    shareholderToken = _token;\r\n\r\n  }\r\n\r\n\r\n\r\n  function setMinSecondsBeforeUnstake(uint256 _seconds) external onlyOwner {\r\n\r\n    minSecondsBeforeUnstake = _seconds;\r\n\r\n  }\r\n\r\n\r\n\r\n  function setNftBoosterToken(address _nft) external onlyOwner {\r\n\r\n    nftBoosterToken = _nft;\r\n\r\n  }\r\n\r\n\r\n\r\n  function setNftBoostPercentage(uint256 _percentage) external onlyOwner {\r\n\r\n    nftBoostPercentage = _percentage;\r\n\r\n  }\r\n\r\n\r\n\r\n  function setMaxNftsToBoost(uint256 _amount) external onlyOwner {\r\n\r\n    maxNftsCanBoost = _amount;\r\n\r\n  }\r\n\r\n\r\n\r\n  function unstakeAll() external onlyOwner {\r\n\r\n    if (stakers.length == 0)\r\n\r\n      return;\r\n\r\n    for(uint i = 0; i < stakers.length; i++) {\r\n\r\n      if(shares[stakers[i]].amount <= 0)\r\n\r\n        continue;\r\n\r\n      _unstake(stakers[i], 0, false);\r\n\r\n    }\r\n\r\n    delete stakers;\r\n\r\n  }\r\n\r\n\r\n\r\n  receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shareholderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftBoosterToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"compound\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"eligibleForRewardBooster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBaseShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostedAmount\",\"type\":\"uint256\"}],\"name\":\"getBaseSharesFromBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBoostNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBoostPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNftsCanBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSecondsBeforeUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBoostPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBoosterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxNftsToBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMinSecondsBeforeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setNftBoostPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNftBoosterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setShareholderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boostedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"relinquishRewards\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardDistributor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000383b0b2ce2e1757b5e1d087d8f36013ea595541a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9b81eed1c82367934c7e18df73617269d570a8fa8633d9f88350f52285d4e68"}]}