{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FlowerFamEcosystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./libraries/SimpleAccessUpgradable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFlowerFam.sol\\\";\\r\\nimport \\\"./interfaces/IBee.sol\\\";\\r\\nimport \\\"./interfaces/IFlowerFamNewGen.sol\\\";\\r\\nimport \\\"./interfaces/IHoney.sol\\\";\\r\\nimport \\\"./interfaces/IFlowerFamRandomizer.sol\\\";\\r\\n\\r\\ncontract FlowerFamEcoSystem is SimpleAccessUpgradable {\\r\\n    IFlowerFam public flowerFamNFT;\\r\\n    IBee public beeNFT;\\r\\n    IFlowerFamNewGen public flowerFamNewGenNFT;\\r\\n    IHoney public HoneyToken;\\r\\n    IFlowerFamRandomizer private randomizer;\\r\\n\\r\\n    /** Honey production */\\r\\n    struct UserHoneyProduction {\\r\\n        uint32 lastAction;\\r\\n        uint112 totalProductionPerDay;\\r\\n        uint112 totalAccumulated;\\r\\n    }\\r\\n    mapping(address => UserHoneyProduction) public userToProductionInfo;\\r\\n    mapping(uint256 => uint256) public speciesToHoneyProduction;\\r\\n    uint256 public newGenHoneyProduction;\\r\\n    uint256 public upgradeProductionBonus;\\r\\n\\r\\n    /** Bee system */\\r\\n    struct FlowerBeeAttachement {\\r\\n        uint128 reductionsStart; /// @dev records at which reduction period we start after stake or restore\\r\\n        uint128 beeId;\\r\\n    }\\r\\n    uint256 public beeProductionBonus;\\r\\n    mapping(uint256 => FlowerBeeAttachement) public flowerToBee;\\r\\n    mapping(uint256 => FlowerBeeAttachement) public newGenFlowerToBee;\\r\\n\\r\\n    mapping(address => uint256) public flowersToBeeCount;\\r\\n\\r\\n    event UpdateTotalProductionPerDay(address indexed user, uint256 indexed amount);\\r\\n\\r\\n    constructor(\\r\\n        address _flowerFamNFT,\\r\\n        address _beeNFT,\\r\\n        address _flowerFamNewGen,\\r\\n        address _honeyToken,\\r\\n        address _randomizer\\r\\n    ) {}\\r\\n\\r\\n    function initialize(        \\r\\n        address _flowerFamNFT,\\r\\n        address _beeNFT,\\r\\n        address _flowerFamNewGen,\\r\\n        address _honeyToken,\\r\\n        address _randomizer\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        flowerFamNFT = IFlowerFam(_flowerFamNFT);\\r\\n        beeNFT = IBee(_beeNFT);\\r\\n        flowerFamNewGenNFT = IFlowerFamNewGen(_flowerFamNewGen);\\r\\n        HoneyToken = IHoney(_honeyToken);\\r\\n        randomizer = IFlowerFamRandomizer(_randomizer);\\r\\n\\r\\n        speciesToHoneyProduction[0] = 4 ether;\\r\\n        speciesToHoneyProduction[1] = 6 ether;\\r\\n        speciesToHoneyProduction[2] = 10 ether;\\r\\n        speciesToHoneyProduction[3] = 18 ether;\\r\\n        speciesToHoneyProduction[4] = 30 ether;\\r\\n        newGenHoneyProduction = 2 ether;\\r\\n\\r\\n        beeProductionBonus = 5; /// @dev 5% boost of flowers earnings for each reduction period\\r\\n        upgradeProductionBonus = 5; /// @dev 5% boost of flowers earnings for each upgrade\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /** Helpers */\\r\\n\\r\\n    function _getNotAccumulatedProduction(\\r\\n        uint256 lastAction,\\r\\n        uint256 totalProductionPerDay\\r\\n    ) internal view returns (uint256) {\\r\\n        return ((block.timestamp - lastAction) * totalProductionPerDay) / 1 days;\\r\\n    }\\r\\n\\r\\n    function _getTotalNotAccumulatedProductionOfUser(address user, uint256[] memory flowersWithBees) internal view returns (uint256) {\\r\\n        require(flowersWithBees.length == flowersToBeeCount[user], \\\"Flower to bees count is not matched\\\");\\r\\n        UserHoneyProduction memory userHoneyProduction = userToProductionInfo[user];\\r\\n        \\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n\\r\\n        uint256 lastId;\\r\\n        for (uint i = 0; i < flowersWithBees.length; i++) {\\r\\n            uint256 flowerId = flowersWithBees[i];\\r\\n            require(flowerId > lastId, \\\"FlowersWithBees array needs to be ordered ascendingly\\\");\\r\\n            lastId = flowerId;\\r\\n\\r\\n            if (flowerToBee[flowerId].beeId != 0 && flowerFamNFT.realOwnerOf(flowerId) == user)\\r\\n                unAccumulated += _getProductionFromBee(flowerId, true, flowerToBee[flowerId].beeId);\\r\\n            if (newGenFlowerToBee[flowerId].beeId != 0 && flowerFamNewGenNFT.realOwnerOf(flowerId) == user)\\r\\n                unAccumulated += _getProductionFromBee(flowerId, false, newGenFlowerToBee[flowerId].beeId);     \\r\\n        }\\r\\n\\r\\n        return unAccumulated;\\r\\n    }\\r\\n\\r\\n    function _getProductionFromUpgrade(uint256 initialProduction, uint256 flowerFamId) internal view returns(uint256) {\\r\\n        return initialProduction * upgradeProductionBonus * flowerFamNFT.getUpgradeCountOfFlower(flowerFamId) / 100;\\r\\n    }\\r\\n\\r\\n    function _getProductionFromBee(uint256 flowerId, bool isFam, uint256 beeId) internal view returns(uint256) {\\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerId);\\r\\n        uint256 flowerBaseProduction = isFam ? \\r\\n            speciesToHoneyProduction[species] :\\r\\n            newGenHoneyProduction;\\r\\n        uint256 powerCycleBasePeriod = beeNFT.powerCycleBasePeriod();\\r\\n\\r\\n        uint256 beeLastInteraction = beeNFT.getLastAction(beeId);\\r\\n        uint256 powerCycleStart = beeNFT.getPowerCycleStart(beeId);\\r\\n        uint256 reductions = beeNFT.getPowerReductionPeriods(beeId);\\r\\n        uint256 reductionsStart = isFam ? flowerToBee[flowerId].reductionsStart : newGenFlowerToBee[flowerId].reductionsStart;\\r\\n\\r\\n        uint256 totalEarned;\\r\\n        for (uint i = 0; i <= reductions - reductionsStart; i++) {\\r\\n\\r\\n            /// @dev nothing should be added at or beyond 20 reductions\\r\\n            if (reductionsStart + i >= 20)\\r\\n                continue;\\r\\n\\r\\n            /// @dev at first reduction we add either period from last interaction until now\\r\\n            /// or period from last interaction until next reduction. We calculate the bonus as\\r\\n            /// this time multiplied by the initial reduction.\\r\\n            if (i == 0) {\\r\\n                uint256 nextReductionAfterStart = powerCycleStart + (powerCycleBasePeriod * (reductionsStart + 1));\\r\\n                uint256 timeSpentBeforeFirstReduction = block.timestamp < nextReductionAfterStart ? \\r\\n                    block.timestamp - beeLastInteraction : \\r\\n                    nextReductionAfterStart - beeLastInteraction;\\r\\n                \\r\\n                uint256 additionalProduction = flowerBaseProduction * (100 - reductionsStart * beeProductionBonus) / 100;\\r\\n                totalEarned += additionalProduction * timeSpentBeforeFirstReduction / 1 days;\\r\\n            \\r\\n            /// @dev Here we just calculate one week worth of rewards at that level\\r\\n            } else if (i < reductions - reductionsStart) {\\r\\n                uint256 additionalProduction = flowerBaseProduction * (100 - (reductionsStart + i) * beeProductionBonus) / 100;\\r\\n                totalEarned += additionalProduction * powerCycleBasePeriod / 1 days;\\r\\n\\r\\n            /// @dev At last reduction we add period from last reduction until now with that reduction rate as reward.\\r\\n            } else {\\r\\n                uint256 startTimeOfLastReduction = powerCycleStart + (powerCycleBasePeriod * reductions);\\r\\n                uint256 timeSpentAtLastReduction = block.timestamp  - startTimeOfLastReduction;\\r\\n                uint256 additionalProduction = flowerBaseProduction * (100 - reductions * beeProductionBonus) / 100;\\r\\n                totalEarned +=  additionalProduction * timeSpentAtLastReduction / 1 days;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return totalEarned;\\r\\n    }\\r\\n\\r\\n    /** User interactable (everything that does not require spending $honey) */\\r\\n\\r\\n    function stakeFlowerFamFlower(uint256 flowerFamId) external {\\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n\\r\\n        uint256 additionalHoneyProduction = speciesToHoneyProduction[species];\\r\\n        additionalHoneyProduction += _getProductionFromUpgrade(additionalHoneyProduction, flowerFamId);\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNFT.stake(msg.sender, flowerFamId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function unstakeFlowerFamFlower(uint256 flowerFamId) external {\\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n\\r\\n        if (flowerToBee[flowerFamId].beeId != 0) {\\r\\n            releaseBeeFromFlower(flowerFamId, flowerToBee[flowerFamId].beeId);\\r\\n        }\\r\\n\\r\\n        uint256 reducedHoneyProduction = speciesToHoneyProduction[species];\\r\\n        reducedHoneyProduction += _getProductionFromUpgrade(reducedHoneyProduction, flowerFamId);\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay -= uint112(reducedHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNFT.unstake(msg.sender, flowerFamId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function stakeNewGenerationFlower(uint256 newGenId) external {\\r\\n        uint256 additionalHoneyProduction = newGenHoneyProduction;\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNewGenNFT.stake(msg.sender, newGenId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function unstakeNewGenerationFlower(uint256 newGenId) external {\\r\\n        if (newGenFlowerToBee[newGenId].beeId != 0) {\\r\\n            releaseBeeFromNewGenFlower(newGenId, newGenFlowerToBee[newGenId].beeId);\\r\\n        }\\r\\n        \\r\\n        uint256 reducedHoneyProduction = newGenHoneyProduction;\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay -= uint112(reducedHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNewGenNFT.unstake(msg.sender, newGenId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    /** Batch stake */\\r\\n\\r\\n    function batchStakeFlowerFamFlowers(uint256[] calldata flowerFamIds) external {\\r\\n        require(flowerFamIds.length > 0, \\\"No fams provided\\\");\\r\\n\\r\\n        uint256 additionalHoneyProduction;\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n\\r\\n            uint256 flowerProduction = speciesToHoneyProduction[species];\\r\\n            flowerProduction += _getProductionFromUpgrade(additionalHoneyProduction, flowerFamId);\\r\\n\\r\\n            additionalHoneyProduction += flowerProduction;\\r\\n        }\\r\\n        \\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            flowerFamNFT.stake(msg.sender, flowerFamId);\\r\\n        }            \\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function batchUnstakeFlowerFamFlower(uint256[] calldata flowerFamIds) external {\\r\\n        require(flowerFamIds.length > 0, \\\"No fams provided\\\");\\r\\n\\r\\n        uint256 reducedHoneyProduction;\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            if (flowerToBee[flowerFamId].beeId != 0) {\\r\\n                releaseBeeFromFlower(flowerFamId, flowerToBee[flowerFamId].beeId);\\r\\n            }\\r\\n\\r\\n            uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n            uint256 flowerProduction = speciesToHoneyProduction[species];\\r\\n            flowerProduction += _getProductionFromUpgrade(reducedHoneyProduction, flowerFamId);\\r\\n            reducedHoneyProduction += flowerProduction;\\r\\n        }\\r\\n            \\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay -= uint112(reducedHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            flowerFamNFT.unstake(msg.sender, flowerFamId);\\r\\n        }            \\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function batchStakeNewGenerationFlower(uint256[] calldata newGenIds) external {\\r\\n        require(newGenIds.length > 0, \\\"No new generation flowers provided\\\");\\r\\n\\r\\n        uint256 additionalHoneyProduction = newGenHoneyProduction * newGenIds.length;\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        for (uint i = 0; i < newGenIds.length; i++)\\r\\n            flowerFamNewGenNFT.stake(msg.sender, newGenIds[i]);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function batchUnstakeNewGenerationFlower(uint256[] calldata newGenIds) external {\\r\\n        require(newGenIds.length > 0, \\\"No new generation flowers provided\\\");\\r\\n\\r\\n        uint256 reducedHoneyProduction = newGenHoneyProduction * newGenIds.length;\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay -= uint112(reducedHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        for (uint i = 0; i < newGenIds.length; i++)\\r\\n            flowerFamNewGenNFT.unstake(msg.sender, newGenIds[i]);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    /** Minter stake */\\r\\n    function mintAndStakeFlowerFamFlower(address staker, uint256 flowerFamId) external onlyAuthorized {\\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n\\r\\n        uint256 additionalHoneyProduction = speciesToHoneyProduction[species];\\r\\n        additionalHoneyProduction += _getProductionFromUpgrade(additionalHoneyProduction, flowerFamId);\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[staker];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNFT.stake(staker, flowerFamId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(staker, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function mintAndBatchStakeFlowerFamFlowers(address staker, uint256[] calldata flowerFamIds) external onlyAuthorized {\\r\\n        require(flowerFamIds.length > 0, \\\"No fams provided\\\");\\r\\n\\r\\n        uint256 additionalHoneyProduction;\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n\\r\\n            uint256 flowerProduction = speciesToHoneyProduction[species];\\r\\n            flowerProduction += _getProductionFromUpgrade(additionalHoneyProduction, flowerFamId);\\r\\n\\r\\n            additionalHoneyProduction += flowerProduction;\\r\\n        }\\r\\n        \\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[staker];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(additionalHoneyProduction);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        for (uint i = 0; i < flowerFamIds.length; i++) {\\r\\n            uint256 flowerFamId = flowerFamIds[i];\\r\\n            flowerFamNFT.stake(staker, flowerFamId);\\r\\n        }            \\r\\n\\r\\n        emit UpdateTotalProductionPerDay(staker, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    /** Bees */\\r\\n\\r\\n    function attachBeeToFlower(uint256 flowerFamId, uint256 beeId) external {\\r\\n        require(flowerFamNFT.realOwnerOf(flowerFamId) == msg.sender, \\\"Sender not owner of flower\\\");\\r\\n        require(flowerFamNFT.isAlreadyStaked(flowerFamId), \\\"Cannot attach bee to unstaked flower\\\");\\r\\n        require(flowerToBee[flowerFamId].beeId == 0, \\\"Flower already boosted by bee\\\");\\r\\n\\r\\n        beeNFT.stake(msg.sender, beeId); /// @dev contains checks for ownership and stake status\\r\\n    \\r\\n        flowerToBee[flowerFamId].reductionsStart = uint128(beeNFT.getPowerReductionPeriods(beeId));\\r\\n        flowerToBee[flowerFamId].beeId = uint128(beeId);\\r\\n                \\r\\n        flowersToBeeCount[msg.sender] += 1;\\r\\n    }\\r\\n\\r\\n    function releaseBeeFromFlower(uint256 flowerFamId, uint256 beeId) public {\\r\\n        require(flowerFamNFT.realOwnerOf(flowerFamId) == msg.sender, \\\"Sender not owner of flower\\\");\\r\\n        require(flowerFamNFT.isAlreadyStaked(flowerFamId), \\\"Cannot release from unstaked flower\\\");        \\r\\n        require(flowerToBee[flowerFamId].beeId == beeId, \\\"Flower already boosted by bee\\\");\\r\\n\\r\\n        /// @dev add production from bee to total accumulated when unstaking the bee\\r\\n        uint256 earnedSinceLastInteraction = _getProductionFromBee(flowerFamId, true, beeId);\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n        userHoneyProduction.totalAccumulated += uint112(earnedSinceLastInteraction);\\r\\n\\r\\n        delete flowerToBee[flowerFamId];\\r\\n        beeNFT.unstake(msg.sender, beeId); /// @dev contains checks for ownership and stake status\\r\\n        flowersToBeeCount[msg.sender] -= 1;\\r\\n    }\\r\\n\\r\\n    function attachBeeToNewGenFlower(uint256 flowerId, uint256 beeId) external {\\r\\n        require(flowerFamNewGenNFT.realOwnerOf(flowerId) == msg.sender, \\\"Sender not owner of flower\\\");\\r\\n        require(flowerFamNewGenNFT.isAlreadyStaked(flowerId), \\\"Cannot attach bee to unstaked flower\\\");\\r\\n        require(newGenFlowerToBee[flowerId].beeId == 0, \\\"Flower already boosted by bee\\\");\\r\\n\\r\\n        beeNFT.stake(msg.sender, beeId); /// @dev contains checks for ownership and stake status\\r\\n\\r\\n        newGenFlowerToBee[flowerId].reductionsStart = uint128(beeNFT.getPowerReductionPeriods(beeId));\\r\\n        newGenFlowerToBee[flowerId].beeId = uint128(beeId);\\r\\n                \\r\\n        flowersToBeeCount[msg.sender] += 1;\\r\\n    }\\r\\n\\r\\n    function releaseBeeFromNewGenFlower(uint256 flowerId, uint256 beeId) public {\\r\\n        require(flowerFamNewGenNFT.realOwnerOf(flowerId) == msg.sender, \\\"Sender not owner of flower\\\");\\r\\n        require(flowerFamNewGenNFT.isAlreadyStaked(flowerId), \\\"Cannot release from unstaked flower\\\");        \\r\\n        require(newGenFlowerToBee[flowerId].beeId == beeId, \\\"Flower already boosted by bee\\\");\\r\\n\\r\\n        /// @dev add production from bee to total accumulated when unstaking the bee\\r\\n        uint256 earnedSinceLastInteraction = _getProductionFromBee(flowerId, false, beeId);\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[msg.sender];\\r\\n        userHoneyProduction.totalAccumulated += uint112(earnedSinceLastInteraction);\\r\\n\\r\\n        delete newGenFlowerToBee[flowerId];\\r\\n        beeNFT.unstake(msg.sender, beeId); /// @dev contains checks for ownership and stake status\\r\\n        flowersToBeeCount[msg.sender] -= 1;\\r\\n    }\\r\\n\\r\\n    /** Marketplace only (everything that requires spending $honey) */\\r\\n\\r\\n    function upgradeFlower(address user, uint256 flowerFamId) external onlyAuthorized {\\r\\n        require(flowerFamNFT.realOwnerOf(flowerFamId) == user, \\\"Sender not owner of flower\\\");\\r\\n        require(flowerFamNFT.isAlreadyStaked(flowerFamId), \\\"Cannot upgrade unstaked flower\\\");\\r\\n\\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerFamId);\\r\\n        uint256 additionalHoneyProduction = speciesToHoneyProduction[species];\\r\\n        uint256 addedFromUpgrade = additionalHoneyProduction * upgradeProductionBonus / 100; /// @dev each upgrade adds upgradeProductionBonus\\r\\n\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[user];\\r\\n\\r\\n        uint256 unAccumulated = _getNotAccumulatedProduction(\\r\\n            userHoneyProduction.lastAction,\\r\\n            userHoneyProduction.totalProductionPerDay\\r\\n        );\\r\\n        userHoneyProduction.lastAction = uint32(block.timestamp);\\r\\n        userHoneyProduction.totalProductionPerDay += uint112(addedFromUpgrade);\\r\\n        userHoneyProduction.totalAccumulated += uint112(unAccumulated);\\r\\n\\r\\n        flowerFamNFT.upgrade(user, flowerFamId);\\r\\n\\r\\n        emit UpdateTotalProductionPerDay(msg.sender, userHoneyProduction.totalProductionPerDay);\\r\\n    }\\r\\n\\r\\n    function restorePowerOfBee(address user, uint256 flowerId, bool isFam, uint256 beeId, uint256 restorePeriods) external onlyAuthorized {    \\r\\n        if (isFam) {\\r\\n            require(flowerFamNFT.realOwnerOf(flowerId) == user, \\\"Sender not owner of flower\\\");\\r\\n            require(flowerFamNFT.isAlreadyStaked(flowerId), \\\"Cannot restore bee from unstaked flower\\\");\\r\\n            require(flowerToBee[flowerId].beeId == beeId, \\\"Flower already boosted by bee\\\");\\r\\n        }            \\r\\n        else {\\r\\n            require(flowerFamNewGenNFT.realOwnerOf(flowerId) == user, \\\"Sender not owner of flower\\\");\\r\\n            require(flowerFamNewGenNFT.isAlreadyStaked(flowerId), \\\"Cannot restore bee from unstaked flower\\\");\\r\\n            require(newGenFlowerToBee[flowerId].beeId == beeId, \\\"Flower already boosted by bee\\\");\\r\\n        }            \\r\\n\\r\\n        /// @dev add production from bee to total accumulated when unstaking the bee\\r\\n        uint256 earnedSinceLastInteraction = _getProductionFromBee(flowerId, isFam, beeId);\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[user];\\r\\n        userHoneyProduction.totalAccumulated += uint112(earnedSinceLastInteraction);\\r\\n\\r\\n        if (isFam)\\r\\n            flowerToBee[flowerId].reductionsStart = uint128(beeNFT.getPowerReductionPeriods(beeId));\\r\\n        else\\r\\n            newGenFlowerToBee[flowerId].reductionsStart = uint128(beeNFT.getPowerReductionPeriods(beeId));\\r\\n\\r\\n        beeNFT.restorePowerOfBee(user, beeId, restorePeriods); /// @dev contains checks for ownership and stake status\\r\\n    }\\r\\n\\r\\n    /** View */\\r\\n\\r\\n    function getAttachedFlowerOfBee(uint256 beeId) external view returns (uint256) {\\r\\n        uint256 flowerId = 0;\\r\\n        uint256 startToken = flowerFamNFT.startTokenId();\\r\\n        for (uint i = startToken; i < startToken + flowerFamNFT.totalSupply(); i++) {\\r\\n            if (flowerToBee[i].beeId == beeId)\\r\\n                flowerId = i;\\r\\n        }\\r\\n        \\r\\n        return flowerId;\\r\\n    }\\r\\n\\r\\n    function getAttachedNewGenFlowerOfBee(uint256 beeId) external view returns (uint256) {\\r\\n        uint256 flowerId = 0;\\r\\n        uint256 startToken = flowerFamNewGenNFT.startTokenId();\\r\\n        for (uint i = startToken; i < startToken + flowerFamNewGenNFT.totalSupply(); i++) {\\r\\n        if (newGenFlowerToBee[i].beeId == beeId)\\r\\n            flowerId = i;\\r\\n        }\\r\\n        \\r\\n        return flowerId;\\r\\n    }\\r\\n\\r\\n    function getFlowerFamFlowersOfUserWithBees(address user) public view returns (uint256[] memory) {\\r\\n        uint256 counter;\\r\\n        uint256 balance = flowerFamNFT.balanceOf(user);\\r\\n        uint256[] memory userNFTs = new uint256[](balance);\\r\\n\\r\\n        uint256 startToken = flowerFamNFT.startTokenId();\\r\\n\\r\\n        for (uint i = startToken; i < startToken + flowerFamNFT.totalSupply(); i++) {\\r\\n            if (flowerToBee[i].beeId != 0 && flowerFamNFT.realOwnerOf(i) == user) {\\r\\n                userNFTs[counter] = i;\\r\\n                counter++;\\r\\n            }               \\r\\n        }\\r\\n        \\r\\n        return userNFTs;\\r\\n    }\\r\\n\\r\\n    function getNewGenFlowersOfUserWithBees(address user) public view returns (uint256[] memory) {\\r\\n        uint256 counter;\\r\\n        uint256 balance = flowerFamNewGenNFT.balanceOf(user);\\r\\n        uint256[] memory userNFTs = new uint256[](balance);\\r\\n\\r\\n        uint256 startToken = flowerFamNewGenNFT.startTokenId();\\r\\n\\r\\n        for (uint i = startToken; i < startToken + flowerFamNewGenNFT.totalSupply(); i++) {\\r\\n            if (newGenFlowerToBee[i].beeId != 0 && flowerFamNewGenNFT.realOwnerOf(i) == user) {\\r\\n                userNFTs[counter] = i;\\r\\n                counter++;\\r\\n            }               \\r\\n        }\\r\\n        \\r\\n        return userNFTs;\\r\\n    }\\r\\n\\r\\n    function getTotalNotAccumulatedProductionOfUser(address user, uint256[] memory flowersWithBees) external view returns (uint256) {\\r\\n        return _getTotalNotAccumulatedProductionOfUser(user, flowersWithBees);\\r\\n    }\\r\\n\\r\\n    function getTotalProductionOfUser(address user, uint256[] memory flowersWithBees) external view returns (uint256) {\\r\\n        UserHoneyProduction storage userHoneyProduction = userToProductionInfo[user];\\r\\n\\r\\n        return _getTotalNotAccumulatedProductionOfUser(user, flowersWithBees) + userHoneyProduction.totalAccumulated;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/SimpleAccessUpgradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract SimpleAccessUpgradable is OwnableUpgradeable {\\r\\n    \\r\\n    constructor() {}\\r\\n    \\r\\n    mapping(address => bool) public authorized;\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(\\r\\n            authorized[msg.sender] || msg.sender == owner(),\\r\\n            \\\"Sender is not authorized\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setAuthorized(address _auth, bool _isAuth) external virtual onlyOwner {\\r\\n        authorized[_auth] = _isAuth;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFam.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFlowerFam {\\r\\n    function prodigy() external view returns (uint256);\\r\\n    function seedling() external view returns (uint256);\\r\\n    function ancestor() external view returns (uint256);\\r\\n    function elder() external view returns (uint256);\\r\\n    function pioneer() external view returns (uint256);\\r\\n\\r\\n    function upgradeCooldownTime() external view returns (uint256);\\r\\n    \\r\\n    function getUpgradeCountOfFlower(uint256 tokenId) external view returns (uint16);\\r\\n\\r\\n    function exists(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function isAlreadyStaked(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function mint(address _to, uint256 _tokenId) external;\\r\\n\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) external;\\r\\n\\r\\n    function upgrade(address upgrader, uint256 tokenId) external;\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function startTokenId() external pure returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IBee {\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n    function mint(address sender, uint256 amount) external;\\r\\n    function restorePowerOfBee(address owner, uint256 tokenId, uint256 restorePeriods) external;\\r\\n\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function isAlreadyStaked(uint256 tokenId) external view returns (bool);\\r\\n    function getPowerReductionPeriods(uint256 tokenId) external view returns (uint256);\\r\\n    function getLastAction(uint256 tokenId) external view returns (uint88);\\r\\n    function getPowerCycleStart(uint256 tokenId) external view returns (uint88);\\r\\n\\r\\n    function powerCycleBasePeriod() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFamNewGen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IFlowerFamNewGen {\\r\\n    function mint(\\r\\n        address sender,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n    function isAlreadyStaked(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function startTokenId() external pure returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IHoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IHoney {\\r\\n    function spendEcoSystemBalance(address user, uint128 amount, uint256[] memory flowersWithBees, bytes memory data) external;\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFamRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFlowerFamRandomizer {\\r\\n    function rng(address _address) external view returns (uint256);\\r\\n    function rngDecision(address _address, uint256 probability, uint256 base) external view returns (bool);\\r\\n    function getSpeciesOfId(uint256 id) external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flowerFamNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beeNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flowerFamNewGen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honeyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateTotalProductionPerDay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HoneyToken\",\"outputs\":[{\"internalType\":\"contract IHoney\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"attachBeeToFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"attachBeeToNewGenFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"flowerFamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeFlowerFamFlowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newGenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeNewGenerationFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"flowerFamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstakeFlowerFamFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newGenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstakeNewGenerationFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeNFT\",\"outputs\":[{\"internalType\":\"contract IBee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeProductionBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowerFamNFT\",\"outputs\":[{\"internalType\":\"contract IFlowerFam\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowerFamNewGenNFT\",\"outputs\":[{\"internalType\":\"contract IFlowerFamNewGen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flowerToBee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reductionsStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"beeId\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flowersToBeeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"getAttachedFlowerOfBee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"getAttachedNewGenFlowerOfBee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFlowerFamFlowersOfUserWithBees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNewGenFlowersOfUserWithBees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"getTotalNotAccumulatedProductionOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"getTotalProductionOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flowerFamNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beeNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flowerFamNewGen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honeyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"flowerFamIds\",\"type\":\"uint256[]\"}],\"name\":\"mintAndBatchStakeFlowerFamFlowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeFlowerFamFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newGenFlowerToBee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reductionsStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"beeId\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGenHoneyProduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"releaseBeeFromFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"}],\"name\":\"releaseBeeFromNewGenFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flowerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFam\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restorePeriods\",\"type\":\"uint256\"}],\"name\":\"restorePowerOfBee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuth\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speciesToHoneyProduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"}],\"name\":\"stakeFlowerFamFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGenId\",\"type\":\"uint256\"}],\"name\":\"stakeNewGenerationFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"}],\"name\":\"unstakeFlowerFamFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGenId\",\"type\":\"uint256\"}],\"name\":\"unstakeNewGenerationFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flowerFamId\",\"type\":\"uint256\"}],\"name\":\"upgradeFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeProductionBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToProductionInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastAction\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"totalProductionPerDay\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"totalAccumulated\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlowerFamEcoSystem", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000014ce6900b9ed6023ea47e16cc1656affdb0a40c70000000000000000000000003bdcd7e67a49161e028664226d9cde9a16a65f9f0000000000000000000000009b6f38b1d2d758719661a1b1d6e347d4f789c4290000000000000000000000000e239db593619bcf6248fdef4723f26cf40e1f37000000000000000000000000fc300554a54da5b3891c129288708cf2329698eb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}