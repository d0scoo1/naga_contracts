{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    function vat()        public view returns (address) {}\r\n    function cat()        public view returns (address) {}\r\n    function pot()        public view returns (address) {}\r\n    function vow()        public view returns (address) {}\r\n    function end()        public view returns (address) {}\r\n    function reg()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function flipperMom() public view returns (address) {}\r\n    function flip(bytes32) public view returns (address) {}\r\n    function osmMom() public view returns (address) {}\r\n    function getChangelogAddress(bytes32) public view returns (address) {}\r\n    function setChangelogAddress(bytes32, address) public {}\r\n    function setChangelogVersion(string memory) public {}\r\n    function authorize(address, address) public {}\r\n    function deauthorize(address, address) public {}\r\n    function canCast(uint40, bool) public pure returns (bool) {}\r\n    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\r\n    function setContract(address, bytes32, address) public {}\r\n    function setContract(address, bytes32, bytes32, address) public {}\r\n    function setIlkStabilityFee(bytes32, uint256, bool) public {}\r\n    function setIlkLiquidationRatio(bytes32, uint256) public {}\r\n    function setIlkDebtCeiling(bytes32, uint256) public {}\r\n    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\r\n    function removeIlkFromAutoLine(bytes32) public {}\r\n    function addWritersToMedianWhitelist(address, address[] memory) public {}\r\n    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\r\n    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\r\n    function addReaderToOSMWhitelist(address, address) public {}\r\n    function addReaderToMedianWhitelist(address, address) public {}\r\n    function removeReaderFromMedianWhitelist(address, address) public {}\r\n    function sendPaymentFromSurplusBuffer(address, uint256) public {}\r\n    function allowOSMFreeze(address, bytes32) public {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-auto-line/blob/master/src/DssAutoLine.sol\r\ninterface DssAutoLineAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/LPOsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/univ2-lp-oracle\r\ninterface LPOsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function dec0() external view returns (uint8);\r\n    function dec1() external view returns (uint8);\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n    function wat() external view returns (bytes32);\r\n    function hop() external view returns (uint32);\r\n    function src() external view returns (address);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function change(address) external;\r\n    function step(uint256) external;\r\n    function stop() external;\r\n    function start() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function link(uint256, address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"dss-interfaces/dss/VatAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/DssAutoLineAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/LPOsmAbstract.sol\"; */\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/098eabb0973a264de343457ad42e29084577c338/governance/votes/Executive%20vote%20-%20May%2014%2C%202021.md -q -O - 2> /dev/null)\"\r\n    string public constant description =\r\n        \"2021-05-14 MakerDAO Executive Spell | Hash: 0xd33a03015df3af9e045e54f62f3a78a5843514b01a0f282698afda166fdde202\";\r\n\r\n    address constant PIP_UNIV2DAIETH  = 0xFc8137E1a45BAF0030563EC4F0F851bd36a85b7D;\r\n    address constant PIP_UNIV2WBTCETH = 0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07;\r\n    address constant PIP_UNIV2USDCETH = 0xf751f24DD9cfAd885984D1bA68860F558D21E52A;\r\n    address constant PIP_UNIV2DAIUSDC = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;\r\n    address constant PIP_UNIV2ETHUSDT = 0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016;\r\n    address constant PIP_UNIV2LINKETH = 0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F;\r\n    address constant PIP_UNIV2UNIETH  = 0x8462A88f50122782Cc96108F476deDB12248f931;\r\n    address constant PIP_UNIV2WBTCDAI = 0x5bB72127a196392cf4aC00Cf57aB278394d24e55;\r\n    address constant PIP_UNIV2AAVEETH = 0x32d8416e8538Ac36272c44b0cd962cD7E0198489;\r\n    address constant PIP_UNIV2DAIUSDT = 0x9A1CD705dc7ac64B50777BcEcA3529E58B1292F1;\r\n\r\n    uint256 constant ONE_PCT   = 1000000000315522921573372069;\r\n    uint256 constant THREE_PCT = 1000000000937303470807876289;\r\n    uint256 constant FIVE_PCT  = 1000000001547125957863212448;\r\n\r\n    uint256 constant MILLION = 10 ** 6;\r\n    uint256 constant RAD     = 10 ** 45;\r\n\r\n    function replaceOracle(\r\n        bytes32 ilk,\r\n        bytes32 pipKey,\r\n        address newOracle,\r\n        address spotter,\r\n        address end,\r\n        address mom,\r\n        bool orb0Med,\r\n        bool orb1Med\r\n    ) internal {\r\n        address oldOracle = DssExecLib.getChangelogAddress(pipKey);\r\n        address orb0 = LPOsmAbstract(newOracle).orb0();\r\n        address orb1 = LPOsmAbstract(newOracle).orb1();\r\n        require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), \"DssSpell/not-matching-wat\");\r\n        require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), \"DssSpell/not-matching-src\");\r\n        require(orb0 == LPOsmAbstract(oldOracle).orb0(), \"DssSpell/not-matching-orb0\");\r\n        require(orb1 == LPOsmAbstract(oldOracle).orb1(), \"DssSpell/not-matching-orb1\");\r\n        DssExecLib.setContract(spotter, ilk, \"pip\", newOracle);\r\n        DssExecLib.authorize(newOracle, mom);\r\n        DssExecLib.addReaderToOSMWhitelist(newOracle, spotter);\r\n        DssExecLib.addReaderToOSMWhitelist(newOracle, end);\r\n        if (orb0Med) {\r\n            DssExecLib.addReaderToMedianWhitelist(orb0, newOracle);\r\n            DssExecLib.removeReaderFromMedianWhitelist(orb0, oldOracle);\r\n        }\r\n        if (orb1Med) {\r\n            DssExecLib.addReaderToMedianWhitelist(orb1, newOracle);\r\n            DssExecLib.removeReaderFromMedianWhitelist(orb1, oldOracle);\r\n        }\r\n        DssExecLib.allowOSMFreeze(newOracle, ilk);\r\n        DssExecLib.setChangelogAddress(pipKey, newOracle);\r\n    }\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function actions() public override {\r\n        address MCD_VAT  = DssExecLib.vat();\r\n        address MCD_SPOT = DssExecLib.spotter();\r\n        address MCD_END  = DssExecLib.end();\r\n        address OSM_MOM  = DssExecLib.osmMom();\r\n\r\n        // ----------------------------- Stability Fee updates ----------------------------\r\n        DssExecLib.setIlkStabilityFee(\"KNC-A\", FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"TUSD-A\", ONE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"PAXUSD-A\", ONE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ETH-C\", THREE_PCT, true);\r\n\r\n        // ------------------------------ Debt ceiling updates -----------------------------\r\n        (,,,uint256 kncLine,) = VatAbstract(MCD_VAT).ilks(\"KNC-A\");\r\n        DssExecLib.removeIlkFromAutoLine(\"KNC-A\");\r\n        DssExecLib.setIlkDebtCeiling(\"KNC-A\", 0); // -kncLine\r\n        DssExecLib.setIlkDebtCeiling(\"PAXUSD-A\", 0); // -100M\r\n        DssExecLib.setIlkDebtCeiling(\"USDC-B\", 0); // -30M\r\n        uint256 Line = VatAbstract(MCD_VAT).Line();\r\n        VatAbstract(MCD_VAT).file(\"Line\", sub(Line, add(130 * MILLION * RAD, kncLine)));\r\n\r\n        // --------------------------------- UNIV2DAIETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2DAIETH-A\",\r\n            \"PIP_UNIV2DAIETH\",\r\n            PIP_UNIV2DAIETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            false,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2WBTCETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2WBTCETH-A\",\r\n            \"PIP_UNIV2WBTCETH\",\r\n            PIP_UNIV2WBTCETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2USDCETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2USDCETH-A\",\r\n            \"PIP_UNIV2USDCETH\",\r\n            PIP_UNIV2USDCETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            false,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2DAIUSDC-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2DAIUSDC-A\",\r\n            \"PIP_UNIV2DAIUSDC\",\r\n            PIP_UNIV2DAIUSDC,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            false,\r\n            false\r\n        );\r\n\r\n        // --------------------------------- UNIV2ETHUSDT-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2ETHUSDT-A\",\r\n            \"PIP_UNIV2ETHUSDT\",\r\n            PIP_UNIV2ETHUSDT,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2LINKETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2LINKETH-A\",\r\n            \"PIP_UNIV2LINKETH\",\r\n            PIP_UNIV2LINKETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2UNIETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2UNIETH-A\",\r\n            \"PIP_UNIV2UNIETH\",\r\n            PIP_UNIV2UNIETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2WBTCDAI-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2WBTCDAI-A\",\r\n            \"PIP_UNIV2WBTCDAI\",\r\n            PIP_UNIV2WBTCDAI,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            false\r\n        );\r\n\r\n        // --------------------------------- UNIV2AAVEETH-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2AAVEETH-A\",\r\n            \"PIP_UNIV2AAVEETH\",\r\n            PIP_UNIV2AAVEETH,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            true,\r\n            true\r\n        );\r\n\r\n        // --------------------------------- UNIV2DAIUSDT-A ---------------------------------\r\n        replaceOracle(\r\n            \"UNIV2DAIUSDT-A\",\r\n            \"PIP_UNIV2DAIUSDT\",\r\n            PIP_UNIV2DAIUSDT,\r\n            MCD_SPOT,\r\n            MCD_END,\r\n            OSM_MOM,\r\n            false,\r\n            true\r\n        );\r\n\r\n        // ---------------------------- Update Chainlog version ----------------------------\r\n        DssExecLib.setChangelogVersion(\"1.7.0\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:c061edfc9c38912e0ad4f3922aa84ee11fb03347", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0055978cf72e773bc4ae8ab15f0bf0379833be4a5513540da4757f807fb39461"}]}