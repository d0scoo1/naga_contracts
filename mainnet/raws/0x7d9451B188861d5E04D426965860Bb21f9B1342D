{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs \\u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) \\u003e\\u003e 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"NFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d  \u255a\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557   \u255a\u2588\u2588\u2554\u255d      \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2557   \u2588\u2588\u2551       \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d        \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\npragma solidity 0.8.13;\\n\\n// Imports\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title The staking smart contract.\\n */\\ncontract NFTStaking is Ownable, ReentrancyGuard {\\n  /// @notice The staker details.\\n  struct Staker {\\n    uint256 claimedRewards;\\n    uint256 lastCheckpoint;\\n    uint256[] stakedToken1;\\n    uint256[] stakedToken2;\\n    uint256[] stakedBoosters;\\n  }\\n  // @notice The available contract types.\\n  enum ContractTypes {\\n    Token1,\\n    Token2,\\n    Booster\\n  }\\n  /// @notice The number of seconds in a day.\\n  uint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\\n  /// @notice The flag that indicates if staking is launched.\\n  bool public stakingLaunched;\\n  /// @notice The flag that indicates if deposit is paused.\\n  bool public depositPaused;\\n  /// @notice The addresses of the token contracts.\\n  address[3] public tokenAddresses;\\n  /// @notice The flag indicates if the categories have been seeded.\\n  bool[3] public tokenTypeSeeded;\\n  /// @notice The index of the first NFT smart contract.\\n  uint256 private constant TOKEN1 = 0;\\n  /// @notice The index of the second NFT smart contract.\\n  uint256 private constant TOKEN2 = 1;\\n  /// @notice The index of the booster NFT smart contract.\\n  uint256 private constant BOOSTER = 2;\\n  /// @notice The number of types of tokens available.\\n  uint256 constant private NUMBER_OF_TOKEN_TYPES = 3;\\n  /// @notice The max number of token categories.\\n  uint256 constant private MAX_NUMBER_OF_CATEGORIES_PER_TOKEN_TYPE = 5;\\n  /// @notice The numbers of categories of each token type.\\n  uint256[NUMBER_OF_TOKEN_TYPES] public numberOfCategoryPerType = [5, 5, 3];\\n  /// @notice The yields for categories per token types.\\n  uint256[MAX_NUMBER_OF_CATEGORIES_PER_TOKEN_TYPE][NUMBER_OF_TOKEN_TYPES] public yieldsPerCategoryPerTokenType;\\n  /// @notice The categories of the first NFT smart contract tokens.\\n  bytes private _token1Categories;\\n  /// @notice The categories of the second NFT smart contract tokens.\\n  bytes private _token2Categories;\\n  /// @notice The categories of the booster NFT smart contract tokens.\\n  bytes private _boosterCategories;\\n  /// @notice The mapping of stakers.\\n  mapping(address =\\u003e Staker) public stakers;\\n  /// @notice The mapping of token owners.\\n  mapping(uint256 =\\u003e mapping(uint256 =\\u003e address)) private _ownerOfToken;\\n  /// @notice The stake event.\\n  event Deposit(address indexed staker, address nftContract, uint256 tokensAmount);\\n  /// @notice The unstake event.\\n  event Withdraw(address indexed staker, address nftContract, uint256 tokensAmount);\\n  /// @notice The event fires during emergency funds withdrawal process.\\n  event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\\n\\n  /**\\n   * @notice The smart contract constructor that initializes the contract.\\n   * @param _token1 The address of the first NFT smart contract.\\n   */\\n  constructor(\\n  // declare a base NFT contract for staking\\n    address _token1\\n  ) {\\n    // Set the variables.\\n    tokenAddresses[TOKEN1] = _token1;\\n    yieldsPerCategoryPerTokenType[0][0] = 100 ether;\\n    yieldsPerCategoryPerTokenType[0][1] = 120 ether;\\n    yieldsPerCategoryPerTokenType[0][2] = 140 ether;\\n    yieldsPerCategoryPerTokenType[0][3] = 150 ether;\\n    yieldsPerCategoryPerTokenType[0][4] = 200 ether;\\n  }\\n\\n  /*\\n   * @notice Sets the addresses of the NFT collections.\\n   * @param token1 The address of the first collection.\\n   * @param token2 The address of the second collection.\\n   * @param booster The address of the booster collection.\\n   */\\n  function setTokenAddresses(address token1, address token2, address booster) external onlyOwner {\\n    tokenAddresses[TOKEN1] = token1;\\n    tokenAddresses[TOKEN2] = token2;\\n    tokenAddresses[BOOSTER] = booster;\\n  }\\n\\n  /*\\n   * @notice Sets the categories of a specific collection.\\n   * @param contractType The type of the collection.\\n   * @param categoryInBytes The categories as an array of bytes.\\n   */\\n  function setCategoriesBatch(ContractTypes contractType, bytes calldata categoryInBytes) external onlyOwner {\\n    tokenTypeSeeded[uint(contractType)] = true;\\n    if (contractType == ContractTypes.Token1) {\\n      _token1Categories = categoryInBytes;\\n    } else if (contractType == ContractTypes.Token2) {\\n      _token2Categories = categoryInBytes;\\n    } else if (contractType == ContractTypes.Booster) {\\n      _boosterCategories = categoryInBytes;\\n    }\\n  }\\n\\n  /*\\n   * @notice Sets the yields of a specific collection category.\\n   * @param contractType The type of the collection.\\n   * @param category The category.\\n   * @param yield The yield value.\\n   */\\n  function setCategoryYield(\\n    ContractTypes contractType,\\n    uint8 category,\\n    uint256 yield\\n  ) external onlyOwner {\\n    require(category \\u003c= numberOfCategoryPerType[uint(contractType)], \\\"Invalid category number\\\");\\n    yieldsPerCategoryPerTokenType[uint(contractType)][category] = yield;\\n  }\\n\\n  /*\\n   * @notice Sets the yields of collection categories.\\n   * @param contractType The type of the collection.\\n   * @param category The category.\\n   * @param yields The yield values.\\n   */\\n  function setCategoryYieldsBatch(ContractTypes contractType, uint256[] memory yields) external onlyOwner {\\n    require(yields.length == numberOfCategoryPerType[uint(contractType)], \\\"Length not match\\\");\\n    for (uint256 i; i \\u003c yields.length; i++) {\\n      yieldsPerCategoryPerTokenType[uint(contractType)][i] = yields[i];\\n    }\\n  }\\n  \\n  /*\\n   * @notice Returns the categories of the tokens.\\n   * @param contractType The type of the collection.\\n   * @param tokenIds The IDs of the tokens to get categories of.\\n   * @return The categories of the provided tokens.\\n   */\\n  function getCategoriesOfTokens(ContractTypes contractType, uint256[] memory tokenIds) external view returns (uint8[] memory) {\\n    uint8[] memory categories = new uint8[](tokenIds.length);\\n    for (uint256 i; i \\u003c tokenIds.length; i++) {\\n      categories[i] = getCategoryOfToken(contractType, tokenIds[i]);\\n    }\\n    return categories;\\n  }\\n\\n  /*\\n   * @notice Stakes the NFTs.\\n   * @param contractType The type of the collection.\\n   * @param tokenIds The IDs of the tokens to stake.\\n   */\\n  function deposit(ContractTypes contractType, uint256[] memory tokenIds) external nonReentrant {\\n    require(uint(contractType) \\u003c tokenAddresses.length, \\\"Not a valid contract\\\");\\n    require(!depositPaused, \\\"Deposit paused\\\");\\n    require(stakingLaunched, \\\"Staking is disabled\\\");\\n    require(tokenIds.length \\u003e 0, \\\"No token Ids specified\\\");\\n    address tokenAddress = tokenAddresses[uint(contractType)];\\n\\n    _claimRewards(_msgSender());\\n\\n    Staker storage user = stakers[_msgSender()];\\n\\n    if (contractType == ContractTypes.Booster) {\\n      // If a user tries to stake a Booster but does not have any Collection1 NFTs staked, the stake is prohibited\\n      require(user.stakedBoosters.length + tokenIds.length \\u003c= user.stakedToken1.length * 2, \\\"Maximum num of boosters reached\\\");\\n    }\\n\\n    for (uint256 i; i \\u003c tokenIds.length; i++) {\\n      require(IERC721(tokenAddress).ownerOf(tokenIds[i]) == _msgSender(), \\\"Not the owner\\\");\\n      IERC721(tokenAddress).safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\\n      _ownerOfToken[uint(contractType)][tokenIds[i]] = _msgSender();\\n\\n      if (contractType == ContractTypes.Token1) {\\n        user.stakedToken1.push(tokenIds[i]);\\n      } else if (contractType == ContractTypes.Token2) {\\n        user.stakedToken2.push(tokenIds[i]);\\n      } else if (contractType == ContractTypes.Booster) {\\n        user.stakedBoosters.push(tokenIds[i]);\\n      }\\n    }\\n    emit Deposit(_msgSender(), tokenAddress, tokenIds.length);\\n  }\\n\\n  /*\\n   * @notice Unstakes the NFTs.\\n   * @param contractType The type of the collection.\\n   * @param tokenIds The IDs of the tokens to unstake.\\n   */\\n  function withdraw(ContractTypes contractType, uint256[] memory tokenIds) external nonReentrant {\\n    require(uint(contractType) \\u003c tokenAddresses.length, \\\"Not a valid contract\\\");\\n    require(tokenIds.length \\u003e 0, \\\"No token Ids specified\\\");\\n    address tokenAddress = tokenAddresses[uint(contractType)];\\n\\n    _claimRewards(_msgSender());\\n\\n    Staker storage user = stakers[_msgSender()];\\n\\n    for (uint256 i; i \\u003c tokenIds.length; i++) {\\n      uint256 tokenId = tokenIds[i];\\n      require(IERC721(tokenAddress).ownerOf(tokenId) == address(this), \\\"Invalid tokenIds provided\\\");\\n      require(_ownerOfToken[uint(contractType)][tokenId] == _msgSender(), \\\"Not token owner\\\");\\n      _ownerOfToken[uint(contractType)][tokenId] = address(0);\\n\\n      if (contractType == ContractTypes.Token1) {\\n        user.stakedToken1 = _moveTokenToLast(user.stakedToken1, tokenId);\\n        user.stakedToken1.pop();\\n      } else if (contractType == ContractTypes.Token2) {\\n        user.stakedToken2 = _moveTokenToLast(user.stakedToken2, tokenId);\\n        user.stakedToken2.pop();\\n      } else if (contractType == ContractTypes.Booster) {\\n        user.stakedBoosters = _moveTokenToLast(user.stakedBoosters, tokenId);\\n        user.stakedBoosters.pop();\\n      }\\n\\n      IERC721(tokenAddress).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    emit Withdraw(_msgSender(), tokenAddress, tokenIds.length);\\n  }\\n\\n  /*\\n   * @notice Calculates the total reward of a staker.\\n   * @param staker The address of the staker.\\n   * @return The total reward of the staker.\\n   */\\n  function getTotalRewards(address staker) external view returns (uint256) {\\n    return stakers[staker].claimedRewards + getUnclaimedRewards(staker);\\n  }\\n\\n  /*\\n   * @notice Gets yields of tokens of a specific collection.\\n   * @param contractType The type of the collection.\\n   * @param tokenIds The IDs of the tokens to get the yields of.\\n   * @return The yields of the tokens provided.\\n   */\\n  function getYieldsForTokens(ContractTypes contractType, uint256[] memory tokenIds) external view returns (uint256[] memory) {\\n    uint256[] memory yields = new uint256[](tokenIds.length);\\n    for (uint256 i; i \\u003c tokenIds.length; i++) {\\n      yields[i] = getTokenYield(contractType, tokenIds[i]);\\n    }\\n    return yields;\\n  }\\n\\n  /*\\n   * @notice Gets called whenever an IERC721 tokenId token is transferred to this contract via IERC721.safeTransferFrom.\\n   */\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata\\n  ) external pure returns (bytes4) {\\n    return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n  }\\n\\n  /**\\n   * @notice Pauses the deposit process.\\n   * @param _pause The deposit state value.\\n   */\\n  function pauseDeposit(bool _pause) public onlyOwner {\\n    depositPaused = _pause;\\n  }\\n\\n  /**\\n   * @notice Launches staking.\\n   */\\n  function launchStaking() public onlyOwner {\\n    require(!stakingLaunched, \\\"Staking was enabled\\\");\\n    stakingLaunched = true;\\n  }\\n\\n  /**\\n   * @notice Allows the owner to withdraw ERC721 in case of an emergency.\\n   * @param contractType The type of the collection.\\n   * @param tokenIds The IDs of the tokens to withdraw.\\n   */\\n  function emergencyWithdraw(ContractTypes contractType, uint256[] memory tokenIds) public onlyOwner {\\n    require(tokenIds.length \\u003c= 50, \\\"50 is max per tx\\\");\\n    require(uint(contractType) \\u003c tokenAddresses.length, \\\"Not a valid contract\\\");\\n    address tokenAddress = tokenAddresses[uint(contractType)];\\n    pauseDeposit(true);\\n    for (uint256 i; i \\u003c tokenIds.length; i++) {\\n      address receiver = _ownerOfToken[uint(contractType)][tokenIds[i]];\\n      if (receiver != address(0) \\u0026\\u0026 IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\\n        IERC721(tokenAddress).transferFrom(address(this), receiver, tokenIds[i]);\\n        emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\\n      }\\n    }\\n  }\\n\\n  /*\\n   * @notice Gets a category of a token of a specific collection.\\n   * @param contractType The type of the collection.\\n   * @param tokenId The ID of the token to get the category of.\\n   * @return The category of the token provided.\\n   */\\n  function getCategoryOfToken(ContractTypes contractType, uint256 tokenId) public view returns (uint8) {\\n    if (tokenTypeSeeded[uint(contractType)] == false) {\\n      return 0;\\n    }\\n    if (contractType == ContractTypes.Token1) {\\n      return uint8(_token1Categories[tokenId]);\\n    } else if (contractType == ContractTypes.Token2) {\\n      return uint8(_token2Categories[tokenId]);\\n    } else if (contractType == ContractTypes.Booster) {\\n      return uint8(_boosterCategories[tokenId]);\\n    }\\n    return 0;\\n  }\\n\\n  /*\\n   * @notice Gets a yield of a token of a specific collection.\\n   * @param contractType The type of the collection.\\n   * @param tokenId The ID of the token to get the yield of.\\n   * @return The yield of the token provided.\\n   */\\n  function getTokenYield(ContractTypes contractType, uint256 tokenId) public view returns (uint256) {\\n    uint8 category = getCategoryOfToken(contractType, tokenId);\\n    return yieldsPerCategoryPerTokenType[uint(contractType)][category];\\n  }\\n\\n  /*\\n   * @notice Calculates the yields produced by staked boosters.\\n   * @param userAddress The address of a user to calculate the booster yield for.\\n   * @return The booster yield produced for the users.\\n   */\\n  function calculateBoostersYield(address userAddress) public view returns (uint256) {\\n    uint256 numberToken1Staked = stakers[userAddress].stakedToken1.length;\\n    uint256[] memory boosters = stakers[userAddress].stakedBoosters;\\n\\n    // Maximum of 2 boosters can be applied to each token\\n    uint256 maximumApplicableBoosters = numberToken1Staked * 2;\\n    uint256 applicableBoosters = boosters.length \\u003c maximumApplicableBoosters ? boosters.length : maximumApplicableBoosters;\\n\\n    uint256 totalBoosterYield;\\n    for (uint256 i; i \\u003c applicableBoosters; i++) {\\n      uint256 tokenId = boosters[i];\\n      totalBoosterYield += getTokenYield(ContractTypes.Booster, tokenId);\\n    }\\n\\n    return totalBoosterYield;\\n  }\\n\\n  /*\\n   * @notice Calculates the yields produced by staked boosters.\\n   * @param userAddress The address of a user to calculate the booster yield for.\\n   * @return The booster yield produced for the users.\\n   */\\n  function getCurrentYield(address userAddress) public view returns (uint256) {\\n    uint256 numberToken1Staked = stakers[userAddress].stakedToken1.length;\\n    uint256 numberToken2Staked = stakers[userAddress].stakedToken2.length;\\n    uint currentYield = 0;\\n    for (uint256 i; i \\u003c numberToken1Staked; i++) {\\n      currentYield += getTokenYield(ContractTypes.Token1, stakers[userAddress].stakedToken1[i]);\\n    }\\n    for (uint256 i; i \\u003c numberToken2Staked; i++) {\\n      currentYield += getTokenYield(ContractTypes.Token2, stakers[userAddress].stakedToken2[i]);\\n    }\\n    currentYield += calculateBoostersYield(userAddress);\\n    return currentYield;\\n  }\\n\\n  /*\\n   * @notice Calculates unclaimed reward of a staker.\\n   * @param staker The address of the staker.\\n   * @return The unclaimed reward of the staker.\\n   */\\n  function getUnclaimedRewards(address staker) public view returns (uint256) {\\n    if (stakers[staker].lastCheckpoint == 0) {\\n      return 0;\\n    }\\n    return ((block.timestamp - stakers[staker].lastCheckpoint) * getCurrentYield(staker)) / SECONDS_IN_DAY;\\n  }\\n\\n  /*\\n   * @notice Gets tokens of a staker.\\n   * @param contractType The type of the collection.\\n   * @param staker The address of the staker.\\n   * @return The tokens of the staker.\\n   */\\n  function getStakerTokens(ContractTypes contractType, address staker) public view returns (uint256[] memory) {\\n    uint256[] memory tokens;\\n    if (contractType == ContractTypes.Token1) {\\n      tokens = stakers[staker].stakedToken1;\\n    } else if (contractType == ContractTypes.Token2) {\\n      tokens = stakers[staker].stakedToken2;\\n    } else if (contractType == ContractTypes.Booster) {\\n      tokens = stakers[staker].stakedBoosters;\\n    }\\n    return tokens;\\n  }\\n\\n  /**\\n   * @notice Returns the address of a token owner.\\n   * @param contractType The type of the collection.\\n   * @param tokenId The token ID to get the owner of.\\n   * @return The owner address.\\n   */\\n  function ownerOf(ContractTypes contractType, uint256 tokenId) public view returns (address) {\\n    return _ownerOfToken[uint(contractType)][tokenId];\\n  }\\n\\n  /*\\n   * @notice Moves a token to the last position in an array.\\n   * @param list The array of token IDs.\\n   * @param tokenId The ID of the token to move.\\n   * @return The updated array.\\n   */\\n  function _moveTokenToLast(uint256[] memory list, uint256 tokenId) internal pure returns (uint256[] memory) {\\n    uint256 tokenIndex = 0;\\n    uint256 lastTokenIndex = list.length - 1;\\n    uint256 length = list.length;\\n\\n    for (uint256 i = 0; i \\u003c length; i++) {\\n      if (list[i] == tokenId) {\\n        tokenIndex = i + 1;\\n        break;\\n      }\\n    }\\n    require(tokenIndex != 0, \\\"msg.sender is not the owner\\\");\\n\\n    tokenIndex -= 1;\\n\\n    if (tokenIndex != lastTokenIndex) {\\n      list[tokenIndex] = list[lastTokenIndex];\\n      list[lastTokenIndex] = tokenId;\\n    }\\n\\n    return list;\\n  }\\n\\n  /*\\n   * @notice Transfers the reward to a staker.\\n   * @param staker The address of the staker.\\n   */\\n  function _claimRewards(address staker) internal {\\n    stakers[staker].claimedRewards += getUnclaimedRewards(staker);\\n    stakers[staker].lastCheckpoint = block.timestamp;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateBoostersYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getCategoriesOfTokens\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCategoryOfToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getCurrentYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getYieldsForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfCategoryPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"categoryInBytes\",\"type\":\"bytes\"}],\"name\":\"setCategoriesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"setCategoryYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"yields\",\"type\":\"uint256[]\"}],\"name\":\"setCategoryYieldsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCheckpoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTypeSeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTStaking.ContractTypes\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yieldsPerCategoryPerTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e283dddc1d93e40e3748de182ff0219cd154372e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6532c19d71ac81390ca909c4bf231ca95b64b59c4e648da7f11187c6c7403b0a"}]}