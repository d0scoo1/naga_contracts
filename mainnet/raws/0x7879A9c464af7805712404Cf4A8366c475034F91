{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlchemixHarvester.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./AlchemixGelatoKeeper.sol\\\";\\nimport \\\"./interfaces/IAlchemistV2.sol\\\";\\nimport \\\"./interfaces/IHarvestResolver.sol\\\";\\nimport \\\"./interfaces/IAlchemixHarvester.sol\\\";\\n\\ncontract AlchemixHarvester is IAlchemixHarvester, AlchemixGelatoKeeper {\\n  /// @notice The address of the resolver.\\n  address public resolver;\\n\\n  constructor(\\n    address _gelatoPoker,\\n    uint256 _maxGasPrice,\\n    address _resolver\\n  ) AlchemixGelatoKeeper(_gelatoPoker, _maxGasPrice) {\\n    resolver = _resolver;\\n  }\\n\\n  function setResolver(address _resolver) external onlyOwner {\\n    resolver = _resolver;\\n  }\\n\\n  /// @notice Runs a the specified harvest job.\\n  ///\\n  /// @param alchemist        The address of the target alchemist.\\n  /// @param yieldToken       The address of the target yield token.\\n  /// @param minimumAmountOut The minimum amount of tokens expected to be harvested.\\n  function harvest(\\n    address alchemist,\\n    address yieldToken,\\n    uint256 minimumAmountOut\\n  ) external override {\\n    if (msg.sender != gelatoPoker) {\\n      revert Unauthorized();\\n    }\\n    if (tx.gasprice > maxGasPrice) {\\n      revert TheGasIsTooDamnHigh();\\n    }\\n    IAlchemistV2(alchemist).harvest(yieldToken, minimumAmountOut);\\n    IHarvestResolver(resolver).recordHarvest(yieldToken);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AlchemixGelatoKeeper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlchemixGelatoKeeper is Ownable {\\n  /// @notice Thrown when the gas price set on the tx is greater than the `maxGasPrice`.\\n  error TheGasIsTooDamnHigh();\\n  /// @notice Thrown when any address but the `gelatoPoker` attempts to call the upkeep function.\\n  error Unauthorized();\\n\\n  /// @notice Emitted when the `gelatoPoker` address is updated.\\n  ///\\n  /// @param newPoker The new address of the `gelatoPoker`.\\n  event SetPoker(address newPoker);\\n\\n  /// @notice Emitted when the `maxGasPrice` is updated.\\n  ///\\n  /// @param newMaxGasPrice The new maximum gas price.\\n  event SetMaxGasPrice(uint256 newMaxGasPrice);\\n\\n  /// @notice The address of the whitelisted gelato contract.\\n  address public gelatoPoker;\\n  /// @notice The maximum gas price to be spent on any call from the gelato poker.\\n  uint256 public maxGasPrice;\\n\\n  constructor(address _gelatoPoker, uint256 _maxGasPrice) Ownable() {\\n    gelatoPoker = _gelatoPoker;\\n    maxGasPrice = _maxGasPrice;\\n  }\\n\\n  /// @notice Sets the address of the whitelisted gelato poker contract.\\n  ///\\n  /// @param newPoker The new address of the gelato poker.\\n  function setPoker(address newPoker) external onlyOwner {\\n    gelatoPoker = newPoker;\\n    emit SetPoker(gelatoPoker);\\n  }\\n\\n  /// @notice Sets the maximum gas price that can be used for an upkeep call.\\n  ///\\n  /// @param newGasPrice The new maximum gas price.\\n  function setMaxGasPrice(uint256 newGasPrice) external onlyOwner {\\n    maxGasPrice = newGasPrice;\\n    emit SetMaxGasPrice(maxGasPrice);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlchemistV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\ninterface IAlchemistV2 {\\n    struct YieldTokenParams {\\n        uint8 decimals;\\n        address underlyingToken;\\n        address adapter;\\n        uint256 maximumLoss;\\n        uint256 maximumExpectedValue;\\n        uint256 creditUnlockRate;\\n        uint256 activeBalance;\\n        uint256 harvestableBalance;\\n        uint256 totalShares;\\n        uint256 expectedValue;\\n        uint256 pendingCredit;\\n        uint256 distributedCredit;\\n        uint256 lastDistributionBlock;\\n        uint256 accruedWeight;\\n        bool enabled;\\n    }\\n\\n    struct YieldTokenConfig {\\n        address adapter;\\n        uint256 maximumLoss;\\n        uint256 maximumExpectedValue;\\n        uint256 creditUnlockRate;\\n    }\\n\\n    function harvest(address yieldToken, uint256 minimumAmountOut) external;\\n\\n    function getYieldTokenParameters(address yieldToken)\\n        external\\n        view\\n        returns (YieldTokenParams memory params);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvestResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\ninterface IHarvestResolver {\\n    function recordHarvest(address yieldToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlchemixHarvester.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\ninterface IAlchemixHarvester {\\n  function harvest(\\n    address alchemist,\\n    address yieldToken,\\n    uint256 minimumAmountOut\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoPoker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TheGasIsTooDamnHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"SetMaxGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoker\",\"type\":\"address\"}],\"name\":\"SetPoker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gelatoPoker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoker\",\"type\":\"address\"}],\"name\":\"setPoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlchemixHarvester", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000b3f5503f93d5ef84b06993a1975b9d21b962892f0000000000000000000000000000000000000000000000000000001d1a94a2000000000000000000000000009825f776908ff9815e284351d1fe94fe75f15b49", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}