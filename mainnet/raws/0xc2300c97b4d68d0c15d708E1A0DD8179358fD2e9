{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.14;\r\n\r\ninterface Weth {\r\n    function withdraw(uint256 _wad) external;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _wad\r\n    ) external;\r\n}\r\n\r\ninterface ovmL1Bridge {\r\n    function depositETHTo(\r\n        address _to,\r\n        uint32 _l2Gas,\r\n        bytes calldata _data\r\n    ) external payable;\r\n}\r\n\r\ninterface PolygonL1Bridge {\r\n    function depositEtherFor(address _to) external payable;\r\n}\r\n\r\n/**\r\n * @notice Contract deployed on Ethereum helps relay bots atomically unwrap and bridge WETH over the canonical chain\r\n * bridges for Optimism, Boba and Polygon. Needed as these chains only support bridging of ETH, not WETH.\r\n */\r\n\r\ncontract AtomicDepositor {\r\n    Weth weth = Weth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    ovmL1Bridge optimismL1Bridge = ovmL1Bridge(0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1);\r\n    ovmL1Bridge bobaL1Bridge = ovmL1Bridge(0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00);\r\n    PolygonL1Bridge polygonL1Bridge = PolygonL1Bridge(0xd9145CCE52D386f254917e481eB44e9943F39138);\r\n\r\n    function bridgeWethToOvm(\r\n        address to,\r\n        uint256 amount,\r\n        uint32 l2Gas,\r\n        uint256 chainId\r\n    ) public {\r\n        require(chainId == 10 || chainId == 288, \"Can only bridge to Optimism Or boba\");\r\n        weth.transferFrom(msg.sender, address(this), amount);\r\n        weth.withdraw(amount);\r\n        (chainId == 10 ? optimismL1Bridge : bobaL1Bridge).depositETHTo{ value: amount }(to, l2Gas, \"\");\r\n    }\r\n\r\n    function bridgeWethToPolygon(address to, uint256 amount) public {\r\n        weth.transferFrom(msg.sender, address(this), amount);\r\n        weth.withdraw(amount);\r\n        polygonL1Bridge.depositEtherFor{ value: amount }(to);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"bridgeWethToOvm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeWethToPolygon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AtomicDepositor", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec0b31bb3eec0305874980317d09348d9f7ae58eb9cb41ecb6e9e437ab850806"}]}