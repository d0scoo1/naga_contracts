{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/TUSDCurveCallee.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// src/TUSDCurveCallee.sol\r\n// Copyright (C) 2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published\r\n// by the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface GemJoinLike_4 {\r\n    function gem() external view returns (address);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike_3 {\r\n    function dai() external view returns (TokenLike_3);\r\n    function join(address, uint256) external;\r\n}\r\n\r\ninterface TokenLike_3 {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ninterface CurvePoolLike_2 {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy)\r\n        external returns (uint256 dy);\r\n}\r\n\r\ncontract TUSDCurveCallee {\r\n    CurvePoolLike_2   public immutable curvePool;\r\n    DaiJoinLike_3     public immutable daiJoin;\r\n    TokenLike_3       public immutable dai;\r\n\r\n    uint256         public constant RAY = 10 ** 27;\r\n\r\n    function _add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function _sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function _divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = _add(x, _sub(y, 1)) / y;\r\n    }\r\n\r\n    constructor(\r\n        address curvePool_,\r\n        address daiJoin_\r\n    ) public {\r\n        curvePool      = CurvePoolLike_2(curvePool_);\r\n        daiJoin        = DaiJoinLike_3(daiJoin_);\r\n        TokenLike_3 dai_ = DaiJoinLike_3(daiJoin_).dai();\r\n        dai            = dai_;\r\n\r\n        dai_.approve(daiJoin_, type(uint256).max);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function clipperCall(\r\n        address sender,            // Clipper caller, pays back the loan\r\n        uint256 owe,               // Dai amount to pay back        [rad]\r\n        uint256 slice,             // Gem amount received           [wad]\r\n        bytes calldata data        // Extra data, see below\r\n    ) external {\r\n        (\r\n            address to,            // address to send remaining DAI to\r\n            address gemJoin,       // gemJoin adapter address\r\n            uint256 minProfit      // minimum profit in DAI to make [wad]\r\n        ) = abi.decode(data, (address, address, uint256));\r\n\r\n        address tusd = GemJoinLike_4(gemJoin).gem();\r\n\r\n        // Note - no need to convert slice to token precision as this contract TUSD specific (18 decimals)\r\n\r\n        // Exit gem to token\r\n        GemJoinLike_4(gemJoin).exit(address(this), slice);\r\n\r\n        // Convert `owe` from RAD to WAD\r\n        uint256 daiToJoin = _divup(owe, RAY);\r\n\r\n        TokenLike_3(tusd).approve(address(curvePool), slice);\r\n        curvePool.exchange_underlying({\r\n            i:      0,     // send token id (TUSD)\r\n            j:      1,     // receive token id (DAI)\r\n            dx:     slice, // send `slice` amount of TUSD\r\n            min_dy: _add(daiToJoin, minProfit)\r\n        });\r\n\r\n        // Although Curve will accept all gems, this check is a sanity check, just in case\r\n        // Transfer any lingering gem to specified address\r\n        if (TokenLike_3(tusd).balanceOf(address(this)) > 0) {\r\n            TokenLike_3(tusd).transfer(to, TokenLike_3(tusd).balanceOf(address(this)));\r\n        }\r\n\r\n        // Convert DAI bought to internal vat value of the msg.sender of Clipper.take\r\n        daiJoin.join(sender, daiToJoin);\r\n\r\n        // Transfer remaining DAI to specified address\r\n        dai.transfer(to, dai.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clipperCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract CurvePoolLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract TokenLike_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TUSDCurveCallee", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ecd5e75afb02efa118af914515d6521aabd189f10000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6370f01767267a8a304a10f3a731b349848a09f8ba29d066289c29dda07d66c"}]}