{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Executor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\\ncontract Executor {\\n    address private immutable owner;\\n    address private immutable executor;\\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    constructor(address _executor) payable {\\n        owner = msg.sender;\\n        executor = _executor;\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    function uniswapWeth(\\n        uint256 _wethAmountToFirstMarket,\\n        uint256 _ethAmountToCoinbase,\\n        address[] memory _targets,\\n        bytes[] memory _payloads\\n    ) external onlyExecutor payable {\\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\\n        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\\n            require(_success); _response;\\n        }\\n\\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\\n        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\\n        if (_ethAmountToCoinbase == 0) return;\\n\\n        uint256 _ethBalance = address(this).balance;\\n        if (_ethBalance < _ethAmountToCoinbase) {\\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\\n        }\\n        block.coinbase.transfer(_ethAmountToCoinbase);\\n    }\\n\\n    function call(\\n        address payable _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner payable returns (bytes memory) {\\n        require(_to != address(0));\\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\\n        require(_success);\\n        return _result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Executor.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmountToFirstMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmountToCoinbase\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"}],\"name\":\"uniswapWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Executor", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000043a41956766378192befb0a9ac93e4e4dc90ad5f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}