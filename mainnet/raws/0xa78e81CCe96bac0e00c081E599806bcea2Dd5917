{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/proxy/modules/VTableUpdateModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport '../VTable.sol';\\n\\ncontract VTableUpdateModule {\\n    using VTable for VTable.VTableStore;\\n\\n    event VTableUpdate(bytes4 indexed selector, address oldImplementation, address newImplementation);\\n\\n    struct ModuleDefinition {\\n        address implementation;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @dev Updates the vtable\\n     */\\n    function updateVTable(ModuleDefinition[] calldata modules) public {\\n        VTable.VTableStore storage vtable = VTable.instance();\\n        require(VTable.instance().getOwner() == msg.sender, 'VTableOwnership: caller is not the owner');\\n\\n        for (uint256 i = 0; i < modules.length; ++i) {\\n            ModuleDefinition memory module = modules[i];\\n            for (uint256 j = 0; j < module.selectors.length; ++j) {\\n                vtable.setFunction(module.selectors[j], module.implementation);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/VTable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title VTable\\n */\\nlibrary VTable {\\n    // bytes32 private constant _VTABLE_SLOT = bytes32(uint256(keccak256(\\\"openzeppelin.vtable.location\\\")) - 1);\\n    bytes32 private constant _VTABLE_SLOT = 0x13f1d5ea37b1d7aca82fcc2879c3bddc731555698dfc87ad6057b416547bc657;\\n\\n    struct VTableStore {\\n        address _owner;\\n        mapping(bytes4 => address) _delegates;\\n    }\\n\\n    /**\\n     * @dev Get singleton instance\\n     */\\n    function instance() internal pure returns (VTableStore storage vtable) {\\n        bytes32 position = _VTABLE_SLOT;\\n        assembly {\\n            vtable.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Ownership management\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function getOwner(VTableStore storage vtable) internal view returns (address) {\\n        return vtable._owner;\\n    }\\n\\n    function setOwner(VTableStore storage vtable, address newOwner) internal {\\n        emit OwnershipTransferred(vtable._owner, newOwner);\\n        vtable._owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev VTableManagement\\n     */\\n    event VTableUpdate(bytes4 indexed selector, address oldImplementation, address newImplementation);\\n\\n    function getFunction(VTableStore storage vtable, bytes4 selector) internal view returns (address) {\\n        return vtable._delegates[selector];\\n    }\\n\\n    function setFunction(\\n        VTableStore storage vtable,\\n        bytes4 selector,\\n        address module\\n    ) internal {\\n        emit VTableUpdate(selector, vtable._delegates[selector], module);\\n        vtable._delegates[selector] = module;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999,\r\n      \"details\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"VTableUpdate\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct VTableUpdateModule.ModuleDefinition[]\",\"name\":\"modules\",\"type\":\"tuple[]\"}],\"name\":\"updateVTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VTableUpdateModule", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}