{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @title Represents an ownable resource.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param addr The owner of the smart contract\r\n     */\r\n    constructor (address addr) {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        _owner = addr;\r\n        emit OwnershipTransferred(address(0), addr);\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier indicates that the function can only be called by the owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Only owner requirement\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the address specified.\r\n     * @param addr Specifies the address of the new owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function transferOwnership (address addr) public onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        emit OwnershipTransferred(_owner, addr);\r\n        _owner = addr;\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys the smart contract.\r\n     * @param addr The payable address of the recipient.\r\n     */\r\n    function destroy(address payable addr) public virtual onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the address of the owner.\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address specified is the owner of the resource.\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return addr == _owner;\r\n    }\r\n}\r\n\r\n/**\r\n * @notice Defines the interface for whitelisting addresses.\r\n */\r\ninterface IAddressWhitelist {\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns 1 if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) external view returns (bool);\r\n\r\n    /**\r\n     * This event is triggered when a new address is whitelisted.\r\n     * @param addr The address that was whitelisted\r\n     */\r\n    event OnAddressEnabled(address addr);\r\n\r\n    /**\r\n     * This event is triggered when an address is disabled.\r\n     * @param addr The address that was disabled\r\n     */\r\n    event OnAddressDisabled(address addr);\r\n}\r\n\r\n\r\n/**\r\n * @title Contract for whitelisting addresses\r\n */\r\ncontract AddressWhitelist is IAddressWhitelist, Ownable {\r\n    mapping (address => bool) internal whitelistedAddresses;\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param ownerAddr The address of the owner\r\n     */\r\n    constructor (address ownerAddr) Ownable (ownerAddr) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) public override onlyOwner {\r\n        require(!whitelistedAddresses[addr], \"Already enabled\");\r\n        whitelistedAddresses[addr] = true;\r\n        emit OnAddressEnabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) public override onlyOwner {\r\n        require(whitelistedAddresses[addr], \"Already disabled\");\r\n        whitelistedAddresses[addr] = false;\r\n        emit OnAddressDisabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns true if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) public view override returns (bool) {\r\n        return whitelistedAddresses[addr];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnAddressDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnAddressEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"disableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"enableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AddressWhitelist", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c692d583567cda0fde14cd3d6136c2623202ed68", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a40fd8e847b2d7e1a5bbd5d5744ddd430110d96e71c3f82c3e7425840ca1f79"}]}