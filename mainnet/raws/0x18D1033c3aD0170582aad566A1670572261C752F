{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Loodles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"sol-temple/src/tokens/ERC721.sol\\\";\\nimport \\\"sol-temple/src/utils/Auth.sol\\\";\\nimport \\\"sol-temple/src/utils/Pausable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title Loodles\\n * @author naomsa <https://twitter.com/naomsa666>\\n */\\ncontract Loodles is Auth, Pausable, ERC721(\\\"Loodles\\\", \\\"LOODLE\\\") {\\n  using Strings for uint256;\\n  using MerkleProof for bytes32[];\\n\\n  /// @notice Max supply.\\n  uint256 public constant LOODLES_MAX = 5000;\\n  /// @notice Max amount per claim (not whitelist).\\n  uint256 public constant LOODLES_PER_TX = 10;\\n  /// @notice Max amount per whitelist claim.\\n  uint256 public constant LOODLES_PER_WHITELIST = 2;\\n  /// @notice Claim price.\\n  uint256 public constant LOODLES_PRICE = 0.045 ether;\\n  /// @notice Claim price for Doodles and Lemon Friends holders.\\n  uint256 public constant LOODLES_PRICE_HOLDER = 0.035 ether;\\n\\n  /// @notice 0 = CLOSED, 1 = WHITELIST, 2 = PUBLIC.\\n  uint256 public saleState;\\n\\n  /// @notice Metadata base URI.\\n  string public baseURI;\\n  /// @notice Metadata URI extension.\\n  string public baseExtension;\\n  /// @notice Unrevealed metadata URI.\\n  string public unrevealedURI;\\n\\n  /// @notice Whitelist merkle root.\\n  bytes32 public merkleRoot;\\n  /// @notice Whitelist mints per address.\\n  mapping(address => uint256) public whitelistMinted;\\n\\n  /// @notice OpenSea proxy registry.\\n  ProxyRegistry public opensea;\\n  /// @notice LooksRare marketplace transfer manager.\\n  address public looksrare;\\n  /// @notice Check if marketplaces pre-approve is enabled.\\n  bool public marketplacesApproved = true;\\n\\n  constructor(\\n    string memory unrevealedURI_,\\n    bytes32 merkleRoot_,\\n    ProxyRegistry opensea_,\\n    address looksrare_\\n  ) {\\n    unrevealedURI = unrevealedURI_;\\n    merkleRoot = merkleRoot_;\\n    opensea = opensea_;\\n    looksrare = looksrare_;\\n\\n    _safeMint(msg.sender, 0);\\n  }\\n\\n  /// @notice Claim one or more tokens.\\n  function claim(uint256 amount_) external payable {\\n    uint256 supply = totalSupply();\\n    require(supply + amount_ <= LOODLES_MAX, \\\"Max supply exceeded\\\");\\n    if (msg.sender != owner()) {\\n      require(saleState == 2, \\\"Public sale is not open\\\");\\n      require(amount_ > 0 && amount_ <= LOODLES_PER_TX, \\\"Invalid claim amount\\\");\\n      require(msg.value == claimCost(msg.sender) * amount_, \\\"Invalid ether amount\\\");\\n    }\\n\\n    for (uint256 i = 0; i < amount_; i++) _safeMint(msg.sender, supply++);\\n  }\\n\\n  /// @notice Claim one or more tokens for whitelisted user.\\n  function claimWhitelist(uint256 amount_, bytes32[] memory proof_) external payable {\\n    uint256 supply = totalSupply();\\n    require(supply + amount_ <= LOODLES_MAX, \\\"Max supply exceeded\\\");\\n    if (msg.sender != owner()) {\\n      require(saleState == 1, \\\"Whitelist sale is not open\\\");\\n      require(amount_ > 0 && amount_ + whitelistMinted[msg.sender] <= LOODLES_PER_WHITELIST, \\\"Invalid claim amount\\\");\\n      require(msg.value == claimCost(msg.sender) * amount_, \\\"Invalid ether amount\\\");\\n      require(isWhitelisted(msg.sender, proof_), \\\"Invalid proof\\\");\\n    }\\n\\n    whitelistMinted[msg.sender] += amount_;\\n    for (uint256 i = 0; i < amount_; i++) _safeMint(msg.sender, supply++);\\n  }\\n\\n  /// @notice Check users claim price based on their Doodles and Lemon Friends balance.\\n  function claimCost(address user_) public view returns (uint256) {\\n    if (\\n      ERC721(0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e).balanceOf(user_) > 0 ||\\n      ERC721(0x0B22fE0a2995C5389AC093400e52471DCa8BB48a).balanceOf(user_) > 0\\n    ) return LOODLES_PRICE_HOLDER;\\n    else return LOODLES_PRICE;\\n  }\\n\\n  /// @notice Retrieve if `user_` is whitelisted based on his `proof_`.\\n  function isWhitelisted(address user_, bytes32[] memory proof_) public view returns (bool) {\\n    bytes32 leaf = keccak256(abi.encodePacked(user_));\\n    return proof_.verify(merkleRoot, leaf);\\n  }\\n\\n  /**\\n   * @notice See {IERC721-tokenURI}.\\n   * @dev In order to make a metadata reveal, there must be an unrevealedURI string, which\\n   * gets set on the constructor and, for optimization purposes, when the owner() sets a new\\n   * baseURI, the unrevealedURI gets deleted, saving gas and triggering a reveal.\\n   */\\n  function tokenURI(uint256 tokenId_) public view override returns (string memory) {\\n    if (bytes(unrevealedURI).length > 0) return unrevealedURI;\\n    return string(abi.encodePacked(baseURI, tokenId_.toString(), baseExtension));\\n  }\\n\\n  /// @notice Set baseURI to `baseURI_`, baseExtension to `baseExtension_` and deletes unrevealedURI, triggering a reveal.\\n  function setBaseURI(string memory baseURI_, string memory baseExtension_) external onlyOwner {\\n    baseURI = baseURI_;\\n    baseExtension = baseExtension_;\\n    delete unrevealedURI;\\n  }\\n\\n  /// @notice Set unrevealedURI to `unrevealedURI_`.\\n  function setUnrevealedURI(string memory unrevealedURI_) external onlyAuthorized {\\n    unrevealedURI = unrevealedURI_;\\n  }\\n\\n  /// @notice Set unrevealedURI to `unrevealedURI_`.\\n  function setSaleState(uint256 saleState_) external onlyAuthorized {\\n    saleState = saleState_;\\n  }\\n\\n  /// @notice Set merkleRoot to `merkleRoot_`.\\n  function setMerkleRoot(bytes32 merkleRoot_) external onlyAuthorized {\\n    merkleRoot = merkleRoot_;\\n  }\\n\\n  /// @notice Set opensea to `opensea_`.\\n  function setOpensea(ProxyRegistry opensea_) external onlyAuthorized {\\n    opensea = opensea_;\\n  }\\n\\n  /// @notice Set looksrare to `looksrare_`.\\n  function setLooksrare(address looksrare_) external onlyAuthorized {\\n    looksrare = looksrare_;\\n  }\\n\\n  /// @notice Toggle pre-approve feature state for sender.\\n  function toggleMarketplacesApproved() external onlyAuthorized {\\n    marketplacesApproved = !marketplacesApproved;\\n  }\\n\\n  /// @notice Toggle paused state.\\n  function togglePaused() external onlyAuthorized {\\n    _togglePaused();\\n  }\\n\\n  /**\\n   * @notice Withdraw `amount_` of ether to msg.sender.\\n   * @dev Combined with the Auth util, this function can be called by\\n   * anyone with the authorization from the owner, so a team member can\\n   * get his shares with a permissioned call and exact data.\\n   */\\n  function withdraw(uint256 amount_) external onlyAuthorized {\\n    payable(msg.sender).transfer(amount_);\\n  }\\n\\n  /// @notice Withdraw `amount_` of `token_` to the sender.\\n  function withdrawERC20(IERC20 token_, uint256 amount_) external onlyAuthorized {\\n    token_.transfer(msg.sender, amount_);\\n  }\\n\\n  /// @notice Withdraw `tokenId_` of `token_` to the sender.\\n  function withdrawERC721(IERC721 token_, uint256 tokenId_) external onlyAuthorized {\\n    token_.safeTransferFrom(address(this), msg.sender, tokenId_);\\n  }\\n\\n  /// @notice Withdraw `tokenId_` with amount of `value_` from `token_` to the sender.\\n  function withdrawERC1155(\\n    IERC1155 token_,\\n    uint256 tokenId_,\\n    uint256 value_\\n  ) external onlyAuthorized {\\n    token_.safeTransferFrom(address(this), msg.sender, tokenId_, value_, \\\"\\\");\\n  }\\n\\n  /// @dev Modified for opensea and looksrare pre-approve so users can make truly gasless sales.\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    if (!marketplacesApproved) return super.isApprovedForAll(owner, operator);\\n\\n    return\\n      operator == address(opensea.proxies(owner)) || operator == looksrare || super.isApprovedForAll(owner, operator);\\n  }\\n\\n  /// @dev Edited in order to block transfers while paused unless msg.sender is the owner().\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override {\\n    require(msg.sender == owner() || paused() == false, \\\"Pausable: contract paused\\\");\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\"\r\n    },\r\n    \"sol-temple/src/tokens/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ERC721\\n * @author naomsa <https://twitter.com/naomsa666>\\n * @notice A complete ERC721 implementation including metadata and enumerable\\n * functions. Completely gas optimized and extensible.\\n */\\nabstract contract ERC721 {\\n  /*         _           _            */\\n  /*        ( )_        ( )_          */\\n  /*    ___ | ,_)   _ _ | ,_)   __    */\\n  /*  /',__)| |   /'_` )| |   /'__`\\\\  */\\n  /*  \\\\__, \\\\| |_ ( (_| || |_ (  ___/  */\\n  /*  (____/`\\\\__)`\\\\__,_)`\\\\__)`\\\\____)  */\\n\\n  /// @dev This emits when ownership of any NFT changes by any mechanism.\\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n  /// @dev This emits when the approved address for an NFT is changed or\\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n  /// @dev This emits when an operator is enabled or disabled for an owner.\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n  /// @notice See {IERC721Metadata-name}.\\n  string public name;\\n\\n  /// @notice See {IERC721Metadata-symbol}.\\n  string public symbol;\\n\\n  /// @notice Array of all owners.\\n  address[] private _owners;\\n\\n  /// @notice Mapping of all balances.\\n  mapping(address => uint256) private _balanceOf;\\n\\n  /// @notice Mapping from token ID to approved address.\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  /// @notice Mapping of approvals between owner and operator.\\n  mapping(address => mapping(address => bool)) private _isApprovedForAll;\\n\\n  /*   _                            */\\n  /*  (_ )                _         */\\n  /*   | |    _      __  (_)   ___  */\\n  /*   | |  /'_`\\\\  /'_ `\\\\| | /'___) */\\n  /*   | | ( (_) )( (_) || |( (___  */\\n  /*  (___)`\\\\___/'`\\\\__  |(_)`\\\\____) */\\n  /*              ( )_) |           */\\n  /*               \\\\___/'           */\\n\\n  constructor(string memory name_, string memory symbol_) {\\n    name = name_;\\n    symbol = symbol_;\\n  }\\n\\n  /// @notice See {IERC721-balanceOf}.\\n  function balanceOf(address owner) public view virtual returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n    return _balanceOf[owner];\\n  }\\n\\n  /// @notice See {IERC721-ownerOf}.\\n  function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n    require(_exists(tokenId), \\\"ERC721: query for nonexistent token\\\");\\n    address owner = _owners[tokenId];\\n    return owner;\\n  }\\n\\n  /// @notice See {IERC721Metadata-tokenURI}.\\n  function tokenURI(uint256) public view virtual returns (string memory);\\n\\n  /// @notice See {IERC721-approve}.\\n  function approve(address to, uint256 tokenId) public virtual {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      msg.sender == owner || _isApprovedForAll[owner][msg.sender],\\n      \\\"ERC721: caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /// @notice See {IERC721-getApproved}.\\n  function getApproved(uint256 tokenId) public view virtual returns (address) {\\n    require(_exists(tokenId), \\\"ERC721: query for nonexistent token\\\");\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /// @notice See {IERC721-setApprovalForAll}.\\n  function setApprovalForAll(address operator, bool approved) public virtual {\\n    _setApprovalForAll(msg.sender, operator, approved);\\n  }\\n\\n  /// @notice See {IERC721-isApprovedForAll}\\n  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n    return _isApprovedForAll[owner][operator];\\n  }\\n\\n  /// @notice See {IERC721-transferFrom}.\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual {\\n    require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /// @notice See {IERC721-safeTransferFrom}.\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /// @notice See {IERC721-safeTransferFrom}.\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data_\\n  ) public virtual {\\n    require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _safeTransfer(from, to, tokenId, data_);\\n  }\\n\\n  /// @notice See {IERC721Enumerable.tokenOfOwnerByIndex}.\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId) {\\n    require(index < balanceOf(owner), \\\"ERC721Enumerable: Index out of bounds\\\");\\n    uint256 count;\\n    for (uint256 i; i < _owners.length; ++i) {\\n      if (owner == _owners[i]) {\\n        if (count == index) return i;\\n        else count++;\\n      }\\n    }\\n    revert(\\\"ERC721Enumerable: Index out of bounds\\\");\\n  }\\n\\n  /// @notice See {IERC721Enumerable.totalSupply}.\\n  function totalSupply() public view virtual returns (uint256) {\\n    return _owners.length;\\n  }\\n\\n  /// @notice See {IERC721Enumerable.tokenByIndex}.\\n  function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n    require(index < _owners.length, \\\"ERC721Enumerable: Index out of bounds\\\");\\n    return index;\\n  }\\n\\n  /// @notice Returns a list of all token Ids owned by `owner`.\\n  function tokensOfOwner(address owner) public view returns (uint256[] memory) {\\n    uint256 balance = balanceOf(owner);\\n    uint256[] memory ids = new uint256[](balance);\\n    for (uint256 i = 0; i < balance; i++) {\\n      ids[i] = tokenOfOwnerByIndex(owner, i);\\n    }\\n    return ids;\\n  }\\n\\n  /*             _                               _    */\\n  /*   _        ( )_                            (_ )  */\\n  /*  (_)  ___  | ,_)   __   _ __   ___     _ _  | |  */\\n  /*  | |/' _ `\\\\| |   /'__`\\\\( '__)/' _ `\\\\ /'_` ) | |  */\\n  /*  | || ( ) || |_ (  ___/| |   | ( ) |( (_| | | |  */\\n  /*  (_)(_) (_)`\\\\__)`\\\\____)(_)   (_) (_)`\\\\__,_)(___) */\\n\\n  /**\\n   * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `data_` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data_\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    _checkOnERC721Received(from, to, tokenId, data_);\\n  }\\n\\n  /**\\n   * @notice Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return tokenId < _owners.length && _owners[tokenId] != address(0);\\n  }\\n\\n  /**\\n   * @notice Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n    require(_exists(tokenId), \\\"ERC721: query for nonexistent token\\\");\\n    address owner = _owners[tokenId];\\n    return (spender == owner || getApproved(tokenId) == spender || _isApprovedForAll[owner][spender]);\\n  }\\n\\n  /**\\n   * @notice Safely mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   * - `tokenId` must not exist.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice Same as {_safeMint}, but with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data_\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    _checkOnERC721Received(address(0), to, tokenId, data_);\\n  }\\n\\n  /**\\n   * @notice Mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    _owners.push(to);\\n    unchecked {\\n      _balanceOf[to]++;\\n    }\\n\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @notice Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n    delete _owners[tokenId];\\n    _balanceOf[owner]--;\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @notice Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(_owners[tokenId] == from, \\\"ERC721: transfer of token that is not own\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _owners[tokenId] = to;\\n    unchecked {\\n      _balanceOf[from]--;\\n      _balanceOf[to]++;\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @notice Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(address to, uint256 tokenId) internal virtual {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(_owners[tokenId], to, tokenId);\\n  }\\n\\n  /**\\n   * @notice Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits a {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, \\\"ERC721: approve to caller\\\");\\n    _isApprovedForAll[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @notice Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param data bytes optional data to send along with the call\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) private {\\n    if (to.code.length > 0) {\\n      try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 returned) {\\n        require(returned == 0x150b7a02, \\\"ERC721: safe transfer to non ERC721Receiver implementation\\\");\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: safe transfer to non ERC721Receiver implementation\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n\\n  /*    ___  _   _  _ _      __   _ __  */\\n  /*  /',__)( ) ( )( '_`\\\\  /'__`\\\\( '__) */\\n  /*  \\\\__, \\\\| (_) || (_) )(  ___/| |    */\\n  /*  (____/`\\\\___/'| ,__/'`\\\\____)(_)    */\\n  /*               | |                  */\\n  /*               (_)                  */\\n\\n  /// @notice See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n    return\\n      interfaceId == 0x80ac58cd || // ERC721\\n      interfaceId == 0x5b5e139f || // ERC721Metadata\\n      interfaceId == 0x780e9d63 || // ERC721Enumerable\\n      interfaceId == 0x01ffc9a7; // ERC165\\n  }\\n}\\n\\ninterface IERC721Receiver {\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"sol-temple/src/utils/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Auth\\n * @author naomsa <https://twitter.com/naomsa666>\\n * @notice Authing system where the `owner` can authorize function calls\\n * to other addresses as well as control the contract by his own.\\n */\\nabstract contract Auth {\\n  /*         _           _            */\\n  /*        ( )_        ( )_          */\\n  /*    ___ | ,_)   _ _ | ,_)   __    */\\n  /*  /',__)| |   /'_` )| |   /'__`\\\\  */\\n  /*  \\\\__, \\\\| |_ ( (_| || |_ (  ___/  */\\n  /*  (____/`\\\\__)`\\\\__,_)`\\\\__)`\\\\____)  */\\n\\n  /// @notice Emited when the ownership is transfered.\\n  event OwnershipTransfered(address indexed from, address indexed to);\\n\\n  /// @notice Emited a new call with `data` is authorized to `to`.\\n  event AuthorizationGranted(address indexed to, bytes data);\\n\\n  /// @notice Emited a new call with `data` is forbidden to `to`.\\n  event AuthorizationForbidden(address indexed to, bytes data);\\n\\n  /// @notice Contract's owner address.\\n  address private _owner;\\n\\n  /// @notice A mapping to retrieve if a call data was authed and is valid for the address.\\n  mapping(address => mapping(bytes => bool)) private _isAuthorized;\\n\\n  /**\\n   * @notice A modifier that requires the user to be the owner or authorization to call.\\n   * After the call, the user loses it's authorization if he's not the owner.\\n   */\\n  modifier onlyAuthorized() {\\n    require(isAuthorized(msg.sender, msg.data), \\\"Auth: sender is not the owner or authorized to call\\\");\\n    _;\\n    if (msg.sender != _owner) _isAuthorized[msg.sender][msg.data] = false;\\n  }\\n\\n  /// @notice A simple modifier just to check whether the sender is the owner.\\n  modifier onlyOwner() {\\n    require(msg.sender == _owner, \\\"Auth: sender is not the owner\\\");\\n    _;\\n  }\\n\\n  /*   _                            */\\n  /*  (_ )                _         */\\n  /*   | |    _      __  (_)   ___  */\\n  /*   | |  /'_`\\\\  /'_ `\\\\| | /'___) */\\n  /*   | | ( (_) )( (_) || |( (___  */\\n  /*  (___)`\\\\___/'`\\\\__  |(_)`\\\\____) */\\n  /*              ( )_) |           */\\n  /*               \\\\___/'           */\\n\\n  constructor() {\\n    _transferOwnership(msg.sender);\\n  }\\n\\n  /// @notice Returns the current contract owner.\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /// @notice Retrieves whether `user_` is authorized to call with `data_`.\\n  function isAuthorized(address user_, bytes memory data_) public view returns (bool) {\\n    return user_ == _owner || _isAuthorized[user_][data_];\\n  }\\n\\n  /// @notice Set the owner address to `owner_`.\\n  function transferOwnership(address owner_) public onlyOwner {\\n    require(_owner != owner_, \\\"Auth: transfering ownership to current owner\\\");\\n    _transferOwnership(owner_);\\n  }\\n\\n  /// @notice Set the owner address to `owner_`. Does not require anything\\n  function _transferOwnership(address owner_) internal {\\n    address oldOwner = _owner;\\n    _owner = owner_;\\n\\n    emit OwnershipTransfered(oldOwner, owner_);\\n  }\\n\\n  /// @notice Authorize a call with `data_` to the address `to_`.\\n  function auth(address to_, bytes memory data_) public onlyOwner {\\n    require(to_ != _owner, \\\"Auth: authorizing call to the owner\\\");\\n    require(!_isAuthorized[to_][data_], \\\"Auth: authorized calls cannot be authed\\\");\\n    _isAuthorized[to_][data_] = true;\\n\\n    emit AuthorizationGranted(to_, data_);\\n  }\\n\\n  /// @notice Authorize a call with `data_` to the address `to_`.\\n  function forbid(address to_, bytes memory data_) public onlyOwner {\\n    require(_isAuthorized[to_][data_], \\\"Auth: unauthorized calls cannot be forbidden\\\");\\n    delete _isAuthorized[to_][data_];\\n\\n    emit AuthorizationForbidden(to_, data_);\\n  }\\n}\\n\"\r\n    },\r\n    \"sol-temple/src/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Pausable\\n * @author naomsa <https://twitter.com/naomsa666>\\n * @notice Freeze your contract with a secure paused mechanism.\\n */\\nabstract contract Pausable {\\n  /*         _           _            */\\n  /*        ( )_        ( )_          */\\n  /*    ___ | ,_)   _ _ | ,_)   __    */\\n  /*  /',__)| |   /'_` )| |   /'__`\\\\  */\\n  /*  \\\\__, \\\\| |_ ( (_| || |_ (  ___/  */\\n  /*  (____/`\\\\__)`\\\\__,_)`\\\\__)`\\\\____)  */\\n\\n  /// @notice Emited when the contract is paused.\\n  event Paused(address indexed by);\\n\\n  /// @notice Emited when the contract is unpaused.\\n  event Unpaused(address indexed by);\\n\\n  /// @notice Read-only pause state.\\n  bool private _paused;\\n\\n  /// @notice A modifier to be used when the contract must be paused.\\n  modifier onlyWhenPaused() {\\n    require(_paused, \\\"Pausable: contract not paused\\\");\\n    _;\\n  }\\n\\n  /// @notice A modifier to be used when the contract must be unpaused.\\n  modifier onlyWhenUnpaused() {\\n    require(!_paused, \\\"Pausable: contract paused\\\");\\n    _;\\n  }\\n\\n  /*   _                            */\\n  /*  (_ )                _         */\\n  /*   | |    _      __  (_)   ___  */\\n  /*   | |  /'_`\\\\  /'_ `\\\\| | /'___) */\\n  /*   | | ( (_) )( (_) || |( (___  */\\n  /*  (___)`\\\\___/'`\\\\__  |(_)`\\\\____) */\\n  /*              ( )_) |           */\\n  /*               \\\\___/'           */\\n\\n  /// @notice Retrieve contracts pause state.\\n  function paused() public view returns (bool) {\\n    return _paused;\\n  }\\n\\n  /// @notice Inverts pause state. Declared internal so it can be combined with the Auth contract.\\n  function _togglePaused() internal {\\n    _paused = !_paused;\\n    if (_paused) emit Unpaused(msg.sender);\\n    else emit Paused(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1024\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"unrevealedURI_\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"contract ProxyRegistry\",\"name\":\"opensea_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AuthorizationForbidden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AuthorizationGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOODLES_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOODLES_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOODLES_PER_WHITELIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOODLES_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOODLES_PRICE_HOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"auth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"claimCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"claimWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"forbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"contract ProxyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseExtension_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"name\":\"setLooksrare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ProxyRegistry\",\"name\":\"opensea_\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleState_\",\"type\":\"uint256\"}],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"unrevealedURI_\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Loodles", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1024", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000805e2e44d941f1bfd597a87b663d0c55eca853722d6a9c31befac6c2cf1989b0a0000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1000000000000000000000000f42aa99f011a1fa7cda90e5e98b277e306bca83e0000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d524458656f7a57664b45666167316e775a374732756843734778374b4b7647784d4e363170757a736b5a37420000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}