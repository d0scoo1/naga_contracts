{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract Authorizable {\r\n    // This contract allows a flexible authorization scheme\r\n\r\n    // The owner who can change authorization status\r\n    address public owner;\r\n    // A mapping from an address to its authorization status\r\n    mapping(address => bool) public authorized;\r\n\r\n    /// @dev We set the deployer to the owner\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev This modifier checks if the msg.sender is the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Sender not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev This modifier checks if an address is authorized\r\n    modifier onlyAuthorized() {\r\n        require(isAuthorized(msg.sender), \"Sender not Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Returns true if an address is authorized\r\n    /// @param who the address to check\r\n    /// @return true if authorized false if not\r\n    function isAuthorized(address who) public view returns (bool) {\r\n        return authorized[who];\r\n    }\r\n\r\n    /// @dev Privileged function authorize an address\r\n    /// @param who the address to authorize\r\n    function authorize(address who) external onlyOwner() {\r\n        _authorize(who);\r\n    }\r\n\r\n    /// @dev Privileged function to de authorize an address\r\n    /// @param who The address to remove authorization from\r\n    function deauthorize(address who) external onlyOwner() {\r\n        authorized[who] = false;\r\n    }\r\n\r\n    /// @dev Function to change owner\r\n    /// @param who The new owner address\r\n    function setOwner(address who) public onlyOwner() {\r\n        owner = who;\r\n    }\r\n\r\n    /// @dev Inheritable function which authorizes someone\r\n    /// @param who the address to authorize\r\n    function _authorize(address who) internal {\r\n        authorized[who] = true;\r\n    }\r\n}\r\n\r\ninterface IVotingVault {\r\n    /// @notice Attempts to load the voting power of a user\r\n    /// @param user The address we want to load the voting power of\r\n    /// @param blockNumber the block number we want the user's voting power at\r\n    /// @return the number of votes\r\n    function queryVotePowerView(\r\n        address user,\r\n        uint256 blockNumber\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract BalanceQuery is Authorizable {\r\n    // stores approved voting vaults\r\n    IVotingVault[] public vaults;\r\n\r\n    /// @notice Constructs this contract and stores needed data\r\n    /// @param _owner The contract owner authorized to remove vaults\r\n    /// @param votingVaults An array of the vaults to query balances from\r\n    constructor(address _owner, address[] memory votingVaults) {\r\n        // create a new array of voting vaults\r\n        vaults = new IVotingVault[](votingVaults.length);\r\n        // populate array with each vault passed into constructor\r\n        for (uint256 i = 0; i < votingVaults.length; i++) {\r\n            vaults[i] = IVotingVault(votingVaults[i]);\r\n        }\r\n\r\n        // authorize the owner address to be able to add/remove vaults\r\n        _authorize(_owner);\r\n    }\r\n\r\n    /// @notice Queries and adds together the vault balances for specified user\r\n    /// @param user The user to query balances for\r\n    /// @return The total voting power for the user\r\n    function balanceOf(address user) public view returns (uint256) {\r\n        uint256 votingPower = 0;\r\n        // query voting power from each vault and add to total\r\n        for (uint256 i = 0; i < vaults.length; i++) {\r\n            try vaults[i].queryVotePowerView(user, block.number - 1) returns (uint v) {\r\n                votingPower = votingPower + v;\r\n            } catch {}\r\n        }\r\n        // return that balance\r\n        return votingPower;\r\n    }\r\n\r\n    /// @notice Updates the storage variable for vaults to query\r\n    /// @param _vaults An array of the new vaults to store\r\n    function updateVaults(address[] memory _vaults) external onlyAuthorized {\r\n        // reset our array in storage\r\n        vaults = new IVotingVault[](_vaults.length);\r\n\r\n        // populate with each vault passed into the method\r\n        for (uint256 i = 0; i < _vaults.length; i++) {\r\n            vaults[i] = IVotingVault(_vaults[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"votingVaults\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"updateVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract IVotingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalanceQuery", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000422494292e7a9dda8778bb4ea05c2779a3d60f5d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002bd4a3b1b95b01f2aa61655415a5d3eaacaafdd0000000000000000000000006de73946eab234f1ee61256f10067d713af0e37a", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03ed5667804d0510a517cf6fd6f78d823a0d3c26dd4482cdbe4f856b843731e1"}]}