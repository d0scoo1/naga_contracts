{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/OGStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport './interfaces/OGInterface.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface to access the OG stats contract\\r\\n * @author nfttank.eth\\r\\n */\\r\\ninterface OGStatsInterface {\\r\\n\\r\\n    /**\\r\\n    * @notice Gets the OG stats for a given address\\r\\n    * @param addressToScan The address to scan\\r\\n    * @param checkUpToBalance The maxium balance to check for the tiers and enumerate tokens. Means: Whale if more than this quantity.\\r\\n    */\\r\\n    function scan(address addressToScan, uint16 checkUpToBalance) external view returns (Stats memory);\\r\\n}\\r\\n\\r\\nstruct Stats {\\r\\n    uint256 balance;\\r\\n    bool ogDozen;\\r\\n    bool meme;\\r\\n    bool honorary;\\r\\n    bool maxedOut;\\r\\n    uint256[] tokenIds;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Scans OG stats from a given address. Useful for whitelists, premints, free mints or discounts for OG holders.\\r\\n * @author nfttank.eth\\r\\n */\\r\\ncontract OGStats is Ownable {\\r\\n\\r\\n    address private _ogContractAddress;\\r\\n    mapping(uint256 => bool) private _blockedTokens;\\r\\n\\r\\n    constructor() Ownable() {\\r\\n    }\\r\\n\\r\\n    function setOgContract(address ogContractAddress) external onlyOwner {\\r\\n        _ogContractAddress = ogContractAddress;\\r\\n    }\\r\\n\\r\\n    function blockToken(uint256 tokenId) external onlyOwner {\\r\\n        _blockedTokens[tokenId] = true;\\r\\n    }\\r\\n\\r\\n    function unblockToken(uint256 tokenId) external onlyOwner {\\r\\n        _blockedTokens[tokenId] = false;\\r\\n    }\\r\\n\\r\\n    function isTokenBlocked(uint256 tokenId) public view returns (bool) {\\r\\n        return _blockedTokens[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Gets the OG stats for a given address\\r\\n    * @param addressToScan The address to scan\\r\\n    * @param checkUpToBalance The maxium balance to check for the tiers and enumerate tokens. Means: If more than this quantity, king.\\r\\n    */\\r\\n    function scan(address addressToScan, uint16 checkUpToBalance) public view returns (Stats memory) {\\r\\n\\r\\n        OGInterface ogContract = OGInterface(_ogContractAddress);\\r\\n        uint256 balance = ogContract.balanceOf(addressToScan);\\r\\n\\r\\n        Stats memory stats = Stats(balance, false, false, false, false, new uint256[](balance <= checkUpToBalance ? balance : 0));\\r\\n\\r\\n        if (balance > checkUpToBalance) {\\r\\n            stats.maxedOut = true;\\r\\n            return stats;\\r\\n        }\\r\\n\\r\\n        bytes32 ogDozenBytes = keccak256(bytes('OG Dozen'));\\r\\n        bytes32 memeBytes = keccak256(bytes('Meme'));\\r\\n        bytes32 honoraryBytes = keccak256(bytes('Honorary'));\\r\\n\\r\\n        for (uint16 i = 0; i < balance; i++) {\\r\\n\\r\\n            stats.tokenIds[i] = ogContract.tokenOfOwnerByIndex(addressToScan, i);\\r\\n\\r\\n            if (isTokenBlocked(stats.tokenIds[i])) {\\r\\n                stats.tokenIds[i] = 0;\\r\\n                stats.balance--;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            string memory tier = ogContract.tier(stats.tokenIds[i]);\\r\\n            bytes32 tierBytes = keccak256(bytes(tier));\\r\\n\\r\\n            if (tierBytes == ogDozenBytes) {\\r\\n                stats.ogDozen = true;\\r\\n            } else if (tierBytes == memeBytes) {\\r\\n                stats.meme = true;\\r\\n            } else if (tierBytes == honoraryBytes) {\\r\\n                stats.honorary = true;\\r\\n            } \\r\\n        }\\r\\n\\r\\n        return stats;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/src/contracts/interfaces/OGInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n/**\\r\\n * @title The interface to access the OG contract\\r\\n * @author nfttank.eth\\r\\n */\\r\\ninterface OGInterface {\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function tokenOfOwnerByIndex (address owner, uint256 index) external view returns (uint256);\\r\\n    function tier(uint256 tokenId) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"blockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToScan\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"checkUpToBalance\",\"type\":\"uint16\"}],\"name\":\"scan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ogDozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"meme\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"honorary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"maxedOut\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ogContractAddress\",\"type\":\"address\"}],\"name\":\"setOgContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unblockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OGStats", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}