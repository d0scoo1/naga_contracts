{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/AllowAnyAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IAccessControlPolicy.sol\\\";\\nimport \\\"./PerVaultGatekeeper.sol\\\";\\n\\n/// @notice This contract will allow enable/disable open access to vaults (or the staking contract).\\ncontract AllowAnyAccessControl is IAccessControlPolicy, PerVaultGatekeeper {\\n  /// @notice Emitted when AllowAny configure is updated for a vault\\n  event AllowAnyUpdated(address indexed _vault, bool indexed _allow);\\n\\n  struct Config {\\n    bool isSet;\\n    bool allow;\\n  }\\n\\n  /// @notice stores if open access is enabled for a vault. By default no values will be set so no vaults are open.\\n  ///  The address key can either be the address of a vault or the staking contract, and the value will be true if\\n  mapping(address => Config) internal configurations;\\n\\n  address internal constant DEFAULT_CONFIG_ID = address(1);\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _governance) PerVaultGatekeeper(_governance) {}\\n\\n  function hasAccess(address _user, address _vault) external view returns (bool) {\\n    require(_vault != address(0), \\\"!input\\\");\\n    require(_user != address(0), \\\"!input\\\");\\n    Config memory c = configurations[_vault];\\n    if (c.isSet) {\\n      return c.allow;\\n    } else {\\n      return configurations[DEFAULT_CONFIG_ID].allow;\\n    }\\n  }\\n\\n  /// @notice Set the default configuration. Can only be called by governance.\\n  ///  The default configuration is only used if there is no vault level configuration set.\\n  /// @param _allowAny set to true will enable open access\\n  function setDefault(bool _allowAny) external onlyGovernance {\\n    configurations[DEFAULT_CONFIG_ID].isSet = true;\\n    configurations[DEFAULT_CONFIG_ID].allow = _allowAny;\\n    emit AllowAnyUpdated(DEFAULT_CONFIG_ID, _allowAny);\\n  }\\n\\n  /// @notice Set the configuration for the given vaults. Will override the default configuration.\\n  /// @param _vaults the addresses of vaults to set\\n  /// @param _settings settings for each vault\\n  function setForVaults(address[] calldata _vaults, bool[] calldata _settings) external {\\n    require(_vaults.length > 0, \\\"!vaults\\\");\\n    require(_vaults.length == _settings.length, \\\"!input\\\");\\n    for (uint256 i = 0; i < _vaults.length; i++) {\\n      require(_vaults[i] != address(0), \\\"!input\\\");\\n      _onlyGovernanceOrGatekeeper(_vaults[i]);\\n      configurations[_vaults[i]].isSet = true;\\n      configurations[_vaults[i]].allow = _settings[i];\\n      emit AllowAnyUpdated(_vaults[i], _settings[i]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControlPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IAccessControlPolicy {\\n  function hasAccess(address _user, address _vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/access/PerVaultGatekeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/roles/IGatekeeperable.sol\\\";\\nimport \\\"../vaults/roles/Governable.sol\\\";\\n\\ncontract PerVaultGatekeeper is Governable {\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _governance) Governable(_governance) {}\\n\\n  /// @dev works with any contract that implements the IGatekeeperable interface.\\n  function _onlyGovernanceOrGatekeeper(address _pool) internal view {\\n    require(_pool != address(0), \\\"!address\\\");\\n    address gatekeeper = IGatekeeperable(_pool).gatekeeper();\\n    require(_msgSender() == governance || (gatekeeper != address(0) && _msgSender() == gatekeeper), \\\"not authorised\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/roles/IGatekeeperable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IGatekeeperable {\\n  function gatekeeper() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/roles/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ninterface IGovernable {\\n  function proposeGovernance(address _pendingGovernance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\\nabstract contract GovernableInternal {\\n  event GovenanceUpdated(address _govenance);\\n  event GovenanceProposed(address _pendingGovenance);\\n\\n  /// @dev This contract is used as part of the Vault contract and it is upgradeable.\\n  ///  which means any changes to the state variables could corrupt the data. Do not modify these at all.\\n  /// @notice the address of the current governance\\n  address public governance;\\n  /// @notice the address of the pending governance\\n  address public pendingGovernance;\\n\\n  /// @dev ensure msg.send is the governanace\\n  modifier onlyGovernance() {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev ensure msg.send is the pendingGovernance\\n  modifier onlyPendingGovernance() {\\n    require(_getMsgSender() == pendingGovernance, \\\"pending governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev the deployer of the contract will be set as the initial governance\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init_unchained(address _governance) internal {\\n    require(_getMsgSender() != _governance, \\\"invalid address\\\");\\n    _updateGovernance(_governance);\\n  }\\n\\n  ///@notice propose a new governance of the vault. Only can be called by the existing governance.\\n  ///@param _pendingGovernance the address of the pending governance\\n  function proposeGovernance(address _pendingGovernance) external onlyGovernance {\\n    require(_pendingGovernance != address(0), \\\"invalid address\\\");\\n    require(_pendingGovernance != governance, \\\"already the governance\\\");\\n    pendingGovernance = _pendingGovernance;\\n    emit GovenanceProposed(_pendingGovernance);\\n  }\\n\\n  ///@notice accept the proposal to be the governance of the vault. Only can be called by the pending governance.\\n  function acceptGovernance() external onlyPendingGovernance {\\n    _updateGovernance(pendingGovernance);\\n  }\\n\\n  function _updateGovernance(address _pendingGovernance) internal {\\n    governance = _pendingGovernance;\\n    emit GovenanceUpdated(governance);\\n  }\\n\\n  /// @dev provides an internal function to allow reduce the contract size\\n  function _onlyGovernance() internal view {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n  }\\n\\n  function _getMsgSender() internal view virtual returns (address);\\n}\\n\\n/// @dev Add a `governance` and a `pendingGovernance` role to the contract, and implements a 2-phased nominatiom process to change the governance.\\n///   Also provides a modifier to allow controlling access to functions of the contract.\\ncontract Governable is Context, GovernableInternal {\\n  constructor(address _governance) GovernableInternal() {\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\\n/// @dev ungradeable version of the {Governable} contract. Can be used as part of an upgradeable contract.\\nabstract contract GovernableUpgradeable is ContextUpgradeable, GovernableInternal {\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init(address _governance) internal {\\n    __Context_init();\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"AllowAnyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovenance\",\"type\":\"address\"}],\"name\":\"GovenanceProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_govenance\",\"type\":\"address\"}],\"name\":\"GovenanceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"proposeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"setDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_settings\",\"type\":\"bool[]\"}],\"name\":\"setForVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AllowAnyAccessControl", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000457a60065050050b3e64fcd96cfb973123d38338", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}