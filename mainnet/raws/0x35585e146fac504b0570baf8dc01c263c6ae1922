{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nlibrary Address {\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n      \\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n}\\n\"},\"OwnedUpgradeabilityProxy.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\u0027./UpgradeabilityProxy.sol\\u0027;\\n\\n\\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\\n\\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\n\\n  // Storage position of the owner of the contract\\n  bytes32 private constant proxyOwnerPosition = keccak256(\\\"org.zeppelinos.proxy.owner\\\");\\n\\n  constructor() public {\\n    setUpgradeabilityOwner(msg.sender);\\n  }\\n\\n  modifier onlyProxyOwner() {\\n    require(msg.sender == proxyOwner());\\n    _;\\n  }\\n\\n\\n  function proxyOwner() public view returns (address owner) {\\n    bytes32 position = proxyOwnerPosition;\\n    assembly {\\n      owner := sload(position)\\n    }\\n  }\\n\\n  function setUpgradeabilityOwner(address newProxyOwner) internal {\\n    bytes32 position = proxyOwnerPosition;\\n    assembly {\\n      sstore(position, newProxyOwner)\\n    }\\n  }\\n\\n\\n  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\n    require(newOwner != address(0));\\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\n    setUpgradeabilityOwner(newOwner);\\n  }\\n\\n  function upgradeTo(address implementation) public onlyProxyOwner {\\n    _upgradeTo(implementation);\\n  }\\n\\n  function upgradeToAndCall(address implementation, bytes data) payable public onlyProxyOwner {\\n    upgradeTo(implementation);\\n    require(implementation.delegatecall(data));\\n}\\n}\\n\"},\"Proxy.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\ncontract Proxy {\\n\\n  function implementation() public view returns (address);\\n\\n  function () payable public {\\n    address _impl = implementation();\\n    require(_impl != address(0));\\n\\n    assembly {\\n      let ptr := mload(0x40)\\n      calldatacopy(ptr, 0, calldatasize)\\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\\n      let size := returndatasize\\n      returndatacopy(ptr, 0, size)\\n\\n      switch result\\n      case 0 { revert(ptr, size) }\\n      default { return(ptr, size) }\\n    }\\n  }\\n}\\n\"},\"UpgradeabilityProxy.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\u0027./Proxy.sol\\u0027;\\nimport \\u0027./Address.sol\\u0027;\\n\\ncontract UpgradeabilityProxy is Proxy {\\n\\n  event Upgraded(address indexed implementation);\\n\\n  // Storage position of the address of the current implementation\\n  bytes32 private constant implementationPosition = keccak256(\\\"org.zeppelinos.proxy.implementation\\\");\\n\\n  constructor() public {}\\n\\n  function implementation() public view returns (address impl) {\\n    bytes32 position = implementationPosition;\\n    assembly {\\n      impl := sload(position)\\n    }\\n  }\\n\\n  function setImplementation(address newImplementation) internal {\\n    require(Address.isContract(newImplementation),\\\"newImplementation is not a contractAddress\\\");\\n    bytes32 position = implementationPosition;\\n    assembly {\\n      sstore(position, newImplementation)\\n    }\\n  }\\n\\n  function _upgradeTo(address newImplementation) internal {\\n    address currentImplementation = implementation();\\n    require(currentImplementation != newImplementation);\\n    setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n}\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]", "ContractName": "OwnedUpgradeabilityProxy", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x64df7b29993b03d0ae7498bd962674a981fefa2d", "SwarmSource": "bzzr://4f9fcf78981ff5de966023b60e879995a17647277650c8efbd776dede6cb726a"}]}