{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./libraries/StrConcat.sol\\\";\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\nimport \\\"./interfaces/IDeployer01.sol\\\";\\nimport \\\"./SystemSettings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract PoolFactory is IPoolFactory, SystemSettings {\\n    mapping(address => mapping(address => mapping(bool => address))) public override pools;\\n\\n    address private _uniFactoryV3;\\n    address private _uniFactoryV2;\\n    address private _sushiFactory;\\n    address private _deployer01;\\n\\n    constructor(address uniFactoryV3,\\n        address uniFactoryV2,\\n        address sushiFactory,\\n        address deployer01,\\n        address deployer02) SystemSettings(deployer02) {\\n        _uniFactoryV3 = uniFactoryV3;\\n        _uniFactoryV2 = uniFactoryV2;\\n        _sushiFactory = sushiFactory;\\n        _deployer01 = deployer01;\\n    }\\n\\n    function createPoolFromUni(address tradeToken, address poolToken, uint24 fee, bool reverse) external override {\\n        address uniPool;\\n        uint8 oracle;\\n\\n        if (fee == 0) {\\n            IUniswapV2Factory uniswap = IUniswapV2Factory(_uniFactoryV2);\\n            uniPool = uniswap.getPair(tradeToken, poolToken);\\n            oracle = 1;\\n        } else {\\n            IUniswapV3Factory uniswap = IUniswapV3Factory(_uniFactoryV3);\\n            uniPool = uniswap.getPool(tradeToken, poolToken, fee);\\n            oracle = 0;\\n        }\\n\\n        require(uniPool != address(0), \\\"trade pair not found in uni swap\\\");\\n        require(pools[poolToken][uniPool][reverse] == address(0), \\\"pool already exists\\\");\\n\\n        string memory tradePair = StrConcat.strConcat(ERC20(tradeToken).symbol(), ERC20(poolToken).symbol());\\n        (address pool, address debt) = IDeployer01(_deployer01).deploy(poolToken, uniPool, address(this), tradePair, reverse, oracle);\\n        pools[poolToken][uniPool][reverse] = pool;\\n\\n        emit CreatePoolFromUni(tradeToken, poolToken, uniPool, pool, debt, tradePair, fee, reverse);\\n    }\\n\\n    function createPoolFromSushi(address tradeToken, address poolToken, bool reverse) external override {\\n        IUniswapV2Factory sushi = IUniswapV2Factory(_sushiFactory);\\n        address sushiPool = sushi.getPair(tradeToken, poolToken);\\n\\n        require(sushiPool != address(0), \\\"trade pair not found in sushi swap\\\");\\n        require(pools[poolToken][sushiPool][reverse] == address(0), \\\"pool already exists\\\");\\n\\n        string memory tradePair = StrConcat.strConcat(ERC20(tradeToken).symbol(), ERC20(poolToken).symbol());\\n        (address pool, address debt) = IDeployer01(_deployer01).deploy(poolToken, sushiPool, address(this), tradePair, reverse, 2);\\n        pools[poolToken][sushiPool][reverse] = pool;\\n\\n        emit CreatePoolFromSushi(tradeToken, poolToken, sushiPool, pool, debt, tradePair, reverse);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/StrConcat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nlibrary StrConcat {\\n\\n    function strConcat(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        string memory ret = new string(ba.length + bb.length + 1);\\n        bytes memory bret = bytes(ret);\\n\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) {\\n            bret[k++] = ba[i];\\n        }\\n        bret[k++] = byte('-');\\n        for (uint i = 0; i < bb.length; i++) {\\n            bret[k++] = bb[i];\\n        }\\n\\n        return string(bret);\\n    }\\n\\n    function strConcat2(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        string memory ret = new string(ba.length + bb.length);\\n        bytes memory bret = bytes(ret);\\n\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) {\\n            bret[k++] = ba[i];\\n        }\\n        for (uint i = 0; i < bb.length; i++) {\\n            bret[k++] = bb[i];\\n        }\\n\\n        return string(bret);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/BasicMaths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasicMaths {\\n    /**\\n     * @dev Returns the abs of substraction of two unsigned integers\\n     *\\n     * _Available since v3.4._\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            return b - a;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a - b if a > b, else return 0\\n     *\\n     * _Available since v3.4._\\n     */\\n    function sub2Zero(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns a - b, else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            return SafeMath.sub(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns sub2Zero(a, b), else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub2Zero(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            if (a > b) {\\n                return a - b;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        uint256 z = (x + 1 ) / 2;\\n        uint256 y = x;\\n        while(z < y){\\n            y = z;\\n            z = ( x / z + z ) / 2;\\n        }\\n        return y;\\n    }\\n\\n    function pow(uint256 x) internal pure returns (uint256) {\\n        return SafeMath.mul(x, x);\\n    }\\n\\n    function diff2(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (a >= b) {\\n            return (true, a - b);\\n        } else {\\n            return (false, b - a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ISystemSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ISystemSettings {\\n    struct PoolSetting {\\n        address owner;\\n        uint256 marginRatio;\\n        uint256 closingFee;\\n        uint256 liqFeeBase;\\n        uint256 liqFeeMax;\\n        uint256 liqFeeCoefficient;\\n        uint256 liqLsRequire;\\n        uint256 rebaseCoefficient;\\n        uint256 imbalanceThreshold;\\n        uint256 priceDeviationCoefficient;\\n        uint256 minHoldingPeriod;\\n        uint256 debtStart;\\n        uint256 debtAll;\\n        uint256 minDebtRepay;\\n        uint256 maxDebtRepay;\\n        uint256 interestRate;\\n        uint256 liquidityCoefficient;\\n        bool deviation;\\n    }\\n\\n    function official() external view returns (address);\\n\\n    function deployer02() external view returns (address);\\n\\n    function leverages(uint32) external view returns (bool);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function liqProtocolFee() external view returns (uint256);\\n\\n    function marginRatio() external view returns (uint256);\\n\\n    function closingFee() external view returns (uint256);\\n\\n    function liqFeeBase() external view returns (uint256);\\n\\n    function liqFeeMax() external view returns (uint256);\\n\\n    function liqFeeCoefficient() external view returns (uint256);\\n\\n    function liqLsRequire() external view returns (uint256);\\n\\n    function rebaseCoefficient() external view returns (uint256);\\n\\n    function imbalanceThreshold() external view returns (uint256);\\n\\n    function priceDeviationCoefficient() external view returns (uint256);\\n\\n    function minHoldingPeriod() external view returns (uint256);\\n\\n    function debtStart() external view returns (uint256);\\n\\n    function debtAll() external view returns (uint256);\\n\\n    function minDebtRepay() external view returns (uint256);\\n\\n    function maxDebtRepay() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function liquidityCoefficient() external view returns (uint256);\\n\\n    function deviation() external view returns (bool);\\n\\n    function checkOpenPosition(uint16 level) external view;\\n\\n    function requireSystemActive() external view;\\n\\n    function requireSystemSuspend() external view;\\n\\n    function resumeSystem() external;\\n\\n    function suspendSystem() external;\\n\\n    function mulClosingFee(uint256 value) external view returns (uint256);\\n\\n    function mulLiquidationFee(uint256 margin, uint256 deltaBlock) external view returns (uint256);\\n\\n    function mulMarginRatio(uint256 margin) external view returns (uint256);\\n\\n    function mulProtocolFee(uint256 amount) external view returns (uint256);\\n\\n    function mulLiqProtocolFee(uint256 amount) external view returns (uint256);\\n\\n    function meetImbalanceThreshold(\\n        uint256 nakedPosition,\\n        uint256 liquidityPool\\n    ) external view returns (bool);\\n\\n    function mulImbalanceThreshold(uint256 liquidityPool)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calDeviation(uint256 nakedPosition, uint256 liquidityPool)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calRebaseDelta(\\n        uint256 rebaseSizeXBlockDelta,\\n        uint256 imbalanceSize\\n    ) external view returns (uint256);\\n\\n    function calDebtRepay(\\n        uint256 lsPnl,\\n        uint256 totalDebt,\\n        uint256 totalLiquidity\\n    ) external view returns (uint256);\\n\\n    function calDebtIssue(\\n        uint256 tdPnl,\\n        uint256 lsAvgPrice,\\n        uint256 lsPrice\\n    ) external view returns (uint256);\\n\\n    function mulInterestFromDebt(\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function divInterestFromDebt(\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function mulLiquidityCoefficient(\\n        uint256 nakedPositions\\n    ) external view returns (uint256);\\n\\n    enum systemParam {\\n        MarginRatio,\\n        ProtocolFee,\\n        LiqProtocolFee,\\n        ClosingFee,\\n        LiqFeeBase,\\n        LiqFeeMax,\\n        LiqFeeCoefficient,\\n        LiqLsRequire,\\n        RebaseCoefficient,\\n        ImbalanceThreshold,\\n        PriceDeviationCoefficient,\\n        MinHoldingPeriod,\\n        DebtStart,\\n        DebtAll,\\n        MinDebtRepay,\\n        MaxDebtRepay,\\n        InterestRate,\\n        LiquidityCoefficient,\\n        Other\\n    }\\n\\n    event AddLeverage(uint32 leverage);\\n    event DeleteLeverage(uint32 leverage);\\n\\n    event SetSystemParam(systemParam param, uint256 value);\\n    event SetDeviation(bool deviation);\\n\\n    event SetPoolOwner(address pool, address owner);\\n    event SetPoolParam(address pool, systemParam param, uint256 value);\\n    event SetPoolDeviation(address pool, bool deviation);\\n\\n    event Suspend(address indexed sender);\\n    event Resume(address indexed sender);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IPoolFactory {\\n    function createPoolFromUni(address tradeToken, address poolToken, uint24 fee, bool reverse) external;\\n\\n    function createPoolFromSushi(address tradeToken, address poolToken, bool reverse) external;\\n\\n    function pools(address poolToken, address oraclePool, bool reverse) external view returns (address pool);\\n\\n    event CreatePoolFromUni(\\n        address tradeToken,\\n        address poolToken,\\n        address uniPool,\\n        address pool,\\n        address debt,\\n        string tradePair,\\n        uint24 fee,\\n        bool reverse);\\n\\n    event CreatePoolFromSushi(\\n        address tradeToken,\\n        address poolToken,\\n        address sushiPool,\\n        address pool,\\n        address debt,\\n        string tradePair,\\n        bool reverse);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IPool {\\n    struct Position {\\n        uint256 openPrice;\\n        uint256 openBlock;\\n        uint256 margin;\\n        uint256 size;\\n        uint256 openRebase;\\n        address account;\\n        uint8 direction;\\n    }\\n\\n    function _positions(uint32 positionId)\\n        external\\n        view\\n        returns (\\n            uint256 openPrice,\\n            uint256 openBlock,\\n            uint256 margin,\\n            uint256 size,\\n            uint256 openRebase,\\n            address account,\\n            uint8 direction\\n        );\\n\\n    function debtToken() external view returns (address);\\n\\n    function lsTokenPrice() external view returns (uint256);\\n\\n    function addLiquidity(address user, uint256 amount) external;\\n\\n    function removeLiquidity(address user, uint256 lsAmount, uint256 bondsAmount, address receipt) external;\\n\\n    function openPosition(\\n        address user,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external returns (uint32);\\n\\n    function addMargin(\\n        address user,\\n        uint32 positionId,\\n        uint256 margin\\n    ) external;\\n\\n    function closePosition(\\n        address receipt,\\n        uint32 positionId\\n    ) external;\\n\\n    function liquidate(\\n        address user,\\n        uint32 positionId,\\n        address receipt\\n    ) external;\\n\\n    function exit(\\n        address receipt,\\n        uint32 positionId\\n    ) external;\\n\\n    event MintLiquidity(uint256 amount);\\n\\n    event AddLiquidity(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 lsAmount,\\n        uint256 bonds\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 lsAmount,\\n        uint256 bondsRequired\\n    );\\n\\n    event OpenPosition(\\n        address indexed sender,\\n        uint256 openPrice,\\n        uint256 openRebase,\\n        uint8 direction,\\n        uint16 level,\\n        uint256 margin,\\n        uint256 size,\\n        uint32 positionId\\n    );\\n\\n    event AddMargin(\\n        address indexed sender,\\n        uint256 margin,\\n        uint32 positionId\\n    );\\n\\n    event ClosePosition(\\n        address indexed receipt,\\n        uint256 closePrice,\\n        uint256 serviceFee,\\n        uint256 fundingFee,\\n        uint256 pnl,\\n        uint32  positionId,\\n        bool isProfit,\\n        int256 debtChange\\n    );\\n\\n    event Liquidate(\\n        address indexed sender,\\n        uint32 positionID,\\n        uint256 liqPrice,\\n        uint256 serviceFee,\\n        uint256 fundingFee,\\n        uint256 liqReward,\\n        uint256 pnl,\\n        bool isProfit,\\n        uint256 debtRepay\\n    );\\n\\n    event Rebase(uint256 rebaseAccumulatedLong, uint256 rebaseAccumulatedShort);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IDeployer01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IDeployer01 {\\n    function deploy(\\n        address poolToken,\\n        address uniPool,\\n        address setting,\\n        string memory tradePair,\\n        bool reverse,\\n        uint8 oracle) external returns (address, address);\\n}\\n\"\r\n    },\r\n    \"/contracts/SystemSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./libraries/BasicMaths.sol\\\";\\nimport \\\"./interfaces/ISystemSettings.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract SystemSettings is ISystemSettings, Ownable {\\n    using SafeMath for uint256;\\n    using BasicMaths for uint256;\\n    using BasicMaths for bool;\\n\\n    mapping(address => PoolSetting) private _poolSettings;\\n    mapping(address => uint256) private _debtSettings;\\n    mapping(uint32 => bool) public override leverages;\\n    uint256 public override marginRatio;\\n    uint256 public override protocolFee;\\n    uint256 public override liqProtocolFee;\\n    uint256 public override closingFee;\\n    uint256 public override liqFeeBase;\\n    uint256 public override liqFeeMax;\\n    uint256 public override liqFeeCoefficient;\\n    uint256 public override rebaseCoefficient;\\n    uint256 public override imbalanceThreshold;\\n    uint256 public override priceDeviationCoefficient;\\n    uint256 public override debtStart;\\n    uint256 public override debtAll;\\n    uint256 public override minDebtRepay;\\n    uint256 public override maxDebtRepay;\\n    uint256 public override interestRate;\\n    uint256 public override liquidityCoefficient;\\n\\n    uint256 private _liqLsRequire;\\n    uint256 private _minHoldingPeriod;\\n    bool    private _deviation;\\n\\n    uint256 private constant E4 = 1e4;\\n    uint256 private constant E18 = 1e18;\\n    uint256 private constant E38 = 1e38;\\n\\n    bool private _active;\\n    address private _official;\\n    address private _suspender;\\n    address private _deployer02;\\n\\n    constructor(address deployer02) {\\n        _official = msg.sender;\\n        _suspender = msg.sender;\\n        _deployer02 = deployer02;\\n    }\\n\\n    function official() external view override returns (address) {\\n        return _official;\\n    }\\n\\n    function deployer02() external view override returns (address) {\\n        return _deployer02;\\n    }\\n\\n    function requireSystemActive() external view override {\\n        require(_active, \\\"system is suspended\\\");\\n    }\\n\\n    function requireSystemSuspend() external view override {\\n        require(!_active, \\\"system is active\\\");\\n    }\\n\\n    function resumeSystem() external override onlySuspender {\\n        _active = true;\\n        emit Resume(msg.sender);\\n    }\\n\\n    function suspendSystem() external override onlySuspender {\\n        _active = false;\\n        emit Suspend(msg.sender);\\n    }\\n\\n    function liqLsRequire() external view override returns (uint256) {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return _liqLsRequire;\\n        } else {\\n            return poolSetting.liqLsRequire;\\n        }\\n    }\\n\\n    function minHoldingPeriod() external view override returns (uint256) {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return _minHoldingPeriod;\\n        } else {\\n            return poolSetting.minHoldingPeriod;\\n        }\\n    }\\n\\n    function deviation() external view override returns (bool) {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return _deviation;\\n        } else {\\n            return poolSetting.deviation;\\n        }\\n    }\\n\\n    function checkOpenPosition(uint16 level) external view override {\\n        require(_active, \\\"system is suspended\\\");\\n        require(leverages[level], \\\"Non-Exist Leverage\\\");\\n    }\\n\\n    function mulClosingFee(uint256 value)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return closingFee.mul(value) / E4;\\n        } else {\\n            return poolSetting.closingFee.mul(value) / E4;\\n        }\\n    }\\n\\n    function mulLiquidationFee(uint256 margin, uint256 deltaBlock)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n\\n        uint256 liqRatio;\\n        if (poolSetting.owner == address(0)) {\\n            if (liqFeeBase == liqFeeMax) {\\n                return liqFeeBase.mul(margin) / E4;\\n            }\\n\\n            liqRatio = deltaBlock.mul(liqFeeMax.sub(liqFeeBase)) / liqFeeCoefficient + liqFeeBase;\\n            if (liqRatio < liqFeeMax) {\\n                return liqRatio.mul(margin) / E4;\\n            } else {\\n                return liqFeeMax.mul(margin) / E4;\\n            }\\n        } else {\\n            if (poolSetting.liqFeeBase == poolSetting.liqFeeMax) {\\n                return poolSetting.liqFeeBase.mul(margin) / E4;\\n            }\\n\\n            liqRatio = deltaBlock.mul(poolSetting.liqFeeMax.sub(poolSetting.liqFeeBase)) / poolSetting.liqFeeCoefficient + poolSetting.liqFeeBase;\\n            if (liqRatio < poolSetting.liqFeeMax) {\\n                return liqRatio.mul(margin) / E4;\\n            } else {\\n                return poolSetting.liqFeeMax.mul(margin) / E4;\\n            }\\n        }\\n    }\\n\\n    function mulMarginRatio(uint256 margin)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return marginRatio.mul(margin) / E4;\\n        } else {\\n            return poolSetting.marginRatio.mul(margin) / E4;\\n        }\\n    }\\n\\n    function mulProtocolFee(uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return protocolFee.mul(amount) / E4;\\n    }\\n\\n    function mulLiqProtocolFee(uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return liqProtocolFee.mul(amount) / E4;\\n    }\\n\\n    function meetImbalanceThreshold(\\n        uint256 nakedPosition,\\n        uint256 liquidityPool\\n    ) external view override returns (bool) {\\n        uint256 D = (nakedPosition).mul(E4) / liquidityPool;\\n\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return D > imbalanceThreshold;\\n        } else {\\n            return D > poolSetting.imbalanceThreshold;\\n        }\\n    }\\n\\n    function mulImbalanceThreshold(uint256 liquidityPool)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return liquidityPool.mul(imbalanceThreshold) / E4;\\n        } else {\\n            return liquidityPool.mul(poolSetting.imbalanceThreshold) / E4;\\n        }\\n    }\\n\\n    function calRebaseDelta(\\n        uint256 rebaseSizeXBlockDelta,\\n        uint256 imbalanceSize\\n    ) external view override returns (uint256) {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return rebaseSizeXBlockDelta.mul(E18).div(rebaseCoefficient).div(imbalanceSize);\\n        } else {\\n            return rebaseSizeXBlockDelta.mul(E18).div(poolSetting.rebaseCoefficient).div(imbalanceSize);\\n        }\\n    }\\n\\n    function calDeviation(uint256 nakedPosition, uint256 liquidityPool)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 D = nakedPosition.mul(E18) / liquidityPool;\\n        require(D < E38, \\\"Maximum deviation is 100%\\\");\\n\\n        uint256 deviationResult;\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            deviationResult = (D.pow() / E18).mul(\\n                priceDeviationCoefficient\\n            ) / E4;\\n        } else {\\n            deviationResult = (D.pow() / E18).mul(\\n                poolSetting.priceDeviationCoefficient\\n            ) / E4;\\n        }\\n\\n        // Maximum deviation is 1e18\\n        require(deviationResult < E18, \\\"Maximum deviation is 100%\\\");\\n        return deviationResult;\\n    }\\n\\n    function calDebtRepay(\\n        uint256 lsPnl,\\n        uint256 totalDebtWithInterest,\\n        uint256 totalLiquidity\\n    ) external view override returns (uint256 repay) {\\n\\n        uint256 minRepay;\\n        uint256 maxRepay;\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            minRepay = lsPnl.mul(minDebtRepay) / E4;\\n            maxRepay = lsPnl.mul(maxDebtRepay) / E4;\\n        } else {\\n            minRepay = lsPnl.mul(poolSetting.minDebtRepay) / E4;\\n            maxRepay = lsPnl.mul(poolSetting.maxDebtRepay) / E4;\\n        }\\n\\n        repay = totalDebtWithInterest.pow().mul(lsPnl) / totalLiquidity.pow();\\n\\n        if (repay < minRepay) {\\n            repay = minRepay;\\n        }\\n\\n        if (repay > maxRepay) {\\n            repay = maxRepay;\\n        }\\n\\n        if (repay > totalDebtWithInterest) {\\n            repay = totalDebtWithInterest;\\n        }\\n\\n        return repay;\\n    }\\n\\n    function calDebtIssue(\\n        uint256 tdPnl,\\n        uint256 lsAvgPrice,\\n        uint256 lsPrice\\n    ) external view override returns (uint256) {\\n\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            if (lsPrice.mul(E4) >= lsAvgPrice.mul(debtStart)) {\\n                return 0;\\n            }\\n\\n            if (lsPrice.mul(E4) <= lsAvgPrice.mul(debtAll)) {\\n                return tdPnl;\\n            }\\n        } else {\\n            if (lsPrice.mul(E4) >= lsAvgPrice.mul(poolSetting.debtStart)) {\\n                return 0;\\n            }\\n\\n            if (lsPrice.mul(E4) <= lsAvgPrice.mul(poolSetting.debtAll)) {\\n                return tdPnl;\\n            }\\n        }\\n\\n        return lsAvgPrice.sub(lsPrice).pow().mul(tdPnl) / lsAvgPrice.pow();\\n    }\\n\\n    function mulInterestFromDebt(\\n        uint256 amount\\n    ) external view override returns (uint256) {\\n        uint256 interestRateFromDebt = _debtSettings[msg.sender];\\n        if (interestRateFromDebt == 0) {\\n            return amount.mul(interestRate) / E4;\\n        } else {\\n            return amount.mul(interestRateFromDebt) / E4;\\n        }\\n    }\\n\\n    function divInterestFromDebt(\\n        uint256 amount\\n    ) external view override returns (uint256) {\\n        uint256 interestRateFromDebt = _debtSettings[msg.sender];\\n        if (interestRateFromDebt == 0) {\\n            return amount.mul(E4) / interestRate;\\n        } else {\\n            return amount.mul(E4) / interestRateFromDebt;\\n        }\\n    }\\n\\n    function mulLiquidityCoefficient(\\n        uint256 nakedPositions\\n    ) external view override returns (uint256) {\\n        PoolSetting memory poolSetting = _poolSettings[msg.sender];\\n        if (poolSetting.owner == address(0)) {\\n            return nakedPositions.mul(E4).div(liquidityCoefficient);\\n        } else {\\n            return nakedPositions.mul(E4).div(poolSetting.liquidityCoefficient);\\n        }\\n    }\\n\\n    /*--------------------------------------------------------------------------------------------------*/\\n\\n    function setProtocolFee(uint256 protocolFee_) external onlyOwner {\\n        require(protocolFee_ <= E4, \\\"over range\\\");\\n        protocolFee = protocolFee_;\\n        emit SetSystemParam(systemParam.ProtocolFee, protocolFee_);\\n    }\\n\\n    function setLiqProtocolFee(uint256 liqProtocolFee_) external onlyOwner {\\n        require(liqProtocolFee_ <= E4, \\\"over range\\\");\\n        liqProtocolFee = liqProtocolFee_;\\n        emit SetSystemParam(systemParam.LiqProtocolFee, liqProtocolFee_);\\n    }\\n\\n    function setMarginRatio(uint256 marginRatio_) external onlyOwner {\\n        require(marginRatio_ <= E4, \\\"over range\\\");\\n        marginRatio = marginRatio_;\\n        emit SetSystemParam(systemParam.MarginRatio, marginRatio_);\\n    }\\n\\n    function setClosingFee(uint256 closingFee_) external onlyOwner {\\n        require(closingFee_ <= 1e2, \\\"over range\\\");\\n        closingFee = closingFee_;\\n        emit SetSystemParam(systemParam.ClosingFee, closingFee_);\\n    }\\n\\n    function setLiqFeeBase(uint256 liqFeeBase_) external onlyOwner {\\n        require(liqFeeBase_ <= E4, \\\"over range\\\");\\n        require(liqFeeMax > liqFeeBase_, \\\"liqFeeMax must > liqFeeBase\\\");\\n        liqFeeBase = liqFeeBase_;\\n        emit SetSystemParam(systemParam.LiqFeeBase, liqFeeBase_);\\n    }\\n\\n    function setLiqFeeMax(uint256 liqFeeMax_) external onlyOwner {\\n        require(liqFeeMax_ <= E4, \\\"over range\\\");\\n        require(liqFeeMax_ > liqFeeBase, \\\"liqFeeMax must > liqFeeBase\\\");\\n        liqFeeMax = liqFeeMax_;\\n        emit SetSystemParam(systemParam.LiqFeeMax, liqFeeMax_);\\n    }\\n\\n    function setLiqFeeCoefficient(uint256 liqFeeCoefficient_) external onlyOwner {\\n        require(liqFeeCoefficient_ > 0 && liqFeeCoefficient_ <= 576000, \\\"over range\\\");\\n        liqFeeCoefficient = liqFeeCoefficient_;\\n        emit SetSystemParam(systemParam.LiqFeeCoefficient, liqFeeCoefficient_);\\n    }\\n\\n    function setLiqLsRequire(uint256 liqLsRequire_) external onlyOwner {\\n        _liqLsRequire = liqLsRequire_;\\n        emit SetSystemParam(systemParam.LiqLsRequire, liqLsRequire_);\\n    }\\n\\n    function addLeverage(uint32 leverage_) external onlyOwner {\\n        leverages[leverage_] = true;\\n        emit AddLeverage(leverage_);\\n    }\\n\\n    function deleteLeverage(uint32 leverage_) external onlyOwner {\\n        leverages[leverage_] = false;\\n        emit DeleteLeverage(leverage_);\\n    }\\n\\n    function setRebaseCoefficient(uint256 rebaseCoefficient_)\\n        external\\n        onlyOwner\\n    {\\n        require(rebaseCoefficient_ > 0 && rebaseCoefficient_ <= 5760000, \\\"over range\\\");\\n        rebaseCoefficient = rebaseCoefficient_;\\n        emit SetSystemParam(systemParam.RebaseCoefficient, rebaseCoefficient_);\\n    }\\n\\n    function setImbalanceThreshold(uint256 imbalanceThreshold_)\\n        external\\n        onlyOwner\\n    {\\n        require(imbalanceThreshold_ <= 1e6, \\\"over range\\\");\\n        imbalanceThreshold = imbalanceThreshold_;\\n        emit SetSystemParam(\\n            systemParam.ImbalanceThreshold,\\n            imbalanceThreshold_\\n        );\\n    }\\n\\n    function setPriceDeviationCoefficient(uint256 priceDeviationCoefficient_)\\n        external\\n        onlyOwner\\n    {\\n        require(priceDeviationCoefficient_ <= 1e6, \\\"over range\\\");\\n        priceDeviationCoefficient = priceDeviationCoefficient_;\\n        emit SetSystemParam(\\n            systemParam.PriceDeviationCoefficient,\\n            priceDeviationCoefficient_\\n        );\\n    }\\n\\n    function setMinHoldingPeriod(uint256 minHoldingPeriod_)\\n        external\\n        onlyOwner\\n    {\\n        require(minHoldingPeriod_ <= 5760, \\\"over range\\\");\\n        _minHoldingPeriod = minHoldingPeriod_;\\n        emit SetSystemParam(\\n            systemParam.MinHoldingPeriod,\\n            minHoldingPeriod_\\n        );\\n    }\\n\\n    function setDebtStart(uint256 debtStart_)\\n        external\\n        onlyOwner\\n    {\\n        require(debtStart_ <= E4, \\\"over range\\\");\\n        debtStart = debtStart_;\\n        emit SetSystemParam(\\n            systemParam.DebtStart,\\n            debtStart_\\n        );\\n    }\\n\\n    function setDebtAll(uint256 debtAll_)\\n        external\\n        onlyOwner\\n    {\\n        require(debtAll_ <= E4, \\\"over range\\\");\\n        debtAll = debtAll_;\\n        emit SetSystemParam(\\n            systemParam.DebtAll,\\n            debtAll_\\n        );\\n    }\\n\\n    function setMinDebtRepay(uint256 minDebtRepay_)\\n        external\\n        onlyOwner\\n    {\\n        require(minDebtRepay_ <= E4, \\\"over range\\\");\\n        minDebtRepay = minDebtRepay_;\\n        emit SetSystemParam(\\n            systemParam.MinDebtRepay,\\n            minDebtRepay_\\n        );\\n    }\\n\\n    function setMaxDebtRepay(uint256 maxDebtRepay_)\\n        external\\n        onlyOwner\\n    {\\n        require(maxDebtRepay_ <= E4, \\\"over range\\\");\\n        maxDebtRepay = maxDebtRepay_;\\n        emit SetSystemParam(\\n            systemParam.MaxDebtRepay,\\n            maxDebtRepay_\\n        );\\n    }\\n\\n    function setInterestRate(uint256 interestRate_)\\n        external\\n        onlyOwner\\n    {\\n        require(interestRate_ >= E4 && interestRate_ <= 2*E4, \\\"over range\\\");\\n        interestRate = interestRate_;\\n        emit SetSystemParam(\\n            systemParam.InterestRate,\\n            interestRate_\\n        );\\n    }\\n\\n    function setLiquidityCoefficient(uint256 liquidityCoefficient_)\\n        external\\n        onlyOwner\\n    {\\n        require(liquidityCoefficient_ > 0 && liquidityCoefficient_ <= 1e6, \\\"over range\\\");\\n        liquidityCoefficient = liquidityCoefficient_;\\n        emit SetSystemParam(\\n            systemParam.LiquidityCoefficient,\\n            liquidityCoefficient_\\n        );\\n    }\\n\\n    function setDeviation(bool deviation_) external onlyOwner {\\n        _deviation = deviation_;\\n        emit SetDeviation(_deviation);\\n    }\\n\\n    /*--------------------------------------------------------------------------------------------------*/\\n\\n    function setMarginRatioByPool(address pool, uint256 marginRatio_) external onlyPoolOwner(pool) {\\n        require(marginRatio_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].marginRatio = marginRatio_;\\n        emit SetPoolParam(pool, systemParam.MarginRatio, marginRatio_);\\n    }\\n\\n    function setClosingFeeByPool(address pool, uint256 closingFee_) external onlyPoolOwner(pool) {\\n        require(closingFee_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].closingFee = closingFee_;\\n        emit SetPoolParam(pool, systemParam.ClosingFee, closingFee_);\\n    }\\n\\n    function setLiqFeeBaseByPool(address pool, uint256 liqFeeBase_) external onlyPoolOwner(pool) {\\n        require(liqFeeBase_ <= E4, \\\"over range\\\");\\n        require(_poolSettings[pool].liqFeeMax > liqFeeBase_, \\\"liqFeeMax must > liqFeeBase\\\");\\n        _poolSettings[pool].liqFeeBase = liqFeeBase_;\\n        emit SetPoolParam(pool, systemParam.LiqFeeBase, liqFeeBase_);\\n    }\\n\\n    function setLiqFeeMaxByPool(address pool, uint256 liqFeeMax_) external onlyPoolOwner(pool) {\\n        require(liqFeeMax_ <= E4, \\\"over range\\\");\\n        require(liqFeeMax_ > _poolSettings[pool].liqFeeBase, \\\"liqFeeMax must > liqFeeBase\\\");\\n        _poolSettings[pool].liqFeeMax = liqFeeMax_;\\n        emit SetPoolParam(pool, systemParam.LiqFeeMax, liqFeeMax_);\\n    }\\n\\n    function setLiqFeeCoefficientByPool(address pool, uint256 liqFeeCoefficient_) external onlyPoolOwner(pool) {\\n        require(liqFeeCoefficient_ > 0 && liqFeeCoefficient_ <= 576000, \\\"over range\\\");\\n        _poolSettings[pool].liqFeeCoefficient = liqFeeCoefficient_;\\n        emit SetPoolParam(pool, systemParam.LiqFeeCoefficient, liqFeeCoefficient_);\\n    }\\n\\n    function setLiqLsRequireByPool(address pool, uint256 liqLsRequire_) external onlyPoolOwner(pool) {\\n        _poolSettings[pool].liqLsRequire = liqLsRequire_;\\n        emit SetPoolParam(pool, systemParam.LiqLsRequire, liqLsRequire_);\\n    }\\n\\n    function setRebaseCoefficientByPool(address pool, uint256 rebaseCoefficient_) external onlyPoolOwner(pool) {\\n        require(rebaseCoefficient_ > 0 && rebaseCoefficient_ <= 5760000, \\\"over range\\\");\\n        _poolSettings[pool].rebaseCoefficient = rebaseCoefficient_;\\n        emit SetPoolParam(pool, systemParam.RebaseCoefficient, rebaseCoefficient_);\\n    }\\n\\n    function setImbalanceThresholdByPool(address pool, uint256 imbalanceThreshold_) external onlyPoolOwner(pool) {\\n        require(imbalanceThreshold_ <= 1e6, \\\"over range\\\");\\n        _poolSettings[pool].imbalanceThreshold = imbalanceThreshold_;\\n        emit SetPoolParam(pool, systemParam.ImbalanceThreshold, imbalanceThreshold_);\\n    }\\n\\n    function setPriceDeviationCoefficientByPool(address pool, uint256 priceDeviationCoefficient_) external onlyPoolOwner(pool) {\\n        require(priceDeviationCoefficient_ <= 1e6, \\\"over range\\\");\\n        _poolSettings[pool].priceDeviationCoefficient = priceDeviationCoefficient_;\\n        emit SetPoolParam(pool, systemParam.PriceDeviationCoefficient, priceDeviationCoefficient_);\\n    }\\n\\n    function setMinHoldingPeriodByPool(address pool, uint256 minHoldingPeriod_) external onlyPoolOwner(pool) {\\n        require(minHoldingPeriod_ <= 5760, \\\"over range\\\");\\n        _poolSettings[pool].minHoldingPeriod = minHoldingPeriod_;\\n        emit SetPoolParam(pool, systemParam.MinHoldingPeriod, minHoldingPeriod_);\\n    }\\n\\n    function setDebtStartByPool(address pool, uint256 debtStart_) external onlyPoolOwner(pool) {\\n        require(debtStart_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].debtStart = debtStart_;\\n        emit SetPoolParam(pool, systemParam.DebtStart, debtStart_);\\n    }\\n\\n    function setDebtAllByPool(address pool, uint256 debtAll_) external onlyPoolOwner(pool) {\\n        require(debtAll_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].debtAll = debtAll_;\\n        emit SetPoolParam(pool, systemParam.DebtAll, debtAll_);\\n    }\\n\\n    function setMinDebtRepayByPool(address pool, uint256 minDebtRepay_) external onlyPoolOwner(pool) {\\n        require(minDebtRepay_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].minDebtRepay = minDebtRepay_;\\n        emit SetPoolParam(pool, systemParam.MinDebtRepay, minDebtRepay_);\\n    }\\n\\n    function setMaxDebtRepayByPool(address pool, uint256 maxDebtRepay_) external onlyPoolOwner(pool) {\\n        require(maxDebtRepay_ <= E4, \\\"over range\\\");\\n        _poolSettings[pool].maxDebtRepay = maxDebtRepay_;\\n        emit SetPoolParam(pool, systemParam.MaxDebtRepay, maxDebtRepay_);\\n    }\\n\\n    function setInterestRateByPool(address pool, uint256 interestRate_) external onlyPoolOwner(pool) {\\n        require(interestRate_ >= E4 && interestRate_ <= 2*E4, \\\"over range\\\");\\n        _poolSettings[pool].interestRate = interestRate_;\\n        _debtSettings[IPool(pool).debtToken()] = interestRate_;\\n        emit SetPoolParam(pool, systemParam.InterestRate, interestRate_);\\n    }\\n\\n    function setLiquidityCoefficientByPool(address pool, uint256 liquidityCoefficient_) external onlyPoolOwner(pool) {\\n        require(liquidityCoefficient_ > 0 && liquidityCoefficient_ <= 1e6, \\\"over range\\\");\\n        _poolSettings[pool].liquidityCoefficient = liquidityCoefficient_;\\n        emit SetPoolParam(pool, systemParam.LiquidityCoefficient, liquidityCoefficient_);\\n    }\\n\\n    function setDeviationByPool(address pool, bool deviation_) external onlyPoolOwner(pool) {\\n        _poolSettings[pool].deviation = deviation_;\\n        emit SetPoolDeviation(pool, deviation_);\\n    }\\n\\n    function setPoolOwner(address pool, address newOwner) external onlyOwner {\\n        if (_poolSettings[pool].owner != address(0)) {\\n            _poolSettings[pool].owner = newOwner;\\n        } else {\\n            _poolSettings[pool] = PoolSetting(\\n                newOwner,\\n                marginRatio,\\n                closingFee,\\n                liqFeeBase,\\n                liqFeeMax,\\n                liqFeeCoefficient,\\n                _liqLsRequire,\\n                rebaseCoefficient,\\n                imbalanceThreshold,\\n                priceDeviationCoefficient,\\n                _minHoldingPeriod,\\n                debtStart,\\n                debtAll,\\n                minDebtRepay,\\n                maxDebtRepay,\\n                interestRate,\\n                liquidityCoefficient,\\n                _deviation\\n            );\\n            _debtSettings[IPool(pool).debtToken()] = interestRate;\\n        }\\n\\n        emit SetPoolOwner(pool, newOwner);\\n    }\\n\\n    function setOfficial(address official) external onlyOwner {\\n        _official = official;\\n    }\\n\\n    function setSuspender(address suspender) external onlySuspender {\\n        _suspender = suspender;\\n    }\\n\\n    modifier onlySuspender() {\\n        require(\\n            _suspender == msg.sender,\\n            \\\"caller is not the suspender\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPoolOwner(address pool) {\\n        require(\\n            _poolSettings[pool].owner == msg.sender,\\n            \\\"caller is not the pool owner\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniFactoryV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFactoryV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushiFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer01\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer02\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"}],\"name\":\"AddLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sushiPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tradePair\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"CreatePoolFromSushi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uniPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tradePair\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"CreatePoolFromUni\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"}],\"name\":\"DeleteLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deviation\",\"type\":\"bool\"}],\"name\":\"SetDeviation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deviation\",\"type\":\"bool\"}],\"name\":\"SetPoolDeviation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetPoolOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ISystemSettings.systemParam\",\"name\":\"param\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetPoolParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ISystemSettings.systemParam\",\"name\":\"param\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetSystemParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Suspend\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"leverage_\",\"type\":\"uint32\"}],\"name\":\"addLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tdPnl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lsAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lsPrice\",\"type\":\"uint256\"}],\"name\":\"calDebtIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lsPnl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtWithInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"}],\"name\":\"calDebtRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nakedPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPool\",\"type\":\"uint256\"}],\"name\":\"calDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseSizeXBlockDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imbalanceSize\",\"type\":\"uint256\"}],\"name\":\"calRebaseDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"}],\"name\":\"checkOpenPosition\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"createPoolFromSushi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"createPoolFromUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"leverage_\",\"type\":\"uint32\"}],\"name\":\"deleteLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer02\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"divInterestFromDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imbalanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"leverages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFeeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFeeCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqLsRequire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nakedPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPool\",\"type\":\"uint256\"}],\"name\":\"meetImbalanceThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebtRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mulClosingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPool\",\"type\":\"uint256\"}],\"name\":\"mulImbalanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mulInterestFromDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mulLiqProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaBlock\",\"type\":\"uint256\"}],\"name\":\"mulLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nakedPositions\",\"type\":\"uint256\"}],\"name\":\"mulLiquidityCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mulMarginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mulProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"official\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDeviationCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireSystemActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireSystemSuspend\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"closingFee_\",\"type\":\"uint256\"}],\"name\":\"setClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closingFee_\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAll_\",\"type\":\"uint256\"}],\"name\":\"setDebtAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAll_\",\"type\":\"uint256\"}],\"name\":\"setDebtAllByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtStart_\",\"type\":\"uint256\"}],\"name\":\"setDebtStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtStart_\",\"type\":\"uint256\"}],\"name\":\"setDebtStartByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"deviation_\",\"type\":\"bool\"}],\"name\":\"setDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deviation_\",\"type\":\"bool\"}],\"name\":\"setDeviationByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"imbalanceThreshold_\",\"type\":\"uint256\"}],\"name\":\"setImbalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"imbalanceThreshold_\",\"type\":\"uint256\"}],\"name\":\"setImbalanceThresholdByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"setInterestRateByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqFeeBase_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqFeeBase_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeBaseByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqFeeCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqFeeCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeCoefficientByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqFeeMax_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqFeeMax_\",\"type\":\"uint256\"}],\"name\":\"setLiqFeeMaxByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqLsRequire_\",\"type\":\"uint256\"}],\"name\":\"setLiqLsRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liqLsRequire_\",\"type\":\"uint256\"}],\"name\":\"setLiqLsRequireByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqProtocolFee_\",\"type\":\"uint256\"}],\"name\":\"setLiqProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setLiquidityCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setLiquidityCoefficientByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marginRatio_\",\"type\":\"uint256\"}],\"name\":\"setMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marginRatio_\",\"type\":\"uint256\"}],\"name\":\"setMarginRatioByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDebtRepay_\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtRepay_\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRepayByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDebtRepay_\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDebtRepay_\",\"type\":\"uint256\"}],\"name\":\"setMinDebtRepayByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minHoldingPeriod_\",\"type\":\"uint256\"}],\"name\":\"setMinHoldingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingPeriod_\",\"type\":\"uint256\"}],\"name\":\"setMinHoldingPeriodByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"official\",\"type\":\"address\"}],\"name\":\"setOfficial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setPoolOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceDeviationCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setPriceDeviationCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceDeviationCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setPriceDeviationCoefficientByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setRebaseCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rebaseCoefficient_\",\"type\":\"uint256\"}],\"name\":\"setRebaseCoefficientByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"suspender\",\"type\":\"address\"}],\"name\":\"setSuspender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspendSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoolFactory", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f9840000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac000000000000000000000000d27788dc458e53aae1f856f7716ab56192dca55b000000000000000000000000735716dc46af1912a5535044a8b9dc9eae0adafa", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f7903b1149c38d8d70670437dcf3ec761e5718eb3a3f9d9e163e44657806993"}]}