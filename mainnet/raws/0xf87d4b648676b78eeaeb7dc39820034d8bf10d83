{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"CrossChainLocker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Utils.sol\\\";\\r\\n\\r\\ncontract CrossChainLocker {\\r\\n  address lockOwner;\\r\\n  address safeExchangeAddr;\\r\\n\\r\\n  constructor(address _lockOwner, address _safeExchangeAddr) {\\r\\n    lockOwner = _lockOwner;\\r\\n    safeExchangeAddr = _safeExchangeAddr;\\r\\n  }\\r\\n\\r\\n  modifier onlyLockOwner() {\\r\\n    require(tx.origin == lockOwner || msg.sender == address(safeExchangeAddr), \\\"Fuck off.\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function withdrawBalance(\\r\\n    address token,\\r\\n    address recipient,\\r\\n    uint256 amt\\r\\n  ) external payable onlyLockOwner {\\r\\n    require(amt \\u003e 0, \\\"amt is 0\\\");\\r\\n    if (token == address(0)) {\\r\\n      payable(recipient).transfer(amt);\\r\\n    } else {\\r\\n      IERC20(token).transfer(recipient, amt);\\r\\n    }\\r\\n  }\\r\\n}\"},\"DexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Utils.sol\\\";\\r\\n\\r\\ninterface IPancakePair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function kLast() external view returns (uint256);\\r\\n\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\\r\\nlibrary PancakeLibrary {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n    require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\r\\n    (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\r\\n  }\\r\\n\\r\\n  // calculates the CREATE2 address for a pair without making any external calls\\r\\n  function pairFor(\\r\\n    address factory,\\r\\n    address tokenA,\\r\\n    address tokenB\\r\\n  ) internal pure returns (address pair) {\\r\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n    pair = address(\\r\\n      uint160(\\r\\n        uint256(\\r\\n          keccak256(\\r\\n            abi.encodePacked(\\r\\n              hex\\\"ff\\\",\\r\\n              factory,\\r\\n              keccak256(abi.encodePacked(token0, token1)),\\r\\n              //hex\\\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\\" // init code hash (BSCMainnet)\\r\\n              // hex\\\"d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\\\" // BSC Testnet\\r\\n              //   hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" //ETH Mainnet\\r\\n              // hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" //ETH TESTNET\\r\\n               hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" //Polygon TESTNET\\r\\n              // hex\\\"a77ee1cc0f39570ddde947459e293d7ebc2c30ff4e8fc45860afdcb2c2d3dc17\\\" //Cronos Main\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // fetches and sorts the reserves for a pair\\r\\n  function getReserves(\\r\\n    address factory,\\r\\n    address tokenA,\\r\\n    address tokenB\\r\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\r\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\r\\n    pairFor(factory, tokenA, tokenB);\\r\\n    (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n  }\\r\\n\\r\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) internal pure returns (uint256 amountB) {\\r\\n    require(amountA \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\r\\n    require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\r\\n    amountB = amountA.mul(reserveB) / reserveA;\\r\\n  }\\r\\n\\r\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n  function getAmountOut(\\r\\n    uint256 amountIn,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) internal pure returns (uint256 amountOut) {\\r\\n    require(amountIn \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n    require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\r\\n    uint256 amountInWithFee = amountIn.mul(998);\\r\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\r\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n    amountOut = numerator / denominator;\\r\\n  }\\r\\n\\r\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n  function getAmountIn(\\r\\n    uint256 amountOut,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) internal pure returns (uint256 amountIn) {\\r\\n    require(amountOut \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n    require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\r\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n    uint256 denominator = reserveOut.sub(amountOut).mul(998);\\r\\n    amountIn = (numerator / denominator).add(1);\\r\\n  }\\r\\n\\r\\n  // performs chained getAmountOut calculations on any number of pairs\\r\\n  function getAmountsOut(\\r\\n    address factory,\\r\\n    uint256 amountIn,\\r\\n    address[] memory path\\r\\n  ) internal view returns (uint256[] memory amounts) {\\r\\n    require(path.length \\u003e= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\r\\n    amounts = new uint256[](path.length);\\r\\n    amounts[0] = amountIn;\\r\\n    for (uint256 i; i \\u003c path.length - 1; i++) {\\r\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // performs chained getAmountIn calculations on any number of pairs\\r\\n  function getAmountsIn(\\r\\n    address factory,\\r\\n    uint256 amountOut,\\r\\n    address[] memory path\\r\\n  ) internal view returns (uint256[] memory amounts) {\\r\\n    require(path.length \\u003e= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\r\\n    amounts = new uint256[](path.length);\\r\\n    amounts[amounts.length - 1] = amountOut;\\r\\n    for (uint256 i = path.length - 1; i \\u003e 0; i--) {\\r\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amountA,\\r\\n      uint256 amountB,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint256 amountTokenDesired,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n      uint256 amountToken,\\r\\n      uint256 amountETH,\\r\\n      uint256 liquidity\\r\\n    );\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountOut(\\r\\n    uint256 amountIn,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountOut);\\r\\n\\r\\n  function getAmountIn(\\r\\n    uint256 amountOut,\\r\\n    uint256 reserveIn,\\r\\n    uint256 reserveOut\\r\\n  ) external pure returns (uint256 amountIn);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n}\\r\\n\\r\\ninterface IAnyswapV4Router {\\r\\n  function anySwapOutUnderlying(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 toChainID\\r\\n  ) external;\\r\\n\\r\\n  function anySwapOut(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 toChainID\\r\\n  ) external;\\r\\n\\r\\n  function anySwapOutNative(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 toChainID\\r\\n  ) external payable;\\r\\n}\\r\\n\"},\"SafeExchange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"./DexUtils.sol\\\";\\r\\nimport \\\"./CrossChainLocker.sol\\\";\\r\\n\\r\\n\\r\\ncontract SafeExchange is ReentrancyGuard, Ownable, TokenManagement {\\r\\n  IUniswapV2Router02 swapRouter;\\r\\n\\r\\n  // IAnyswapV4Router anySwapRouter;\\r\\n  //0xf9736ec3926703e85c843fc972bd89a7f8e827c0 BSC    0x56\\r\\n  //0x639a647fbe20b6c8ac19e48e2de44ea792c62c5c CRONOS 0x25\\r\\n  uint256 public fee; // 100 = 1%\\r\\n  uint256 public standardization = 10000;\\r\\n  address payable public feeWallet;\\r\\n  //Event\\r\\n  event CrossChainLog(address token, address from, address to, uint256 amt, uint256 chainId);\\r\\n  event SwapNative(address tokenAddr, address from, address to, uint256 amt, uint256 feeAmt, uint256 tokenAmt);\\r\\n  event CreateSafeLocker(address userAddr, address lockerAddr);\\r\\n  event EmergentWithdraw(address token, uint256 amt, address userAddr);\\r\\n\\r\\n  mapping(address =\\u003e CrossChainLocker) public safeLockers;\\r\\n\\r\\n  CrossChainLocker[] public safeLockersArr;\\r\\n\\r\\n  modifier lockerExists(address _locker) {\\r\\n    bool _lockerNotExists = address(safeLockers[msg.sender]) == address(0);\\r\\n    CrossChainLocker locker;\\r\\n    if (!_lockerNotExists) {} else {\\r\\n      locker = new CrossChainLocker(msg.sender, address(this));\\r\\n      safeLockers[msg.sender] = locker;\\r\\n      address lockerAdd = address(safeLockers[msg.sender]);\\r\\n      safeLockersArr.push(locker);\\r\\n      emit CreateSafeLocker(msg.sender, lockerAdd);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    address _uniSwapAddr,\\r\\n    // address _anySwapAddr,\\r\\n    address _feeWallet\\r\\n  ) lockerExists(msg.sender) {\\r\\n    swapRouter = _uniSwapAddr != address(0) ? IUniswapV2Router02(_uniSwapAddr) : IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    // swapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // BSC Mainnet\\r\\n    // swapRouter = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // BSC Testnet\\r\\n\\r\\n    // swapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // ETH Mainnet\\r\\n    //swapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // ETH Testnet\\r\\n    //swapRouter = IUniswapV2Router02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff); //  polygon\\r\\n\\r\\n    // swapRouter = IUniswapV2Router02(_uniSwapAddr);\\r\\n    // anySwapRouter = IAnyswapV4Router(_anySwapAddr);\\r\\n    feeWallet = payable(_feeWallet);\\r\\n    fee = 100;\\r\\n\\r\\n    // init add anyTokenList//\\r\\n    // //bsc//\\r\\n    // 000000000000000000\\r\\n    isPassed = false;\\r\\n    //addToken(25, 0xEDF0c420bc3b92B961C6eC411cc810CA81F5F21a, 12000000000000000000, 20000000000000000000000000); // USDT -\\u003e chain25 (0.02 , 11000 )\\r\\n    //addToken(1, 0xDebB1d6a2196F2335aD51FBdE7Ca587205889360, 20000000000000000, 9640000000000000000000); // ETH(02 , 9640 )\\r\\n    //addToken(137, 0xBF731BFa03E0095A2039E7E4C3B466eFB7F3Ec4E, 5000000000000000000, 2500000000000000000000000); // MATIC(5 , 2500000 )\\r\\n    // //eth//\\r\\n    //addToken(56, 0x22648C12acD87912EA1710357B1302c6a4154Ebc, 12000000, 20000000000000); // USDT -\\u003e chain56 (,105000000)\\r\\n    // //polygon//\\r\\n    addToken(56, 0xE3eeDa11f06a656FcAee19de663E84C7e61d3Cac, 12000000, 20000000000000); // USDT-\\u003e chain56(12, 20000000))\\r\\n     //cronos//\\r\\n    //addToken(56, 0x739ca6D71365a08f584c8FC4e1029045Fa8ABC4B, 12000000, 20000000000000); //  USDT-\\u003e chain56( 0.02, 11000))\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  //native(source chain) -\\u003ewrap(destination chain)\\r\\n  //BNB(bsc) -\\u003e BNB(cronos)\\r\\n  function crossChainUtility(\\r\\n    address _anyToken,\\r\\n    address _to,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) external payable isUnderlying(_anyToken) nonReentrant {\\r\\n    uint256 feeAmt = (msg.value * fee) / standardization;\\r\\n    uint256 tokenAmt = msg.value - feeAmt;\\r\\n    require(isPassed || (tokenAmt \\u003e= tokenList[_chainId][_anyToken].minAmt \\u0026\\u0026 tokenAmt \\u003c= tokenList[_chainId][_anyToken].maxAmt), \\\"amt error\\\");\\r\\n    require(checkLimitAmounts(_chainId, _anyToken, tokenAmt) == 1, \\\"amt error\\\");\\r\\n    _anySwapOutNative(_anyToken, _to, tokenAmt, _chainId, _routerAddr);\\r\\n    feeWallet.transfer(feeAmt);\\r\\n\\r\\n    emit CrossChainLog(address(0), _to, msg.sender, msg.value - feeAmt, _chainId);\\r\\n  }\\r\\n\\r\\n  //wrap(source chain) -\\u003e native(destination chain)\\r\\n  // BNB(cronos) -\\u003e BNB(bsc)\\r\\n  function crossChainToken(\\r\\n    address _anyToken,\\r\\n    address _to,\\r\\n    uint256 _amt,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) external nonReentrant {\\r\\n    uint256 feeAmt = (_amt * fee) / standardization;\\r\\n    uint256 tokenAmt = _amt - feeAmt;\\r\\n    // require(isPassed || (tokenAmt \\u003e= tokenList[_chainId][_anyToken].minAmt \\u0026\\u0026 tokenAmt \\u003c= tokenList[_chainId][_anyToken].maxAmt), \\\"amt error\\\");\\r\\n    require(checkLimitAmounts(_chainId, _anyToken, tokenAmt) == 1, \\\"amt error\\\");\\r\\n    IAnyswapV1ERC20(_anyToken).transferFrom(msg.sender, address(this), tokenAmt);\\r\\n    _anySwapOut(_anyToken, _to, tokenAmt, _chainId, _routerAddr);\\r\\n    IAnyswapV1ERC20(_anyToken).transferFrom(msg.sender, feeWallet, feeAmt);\\r\\n\\r\\n    emit CrossChainLog(_anyToken, msg.sender, _to, _amt - feeAmt, _chainId);\\r\\n  }\\r\\n\\r\\n  //native(source chain) -\\u003ewrap(source chain) -\\u003e native(destination chain)\\r\\n  //ex:BNB(bsc) -\\u003e WETH(bsc) -\\u003e ETH(eth)\\r\\n  function integrateCrossChainUtility(\\r\\n    address _anyToken,\\r\\n    address _to,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) external payable isUnderlying(_anyToken) nonReentrant lockerExists(msg.sender) {\\r\\n    uint256 feeAmt = (msg.value * fee) / standardization;\\r\\n    address tokenAddr = IAnyswapV1ERC20(_anyToken).underlying();\\r\\n    uint256 tokenAmt = fetchAmountsOut(msg.value - feeAmt, tokenAddr)[1];\\r\\n    address lockerAddr = address(safeLockers[msg.sender]);\\r\\n    require(checkLimitAmounts(_chainId, _anyToken, tokenAmt) == 1, \\\"amt error\\\");\\r\\n    swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: msg.value - feeAmt }(0, getPath(swapRouter.WETH(), tokenAddr), lockerAddr, block.timestamp);\\r\\n    emit SwapNative(tokenAddr, msg.sender, lockerAddr, msg.value, feeAmt, tokenAmt);\\r\\n\\r\\n    tokenAmt = IERC20(tokenAddr).balanceOf(lockerAddr);\\r\\n    safeLockers[msg.sender].withdrawBalance(tokenAddr, address(this), tokenAmt);\\r\\n\\r\\n    _anySwapOutUnderlying(_anyToken, _to, tokenAmt, _chainId, _routerAddr);\\r\\n    feeWallet.transfer(feeAmt);\\r\\n    emit CrossChainLog(tokenAddr, msg.sender, _to, tokenAmt, _chainId);\\r\\n  }\\r\\n\\r\\n  // allow using _anySwapOutUnderlying\\r\\n  function crossChainUnderlying(\\r\\n    address _anyToken,\\r\\n    address _to,\\r\\n    uint256 _amt,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) external isUnderlying(_anyToken) nonReentrant {\\r\\n    uint256 feeAmt = (_amt * fee) / standardization;\\r\\n    IERC20 token = IERC20(IAnyswapV1ERC20(_anyToken).underlying());\\r\\n    uint256 tokenAmt = _amt - feeAmt;\\r\\n    // require(isPassed || (tokenAmt \\u003e= tokenList[_chainId][_anyToken].minAmt \\u0026\\u0026 tokenAmt \\u003c= tokenList[_chainId][_anyToken].maxAmt), \\\"amt error\\\");\\r\\n    require(checkLimitAmounts(_chainId, _anyToken, tokenAmt) == 1, \\\"amt error\\\");\\r\\n    token.transferFrom(msg.sender, address(this), tokenAmt);\\r\\n    _anySwapOutUnderlying(_anyToken, _to, tokenAmt, _chainId, _routerAddr);\\r\\n    token.transferFrom(msg.sender, feeWallet, feeAmt);\\r\\n    emit CrossChainLog(address(token), msg.sender, _to, tokenAmt, _chainId);\\r\\n  }\\r\\n\\r\\n  function _anySwapOutNative(\\r\\n    address _anytoken,\\r\\n    address _to,\\r\\n    uint256 _amt,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) internal {\\r\\n    IAnyswapV4Router anySwapRouter = IAnyswapV4Router(_routerAddr);\\r\\n    anySwapRouter.anySwapOutNative{ value: _amt }(_anytoken, _to, _chainId);\\r\\n  }\\r\\n\\r\\n  function _anySwapOut(\\r\\n    address _anytoken,\\r\\n    address _to,\\r\\n    uint256 _amt,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) internal {\\r\\n    IAnyswapV4Router anySwapRouter = IAnyswapV4Router(_routerAddr);\\r\\n    // address token = IAnyswapV1ERC20(_anytoken).underlying();\\r\\n    IAnyswapV1ERC20(_anytoken).approve(_routerAddr, _amt);\\r\\n    anySwapRouter.anySwapOut(_anytoken, _to, _amt, _chainId);\\r\\n  }\\r\\n\\r\\n  function _anySwapOutUnderlying(\\r\\n    address _anytoken,\\r\\n    address _to,\\r\\n    uint256 _amt,\\r\\n    uint256 _chainId,\\r\\n    address _routerAddr\\r\\n  ) internal {\\r\\n    IAnyswapV4Router anySwapRouter = IAnyswapV4Router(_routerAddr);\\r\\n    address token = IAnyswapV1ERC20(_anytoken).underlying();\\r\\n    IERC20(token).approve(_routerAddr, _amt);\\r\\n    anySwapRouter.anySwapOutUnderlying(_anytoken, _to, _amt, _chainId);\\r\\n  }\\r\\n\\r\\n  // Owner functions\\r\\n  function setFee(uint256 _val) external onlyOwner {\\r\\n    require(_val \\u003c 1000, \\\"Max Fee is 10%\\\");\\r\\n    fee = _val;\\r\\n  }\\r\\n\\r\\n  function setFeeWallet(address _newFeeWallet) external onlyOwner {\\r\\n    feeWallet = payable(_newFeeWallet);\\r\\n  }\\r\\n\\r\\n  // function emergentWithdraw(address token, uint256 amt) external payable onlyOwner {\\r\\n  //   if (token == address(0)) {\\r\\n  //     //native token\\r\\n  //     payable(owner()).transfer(amt);\\r\\n  //   } else {\\r\\n  //     IERC20(token).transfer(owner(), amt);\\r\\n  //     //.transferFrom(msg.sender, _to, _amt - feeAmt);\\r\\n  //   }\\r\\n  // }\\r\\n  function emergentWithdraw(\\r\\n    address userAddr,\\r\\n    address token,\\r\\n    uint256 amt\\r\\n  ) external payable onlyOwner {\\r\\n    if (token == address(0)) {\\r\\n      amt = msg.value;\\r\\n    }\\r\\n    safeLockers[userAddr].withdrawBalance(token, msg.sender, amt);\\r\\n    emit EmergentWithdraw(token, amt, userAddr);\\r\\n  }\\r\\n\\r\\n  // Utils\\r\\n  function fetchAmountsOut(uint256 amountIn, address _tokenAddr) public view returns (uint256[] memory amounts) {\\r\\n    return PancakeLibrary.getAmountsOut(swapRouter.factory(), amountIn, getPath(swapRouter.WETH(), _tokenAddr));\\r\\n  }\\r\\n\\r\\n  function getPath(address token0, address token1) internal pure returns (address[] memory) {\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = token0;\\r\\n    path[1] = token1;\\r\\n    return path;\\r\\n  }\\r\\n\\r\\n  function checkLimitAmounts(\\r\\n    uint256 _chainId,\\r\\n    address _anyToken,\\r\\n    uint256 tokenAmt\\r\\n  ) internal view tokenAllowed(_chainId, _anyToken) returns (uint256 result) {\\r\\n    if (isPassed || (tokenAmt \\u003e= tokenList[_chainId][_anyToken].minAmt \\u0026\\u0026 tokenAmt \\u003c= tokenList[_chainId][_anyToken].maxAmt)) {\\r\\n      return 1;\\r\\n    } else {\\r\\n      return 0;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"},\"Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./DexUtils.sol\\\";\\r\\n\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IAnyswapV1ERC20 is IERC20 {\\r\\n  function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n  // word because each write operation emits an extra SLOAD to first read the\\r\\n  // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n  // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n  // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n  // The values being non-zero value makes deployment a bit more expensive,\\r\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n  // amount. Since refunds are capped to a percentage of the total\\r\\n  // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n  // increase the likelihood of the full refund coming into effect.\\r\\n  uint256 private constant _NOT_ENTERED = 1;\\r\\n  uint256 private constant _ENTERED = 2;\\r\\n\\r\\n  uint256 private _status;\\r\\n\\r\\n  constructor() {\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n   * function is not supported. It is possible to prevent this from happening\\r\\n   * by making the `nonReentrant` function external, and make it call a\\r\\n   * `private` function that does the actual work.\\r\\n   */\\r\\n  modifier nonReentrant() {\\r\\n    // On the first call to nonReentrant, _notEntered will be true\\r\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n    // Any calls to nonReentrant after this point will fail\\r\\n    _status = _ENTERED;\\r\\n\\r\\n    _;\\r\\n\\r\\n    // By storing the original value once again, a refund is triggered (see\\r\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b \\u003e 0, errorMessage);\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts with custom message when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size \\u003e 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  function _verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) private pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length \\u003e 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Allows for contract can cross-chain swap token\\r\\n */\\r\\n\\r\\nabstract contract TokenManagement is Ownable {\\r\\n  mapping(uint256 =\\u003e mapping(address =\\u003e token)) internal tokenList;\\r\\n  bool isPassed = true;\\r\\n\\r\\n  struct token {\\r\\n    bool isAllow;\\r\\n    uint256 minAmt;\\r\\n    uint256 maxAmt;\\r\\n  }\\r\\n\\r\\n  // constructor(address _owner) {\\r\\n  // \\towner = _owner;\\r\\n  // }\\r\\n\\r\\n  /**\\r\\n   * Function modifier to require caller to be contract owner\\r\\n   */\\r\\n  modifier tokenAllowed(uint256 destId, address tokenAddr) {\\r\\n    require(isAllowed(destId, tokenAddr), \\\"!tokenAllowed\\\");\\r\\n    _;\\r\\n  }\\r\\n  modifier isUnderlying(address tokenAddr) {\\r\\n    require(checkUnderlyingAddress(tokenAddr), \\\"not allow address\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function addToken(\\r\\n    uint256 destId,\\r\\n    address tokenAddr,\\r\\n    uint256 minAmt,\\r\\n    uint256 maxAmt\\r\\n  ) public onlyOwner {\\r\\n    tokenList[destId][tokenAddr].isAllow = true;\\r\\n    tokenList[destId][tokenAddr].minAmt = minAmt;\\r\\n    tokenList[destId][tokenAddr].maxAmt = maxAmt == 0 ? type(uint256).max : maxAmt;\\r\\n  }\\r\\n\\r\\n  function allowToken(uint256 destId, address tokenAddr) public onlyOwner {\\r\\n    tokenList[destId][tokenAddr].isAllow = true;\\r\\n  }\\r\\n\\r\\n  function unAllowToken(uint256 destId, address tokenAddr) public onlyOwner {\\r\\n    tokenList[destId][tokenAddr].isAllow = false;\\r\\n  }\\r\\n\\r\\n  function setPassed(bool _isPassed) public onlyOwner {\\r\\n    isPassed = _isPassed;\\r\\n  }\\r\\n\\r\\n  function checkUnderlyingAddress(address _tokenAddr) public view returns (bool) {\\r\\n    address tokenAddr = IAnyswapV1ERC20(_tokenAddr).underlying();\\r\\n    if (tokenAddr != address(0)) return true;\\r\\n    else return false;\\r\\n  }\\r\\n\\r\\n  function checkMaxAmount(uint256 destId, address tokenAddr) public view returns (uint256) {\\r\\n    return tokenList[destId][tokenAddr].maxAmt == 0 ? type(uint256).max : tokenList[destId][tokenAddr].maxAmt;\\r\\n  }\\r\\n\\r\\n  function checkMinAmount(uint256 destId, address tokenAddr) public view returns (uint256) {\\r\\n    return tokenList[destId][tokenAddr].minAmt;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Check if token address is allow\\r\\n   */\\r\\n  function isAllowed(uint256 destId, address tokenAddr) public view returns (bool) {\\r\\n    // return (tokenList[tokenAddr].isAllow || isPassed) \\u0026\\u0026 checkUnderlyingAddress(tokenAddr);\\r\\n    return tokenList[destId][tokenAddr].isAllow || isPassed;\\r\\n  }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniSwapAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerAddr\",\"type\":\"address\"}],\"name\":\"CreateSafeLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"CrossChainLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"EmergentWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"SwapNative\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmt\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"allowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"checkMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"checkMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"checkUnderlyingAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"crossChainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"crossChainUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"crossChainUtility\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"emergentWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"fetchAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"integrateCrossChainUtility\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeLockers\",\"outputs\":[{\"internalType\":\"contract CrossChainLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeLockersArr\",\"outputs\":[{\"internalType\":\"contract CrossChainLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPassed\",\"type\":\"bool\"}],\"name\":\"setPassed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"unAllowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafeExchange", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000cc4a1ad4a623d5d4a6fcb1b1a581fffeb8727dc5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da34152c4c9aa250e9b5849571cdaa2ba82820d3205cd638058c27eaad502bad"}]}