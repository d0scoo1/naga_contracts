{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NodePackV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./lib/AdminAccess.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/INodePackV3.sol\\\";\\nimport \\\"./interfaces/IStrongPool.sol\\\";\\nimport \\\"./interfaces/IStrongNFTPackBonus.sol\\\";\\nimport \\\"./lib/InternalCalls.sol\\\";\\nimport \\\"./lib/SbMath.sol\\\";\\n\\ncontract NodePackV4 is AdminAccess, INodePackV3, InternalCalls {\\n\\n  uint constant public PACK_TYPE_NODE_REWARD_LIFETIME = 0;\\n  uint constant public PACK_TYPE_NODE_REWARD_PER_SECOND = 1;\\n  uint constant public PACK_TYPE_FEE_STRONG = 2;\\n  uint constant public PACK_TYPE_FEE_CREATE = 3;\\n  uint constant public PACK_TYPE_FEE_RECURRING = 4;\\n  uint constant public PACK_TYPE_FEE_CLAIMING_NUMERATOR = 5;\\n  uint constant public PACK_TYPE_FEE_CLAIMING_DENOMINATOR = 6;\\n  uint constant public PACK_TYPE_RECURRING_CYCLE_SECONDS = 7;\\n  uint constant public PACK_TYPE_GRACE_PERIOD_SECONDS = 8;\\n  uint constant public PACK_TYPE_PAY_CYCLES_LIMIT = 9;\\n  uint constant public PACK_TYPE_NODES_LIMIT = 10;\\n\\n  event Created(address indexed entity, uint packType, uint nodesCount, bool usedCredit, uint timestamp, address migratedFrom);\\n  event AddedNodes(address indexed entity, uint packType, uint nodesCount, uint totalNodesCount, bool usedCredit, uint timestamp, address migratedFrom);\\n  event MaturedNodes(address indexed entity, uint packType, uint maturedCount);\\n  event Paid(address indexed entity, uint packType, uint timestamp);\\n  event Claimed(address indexed entity, uint packType, uint reward);\\n  event SetNodeFeeCollector(address payable collector);\\n  event SetFeeCollector(address payable collector);\\n  event SetTakeStrongBips(uint bips);\\n  event SetNFTBonusContract(address strongNFTBonus);\\n  event SetServiceContractEnabled(address service, bool enabled);\\n  event SetPackTypeActive(uint packType, bool active);\\n  event SetPackTypeSetting(uint packType, uint settingId, uint value);\\n  event SetPackTypeHasSettings(uint packType, bool hasSettings);\\n\\n  IERC20 public strongToken;\\n  IStrongNFTPackBonus public strongNFTBonus;\\n\\n  uint public totalNodes;\\n  uint public totalMaturedNodes;\\n  uint public totalPacks;\\n  uint public totalPackTypes;\\n  uint public takeStrongBips;\\n  address payable public claimFeeCollector;\\n  address payable public nodeFeeCollector;\\n\\n  mapping(address => uint) public entityNodeCount;\\n  mapping(address => uint) public entityCreditUsed;\\n\\n  mapping(bytes => uint) public entityPackCreatedAt;\\n  mapping(bytes => uint) public entityPackLastPaidAt;\\n  mapping(bytes => uint) public entityPackLastClaimedAt;\\n  mapping(bytes => uint) public entityPackTotalNodeCount;\\n  mapping(bytes => uint) public entityPackMaturedNodeCount;\\n  mapping(bytes => uint) public entityPackRewardDue;\\n  mapping(bytes => uint) public entityPackClaimedTotal;\\n  mapping(bytes => uint) public entityPackClaimedMatured;\\n\\n  mapping(uint => bool) public packTypeActive;\\n  mapping(uint => bool) public packTypeHasSettings;\\n  mapping(uint => mapping(uint => uint)) public packTypeSettings;\\n  mapping(address => bool) private serviceContractEnabled;\\n\\n  function init(\\n    IERC20 _strongToken,\\n    IStrongNFTPackBonus _strongNFTBonus,\\n    address payable _nodeFeeCollector,\\n    address payable _claimFeeCollector\\n  ) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_claimFeeCollector != address(0), \\\"no address\\\");\\n\\n    strongToken = _strongToken;\\n    strongNFTBonus = _strongNFTBonus;\\n    nodeFeeCollector = _nodeFeeCollector;\\n    claimFeeCollector = _claimFeeCollector;\\n\\n    InternalCalls.init();\\n  }\\n\\n  //\\n  // Getters\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function canPackBePaid(address _entity, uint _packType) public view returns (bool) {\\n    return doesPackExist(_entity, _packType) && !hasPackExpired(_entity, _packType) && !hasMaxPayments(_entity, _packType);\\n  }\\n\\n  function doesPackExist(address _entity, uint _packType) public view returns (bool) {\\n    return entityPackLastPaidAt[getPackId(_entity, _packType)] > 0;\\n  }\\n\\n  function isPackPastDue(address _entity, uint _packType) public view returns (bool) {\\n    bytes memory id = getPackId(_entity, _packType);\\n    uint lastPaidAt = entityPackLastPaidAt[id];\\n\\n    return block.timestamp > (lastPaidAt + getRecurringPaymentCycle(_packType));\\n  }\\n\\n  function hasMaxPayments(address _entity, uint _packType) public view returns (bool) {\\n    bytes memory id = getPackId(_entity, _packType);\\n    uint lastPaidAt = entityPackLastPaidAt[id];\\n    uint recurringPaymentCycle = getRecurringPaymentCycle(_packType);\\n    uint limit = block.timestamp + recurringPaymentCycle * getPayCyclesLimit(_packType);\\n\\n    return lastPaidAt + recurringPaymentCycle >= limit;\\n  }\\n\\n  function hasPackExpired(address _entity, uint _packType) public view returns (bool) {\\n    bytes memory id = getPackId(_entity, _packType);\\n    uint lastPaidAt = entityPackLastPaidAt[id];\\n    if (lastPaidAt == 0) return true;\\n\\n    return block.timestamp > (lastPaidAt + getRecurringPaymentCycle(_packType) + getGracePeriod(_packType));\\n  }\\n\\n  function getClaimingFee(address _entity, uint _packType, uint _timestamp) public view returns (uint) {\\n    return getRewardAt(_entity, _packType, _timestamp, true) * getClaimingFeeNumerator(_packType) / getClaimingFeeDenominator(_packType);\\n  }\\n\\n  function getPacksClaimingFee(address _entity, uint _timestamp) external view returns (uint) {\\n    uint fee = 0;\\n\\n    for (uint packType = 1; packType <= totalPackTypes; packType++) {\\n      fee = fee + getClaimingFee(_entity, packType, _timestamp);\\n    }\\n\\n    return fee;\\n  }\\n\\n  function getPackId(address _entity, uint _packType) public pure returns (bytes memory) {\\n    uint id = _packType != 0 ? _packType : 1;\\n    return abi.encodePacked(_entity, uint32(id), uint64(1));\\n  }\\n\\n  function getEntityPackTotalNodeCount(address _entity, uint _packType) external view returns (uint) {\\n    return entityPackTotalNodeCount[getPackId(_entity, _packType)];\\n  }\\n\\n  function getEntityPackMaturedNodeCount(address _entity, uint _packType) external view returns (uint) {\\n    return entityPackMaturedNodeCount[getPackId(_entity, _packType)];\\n  }\\n\\n  function getEntityPackActiveNodeCount(address _entity, uint _packType) public view returns (uint) {\\n    bytes memory id = getPackId(_entity, _packType);\\n    return entityPackTotalNodeCount[id] - entityPackMaturedNodeCount[id];\\n  }\\n\\n  function getEntityPackLifetimeRewards(address _entity, uint _packType) public view returns (uint) {\\n    return getNodeRewardLifetime(_packType) * entityPackTotalNodeCount[getPackId(_entity, _packType)];\\n  }\\n\\n  function getEntityPackClaimedMaturedRewards(address _entity, uint _packType) public view returns (uint) {\\n    return entityPackClaimedMatured[getPackId(_entity, _packType)];\\n  }\\n\\n  function getEntityPackClaimedTotalRewards(address _entity, uint _packType) public view returns (uint) {\\n    return entityPackClaimedTotal[getPackId(_entity, _packType)];\\n  }\\n\\n  function getEntityPackAccruedTotalRewards(address _entity, uint _packType) public view returns (uint) {\\n    return entityPackClaimedTotal[getPackId(_entity, _packType)] + getRewardAt(_entity, _packType, block.timestamp, true);\\n  }\\n\\n  function getPackLastPaidAt(address _entity, uint _packType) external view returns (uint) {\\n    return entityPackLastPaidAt[getPackId(_entity, _packType)];\\n  }\\n\\n  function getNodeCreateFee(address _entity, uint _packType) public view returns (uint) {\\n    uint fee = getCreatingFeeInWei(_packType);\\n    uint lastPaidAt = entityPackLastPaidAt[getPackId(_entity, _packType)];\\n\\n    if (lastPaidAt == 0) return fee;\\n    if (isPackPastDue(_entity, _packType)) return fee;\\n    if (hasPackExpired(_entity, _packType)) return 0;\\n\\n    uint payCycleSeconds = getRecurringPaymentCycle(_packType);\\n    uint dueInSeconds = lastPaidAt + payCycleSeconds - block.timestamp;\\n\\n    return dueInSeconds * fee / payCycleSeconds;\\n  }\\n\\n  function getRecurringFee(address _entity, uint _packType) public view returns (uint) {\\n    return getRecurringFeeInWei(_packType) * getEntityPackActiveNodeCount(_entity, _packType);\\n  }\\n\\n  function getPacksRecurringFee(address _entity) external view returns (uint) {\\n    uint fee = 0;\\n\\n    for (uint packType = 1; packType <= totalPackTypes; packType++) {\\n      if (canPackBePaid(_entity, packType)) fee = fee + getRecurringFee(_entity, packType);\\n    }\\n\\n    return fee;\\n  }\\n\\n  function getReward(address _entity, uint _packType) external view returns (uint) {\\n    return getRewardAt(_entity, _packType, block.timestamp, true);\\n  }\\n\\n  function getRewardAt(address _entity, uint _packType, uint _timestamp, bool _addBonus) public view returns (uint) {\\n    bytes memory id = getPackId(_entity, _packType);\\n    uint lastClaimedAt = entityPackLastClaimedAt[id];\\n    uint registeredAt = entityPackCreatedAt[id];\\n\\n    if (!doesPackExist(_entity, _packType)) return 0;\\n    if (hasPackExpired(_entity, _packType)) return 0;\\n    if (_timestamp > block.timestamp) return 0;\\n    if (_timestamp < lastClaimedAt) return 0;\\n    if (_timestamp <= registeredAt) return 0;\\n\\n    uint secondsPassed = lastClaimedAt > 0 ? _timestamp - lastClaimedAt : _timestamp - registeredAt;\\n    uint maxReward = getEntityPackLifetimeRewards(_entity, _packType);\\n    uint reward = secondsPassed * getNodeRewardPerSecond(_packType) * getEntityPackActiveNodeCount(_entity, _packType);\\n    uint bonus = _addBonus ? getBonusAt(_entity, _packType, _timestamp) : 0;\\n    uint totalReward = reward + bonus + entityPackRewardDue[id];\\n\\n    if (entityPackClaimedTotal[id] >= maxReward) {\\n      return 0;\\n    }\\n\\n    if ((entityPackClaimedTotal[id] + totalReward) >= maxReward) {\\n      totalReward = maxReward - entityPackClaimedTotal[id];\\n    }\\n\\n    return totalReward;\\n  }\\n\\n  function getBonusAt(address _entity, uint _packType, uint _timestamp) public view returns (uint) {\\n    if (address(strongNFTBonus) == address(0)) return 0;\\n\\n    bytes memory id = getPackId(_entity, _packType);\\n    uint lastClaimedAt = entityPackLastClaimedAt[id] != 0 ? entityPackLastClaimedAt[id] : entityPackCreatedAt[id];\\n\\n    return strongNFTBonus.getBonus(_entity, _packType, lastClaimedAt, _timestamp);\\n  }\\n\\n  function getEntityRewards(address _entity, uint _timestamp) public view returns (uint) {\\n    uint reward = 0;\\n\\n    for (uint packType = 1; packType <= totalPackTypes; packType++) {\\n      reward = reward + getRewardAt(_entity, packType, _timestamp > 0 ? _timestamp : block.timestamp, true);\\n    }\\n\\n    return reward;\\n  }\\n\\n  function getEntityCreditAvailable(address _entity, uint _timestamp) public view returns (uint) {\\n    return getEntityRewards(_entity, _timestamp) - entityCreditUsed[_entity];\\n  }\\n\\n  function getRewardBalance() external view returns (uint) {\\n    return strongToken.balanceOf(address(this));\\n  }\\n\\n  //\\n  // Actions\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function create(uint _packType, uint _nodeCount, bool _useCredit) external payable {\\n    uint fee = getNodeCreateFee(msg.sender, _packType) * _nodeCount;\\n    uint strongFee = getStrongFeeInWei(_packType) * _nodeCount;\\n    uint packTypeLimit = getNodesLimit(_packType);\\n    uint timestamp = block.timestamp;\\n    bytes memory id = getPackId(msg.sender, _packType);\\n\\n    require(packTypeActive[_packType], \\\"invalid type\\\");\\n    require(packTypeLimit == 0 || (entityPackTotalNodeCount[id] + _nodeCount) <= packTypeLimit, \\\"over limit\\\");\\n    require(_nodeCount >= 1, \\\"invalid node count\\\");\\n    require(msg.value >= fee, \\\"invalid fee\\\");\\n\\n    if (address(strongNFTBonus) != address(0)) {\\n      strongNFTBonus.setEntityPackBonusSaved(msg.sender, _packType);\\n    }\\n\\n    totalNodes += _nodeCount;\\n    entityNodeCount[msg.sender] += _nodeCount;\\n\\n    if (entityPackTotalNodeCount[id] == 0) {\\n      entityPackCreatedAt[id] = timestamp;\\n      entityPackLastPaidAt[id] = timestamp;\\n      entityPackTotalNodeCount[id] += _nodeCount;\\n      totalPacks += 1;\\n\\n      emit Created(msg.sender, _packType, _nodeCount, _useCredit, block.timestamp, address(0));\\n    }\\n    else {\\n      require(!hasPackExpired(msg.sender, _packType), \\\"pack expired\\\");\\n\\n      updatePackState(msg.sender, _packType, true);\\n      entityPackTotalNodeCount[id] += _nodeCount;\\n\\n      emit AddedNodes(msg.sender, _packType, _nodeCount, entityPackTotalNodeCount[id], _useCredit, block.timestamp, address(0));\\n    }\\n\\n    if (_useCredit) {\\n      require(getEntityCreditAvailable(msg.sender, block.timestamp) >= strongFee, \\\"not enough\\\");\\n      entityCreditUsed[msg.sender] += strongFee;\\n    } else {\\n      uint takeStrong = strongFee * takeStrongBips / 10000;\\n      if (takeStrong > 0) {\\n        require(strongToken.transferFrom(msg.sender, nodeFeeCollector, takeStrong), \\\"transfer failed\\\");\\n      }\\n      if (strongFee > takeStrong) {\\n        require(strongToken.transferFrom(msg.sender, address(this), strongFee - takeStrong), \\\"transfer failed\\\");\\n      }\\n    }\\n\\n    sendValue(nodeFeeCollector, fee);\\n    if (msg.value > fee) sendValue(payable(msg.sender), msg.value - fee);\\n  }\\n\\n  function claim(uint _packType, uint _timestamp, address _toStrongPool) public payable returns (uint) {\\n    address entity = msg.sender == address(strongNFTBonus) ? tx.origin : msg.sender;\\n    bytes memory id = getPackId(entity, _packType);\\n    uint lastClaimedAt = entityPackLastClaimedAt[id] != 0 ? entityPackLastClaimedAt[id] : entityPackCreatedAt[id];\\n\\n    require(doesPackExist(entity, _packType), \\\"doesnt exist\\\");\\n    require(!hasPackExpired(entity, _packType), \\\"pack expired\\\");\\n    require(!isPackPastDue(entity, _packType), \\\"past due\\\");\\n    require(_timestamp <= block.timestamp, \\\"bad timestamp\\\");\\n    require(lastClaimedAt + 900 < _timestamp, \\\"too soon\\\");\\n\\n    uint reward = getRewardAt(entity, _packType, _timestamp, true);\\n    require(reward > 0, \\\"no reward\\\");\\n    require(strongToken.balanceOf(address(this)) >= reward, \\\"over balance\\\");\\n\\n    uint fee = reward * getClaimingFeeNumerator(_packType) / getClaimingFeeDenominator(_packType);\\n    require(msg.value >= fee, \\\"invalid fee\\\");\\n\\n    entityPackLastClaimedAt[id] = _timestamp;\\n    entityPackClaimedTotal[id] += reward;\\n    entityPackRewardDue[id] = 0;\\n\\n    emit Claimed(entity, _packType, reward);\\n\\n    if (entityCreditUsed[msg.sender] > 0) {\\n      if (entityCreditUsed[msg.sender] > reward) {\\n        entityCreditUsed[msg.sender] = entityCreditUsed[msg.sender] - reward;\\n        reward = 0;\\n      } else {\\n        reward = reward - entityCreditUsed[msg.sender];\\n        entityCreditUsed[msg.sender] = 0;\\n      }\\n    }\\n\\n    updatePackState(msg.sender, _packType, false);\\n\\n    if (address(strongNFTBonus) != address(0)) {\\n      strongNFTBonus.resetEntityPackBonusSaved(id);\\n    }\\n\\n    if (reward > 0) {\\n      if (_toStrongPool != address(0)) IStrongPool(_toStrongPool).mineFor(entity, reward);\\n      else require(strongToken.transfer(entity, reward), \\\"transfer failed\\\");\\n    }\\n\\n    sendValue(claimFeeCollector, fee);\\n    if (isUserCall() && msg.value > fee) sendValue(payable(msg.sender), msg.value - fee);\\n\\n    return fee;\\n  }\\n\\n  function claimAll(uint _timestamp, address _toStrongPool) external payable makesInternalCalls {\\n    require(entityNodeCount[msg.sender] > 0, \\\"no nodes\\\");\\n\\n    uint valueLeft = msg.value;\\n\\n    for (uint packType = 1; packType <= totalPackTypes; packType++) {\\n      uint reward = getRewardAt(msg.sender, packType, _timestamp, true);\\n\\n      if (reward > 0) {\\n        require(valueLeft >= 0, \\\"not enough\\\");\\n        uint paid = claim(packType, _timestamp, _toStrongPool);\\n        valueLeft = valueLeft - paid;\\n      }\\n    }\\n\\n    if (valueLeft > 0) sendValue(payable(msg.sender), valueLeft);\\n  }\\n\\n  function pay(uint _packType) public payable returns (uint) {\\n    require(canPackBePaid(msg.sender, _packType), \\\"cant pay\\\");\\n\\n    updatePackState(msg.sender, _packType, true);\\n\\n    bytes memory id = getPackId(msg.sender, _packType);\\n    uint fee = getRecurringFeeInWei(_packType) * getEntityPackActiveNodeCount(msg.sender, _packType);\\n\\n    require(msg.value >= fee, \\\"invalid fee\\\");\\n\\n    entityPackLastPaidAt[id] = entityPackLastPaidAt[id] + getRecurringPaymentCycle(_packType);\\n\\n    emit Paid(msg.sender, _packType, entityPackLastPaidAt[id]);\\n\\n    sendValue(nodeFeeCollector, fee);\\n    if (isUserCall() && msg.value > fee) sendValue(payable(msg.sender), msg.value - fee);\\n\\n    return fee;\\n  }\\n\\n  function payAll() external payable makesInternalCalls {\\n    require(entityNodeCount[msg.sender] > 0, \\\"no packs\\\");\\n\\n    uint valueLeft = msg.value;\\n\\n    for (uint packType = 1; packType <= totalPackTypes; packType++) {\\n      if (!canPackBePaid(msg.sender, packType)) continue;\\n\\n      require(valueLeft > 0, \\\"not enough\\\");\\n      uint paid = pay(packType);\\n      valueLeft = valueLeft - paid;\\n    }\\n\\n    if (valueLeft > 0) sendValue(payable(msg.sender), valueLeft);\\n  }\\n\\n  //\\n  // Admin\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function deposit(uint _amount) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_amount > 0);\\n    require(strongToken.transferFrom(msg.sender, address(this), _amount), \\\"transfer failed\\\");\\n  }\\n\\n  function withdraw(address _destination, uint _amount) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_amount > 0);\\n    require(strongToken.balanceOf(address(this)) >= _amount, \\\"over balance\\\");\\n    require(strongToken.transfer(_destination, _amount), \\\"transfer failed\\\");\\n  }\\n\\n  function approveStrongPool(IStrongPool _strongPool, uint _amount) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(strongToken.approve(address(_strongPool), _amount), \\\"approve failed\\\");\\n  }\\n\\n  function setNodeFeeCollector(address payable _nodeFeeCollector) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_nodeFeeCollector != address(0));\\n    nodeFeeCollector = _nodeFeeCollector;\\n    emit SetNodeFeeCollector(_nodeFeeCollector);\\n  }\\n\\n  function setClaimFeeCollector(address payable _claimFeeCollector) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_claimFeeCollector != address(0));\\n    claimFeeCollector = _claimFeeCollector;\\n    emit SetFeeCollector(_claimFeeCollector);\\n  }\\n\\n  function setNFTBonusContract(address _contract) external onlyRole(adminControl.SERVICE_ADMIN()) {\\n    strongNFTBonus = IStrongNFTPackBonus(_contract);\\n    emit SetNFTBonusContract(_contract);\\n  }\\n\\n  function setTakeStrongBips(uint _bips) external onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_bips <= 10000, \\\"invalid value\\\");\\n    takeStrongBips = _bips;\\n    emit SetTakeStrongBips(_bips);\\n  }\\n\\n  //\\n  // Settings\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function getCustomSettingOrDefaultIfZero(uint _packType, uint _setting) internal view returns (uint) {\\n    return packTypeHasSettings[_packType] && packTypeSettings[_packType][_setting] > 0\\n    ? packTypeSettings[_packType][_setting]\\n    : packTypeSettings[0][_setting];\\n  }\\n\\n  function getNodeRewardLifetime(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_NODE_REWARD_LIFETIME);\\n  }\\n\\n  function getNodeRewardPerSecond(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_NODE_REWARD_PER_SECOND);\\n  }\\n\\n  function getClaimingFeeNumerator(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_FEE_CLAIMING_NUMERATOR);\\n  }\\n\\n  function getClaimingFeeDenominator(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_FEE_CLAIMING_DENOMINATOR);\\n  }\\n\\n  function getCreatingFeeInWei(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_FEE_CREATE);\\n  }\\n\\n  function getRecurringFeeInWei(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_FEE_RECURRING);\\n  }\\n\\n  function getStrongFeeInWei(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_FEE_STRONG);\\n  }\\n\\n  function getRecurringPaymentCycle(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_RECURRING_CYCLE_SECONDS);\\n  }\\n\\n  function getGracePeriod(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_GRACE_PERIOD_SECONDS);\\n  }\\n\\n  function getPayCyclesLimit(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_PAY_CYCLES_LIMIT);\\n  }\\n\\n  function getNodesLimit(uint _packType) public view returns (uint) {\\n    return getCustomSettingOrDefaultIfZero(_packType, PACK_TYPE_NODES_LIMIT);\\n  }\\n\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function setPackTypeActive(uint _packType, bool _active) external onlyRole(adminControl.SERVICE_ADMIN()) {\\n    // Pack type 0 is being used as a placeholder for the default settings for pack types that don't have custom ones,\\n    // So it shouldn't be activated and used to create nodes\\n    require(_packType > 0, \\\"invalid type\\\");\\n    packTypeActive[_packType] = _active;\\n    if (totalPackTypes < _packType && _active) {\\n      totalPackTypes = _packType;\\n    }\\n\\n    emit SetPackTypeActive(_packType, _active);\\n  }\\n\\n  function setPackTypeHasSettings(uint _packType, bool _hasSettings) external onlyRole(adminControl.SERVICE_ADMIN()) {\\n    packTypeHasSettings[_packType] = _hasSettings;\\n    emit SetPackTypeHasSettings(_packType, _hasSettings);\\n  }\\n\\n  function setPackTypeSetting(uint _packType, uint _settingId, uint _value) external onlyRole(adminControl.SERVICE_ADMIN()) {\\n    packTypeHasSettings[_packType] = true;\\n    packTypeSettings[_packType][_settingId] = _value;\\n    emit SetPackTypeSetting(_packType, _settingId, _value);\\n  }\\n\\n  function setServiceContractEnabled(address _contract, bool _enabled) external onlyRole(adminControl.SERVICE_ADMIN()) {\\n    serviceContractEnabled[_contract] = _enabled;\\n    emit SetServiceContractEnabled(_contract, _enabled);\\n  }\\n\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function sendValue(address payable recipient, uint amount) internal {\\n    require(address(this).balance >= amount, \\\"insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success,) = recipient.call{value : amount}(\\\"\\\");\\n    require(success, \\\"send failed\\\");\\n  }\\n\\n  function updatePackState(address _entity, uint _packType) external {\\n    require(msg.sender == address(strongNFTBonus), \\\"invalid sender\\\");\\n\\n    updatePackState(_entity, _packType, true);\\n  }\\n\\n  function updatePackState(address _entity, uint _packType, bool _saveRewardsDue) internal {\\n    bytes memory id = getPackId(_entity, _packType);\\n\\n    uint rewardDue = getRewardAt(_entity, _packType, block.timestamp, false);\\n    uint accruedTotal = entityPackClaimedTotal[id] + rewardDue;\\n    uint nodeLifetimeReward = getNodeRewardLifetime(_packType);\\n    uint maturedNodesTotal = accruedTotal / nodeLifetimeReward;\\n    uint maturedNodesNew = maturedNodesTotal > entityPackMaturedNodeCount[id] ? maturedNodesTotal - entityPackMaturedNodeCount[id] : 0;\\n\\n    if (_saveRewardsDue) {\\n      entityPackRewardDue[id] = rewardDue;\\n      entityPackLastClaimedAt[id] = block.timestamp;\\n    }\\n\\n    if (maturedNodesNew > 0) {\\n      entityPackMaturedNodeCount[id] += maturedNodesNew;\\n      entityPackClaimedMatured[id] += maturedNodesNew * nodeLifetimeReward;\\n      totalMaturedNodes += maturedNodesNew;\\n      emit MaturedNodes(_entity, _packType, maturedNodesNew);\\n    }\\n  }\\n\\n  //\\n  // Migration\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function migrateNodes(address _entity, uint _packType, uint _nodeCount, uint _lastPaidAt, uint _rewardsDue, uint _totalClaimed) external returns (bool) {\\n    require(serviceContractEnabled[msg.sender], \\\"no service\\\");\\n    require(packTypeActive[_packType], \\\"invalid type\\\");\\n    require(!doesPackExist(_entity, _packType) || !hasPackExpired(_entity, _packType), \\\"pack expired\\\");\\n\\n    bytes memory id = getPackId(_entity, _packType);\\n\\n    totalNodes += _nodeCount;\\n    entityNodeCount[_entity] += _nodeCount;\\n\\n    if (entityPackCreatedAt[id] == 0) {\\n      entityPackCreatedAt[id] = block.timestamp;\\n      entityPackLastPaidAt[id] = _lastPaidAt > 0 ? _lastPaidAt : block.timestamp;\\n      totalPacks += 1;\\n\\n      emit Created(_entity, _packType, _nodeCount, false, block.timestamp, msg.sender);\\n    }\\n    else {\\n      updatePackState(_entity, _packType, true);\\n\\n      emit AddedNodes(_entity, _packType, _nodeCount, entityPackTotalNodeCount[id], false, block.timestamp, msg.sender);\\n    }\\n\\n    entityPackTotalNodeCount[id] += _nodeCount;\\n    entityPackClaimedTotal[id] += _totalClaimed;\\n    entityPackRewardDue[id] += _rewardsDue;\\n\\n    if (entityPackTotalNodeCount[id] > _nodeCount) {\\n      updatePackState(_entity, _packType, true);\\n    }\\n\\n    return true;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AdminAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"../interfaces/IAdminControl.sol\\\";\\n\\nabstract contract AdminAccess {\\n\\n  IAdminControl public adminControl;\\n\\n  modifier onlyRole(uint8 _role) {\\n    require(address(adminControl) == address(0) || adminControl.hasRole(_role, msg.sender), \\\"no access\\\");\\n    _;\\n  }\\n\\n  function addAdminControlContract(IAdminControl _contract) external onlyRole(0) {\\n    adminControl = _contract;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodePackV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface INodePackV3 {\\n  function doesPackExist(address entity, uint packId) external view returns (bool);\\n\\n  function hasPackExpired(address entity, uint packId) external view returns (bool);\\n\\n  function claim(uint packId, uint timestamp, address toStrongPool) external payable returns (uint);\\n\\n//  function getBonusAt(address _entity, uint _packType, uint _timestamp) external view returns (uint);\\n\\n  function getPackId(address _entity, uint _packType) external pure returns (bytes memory);\\n\\n  function getEntityPackTotalNodeCount(address _entity, uint _packType) external view returns (uint);\\n\\n  function getEntityPackActiveNodeCount(address _entity, uint _packType) external view returns (uint);\\n\\n  function migrateNodes(address _entity, uint _nodeType, uint _nodeCount, uint _lastPaidAt, uint _rewardsDue, uint _totalClaimed) external returns (bool);\\n\\n//  function addPackRewardDue(address _entity, uint _packType, uint _rewardDue) external;\\n\\n  function updatePackState(address _entity, uint _packType) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrongPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IStrongPool {\\n  function mineFor(address miner, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrongNFTPackBonus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrongNFTPackBonus {\\n  function getBonus(address _entity, uint _packType, uint _from, uint _to) external view returns (uint);\\n\\n  function setEntityPackBonusSaved(address _entity, uint _packType) external;\\n\\n  function resetEntityPackBonusSaved(bytes memory _packId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/InternalCalls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract InternalCalls is Context {\\n\\n  uint private constant _NOT_MAKING_INTERNAL_CALLS = 1;\\n  uint private constant _MAKING_INTERNAL_CALLS = 2;\\n\\n  uint private _internal_calls_status;\\n\\n  modifier makesInternalCalls() {\\n    _internal_calls_status = _MAKING_INTERNAL_CALLS;\\n    _;\\n    _internal_calls_status = _NOT_MAKING_INTERNAL_CALLS;\\n  }\\n\\n  function init() internal {\\n    _internal_calls_status = _NOT_MAKING_INTERNAL_CALLS;\\n  }\\n\\n  function isInternalCall() internal view returns (bool) {\\n    return _internal_calls_status == _MAKING_INTERNAL_CALLS;\\n  }\\n\\n  function isContractCall() internal view returns (bool) {\\n    return _msgSender() != tx.origin;\\n  }\\n\\n  function isUserCall() internal view returns (bool) {\\n    return !isInternalCall() && !isContractCall();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SbMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nlibrary SbMath {\\n\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  /*\\n  * Multiply two decimal numbers and use normal rounding rules:\\n  * -round product up if 19'th mantissa digit >= 5\\n  * -round product down if 19'th mantissa digit < 5\\n  *\\n  * Used only inside the exponentiation, _decPow().\\n  */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x * y;\\n\\n    decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n  }\\n\\n  /*\\n  * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n  *\\n  * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n  *\\n  * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n  * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n  */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n\\n    if (_minutes > 525_600_000) _minutes = 525_600_000;  // cap to avoid overflow\\n\\n    if (_minutes == 0) return DECIMAL_PRECISION;\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n / 2;\\n      } else { // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n - 1) / 2;\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IAdminControl {\\n  function hasRole(uint8 _role, address _account) external view returns (bool);\\n\\n  function SUPER_ADMIN() external view returns (uint8);\\n\\n  function ADMIN() external view returns (uint8);\\n\\n  function SERVICE_ADMIN() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNodesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usedCredit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migratedFrom\",\"type\":\"address\"}],\"name\":\"AddedNodes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usedCredit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migratedFrom\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturedCount\",\"type\":\"uint256\"}],\"name\":\"MaturedNodes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strongNFTBonus\",\"type\":\"address\"}],\"name\":\"SetNFTBonusContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetNodeFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetPackTypeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasSettings\",\"type\":\"bool\"}],\"name\":\"SetPackTypeHasSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetPackTypeSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetServiceContractEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bips\",\"type\":\"uint256\"}],\"name\":\"SetTakeStrongBips\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACK_TYPE_FEE_CLAIMING_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_FEE_CLAIMING_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_FEE_CREATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_FEE_RECURRING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_FEE_STRONG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_GRACE_PERIOD_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_NODES_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_NODE_REWARD_LIFETIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_NODE_REWARD_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_PAY_CYCLES_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PACK_TYPE_RECURRING_CYCLE_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdminControl\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addAdminControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminControl\",\"outputs\":[{\"internalType\":\"contract IAdminControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrongPool\",\"name\":\"_strongPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveStrongPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"canPackBePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toStrongPool\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toStrongPool\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFeeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useCredit\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"doesPackExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entityCreditUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entityNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackClaimedMatured\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackClaimedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackCreatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackLastClaimedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackLastPaidAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackMaturedNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackRewardDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityPackTotalNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBonusAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getClaimingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getClaimingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getClaimingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getCreatingFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getEntityCreditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackAccruedTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackActiveNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackClaimedMaturedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackClaimedTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackLifetimeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackMaturedNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getEntityPackTotalNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getEntityRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getNodeCreateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getNodeRewardLifetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getNodeRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getNodesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getPackId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getPackLastPaidAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getPacksClaimingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"getPacksRecurringFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getPayCyclesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getRecurringFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getRecurringFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getRecurringPaymentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addBonus\",\"type\":\"bool\"}],\"name\":\"getRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"getStrongFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"hasMaxPayments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"hasPackExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_strongToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrongNFTPackBonus\",\"name\":\"_strongNFTBonus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_nodeFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_claimFeeCollector\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"isPackPastDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastPaidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimed\",\"type\":\"uint256\"}],\"name\":\"migrateNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFeeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packTypeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packTypeHasSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packTypeSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_claimFeeCollector\",\"type\":\"address\"}],\"name\":\"setClaimFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setNFTBonusContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_nodeFeeCollector\",\"type\":\"address\"}],\"name\":\"setNodeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPackTypeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasSettings\",\"type\":\"bool\"}],\"name\":\"setPackTypeHasSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPackTypeSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setServiceContractEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"setTakeStrongBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongNFTBonus\",\"outputs\":[{\"internalType\":\"contract IStrongNFTPackBonus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeStrongBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaturedNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPackTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packType\",\"type\":\"uint256\"}],\"name\":\"updatePackState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NodePackV4", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}