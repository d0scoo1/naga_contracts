{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: SystemSettingsLib.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/SystemSettingsLib.sol\n* Docs: https://docs.synthetix.io/contracts/SystemSettingsLib\n*\n* Contract Dependencies: (none)\n* Libraries: \n*\t- SafeDecimalMath\n*\t- SafeMath\n*\t- SystemSettingsLib\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2022 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint a, uint b) internal pure returns (uint) {\n        return b >= a ? 0 : a - b;\n    }\n\n    /* ---------- Utilities ---------- */\n    /*\n     * Absolute value of the input, returned as a signed number.\n     */\n    function signedAbs(int x) internal pure returns (int) {\n        return x < 0 ? -x : x;\n    }\n\n    /*\n     * Absolute value of the input, returned as an unsigned number.\n     */\n    function abs(int x) internal pure returns (uint) {\n        return uint(signedAbs(x));\n    }\n}\n\n\n// Internal references\n\n\n// Libraries\n\n\n/// This library is to reduce SystemSettings contract size only and is not really\n/// a proper library - so it shares knowledge of implementation details\n/// Some of the setters were refactored into this library, and some setters remain in the\n/// contract itself (SystemSettings)\nlibrary SystemSettingsLib {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    bytes32 public constant SETTINGS_CONTRACT_NAME = \"SystemSettings\";\n\n    // No more synths may be issued than the value of SNX backing them.\n    uint public constant MAX_ISSUANCE_RATIO = 1e18;\n\n    // The fee period must be between 1 day and 60 days.\n    uint public constant MIN_FEE_PERIOD_DURATION = 1 days;\n    uint public constant MAX_FEE_PERIOD_DURATION = 60 days;\n\n    uint public constant MAX_TARGET_THRESHOLD = 50;\n\n    uint public constant MAX_LIQUIDATION_RATIO = 1e18; // 100% issuance ratio\n    uint public constant RATIO_FROM_TARGET_BUFFER = 2e18; // 200% - mininimum buffer between issuance ratio and liquidation ratio\n\n    uint public constant MAX_LIQUIDATION_PENALTY = 3e18 / 10; // Max 30% liquidation penalty / bonus\n\n    uint public constant MAX_LIQUIDATION_DELAY = 3 days;\n    uint public constant MIN_LIQUIDATION_DELAY = 300; // 5 min\n\n    // Exchange fee may not exceed 10%.\n    uint public constant MAX_EXCHANGE_FEE_RATE = 1e18 / 10;\n\n    // Minimum Stake time may not exceed 1 weeks.\n    uint public constant MAX_MINIMUM_STAKE_TIME = 1 weeks;\n\n    uint public constant MAX_CROSS_DOMAIN_GAS_LIMIT = 12e6;\n    uint public constant MIN_CROSS_DOMAIN_GAS_LIMIT = 3e6;\n\n    int public constant MAX_WRAPPER_MINT_FEE_RATE = 1e18;\n\n    int public constant MAX_WRAPPER_BURN_FEE_RATE = 1e18;\n\n    // Atomic block volume limit is encoded as uint192.\n    uint public constant MAX_ATOMIC_VOLUME_PER_BLOCK = uint192(-1);\n\n    // TWAP window must be between 1 min and 1 day.\n    uint public constant MIN_ATOMIC_TWAP_WINDOW = 60;\n    uint public constant MAX_ATOMIC_TWAP_WINDOW = 86400;\n\n    // Volatility consideration window must be between 1 min and 1 day.\n    uint public constant MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = 60;\n    uint public constant MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = 86400;\n\n    // workaround for library not supporting public constants in sol v0.5\n    function contractName() external view returns (bytes32) {\n        return SETTINGS_CONTRACT_NAME;\n    }\n\n    function setCrossDomainMessageGasLimit(\n        IFlexibleStorage flexibleStorage,\n        bytes32 gasLimitSettings,\n        uint crossDomainMessageGasLimit\n    ) external {\n        require(\n            crossDomainMessageGasLimit >= MIN_CROSS_DOMAIN_GAS_LIMIT &&\n                crossDomainMessageGasLimit <= MAX_CROSS_DOMAIN_GAS_LIMIT,\n            \"Out of range xDomain gasLimit\"\n        );\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, gasLimitSettings, crossDomainMessageGasLimit);\n    }\n\n    function setIssuanceRatio(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint ratio\n    ) external {\n        require(ratio <= MAX_ISSUANCE_RATIO, \"New issuance ratio cannot exceed MAX_ISSUANCE_RATIO\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, ratio);\n    }\n\n    function setTradingRewardsEnabled(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bool _tradingRewardsEnabled\n    ) external {\n        flexibleStorage.setBoolValue(SETTINGS_CONTRACT_NAME, settingName, _tradingRewardsEnabled);\n    }\n\n    function setWaitingPeriodSecs(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _waitingPeriodSecs\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _waitingPeriodSecs);\n    }\n\n    function setPriceDeviationThresholdFactor(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _priceDeviationThresholdFactor\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _priceDeviationThresholdFactor);\n    }\n\n    function setFeePeriodDuration(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _feePeriodDuration\n    ) external {\n        require(_feePeriodDuration >= MIN_FEE_PERIOD_DURATION, \"value < MIN_FEE_PERIOD_DURATION\");\n        require(_feePeriodDuration <= MAX_FEE_PERIOD_DURATION, \"value > MAX_FEE_PERIOD_DURATION\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _feePeriodDuration);\n    }\n\n    function setTargetThreshold(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint percent\n    ) external returns (uint threshold) {\n        require(percent <= MAX_TARGET_THRESHOLD, \"Threshold too high\");\n        threshold = percent.mul(SafeDecimalMath.unit()).div(100);\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, threshold);\n    }\n\n    function setLiquidationDelay(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint time\n    ) external {\n        require(time <= MAX_LIQUIDATION_DELAY, \"Must be less than MAX_LIQUIDATION_DELAY\");\n        require(time >= MIN_LIQUIDATION_DELAY, \"Must be greater than MIN_LIQUIDATION_DELAY\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, time);\n    }\n\n    function setLiquidationRatio(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _liquidationRatio,\n        uint getLiquidationPenalty,\n        uint getIssuanceRatio\n    ) external {\n        require(\n            _liquidationRatio <= MAX_LIQUIDATION_RATIO.divideDecimal(SafeDecimalMath.unit().add(getLiquidationPenalty)),\n            \"liquidationRatio > MAX_LIQUIDATION_RATIO / (1 + penalty)\"\n        );\n\n        // MIN_LIQUIDATION_RATIO is a product of target issuance ratio * RATIO_FROM_TARGET_BUFFER\n        // Ensures that liquidation ratio is set so that there is a buffer between the issuance ratio and liquidation ratio.\n        uint MIN_LIQUIDATION_RATIO = getIssuanceRatio.multiplyDecimal(RATIO_FROM_TARGET_BUFFER);\n        require(_liquidationRatio >= MIN_LIQUIDATION_RATIO, \"liquidationRatio < MIN_LIQUIDATION_RATIO\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _liquidationRatio);\n    }\n\n    function setLiquidationEscrowDuration(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint duration\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, duration);\n    }\n\n    function setLiquidationPenalty(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint penalty\n    ) external {\n        require(penalty <= MAX_LIQUIDATION_PENALTY, \"penalty > MAX_LIQUIDATION_PENALTY\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, penalty);\n    }\n\n    function setSelfLiquidationPenalty(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint penalty\n    ) external {\n        require(penalty <= MAX_LIQUIDATION_PENALTY, \"penalty > MAX_LIQUIDATION_PENALTY\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, penalty);\n    }\n\n    function setFlagReward(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint reward\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, reward);\n    }\n\n    function setLiquidateReward(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint reward\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, reward);\n    }\n\n    function setRateStalePeriod(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint period\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, period);\n    }\n\n    function setExchangeFeeRateForSynths(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingExchangeFeeRate,\n        bytes32[] calldata synthKeys,\n        uint256[] calldata exchangeFeeRates\n    ) external {\n        require(synthKeys.length == exchangeFeeRates.length, \"Array lengths dont match\");\n        for (uint i = 0; i < synthKeys.length; i++) {\n            require(exchangeFeeRates[i] <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\n            flexibleStorage.setUIntValue(\n                SETTINGS_CONTRACT_NAME,\n                keccak256(abi.encodePacked(settingExchangeFeeRate, synthKeys[i])),\n                exchangeFeeRates[i]\n            );\n        }\n    }\n\n    function setMinimumStakeTime(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _seconds\n    ) external {\n        require(_seconds <= MAX_MINIMUM_STAKE_TIME, \"stake time exceed maximum 1 week\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _seconds);\n    }\n\n    function setDebtSnapshotStaleTime(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _seconds\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _seconds);\n    }\n\n    function setAggregatorWarningFlags(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _flags\n    ) external {\n        require(_flags != address(0), \"Valid address must be given\");\n        flexibleStorage.setAddressValue(SETTINGS_CONTRACT_NAME, settingName, _flags);\n    }\n\n    function setEtherWrapperMaxETH(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _maxETH\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _maxETH);\n    }\n\n    function setEtherWrapperMintFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _rate\n    ) external {\n        require(_rate <= uint(MAX_WRAPPER_MINT_FEE_RATE), \"rate > MAX_WRAPPER_MINT_FEE_RATE\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _rate);\n    }\n\n    function setEtherWrapperBurnFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _rate\n    ) external {\n        require(_rate <= uint(MAX_WRAPPER_BURN_FEE_RATE), \"rate > MAX_WRAPPER_BURN_FEE_RATE\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _rate);\n    }\n\n    function setWrapperMaxTokenAmount(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _wrapper,\n        uint _maxTokenAmount\n    ) external {\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _wrapper)),\n            _maxTokenAmount\n        );\n    }\n\n    function setWrapperMintFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _wrapper,\n        int _rate,\n        int getWrapperBurnFeeRate\n    ) external {\n        require(_rate <= MAX_WRAPPER_MINT_FEE_RATE, \"rate > MAX_WRAPPER_MINT_FEE_RATE\");\n        require(_rate >= -MAX_WRAPPER_MINT_FEE_RATE, \"rate < -MAX_WRAPPER_MINT_FEE_RATE\");\n\n        // if mint rate is negative, burn fee rate should be positive and at least equal in magnitude\n        // otherwise risk of flash loan attack\n        if (_rate < 0) {\n            require(-_rate <= getWrapperBurnFeeRate, \"-rate > wrapperBurnFeeRate\");\n        }\n\n        flexibleStorage.setIntValue(SETTINGS_CONTRACT_NAME, keccak256(abi.encodePacked(settingName, _wrapper)), _rate);\n    }\n\n    function setWrapperBurnFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _wrapper,\n        int _rate,\n        int getWrapperMintFeeRate\n    ) external {\n        require(_rate <= MAX_WRAPPER_BURN_FEE_RATE, \"rate > MAX_WRAPPER_BURN_FEE_RATE\");\n        require(_rate >= -MAX_WRAPPER_BURN_FEE_RATE, \"rate < -MAX_WRAPPER_BURN_FEE_RATE\");\n\n        // if burn rate is negative, burn fee rate should be negative and at least equal in magnitude\n        // otherwise risk of flash loan attack\n        if (_rate < 0) {\n            require(-_rate <= getWrapperMintFeeRate, \"-rate > wrapperMintFeeRate\");\n        }\n\n        flexibleStorage.setIntValue(SETTINGS_CONTRACT_NAME, keccak256(abi.encodePacked(settingName, _wrapper)), _rate);\n    }\n\n    function setInteractionDelay(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _collateral,\n        uint _interactionDelay\n    ) external {\n        require(_interactionDelay <= SafeDecimalMath.unit() * 3600, \"Max 1 hour\");\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _collateral)),\n            _interactionDelay\n        );\n    }\n\n    function setCollapseFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        address _collateral,\n        uint _collapseFeeRate\n    ) external {\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _collateral)),\n            _collapseFeeRate\n        );\n    }\n\n    function setAtomicMaxVolumePerBlock(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _maxVolume\n    ) external {\n        require(_maxVolume <= MAX_ATOMIC_VOLUME_PER_BLOCK, \"Atomic max volume exceed maximum uint192\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _maxVolume);\n    }\n\n    function setAtomicTwapWindow(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint _window\n    ) external {\n        require(_window >= MIN_ATOMIC_TWAP_WINDOW, \"Atomic twap window under minimum 1 min\");\n        require(_window <= MAX_ATOMIC_TWAP_WINDOW, \"Atomic twap window exceed maximum 1 day\");\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _window);\n    }\n\n    function setAtomicEquivalentForDexPricing(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        address _equivalent\n    ) external {\n        require(_equivalent != address(0), \"Atomic equivalent is 0 address\");\n        flexibleStorage.setAddressValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _currencyKey)),\n            _equivalent\n        );\n    }\n\n    function setAtomicExchangeFeeRate(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        uint _exchangeFeeRate\n    ) external {\n        require(_exchangeFeeRate <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _currencyKey)),\n            _exchangeFeeRate\n        );\n    }\n\n    function setAtomicVolatilityConsiderationWindow(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        uint _window\n    ) external {\n        if (_window != 0) {\n            require(\n                _window >= MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,\n                \"Atomic volatility consideration window under minimum 1 min\"\n            );\n            require(\n                _window <= MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,\n                \"Atomic volatility consideration window exceed maximum 1 day\"\n            );\n        }\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _currencyKey)),\n            _window\n        );\n    }\n\n    function setAtomicVolatilityUpdateThreshold(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        uint _threshold\n    ) external {\n        flexibleStorage.setUIntValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _currencyKey)),\n            _threshold\n        );\n    }\n\n    function setPureChainlinkPriceForAtomicSwapsEnabled(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        bool _enabled\n    ) external {\n        flexibleStorage.setBoolValue(\n            SETTINGS_CONTRACT_NAME,\n            keccak256(abi.encodePacked(settingName, _currencyKey)),\n            _enabled\n        );\n    }\n\n    function setCrossChainSynthTransferEnabled(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        bytes32 _currencyKey,\n        uint _value\n    ) external {\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, keccak256(abi.encodePacked(settingName, _currencyKey)), _value);\n    }\n\n    function setExchangeMaxDynamicFee(\n        IFlexibleStorage flexibleStorage,\n        bytes32 settingName,\n        uint maxFee\n    ) external {\n        require(maxFee != 0, \"Max dynamic fee cannot be 0\");\n        require(maxFee <= MAX_EXCHANGE_FEE_RATE, \"MAX_EXCHANGE_FEE_RATE exceeded\");\n\n        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, maxFee);\n    }\n}\n\n    ", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_TWAP_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ATOMIC_VOLUME_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROSS_DOMAIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EXCHANGE_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ISSUANCE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LIQUIDATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MINIMUM_STAKE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TARGET_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WRAPPER_BURN_FEE_RATE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WRAPPER_MINT_FEE_RATE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ATOMIC_TWAP_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CROSS_DOMAIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FEE_PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_LIQUIDATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATIO_FROM_TARGET_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SETTINGS_CONTRACT_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SystemSettingsLib", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b;SystemSettingsLib:307bdce0a68c612a17bae8d929f36402d7c94cfa;SignedSafeDecimalMath:728a2b79cad691531cc1146ef802617ff50c7095", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}