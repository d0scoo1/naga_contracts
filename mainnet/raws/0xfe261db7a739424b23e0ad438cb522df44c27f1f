{"status": "1", "message": "OK", "result": [{"SourceCode": "// Copyright (C) 2022, 2023, 2024, https://ai.bi.network\r\n\r\n// SwapBrain AI DEX trading bot includes three parts.\r\n// 1.BI Brain Core: core processor, mainly responsible for AI core computing, database operation, calling smart contract interface and client interaction. \r\n// 2.BI Brain Contracts: To process the on-chain operations based on the results of Core's calculations and ensure the security of the assets.\r\n//    SwapBrainBot.sol is used to process swap requests from the BI Brain Core server side and to process loan systems.\r\n//    EncryptedSwap.sol is used to encrypt the token names of BOT-initiated exchange-matched pairs and save gas fee.\r\n//    TKNSwapper.sol is used to help users swap assets between ETH, WETH and TKN.\r\n//    TokenizedNativedToken.sol is used to create and manage TNK tokens to calculate a user's share in the BOT.\r\n//    WGwei.sol is used to distribute the profits generated by transactions and the gas costs saved by SwapBrain.\r\n// 3.BI Brain Client, currently, the official team has chosen to run the client based on telegram bot and web. Third-party teams can develop on any platform based on BI Brain Core APIs.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.18;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface Swap {\r\n    function swapBrainExchange(address from,address toUser,uint amount) external view returns(bool) ;\r\n}\r\n\r\ninterface EncryptedSwap {\r\n    function EncryptedSwapExchange(address from,address toUser,uint amount) external view returns(bool) ;\r\n}\r\n\r\n\r\ncontract SwapBrainBot {\r\n\r\n    address public poolKeeper;\r\n    address public secondKeeper;\r\n    address public banker;\r\n    uint public feeRate;// unit: 1/10 percent\r\n    address public TKN;\r\n    //Initializing WETH\r\n    address[3] public WETH;\r\n    address[3] public StableCoins;\r\n\r\n    constructor () public {\r\n        poolKeeper = msg.sender;\r\n        secondKeeper = msg.sender; \r\n        banker = address(0);\r\n        feeRate = 1;\r\n        StableCoins = [address(0), address(0), address(0)];\r\n        WETH = [address(0), address(0), address(0)];  \r\n        TKN = address(0);\r\n    }\r\n\r\n    mapping (address => uint)  public  debt;\r\n    event  SwapBrainBotSwap(address indexed tokenA,uint amountA,address indexed tokenB,uint amountB);\r\n\r\n\r\n    modifier keepPool() {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        _;\r\n    }\r\n\r\n    function releaseOfEarnings(address tkn,address guy,uint amount) public keepPool returns(bool) {\r\n        require((tkn != address(0))&&(guy != address(0)));\r\n        ERC20 token = ERC20(tkn);\r\n        token.transfer(guy, amount);\r\n        return true;\r\n    }\r\n\r\n    function setBanker(address addr) public keepPool returns(bool) {\r\n        require(addr != address(0));\r\n        banker = addr;\r\n        return true;\r\n    }\r\n\r\n    function feeRate(uint _feeRate) public keepPool returns(bool) {\r\n        //require(addr != address(0));\r\n        feeRate = _feeRate;\r\n        return true;\r\n    }\r\n\r\n\r\n    function swapBrainSwap(address tokenA,address tokenB,address swapPair,uint amountA,uint amountB) public returns (bool) {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        if(ERC20(tokenA).balanceOf(address(this))<amountA){\r\n            uint debtAdded = sub(amountA,ERC20(tokenA).balanceOf(address(this)));\r\n            debt[tokenA] = add(debt[tokenA],debtAdded);\r\n            if((tokenA!=WETH[0])&&(tokenA!=WETH[1])&&(tokenA!=WETH[2])){\r\n                Swap(tokenA).swapBrainExchange(banker,address(this),debtAdded); \r\n            }else{\r\n                EncryptedSwap(tokenA).EncryptedSwapExchange(banker,address(this),debtAdded);\r\n            }   \r\n        }\r\n        if((tokenA!=WETH[0])&&(tokenA!=WETH[1])&&(tokenA!=WETH[2])){\r\n            Swap(tokenA).swapBrainExchange(address(this),swapPair,amountA);\r\n        }else{\r\n            EncryptedSwap(tokenA).EncryptedSwapExchange(address(this),swapPair,amountA);\r\n        }  \r\n        uint fee = div(mul(div(mul(debt[tokenB],1000000000000000000),1000),feeRate),1000000000000000000);\r\n        if((add(fee,debt[tokenB])<=amountB)&&(debt[tokenB]>0)){\r\n            if((tokenB!=WETH[0])&&(tokenB!=WETH[1])&&(tokenB!=WETH[2])){\r\n                Swap(tokenB).swapBrainExchange(swapPair,banker,add(debt[tokenB],fee)); \r\n            }else{\r\n                EncryptedSwap(tokenB).EncryptedSwapExchange(swapPair,banker,add(debt[tokenB],fee));\r\n            }\r\n            amountB = sub(amountB,add(debt[tokenB],fee));\r\n            debt[tokenB] = 0;\r\n        }\r\n        if((tokenB!=WETH[0])&&(tokenB!=WETH[1])&&(tokenB!=WETH[2])){\r\n            Swap(tokenB).swapBrainExchange(swapPair,address(this),amountB); \r\n        }else{\r\n            EncryptedSwap(tokenB).EncryptedSwapExchange(swapPair,address(this),amountB); \r\n        }\r\n        emit SwapBrainBotSwap(tokenA,amountA,tokenB,amountB);  \r\n        return true;\r\n    }\r\n\r\n    function WETHBlanceOfSwapBrainBot()  external view returns(uint,uint,uint) {\r\n        return (ERC20(WETH[0]).balanceOf(address(this)),\r\n                ERC20(WETH[1]).balanceOf(address(this)),\r\n                ERC20(WETH[2]).balanceOf(address(this)));      \r\n    }\r\n\r\n    function WETHBlanceOfTKN()  external view returns(uint,uint,uint) {\r\n        return (ERC20(WETH[0]).balanceOf(TKN),\r\n                ERC20(WETH[1]).balanceOf(TKN),\r\n                ERC20(WETH[2]).balanceOf(TKN));      \r\n    }\r\n\r\n    function TotalWETHBlanceOfSwapBrainSystem()  external view returns(uint) {\r\n        uint TotalWETHBlance = ERC20(WETH[0]).balanceOf(TKN);\r\n        TotalWETHBlance = add(TotalWETHBlance,ERC20(WETH[1]).balanceOf(TKN));\r\n        TotalWETHBlance = add(TotalWETHBlance,ERC20(WETH[2]).balanceOf(TKN));\r\n        TotalWETHBlance = add(TotalWETHBlance,ERC20(WETH[0]).balanceOf(address(this)));\r\n        TotalWETHBlance = add(TotalWETHBlance,ERC20(WETH[1]).balanceOf(address(this)));\r\n        TotalWETHBlance = add(TotalWETHBlance,ERC20(WETH[2]).balanceOf(address(this)));\r\n        return TotalWETHBlance;      \r\n    }\r\n\r\n    function TKNTotalSupply()  external view returns(uint) {\r\n        return (ERC20(TKN).totalSupply());      \r\n    }\r\n\r\n    function ETHBalanceOfALLWETHContracts() public view returns  (uint){\r\n        uint totalEtherBalance = WETH[0].balance;\r\n        totalEtherBalance = add(totalEtherBalance,WETH[1].balance);\r\n        totalEtherBalance = add(totalEtherBalance,WETH[2].balance);\r\n        return totalEtherBalance;\r\n    }\r\n\r\n    function StableCoinsOfSwapBrainBot()  external view returns(uint,uint,uint) {\r\n        return (ERC20(StableCoins[0]).balanceOf(address(this)),\r\n                ERC20(StableCoins[1]).balanceOf(address(this)),\r\n                ERC20(StableCoins[2]).balanceOf(address(this)));      \r\n    }\r\n\r\n    function TotalStableCoinsBlanceOfSwapBrainSystem()  external view returns(uint) {\r\n        uint TotalStableCoinsBlance = ERC20(StableCoins[0]).balanceOf(TKN);\r\n        TotalStableCoinsBlance = add(TotalStableCoinsBlance,ERC20(StableCoins[1]).balanceOf(TKN));\r\n        TotalStableCoinsBlance = add(TotalStableCoinsBlance,ERC20(StableCoins[2]).balanceOf(TKN));\r\n        TotalStableCoinsBlance = add(TotalStableCoinsBlance,ERC20(StableCoins[0]).balanceOf(address(this)));\r\n        TotalStableCoinsBlance = add(TotalStableCoinsBlance,ERC20(StableCoins[1]).balanceOf(address(this)));\r\n        TotalStableCoinsBlance = add(TotalStableCoinsBlance,ERC20(StableCoins[2]).balanceOf(address(this)));\r\n        return TotalStableCoinsBlance;      \r\n    }\r\n\r\n    function resetPoolKeeper(address newKeeper) public keepPool returns (bool) {\r\n        require(newKeeper != address(0));\r\n        poolKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n    function resetSecondKeeper(address newKeeper) public keepPool returns (bool) {\r\n        require(newKeeper != address(0));\r\n        secondKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n    function resetTKNContract(address _addr) public keepPool returns(bool) {\r\n        require(_addr != address(0));\r\n        TKN = _addr;\r\n        return true;\r\n    }\r\n\r\n    function resetWETHContract(address addr1,address addr2,address addr3) public keepPool returns(bool) {\r\n        WETH[0] = addr1;\r\n        WETH[1] = addr2;\r\n        WETH[2] = addr3;\r\n        return true;\r\n    }\r\n\r\n    function resetStableCoins(address addr1,address addr2,address addr3) public keepPool returns(bool) {\r\n        StableCoins[0] = addr1;\r\n        StableCoins[1] = addr2;\r\n        StableCoins[2] = addr3;\r\n        return true;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"banker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StableCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TKNTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetSecondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tkn\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseOfEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"addr3\",\"type\":\"address\"}],\"name\":\"resetWETHContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalWETHBlanceOfSwapBrainSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalStableCoinsBlanceOfSwapBrainSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"resetTKNContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHBalanceOfALLWETHContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"swapPair\",\"type\":\"address\"},{\"name\":\"amountA\",\"type\":\"uint256\"},{\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"swapBrainSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETHBlanceOfSwapBrainBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TKN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StableCoinsOfSwapBrainBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"addr3\",\"type\":\"address\"}],\"name\":\"resetStableCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETHBlanceOfTKN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetPoolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"SwapBrainBotSwap\",\"type\":\"event\"}]", "ContractName": "SwapBrainBot", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6aab6b6dfedd5f506b8f1c67a93dfc0ef4b927cdfa107420586c384ccc8adcee"}]}