{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StMATIC.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IValidatorShare.sol\\\";\\nimport \\\"./interfaces/INodeOperatorRegistry.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IPoLidoNFT.sol\\\";\\nimport \\\"./interfaces/IFxStateRootTunnel.sol\\\";\\nimport \\\"./interfaces/IStMATIC.sol\\\";\\n\\ncontract StMATIC is\\n    IStMATIC,\\n    ERC20Upgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    event SubmitEvent(address indexed _from, uint256 indexed _amount);\\n    event RequestWithdrawEvent(address indexed _from, uint256 indexed _amount);\\n    event DistributeRewardsEvent(uint256 indexed _amount);\\n    event WithdrawTotalDelegatedEvent(\\n        address indexed _from,\\n        uint256 indexed _amount\\n    );\\n    event DelegateEvent(\\n        uint256 indexed _amountDelegated,\\n        uint256 indexed _remainder\\n    );\\n    event ClaimTokensEvent(\\n        address indexed _from,\\n        uint256 indexed _id,\\n        uint256 indexed _amountClaimed,\\n        uint256 _amountBurned\\n    );\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    INodeOperatorRegistry public override nodeOperatorRegistry;\\n    FeeDistribution public override entityFees;\\n    IStakeManager public override stakeManager;\\n    IPoLidoNFT public override poLidoNFT;\\n    IFxStateRootTunnel public override fxStateRootTunnel;\\n\\n    string public override version;\\n    address public override dao;\\n    address public override insurance;\\n    address public override token;\\n    uint256 public override lastWithdrawnValidatorId;\\n    uint256 public override totalBuffered;\\n    uint256 public override delegationLowerBound;\\n    uint256 public override rewardDistributionLowerBound;\\n    uint256 public override reservedFunds;\\n    uint256 public override submitThreshold;\\n\\n    bool public override submitHandler;\\n\\n    mapping(uint256 => RequestWithdraw) public override token2WithdrawRequest;\\n\\n    bytes32 public constant override DAO = keccak256(\\\"DAO\\\");\\n\\n    /**\\n     * @param _nodeOperatorRegistry - Address of the node operator registry\\n     * @param _token - Address of MATIC token on Ethereum Mainnet\\n     * @param _dao - Address of the DAO\\n     * @param _insurance - Address of the insurance\\n     * @param _stakeManager - Address of the stake manager\\n     * @param _poLidoNFT - Address of the stMATIC NFT\\n     * @param _fxStateRootTunnel - Address of the FxStateRootTunnel\\n     */\\n    function initialize(\\n        address _nodeOperatorRegistry,\\n        address _token,\\n        address _dao,\\n        address _insurance,\\n        address _stakeManager,\\n        address _poLidoNFT,\\n        address _fxStateRootTunnel,\\n        uint256 _submitThreshold\\n    ) external override initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ERC20_init(\\\"Staked MATIC\\\", \\\"stMATIC\\\");\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DAO, _dao);\\n\\n        nodeOperatorRegistry = INodeOperatorRegistry(_nodeOperatorRegistry);\\n        stakeManager = IStakeManager(_stakeManager);\\n        poLidoNFT = IPoLidoNFT(_poLidoNFT);\\n        fxStateRootTunnel = IFxStateRootTunnel(_fxStateRootTunnel);\\n        dao = _dao;\\n        token = _token;\\n        insurance = _insurance;\\n\\n        entityFees = FeeDistribution(25, 50, 25);\\n        submitThreshold = _submitThreshold;\\n        submitHandler = true;\\n    }\\n\\n    /**\\n     * @dev Send funds to StMATIC contract and mints StMATIC to msg.sender\\n     * @notice Requires that msg.sender has approved _amount of MATIC to this contract\\n     * @param _amount - Amount of MATIC sent from msg.sender to this contract\\n     * @return Amount of StMATIC shares generated\\n     */\\n    function submit(uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        if (submitHandler) {\\n            require(\\n                _amount + totalBuffered <= submitThreshold,\\n                \\\"Submit threshold reached\\\"\\n            );\\n        }\\n\\n        IERC20Upgradeable(token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        (\\n            uint256 amountToMint,\\n            uint256 totalShares,\\n            uint256 totalPooledMatic\\n        ) = convertMaticToStMatic(_amount);\\n\\n        _mint(msg.sender, amountToMint);\\n\\n        totalBuffered += _amount;\\n\\n        fxStateRootTunnel.sendMessageToChild(\\n            abi.encode(totalShares + amountToMint, totalPooledMatic + _amount)\\n        );\\n\\n        emit SubmitEvent(msg.sender, _amount);\\n\\n        return amountToMint;\\n    }\\n\\n    /**\\n     * @dev Stores users request to withdraw into a RequestWithdraw struct\\n     * @param _amount - Amount of StMATIC that is requested to withdraw\\n     */\\n    function requestWithdraw(uint256 _amount) external override whenNotPaused {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        Operator.OperatorInfo[] memory operatorInfos = nodeOperatorRegistry\\n            .getOperatorInfos(false, true);\\n\\n        uint256 operatorInfosLength = operatorInfos.length;\\n\\n        uint256 tokenId;\\n        (\\n            uint256 totalAmount2WithdrawInMatic,\\n            uint256 totalShares,\\n            uint256 totalPooledMATIC\\n        ) = convertStMaticToMatic(_amount);\\n        uint256 currentAmount2WithdrawInMatic = totalAmount2WithdrawInMatic;\\n\\n        uint256 totalDelegated = getTotalStakeAcrossAllValidators();\\n\\n        uint256 minValidatorBalance = _getMinValidatorBalance(operatorInfos);\\n\\n        uint256 allowedAmount2RequestFromValidators = 0;\\n\\n        if (totalDelegated != 0) {\\n            require(\\n                (totalDelegated + totalBuffered) >=\\n                    currentAmount2WithdrawInMatic +\\n                        minValidatorBalance *\\n                        operatorInfosLength,\\n                \\\"Too much to withdraw\\\"\\n            );\\n            allowedAmount2RequestFromValidators =\\n                totalDelegated -\\n                minValidatorBalance *\\n                operatorInfosLength;\\n        } else {\\n            require(\\n                totalBuffered >= currentAmount2WithdrawInMatic,\\n                \\\"Too much to withdraw\\\"\\n            );\\n        }\\n\\n        while (currentAmount2WithdrawInMatic != 0) {\\n            tokenId = poLidoNFT.mint(msg.sender);\\n\\n            if (allowedAmount2RequestFromValidators != 0) {\\n                if (lastWithdrawnValidatorId > operatorInfosLength - 1) {\\n                    lastWithdrawnValidatorId = 0;\\n                }\\n                address validatorShare = operatorInfos[lastWithdrawnValidatorId]\\n                    .validatorShare;\\n\\n                (uint256 validatorBalance, ) = IValidatorShare(validatorShare)\\n                    .getTotalStake(address(this));\\n\\n                if (validatorBalance <= minValidatorBalance) {\\n                    lastWithdrawnValidatorId++;\\n                    continue;\\n                }\\n\\n                uint256 allowedAmount2Withdraw = validatorBalance -\\n                    minValidatorBalance;\\n\\n                uint256 amount2WithdrawFromValidator = (allowedAmount2Withdraw <=\\n                        currentAmount2WithdrawInMatic)\\n                        ? allowedAmount2Withdraw\\n                        : currentAmount2WithdrawInMatic;\\n\\n                sellVoucher_new(\\n                    validatorShare,\\n                    amount2WithdrawFromValidator,\\n                    type(uint256).max\\n                );\\n\\n                token2WithdrawRequest[tokenId] = RequestWithdraw(\\n                    0,\\n                    IValidatorShare(validatorShare).unbondNonces(address(this)),\\n                    stakeManager.epoch() + stakeManager.withdrawalDelay(),\\n                    validatorShare\\n                );\\n\\n                allowedAmount2RequestFromValidators -= amount2WithdrawFromValidator;\\n                currentAmount2WithdrawInMatic -= amount2WithdrawFromValidator;\\n                lastWithdrawnValidatorId++;\\n            } else {\\n                token2WithdrawRequest[tokenId] = RequestWithdraw(\\n                    currentAmount2WithdrawInMatic,\\n                    0,\\n                    stakeManager.epoch() + stakeManager.withdrawalDelay(),\\n                    address(0)\\n                );\\n\\n                reservedFunds += currentAmount2WithdrawInMatic;\\n                currentAmount2WithdrawInMatic = 0;\\n            }\\n        }\\n\\n        _burn(msg.sender, _amount);\\n\\n        fxStateRootTunnel.sendMessageToChild(\\n            abi.encode(\\n                totalShares - _amount,\\n                totalPooledMATIC - totalAmount2WithdrawInMatic\\n            )\\n        );\\n\\n        emit RequestWithdrawEvent(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice This will be included in the cron job\\n     * @dev Delegates tokens to validator share contract\\n     */\\n    function delegate() external override whenNotPaused {\\n        require(\\n            totalBuffered > delegationLowerBound + reservedFunds,\\n            \\\"Amount to delegate lower than minimum\\\"\\n        );\\n        Operator.OperatorInfo[] memory operatorInfos = nodeOperatorRegistry\\n            .getOperatorInfos(true, false);\\n        uint256 operatorInfosLength = operatorInfos.length;\\n\\n        require(operatorInfosLength > 0, \\\"No operator shares, cannot delegate\\\");\\n\\n        uint256 availableAmountToDelegate = totalBuffered - reservedFunds;\\n        uint256 maxDelegateLimitsSum;\\n        uint256 remainder;\\n\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            maxDelegateLimitsSum += operatorInfos[i].maxDelegateLimit;\\n        }\\n\\n        require(maxDelegateLimitsSum > 0, \\\"maxDelegateLimitsSum=0\\\");\\n\\n        uint256 totalToDelegatedAmount = maxDelegateLimitsSum <=\\n            availableAmountToDelegate\\n            ? maxDelegateLimitsSum\\n            : availableAmountToDelegate;\\n\\n        IERC20Upgradeable(token).safeApprove(address(stakeManager), 0);\\n\\n        IERC20Upgradeable(token).safeApprove(\\n            address(stakeManager),\\n            totalToDelegatedAmount\\n        );\\n\\n        uint256 amountDelegated;\\n\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            uint256 amountToDelegatePerOperator = (operatorInfos[i]\\n                .maxDelegateLimit * totalToDelegatedAmount) /\\n                maxDelegateLimitsSum;\\n\\n            buyVoucher(\\n                operatorInfos[i].validatorShare,\\n                amountToDelegatePerOperator,\\n                0\\n            );\\n\\n            amountDelegated += amountToDelegatePerOperator;\\n        }\\n\\n        remainder = availableAmountToDelegate - amountDelegated;\\n        totalBuffered = remainder + reservedFunds;\\n\\n        emit DelegateEvent(amountDelegated, remainder);\\n    }\\n\\n    /**\\n     * @dev Claims tokens from validator share and sends them to the\\n     * user if his request is in the userToWithdrawRequest\\n     * @param _tokenId - Id of the token that wants to be claimed\\n     */\\n    function claimTokens(uint256 _tokenId) external override whenNotPaused {\\n        require(poLidoNFT.isApprovedOrOwner(msg.sender, _tokenId), \\\"Not owner\\\");\\n        RequestWithdraw storage usersRequest = token2WithdrawRequest[_tokenId];\\n\\n        require(\\n            stakeManager.epoch() >= usersRequest.requestEpoch,\\n            \\\"Not able to claim yet\\\"\\n        );\\n\\n        poLidoNFT.burn(_tokenId);\\n\\n        uint256 amountToClaim;\\n\\n        if (usersRequest.validatorAddress != address(0)) {\\n            uint256 balanceBeforeClaim = IERC20Upgradeable(token).balanceOf(\\n                address(this)\\n            );\\n\\n            unstakeClaimTokens_new(\\n                usersRequest.validatorAddress,\\n                usersRequest.validatorNonce\\n            );\\n\\n            amountToClaim =\\n                IERC20Upgradeable(token).balanceOf(address(this)) -\\n                balanceBeforeClaim;\\n        } else {\\n            amountToClaim = usersRequest.amount2WithdrawFromStMATIC;\\n\\n            reservedFunds -= amountToClaim;\\n            totalBuffered -= amountToClaim;\\n        }\\n\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, amountToClaim);\\n\\n        emit ClaimTokensEvent(msg.sender, _tokenId, amountToClaim, 0);\\n    }\\n\\n    /**\\n     * @dev Distributes rewards claimed from validator shares based on fees defined in entityFee\\n     */\\n    function distributeRewards() external override whenNotPaused {\\n        Operator.OperatorInfo[] memory operatorInfos = nodeOperatorRegistry\\n            .getOperatorInfos(true, false);\\n\\n        uint256 operatorInfosLength = operatorInfos.length;\\n\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            IValidatorShare validatorShare = IValidatorShare(\\n                operatorInfos[i].validatorShare\\n            );\\n            uint256 stMaticReward = validatorShare.getLiquidRewards(\\n                address(this)\\n            );\\n            uint256 rewardThreshold = validatorShare.minAmount();\\n            if (stMaticReward >= rewardThreshold) {\\n                validatorShare.withdrawRewards();\\n            }\\n        }\\n\\n        uint256 totalRewards = (\\n            (IERC20Upgradeable(token).balanceOf(address(this)) - totalBuffered)\\n        ) / 10;\\n\\n        require(\\n            totalRewards > rewardDistributionLowerBound,\\n            \\\"Amount to distribute lower than minimum\\\"\\n        );\\n\\n        uint256 balanceBeforeDistribution = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n\\n        uint256 daoRewards = (totalRewards * entityFees.dao) / 100;\\n        uint256 insuranceRewards = (totalRewards * entityFees.insurance) / 100;\\n        uint256 operatorsRewards = (totalRewards * entityFees.operators) / 100;\\n        uint256 operatorReward = operatorsRewards / operatorInfosLength;\\n\\n        IERC20Upgradeable(token).safeTransfer(dao, daoRewards);\\n        IERC20Upgradeable(token).safeTransfer(insurance, insuranceRewards);\\n\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            IERC20Upgradeable(token).safeTransfer(\\n                operatorInfos[i].rewardAddress,\\n                operatorReward\\n            );\\n        }\\n\\n        uint256 currentBalance = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n\\n        uint256 totalDistributed = balanceBeforeDistribution - currentBalance;\\n\\n        // Add the remainder to totalBuffered\\n        totalBuffered = currentBalance;\\n\\n        emit DistributeRewardsEvent(totalDistributed);\\n    }\\n\\n    /**\\n     * @notice Only NodeOperatorRegistry can call this function\\n     * @dev Withdraws funds from unstaked validator\\n     * @param _validatorShare - Address of the validator share that will be withdrawn\\n     */\\n    function withdrawTotalDelegated(address _validatorShare) external override {\\n        require(\\n            msg.sender == address(nodeOperatorRegistry),\\n            \\\"Not a node operator\\\"\\n        );\\n\\n        (uint256 stakedAmount, ) = getTotalStake(\\n            IValidatorShare(_validatorShare)\\n        );\\n\\n        if (stakedAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 tokenId = poLidoNFT.mint(address(this));\\n        sellVoucher_new(_validatorShare, stakedAmount, type(uint256).max);\\n\\n        token2WithdrawRequest[tokenId] = RequestWithdraw(\\n            uint256(0),\\n            IValidatorShare(_validatorShare).unbondNonces(address(this)),\\n            stakeManager.epoch() + stakeManager.withdrawalDelay(),\\n            _validatorShare\\n        );\\n\\n        fxStateRootTunnel.sendMessageToChild(\\n            abi.encode(totalSupply(), getTotalPooledMatic())\\n        );\\n\\n        emit WithdrawTotalDelegatedEvent(_validatorShare, stakedAmount);\\n    }\\n\\n    /**\\n     * @dev Claims tokens from validator share and sends them to the\\n     * StMATIC contract\\n     * @param _tokenId - Id of the token that is supposed to be claimed\\n     */\\n    function claimTokens2StMatic(uint256 _tokenId)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        RequestWithdraw storage lidoRequests = token2WithdrawRequest[_tokenId];\\n\\n        require(\\n            poLidoNFT.ownerOf(_tokenId) == address(this),\\n            \\\"Not owner of the NFT\\\"\\n        );\\n\\n        poLidoNFT.burn(_tokenId);\\n\\n        require(\\n            stakeManager.epoch() >= lidoRequests.requestEpoch,\\n            \\\"Not able to claim yet\\\"\\n        );\\n\\n        uint256 balanceBeforeClaim = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n\\n        unstakeClaimTokens_new(\\n            lidoRequests.validatorAddress,\\n            lidoRequests.validatorNonce\\n        );\\n\\n        uint256 claimedAmount = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        ) - balanceBeforeClaim;\\n\\n        totalBuffered += claimedAmount;\\n\\n        fxStateRootTunnel.sendMessageToChild(\\n            abi.encode(totalSupply(), getTotalPooledMatic())\\n        );\\n\\n        emit ClaimTokensEvent(address(this), _tokenId, claimedAmount, 0);\\n    }\\n\\n    /**\\n     * @dev Flips the pause state\\n     */\\n    function togglePause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        paused() ? _unpause() : _pause();\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    /////                                                    ///\\n    /////             ***ValidatorShare API***               ///\\n    /////                                                    ///\\n    ////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev API for delegated buying vouchers from validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     * @param _amount - Amount of MATIC to use for buying vouchers\\n     * @param _minSharesToMint - Minimum of shares that is bought with _amount of MATIC\\n     * @return Actual amount of MATIC used to buy voucher, might differ from _amount because of _minSharesToMint\\n     */\\n    function buyVoucher(\\n        address _validatorShare,\\n        uint256 _amount,\\n        uint256 _minSharesToMint\\n    ) private returns (uint256) {\\n        uint256 amountSpent = IValidatorShare(_validatorShare).buyVoucher(\\n            _amount,\\n            _minSharesToMint\\n        );\\n\\n        return amountSpent;\\n    }\\n\\n    /**\\n     * @dev API for delegated restaking rewards to validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     */\\n    function restake(address _validatorShare) private {\\n        IValidatorShare(_validatorShare).restake();\\n    }\\n\\n    /**\\n     * @dev API for delegated unstaking and claiming tokens from validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     * @param _unbondNonce - Unbond nonce\\n     */\\n    function unstakeClaimTokens_new(\\n        address _validatorShare,\\n        uint256 _unbondNonce\\n    ) private {\\n        IValidatorShare(_validatorShare).unstakeClaimTokens_new(_unbondNonce);\\n    }\\n\\n    /**\\n     * @dev API for delegated selling vouchers from validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     * @param _claimAmount - Amount of MATIC to claim\\n     * @param _maximumSharesToBurn - Maximum amount of shares to burn\\n     */\\n    function sellVoucher_new(\\n        address _validatorShare,\\n        uint256 _claimAmount,\\n        uint256 _maximumSharesToBurn\\n    ) private {\\n        IValidatorShare(_validatorShare).sellVoucher_new(\\n            _claimAmount,\\n            _maximumSharesToBurn\\n        );\\n    }\\n\\n    /**\\n     * @dev API for getting total stake of this contract from validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     * @return Total stake of this contract and MATIC -> share exchange rate\\n     */\\n    function getTotalStake(IValidatorShare _validatorShare)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return _validatorShare.getTotalStake(address(this));\\n    }\\n\\n    /**\\n     * @dev API for liquid rewards of this contract from validatorShare\\n     * @param _validatorShare - Address of validatorShare contract\\n     * @return Liquid rewards of this contract\\n     */\\n    function getLiquidRewards(IValidatorShare _validatorShare)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _validatorShare.getLiquidRewards(address(this));\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    /////                                                    ///\\n    /////            ***Helpers & Utilities***               ///\\n    /////                                                    ///\\n    ////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Helper function for that returns total pooled MATIC\\n     * @return Total pooled MATIC\\n     */\\n    function getTotalStakeAcrossAllValidators()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalStake;\\n        Operator.OperatorInfo[] memory operatorInfos = nodeOperatorRegistry\\n            .getOperatorInfos(false, true);\\n\\n        uint256 operatorInfosLength = operatorInfos.length;\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            (uint256 currValidatorShare, ) = getTotalStake(\\n                IValidatorShare(operatorInfos[i].validatorShare)\\n            );\\n\\n            totalStake += currValidatorShare;\\n        }\\n\\n        return totalStake;\\n    }\\n\\n    /**\\n     * @dev Function that calculates total pooled Matic\\n     * @return Total pooled Matic\\n     */\\n    function getTotalPooledMatic() public view override returns (uint256) {\\n        uint256 totalStaked = getTotalStakeAcrossAllValidators();\\n        return totalStaked + totalBuffered - reservedFunds;\\n    }\\n\\n    /**\\n     * @dev Function that converts arbitrary stMATIC to Matic\\n     * @param _balance - Balance in stMATIC\\n     * @return Balance in Matic, totalShares and totalPooledMATIC\\n     */\\n    function convertStMaticToMatic(uint256 _balance)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 totalShares = totalSupply();\\n        totalShares = totalShares == 0 ? 1 : totalShares;\\n\\n        uint256 totalPooledMATIC = getTotalPooledMatic();\\n        totalPooledMATIC = totalPooledMATIC == 0 ? 1 : totalPooledMATIC;\\n\\n        uint256 balanceInMATIC = (_balance * totalPooledMATIC) / totalShares;\\n\\n        return (balanceInMATIC, totalShares, totalPooledMATIC);\\n    }\\n\\n    /**\\n     * @dev Function that converts arbitrary Matic to stMATIC\\n     * @param _balance - Balance in Matic\\n     * @return Balance in stMATIC, totalShares and totalPooledMATIC\\n     */\\n    function convertMaticToStMatic(uint256 _balance)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 totalShares = totalSupply();\\n        totalShares = totalShares == 0 ? 1 : totalShares;\\n\\n        uint256 totalPooledMatic = getTotalPooledMatic();\\n        totalPooledMatic = totalPooledMatic == 0 ? 1 : totalPooledMatic;\\n\\n        uint256 balanceInStMatic = (_balance * totalShares) / totalPooledMatic;\\n\\n        return (balanceInStMatic, totalShares, totalPooledMatic);\\n    }\\n\\n    /**\\n     * @dev Function that calculates minimal allowed validator balance (lower bound)\\n     * @return Minimal validator balance in MATIC\\n     */\\n    function getMinValidatorBalance() external view override returns (uint256) {\\n        Operator.OperatorInfo[] memory operatorInfos = nodeOperatorRegistry\\n        .getOperatorInfos(false, true);\\n\\n        return _getMinValidatorBalance(operatorInfos);\\n    }\\n\\n\\n    function _getMinValidatorBalance(Operator.OperatorInfo[] memory operatorInfos) private view returns (uint256) {\\n        uint256 operatorInfosLength = operatorInfos.length;\\n        uint256 minValidatorBalance = type(uint256).max;\\n\\n        for (uint256 i = 0; i < operatorInfosLength; i++) {\\n            (uint256 validatorShare, ) = getTotalStake(\\n                IValidatorShare(operatorInfos[i].validatorShare)\\n            );\\n            // 10% of current validatorShare\\n            uint256 minValidatorBalanceCurrent = validatorShare / 10;\\n\\n            if (\\n                minValidatorBalanceCurrent != 0 &&\\n                minValidatorBalanceCurrent < minValidatorBalance\\n            ) {\\n                minValidatorBalance = minValidatorBalanceCurrent;\\n            }\\n        }\\n\\n        return minValidatorBalance;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    /////                                                    ///\\n    /////                 ***Setters***                      ///\\n    /////                                                    ///\\n    ////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Function that sets entity fees\\n     * @notice Callable only by dao\\n     * @param _daoFee - DAO fee in %\\n     * @param _operatorsFee - Operator fees in %\\n     * @param _insuranceFee - Insurance fee in %\\n     */\\n    function setFees(\\n        uint8 _daoFee,\\n        uint8 _operatorsFee,\\n        uint8 _insuranceFee\\n    ) external override onlyRole(DAO) {\\n        require(\\n            _daoFee + _operatorsFee + _insuranceFee == 100,\\n            \\\"sum(fee)!=100\\\"\\n        );\\n        entityFees.dao = _daoFee;\\n        entityFees.operators = _operatorsFee;\\n        entityFees.insurance = _insuranceFee;\\n    }\\n\\n    /**\\n     * @dev Function that sets new dao address\\n     * @notice Callable only by dao\\n     * @param _address - New dao address\\n     */\\n    function setDaoAddress(address _address) external override onlyRole(DAO) {\\n        revokeRole(DAO, dao);\\n        dao = _address;\\n        _setupRole(DAO, dao);\\n    }\\n\\n    /**\\n     * @dev Function that sets new insurance address\\n     * @notice Callable only by dao\\n     * @param _address - New insurance address\\n     */\\n    function setInsuranceAddress(address _address)\\n        external\\n        override\\n        onlyRole(DAO)\\n    {\\n        insurance = _address;\\n    }\\n\\n    /**\\n     * @dev Function that sets new node operator address\\n     * @notice Only callable by dao\\n     * @param _address - New node operator address\\n     */\\n    function setNodeOperatorRegistryAddress(address _address)\\n        external\\n        override\\n        onlyRole(DAO)\\n    {\\n        nodeOperatorRegistry = INodeOperatorRegistry(_address);\\n    }\\n\\n    /**\\n     * @dev Function that sets new lower bound for delegation\\n     * @notice Only callable by dao\\n     * @param _delegationLowerBound - New lower bound for delegation\\n     */\\n    function setDelegationLowerBound(uint256 _delegationLowerBound)\\n        external\\n        override\\n        onlyRole(DAO)\\n    {\\n        delegationLowerBound = _delegationLowerBound;\\n    }\\n\\n    /**\\n     * @dev Function that sets new lower bound for rewards distribution\\n     * @notice Only callable by dao\\n     * @param _rewardDistributionLowerBound - New lower bound for rewards distribution\\n     */\\n    function setRewardDistributionLowerBound(\\n        uint256 _rewardDistributionLowerBound\\n    ) external override onlyRole(DAO) {\\n        rewardDistributionLowerBound = _rewardDistributionLowerBound;\\n    }\\n\\n    /**\\n     * @dev Function that sets the poLidoNFT address\\n     * @param _poLidoNFT new poLidoNFT address\\n     */\\n    function setPoLidoNFT(address _poLidoNFT) external override onlyRole(DAO) {\\n        poLidoNFT = IPoLidoNFT(_poLidoNFT);\\n    }\\n\\n    /**\\n     * @dev Function that sets the fxStateRootTunnel address\\n     * @param _fxStateRootTunnel address of fxStateRootTunnel\\n     */\\n    function setFxStateRootTunnel(address _fxStateRootTunnel)\\n        external\\n        override\\n        onlyRole(DAO)\\n    {\\n        fxStateRootTunnel = IFxStateRootTunnel(_fxStateRootTunnel);\\n    }\\n\\n    /**\\n     * @dev Function that sets the submitThreshold\\n     * @param _submitThreshold new value for submit threshold\\n     */\\n    function setSubmitThreshold(uint256 _submitThreshold)\\n        external\\n        override\\n        onlyRole(DAO)\\n    {\\n        submitThreshold = _submitThreshold;\\n    }\\n\\n    /**\\n     * @dev Function that sets the submitHandler value to its NOT value\\n     */\\n    function flipSubmitHandler() external override onlyRole(DAO) {\\n        submitHandler = !submitHandler;\\n    }\\n\\n    /**\\n     * @dev Function that sets the new version\\n     * @param _version - New version that will be set\\n     */\\n    function setVersion(string calldata _version)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        version = _version;\\n    }\\n\\n    /**\\n     * @dev Function that retrieves the amount of matic that will be claimed from the NFT token\\n     * @param _tokenId - Id of the PolidoNFT\\n     */\\n    function getMaticFromTokenId(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        RequestWithdraw memory requestData = token2WithdrawRequest[_tokenId];\\n        IValidatorShare validatorShare = IValidatorShare(\\n            requestData.validatorAddress\\n        );\\n        uint256 validatorId = validatorShare.validatorId();\\n        uint256 exchangeRatePrecision = validatorId < 8 ? 100 : 10**29;\\n        uint256 withdrawExchangeRate = validatorShare.withdrawExchangeRate();\\n        IValidatorShare.DelegatorUnbond memory unbond = validatorShare\\n            .unbonds_new(address(this), requestData.validatorNonce);\\n\\n        return (withdrawExchangeRate * unbond.shares) / exchangeRatePrecision;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorShare.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IValidatorShare {\\n    struct DelegatorUnbond {\\n        uint256 shares;\\n        uint256 withdrawEpoch;\\n    }\\n\\n    function unbondNonces(address _address) external view returns (uint256);\\n\\n    function activeAmount() external view returns (uint256);\\n\\n    function validatorId() external view returns (uint256);\\n\\n    function withdrawExchangeRate() external view returns (uint256);\\n\\n    function withdrawRewards() external;\\n\\n    function unstakeClaimTokens() external;\\n\\n    function minAmount() external view returns (uint256);\\n\\n    function getLiquidRewards(address user) external view returns (uint256);\\n\\n    function delegation() external view returns (bool);\\n\\n    function updateDelegation(bool _delegation) external;\\n\\n    function buyVoucher(uint256 _amount, uint256 _minSharesToMint)\\n        external\\n        returns (uint256);\\n\\n    function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)\\n        external;\\n\\n    function unstakeClaimTokens_new(uint256 unbondNonce) external;\\n\\n    function unbonds_new(address _address, uint256 _unbondNonce)\\n        external\\n        view\\n        returns (DelegatorUnbond memory);\\n\\n    function getTotalStake(address user)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function restake() external returns (uint256, uint256);\\n\\n    function unlock() external;\\n\\n    function lock() external;\\n\\n    function drain(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    ) external;\\n\\n    function slash(uint256 _amount) external;\\n\\n    function migrateOut(address user, uint256 amount) external;\\n\\n    function migrateIn(address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../lib/Operator.sol\\\";\\n\\n/// @title INodeOperatorRegistry\\n/// @author 2021 ShardLabs\\n/// @notice Node operator registry interface\\ninterface INodeOperatorRegistry {\\n    /// @notice Allows to add a new node operator to the system.\\n    /// @param _name the node operator name.\\n    /// @param _rewardAddress public address used for ACL and receive rewards.\\n    /// @param _signerPubkey public key used on heimdall len 64 bytes.\\n    function addOperator(\\n        string memory _name,\\n        address _rewardAddress,\\n        bytes memory _signerPubkey\\n    ) external;\\n\\n    /// @notice Allows to stop a node operator.\\n    /// @param _operatorId node operator id.\\n    function stopOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows to remove a node operator from the system.\\n    /// @param _operatorId node operator id.\\n    function removeOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows a staked validator to join the system.\\n    function joinOperator() external;\\n\\n    /// @notice Allows to stake an operator on the Polygon stakeManager.\\n    /// This function calls Polygon transferFrom so the totalAmount(_amount + _heimdallFee)\\n    /// has to be approved first.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee heimdallFee to stake.\\n    function stake(uint256 _amount, uint256 _heimdallFee) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param _amount amount to stake.\\n    /// @param _restakeRewards restake rewards.\\n    function restake(uint256 _amount, bool _restakeRewards) external;\\n\\n    /// @notice Allows the operator's owner to migrate the NFT. This can be done only\\n    /// if the DAO stopped the operator.\\n    function migrate() external;\\n\\n    /// @notice Allows to unstake an operator from the stakeManager. After the withdraw_delay\\n    /// the operator owner can call claimStake func to withdraw the staked tokens.\\n    function unstake() external;\\n\\n    /// @notice Allows to topup heimdall fees on polygon stakeManager.\\n    /// @param _heimdallFee amount to topup.\\n    function topUpForFee(uint256 _heimdallFee) external;\\n\\n    /// @notice Allows to claim staked tokens on the stake Manager after the end of the\\n    /// withdraw delay\\n    function unstakeClaim() external;\\n\\n    /// @notice Allows an owner to withdraw rewards from the stakeManager.\\n    function withdrawRewards() external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(bytes memory _signerPubkey) external;\\n\\n    /// @notice Allows to claim the heimdall fees staked by the owner of the operator\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator and switch from UNSTAKE status to STAKED\\n    function unjail() external;\\n\\n    /// @notice Allows an operator's owner to set the operator name.\\n    function setOperatorName(string memory _name) external;\\n\\n    /// @notice Allows an operator's owner to set the operator rewardAddress.\\n    function setOperatorRewardAddress(address _rewardAddress) external;\\n\\n    /// @notice Allows the DAO to set _defaultMaxDelegateLimit.\\n    function setDefaultMaxDelegateLimit(uint256 _defaultMaxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _maxDelegateLimit for an operator.\\n    function setMaxDelegateLimit(uint256 _operatorId, uint256 _maxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _commissionRate.\\n    function setCommissionRate(uint256 _commissionRate) external;\\n\\n    /// @notice Allows the DAO to set _commissionRate for an operator.\\n    /// @param _operatorId id of the operator\\n    /// @param _newCommissionRate new commission rate\\n    function updateOperatorCommissionRate(\\n        uint256 _operatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows the DAO to set _minAmountStake and _minHeimdallFees.\\n    function setStakeAmountAndFees(\\n        uint256 _minAmountStake,\\n        uint256 _minHeimdallFees\\n    ) external;\\n\\n    /// @notice Allows to pause/unpause the node operator contract.\\n    function togglePause() external;\\n\\n    /// @notice Allows the DAO to enable/disable restake.\\n    function setRestake(bool _restake) external;\\n\\n    /// @notice Allows the DAO to set stMATIC contract.\\n    function setStMATIC(address _stMATIC) external;\\n\\n    /// @notice Allows the DAO to set validator factory contract.\\n    function setValidatorFactory(address _validatorFactory) external;\\n\\n    /// @notice Allows the DAO to set stake manager contract.\\n    function setStakeManager(address _stakeManager) external;\\n\\n    /// @notice Allows to set contract version.\\n    function setVersion(string memory _version) external;\\n\\n    /// @notice Get the stMATIC contract addresses\\n    function getContracts()\\n        external\\n        view\\n        returns (\\n            address _validatorFactory,\\n            address _stakeManager,\\n            address _polygonERC20,\\n            address _stMATIC\\n        );\\n\\n    /// @notice Allows to get stats.\\n    function getState()\\n        external\\n        view\\n        returns (\\n            uint256 _totalNodeOperator,\\n            uint256 _totalInactiveNodeOperator,\\n            uint256 _totalActiveNodeOperator,\\n            uint256 _totalStoppedNodeOperator,\\n            uint256 _totalUnstakedNodeOperator,\\n            uint256 _totalClaimedNodeOperator,\\n            uint256 _totalExitNodeOperator,\\n            uint256 _totalSlashedNodeOperator,\\n            uint256 _totalEjectedNodeOperator\\n        );\\n\\n    /// @notice Allows to get a list of operatorInfo.\\n    function getOperatorInfos(bool _delegation, bool _allActive)\\n        external\\n        view\\n        returns (Operator.OperatorInfo[] memory);\\n\\n\\n    /// @notice Allows to get all the operator ids.\\n    function getOperatorIds() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title polygon stake manager interface.\\n/// @author 2021 ShardLabs\\n/// @notice User to interact with the polygon stake manager.\\ninterface IStakeManager {\\n    /// @notice Stake a validator on polygon stake manager.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param amount amount to stake.\\n    /// @param heimdallFee heimdall fees.\\n    /// @param acceptDelegation accept delegation.\\n    /// @param signerPubkey signer publickey used in heimdall node.\\n    function stakeFor(\\n        address user,\\n        uint256 amount,\\n        uint256 heimdallFee,\\n        bool acceptDelegation,\\n        bytes memory signerPubkey\\n    ) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param validatorId validator id.\\n    /// @param amount amount to stake.\\n    /// @param stakeRewards restake rewards.\\n    function restake(\\n        uint256 validatorId,\\n        uint256 amount,\\n        bool stakeRewards\\n    ) external;\\n\\n    /// @notice Request unstake a validator.\\n    /// @param validatorId validator id.\\n    function unstake(uint256 validatorId) external;\\n\\n    /// @notice Increase the heimdall fees.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param heimdallFee heimdall fees.\\n    function topUpForFee(address user, uint256 heimdallFee) external;\\n\\n    /// @notice Get the validator id using the user address.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @return return the validator id\\n    function getValidatorId(address user) external view returns (uint256);\\n\\n    /// @notice get the validator contract used for delegation.\\n    /// @param validatorId validator id.\\n    /// @return return the address of the validator contract.\\n    function getValidatorContract(uint256 validatorId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Withdraw accumulated rewards\\n    /// @param validatorId validator id.\\n    function withdrawRewards(uint256 validatorId) external;\\n\\n    /// @notice Get validator total staked.\\n    /// @param validatorId validator id.\\n    function validatorStake(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Allows to unstake the staked tokens on the stakeManager.\\n    /// @param validatorId validator id.\\n    function unstakeClaim(uint256 validatorId) external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _validatorId validator id\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(uint256 _validatorId, bytes memory _signerPubkey)\\n        external;\\n\\n    /// @notice Allows to claim the heimdall fees.\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to update the commision rate of a validator\\n    /// @param _validatorId operator id\\n    /// @param _newCommissionRate commission rate\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId id of the validator that is to be unjailed\\n    function unjail(uint256 _validatorId) external;\\n\\n    /// @notice Returns a withdrawal delay.\\n    function withdrawalDelay() external view returns (uint256);\\n\\n    /// @notice Transfers amount from delegator\\n    function delegationDeposit(\\n        uint256 validatorId,\\n        uint256 amount,\\n        address delegator\\n    ) external returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Locked,\\n        Unstaked\\n    }\\n\\n    struct Validator {\\n        uint256 amount;\\n        uint256 reward;\\n        uint256 activationEpoch;\\n        uint256 deactivationEpoch;\\n        uint256 jailTime;\\n        address signer;\\n        address contractAddress;\\n        Status status;\\n        uint256 commissionRate;\\n        uint256 lastCommissionUpdate;\\n        uint256 delegatorsReward;\\n        uint256 delegatedAmount;\\n        uint256 initialRewardPerStake;\\n    }\\n\\n    function validators(uint256 _index)\\n        external\\n        view\\n        returns (Validator memory);\\n\\n    /// @notice Returns the address of the nft contract\\n    function NFTContract() external view returns (address);\\n\\n    /// @notice Returns the validator accumulated rewards on stake manager.\\n    function validatorReward(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoLidoNFT.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/// @title PoLidoNFT interface.\\n/// @author 2021 ShardLabs\\ninterface IPoLidoNFT is IERC721Upgradeable {\\n    function mint(address _to) external returns (uint256);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function isApprovedOrOwner(address _spender, uint256 _tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setStMATIC(address _stMATIC) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFxStateRootTunnel.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IFxStateRootTunnel {\\n    function latestData() external view returns (bytes memory);\\n\\n    function setFxChildTunnel(address _fxChildTunnel) external;\\n\\n    function sendMessageToChild(bytes memory message) external;\\n\\n    function setStMATIC(address _stMATIC) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStMATIC.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IValidatorShare.sol\\\";\\nimport \\\"./INodeOperatorRegistry.sol\\\";\\nimport \\\"./INodeOperatorRegistry.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IPoLidoNFT.sol\\\";\\nimport \\\"./IFxStateRootTunnel.sol\\\";\\n\\n/// @title StMATIC interface.\\n/// @author 2021 ShardLabs\\ninterface IStMATIC is IERC20Upgradeable {\\n    struct RequestWithdraw {\\n        uint256 amount2WithdrawFromStMATIC;\\n        uint256 validatorNonce;\\n        uint256 requestEpoch;\\n        address validatorAddress;\\n    }\\n\\n    struct FeeDistribution {\\n        uint8 dao;\\n        uint8 operators;\\n        uint8 insurance;\\n    }\\n\\n    function withdrawTotalDelegated(address _validatorShare) external;\\n\\n    function nodeOperatorRegistry() external returns (INodeOperatorRegistry);\\n\\n    function entityFees()\\n        external\\n        returns (\\n            uint8,\\n            uint8,\\n            uint8\\n        );\\n\\n    function getMaticFromTokenId(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakeManager() external view returns (IStakeManager);\\n\\n    function poLidoNFT() external view returns (IPoLidoNFT);\\n\\n    function fxStateRootTunnel() external view returns (IFxStateRootTunnel);\\n\\n    function version() external view returns (string memory);\\n\\n    function dao() external view returns (address);\\n\\n    function insurance() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function lastWithdrawnValidatorId() external view returns (uint256);\\n\\n    function totalBuffered() external view returns (uint256);\\n\\n    function delegationLowerBound() external view returns (uint256);\\n\\n    function rewardDistributionLowerBound() external view returns (uint256);\\n\\n    function reservedFunds() external view returns (uint256);\\n\\n    function submitThreshold() external view returns (uint256);\\n\\n    function submitHandler() external view returns (bool);\\n\\n    function getMinValidatorBalance() external view returns (uint256);\\n\\n    function token2WithdrawRequest(uint256 _requestId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function DAO() external view returns (bytes32);\\n\\n    function initialize(\\n        address _nodeOperatorRegistry,\\n        address _token,\\n        address _dao,\\n        address _insurance,\\n        address _stakeManager,\\n        address _poLidoNFT,\\n        address _fxStateRootTunnel,\\n        uint256 _submitThreshold\\n    ) external;\\n\\n    function submit(uint256 _amount) external returns (uint256);\\n\\n    function requestWithdraw(uint256 _amount) external;\\n\\n    function delegate() external;\\n\\n    function claimTokens(uint256 _tokenId) external;\\n\\n    function distributeRewards() external;\\n\\n    function claimTokens2StMatic(uint256 _tokenId) external;\\n\\n    function togglePause() external;\\n\\n    function getTotalStake(IValidatorShare _validatorShare)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLiquidRewards(IValidatorShare _validatorShare)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalStakeAcrossAllValidators() external view returns (uint256);\\n\\n    function getTotalPooledMatic() external view returns (uint256);\\n\\n    function convertStMaticToMatic(uint256 _balance)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function convertMaticToStMatic(uint256 _balance)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setFees(\\n        uint8 _daoFee,\\n        uint8 _operatorsFee,\\n        uint8 _insuranceFee\\n    ) external;\\n\\n    function setDaoAddress(address _address) external;\\n\\n    function setInsuranceAddress(address _address) external;\\n\\n    function setNodeOperatorRegistryAddress(address _address) external;\\n\\n    function setDelegationLowerBound(uint256 _delegationLowerBound) external;\\n\\n    function setRewardDistributionLowerBound(\\n        uint256 _rewardDistributionLowerBound\\n    ) external;\\n\\n    function setPoLidoNFT(address _poLidoNFT) external;\\n\\n    function setFxStateRootTunnel(address _fxStateRootTunnel) external;\\n\\n    function setSubmitThreshold(uint256 _submitThreshold) external;\\n\\n    function flipSubmitHandler() external;\\n\\n    function setVersion(string calldata _version) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Operator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Operator {\\n    struct OperatorInfo {\\n        uint256 operatorId;\\n        address validatorShare;\\n        uint256 maxDelegateLimit;\\n        address rewardAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountBurned\",\"type\":\"uint256\"}],\"name\":\"ClaimTokensEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amountDelegated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_remainder\",\"type\":\"uint256\"}],\"name\":\"DelegateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeRewardsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SubmitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTotalDelegatedEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimTokens2StMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"convertMaticToStMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"convertStMaticToMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationLowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"dao\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"operators\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"insurance\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSubmitHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxStateRootTunnel\",\"outputs\":[{\"internalType\":\"contract IFxStateRootTunnel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValidatorShare\",\"name\":\"_validatorShare\",\"type\":\"address\"}],\"name\":\"getLiquidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMaticFromTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPooledMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValidatorShare\",\"name\":\"_validatorShare\",\"type\":\"address\"}],\"name\":\"getTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeAcrossAllValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeOperatorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insurance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poLidoNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxStateRootTunnel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_submitThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawnValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeOperatorRegistry\",\"outputs\":[{\"internalType\":\"contract INodeOperatorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poLidoNFT\",\"outputs\":[{\"internalType\":\"contract IPoLidoNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributionLowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delegationLowerBound\",\"type\":\"uint256\"}],\"name\":\"setDelegationLowerBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_daoFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_operatorsFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_insuranceFee\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxStateRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxStateRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInsuranceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNodeOperatorRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poLidoNFT\",\"type\":\"address\"}],\"name\":\"setPoLidoNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardDistributionLowerBound\",\"type\":\"uint256\"}],\"name\":\"setRewardDistributionLowerBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_submitThreshold\",\"type\":\"uint256\"}],\"name\":\"setSubmitThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeManager\",\"outputs\":[{\"internalType\":\"contract IStakeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token2WithdrawRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount2WithdrawFromStMATIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuffered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorShare\",\"type\":\"address\"}],\"name\":\"withdrawTotalDelegated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StMATIC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}