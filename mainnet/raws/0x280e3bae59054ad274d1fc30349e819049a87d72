{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/IAccessControlEnumerable.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable is IAccessControl {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControlEnumerable.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual override {\r\n        super._grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual override {\r\n        super._revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Interfaces/PresaleInterface.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface PresaleInterface is IAccessControlEnumerable {\r\n\r\n    /* solhint-disable */\r\n    function ADMIN_ROLE() external pure returns(bytes32);\r\n    function MODERATOR_ROLE() external pure returns(bytes32);\r\n    /* solhint-enable */\r\n\r\n    // ******************************************\r\n    // ************* PUBLIC REGION **************\r\n    // ******************************************\r\n    function contributeFirstStage(address tokenInvested_, uint amountInvested_, bytes memory signature_) external;\r\n    function contributeSecondStage(address tokenInvested_, uint amountInvested_, bytes memory signature_) external;\r\n\r\n    // *******************************************\r\n    // ************* MANAGER REGION **************\r\n    // *******************************************\r\n    function setMinimumContributionRequierment(uint minimumContributionRequierment_) external returns (bool);\r\n    function setPresaleCap(uint presaleCap_) external returns (bool);\r\n\r\n    function setFirstStageBlockStart(uint firstStageBlockStart_) external returns (bool);\r\n    function setFirstStageBlockEnd(uint firstStageBlockEnd_) external returns (bool);\r\n    function setFirstStageMaxContributorCount(uint firstStageMaxContributorCount_) external returns (bool);\r\n    function setFirstStageMaxContribution(uint firstStageMaxContribution_) external returns (bool);\r\n\r\n    function setSecondStageBlockStart(uint secondStageBlockStart_) external returns (bool);\r\n    function setSecondStageBlockEnd(uint secondStageBlockEnd_) external returns (bool);\r\n    function setSecondStageMaxContribution(uint secondStageMaxContribution_) external returns (bool);\r\n\r\n    function setTokenAllowed(address token_, bool option_) external returns (bool);\r\n    function setDataInstance(address dataAddress_) external returns (bool);\r\n    function setCorporateAddress(address corporateAddress_) external returns (bool);\r\n                            \r\n    // *************************************************\r\n    // ************* DEFAULT_ADMIN REGION **************\r\n    // *************************************************\r\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external returns (bool);\r\n    function salvageTokensFromContract(address tokenAddress, address to, uint amount) external returns (bool);\r\n    function killContract() external returns (bool);\r\n\r\n    // **************************************************\r\n    // ************* PUBLIC GETTERS REGION **************\r\n    // **************************************************\r\n    function getPresaleActive() external view returns (bool);\r\n    function getFirstStageActive() external view returns (bool);\r\n    function getSecondStageActive() external view returns (bool);\r\n\r\n    function getFirstStageParticipantMaxContribution(address participant_) external view returns (uint);\r\n    function getSecondStageParticipantMaxContribution(address participant_) external view returns (uint);\r\n\r\n    function getMinimumContributionRequierment() external view returns (uint);\r\n    function getPresaleCap() external view returns (uint);\r\n\r\n    function getFirstStageBlockStart() external view returns (uint);\r\n    function getFirstStageBlockEnd() external view returns (uint);\r\n    function getFirstStageMaxContributorCount() external view returns (uint);\r\n    function getFirstStageMaxContribution() external view returns (uint);\r\n\r\n    function getSecondStageBlockStart() external view returns (uint);\r\n    function getSecondStageBlockEnd() external view returns (uint);\r\n    function getSecondStageMaxContribution() external view returns (uint);\r\n    function getTokenAllowed(address token_) external view returns (bool);\r\n\r\n    function getDataAddress() external view returns (address);\r\n    function getCorporateAddress() external view returns (address);\r\n\r\n    // ******************************************\r\n    // ************* EVENTS REGION **************\r\n    // ******************************************\r\n    event MinimumContributionRequiermentChanged(uint oldValue, uint newValue);\r\n    event PresaleCapChanged(uint oldValue, uint newValue);\r\n\r\n    event FirstStageBlockStartChanged(uint oldValue,  uint newValue);\r\n    event FirstStageBlockEndChanged(uint oldValue,  uint newValue);\r\n    event FirstStageMaxContributorCountChanged(uint oldValue, uint newValue);\r\n    event FirstStageMaxContributionChanged(uint oldValue, uint newValue);\r\n\r\n    event SecondStageBlockStartChanged(uint oldValue, uint newValue);\r\n    event SecondStageBlockEndChanged(uint oldValue, uint newValue);\r\n    event SecondStageMaxContributionChanged(uint oldValue, uint newValue);\r\n\r\n    event TokenAllowedChanged(bool oldValue, bool newValue);\r\n\r\n    event DataAddressChanged(address oldValue, address newValue);\r\n    event CorporateAddressChanged(address oldValue, address newValue);\r\n\r\n    event AdminRoleSet(bytes32 role, bytes32 adminRole);\r\n    event TokensSalvaged(address tokenAddress, address reciever, uint amount);\r\n    event ContractKilled();\r\n}\r\n\r\n\r\n// File contracts/Interfaces/DataInterface.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface DataInterface is IAccessControlEnumerable{\r\n\r\n    /* solhint-disable */\r\n    function ADMIN_ROLE() external pure returns(bytes32);\r\n    function MODERATOR_ROLE() external pure returns(bytes32);\r\n    function SALECONTRACT_ROLE() external pure returns(bytes32);\r\n    /* solhint-enable */\r\n\r\n    // *******************************************\r\n    // ************* MANAGER REGION **************\r\n    // *******************************************\r\n    function manuallyWhitelistParticipant(address participant_) external;\r\n    function manuallyBlacklistParticipant(address participant_) external;\r\n\r\n    function manuallyCreditParticipant(address participant_, address tokenInvested_, uint tokenAmount_) external;\r\n\r\n    function setSignersAddress(address signersAddress_) external returns (bool);\r\n    function setTokenConversion(uint tokenConversion_) external returns (bool);\r\n\r\n    // *****************************************************\r\n    // ************* SALECONTRACT_ROLE REGION **************\r\n    // *****************************************************\r\n    function whitelistParticipant(address participant_, bytes memory signature_) external;\r\n\r\n    function creditParticipation(address participant_, address tokenInvested_, uint tokenAmount_) external;\r\n\r\n    // *************************************************\r\n    // ************* DEFAULT_ADMIN REGION **************\r\n    // *************************************************\r\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external returns (bool);\r\n    function salvageTokensFromContract(address tokenAddress, address to, uint amount) external returns (bool);\r\n    function killContract() external returns (bool);\r\n\r\n    // ********************************************\r\n    // ************* INTERNAL REGION **************\r\n    // ********************************************\r\n\r\n    // **************************************************\r\n    // ************* PUBLIC GETTERS REGION **************\r\n    // **************************************************\r\n    function getParticipantCount() external view returns (uint);\r\n    function getCombinedContributions() external view returns (uint);\r\n    function getIsParticipantWhitelisted(address participant_) external view returns (bool);\r\n    function getParticipantContributions(address participant_) external view returns (uint);\r\n    function getParticipantList(uint startIndex_, uint endIndex_) external view returns (address[] memory, uint[] memory);\r\n\r\n    function getSignersAddress() external view returns (address);\r\n    function getMessageHash(address contributor_, bool allowed_) external pure returns (bytes32);\r\n    \r\n    function getTokenConversion() external view returns (uint);\r\n\r\n    // ******************************************\r\n    // ************* EVENTS REGION **************\r\n    // ******************************************\r\n    event ContributionMade(address indexed contractAddress, address indexed participant_, address tokenInvested_, uint baseAmount_, uint tokensIssued_);\r\n    event ParticipantWhitelisted(address participant_);\r\n    event ParticipantBlacklisted(address participant_);\r\n\r\n    event SignersAddressChanged(address oldValue, address newValue);\r\n    event TokenConversionChanged(uint oldValue, uint newValue);\r\n\r\n    event AdminRoleSet(bytes32 role, bytes32 adminRole);\r\n    event TokensSalvaged(address tokenAddress, address reciever, uint amount);\r\n    event ContractKilled();\r\n}\r\n\r\n\r\n// File contracts/PresaleContract.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n/// @title Authtrail presale contract\r\n/// @author Authtrail llc\r\n/// @dev Presale contract that serves as an interface for collecting stable coins in presale\r\n/// @custom:experimental This is an experimental contract.\r\ncontract PresaleContract is AccessControlEnumerable, PresaleInterface {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\r\n\r\n    DataInterface private _dataInstance;\r\n    address private _corporateAddress;\r\n\r\n    uint private _minimumContributionRequierment = 1000 * 10 ** 6;\r\n    uint private _presaleCap = 6000000 * 10 ** 6;\r\n\r\n    uint private _firstStageBlockStart = 14570950;              // https://etherscan.io/block/countdown/14570950\r\n    uint private _firstStageBlockEnd = 14573680;                // https://etherscan.io/block/countdown/14573680\r\n    uint private _firstStageMaxContributorCount = 1000;\r\n    uint private _firstStageMaxContribution = 5000 * 10**6;\r\n\r\n    uint private _secondStageBlockStart = 14576221;             // https://etherscan.io/block/countdown/14584200\r\n    uint private _secondStageBlockEnd = 14587100;               // https://etherscan.io/block/countdown/14587100\r\n    uint private _secondStageMaxContribution = 50000 * 10**6;\r\n\r\n    mapping(address => bool) private _allowedTokens;\r\n\r\n    constructor(address defaultAdminAddress_, address adminAddress_, address moderatorAddress_, address dataAddress_, address corporateAddress_) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdminAddress_);\r\n        _setupRole(ADMIN_ROLE, adminAddress_);\r\n        _setupRole(MODERATOR_ROLE, moderatorAddress_);\r\n        _setRoleAdmin(MODERATOR_ROLE, ADMIN_ROLE);\r\n\r\n        _dataInstance = DataInterface(dataAddress_);\r\n        _corporateAddress = corporateAddress_;\r\n\r\n        _allowedTokens[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true; // Allow USDT as participation currency\r\n        _allowedTokens[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = true; // Allow USDC as participation currency\r\n    }\r\n\r\n    // ******************************************\r\n    // ************* PUBLIC REGION **************\r\n    // ******************************************\r\n    /// @notice Executes the code for participating in the crowdsale @ First stage\r\n    /// @dev This is a public method that users should execute for participating\r\n    /// @param tokenInvested_ The ERC20 token address that participant wants to contribute\r\n    /// @param amountInvested_ The amount of tokens contributed to presale, will be transfered to corpo from \r\n    /// @param signature_ Cryptographic proof that participant is whitelisted\r\n    function contributeFirstStage(address tokenInvested_, uint amountInvested_, bytes memory signature_) public override {\r\n        require(getFirstStageActive(), \"FirstStage is not active!\");\r\n        require(getTokenAllowed(tokenInvested_), \"Token is not allowed!\");\r\n\r\n        uint allowedContribution = getFirstStageParticipantMaxContribution(msg.sender);\r\n        require(allowedContribution > 0, \"Allowed amount is 0!\");\r\n        if (allowedContribution > amountInvested_) {\r\n            allowedContribution = amountInvested_;\r\n        }\r\n        \r\n        if (!_dataInstance.getIsParticipantWhitelisted(msg.sender)) {\r\n            require(amountInvested_ >= _minimumContributionRequierment, \"Not enough tokens contributed!\");\r\n            _dataInstance.whitelistParticipant(msg.sender, signature_);\r\n        }\r\n\r\n        _dataInstance.creditParticipation(msg.sender, tokenInvested_, allowedContribution);\r\n        IERC20 tokenInstance = IERC20(tokenInvested_);\r\n        tokenInstance.safeTransferFrom(msg.sender, _corporateAddress, allowedContribution);\r\n    }\r\n    /// @notice Executes the code for participating in the crowdsale @ Second stage\r\n    /// @dev This is a public method that users should execute for participating\r\n    /// @param tokenInvested_ The ERC20 token address that participant wants to contribute\r\n    /// @param amountInvested_ The amount of tokens contributed to presale, will be transfered to corpo from \r\n    /// @param signature_ Cryptographic proof that participant is whitelisted\r\n    function contributeSecondStage(address tokenInvested_, uint amountInvested_, bytes memory signature_) public override {\r\n        require(getSecondStageActive(), \"Presale is not active!\");\r\n        require(getTokenAllowed(tokenInvested_), \"Token is not allowed!\");\r\n\r\n        uint allowedContribution = getSecondStageParticipantMaxContribution(msg.sender);\r\n        require(allowedContribution > 0, \"Allowed amount is 0!\");\r\n        if (allowedContribution > amountInvested_) {\r\n            allowedContribution = amountInvested_;\r\n        }\r\n         \r\n        if (!_dataInstance.getIsParticipantWhitelisted(msg.sender)) {\r\n            require(amountInvested_ >= _minimumContributionRequierment, \"Not enough tokens contributed!\");\r\n            _dataInstance.whitelistParticipant(msg.sender, signature_);\r\n        } \r\n\r\n        _dataInstance.creditParticipation(msg.sender, tokenInvested_, allowedContribution);\r\n        IERC20 tokenInstance = IERC20(tokenInvested_);\r\n        tokenInstance.safeTransferFrom(msg.sender, _corporateAddress, allowedContribution);\r\n    }\r\n\r\n    // *********************************************\r\n    // ************* MODERATOR REGION **************\r\n    // *********************************************\r\n    /// @notice Sets new minimum ammount users can invest\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param minimumContributionRequierment_ Minimum ammount of allowed tokens user can invest\r\n    /// @return default return True after everything is processed\r\n    function setMinimumContributionRequierment(uint minimumContributionRequierment_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _minimumContributionRequierment;\r\n        require(oldValue != minimumContributionRequierment_, \"Value is already set!\");\r\n        _minimumContributionRequierment = minimumContributionRequierment_;\r\n        emit MinimumContributionRequiermentChanged(oldValue, minimumContributionRequierment_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new amount of stablecoins that needs to be colected for presale to be over\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param presaleCap_ The new cap on presale\r\n    /// @return default return True after everything is processed\r\n    function setPresaleCap(uint presaleCap_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _presaleCap;\r\n        require(oldValue != presaleCap_, \"Value is already set!\");\r\n        _presaleCap = presaleCap_;\r\n        emit PresaleCapChanged(oldValue, presaleCap_);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Sets new block number on which presales phase one should start\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param firstStageBlockStart_ The block number on which crowdsales first phase will start\r\n    /// @return default return True after everything is processed\r\n    function setFirstStageBlockStart(uint firstStageBlockStart_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _firstStageBlockStart;\r\n        require(oldValue != firstStageBlockStart_, \"Value is already set!\");\r\n        _firstStageBlockStart = firstStageBlockStart_;\r\n        emit FirstStageBlockStartChanged(oldValue, firstStageBlockStart_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new block on which presales first stage will end\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param firstStageBlockEnd_ The block number on which presales first stage will end\r\n    /// @return default return True after everything is processed\r\n    function setFirstStageBlockEnd(uint firstStageBlockEnd_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _firstStageBlockEnd;\r\n        require(oldValue != firstStageBlockEnd_, \"Value is already set!\");\r\n        _firstStageBlockEnd = firstStageBlockEnd_;\r\n        emit FirstStageBlockEndChanged(oldValue, firstStageBlockEnd_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new amount of participants in first stage\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param firstStageMaxContributorCount_ The block number on which maxContribution limit is waived\r\n    /// @return default return True after everything is processed\r\n    function setFirstStageMaxContributorCount(uint firstStageMaxContributorCount_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _firstStageMaxContributorCount;\r\n        require(oldValue != firstStageMaxContributorCount_, \"Value is already set!\");\r\n        _firstStageMaxContributorCount = firstStageMaxContributorCount_;\r\n        emit FirstStageMaxContributorCountChanged(oldValue, firstStageMaxContributorCount_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new amount of stablecoins that participant can contribute during first phase\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param firstStageMaxContribution_ The new cap on users contribution on first phase\r\n    /// @return default return True after everything is processed\r\n    function setFirstStageMaxContribution(uint firstStageMaxContribution_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _firstStageMaxContribution;\r\n        require(oldValue != firstStageMaxContribution_, \"Value is already set!\");\r\n        _firstStageMaxContribution = firstStageMaxContribution_;\r\n        emit FirstStageMaxContributionChanged(oldValue, firstStageMaxContribution_);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Sets new block number on which presales phase two should start\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param secondStageBlockStart_ The block number on which crowdsales second phase will start\r\n    /// @return default return True after everything is processed\r\n    function setSecondStageBlockStart(uint secondStageBlockStart_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _secondStageBlockStart;\r\n        require(oldValue != secondStageBlockStart_, \"Value is already set!\");\r\n        _secondStageBlockStart = secondStageBlockStart_;\r\n        emit SecondStageBlockStartChanged(oldValue, secondStageBlockStart_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new block on which presales second stage will end\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param secondStageBlockEnd_ The block number on which presales second stage will end\r\n    /// @return default return True after everything is processed\r\n    function setSecondStageBlockEnd(uint secondStageBlockEnd_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _secondStageBlockEnd;\r\n        require(oldValue != secondStageBlockEnd_, \"Value is already set!\");\r\n        _secondStageBlockEnd = secondStageBlockEnd_;\r\n        emit SecondStageBlockEndChanged(oldValue, secondStageBlockEnd_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new amount of stablecoins that participant can contribute during first phase\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param secondStageMaxContribution_ The new cap on users contribution on first phase\r\n    /// @return default return True after everything is processed\r\n    function setSecondStageMaxContribution(uint secondStageMaxContribution_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        uint oldValue = _secondStageMaxContribution;\r\n        require(oldValue != secondStageMaxContribution_, \"Value is already set!\");\r\n        _secondStageMaxContribution = secondStageMaxContribution_;\r\n        emit SecondStageMaxContributionChanged(oldValue, secondStageMaxContribution_);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Disables or enables ERC20 token that can be used by contributors\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param token_ The ERC20 token we want to edit\r\n    /// @param option_ Option on what we want to do with the token, True - Enabled, False - disabled\r\n    /// @return default return True after everything is processed\r\n    function setTokenAllowed(address token_, bool option_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        bool oldValue = _allowedTokens[token_];\r\n        require(oldValue != option_, \"Value is already set!\");\r\n        _allowedTokens[token_] = option_;\r\n        emit TokenAllowedChanged(oldValue, option_);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Sets new data contract address to be used internally\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param dataAddress_ Address of new DataContract\r\n    /// @return default return True after everything is processed\r\n    function setDataInstance(address dataAddress_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        address oldValue = address(_dataInstance);\r\n        require(oldValue != dataAddress_, \"Value is already set!\");\r\n        _dataInstance = DataInterface(dataAddress_);\r\n        emit DataAddressChanged(oldValue, dataAddress_);\r\n        return true;\r\n    }\r\n    /// @notice Sets new address on which contribution funds will be sent\r\n    /// @dev This method should only be used in ongoing presale if something goes wrong\r\n    /// @param corporateAddress_ New destination for funds\r\n    /// @return default return True after everything is processed\r\n    function setCorporateAddress(address corporateAddress_) public onlyRole(MODERATOR_ROLE) override returns (bool) {\r\n        address oldValue = _corporateAddress;\r\n        require(oldValue != corporateAddress_, \"Value is already set!\");\r\n        _corporateAddress = corporateAddress_;\r\n        emit CorporateAddressChanged(oldValue, corporateAddress_);\r\n        return true;\r\n    }\r\n\r\n    // *************************************************\r\n    // ************* DEFAULT_ADMIN REGION **************\r\n    // *************************************************\r\n    /// @notice Sets new role admin to the role defined\r\n    /// @dev This method should only be used if some of priviliged keys are compromised, can only be done by defaultAdmin\r\n    /// @param role_ Role that we want to change\r\n    /// @param adminRole_ Role that will become new admin of the changed role\r\n    /// @return default return True after everything is processed\r\n    function setRoleAdmin(bytes32 role_, bytes32 adminRole_) public onlyRole(DEFAULT_ADMIN_ROLE) override returns (bool) {\r\n        _setRoleAdmin(role_, adminRole_);\r\n        emit AdminRoleSet(role_, adminRole_);\r\n        return true;\r\n    }\r\n    /// @notice Transfer tokens from the contract to desiered address\r\n    /// @dev This method should be used if users accedentaly sends tokens to our contract address\r\n    /// @param tokenAddress_ Token address of the token that we want to salvage\r\n    /// @param to_ Destination where salvaged tokens will be sent\r\n    /// @param amount_ Amount of tokens we want to salvage\r\n    /// @return default return True after everything is processed\r\n    function salvageTokensFromContract(address tokenAddress_, address to_, uint amount_) public onlyRole(DEFAULT_ADMIN_ROLE) override returns (bool){\r\n        IERC20(tokenAddress_).transfer(to_, amount_);\r\n        emit TokensSalvaged(tokenAddress_, to_, amount_);\r\n        return true;\r\n    }\r\n    /// @notice Destroys the contract\r\n    /// @dev This method should NEVER be used if you don't know the implications!!!!!!!!\r\n    /// @return default return True after everything is processed\r\n    function killContract() public onlyRole(DEFAULT_ADMIN_ROLE) override returns (bool){\r\n        emit ContractKilled();\r\n        selfdestruct(payable(msg.sender));\r\n        return true;\r\n    }\r\n\r\n    // **************************************************\r\n    // ************* PUBLIC GETTERS REGION **************\r\n    // **************************************************\r\n    /// @notice Returns if presale is active or notActive\r\n    function getPresaleActive() public view override returns (bool) {\r\n        if (getFirstStageActive() || getSecondStageActive()) { return true; }\r\n        return false;\r\n    }\r\n    /// @notice Returns if first stage of presale is active or notActive\r\n    function getFirstStageActive() public view override returns (bool) {\r\n        if (block.number < _firstStageBlockStart) { return false; }\r\n        if (block.number > _firstStageBlockEnd) { return false; }\r\n        if (_dataInstance.getParticipantCount() >= _firstStageMaxContributorCount ) { return false; }\r\n        if (_dataInstance.getCombinedContributions() >= _presaleCap ) { return false; }\r\n        return true;\r\n    }\r\n    /// @notice Returns if second stage presale is active or notActive\r\n    function getSecondStageActive() public view override returns (bool) {\r\n        if (block.number < _secondStageBlockStart) { return false; }\r\n        if (block.number > _secondStageBlockEnd) { return false; }\r\n        if (_dataInstance.getCombinedContributions() >= _presaleCap ) { return false; }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Returns the amount that participant can contribute depending on the state of presale while in first stage\r\n    function getFirstStageParticipantMaxContribution(address participant_) public view override returns (uint) {\r\n        uint maxContribution = _firstStageMaxContribution - _dataInstance.getParticipantContributions(participant_);\r\n        uint tokensLeftTillCap = _presaleCap - _dataInstance.getCombinedContributions();\r\n        if (tokensLeftTillCap < maxContribution) {\r\n            return tokensLeftTillCap;\r\n        }\r\n        return maxContribution;\r\n    }\r\n    /// @notice Returns the amount that participant can contribute depending on the state of presale while in second stage\r\n    function getSecondStageParticipantMaxContribution(address participant_) public view override returns (uint) {\r\n        uint maxContribution = _secondStageMaxContribution - _dataInstance.getParticipantContributions(participant_);\r\n        uint tokensLeftTillCap = _presaleCap - _dataInstance.getCombinedContributions();\r\n        if (tokensLeftTillCap < maxContribution) {\r\n            return tokensLeftTillCap;\r\n        }\r\n        return maxContribution;\r\n    }\r\n\r\n    /// @notice Returns the lowest ammount that user can contribute\r\n    function getMinimumContributionRequierment() public view override returns (uint) {\r\n        return _minimumContributionRequierment;\r\n    }\r\n    /// @notice Returns the amount of tokens that presale will recieve\r\n    function getPresaleCap() public view override returns (uint) {\r\n        return _presaleCap;\r\n    }\r\n\r\n    /// @notice Returns block which starts first phase of presale\r\n    function getFirstStageBlockStart() public view override returns (uint) {\r\n        return _firstStageBlockStart;\r\n    }\r\n    /// @notice Returns block which ends first phase of presale\r\n    function getFirstStageBlockEnd() public view override returns (uint) {\r\n        return _firstStageBlockEnd;\r\n    }\r\n    /// @notice Returns the maximum number of participants in first stage\r\n    function getFirstStageMaxContributorCount() public view override returns (uint) {\r\n        return _firstStageMaxContributorCount;\r\n    }\r\n    /// @notice Returns the maximum amount that users can contribute in first phase\r\n    function getFirstStageMaxContribution() public view override returns (uint) {\r\n        return _firstStageMaxContribution;\r\n    }\r\n\r\n    /// @notice Returns block which starts second phase of presale\r\n    function getSecondStageBlockStart() public view override returns (uint) {\r\n        return _secondStageBlockStart;\r\n    }\r\n    /// @notice Returns block which ends second phase of presale\r\n    function getSecondStageBlockEnd() public view override returns (uint) {\r\n        return _secondStageBlockEnd;\r\n    }\r\n    /// @notice Returns the maximum amount that users can contribute in second phase\r\n    function getSecondStageMaxContribution() public view override returns (uint) {\r\n        return _secondStageMaxContribution;\r\n    }\r\n\r\n    /// @notice Returns if token is allowed in presale\r\n    function getTokenAllowed(address token_) public view override returns (bool) {\r\n        return _allowedTokens[token_];\r\n    }\r\n    /// @notice Returns the address of data contract\r\n    function getDataAddress() public view override returns (address) {\r\n        return address(_dataInstance);\r\n    }\r\n    /// @notice Returns the address on which tokens will be sent\r\n    function getCorporateAddress() public view override returns (address) {\r\n        return _corporateAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdminAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moderatorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corporateAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"AdminRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"CorporateAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"DataAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FirstStageBlockEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FirstStageBlockStartChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FirstStageMaxContributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FirstStageMaxContributorCountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinimumContributionRequiermentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PresaleCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SecondStageBlockEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SecondStageBlockStartChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SecondStageMaxContributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"TokenAllowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSalvaged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenInvested_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInvested_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"contributeFirstStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenInvested_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInvested_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"contributeSecondStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCorporateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstStageActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstStageBlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstStageBlockStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstStageMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstStageMaxContributorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant_\",\"type\":\"address\"}],\"name\":\"getFirstStageParticipantMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumContributionRequierment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondStageActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondStageBlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondStageBlockStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondStageMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant_\",\"type\":\"address\"}],\"name\":\"getSecondStageParticipantMaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"corporateAddress_\",\"type\":\"address\"}],\"name\":\"setCorporateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress_\",\"type\":\"address\"}],\"name\":\"setDataInstance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstStageBlockEnd_\",\"type\":\"uint256\"}],\"name\":\"setFirstStageBlockEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstStageBlockStart_\",\"type\":\"uint256\"}],\"name\":\"setFirstStageBlockStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstStageMaxContribution_\",\"type\":\"uint256\"}],\"name\":\"setFirstStageMaxContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstStageMaxContributorCount_\",\"type\":\"uint256\"}],\"name\":\"setFirstStageMaxContributorCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumContributionRequierment_\",\"type\":\"uint256\"}],\"name\":\"setMinimumContributionRequierment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleCap_\",\"type\":\"uint256\"}],\"name\":\"setPresaleCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole_\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondStageBlockEnd_\",\"type\":\"uint256\"}],\"name\":\"setSecondStageBlockEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondStageBlockStart_\",\"type\":\"uint256\"}],\"name\":\"setSecondStageBlockStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondStageMaxContribution_\",\"type\":\"uint256\"}],\"name\":\"setSecondStageMaxContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"option_\",\"type\":\"bool\"}],\"name\":\"setTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PresaleContract", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000896eee45400f7fa60d68134d2a07471f584c1ec0000000000000000000000000896eee45400f7fa60d68134d2a07471f584c1ec0000000000000000000000000896eee45400f7fa60d68134d2a07471f584c1ec000000000000000000000000015e2d852019de0989a82eb518687ddb00b2c2df4000000000000000000000000315889a2f2196cecc3a9cbe4d51c925b16135af4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff80d995ae1edc1dfbb51cc2ab936d82e0009e494cf4ee92881925ac9a286dca"}]}