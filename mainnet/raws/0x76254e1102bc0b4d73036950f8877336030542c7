{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com \r\n*/\r\n\r\npragma solidity >=0.7.0 <0.8.0; // solhint-disable-line\r\n\r\n// site : \r\n\r\ncontract VoltesFarm {\r\n    \r\n    // CEO FEE - %% of transaction\r\n    uint256 public CEO_FEE = 5;\r\n    \r\n    address payable public superPowerfulDragonOwner;\r\n    uint256 public lastPrice = 2000000000000000000;\r\n    uint public hatchingSpeed = 200;\r\n    uint256 public snatchedOn;\r\n    bool public isSuperPowerfulDragonEnabled = false;\r\n    \r\n    function enableSuperPowerfulDragon(bool enable) public {\r\n        require(msg.sender == ceoAddress);\r\n        isSuperPowerfulDragonEnabled = enable;\r\n        superPowerfulDragonOwner = ceoAddress;\r\n        snatchedOn = block.timestamp;\r\n    }\r\n    \r\n    function withdrawAdminMoney(uint percentage) public {\r\n        require(msg.sender == ceoAddress);\r\n        uint256 myBalance = calculatePercentage(ceoEtherBalance, percentage);\r\n        ceoAddress.transfer(myBalance);\r\n    }\r\n    \r\n    function buySuperPowerFulDragon() public payable {\r\n        require(isSuperPowerfulDragonEnabled);\r\n        require(isSuperPowerfulDragonEnabled);\r\n        uint currenPrice = SafeMath.add(SafeMath.div(SafeMath.mul(lastPrice, 4),100),lastPrice);\r\n        require(msg.value > currenPrice);\r\n        \r\n        uint256 timeSpent = SafeMath.sub(block.timestamp, snatchedOn);\r\n        userReferralEggs[superPowerfulDragonOwner] += SafeMath.mul(hatchingSpeed,timeSpent);\r\n        \r\n        hatchingSpeed += SafeMath.div(SafeMath.sub(block.timestamp, contractStarted), 60*60*24);\r\n        ceoEtherBalance += calculatePercentage(msg.value, 2);\r\n        superPowerfulDragonOwner.transfer(msg.value - calculatePercentage(msg.value, 2));\r\n        lastPrice = currenPrice;\r\n        superPowerfulDragonOwner = msg.sender;\r\n        snatchedOn = block.timestamp;\r\n    }\r\n    \r\n    function claimSuperDragonEggs() public {\r\n        require(isSuperPowerfulDragonEnabled);\r\n        require (msg.sender == superPowerfulDragonOwner);\r\n        uint256 timeSpent = SafeMath.sub(block.timestamp, snatchedOn);\r\n        userReferralEggs[superPowerfulDragonOwner] += SafeMath.mul(hatchingSpeed,timeSpent);\r\n        snatchedOn = block.timestamp;\r\n    }\r\n    \r\n    //uint256 EGGS_PER_Dragon_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1Dragon=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_Dragon=5;\r\n\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    \r\n    bool public activated=false;\r\n    address payable public ceoAddress;\r\n    uint public ceoEtherBalance;\r\n    \r\n    mapping (address => uint256) public iceDragons;\r\n    mapping (address => uint256) public premiumDragons;\r\n    mapping (address => uint256) public ultraDragon;\r\n    \r\n    mapping (address => uint256) public userHatchRate;\r\n    \r\n    mapping (address => bool) public cashedOut;\r\n    \r\n    mapping (address => uint256) public userReferralEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    \r\n    uint256 public marketEggs;\r\n    uint256 public contractStarted;\r\n    \r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n    \r\n    function seedMarket() public payable {\r\n        require(marketEggs == 0);\r\n        activated = true;\r\n        marketEggs = 8640000000;\r\n        contractStarted = block.timestamp;\r\n    }\r\n    \r\n    function getMyEggs() public view returns(uint256) {\r\n        return SafeMath.add(userReferralEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    \r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1Dragon,SafeMath.sub(block.timestamp,lastHatch[adr]));\r\n\r\n        uint256 dragonCount = SafeMath.mul(iceDragons[adr], 10);\r\n        dragonCount = SafeMath.add(SafeMath.mul(ultraDragon[adr], 20), dragonCount);\r\n        dragonCount = SafeMath.add(dragonCount, premiumDragons[adr]);\r\n        return SafeMath.mul(secondsPassed, dragonCount);\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getMyPremiumDragons() public view returns(uint256) {\r\n        return premiumDragons[msg.sender];\r\n    }\r\n    \r\n    function getMyIceDragon() public view returns(uint256) {\r\n        return iceDragons[msg.sender];\r\n    }\r\n    \r\n    function getMyUltraDragon() public view returns(uint256) {\r\n        return ultraDragon[msg.sender];\r\n    }\r\n    \r\n    // 10 eggs per hour\r\n    function getEggsToHatchDragon() public view returns (uint) {\r\n        uint256 timeSpent = SafeMath.sub(block.timestamp, contractStarted); \r\n        timeSpent = SafeMath.div(timeSpent, 3600);\r\n        return SafeMath.mul(timeSpent, 10);\r\n    }\r\n    \r\n    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount,percentage), 100);\r\n    }\r\n    \r\n    function getDragonsToBuy(uint256 eth, uint256 multiplier) internal returns(uint256) {\r\n        require(activated);\r\n        \r\n        if (lastHatch[msg.sender] == 0) {\r\n            lastHatch[msg.sender] = block.timestamp;\r\n        }\r\n        \r\n        uint eggsBought = SafeMath.div(calculateEggBuy(msg.value, SafeMath.sub(SafeMath.sub(address(this).balance, ceoEtherBalance), msg.value)), multiplier);\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n\r\n        require(eggsBought > 0);\r\n        \r\n        ceoEtherBalance += calculatePercentage(msg.value, CEO_FEE);\r\n        hatchEggs(msg.sender);\r\n        return eggsBought;\r\n    }\r\n    \r\n    \r\n    function devFee(uint256 amount) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount,CEO_FEE),100);\r\n    }\r\n    \r\n    function buyPremiumDrangon() public payable {\r\n        uint dragons = getDragonsToBuy(msg.value, 1);\r\n        premiumDragons[msg.sender] += dragons;\r\n    }\r\n    \r\n    function buyIceDrangon() public payable {\r\n        uint dragons = getDragonsToBuy(msg.value, 9);\r\n        iceDragons[msg.sender] += dragons;\r\n    }\r\n    \r\n    function buyUltraDrangon() public payable {\r\n        require(activated);\r\n        uint dragons = getDragonsToBuy(msg.value, 17);\r\n        ultraDragon[msg.sender] += dragons;\r\n    }\r\n    \r\n    function hatchEggs(address ref) public {\r\n        require(activated);\r\n        \r\n        if (ref != msg.sender ) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        \r\n        uint256 eggsProduced = getMyEggs();\r\n        uint256 newDragon = SafeMath.div(eggsProduced, EGGS_TO_HATCH_1Dragon);\r\n        newDragon = SafeMath.div(eggsProduced, EGGS_TO_HATCH_1Dragon);\r\n        premiumDragons[msg.sender] = SafeMath.add(premiumDragons[msg.sender], newDragon);\r\n        lastHatch[msg.sender]=block.timestamp;\r\n        \r\n        \r\n         userReferralEggs[msg.sender] = 0; \r\n        \r\n        //send referral eggs\r\n        userReferralEggs[referrals[msg.sender]]=SafeMath.add(userReferralEggs[referrals[msg.sender]],SafeMath.div(eggsProduced,10));\r\n        \r\n        //boost market to nerf Dragon hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(newDragon,10));\r\n    }\r\n    \r\n    function sellEggs() public {\r\n        require(activated);\r\n        uint256 hasEggs = SafeMath.div(getMyEggs(), EGGS_TO_HATCH_1Dragon);\r\n        uint256 ethValue = calculateEggSell(hasEggs);\r\n        uint256 fee = calculatePercentage(ethValue, CEO_FEE);\r\n        userReferralEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender]=block.timestamp;\r\n        marketEggs=SafeMath.add(marketEggs, hasEggs);\r\n        ceoEtherBalance += fee;\r\n        require(address(this).balance > ceoEtherBalance);\r\n        msg.sender.transfer(SafeMath.sub(ethValue,fee));\r\n    }\r\n    \r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    \r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateEggSell(eggs, SafeMath.sub(address(this).balance, ceoEtherBalance));\r\n    }\r\n    \r\n    function calculateEggSell(uint256 eggs, uint256 eth) public view returns(uint256){\r\n        return calculateTrade(eggs, marketEggs, eth);\r\n    }\r\n    \r\n    \r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n    \r\n    function calculateEggBuy(uint256 eth) public view returns(uint256) {\r\n        return calculateEggBuy(eth, SafeMath.sub(address(this).balance, ceoEtherBalance));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d20cc368bf4a2b5a258a0a1a70157912d671348433b8f0b9feefc942fa976e3"}]}