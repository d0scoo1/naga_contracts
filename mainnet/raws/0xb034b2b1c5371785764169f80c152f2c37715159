{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract DateCSGirl {\r\n\r\n    address public owner;\r\n    mapping (address => uint) public dateabilityBalance;\r\n\r\n    // When 'DateCSGirl' contract is deployed:\r\n    // 1. set the deploying address as the owner of the contract\r\n    // 2. set the deployed smart contract's dateability balance to 520\r\n    constructor() {\r\n        owner = msg.sender;\r\n        dateabilityBalance[address(this)] = 520; //\u6211\u7231\u4f60\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Only the owner knows how much more love she can give/receive <3\"); //\u4e0d\u662f\u6211\u592a\u6e23\uff0c\u6211\u53ea\u662f\u60f3\u7ed9\u6bcf\u4e2a\u7537\u5b69\u4e00\u4e2a\u5bb6\r\n        _;\r\n    }\r\n\r\n    // Allow anyone to see dating profile (and not be scammed by Tinder premium)\r\n    function profile() public pure returns(string memory) {\r\n        return \"CS Girl v2.0 Dating Profile updates:\\n*Bug fixes and improvements\\n*New features implemented (got a new six-figure job)\\n*Performance enhancements (hits the gym daily so she can eat more free food)\\n*UI/UX redesign (wears makeup now)\\n*Multilingual support (English, Chinese, Solidity)\";\r\n    }\r\n\r\n    // Allow anyone to purchase a date\r\n    function buyDate(uint amount) public payable {\r\n        require(msg.value >= amount * 1 ether, \"I'm technically priceless, but since you're cute, I'll give you a discount ~ only 1 ETH per date :)\");\r\n        require(dateabilityBalance[address(this)] >= amount, \"Already has too many side hoes :( Doesn't have enough time to go on another date\");\r\n        dateabilityBalance[address(this)] -= amount;\r\n        dateabilityBalance[msg.sender] += amount;\r\n    }\r\n\r\n    // Allow the owner to increase the smart contract's dateability balance\r\n    function refill(uint amount) public onlyOwner{\r\n        dateabilityBalance[address(this)] += amount;\r\n    }\r\n\r\n    // Allow the owner to withdraw ETH\r\n    function withdraw() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dateabilityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DateCSGirl", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea3a7b3c4b7b75ec3be0b341d01254c9ada2fe30e687564ef7cd2aabed441004"}]}