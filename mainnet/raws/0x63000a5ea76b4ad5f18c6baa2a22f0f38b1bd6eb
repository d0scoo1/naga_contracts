{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//Developer Info:\r\n//Written by Blockchainguy.net\r\n//Email: info@blockchainguy.net\r\n//Instagram: @sheraz.manzoor\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IPuffyPaws{\r\n        function sendMany(address _reciever, uint256 _count) external;\r\n        function sendManyWL(address _reciever, uint256 _count, uint256 id, bytes memory signature) external;\r\n        function setMinterFrom(address _to) external;\r\n}\r\ncontract MintablePuffyPaws is Ownable{\r\n    address _tokenAddress;\r\n\r\n    uint public PerTxLimit = 6;\r\n    uint public OGPerTxLimit = 6;\r\n    uint public PublicSalePerTxLimit = 10;\r\n\r\n    uint public PRESALE_Price = 0.05 ether;\r\n    uint public PRESALE_OG_Price = 0.04 ether;\r\n    uint public Public_Sale_Price = 0.06 ether;\r\n\r\n    uint public presale_startTime = 1646150400; \r\n    uint public public_startTime =  1646236800;\r\n    bool public pause_sale = false;\r\n    bool public pause_Presale = false;\r\n\r\n    mapping(address => bool) public _whitelist;\r\n\r\n    constructor(address _temp){\r\n        _tokenAddress = _temp;\r\n    }\r\n\r\n    function OgPresale(uint _count) public payable{\r\n        require(_count <= OGPerTxLimit, \"Exceeding Per Tx Limit\");\r\n        require(_count > 0, \"mint at least one token\");\r\n        require(msg.value == PRESALE_OG_Price * _count, \"incorrect ether amount\");\r\n        require(block.timestamp >= presale_startTime,\"Presale have not started yet.\");\r\n        require(block.timestamp < public_startTime,\"Presale Ended.\");\r\n        require(pause_Presale == false, \"Sale is Paused.\");\r\n        require(_whitelist[msg.sender], \"You are not whitelisted\");\r\n\r\n        IPuffyPaws(_tokenAddress).sendMany(msg.sender, _count);\r\n    }\r\n    function presale(uint _count, uint256 id, bytes memory signature) public payable{\r\n        require(_count <= PerTxLimit, \"Exceeding Per Tx Limit\");\r\n        require(_count > 0, \"mint at least one token\");\r\n        require(msg.value == PRESALE_Price * _count, \"incorrect ether amount\");\r\n        require(block.timestamp >= presale_startTime,\"Presale have not started yet.\");\r\n        require(block.timestamp < public_startTime,\"Presale Ended.\");\r\n        require(pause_Presale == false, \"Sale is Paused.\");\r\n\r\n\r\n        IPuffyPaws(_tokenAddress).sendManyWL(msg.sender, _count, id, signature);\r\n    }\r\n    function PublicSale(uint _count) public payable{\r\n        require(_count <= PublicSalePerTxLimit, \"Exceeding Per Tx Limit\");\r\n        require(_count > 0, \"mint at least one token\");\r\n        require(msg.value == Public_Sale_Price * _count, \"incorrect ether amount\");\r\n        require(block.timestamp >= public_startTime,\"Public sale is not started yet.\");\r\n        require(pause_sale == false, \"Sale is Paused.\");\r\n\r\n        IPuffyPaws(_tokenAddress).sendMany(msg.sender, _count);\r\n    }\r\n    function whitelist(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i; i < accounts.length; i++) {\r\n            _whitelist[accounts[i]] = true;\r\n        }\r\n    }\r\n    function set_minter() external onlyOwner{\r\n        IPuffyPaws(_tokenAddress).setMinterFrom(address(this));\r\n    } \r\n    function set_presale_price(uint256 _price) external onlyOwner{\r\n        PRESALE_Price = _price;\r\n    } \r\n    function set_presale_OG_price(uint256 _price) external onlyOwner{\r\n        PRESALE_OG_Price = _price;\r\n    } \r\n    function set_publicsale_price(uint256 _price) external onlyOwner{\r\n        Public_Sale_Price = _price;\r\n    } \r\n    function set_presale_start_time(uint256 _temp) external onlyOwner{\r\n        presale_startTime = _temp;\r\n    } \r\n    function set_publicsale_Starttime(uint256 _temp) external onlyOwner{\r\n        public_startTime = _temp;\r\n    } \r\n    function set_PerTxLimit(uint256 _temp) external onlyOwner{\r\n        PerTxLimit = _temp;\r\n    } \r\n    function set_OGPerTxLimit(uint256 _temp) external onlyOwner{\r\n        OGPerTxLimit = _temp;\r\n    } \r\n    function set_PublicSalePerTxLimit(uint256 _temp) external onlyOwner{\r\n        PublicSalePerTxLimit = _temp;\r\n    } \r\n    function set_PauseSale(bool _temp) external onlyOwner{\r\n        pause_sale = _temp;\r\n    }\r\n    function set_PausePresale(bool _temp) external onlyOwner{\r\n        pause_Presale = _temp;\r\n    }\r\n    address private wd1;\r\n    address private wd2;\r\n    address private wd3;\r\n    address private wd4;\r\n    address private wd5;\r\n    address private wd6;\r\n    address private wd7;\r\n    bool wdAddressSet = false;\r\n\r\n    function set_wd_address(address t1, address t2, address t3, address t4, address t5, address t6, address t7) external onlyOwner{\r\n        require(!wdAddressSet, \"Not Allowed.\");\r\n        wd1 = t1;\r\n        wd2 = t2;\r\n        wd3 = t3;\r\n        wd4 = t4;\r\n        wd5 = t5;\r\n        wd6 = t6;\r\n        wd7 = t7;\r\n        wdAddressSet = true;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint _balance = address(this).balance;\r\n        payable(wd1).transfer(_balance * 2 / 100);\r\n        payable(wd2).transfer(_balance * 1 / 100);\r\n        payable(wd3).transfer(_balance * 1 / 100);\r\n        payable(wd4).transfer(_balance * 1 / 100);\r\n        payable(wd5).transfer(_balance * 10 / 100);\r\n        payable(wd6).transfer(_balance * 43 / 100);\r\n        payable(wd6).transfer(_balance * 42 / 100);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_temp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OGPerTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"OgPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_OG_Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PerTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"PublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PublicSalePerTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Public_Sale_Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause_Presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause_sale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale_startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"public_startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_temp\",\"type\":\"uint256\"}],\"name\":\"set_OGPerTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_temp\",\"type\":\"bool\"}],\"name\":\"set_PausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_temp\",\"type\":\"bool\"}],\"name\":\"set_PauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_temp\",\"type\":\"uint256\"}],\"name\":\"set_PerTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_temp\",\"type\":\"uint256\"}],\"name\":\"set_PublicSalePerTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_minter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_presale_OG_price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_presale_price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_temp\",\"type\":\"uint256\"}],\"name\":\"set_presale_start_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_temp\",\"type\":\"uint256\"}],\"name\":\"set_publicsale_Starttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_publicsale_price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t7\",\"type\":\"address\"}],\"name\":\"set_wd_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintablePuffyPaws", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000de191bfc5cad85c79e660d003cb500f776ef7e7e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ded8f8d5bf2e447b1d72ea6ad001872820f05ff0166aff5be75c01b1eaaf2b2a"}]}