{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ValidatorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ValidatorProxy.sol\\\";\\nimport \\\"./interfaces/INodeOperatorRegistry.sol\\\";\\nimport \\\"./interfaces/IValidatorProxy.sol\\\";\\nimport \\\"./interfaces/IValidatorFactory.sol\\\";\\n\\n/// @title ValidatorFactory\\n/// @author 2021 ShardLabs.\\n/// @notice The validator Factory is the contract that allows creating new validatorProxies\\n// and managing them to update the operator and the validator implementation addresses.\\ncontract ValidatorFactory is IValidatorFactory, OwnableUpgradeable {\\n    /// @notice the list of all the validatorProxies.\\n    address[] public validators;\\n    /// @notice the contract version.\\n    string public version;\\n    /// @notice the node operator address.\\n    address public operatorRegistry;\\n    /// @notice the validator implementation address.\\n    address public validatorImplementation;\\n\\n    /// @notice Check if the operator contract is the msg.sender.\\n    modifier isOperatorRegistry() {\\n        require(operatorRegistry == msg.sender, \\\"Caller is not the operator contract\\\");\\n        _;\\n    }\\n\\n    /// @notice Initialize the NodeOperator contract.\\n    function initialize(\\n        address _validatorImplementation,\\n        address _nodeOperatorRegistry\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        validatorImplementation = _validatorImplementation;\\n        setOperator(_nodeOperatorRegistry);\\n    }\\n\\n    /// @notice Deploy a new validator contract\\n    /// @return return the address of the new validator contract deployed\\n    function create() external override isOperatorRegistry returns (address) {\\n        require(operatorRegistry != address(0), \\\"Operator contract not set\\\");\\n\\n        // create a new validator proxy\\n        address proxy = address(\\n            new ValidatorProxy(validatorImplementation, operatorRegistry, address(this))\\n        );\\n\\n        validators.push(proxy);\\n\\n        return proxy;\\n    }\\n\\n    /// @notice Remove a validator proxy from the list.\\n    /// @param _validatorProxy validator proxy address.\\n    function remove(address _validatorProxy) external override isOperatorRegistry {\\n        require(\\n            _validatorProxy != address(0),\\n            \\\"Could not remove a zero address\\\"\\n        );\\n\\n        uint256 length = validators.length;\\n        for (uint256 idx = 0; idx < length; idx++) {\\n            if (_validatorProxy == validators[idx]) {\\n                validators[idx] = validators[length - 1];\\n                break;\\n            }\\n        }\\n        validators.pop();\\n    }\\n\\n    /// @notice Allows to set the NodeOperatorRegistry address and update all the validatorProxies\\n    /// with the new address.\\n    /// @param _newOperator new operator address.\\n    function setOperator(address _newOperator) public override onlyOwner {\\n        operatorRegistry = _newOperator;\\n\\n        uint256 length = validators.length;\\n        for (uint256 idx = 0; idx < length; idx++) {\\n            IValidatorProxy(validators[idx]).setOperator(_newOperator);\\n        }\\n\\n        emit SetOperatorContract(_newOperator);\\n    }\\n\\n    /// @notice Allows to set the validator implementation address and update all the\\n    /// validatorProxies with the new address.\\n    /// @param _validatorImplementation new validator implementation address.\\n    function setValidatorImplementation(address _validatorImplementation)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        validatorImplementation = _validatorImplementation;\\n\\n        uint256 length = validators.length;\\n        for (uint256 idx = 0; idx < length; idx++) {\\n            IValidatorProxy(validators[idx]).setValidatorImplementation(\\n                _validatorImplementation\\n            );\\n        }\\n        emit SetValidatorImplementation(_validatorImplementation);\\n    }\\n\\n    /// @notice set contract version.\\n    function setVersion(string memory _version) external onlyOwner {\\n        version = _version;\\n    }\\n\\n    /// @notice Get a list of all validatorProxy contracts deployed.\\n    /// @return return a list of deployed validatorProxy contracts.\\n    function getValidators() external view returns (address[] memory) {\\n        return validators;\\n    }\\n\\n    event SetOperatorContract(address operator);\\n    event SetValidatorImplementation(address validatorImplementation);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/ValidatorProxy.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IValidatorProxy.sol\\\";\\n\\n/// @title ValidatorProxy\\n/// @author 2021 ShardLabs.\\n/// @notice The validator proxy contract is a proxy used as a validator owner in the\\n/// stakeManager. Each time a new operator is added a new validator proxy is created\\n/// by the validator factory and assigned to the operator. Later we can use it to\\n/// stake the validator on the stakeManager and manage it.\\ncontract ValidatorProxy is IValidatorProxy, Proxy {\\n    /// @notice the validator implementation address.\\n    address public implementation;\\n    /// @notice the operator address.\\n    address public operator;\\n    /// @notice validator factory address.\\n    address public validatorFactory;\\n\\n    constructor(\\n        address _newImplementation,\\n        address _operator,\\n        address _validatorFactory\\n    ) {\\n        implementation = _newImplementation;\\n        operator = _operator;\\n        validatorFactory = _validatorFactory;\\n    }\\n\\n    /// @notice check if the msg.sender is the validator factory.\\n    modifier isValidatorFactory() {\\n        require(\\n            msg.sender == validatorFactory,\\n            \\\"Caller is not the validator factory\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Allows the validatorFactory to set the validator implementation.\\n    /// @param _newValidatorImplementation set a new implementation\\n    function setValidatorImplementation(address _newValidatorImplementation)\\n        external\\n        override\\n        isValidatorFactory\\n    {\\n        implementation = _newValidatorImplementation;\\n    }\\n\\n    /// @notice Allows the validatorFactory to set the operator implementation.\\n    /// @param _newOperator set a new operator.\\n    function setOperator(address _newOperator)\\n        external\\n        override\\n        isValidatorFactory\\n    {\\n        operator = _newOperator;\\n    }\\n\\n    /// @notice Allows to get the contract implementation address.\\n    /// @return Returns the address of the implementation\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../lib/Operator.sol\\\";\\n\\n/// @title INodeOperatorRegistry\\n/// @author 2021 ShardLabs\\n/// @notice Node operator registry interface\\ninterface INodeOperatorRegistry {\\n    /// @notice Allows to add a new node operator to the system.\\n    /// @param _name the node operator name.\\n    /// @param _rewardAddress public address used for ACL and receive rewards.\\n    /// @param _signerPubkey public key used on heimdall len 64 bytes.\\n    function addOperator(\\n        string memory _name,\\n        address _rewardAddress,\\n        bytes memory _signerPubkey\\n    ) external;\\n\\n    /// @notice Allows to stop a node operator.\\n    /// @param _operatorId node operator id.\\n    function stopOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows to remove a node operator from the system.\\n    /// @param _operatorId node operator id.\\n    function removeOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows a staked validator to join the system.\\n    function joinOperator() external;\\n\\n    /// @notice Allows to stake an operator on the Polygon stakeManager.\\n    /// This function calls Polygon transferFrom so the totalAmount(_amount + _heimdallFee)\\n    /// has to be approved first.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee heimdallFee to stake.\\n    function stake(uint256 _amount, uint256 _heimdallFee) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param _amount amount to stake.\\n    /// @param _restakeRewards restake rewards.\\n    function restake(uint256 _amount, bool _restakeRewards) external;\\n\\n    /// @notice Allows the operator's owner to migrate the NFT. This can be done only\\n    /// if the DAO stopped the operator.\\n    function migrate() external;\\n\\n    /// @notice Allows to unstake an operator from the stakeManager. After the withdraw_delay\\n    /// the operator owner can call claimStake func to withdraw the staked tokens.\\n    function unstake() external;\\n\\n    /// @notice Allows to topup heimdall fees on polygon stakeManager.\\n    /// @param _heimdallFee amount to topup.\\n    function topUpForFee(uint256 _heimdallFee) external;\\n\\n    /// @notice Allows to claim staked tokens on the stake Manager after the end of the\\n    /// withdraw delay\\n    function unstakeClaim() external;\\n\\n    /// @notice Allows an owner to withdraw rewards from the stakeManager.\\n    function withdrawRewards() external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(bytes memory _signerPubkey) external;\\n\\n    /// @notice Allows to claim the heimdall fees staked by the owner of the operator\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator and switch from UNSTAKE status to STAKED\\n    function unjail() external;\\n\\n    /// @notice Allows an operator's owner to set the operator name.\\n    function setOperatorName(string memory _name) external;\\n\\n    /// @notice Allows an operator's owner to set the operator rewardAddress.\\n    function setOperatorRewardAddress(address _rewardAddress) external;\\n\\n    /// @notice Allows the DAO to set _defaultMaxDelegateLimit.\\n    function setDefaultMaxDelegateLimit(uint256 _defaultMaxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _maxDelegateLimit for an operator.\\n    function setMaxDelegateLimit(uint256 _operatorId, uint256 _maxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _commissionRate.\\n    function setCommissionRate(uint256 _commissionRate) external;\\n\\n    /// @notice Allows the DAO to set _commissionRate for an operator.\\n    /// @param _operatorId id of the operator\\n    /// @param _newCommissionRate new commission rate\\n    function updateOperatorCommissionRate(\\n        uint256 _operatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows the DAO to set _minAmountStake and _minHeimdallFees.\\n    function setStakeAmountAndFees(\\n        uint256 _minAmountStake,\\n        uint256 _minHeimdallFees\\n    ) external;\\n\\n    /// @notice Allows to pause/unpause the node operator contract.\\n    function togglePause() external;\\n\\n    /// @notice Allows the DAO to enable/disable restake.\\n    function setRestake(bool _restake) external;\\n\\n    /// @notice Allows the DAO to set stMATIC contract.\\n    function setStMATIC(address _stMATIC) external;\\n\\n    /// @notice Allows the DAO to set validator factory contract.\\n    function setValidatorFactory(address _validatorFactory) external;\\n\\n    /// @notice Allows the DAO to set stake manager contract.\\n    function setStakeManager(address _stakeManager) external;\\n\\n    /// @notice Allows to set contract version.\\n    function setVersion(string memory _version) external;\\n\\n    /// @notice Get the stMATIC contract addresses\\n    function getContracts()\\n        external\\n        view\\n        returns (\\n            address _validatorFactory,\\n            address _stakeManager,\\n            address _polygonERC20,\\n            address _stMATIC\\n        );\\n\\n    /// @notice Allows to get stats.\\n    function getState()\\n        external\\n        view\\n        returns (\\n            uint256 _totalNodeOperator,\\n            uint256 _totalInactiveNodeOperator,\\n            uint256 _totalActiveNodeOperator,\\n            uint256 _totalStoppedNodeOperator,\\n            uint256 _totalUnstakedNodeOperator,\\n            uint256 _totalClaimedNodeOperator,\\n            uint256 _totalExitNodeOperator,\\n            uint256 _totalSlashedNodeOperator,\\n            uint256 _totalEjectedNodeOperator\\n        );\\n\\n    /// @notice Allows to get a list of operatorInfo.\\n    function getOperatorInfos(bool _delegation, bool _allActive)\\n        external\\n        view\\n        returns (Operator.OperatorInfo[] memory);\\n\\n\\n    /// @notice Allows to get all the operator ids.\\n    function getOperatorIds() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorProxy.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IValidatorProxy {\\n    /// @notice Allows to set a new validator implementation.\\n    /// @param _newImplementation new address.\\n    function setValidatorImplementation(address _newImplementation) external;\\n\\n    /// @notice Allows to set a new operator.\\n    /// @param _newOperator new address.\\n    function setOperator(address _newOperator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../Validator.sol\\\";\\n\\n/// @title IValidatorFactory.\\n/// @author 2021 ShardLabs\\ninterface IValidatorFactory {\\n    /// @notice Deploy a new validator proxy contract.\\n    /// @return return the address of the deployed contract.\\n    function create() external returns (address);\\n\\n    /// @notice Remove a validator proxy from the validators.\\n    function remove(address _validatorProxy) external;\\n\\n    /// @notice Set the node operator contract address.\\n    function setOperator(address _operator) external;\\n\\n    /// @notice Set validator implementation contract address.\\n    function setValidatorImplementation(address _validatorImplementation)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Operator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Operator {\\n    struct OperatorInfo {\\n        uint256 operatorId;\\n        address validatorShare;\\n        uint256 maxDelegateLimit;\\n        address rewardAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Validator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IValidator.sol\\\";\\nimport \\\"./interfaces/INodeOperatorRegistry.sol\\\";\\n\\n/// @title ValidatorImplementation\\n/// @author 2021 ShardLabs.\\n/// @notice The validator contract is a simple implementation of the stakeManager API, the\\n/// ValidatorProxies use this contract to interact with the stakeManager.\\n/// When a ValidatorProxy calls this implementation the state is copied\\n/// (owner, implementation, operatorRegistry), then they are used to check if the msg-sender is the\\n/// node operator contract, and if the validatorProxy implementation match with the current\\n/// validator contract.\\ncontract Validator is IERC721Receiver, IValidator {\\n    using SafeERC20 for IERC20;\\n\\n    address private implementation;\\n    address private operatorRegistry;\\n    address private validatorFactory;\\n\\n    /// @notice Check if the operator contract is the msg.sender.\\n    modifier isOperatorRegistry() {\\n        require(\\n            msg.sender == operatorRegistry,\\n            \\\"Caller should be the operator contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Allows to stake on the Polygon stakeManager contract by\\n    /// calling stakeFor function and set the user as the equal to this validator proxy\\n    /// address.\\n    /// @param _sender the address of the operator-owner that approved Matics.\\n    /// @param _amount the amount to stake with.\\n    /// @param _heimdallFee the heimdall fees.\\n    /// @param _acceptDelegation accept delegation.\\n    /// @param _signerPubkey signer public key used on the heimdall node.\\n    /// @param _commissionRate validator commision rate\\n    /// @return Returns the validatorId and the validatorShare contract address.\\n    function stake(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _heimdallFee,\\n        bool _acceptDelegation,\\n        bytes memory _signerPubkey,\\n        uint256 _commissionRate,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256, address) {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n\\n        uint256 totalAmount = _amount + _heimdallFee;\\n        polygonERC20.safeTransferFrom(_sender, address(this), totalAmount);\\n        polygonERC20.safeApprove(address(stakeManager), totalAmount);\\n        stakeManager.stakeFor(\\n            address(this),\\n            _amount,\\n            _heimdallFee,\\n            _acceptDelegation,\\n            _signerPubkey\\n        );\\n\\n        uint256 validatorId = stakeManager.getValidatorId(address(this));\\n        address validatorShare = stakeManager.getValidatorContract(validatorId);\\n        if (_commissionRate > 0) {\\n            stakeManager.updateCommissionRate(validatorId, _commissionRate);\\n        }\\n\\n        return (validatorId, validatorShare);\\n    }\\n\\n    /// @notice Restake validator rewards or new Matics validator on stake manager.\\n    /// @param _sender operator's owner that approved tokens to the validator contract.\\n    /// @param _validatorId validator id.\\n    /// @param _amount amount to stake.\\n    /// @param _stakeRewards restake rewards.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function restake(\\n        address _sender,\\n        uint256 _validatorId,\\n        uint256 _amount,\\n        bool _stakeRewards,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        if (_amount > 0) {\\n            IERC20 polygonERC20 = IERC20(_polygonERC20);\\n            polygonERC20.safeTransferFrom(_sender, address(this), _amount);\\n            polygonERC20.safeApprove(address(_stakeManager), _amount);\\n        }\\n        IStakeManager(_stakeManager).restake(_validatorId, _amount, _stakeRewards);\\n    }\\n\\n    /// @notice Unstake a validator from the Polygon stakeManager contract.\\n    /// @param _validatorId validatorId.\\n    /// @param _stakeManager address of the stake manager\\n    function unstake(uint256 _validatorId, address _stakeManager)\\n        external\\n        override\\n        isOperatorRegistry\\n    {\\n        // stakeManager\\n        IStakeManager(_stakeManager).unstake(_validatorId);\\n    }\\n\\n    /// @notice Allows a validator to top-up the heimdall fees.\\n    /// @param _sender address that approved the _heimdallFee amount.\\n    /// @param _heimdallFee amount.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function topUpForFee(\\n        address _sender,\\n        uint256 _heimdallFee,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n\\n        polygonERC20.safeTransferFrom(_sender, address(this), _heimdallFee);\\n        polygonERC20.safeApprove(address(stakeManager), _heimdallFee);\\n        stakeManager.topUpForFee(address(this), _heimdallFee);\\n    }\\n\\n    /// @notice Allows to withdraw rewards from the validator using the _validatorId. Only the\\n    /// owner can request withdraw. The rewards are transfered to the _rewardAddress.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress reward address.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function withdrawRewards(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256) {\\n        IStakeManager(_stakeManager).withdrawRewards(_validatorId);\\n\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Allows to unstake the staked tokens (+rewards) and transfer them\\n    /// to the owner rewardAddress.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress rewardAddress address.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function unstakeClaim(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256) {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        stakeManager.unstakeClaim(_validatorId);\\n        // polygonERC20\\n        // stakeManager\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Allows to update signer publickey.\\n    /// @param _validatorId validator id.\\n    /// @param _signerPubkey new publickey.\\n    /// @param _stakeManager stake manager address\\n    function updateSigner(\\n        uint256 _validatorId,\\n        bytes memory _signerPubkey,\\n        address _stakeManager\\n    ) external override isOperatorRegistry {\\n        IStakeManager(_stakeManager).updateSigner(_validatorId, _signerPubkey);\\n    }\\n\\n    /// @notice Allows withdraw heimdall fees.\\n    /// @param _accumFeeAmount accumulated heimdall fees.\\n    /// @param _index index.\\n    /// @param _proof proof.\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        stakeManager.claimFee(_accumFeeAmount, _index, _proof);\\n\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n    }\\n\\n    /// @notice Allows to update commission rate of a validator.\\n    /// @param _validatorId validator id.\\n    /// @param _newCommissionRate new commission rate.\\n    /// @param _stakeManager stake manager address\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) public override isOperatorRegistry {\\n        IStakeManager(_stakeManager).updateCommissionRate(\\n            _validatorId,\\n            _newCommissionRate\\n        );\\n    }\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId validator id\\n    function unjail(uint256 _validatorId, address _stakeManager)\\n        external\\n        override\\n        isOperatorRegistry\\n    {\\n        IStakeManager(_stakeManager).unjail(_validatorId);\\n    }\\n\\n    /// @notice Allows to transfer the validator nft token to the reward address a validator.\\n    /// @param _validatorId operator id.\\n    /// @param _stakeManagerNFT stake manager nft contract.\\n    /// @param _rewardAddress reward address.\\n    function migrate(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress\\n    ) external override isOperatorRegistry {\\n        IERC721 erc721 = IERC721(_stakeManagerNFT);\\n        erc721.approve(_rewardAddress, _validatorId);\\n        erc721.safeTransferFrom(address(this), _rewardAddress, _validatorId);\\n    }\\n\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\n    /// to join the PoLido protocol.\\n    /// @param _validatorId validator id\\n    /// @param _stakeManagerNFT address of the staking NFT\\n    /// @param _rewardAddress address that will receive the rewards from staking\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager address of the stake manager\\n    function join(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external override isOperatorRegistry {\\n        IERC721 erc721 = IERC721(_stakeManagerNFT);\\n        erc721.safeTransferFrom(_rewardAddress, address(this), _validatorId);\\n        updateCommissionRate(_validatorId, _newCommissionRate, _stakeManager);\\n    }\\n\\n    /// @notice Allows to get the version of the validator implementation.\\n    /// @return Returns the version.\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /// @notice Implement @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol interface.\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title polygon stake manager interface.\\n/// @author 2021 ShardLabs\\n/// @notice User to interact with the polygon stake manager.\\ninterface IStakeManager {\\n    /// @notice Stake a validator on polygon stake manager.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param amount amount to stake.\\n    /// @param heimdallFee heimdall fees.\\n    /// @param acceptDelegation accept delegation.\\n    /// @param signerPubkey signer publickey used in heimdall node.\\n    function stakeFor(\\n        address user,\\n        uint256 amount,\\n        uint256 heimdallFee,\\n        bool acceptDelegation,\\n        bytes memory signerPubkey\\n    ) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param validatorId validator id.\\n    /// @param amount amount to stake.\\n    /// @param stakeRewards restake rewards.\\n    function restake(\\n        uint256 validatorId,\\n        uint256 amount,\\n        bool stakeRewards\\n    ) external;\\n\\n    /// @notice Request unstake a validator.\\n    /// @param validatorId validator id.\\n    function unstake(uint256 validatorId) external;\\n\\n    /// @notice Increase the heimdall fees.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param heimdallFee heimdall fees.\\n    function topUpForFee(address user, uint256 heimdallFee) external;\\n\\n    /// @notice Get the validator id using the user address.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @return return the validator id\\n    function getValidatorId(address user) external view returns (uint256);\\n\\n    /// @notice get the validator contract used for delegation.\\n    /// @param validatorId validator id.\\n    /// @return return the address of the validator contract.\\n    function getValidatorContract(uint256 validatorId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Withdraw accumulated rewards\\n    /// @param validatorId validator id.\\n    function withdrawRewards(uint256 validatorId) external;\\n\\n    /// @notice Get validator total staked.\\n    /// @param validatorId validator id.\\n    function validatorStake(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Allows to unstake the staked tokens on the stakeManager.\\n    /// @param validatorId validator id.\\n    function unstakeClaim(uint256 validatorId) external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _validatorId validator id\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(uint256 _validatorId, bytes memory _signerPubkey)\\n        external;\\n\\n    /// @notice Allows to claim the heimdall fees.\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to update the commision rate of a validator\\n    /// @param _validatorId operator id\\n    /// @param _newCommissionRate commission rate\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId id of the validator that is to be unjailed\\n    function unjail(uint256 _validatorId) external;\\n\\n    /// @notice Returns a withdrawal delay.\\n    function withdrawalDelay() external view returns (uint256);\\n\\n    /// @notice Transfers amount from delegator\\n    function delegationDeposit(\\n        uint256 validatorId,\\n        uint256 amount,\\n        address delegator\\n    ) external returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Locked,\\n        Unstaked\\n    }\\n\\n    struct Validator {\\n        uint256 amount;\\n        uint256 reward;\\n        uint256 activationEpoch;\\n        uint256 deactivationEpoch;\\n        uint256 jailTime;\\n        address signer;\\n        address contractAddress;\\n        Status status;\\n        uint256 commissionRate;\\n        uint256 lastCommissionUpdate;\\n        uint256 delegatorsReward;\\n        uint256 delegatedAmount;\\n        uint256 initialRewardPerStake;\\n    }\\n\\n    function validators(uint256 _index)\\n        external\\n        view\\n        returns (Validator memory);\\n\\n    /// @notice Returns the address of the nft contract\\n    function NFTContract() external view returns (address);\\n\\n    /// @notice Returns the validator accumulated rewards on stake manager.\\n    function validatorReward(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../Validator.sol\\\";\\n\\n/// @title IValidator.\\n/// @author 2021 ShardLabs\\n/// @notice Validator interface.\\ninterface IValidator {\\n    /// @notice Allows to stake a validator on the Polygon stakeManager contract.\\n    /// @dev Stake a validator on the Polygon stakeManager contract.\\n    /// @param _sender msg.sender.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee herimdall fees.\\n    /// @param _acceptDelegation accept delegation.\\n    /// @param _signerPubkey signer public key used on the heimdall.\\n    /// @param _commisionRate commision rate of a validator\\n    function stake(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _heimdallFee,\\n        bool _acceptDelegation,\\n        bytes memory _signerPubkey,\\n        uint256 _commisionRate,\\n        address stakeManager,\\n        address polygonERC20\\n    ) external returns (uint256, address);\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param sender operator owner which approved tokens to the validato contract.\\n    /// @param validatorId validator id.\\n    /// @param amount amount to stake.\\n    /// @param stakeRewards restake rewards.\\n    /// @param stakeManager stake manager address\\n    /// @param polygonERC20 address of the MATIC token\\n    function restake(\\n        address sender,\\n        uint256 validatorId,\\n        uint256 amount,\\n        bool stakeRewards,\\n        address stakeManager,\\n        address polygonERC20\\n    ) external;\\n\\n    /// @notice Unstake a validator from the Polygon stakeManager contract.\\n    /// @dev Unstake a validator from the Polygon stakeManager contract by passing the validatorId\\n    /// @param _validatorId validatorId.\\n    /// @param _stakeManager address of the stake manager\\n    function unstake(uint256 _validatorId, address _stakeManager) external;\\n\\n    /// @notice Allows to top up heimdall fees.\\n    /// @param _heimdallFee amount\\n    /// @param _sender msg.sender\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function topUpForFee(\\n        address _sender,\\n        uint256 _heimdallFee,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external;\\n\\n    /// @notice Allows to withdraw rewards from the validator.\\n    /// @dev Allows to withdraw rewards from the validator using the _validatorId. Only the\\n    /// owner can request withdraw in this the owner is this contract.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress user address used to transfer the staked tokens.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    /// @return Returns the amount transfered to the user.\\n    function withdrawRewards(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external returns (uint256);\\n\\n    /// @notice Allows to claim staked tokens on the stake Manager after the end of the\\n    /// withdraw delay\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress user address used to transfer the staked tokens.\\n    /// @return Returns the amount transfered to the user.\\n    function unstakeClaim(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external returns (uint256);\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _validatorId validator id\\n    /// @param _signerPubkey update signer public key\\n    /// @param _stakeManager stake manager address\\n    function updateSigner(\\n        uint256 _validatorId,\\n        bytes memory _signerPubkey,\\n        address _stakeManager\\n    ) external;\\n\\n    /// @notice Allows to claim the heimdall fees.\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    /// @param _ownerRecipient owner recipient\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof,\\n        address _ownerRecipient,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external;\\n\\n    /// @notice Allows to update the commision rate of a validator\\n    /// @param _validatorId operator id\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager stake manager address\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId operator id\\n    function unjail(uint256 _validatorId, address _stakeManager) external;\\n\\n    /// @notice Allows to migrate the ownership to an other user.\\n    /// @param _validatorId operator id.\\n    /// @param _stakeManagerNFT stake manager nft contract.\\n    /// @param _rewardAddress reward address.\\n    function migrate(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress\\n    ) external;\\n\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\n    /// to join the PoLido protocol.\\n    /// @param _validatorId validator id\\n    /// @param _stakeManagerNFT address of the staking NFT\\n    /// @param _rewardAddress address that will receive the rewards from staking\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager address of the stake manager\\n    function join(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SetOperatorContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorImplementation\",\"type\":\"address\"}],\"name\":\"SetValidatorImplementation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeOperatorRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorProxy\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorImplementation\",\"type\":\"address\"}],\"name\":\"setValidatorImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ValidatorFactory", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}