{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ballcellLiquidBoya/main/BallcellLiquidBoyaMain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// \ud83e\udd1b \ud83d\udc41\ud83d\udc44\ud83d\udc41 \ud83e\udd1c < Let's enjoy Solidity!!\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../common/BallcellLiquidBoyaParameters.sol\\\";\\nimport \\\"./BallcellLiquidBoyaMainCreateParameters.sol\\\";\\nimport \\\"./BallcellLiquidBoyaMainMetadata.sol\\\";\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n\\tmapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\ncontract BallcellLiquidBoyaMain is ERC721Enumerable, Ownable {\\n\\tuint256 private constant _TOKEN_SUPPLY_AUCTION = 1;\\n\\tuint256 private constant _TOKEN_SUPPLY_PROMOTION = 33;\\n\\tuint256 private constant _TOKEN_SUPPLY_REWARD = 66;\\n\\tuint256 private constant _TOKEN_SUPPLY_HOMEPAGE = 2900;\\n\\tuint256 private constant _HOMEPAGE_AMOUNT = 5;\\n\\tuint256 private constant _HOMEPAGE_PRICE = 0.03 ether;\\n\\n\\taddress private _addressProxyRegistry;\\n\\taddress private _addressContractImage;\\n\\tuint256 private _passcode = 0;\\n\\n\\tuint256 private _currentTokenId = 0;\\n\\tuint256 private _tokenCountHomepage = 0;\\n\\tuint256 private _tokenCountPromotion = 0;\\n\\tuint256 private _tokenCountReward = 0;\\n\\n\\tbool private _saleIsActive = false;\\n\\tbool private _saleIsFinish = false;\\n\\n\\tbool private _canceled = false;\\n\\tbool private _revealed = false;\\n\\tstring private _seedPhrase = \\\"\\\";\\n\\tbytes32 private _seedNumber = 0;\\n\\n    mapping(uint256 => string) private _tokenNames;\\n\\n\\tconstructor() ERC721(\\\"BallcellLiquidBoya\\\", \\\"BCL\\\") {\\n\\t\\t_mintAuction();\\n\\t}\\n\\n\\tfunction settingAddressProxyRegistry(address value) public {\\n\\t\\trequire(_addressProxyRegistry == 0x0000000000000000000000000000000000000000, \\\"already set\\\");\\n\\t\\t_addressProxyRegistry = value;\\n\\t}\\n\\n\\tfunction settingAddressContractImage(address value) public {\\n\\t\\trequire(_addressContractImage == 0x0000000000000000000000000000000000000000, \\\"already set\\\");\\n\\t\\t_addressContractImage = value;\\n\\t}\\n\\n\\tfunction settingPasscode(uint256 value) public {\\n\\t\\trequire(_passcode == 0, \\\"already set\\\");\\n\\t\\t_passcode = value;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\n\\t}\\n\\n\\t// \u30db\u30fc\u30e0\u30da\u30fc\u30b8\u3067\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u95a2\u6570\\n\\tuint private constant _keyMintTotal = 0;\\n\\tuint private constant _keyMintRemains = 1;\\n\\tuint private constant _keyMintPurchasable = 2;\\n\\tuint private constant _keyMintPricePerToken = 3;\\n\\tuint private constant _keyMintFlagActive = 4;\\n\\tuint private constant _keyMintFlagFinish = 5;\\n\\tfunction getMintInformation() public view returns (uint256[6] memory) {\\n\\t\\tuint256[6] memory array;\\n\\t\\tuint256 mintTotal = _TOKEN_SUPPLY_AUCTION + _TOKEN_SUPPLY_PROMOTION + _TOKEN_SUPPLY_REWARD + _TOKEN_SUPPLY_HOMEPAGE;\\n\\t\\tuint256 mintRemains = _TOKEN_SUPPLY_HOMEPAGE - _tokenCountHomepage;\\n\\t\\tuint256 mintPurchasable = _HOMEPAGE_AMOUNT;\\n\\t\\tarray[_keyMintTotal] = mintTotal;\\n\\t\\tarray[_keyMintRemains] = mintRemains;\\n\\t\\tarray[_keyMintPurchasable] = mintPurchasable < mintRemains ? mintPurchasable : mintRemains;\\n\\t\\tarray[_keyMintPricePerToken] = _HOMEPAGE_PRICE;\\n\\t\\tarray[_keyMintFlagActive] = _saleIsActive ? 1 : 0;\\n\\t\\tarray[_keyMintFlagFinish] = _saleIsFinish ? 1 : 0;\\n\\t\\treturn array;\\n\\t}\\n\\n\\tfunction getRemainPromotion() public view returns (uint256) {\\n\\t\\treturn _TOKEN_SUPPLY_PROMOTION - _tokenCountPromotion;\\n\\t}\\n\\n\\tfunction getRemainReward() public view returns (uint256) {\\n\\t\\treturn _TOKEN_SUPPLY_REWARD - _tokenCountReward;\\n\\t}\\n\\n\\tfunction _tokenParameters(uint256 tokenId) private view returns (BallcellLiquidBoyaParameters.Parameters memory) {\\n\\t\\trequire(_exists(tokenId), \\\"non existent token\\\");\\n\\t\\tBallcellLiquidBoyaMainCreateParameters.Arguments memory arguments;\\n\\t\\targuments.canceled = _canceled;\\n\\t\\targuments.revealed = _revealed;\\n\\t\\targuments.tokenId = tokenId;\\n\\t\\targuments.passcode = _passcode;\\n\\t\\targuments.owner = _exists(tokenId) ? ownerOf(tokenId) : address(0);\\n\\t\\targuments.seedPhrase = _seedPhrase;\\n\\t\\targuments.seedNumber = _seedNumber;\\n\\t\\targuments.isSpecial = tokenId <= _TOKEN_SUPPLY_AUCTION + _TOKEN_SUPPLY_PROMOTION + _TOKEN_SUPPLY_REWARD;\\n\\t\\treturn BallcellLiquidBoyaMainCreateParameters.createParameters(arguments);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\t\\tBallcellLiquidBoyaParameters.Parameters memory parameters = _tokenParameters(tokenId);\\n\\t\\treturn BallcellLiquidBoyaMainMetadata.metadata(parameters, _tokenNames[tokenId], _addressContractImage);\\n\\t}\\n\\n\\tfunction tokenArray(uint256 tokenId) public view returns (uint16[18] memory) {\\n\\t\\tBallcellLiquidBoyaParameters.Parameters memory parameters = _tokenParameters(tokenId);\\n\\t\\treturn BallcellLiquidBoyaParameters.createArray(parameters);\\n\\t}\\n\\n\\tfunction setSaleIsActive(bool value) public onlyOwner {\\n\\t\\trequire(!_saleIsFinish, \\\"Sale has already finished\\\");\\n\\t\\trequire(!_saleIsActive || !value, \\\"Sale has already started\\\");\\n\\t\\trequire(_saleIsActive || value, \\\"Sale has already stopped\\\");\\n\\t\\t_saleIsActive = value;\\n\\t}\\n\\n\\t// \u6c38\u9060\u306b\u8ca9\u58f2\u3092\u7d42\u4e86\u3059\u308b\u95a2\u6570\\n\\tfunction setSaleIsFinish() public onlyOwner {\\n\\t\\trequire(!_saleIsFinish, \\\"Sale has already finished\\\");\\n\\t\\t_saleIsFinish= true;\\n\\t}\\n\\n\\t// testnet\u3067\u5b58\u5728\u3092\u96a0\u853d\u3059\u308b\u95a2\u6570\\n\\tfunction setCancel(bool value) public onlyOwner {\\n\\t\\trequire(!_canceled || !value, \\\"already canceled\\\");\\n\\t\\trequire(_canceled || value, \\\"not canceled\\\");\\n\\t\\t_canceled = value;\\n\\t}\\n\\n\\tfunction reveal(string memory seedPhrase) public onlyOwner {\\n\\t\\trequire(!_revealed, \\\"already revealed\\\");\\n\\t\\t_revealed = true;\\n\\t\\t_seedPhrase = seedPhrase;\\n\\t\\t_seedNumber = blockhash(block.number - 1);\\n\\t}\\n\\n\\tfunction rename(uint256 tokenId, string memory tokenName) public onlyOwner {\\n\\t\\tbytes32 hashCurr = keccak256(abi.encodePacked(_tokenNames[tokenId]));\\n\\t\\tbytes32 hashNext = keccak256(abi.encodePacked(tokenName));\\n\\t\\trequire(hashCurr != hashNext, \\\"same name\\\");\\n\\t\\t_tokenNames[tokenId] = tokenName;\\n\\t}\\n\\n\\tfunction _mintAuction() private onlyOwner {\\n\\t\\tuint256 tokenAmountMint = _TOKEN_SUPPLY_AUCTION;\\n\\t\\tuint256 tokenOffset = 1;\\n\\t\\tfor (uint256 i = 0; i < tokenAmountMint; i++) {\\n\\t\\t\\taddress minter = msg.sender;\\n\\t\\t\\tuint256 tokenId = tokenOffset + i;\\n\\t\\t\\t_safeMint(minter, tokenId);\\n\\t\\t\\t_tokenNames[tokenId] = \\\"origin\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mintPromotion(address[] memory winner, string memory tokenName) public onlyOwner {\\n\\t\\tuint256 tokenAmountMint = winner.length;\\n\\t\\tuint256 tokenAmountExist = _tokenCountPromotion;\\n\\t\\tuint256 tokenSupply = _TOKEN_SUPPLY_PROMOTION;\\n\\t\\tuint256 tokenOffset = 1 + tokenAmountExist + _TOKEN_SUPPLY_AUCTION;\\n\\t\\trequire(tokenAmountExist + tokenAmountMint <= tokenSupply, \\\"token stock shortage\\\");\\n\\t\\tfor (uint256 i = 0; i < tokenAmountMint; i++) {\\n\\t\\t\\taddress minter = winner[i];\\n\\t\\t\\tuint256 tokenId = tokenOffset + i;\\n\\t\\t\\t_safeMint(minter, tokenId);\\n\\t\\t\\t_tokenNames[tokenId] = tokenName;\\n\\t\\t}\\n\\t\\t_tokenCountPromotion = tokenAmountExist + tokenAmountMint;\\n\\t}\\n\\n\\tfunction mintReward(address[] memory winner, string memory tokenName) public onlyOwner {\\n\\t\\tuint256 tokenAmountMint = winner.length;\\n\\t\\tuint256 tokenAmountExist = _tokenCountReward;\\n\\t\\tuint256 tokenSupply = _TOKEN_SUPPLY_REWARD;\\n\\t\\tuint256 tokenOffset = 1 + tokenAmountExist + _TOKEN_SUPPLY_AUCTION + _TOKEN_SUPPLY_PROMOTION;\\n\\t\\trequire(tokenAmountExist + tokenAmountMint <= tokenSupply, \\\"token stock shortage\\\");\\n\\t\\tfor (uint256 i = 0; i < tokenAmountMint; i++) {\\n\\t\\t\\taddress minter = winner[i];\\n\\t\\t\\tuint256 tokenId = tokenOffset + i;\\n\\t\\t\\t_safeMint(minter, tokenId);\\n\\t\\t\\t_tokenNames[tokenId] = tokenName;\\n\\t\\t}\\n\\t\\t_tokenCountReward = tokenAmountExist + tokenAmountMint;\\n\\t}\\n\\n\\tfunction mintHomepage(uint tokenAmountMint) public payable {\\n\\t\\trequire(!_saleIsFinish, \\\"Sale has finished\\\");\\n\\t\\trequire(_saleIsActive, \\\"Sale has stopped\\\");\\n\\t\\tuint256 tokenAmountExist = _tokenCountHomepage;\\n\\t\\tuint256 tokenSupply = _TOKEN_SUPPLY_HOMEPAGE;\\n\\t\\tuint256 tokenOffset = 1 + tokenAmountExist + _TOKEN_SUPPLY_AUCTION + _TOKEN_SUPPLY_PROMOTION + _TOKEN_SUPPLY_REWARD;\\n\\t\\trequire(tokenAmountMint <= _HOMEPAGE_AMOUNT, \\\"incorrect token amount\\\");\\n\\t\\trequire(tokenAmountExist + tokenAmountMint <= tokenSupply, \\\"token stock shortage\\\");\\n\\t\\trequire(tokenAmountMint * _HOMEPAGE_PRICE <= msg.value, \\\"incorrect ether amount\\\");\\n\\t\\taddress minter = msg.sender;\\n\\t\\tfor (uint256 i = 0; i < tokenAmountMint; i++) {\\n\\t\\t\\tuint256 tokenId = tokenOffset + i;\\n\\t\\t\\t_safeMint(minter, tokenId);\\n\\t\\t}\\n\\t\\t_tokenCountHomepage = tokenAmountExist + tokenAmountMint;\\n\\t}\\n\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\tuint balance = address(this).balance;\\n\\t\\trequire(balance > 0, \\\"no balance\\\");\\n\\t\\tpayable(msg.sender).transfer(balance);\\n\\t}\\n\\n\\tfunction isApprovedForAll(address owner, address operator) override public view returns (bool) {\\n\\t\\tif (_addressProxyRegistry == address(0)) { return super.isApprovedForAll(owner, operator); }\\n\\t\\tProxyRegistry proxyRegistry = ProxyRegistry(_addressProxyRegistry);\\n\\t\\tif (address(proxyRegistry.proxies(owner)) == operator) { return true; }\\n\\t\\treturn super.isApprovedForAll(owner, operator);\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ballcellLiquidBoya/common/BallcellLiquidBoyaParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// \ud83e\udd1b \ud83d\udc41\ud83d\udc44\ud83d\udc41 \ud83e\udd1c < Let's enjoy Solidity!!\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nlibrary BallcellLiquidBoyaParameters {\\n\\tstruct Parameters {\\n\\t\\tbool revealed;\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 passcode;\\n\\n\\t\\tuint256 rotation;\\n\\t\\tuint256 angle;\\n\\t\\tuint256 distance;\\n\\t\\tuint256 swing;\\n\\t\\tuint256 radiusBody;\\n\\t\\tuint256 radiusFoot;\\n\\t\\tuint256 radiusHand;\\n\\t\\tuint256 radiusHead;\\n\\n\\t\\tuint256 colorHueBody;\\n\\t\\tuint256 colorHueRFoot;\\n\\t\\tuint256 colorHueLFoot;\\n\\t\\tuint256 colorHueRHand;\\n\\t\\tuint256 colorHueLHand;\\n\\t\\tuint256 colorHueHead;\\n\\t\\tuint256 colorHueREye;\\n\\t\\tuint256 colorHueLEye;\\n\\t\\tuint256 colorLightnessBody;\\n\\t\\tuint256 colorLightnessEye;\\n\\n\\t\\tbool colorFlagOne;\\n\\t\\tColorTypeBody colorTypeBody;\\n\\t\\tColorTypeEye colorTypeEye;\\n\\n\\t\\tBackgroundType backgroundType;\\n\\t\\tuint256 backgroundColor;\\n\\t\\tuint256 backgroundRandom;\\n\\t}\\n\\n\\tenum ColorTypeBody { Neutral, Bright, Dark }\\n\\tenum ColorTypeEye { Monotone, Single, Double }\\n\\tenum BackgroundType { None, Single, Circle, PolkaDot, GradationLinear, Lgbt }\\n\\n\\tuint constant _keyRotation = 0;\\n\\tuint constant _keyAngle = 1;\\n\\tuint constant _keyDistance = 2;\\n\\tuint constant _keySwing = 3;\\n\\tuint constant _keyRadiusBody = 4;\\n\\tuint constant _keyRadiusFoot = 5;\\n\\tuint constant _keyRadiusHand = 6;\\n\\tuint constant _keyRadiusHead = 7;\\n\\tuint constant _keyColorHueBody = 8;\\n\\tuint constant _keyColorHueRFoot = 9;\\n\\tuint constant _keyColorHueLFoot = 10;\\n\\tuint constant _keyColorHueRHand = 11;\\n\\tuint constant _keyColorHueLHand = 12;\\n\\tuint constant _keyColorHueHead = 13;\\n\\tuint constant _keyColorHueREye = 14;\\n\\tuint constant _keyColorHueLEye = 15;\\n\\tuint constant _keyColorLightnessBody = 16;\\n\\tuint constant _keyColorLightnessEye = 17;\\n\\tfunction createArray(Parameters memory parameters) internal pure returns (uint16[18] memory) {\\n\\t\\tuint16[18] memory array;\\n\\t\\tarray[_keyRotation] = uint16(parameters.rotation);\\n\\t\\tarray[_keyAngle] = uint16(parameters.angle);\\n\\t\\tarray[_keyDistance] = uint16(parameters.distance);\\n\\t\\tarray[_keySwing] = uint16(parameters.swing);\\n\\t\\tarray[_keyRadiusBody] = uint16(parameters.radiusBody);\\n\\t\\tarray[_keyRadiusFoot] = uint16(parameters.radiusFoot);\\n\\t\\tarray[_keyRadiusHand] = uint16(parameters.radiusHand);\\n\\t\\tarray[_keyRadiusHead] = uint16(parameters.radiusHead);\\n\\t\\tarray[_keyColorHueBody] = uint16(parameters.colorHueBody);\\n\\t\\tarray[_keyColorHueRFoot] = uint16(parameters.colorHueRFoot);\\n\\t\\tarray[_keyColorHueLFoot] = uint16(parameters.colorHueLFoot);\\n\\t\\tarray[_keyColorHueRHand] = uint16(parameters.colorHueRHand);\\n\\t\\tarray[_keyColorHueLHand] = uint16(parameters.colorHueLHand);\\n\\t\\tarray[_keyColorHueHead] = uint16(parameters.colorHueHead);\\n\\t\\tarray[_keyColorHueREye] = uint16(parameters.colorHueREye);\\n\\t\\tarray[_keyColorHueLEye] = uint16(parameters.colorHueLEye);\\n\\t\\tarray[_keyColorLightnessBody] = uint16(parameters.colorLightnessBody);\\n\\t\\tarray[_keyColorLightnessEye] = uint16(parameters.colorLightnessEye);\\n\\t\\treturn array;\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    },\r\n    \"contracts/ballcellLiquidBoya/main/BallcellLiquidBoyaMainCreateParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// \ud83e\udd1b \ud83d\udc41\ud83d\udc44\ud83d\udc41 \ud83e\udd1c < Let's enjoy Solidity!!\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nimport \\\"../common/BallcellLiquidBoyaParameters.sol\\\";\\nimport \\\"../../utils/Random.sol\\\";\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nlibrary BallcellLiquidBoyaMainCreateParameters {\\n\\tstruct Arguments {\\n\\t\\tbool canceled;\\n\\t\\tbool revealed;\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 passcode;\\n\\t\\taddress owner;\\n\\t\\tstring seedPhrase;\\n\\t\\tbytes32 seedNumber;\\n\\t\\tbool isSpecial;\\n\\t}\\n\\n\\tfunction createParameters(Arguments memory arguments) internal pure returns (BallcellLiquidBoyaParameters.Parameters memory) {\\n\\t\\tBallcellLiquidBoyaParameters.Parameters memory parameters;\\n\\t\\tparameters.revealed = arguments.revealed;\\n\\t\\tparameters.tokenId = arguments.tokenId;\\n\\t\\tparameters.passcode = arguments.passcode;\\n\\n\\t\\tif (arguments.canceled) {\\n\\t\\t\\t// \u30ad\u30e3\u30f3\u30bb\u30eb\u30d1\u30da\u30c3\u30c8\\n\\t\\t\\tparameters.rotation = 60;\\n\\t\\t\\tparameters.angle = 60;\\n\\t\\t\\tparameters.distance = 9;\\n\\t\\t\\tparameters.swing = 0;\\n\\t\\t\\tparameters.radiusBody = 1;\\n\\t\\t\\tparameters.radiusFoot = 1;\\n\\t\\t\\tparameters.radiusHand = 1;\\n\\t\\t\\tparameters.radiusHead = 6;\\n\\t\\t\\tparameters.colorHueBody = 0;\\n\\t\\t\\tparameters.colorHueRFoot = 0;\\n\\t\\t\\tparameters.colorHueLFoot = 0;\\n\\t\\t\\tparameters.colorHueRHand = 0;\\n\\t\\t\\tparameters.colorHueLHand = 0;\\n\\t\\t\\tparameters.colorHueHead = 0;\\n\\t\\t\\tparameters.colorHueREye = 0;\\n\\t\\t\\tparameters.colorHueLEye = 0;\\n\\t\\t\\tparameters.colorLightnessBody = 100;\\n\\t\\t\\tparameters.colorLightnessEye = 0;\\n\\t\\t\\tparameters.colorFlagOne = true;\\n\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Neutral;\\n\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Monotone;\\n\\t\\t\\tparameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.None;\\n\\t\\t\\tparameters.backgroundColor = 0;\\n\\t\\t\\tparameters.backgroundRandom = 0;\\n\\t\\t} else if (!arguments.revealed) {\\n\\t\\t\\t// \u958b\u793a\u524d\u306e\u30c0\u30df\u30fc\u30d1\u30da\u30c3\u30c8\\n\\t\\t\\tRandom.Status memory randomStatus;\\n\\t\\t\\tRandom.init(randomStatus, uint256(keccak256(abi.encodePacked(arguments.tokenId))));\\n\\t\\t\\tparameters.rotation = Random.get(randomStatus) % (120 + 1);\\n\\t\\t\\tparameters.angle = Random.get(randomStatus) % (90 + 1);\\n\\t\\t\\tparameters.distance = 2;\\n\\t\\t\\tparameters.swing = 10;\\n\\t\\t\\tparameters.radiusBody = 5;\\n\\t\\t\\tparameters.radiusFoot = 3;\\n\\t\\t\\tparameters.radiusHand = 2;\\n\\t\\t\\tparameters.radiusHead = 6;\\n\\t\\t\\tparameters.colorHueBody = 0;\\n\\t\\t\\tparameters.colorHueRFoot = 0;\\n\\t\\t\\tparameters.colorHueLFoot = 0;\\n\\t\\t\\tparameters.colorHueRHand = 0;\\n\\t\\t\\tparameters.colorHueLHand = 0;\\n\\t\\t\\tparameters.colorHueHead = 0;\\n\\t\\t\\tparameters.colorHueREye = 0;\\n\\t\\t\\tparameters.colorHueLEye = 0;\\n\\t\\t\\tparameters.colorLightnessBody = 0;\\n\\t\\t\\tparameters.colorLightnessEye = 100;\\n\\t\\t\\tparameters.colorFlagOne = true;\\n\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Neutral;\\n\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Monotone;\\n\\t\\t\\tparameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.None;\\n\\t\\t\\tparameters.backgroundColor = 0;\\n\\t\\t\\tparameters.backgroundRandom = 0;\\n\\t\\t} else if (arguments.tokenId == 1) {\\n\\t\\t\\t// tokenId=1 \u30aa\u30ea\u30b8\u30f3\u30d1\u30da\u30c3\u30c8\\n\\t\\t\\tparameters.rotation = 90;\\n\\t\\t\\tparameters.angle = 60;\\n\\t\\t\\tparameters.distance = 2;\\n\\t\\t\\tparameters.swing = 10;\\n\\t\\t\\tparameters.radiusBody = 5;\\n\\t\\t\\tparameters.radiusFoot = 3;\\n\\t\\t\\tparameters.radiusHand = 2;\\n\\t\\t\\tparameters.radiusHead = 6;\\n\\t\\t\\tparameters.colorHueBody = 0;\\n\\t\\t\\tparameters.colorHueRFoot = 0;\\n\\t\\t\\tparameters.colorHueLFoot = 0;\\n\\t\\t\\tparameters.colorHueRHand = 0;\\n\\t\\t\\tparameters.colorHueLHand = 0;\\n\\t\\t\\tparameters.colorHueHead = 0;\\n\\t\\t\\tparameters.colorHueREye = 0;\\n\\t\\t\\tparameters.colorHueLEye = 0;\\n\\t\\t\\tparameters.colorLightnessBody = 50;\\n\\t\\t\\tparameters.colorLightnessEye = 0;\\n\\t\\t\\tparameters.colorFlagOne = true;\\n\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Neutral;\\n\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Monotone;\\n\\t\\t\\tparameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.None;\\n\\t\\t\\tparameters.backgroundColor = 0;\\n\\t\\t\\tparameters.backgroundRandom = 0;\\n\\t\\t} else {\\n\\t\\t\\t// \u4e71\u6570\u306e\u6e96\u5099\\n\\t\\t\\tRandom.Status memory randomStatusToken;\\n\\t\\t\\tRandom.Status memory randomStatusOwner;\\n\\t\\t\\tbytes memory seedToken = abi.encodePacked(arguments.seedPhrase, arguments.seedNumber, arguments.tokenId);\\n\\t\\t\\tbytes memory seedOwner = abi.encodePacked(arguments.seedPhrase, arguments.seedNumber, arguments.owner);\\n\\t\\t\\tRandom.init(randomStatusToken, uint256(keccak256(seedToken)));\\n\\t\\t\\tRandom.init(randomStatusOwner, uint256(keccak256(seedOwner)));\\n\\n\\t\\t\\t// \u30d1\u30e9\u30e1\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\\n\\t\\t\\tuint8[20][5] memory table;\\n\\t\\t\\ttable[0] = [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9];\\n\\t\\t\\ttable[1] = [3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 9];\\n\\t\\t\\ttable[2] = [1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\\n\\t\\t\\ttable[3] = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4];\\n\\t\\t\\ttable[4] = [3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9];\\n\\n\\t\\t\\t// \u30c8\u30fc\u30af\u30f3\u306b\u7d10\u3065\u304f\u30d1\u30da\u30c3\u30c8\u5f62\u72b6\\n\\t\\t\\tparameters.rotation = Random.get(randomStatusToken) % (120 + 1);\\n\\t\\t\\tparameters.angle = Random.get(randomStatusToken) % (90 + 1);\\n\\t\\t\\tparameters.distance = table[0][Random.get(randomStatusToken) % 20];\\n\\t\\t\\tparameters.swing = Random.get(randomStatusToken) % (40 + 1);\\n\\t\\t\\tparameters.radiusBody = table[1][Random.get(randomStatusToken) % 20];\\n\\t\\t\\tparameters.radiusFoot = table[2][Random.get(randomStatusToken) % 20];\\n\\t\\t\\tparameters.radiusHand = table[3][Random.get(randomStatusToken) % 20];\\n\\t\\t\\tparameters.radiusHead = table[4][Random.get(randomStatusToken) % 20];\\n\\n\\t\\t\\t// \u30aa\u30fc\u30ca\u30fc\u306b\u7d10\u3065\u304f\u30d1\u30da\u30c3\u30c8\u8272\\n\\t\\t\\tparameters.colorHueBody = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueRFoot = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueLFoot = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueRHand = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueLHand = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueHead = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueREye = Random.get(randomStatusOwner) % 360;\\n\\t\\t\\tparameters.colorHueLEye = Random.get(randomStatusOwner) % 360;\\n\\n\\t\\t\\t// \u30c8\u30fc\u30af\u30f3\u306b\u7d10\u3065\u304f\u30d1\u30da\u30c3\u30c8\u7279\u6b8a\u8272 \u5358\u8272\\n\\t\\t\\t// \u5358\u8272\u30d1\u30da\u30c3\u30c8\u306f\u6fc0\u30ec\u30a2\u306a\u306e\u3067\u3001\u30ec\u30a2\u30ea\u30c6\u30a3\u306e\u5b58\u5728\u3057\u306a\u3044\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u306e\u30df\u30f3\u30c8\u304b\u3089\u306f\u51fa\u73fe\u3057\u306a\u3044\u3002\\n\\t\\t\\tif (arguments.isSpecial && Random.get(randomStatusToken) % 10 == 0) {\\n\\t\\t\\t\\tparameters.colorFlagOne = true;\\n\\t\\t\\t\\tparameters.colorHueRFoot = parameters.colorHueBody;\\n\\t\\t\\t\\tparameters.colorHueLFoot = parameters.colorHueBody;\\n\\t\\t\\t\\tparameters.colorHueRHand = parameters.colorHueBody;\\n\\t\\t\\t\\tparameters.colorHueLHand = parameters.colorHueBody;\\n\\t\\t\\t\\tparameters.colorHueHead = parameters.colorHueBody;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tparameters.colorFlagOne = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// \u30c8\u30fc\u30af\u30f3\u306b\u7d10\u3065\u304f\u30d1\u30da\u30c3\u30c8\u7279\u6b8a\u8272 \u8f1d\u5ea6\\n\\t\\t\\tif (Random.get(randomStatusToken) % 2 == 0) {\\n\\t\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Neutral;\\n\\t\\t\\t\\tparameters.colorLightnessBody = 50;\\n\\t\\t\\t\\tparameters.colorLightnessEye = 20;\\n\\t\\t\\t} else if (Random.get(randomStatusToken) % 2 == 0) {\\n\\t\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Bright;\\n\\t\\t\\t\\tparameters.colorLightnessBody = 80;\\n\\t\\t\\t\\tparameters.colorLightnessEye = 20;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tparameters.colorTypeBody = BallcellLiquidBoyaParameters.ColorTypeBody.Dark;\\n\\t\\t\\t\\tparameters.colorLightnessBody = 20;\\n\\t\\t\\t\\tparameters.colorLightnessEye = 80;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// \u30c8\u30fc\u30af\u30f3\u306b\u7d10\u3065\u304f\u30d1\u30da\u30c3\u30c8\u7279\u6b8a\u8272 \u76ee\\n\\t\\t\\tif (Random.get(randomStatusToken) % 2 == 0) {\\n\\t\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Monotone;\\n\\t\\t\\t\\tparameters.colorHueREye = 0;\\n\\t\\t\\t\\tparameters.colorHueLEye = 0;\\n\\t\\t\\t\\tparameters.colorLightnessEye = parameters.colorLightnessEye > 50 ? 100 : 0;\\n\\t\\t\\t} else if (Random.get(randomStatusToken) % 2 == 0) {\\n\\t\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Single;\\n\\t\\t\\t\\tparameters.colorHueLEye = parameters.colorHueREye;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tparameters.colorTypeEye = BallcellLiquidBoyaParameters.ColorTypeEye.Double;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// \u80cc\u666f\u30d1\u30e9\u30e1\u30fc\u30bf\\n\\t\\t\\tuint backgroundType = Random.get(randomStatusToken) % 4;\\n\\t\\t\\tif (backgroundType == 0) { parameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.None; }\\n\\t\\t\\tif (backgroundType == 1) { parameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.Single; }\\n\\t\\t\\tif (backgroundType == 2) { parameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.Circle; }\\n\\t\\t\\tif (backgroundType == 3) { parameters.backgroundType = BallcellLiquidBoyaParameters.BackgroundType.PolkaDot; }\\n\\t\\t\\tparameters.backgroundColor = Random.get(randomStatusToken) % 360;\\n\\t\\t\\tparameters.backgroundRandom = Random.get(randomStatusToken);\\n\\t\\t}\\n\\n\\t\\treturn parameters;\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    },\r\n    \"contracts/ballcellLiquidBoya/main/BallcellLiquidBoyaMainMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// \ud83e\udd1b \ud83d\udc41\ud83d\udc44\ud83d\udc41 \ud83e\udd1c < Let's enjoy Solidity!!\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../common/BallcellLiquidBoyaParameters.sol\\\";\\nimport \\\"../../utils/Base64.sol\\\";\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\ninterface _BallcellLiquidBoyaImage {\\n\\tfunction svg(BallcellLiquidBoyaParameters.Parameters memory parameters) external pure returns (bytes memory);\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\nlibrary BallcellLiquidBoyaMainMetadata {\\n\\tfunction metadata(BallcellLiquidBoyaParameters.Parameters memory parameters, string memory tokenName, address addressContractImage) internal pure returns (string memory) {\\n\\t\\tbytes memory temporary = \\\"{\\\";\\n\\t\\ttemporary = abi.encodePacked(temporary, '\\\"name\\\": \\\"', _name(parameters, tokenName), '\\\", ');\\n\\t\\ttemporary = abi.encodePacked(temporary, '\\\"description\\\": \\\"', _description(), '\\\", ');\\n\\t\\ttemporary = abi.encodePacked(temporary, '\\\"attributes\\\": ', _attributes(parameters), \\\", \\\");\\n\\t\\ttemporary = abi.encodePacked(temporary, '\\\"image\\\": \\\"', _image(parameters, addressContractImage), '\\\"');\\n\\t\\ttemporary = abi.encodePacked(temporary, \\\"}\\\");\\n\\t\\treturn string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(temporary)));\\n\\t}\\n\\n\\tfunction _name(BallcellLiquidBoyaParameters.Parameters memory parameters, string memory tokenName) private pure returns (bytes memory) {\\n\\t\\tif (bytes(tokenName).length == 0) { tokenName = \\\"liquid boya\\\"; }\\n\\t\\treturn abi.encodePacked(tokenName, \\\" #\\\", Strings.toString(parameters.tokenId));\\n\\t}\\n\\n\\tfunction _description() private pure returns (bytes memory) {\\n\\t\\treturn \\\"ballcell liquid boya is a full on-chain NFT.\\\";\\n\\t}\\n\\n\\tfunction _attributes(BallcellLiquidBoyaParameters.Parameters memory parameters) private pure returns (bytes memory) {\\n\\t\\tif (!parameters.revealed) { return \\\"[]\\\"; }\\n\\t\\tbytes memory temporary = \\\"[\\\";\\n\\t\\tif (parameters.radiusBody < 5) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body size\\\",\\\"value\\\":\\\"small\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusBody == 5) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body size\\\",\\\"value\\\":\\\"normal\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusBody > 5) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body size\\\",\\\"value\\\":\\\"big\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusFoot < 3) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"foot size\\\",\\\"value\\\":\\\"small\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusFoot == 3) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"foot size\\\",\\\"value\\\":\\\"normal\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusFoot > 3) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"foot size\\\",\\\"value\\\":\\\"big\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHand < 2) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"hand size\\\",\\\"value\\\":\\\"small\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHand == 2) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"hand size\\\",\\\"value\\\":\\\"normal\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHand > 2) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"hand size\\\",\\\"value\\\":\\\"big\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHead < 6) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"head size\\\",\\\"value\\\":\\\"small\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHead == 6) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"head size\\\",\\\"value\\\":\\\"normal\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.radiusHead > 6) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"head size\\\",\\\"value\\\":\\\"big\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeBody == BallcellLiquidBoyaParameters.ColorTypeBody.Neutral) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body color\\\",\\\"value\\\":\\\"neutral\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeBody == BallcellLiquidBoyaParameters.ColorTypeBody.Bright) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body color\\\",\\\"value\\\":\\\"bright\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeBody == BallcellLiquidBoyaParameters.ColorTypeBody.Dark) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"body color\\\",\\\"value\\\":\\\"dark\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeEye == BallcellLiquidBoyaParameters.ColorTypeEye.Monotone) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"eye color\\\",\\\"value\\\":\\\"monotone\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeEye == BallcellLiquidBoyaParameters.ColorTypeEye.Single) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"eye color\\\",\\\"value\\\":\\\"single\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorTypeEye == BallcellLiquidBoyaParameters.ColorTypeEye.Double) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"eye color\\\",\\\"value\\\":\\\"double\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.colorFlagOne) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"special\\\",\\\"value\\\":\\\"one color\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.backgroundType == BallcellLiquidBoyaParameters.BackgroundType.None) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"background\\\",\\\"value\\\":\\\"none\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.backgroundType == BallcellLiquidBoyaParameters.BackgroundType.Single) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"background\\\",\\\"value\\\":\\\"single\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.backgroundType == BallcellLiquidBoyaParameters.BackgroundType.Circle) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"background\\\",\\\"value\\\":\\\"circle\\\"}', \\\",\\\"); }\\n\\t\\tif (parameters.backgroundType == BallcellLiquidBoyaParameters.BackgroundType.PolkaDot) { temporary = abi.encodePacked(temporary, '{\\\"trait_type\\\":\\\"background\\\",\\\"value\\\":\\\"polka dot\\\"}', \\\",\\\"); }\\n\\t\\ttemporary = abi.encodePacked(temporary, '{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"rotation\\\",\\\"value\\\":\\\"', Strings.toString(parameters.rotation), '\\\"}', \\\",\\\");\\n\\t\\ttemporary = abi.encodePacked(temporary, '{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"angle\\\",\\\"value\\\":\\\"', Strings.toString(parameters.angle), '\\\"}', \\\",\\\");\\n\\t\\ttemporary = abi.encodePacked(temporary, '{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"distance\\\",\\\"value\\\":\\\"', Strings.toString(parameters.distance), '\\\"}', \\\",\\\");\\n\\t\\ttemporary = abi.encodePacked(temporary, '{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"swing\\\",\\\"value\\\":\\\"', Strings.toString(parameters.swing), '\\\"}');\\n\\t\\treturn abi.encodePacked(temporary, \\\"]\\\");\\n\\t}\\n\\n\\tfunction _image(BallcellLiquidBoyaParameters.Parameters memory parameters, address addressContractImage) private pure returns (bytes memory) {\\n\\t\\tbytes memory temporary = _BallcellLiquidBoyaImage(addressContractImage).svg(parameters);\\n\\t\\treturn abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(temporary));\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// Xorshift\\n\\nlibrary Random {\\n\\tstruct Status {\\n\\t\\tuint256 x;\\n\\t\\tuint256 y;\\n\\t\\tuint256 z;\\n\\t\\tuint256 w;\\n\\t}\\n\\n\\tfunction init(Status memory status, uint256 seed) internal pure {\\n\\t\\tstatus.x = 123456789;\\n\\t\\tstatus.y = 362436069;\\n\\t\\tstatus.z = 521288629;\\n\\t\\tstatus.w = 88675123;\\n\\t\\tstatus.w ^= seed;\\n\\t}\\n\\n\\tfunction get(Status memory status) internal pure returns (uint256) {\\n\\t\\tuint256 x = status.x;\\n\\t\\tuint256 w = status.w;\\n\\t\\tuint256 t = (x ^ (x << 11));\\n\\t\\tstatus.x = status.y;\\n\\t\\tstatus.y = status.z;\\n\\t\\tstatus.z = status.w;\\n\\t\\tstatus.w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));\\n\\t\\treturn status.w;\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n// https://nawoo.hateblo.jp/entry/2021/09/28/203446\\n// https://github.com/Brechtpd/base64\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2884\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n\\tbytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\t/// @notice Encodes some bytes to the base64 representation\\n\\tfunction encode(bytes memory data) internal pure returns (string memory) {\\n\\t\\tuint256 len = data.length;\\n\\t\\tif (len == 0) return \\\"\\\";\\n\\n\\t\\t// multiply by 4/3 rounded up\\n\\t\\tuint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n\\t\\t// Add some extra buffer at the end\\n\\t\\tbytes memory result = new bytes(encodedLen + 32);\\n\\n\\t\\tbytes memory table = TABLE;\\n\\n\\t\\tassembly {\\n\\t\\t\\tlet tablePtr := add(table, 1)\\n\\t\\t\\tlet resultPtr := add(result, 32)\\n\\n\\t\\t\\tfor {\\n\\t\\t\\t\\tlet i := 0\\n\\t\\t\\t} lt(i, len) {\\n\\n\\t\\t\\t} {\\n\\t\\t\\t\\ti := add(i, 3)\\n\\t\\t\\t\\tlet input := and(mload(add(data, i)), 0xffffff)\\n\\n\\t\\t\\t\\tlet out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n\\t\\t\\t\\tout := shl(8, out)\\n\\t\\t\\t\\tout := add(\\n\\t\\t\\t\\t\\tout,\\n\\t\\t\\t\\t\\tand(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\tout := shl(8, out)\\n\\t\\t\\t\\tout := add(\\n\\t\\t\\t\\t\\tout,\\n\\t\\t\\t\\t\\tand(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\tout := shl(8, out)\\n\\t\\t\\t\\tout := add(\\n\\t\\t\\t\\t\\tout,\\n\\t\\t\\t\\t\\tand(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\tout := shl(224, out)\\n\\n\\t\\t\\t\\tmstore(resultPtr, out)\\n\\n\\t\\t\\t\\tresultPtr := add(resultPtr, 4)\\n\\t\\t\\t}\\n\\n\\t\\t\\tswitch mod(len, 3)\\n\\t\\t\\tcase 1 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n\\t\\t\\t}\\n\\t\\t\\tcase 2 {\\n\\t\\t\\t\\tmstore(sub(resultPtr, 1), shl(248, 0x3d))\\n\\t\\t\\t}\\n\\n\\t\\t\\tmstore(result, encodedLen)\\n\\t\\t}\\n\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n// ----------------------------------------------------------------\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintInformation\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountMint\",\"type\":\"uint256\"}],\"name\":\"mintHomepage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winner\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"mintPromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winner\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"mintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"rename\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seedPhrase\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSaleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSaleIsFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"settingAddressContractImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"settingAddressProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"settingPasscode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenArray\",\"outputs\":[{\"internalType\":\"uint16[18]\",\"name\":\"\",\"type\":\"uint16[18]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BallcellLiquidBoyaMain", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}